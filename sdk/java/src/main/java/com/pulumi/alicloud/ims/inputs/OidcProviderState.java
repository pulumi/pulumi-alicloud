// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.ims.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class OidcProviderState extends com.pulumi.resources.ResourceArgs {

    public static final OidcProviderState Empty = new OidcProviderState();

    /**
     * Client ID.
     * 
     */
    @Import(name="clientIds")
    private @Nullable Output<List<String>> clientIds;

    /**
     * @return Client ID.
     * 
     */
    public Optional<Output<List<String>>> clientIds() {
        return Optional.ofNullable(this.clientIds);
    }

    /**
     * Creation Time (UTC time).
     * 
     */
    @Import(name="createTime")
    private @Nullable Output<String> createTime;

    /**
     * @return Creation Time (UTC time).
     * 
     */
    public Optional<Output<String>> createTime() {
        return Optional.ofNullable(this.createTime);
    }

    /**
     * Description of OIDC identity provider.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Description of OIDC identity provider.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The authentication fingerprint of the HTTPS CA certificate.
     * 
     */
    @Import(name="fingerprints")
    private @Nullable Output<List<String>> fingerprints;

    /**
     * @return The authentication fingerprint of the HTTPS CA certificate.
     * 
     */
    public Optional<Output<List<String>>> fingerprints() {
        return Optional.ofNullable(this.fingerprints);
    }

    /**
     * The earliest time when an external IdP is allowed to issue an ID Token. If the iat field in the ID Token is greater than the current time, the request is rejected.Unit: hours. Value range: 1~168.
     * 
     */
    @Import(name="issuanceLimitTime")
    private @Nullable Output<Integer> issuanceLimitTime;

    /**
     * @return The earliest time when an external IdP is allowed to issue an ID Token. If the iat field in the ID Token is greater than the current time, the request is rejected.Unit: hours. Value range: 1~168.
     * 
     */
    public Optional<Output<Integer>> issuanceLimitTime() {
        return Optional.ofNullable(this.issuanceLimitTime);
    }

    /**
     * The issuer URL of the OIDC identity provider.
     * 
     */
    @Import(name="issuerUrl")
    private @Nullable Output<String> issuerUrl;

    /**
     * @return The issuer URL of the OIDC identity provider.
     * 
     */
    public Optional<Output<String>> issuerUrl() {
        return Optional.ofNullable(this.issuerUrl);
    }

    /**
     * The name of the OIDC identity provider.
     * 
     */
    @Import(name="oidcProviderName")
    private @Nullable Output<String> oidcProviderName;

    /**
     * @return The name of the OIDC identity provider.
     * 
     */
    public Optional<Output<String>> oidcProviderName() {
        return Optional.ofNullable(this.oidcProviderName);
    }

    private OidcProviderState() {}

    private OidcProviderState(OidcProviderState $) {
        this.clientIds = $.clientIds;
        this.createTime = $.createTime;
        this.description = $.description;
        this.fingerprints = $.fingerprints;
        this.issuanceLimitTime = $.issuanceLimitTime;
        this.issuerUrl = $.issuerUrl;
        this.oidcProviderName = $.oidcProviderName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(OidcProviderState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private OidcProviderState $;

        public Builder() {
            $ = new OidcProviderState();
        }

        public Builder(OidcProviderState defaults) {
            $ = new OidcProviderState(Objects.requireNonNull(defaults));
        }

        /**
         * @param clientIds Client ID.
         * 
         * @return builder
         * 
         */
        public Builder clientIds(@Nullable Output<List<String>> clientIds) {
            $.clientIds = clientIds;
            return this;
        }

        /**
         * @param clientIds Client ID.
         * 
         * @return builder
         * 
         */
        public Builder clientIds(List<String> clientIds) {
            return clientIds(Output.of(clientIds));
        }

        /**
         * @param clientIds Client ID.
         * 
         * @return builder
         * 
         */
        public Builder clientIds(String... clientIds) {
            return clientIds(List.of(clientIds));
        }

        /**
         * @param createTime Creation Time (UTC time).
         * 
         * @return builder
         * 
         */
        public Builder createTime(@Nullable Output<String> createTime) {
            $.createTime = createTime;
            return this;
        }

        /**
         * @param createTime Creation Time (UTC time).
         * 
         * @return builder
         * 
         */
        public Builder createTime(String createTime) {
            return createTime(Output.of(createTime));
        }

        /**
         * @param description Description of OIDC identity provider.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Description of OIDC identity provider.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param fingerprints The authentication fingerprint of the HTTPS CA certificate.
         * 
         * @return builder
         * 
         */
        public Builder fingerprints(@Nullable Output<List<String>> fingerprints) {
            $.fingerprints = fingerprints;
            return this;
        }

        /**
         * @param fingerprints The authentication fingerprint of the HTTPS CA certificate.
         * 
         * @return builder
         * 
         */
        public Builder fingerprints(List<String> fingerprints) {
            return fingerprints(Output.of(fingerprints));
        }

        /**
         * @param fingerprints The authentication fingerprint of the HTTPS CA certificate.
         * 
         * @return builder
         * 
         */
        public Builder fingerprints(String... fingerprints) {
            return fingerprints(List.of(fingerprints));
        }

        /**
         * @param issuanceLimitTime The earliest time when an external IdP is allowed to issue an ID Token. If the iat field in the ID Token is greater than the current time, the request is rejected.Unit: hours. Value range: 1~168.
         * 
         * @return builder
         * 
         */
        public Builder issuanceLimitTime(@Nullable Output<Integer> issuanceLimitTime) {
            $.issuanceLimitTime = issuanceLimitTime;
            return this;
        }

        /**
         * @param issuanceLimitTime The earliest time when an external IdP is allowed to issue an ID Token. If the iat field in the ID Token is greater than the current time, the request is rejected.Unit: hours. Value range: 1~168.
         * 
         * @return builder
         * 
         */
        public Builder issuanceLimitTime(Integer issuanceLimitTime) {
            return issuanceLimitTime(Output.of(issuanceLimitTime));
        }

        /**
         * @param issuerUrl The issuer URL of the OIDC identity provider.
         * 
         * @return builder
         * 
         */
        public Builder issuerUrl(@Nullable Output<String> issuerUrl) {
            $.issuerUrl = issuerUrl;
            return this;
        }

        /**
         * @param issuerUrl The issuer URL of the OIDC identity provider.
         * 
         * @return builder
         * 
         */
        public Builder issuerUrl(String issuerUrl) {
            return issuerUrl(Output.of(issuerUrl));
        }

        /**
         * @param oidcProviderName The name of the OIDC identity provider.
         * 
         * @return builder
         * 
         */
        public Builder oidcProviderName(@Nullable Output<String> oidcProviderName) {
            $.oidcProviderName = oidcProviderName;
            return this;
        }

        /**
         * @param oidcProviderName The name of the OIDC identity provider.
         * 
         * @return builder
         * 
         */
        public Builder oidcProviderName(String oidcProviderName) {
            return oidcProviderName(Output.of(oidcProviderName));
        }

        public OidcProviderState build() {
            return $;
        }
    }

}
