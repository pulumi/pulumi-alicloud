// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.vpn.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RouteEntryState extends com.pulumi.resources.ResourceArgs {

    public static final RouteEntryState Empty = new RouteEntryState();

    /**
     * The next hop of the destination route.
     * 
     */
    @Import(name="nextHop")
    private @Nullable Output<String> nextHop;

    /**
     * @return The next hop of the destination route.
     * 
     */
    public Optional<Output<String>> nextHop() {
        return Optional.ofNullable(this.nextHop);
    }

    /**
     * Whether to issue the destination route to the VPC.
     * 
     */
    @Import(name="publishVpc")
    private @Nullable Output<Boolean> publishVpc;

    /**
     * @return Whether to issue the destination route to the VPC.
     * 
     */
    public Optional<Output<Boolean>> publishVpc() {
        return Optional.ofNullable(this.publishVpc);
    }

    /**
     * The destination network segment of the destination route.
     * 
     */
    @Import(name="routeDest")
    private @Nullable Output<String> routeDest;

    /**
     * @return The destination network segment of the destination route.
     * 
     */
    public Optional<Output<String>> routeDest() {
        return Optional.ofNullable(this.routeDest);
    }

    /**
     * (Available since v1.161.0) The type of the vpn route entry.
     * 
     */
    @Import(name="routeEntryType")
    private @Nullable Output<String> routeEntryType;

    /**
     * @return (Available since v1.161.0) The type of the vpn route entry.
     * 
     */
    public Optional<Output<String>> routeEntryType() {
        return Optional.ofNullable(this.routeEntryType);
    }

    /**
     * (Available since v1.161.0) The status of the vpn route entry.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return (Available since v1.161.0) The status of the vpn route entry.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * The id of the vpn gateway.
     * 
     */
    @Import(name="vpnGatewayId")
    private @Nullable Output<String> vpnGatewayId;

    /**
     * @return The id of the vpn gateway.
     * 
     */
    public Optional<Output<String>> vpnGatewayId() {
        return Optional.ofNullable(this.vpnGatewayId);
    }

    /**
     * The value should be 0 or 100.
     * 
     */
    @Import(name="weight")
    private @Nullable Output<Integer> weight;

    /**
     * @return The value should be 0 or 100.
     * 
     */
    public Optional<Output<Integer>> weight() {
        return Optional.ofNullable(this.weight);
    }

    private RouteEntryState() {}

    private RouteEntryState(RouteEntryState $) {
        this.nextHop = $.nextHop;
        this.publishVpc = $.publishVpc;
        this.routeDest = $.routeDest;
        this.routeEntryType = $.routeEntryType;
        this.status = $.status;
        this.vpnGatewayId = $.vpnGatewayId;
        this.weight = $.weight;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RouteEntryState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RouteEntryState $;

        public Builder() {
            $ = new RouteEntryState();
        }

        public Builder(RouteEntryState defaults) {
            $ = new RouteEntryState(Objects.requireNonNull(defaults));
        }

        /**
         * @param nextHop The next hop of the destination route.
         * 
         * @return builder
         * 
         */
        public Builder nextHop(@Nullable Output<String> nextHop) {
            $.nextHop = nextHop;
            return this;
        }

        /**
         * @param nextHop The next hop of the destination route.
         * 
         * @return builder
         * 
         */
        public Builder nextHop(String nextHop) {
            return nextHop(Output.of(nextHop));
        }

        /**
         * @param publishVpc Whether to issue the destination route to the VPC.
         * 
         * @return builder
         * 
         */
        public Builder publishVpc(@Nullable Output<Boolean> publishVpc) {
            $.publishVpc = publishVpc;
            return this;
        }

        /**
         * @param publishVpc Whether to issue the destination route to the VPC.
         * 
         * @return builder
         * 
         */
        public Builder publishVpc(Boolean publishVpc) {
            return publishVpc(Output.of(publishVpc));
        }

        /**
         * @param routeDest The destination network segment of the destination route.
         * 
         * @return builder
         * 
         */
        public Builder routeDest(@Nullable Output<String> routeDest) {
            $.routeDest = routeDest;
            return this;
        }

        /**
         * @param routeDest The destination network segment of the destination route.
         * 
         * @return builder
         * 
         */
        public Builder routeDest(String routeDest) {
            return routeDest(Output.of(routeDest));
        }

        /**
         * @param routeEntryType (Available since v1.161.0) The type of the vpn route entry.
         * 
         * @return builder
         * 
         */
        public Builder routeEntryType(@Nullable Output<String> routeEntryType) {
            $.routeEntryType = routeEntryType;
            return this;
        }

        /**
         * @param routeEntryType (Available since v1.161.0) The type of the vpn route entry.
         * 
         * @return builder
         * 
         */
        public Builder routeEntryType(String routeEntryType) {
            return routeEntryType(Output.of(routeEntryType));
        }

        /**
         * @param status (Available since v1.161.0) The status of the vpn route entry.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status (Available since v1.161.0) The status of the vpn route entry.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param vpnGatewayId The id of the vpn gateway.
         * 
         * @return builder
         * 
         */
        public Builder vpnGatewayId(@Nullable Output<String> vpnGatewayId) {
            $.vpnGatewayId = vpnGatewayId;
            return this;
        }

        /**
         * @param vpnGatewayId The id of the vpn gateway.
         * 
         * @return builder
         * 
         */
        public Builder vpnGatewayId(String vpnGatewayId) {
            return vpnGatewayId(Output.of(vpnGatewayId));
        }

        /**
         * @param weight The value should be 0 or 100.
         * 
         * @return builder
         * 
         */
        public Builder weight(@Nullable Output<Integer> weight) {
            $.weight = weight;
            return this;
        }

        /**
         * @param weight The value should be 0 or 100.
         * 
         * @return builder
         * 
         */
        public Builder weight(Integer weight) {
            return weight(Output.of(weight));
        }

        public RouteEntryState build() {
            return $;
        }
    }

}
