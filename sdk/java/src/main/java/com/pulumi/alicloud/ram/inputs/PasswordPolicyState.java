// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.ram.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PasswordPolicyState extends com.pulumi.resources.ResourceArgs {

    public static final PasswordPolicyState Empty = new PasswordPolicyState();

    /**
     * Whether to restrict logon after the password expires. Value:
     * - true: After the password expires, you cannot log in to the console. You must reset the password of the RAM user through the main account or a RAM user with administrator permissions to log on normally.
     * - false (default): After the password expires, the RAM user can change the password and log on normally.
     * 
     */
    @Import(name="hardExpiry")
    private @Nullable Output<Boolean> hardExpiry;

    /**
     * @return Whether to restrict logon after the password expires. Value:
     * - true: After the password expires, you cannot log in to the console. You must reset the password of the RAM user through the main account or a RAM user with administrator permissions to log on normally.
     * - false (default): After the password expires, the RAM user can change the password and log on normally.
     * 
     */
    public Optional<Output<Boolean>> hardExpiry() {
        return Optional.ofNullable(this.hardExpiry);
    }

    /**
     * Password retry constraint. After entering the wrong password continuously for the set number of times, the account will be locked for one hour.
     * Value range: 0~32.
     * Default value: 0, which means that the password retry constraint is not enabled.
     * 
     */
    @Import(name="maxLoginAttemps")
    private @Nullable Output<Integer> maxLoginAttemps;

    /**
     * @return Password retry constraint. After entering the wrong password continuously for the set number of times, the account will be locked for one hour.
     * Value range: 0~32.
     * Default value: 0, which means that the password retry constraint is not enabled.
     * 
     */
    public Optional<Output<Integer>> maxLoginAttemps() {
        return Optional.ofNullable(this.maxLoginAttemps);
    }

    /**
     * Password validity period.
     * Value range: 0~1095. Unit: days.
     * Default value: 0, which means never expires.
     * 
     */
    @Import(name="maxPasswordAge")
    private @Nullable Output<Integer> maxPasswordAge;

    /**
     * @return Password validity period.
     * Value range: 0~1095. Unit: days.
     * Default value: 0, which means never expires.
     * 
     */
    public Optional<Output<Integer>> maxPasswordAge() {
        return Optional.ofNullable(this.maxPasswordAge);
    }

    /**
     * The minimum number of unique characters in the password.
     * Valid values: 0 to 8.
     * The default value is 0, which indicates that no limits are imposed on the number of unique characters in a password.
     * 
     */
    @Import(name="minimumPasswordDifferentCharacter")
    private @Nullable Output<Integer> minimumPasswordDifferentCharacter;

    /**
     * @return The minimum number of unique characters in the password.
     * Valid values: 0 to 8.
     * The default value is 0, which indicates that no limits are imposed on the number of unique characters in a password.
     * 
     */
    public Optional<Output<Integer>> minimumPasswordDifferentCharacter() {
        return Optional.ofNullable(this.minimumPasswordDifferentCharacter);
    }

    /**
     * The minimum number of characters in the password.
     * Valid values: 8 to 32. Default value: 8.
     * 
     */
    @Import(name="minimumPasswordLength")
    private @Nullable Output<Integer> minimumPasswordLength;

    /**
     * @return The minimum number of characters in the password.
     * Valid values: 8 to 32. Default value: 8.
     * 
     */
    public Optional<Output<Integer>> minimumPasswordLength() {
        return Optional.ofNullable(this.minimumPasswordLength);
    }

    /**
     * Whether the user name is not allowed in the password. Value:
     * - true: The password cannot contain the user name.
     * - false (default): The user name can be included in the password.
     * 
     */
    @Import(name="passwordNotContainUserName")
    private @Nullable Output<Boolean> passwordNotContainUserName;

    /**
     * @return Whether the user name is not allowed in the password. Value:
     * - true: The password cannot contain the user name.
     * - false (default): The user name can be included in the password.
     * 
     */
    public Optional<Output<Boolean>> passwordNotContainUserName() {
        return Optional.ofNullable(this.passwordNotContainUserName);
    }

    /**
     * Historical password check policy.
     * Do not use the previous N Passwords. The value range of N is 0 to 24.
     * Default value: 0, indicating that the historical password check policy is not enabled.
     * 
     */
    @Import(name="passwordReusePrevention")
    private @Nullable Output<Integer> passwordReusePrevention;

    /**
     * @return Historical password check policy.
     * Do not use the previous N Passwords. The value range of N is 0 to 24.
     * Default value: 0, indicating that the historical password check policy is not enabled.
     * 
     */
    public Optional<Output<Integer>> passwordReusePrevention() {
        return Optional.ofNullable(this.passwordReusePrevention);
    }

    /**
     * Specifies whether the password must contain lowercase letters. Valid values:
     * - true
     * - false (default)
     * 
     */
    @Import(name="requireLowercaseCharacters")
    private @Nullable Output<Boolean> requireLowercaseCharacters;

    /**
     * @return Specifies whether the password must contain lowercase letters. Valid values:
     * - true
     * - false (default)
     * 
     */
    public Optional<Output<Boolean>> requireLowercaseCharacters() {
        return Optional.ofNullable(this.requireLowercaseCharacters);
    }

    /**
     * Specifies whether the password must contain digits. Valid values:
     * - true
     * - false (default)
     * 
     */
    @Import(name="requireNumbers")
    private @Nullable Output<Boolean> requireNumbers;

    /**
     * @return Specifies whether the password must contain digits. Valid values:
     * - true
     * - false (default)
     * 
     */
    public Optional<Output<Boolean>> requireNumbers() {
        return Optional.ofNullable(this.requireNumbers);
    }

    /**
     * Specifies whether the password must contain special characters. Valid values:
     * - true
     * - false (default)
     * 
     */
    @Import(name="requireSymbols")
    private @Nullable Output<Boolean> requireSymbols;

    /**
     * @return Specifies whether the password must contain special characters. Valid values:
     * - true
     * - false (default)
     * 
     */
    public Optional<Output<Boolean>> requireSymbols() {
        return Optional.ofNullable(this.requireSymbols);
    }

    /**
     * Specifies whether the password must contain uppercase letters. Valid values:
     * - true
     * - false (default)
     * 
     */
    @Import(name="requireUppercaseCharacters")
    private @Nullable Output<Boolean> requireUppercaseCharacters;

    /**
     * @return Specifies whether the password must contain uppercase letters. Valid values:
     * - true
     * - false (default)
     * 
     */
    public Optional<Output<Boolean>> requireUppercaseCharacters() {
        return Optional.ofNullable(this.requireUppercaseCharacters);
    }

    private PasswordPolicyState() {}

    private PasswordPolicyState(PasswordPolicyState $) {
        this.hardExpiry = $.hardExpiry;
        this.maxLoginAttemps = $.maxLoginAttemps;
        this.maxPasswordAge = $.maxPasswordAge;
        this.minimumPasswordDifferentCharacter = $.minimumPasswordDifferentCharacter;
        this.minimumPasswordLength = $.minimumPasswordLength;
        this.passwordNotContainUserName = $.passwordNotContainUserName;
        this.passwordReusePrevention = $.passwordReusePrevention;
        this.requireLowercaseCharacters = $.requireLowercaseCharacters;
        this.requireNumbers = $.requireNumbers;
        this.requireSymbols = $.requireSymbols;
        this.requireUppercaseCharacters = $.requireUppercaseCharacters;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PasswordPolicyState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PasswordPolicyState $;

        public Builder() {
            $ = new PasswordPolicyState();
        }

        public Builder(PasswordPolicyState defaults) {
            $ = new PasswordPolicyState(Objects.requireNonNull(defaults));
        }

        /**
         * @param hardExpiry Whether to restrict logon after the password expires. Value:
         * - true: After the password expires, you cannot log in to the console. You must reset the password of the RAM user through the main account or a RAM user with administrator permissions to log on normally.
         * - false (default): After the password expires, the RAM user can change the password and log on normally.
         * 
         * @return builder
         * 
         */
        public Builder hardExpiry(@Nullable Output<Boolean> hardExpiry) {
            $.hardExpiry = hardExpiry;
            return this;
        }

        /**
         * @param hardExpiry Whether to restrict logon after the password expires. Value:
         * - true: After the password expires, you cannot log in to the console. You must reset the password of the RAM user through the main account or a RAM user with administrator permissions to log on normally.
         * - false (default): After the password expires, the RAM user can change the password and log on normally.
         * 
         * @return builder
         * 
         */
        public Builder hardExpiry(Boolean hardExpiry) {
            return hardExpiry(Output.of(hardExpiry));
        }

        /**
         * @param maxLoginAttemps Password retry constraint. After entering the wrong password continuously for the set number of times, the account will be locked for one hour.
         * Value range: 0~32.
         * Default value: 0, which means that the password retry constraint is not enabled.
         * 
         * @return builder
         * 
         */
        public Builder maxLoginAttemps(@Nullable Output<Integer> maxLoginAttemps) {
            $.maxLoginAttemps = maxLoginAttemps;
            return this;
        }

        /**
         * @param maxLoginAttemps Password retry constraint. After entering the wrong password continuously for the set number of times, the account will be locked for one hour.
         * Value range: 0~32.
         * Default value: 0, which means that the password retry constraint is not enabled.
         * 
         * @return builder
         * 
         */
        public Builder maxLoginAttemps(Integer maxLoginAttemps) {
            return maxLoginAttemps(Output.of(maxLoginAttemps));
        }

        /**
         * @param maxPasswordAge Password validity period.
         * Value range: 0~1095. Unit: days.
         * Default value: 0, which means never expires.
         * 
         * @return builder
         * 
         */
        public Builder maxPasswordAge(@Nullable Output<Integer> maxPasswordAge) {
            $.maxPasswordAge = maxPasswordAge;
            return this;
        }

        /**
         * @param maxPasswordAge Password validity period.
         * Value range: 0~1095. Unit: days.
         * Default value: 0, which means never expires.
         * 
         * @return builder
         * 
         */
        public Builder maxPasswordAge(Integer maxPasswordAge) {
            return maxPasswordAge(Output.of(maxPasswordAge));
        }

        /**
         * @param minimumPasswordDifferentCharacter The minimum number of unique characters in the password.
         * Valid values: 0 to 8.
         * The default value is 0, which indicates that no limits are imposed on the number of unique characters in a password.
         * 
         * @return builder
         * 
         */
        public Builder minimumPasswordDifferentCharacter(@Nullable Output<Integer> minimumPasswordDifferentCharacter) {
            $.minimumPasswordDifferentCharacter = minimumPasswordDifferentCharacter;
            return this;
        }

        /**
         * @param minimumPasswordDifferentCharacter The minimum number of unique characters in the password.
         * Valid values: 0 to 8.
         * The default value is 0, which indicates that no limits are imposed on the number of unique characters in a password.
         * 
         * @return builder
         * 
         */
        public Builder minimumPasswordDifferentCharacter(Integer minimumPasswordDifferentCharacter) {
            return minimumPasswordDifferentCharacter(Output.of(minimumPasswordDifferentCharacter));
        }

        /**
         * @param minimumPasswordLength The minimum number of characters in the password.
         * Valid values: 8 to 32. Default value: 8.
         * 
         * @return builder
         * 
         */
        public Builder minimumPasswordLength(@Nullable Output<Integer> minimumPasswordLength) {
            $.minimumPasswordLength = minimumPasswordLength;
            return this;
        }

        /**
         * @param minimumPasswordLength The minimum number of characters in the password.
         * Valid values: 8 to 32. Default value: 8.
         * 
         * @return builder
         * 
         */
        public Builder minimumPasswordLength(Integer minimumPasswordLength) {
            return minimumPasswordLength(Output.of(minimumPasswordLength));
        }

        /**
         * @param passwordNotContainUserName Whether the user name is not allowed in the password. Value:
         * - true: The password cannot contain the user name.
         * - false (default): The user name can be included in the password.
         * 
         * @return builder
         * 
         */
        public Builder passwordNotContainUserName(@Nullable Output<Boolean> passwordNotContainUserName) {
            $.passwordNotContainUserName = passwordNotContainUserName;
            return this;
        }

        /**
         * @param passwordNotContainUserName Whether the user name is not allowed in the password. Value:
         * - true: The password cannot contain the user name.
         * - false (default): The user name can be included in the password.
         * 
         * @return builder
         * 
         */
        public Builder passwordNotContainUserName(Boolean passwordNotContainUserName) {
            return passwordNotContainUserName(Output.of(passwordNotContainUserName));
        }

        /**
         * @param passwordReusePrevention Historical password check policy.
         * Do not use the previous N Passwords. The value range of N is 0 to 24.
         * Default value: 0, indicating that the historical password check policy is not enabled.
         * 
         * @return builder
         * 
         */
        public Builder passwordReusePrevention(@Nullable Output<Integer> passwordReusePrevention) {
            $.passwordReusePrevention = passwordReusePrevention;
            return this;
        }

        /**
         * @param passwordReusePrevention Historical password check policy.
         * Do not use the previous N Passwords. The value range of N is 0 to 24.
         * Default value: 0, indicating that the historical password check policy is not enabled.
         * 
         * @return builder
         * 
         */
        public Builder passwordReusePrevention(Integer passwordReusePrevention) {
            return passwordReusePrevention(Output.of(passwordReusePrevention));
        }

        /**
         * @param requireLowercaseCharacters Specifies whether the password must contain lowercase letters. Valid values:
         * - true
         * - false (default)
         * 
         * @return builder
         * 
         */
        public Builder requireLowercaseCharacters(@Nullable Output<Boolean> requireLowercaseCharacters) {
            $.requireLowercaseCharacters = requireLowercaseCharacters;
            return this;
        }

        /**
         * @param requireLowercaseCharacters Specifies whether the password must contain lowercase letters. Valid values:
         * - true
         * - false (default)
         * 
         * @return builder
         * 
         */
        public Builder requireLowercaseCharacters(Boolean requireLowercaseCharacters) {
            return requireLowercaseCharacters(Output.of(requireLowercaseCharacters));
        }

        /**
         * @param requireNumbers Specifies whether the password must contain digits. Valid values:
         * - true
         * - false (default)
         * 
         * @return builder
         * 
         */
        public Builder requireNumbers(@Nullable Output<Boolean> requireNumbers) {
            $.requireNumbers = requireNumbers;
            return this;
        }

        /**
         * @param requireNumbers Specifies whether the password must contain digits. Valid values:
         * - true
         * - false (default)
         * 
         * @return builder
         * 
         */
        public Builder requireNumbers(Boolean requireNumbers) {
            return requireNumbers(Output.of(requireNumbers));
        }

        /**
         * @param requireSymbols Specifies whether the password must contain special characters. Valid values:
         * - true
         * - false (default)
         * 
         * @return builder
         * 
         */
        public Builder requireSymbols(@Nullable Output<Boolean> requireSymbols) {
            $.requireSymbols = requireSymbols;
            return this;
        }

        /**
         * @param requireSymbols Specifies whether the password must contain special characters. Valid values:
         * - true
         * - false (default)
         * 
         * @return builder
         * 
         */
        public Builder requireSymbols(Boolean requireSymbols) {
            return requireSymbols(Output.of(requireSymbols));
        }

        /**
         * @param requireUppercaseCharacters Specifies whether the password must contain uppercase letters. Valid values:
         * - true
         * - false (default)
         * 
         * @return builder
         * 
         */
        public Builder requireUppercaseCharacters(@Nullable Output<Boolean> requireUppercaseCharacters) {
            $.requireUppercaseCharacters = requireUppercaseCharacters;
            return this;
        }

        /**
         * @param requireUppercaseCharacters Specifies whether the password must contain uppercase letters. Valid values:
         * - true
         * - false (default)
         * 
         * @return builder
         * 
         */
        public Builder requireUppercaseCharacters(Boolean requireUppercaseCharacters) {
            return requireUppercaseCharacters(Output.of(requireUppercaseCharacters));
        }

        public PasswordPolicyState build() {
            return $;
        }
    }

}
