// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.aligreen;

import com.pulumi.alicloud.Utilities;
import com.pulumi.alicloud.aligreen.OssStockTaskArgs;
import com.pulumi.alicloud.aligreen.inputs.OssStockTaskState;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * ## Import
 * 
 * Aligreen Oss Stock Task can be imported using the id, e.g.
 * 
 * ```sh
 * $ pulumi import alicloud:aligreen/ossStockTask:OssStockTask example &lt;id&gt;
 * ```
 * 
 */
@ResourceType(type="alicloud:aligreen/ossStockTask:OssStockTask")
public class OssStockTask extends com.pulumi.resources.CustomResource {
    /**
     * Voice auto freeze configuration. Example:{&#34;type&#34;:&#34;suggestion&#34;,&#34;value&#34;:&#34;block,review&#34;}. The results are frozen according to the suggestion in the speech detection results.
     * 
     */
    @Export(name="audioAntispamFreezeConfig", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> audioAntispamFreezeConfig;

    /**
     * @return Voice auto freeze configuration. Example:{&#34;type&#34;:&#34;suggestion&#34;,&#34;value&#34;:&#34;block,review&#34;}. The results are frozen according to the suggestion in the speech detection results.
     * 
     */
    public Output<Optional<String>> audioAntispamFreezeConfig() {
        return Codegen.optional(this.audioAntispamFreezeConfig);
    }
    /**
     * Audio detection auto freeze switch. Value: true: automatically freeze, false: not automatically freeze.
     * 
     */
    @Export(name="audioAutoFreezeOpened", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> audioAutoFreezeOpened;

    /**
     * @return Audio detection auto freeze switch. Value: true: automatically freeze, false: not automatically freeze.
     * 
     */
    public Output<Optional<Boolean>> audioAutoFreezeOpened() {
        return Codegen.optional(this.audioAutoFreezeOpened);
    }
    /**
     * Resource property field representing the maximum size of a single audio. 1~2048MB, the default is 200MB, more than not detected.
     * 
     */
    @Export(name="audioMaxSize", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> audioMaxSize;

    /**
     * @return Resource property field representing the maximum size of a single audio. 1~2048MB, the default is 200MB, more than not detected.
     * 
     */
    public Output<Optional<Integer>> audioMaxSize() {
        return Codegen.optional(this.audioMaxSize);
    }
    /**
     * oss stock scan task detect audio. true: scan audio, false: do not scan audio
     * 
     */
    @Export(name="audioOpened", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> audioOpened;

    /**
     * @return oss stock scan task detect audio. true: scan audio, false: do not scan audio
     * 
     */
    public Output<Optional<Boolean>> audioOpened() {
        return Codegen.optional(this.audioOpened);
    }
    /**
     * The upper limit of voice scan in the oss stock scan task. The default value is 1000/Bucket.
     * 
     */
    @Export(name="audioScanLimit", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> audioScanLimit;

    /**
     * @return The upper limit of voice scan in the oss stock scan task. The default value is 1000/Bucket.
     * 
     */
    public Output<Optional<Integer>> audioScanLimit() {
        return Codegen.optional(this.audioScanLimit);
    }
    /**
     * The audio detection scenarios included in the oss stock scan task. Set the value to antispam.
     * 
     */
    @Export(name="audioScenes", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> audioScenes;

    /**
     * @return The audio detection scenarios included in the oss stock scan task. Set the value to antispam.
     * 
     */
    public Output<Optional<String>> audioScenes() {
        return Codegen.optional(this.audioScenes);
    }
    /**
     * Automatic freeze type. Value: acl: modify permissions, copy: Move files
     * 
     */
    @Export(name="autoFreezeType", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> autoFreezeType;

    /**
     * @return Automatic freeze type. Value: acl: modify permissions, copy: Move files
     * 
     */
    public Output<Optional<String>> autoFreezeType() {
        return Codegen.optional(this.autoFreezeType);
    }
    /**
     * Business scenarios used by the oss stock scan task
     * 
     */
    @Export(name="bizType", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> bizType;

    /**
     * @return Business scenarios used by the oss stock scan task
     * 
     */
    public Output<Optional<String>> bizType() {
        return Codegen.optional(this.bizType);
    }
    /**
     * The bucket configuration list of the oss stock scan task. Example:[{&#34;Bucket&#34;:&#34;bucket_01&#34;,&#34;Selected&#34;:true,&#34;Prefixes&#34;:[&#34;img/test_&#34;],&#34;Type&#34;:&#34;exclude&#34;}]
     * 
     */
    @Export(name="buckets", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> buckets;

    /**
     * @return The bucket configuration list of the oss stock scan task. Example:[{&#34;Bucket&#34;:&#34;bucket_01&#34;,&#34;Selected&#34;:true,&#34;Prefixes&#34;:[&#34;img/test_&#34;],&#34;Type&#34;:&#34;exclude&#34;}]
     * 
     */
    public Output<Optional<String>> buckets() {
        return Codegen.optional(this.buckets);
    }
    /**
     * The ID of the primary key of the notification message bound to the oss stock scan task.
     * 
     */
    @Export(name="callbackId", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> callbackId;

    /**
     * @return The ID of the primary key of the notification message bound to the oss stock scan task.
     * 
     */
    public Output<Optional<Integer>> callbackId() {
        return Codegen.optional(this.callbackId);
    }
    /**
     * The end time of the file upload time range indicates the scanning of files uploaded before this time point.
     * 
     */
    @Export(name="endDate", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> endDate;

    /**
     * @return The end time of the file upload time range indicates the scanning of files uploaded before this time point.
     * 
     */
    public Output<Optional<String>> endDate() {
        return Codegen.optional(this.endDate);
    }
    /**
     * Picture automatically freezes the configuration of ad scenes. Example: {&#34;type&#34;: &#34;suggestion&#34;, &#34;value&#34;: &#34;block,review&#34;}. The result will be frozen according to the suggestion in the picture detection result.
     * 
     */
    @Export(name="imageAdFreezeConfig", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> imageAdFreezeConfig;

    /**
     * @return Picture automatically freezes the configuration of ad scenes. Example: {&#34;type&#34;: &#34;suggestion&#34;, &#34;value&#34;: &#34;block,review&#34;}. The result will be frozen according to the suggestion in the picture detection result.
     * 
     */
    public Output<Optional<String>> imageAdFreezeConfig() {
        return Codegen.optional(this.imageAdFreezeConfig);
    }
    /**
     * Picture detection auto freeze switch. Value: true: auto freeze, false: not auto freeze.
     * 
     */
    @Export(name="imageAutoFreezeOpened", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> imageAutoFreezeOpened;

    /**
     * @return Picture detection auto freeze switch. Value: true: auto freeze, false: not auto freeze.
     * 
     */
    public Output<Optional<Boolean>> imageAutoFreezeOpened() {
        return Codegen.optional(this.imageAutoFreezeOpened);
    }
    /**
     * Picture automatic freezing live scene configuration. Example:{&#34;type&#34;:&#34;suggestion&#34;,&#34;value&#34;:&#34;block,review&#34;}. The result will be frozen according to the suggestion in the picture detection result.
     * 
     */
    @Export(name="imageLiveFreezeConfig", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> imageLiveFreezeConfig;

    /**
     * @return Picture automatic freezing live scene configuration. Example:{&#34;type&#34;:&#34;suggestion&#34;,&#34;value&#34;:&#34;block,review&#34;}. The result will be frozen according to the suggestion in the picture detection result.
     * 
     */
    public Output<Optional<String>> imageLiveFreezeConfig() {
        return Codegen.optional(this.imageLiveFreezeConfig);
    }
    /**
     * oss stock scan task detect images. true: scan images, false: do not scan images
     * 
     */
    @Export(name="imageOpened", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> imageOpened;

    /**
     * @return oss stock scan task detect images. true: scan images, false: do not scan images
     * 
     */
    public Output<Optional<Boolean>> imageOpened() {
        return Codegen.optional(this.imageOpened);
    }
    /**
     * Picture automatic freezing porn scene configuration. Example: {&#34;type&#34;: &#34;suggestion&#34;, &#34;value&#34;: &#34;block,review&#34;}. The result will be frozen according to the suggestion in the picture detection result.
     * 
     */
    @Export(name="imagePornFreezeConfig", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> imagePornFreezeConfig;

    /**
     * @return Picture automatic freezing porn scene configuration. Example: {&#34;type&#34;: &#34;suggestion&#34;, &#34;value&#34;: &#34;block,review&#34;}. The result will be frozen according to the suggestion in the picture detection result.
     * 
     */
    public Output<Optional<String>> imagePornFreezeConfig() {
        return Codegen.optional(this.imagePornFreezeConfig);
    }
    /**
     * The upper limit for scanning images in the oss stock scan task. The default value is 10000 images per Bucket.
     * 
     */
    @Export(name="imageScanLimit", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> imageScanLimit;

    /**
     * @return The upper limit for scanning images in the oss stock scan task. The default value is 10000 images per Bucket.
     * 
     */
    public Output<Optional<Integer>> imageScanLimit() {
        return Codegen.optional(this.imageScanLimit);
    }
    /**
     * The image moderation scenario included in the oss stock scan task.Valid values: porn: pornography detection terrorism: terrorist content detection ad: ad violation detection live: undesirable scene detection
     * 
     */
    @Export(name="imageScenes", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> imageScenes;

    /**
     * @return The image moderation scenario included in the oss stock scan task.Valid values: porn: pornography detection terrorism: terrorist content detection ad: ad violation detection live: undesirable scene detection
     * 
     */
    public Output<Optional<List<String>>> imageScenes() {
        return Codegen.optional(this.imageScenes);
    }
    /**
     * The picture automatically freezes the configuration of terrorism scenes. Example: {&#34;type&#34;: &#34;suggestion&#34;, &#34;value&#34;: &#34;block,review&#34;}. The result will be frozen according to the suggestion in the picture detection result.
     * 
     */
    @Export(name="imageTerrorismFreezeConfig", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> imageTerrorismFreezeConfig;

    /**
     * @return The picture automatically freezes the configuration of terrorism scenes. Example: {&#34;type&#34;: &#34;suggestion&#34;, &#34;value&#34;: &#34;block,review&#34;}. The result will be frozen according to the suggestion in the picture detection result.
     * 
     */
    public Output<Optional<String>> imageTerrorismFreezeConfig() {
        return Codegen.optional(this.imageTerrorismFreezeConfig);
    }
    /**
     * Whether the oss stock scan task detects images with file names without suffixes. true: Detect pictures with file names without suffixes, false: Do not detect pictures with file names without suffixes
     * 
     */
    @Export(name="scanImageNoFileType", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> scanImageNoFileType;

    /**
     * @return Whether the oss stock scan task detects images with file names without suffixes. true: Detect pictures with file names without suffixes, false: Do not detect pictures with file names without suffixes
     * 
     */
    public Output<Optional<Boolean>> scanImageNoFileType() {
        return Codegen.optional(this.scanImageNoFileType);
    }
    /**
     * The start time of the file upload time range represents the files uploaded after scanning this time point.
     * 
     */
    @Export(name="startDate", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> startDate;

    /**
     * @return The start time of the file upload time range represents the files uploaded after scanning this time point.
     * 
     */
    public Output<Optional<String>> startDate() {
        return Codegen.optional(this.startDate);
    }
    /**
     * The video automatically freezes the configuration of ad scenarios. Example:{&#34;type&#34;:&#34;suggestion&#34;,&#34;value&#34;:&#34;block,review&#34;}. The results will be frozen according to the suggestion in the video detection results.
     * 
     */
    @Export(name="videoAdFreezeConfig", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> videoAdFreezeConfig;

    /**
     * @return The video automatically freezes the configuration of ad scenarios. Example:{&#34;type&#34;:&#34;suggestion&#34;,&#34;value&#34;:&#34;block,review&#34;}. The results will be frozen according to the suggestion in the video detection results.
     * 
     */
    public Output<Optional<String>> videoAdFreezeConfig() {
        return Codegen.optional(this.videoAdFreezeConfig);
    }
    /**
     * Video detection auto freeze switch. Value: true: automatically freeze, false: not automatically freeze.
     * 
     */
    @Export(name="videoAutoFreezeOpened", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> videoAutoFreezeOpened;

    /**
     * @return Video detection auto freeze switch. Value: true: automatically freeze, false: not automatically freeze.
     * 
     */
    public Output<Optional<Boolean>> videoAutoFreezeOpened() {
        return Codegen.optional(this.videoAutoFreezeOpened);
    }
    /**
     * Resource attribute field representing the framing frequency. 1~60 seconds/frame, the default is 1 second/frame
     * 
     */
    @Export(name="videoFrameInterval", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> videoFrameInterval;

    /**
     * @return Resource attribute field representing the framing frequency. 1~60 seconds/frame, the default is 1 second/frame
     * 
     */
    public Output<Optional<Integer>> videoFrameInterval() {
        return Codegen.optional(this.videoFrameInterval);
    }
    /**
     * Video automatic freeze live scene configuration. Example:{&#34;type&#34;:&#34;suggestion&#34;,&#34;value&#34;:&#34;block,review&#34;}. The results will be frozen according to the suggestion in the video detection results.
     * 
     */
    @Export(name="videoLiveFreezeConfig", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> videoLiveFreezeConfig;

    /**
     * @return Video automatic freeze live scene configuration. Example:{&#34;type&#34;:&#34;suggestion&#34;,&#34;value&#34;:&#34;block,review&#34;}. The results will be frozen according to the suggestion in the video detection results.
     * 
     */
    public Output<Optional<String>> videoLiveFreezeConfig() {
        return Codegen.optional(this.videoLiveFreezeConfig);
    }
    /**
     * A resource attribute field that represents the upper limit of a single video frame cut. 5 to 20000 frames, the default is 200 frames
     * 
     */
    @Export(name="videoMaxFrames", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> videoMaxFrames;

    /**
     * @return A resource attribute field that represents the upper limit of a single video frame cut. 5 to 20000 frames, the default is 200 frames
     * 
     */
    public Output<Optional<Integer>> videoMaxFrames() {
        return Codegen.optional(this.videoMaxFrames);
    }
    /**
     * Resource property field representing the maximum size of a single video. 1~2048MB, the default is 500MB, more than not detected.
     * 
     */
    @Export(name="videoMaxSize", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> videoMaxSize;

    /**
     * @return Resource property field representing the maximum size of a single video. 1~2048MB, the default is 500MB, more than not detected.
     * 
     */
    public Output<Optional<Integer>> videoMaxSize() {
        return Codegen.optional(this.videoMaxSize);
    }
    /**
     * oss stock scan task detect video. true: scan video, false: do not scan video
     * 
     */
    @Export(name="videoOpened", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> videoOpened;

    /**
     * @return oss stock scan task detect video. true: scan video, false: do not scan video
     * 
     */
    public Output<Optional<Boolean>> videoOpened() {
        return Codegen.optional(this.videoOpened);
    }
    /**
     * Video automatic freezing porn scene configuration. Example: {&#34;type&#34;: &#34;suggestion&#34;, &#34;value&#34;: &#34;block,review&#34;}. The result will be frozen according to the suggestion in the video detection result.
     * 
     */
    @Export(name="videoPornFreezeConfig", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> videoPornFreezeConfig;

    /**
     * @return Video automatic freezing porn scene configuration. Example: {&#34;type&#34;: &#34;suggestion&#34;, &#34;value&#34;: &#34;block,review&#34;}. The result will be frozen according to the suggestion in the video detection result.
     * 
     */
    public Output<Optional<String>> videoPornFreezeConfig() {
        return Codegen.optional(this.videoPornFreezeConfig);
    }
    /**
     * The upper limit of video scanning in the oss stock scan task. The default value is 1000/Bucket.
     * 
     */
    @Export(name="videoScanLimit", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> videoScanLimit;

    /**
     * @return The upper limit of video scanning in the oss stock scan task. The default value is 1000/Bucket.
     * 
     */
    public Output<Optional<Integer>> videoScanLimit() {
        return Codegen.optional(this.videoScanLimit);
    }
    /**
     * The video detection scenarios included in the oss stock scan task. porn: pornography detection terrorism: terrorist content detection ad: ad violation detection live: undesirable scene detection antispam: Video voice antispam
     * 
     */
    @Export(name="videoScenes", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> videoScenes;

    /**
     * @return The video detection scenarios included in the oss stock scan task. porn: pornography detection terrorism: terrorist content detection ad: ad violation detection live: undesirable scene detection antispam: Video voice antispam
     * 
     */
    public Output<Optional<String>> videoScenes() {
        return Codegen.optional(this.videoScenes);
    }
    /**
     * The video automatically freezes the configuration of terrorism scenes. Example:{&#34;type&#34;:&#34;suggestion&#34;,&#34;value&#34;:&#34;block,review&#34;}. The results will be frozen according to the suggestion in the video detection results.
     * 
     */
    @Export(name="videoTerrorismFreezeConfig", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> videoTerrorismFreezeConfig;

    /**
     * @return The video automatically freezes the configuration of terrorism scenes. Example:{&#34;type&#34;:&#34;suggestion&#34;,&#34;value&#34;:&#34;block,review&#34;}. The results will be frozen according to the suggestion in the video detection results.
     * 
     */
    public Output<Optional<String>> videoTerrorismFreezeConfig() {
        return Codegen.optional(this.videoTerrorismFreezeConfig);
    }
    /**
     * Voice auto freeze configuration in video. Example:{&#34;type&#34;:&#34;suggestion&#34;,&#34;value&#34;:&#34;block,review&#34;}. The results will be frozen according to the suggestion in the video detection results.
     * 
     */
    @Export(name="videoVoiceAntispamFreezeConfig", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> videoVoiceAntispamFreezeConfig;

    /**
     * @return Voice auto freeze configuration in video. Example:{&#34;type&#34;:&#34;suggestion&#34;,&#34;value&#34;:&#34;block,review&#34;}. The results will be frozen according to the suggestion in the video detection results.
     * 
     */
    public Output<Optional<String>> videoVoiceAntispamFreezeConfig() {
        return Codegen.optional(this.videoVoiceAntispamFreezeConfig);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public OssStockTask(java.lang.String name) {
        this(name, OssStockTaskArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public OssStockTask(java.lang.String name, @Nullable OssStockTaskArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public OssStockTask(java.lang.String name, @Nullable OssStockTaskArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("alicloud:aligreen/ossStockTask:OssStockTask", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private OssStockTask(java.lang.String name, Output<java.lang.String> id, @Nullable OssStockTaskState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("alicloud:aligreen/ossStockTask:OssStockTask", name, state, makeResourceOptions(options, id), false);
    }

    private static OssStockTaskArgs makeArgs(@Nullable OssStockTaskArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? OssStockTaskArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static OssStockTask get(java.lang.String name, Output<java.lang.String> id, @Nullable OssStockTaskState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new OssStockTask(name, id, state, options);
    }
}
