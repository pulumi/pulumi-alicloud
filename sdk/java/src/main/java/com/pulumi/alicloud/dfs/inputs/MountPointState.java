// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.dfs.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class MountPointState extends com.pulumi.resources.ResourceArgs {

    public static final MountPointState Empty = new MountPointState();

    /**
     * The id of the permission group associated with the Mount point, which is used to set the access permissions of the Mount point.
     * 
     */
    @Import(name="accessGroupId")
    private @Nullable Output<String> accessGroupId;

    /**
     * @return The id of the permission group associated with the Mount point, which is used to set the access permissions of the Mount point.
     * 
     */
    public Optional<Output<String>> accessGroupId() {
        return Optional.ofNullable(this.accessGroupId);
    }

    /**
     * The mount point alias prefix, which specifies the mount point alias prefix.
     * 
     */
    @Import(name="aliasPrefix")
    private @Nullable Output<String> aliasPrefix;

    /**
     * @return The mount point alias prefix, which specifies the mount point alias prefix.
     * 
     */
    public Optional<Output<String>> aliasPrefix() {
        return Optional.ofNullable(this.aliasPrefix);
    }

    /**
     * The creation time of the Mount point resource.
     * 
     */
    @Import(name="createTime")
    private @Nullable Output<String> createTime;

    /**
     * @return The creation time of the Mount point resource.
     * 
     */
    public Optional<Output<String>> createTime() {
        return Optional.ofNullable(this.createTime);
    }

    /**
     * The description of the Mount point.  No more than 32 characters in length.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The description of the Mount point.  No more than 32 characters in length.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Unique file system identifier, used to retrieve specified file system resources.
     * 
     */
    @Import(name="fileSystemId")
    private @Nullable Output<String> fileSystemId;

    /**
     * @return Unique file system identifier, used to retrieve specified file system resources.
     * 
     */
    public Optional<Output<String>> fileSystemId() {
        return Optional.ofNullable(this.fileSystemId);
    }

    /**
     * The unique identifier of the Mount point, which is used to retrieve the specified mount point resources.
     * 
     */
    @Import(name="mountPointId")
    private @Nullable Output<String> mountPointId;

    /**
     * @return The unique identifier of the Mount point, which is used to retrieve the specified mount point resources.
     * 
     */
    public Optional<Output<String>> mountPointId() {
        return Optional.ofNullable(this.mountPointId);
    }

    /**
     * The network type of the Mount point.  Only VPC (VPC) is supported.
     * 
     */
    @Import(name="networkType")
    private @Nullable Output<String> networkType;

    /**
     * @return The network type of the Mount point.  Only VPC (VPC) is supported.
     * 
     */
    public Optional<Output<String>> networkType() {
        return Optional.ofNullable(this.networkType);
    }

    /**
     * (Available since v1.242.0) The region ID of the Mount Point.
     * 
     */
    @Import(name="regionId")
    private @Nullable Output<String> regionId;

    /**
     * @return (Available since v1.242.0) The region ID of the Mount Point.
     * 
     */
    public Optional<Output<String>> regionId() {
        return Optional.ofNullable(this.regionId);
    }

    /**
     * Mount point status. Value: Inactive: Disable mount points Active: Activate the mount point.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return Mount point status. Value: Inactive: Disable mount points Active: Activate the mount point.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * The ID of the VPC. Specifies the VPC environment to which the mount point belongs.
     * 
     */
    @Import(name="vpcId")
    private @Nullable Output<String> vpcId;

    /**
     * @return The ID of the VPC. Specifies the VPC environment to which the mount point belongs.
     * 
     */
    public Optional<Output<String>> vpcId() {
        return Optional.ofNullable(this.vpcId);
    }

    /**
     * VSwitch ID, which specifies the VSwitch resource used to create the mount point.
     * 
     */
    @Import(name="vswitchId")
    private @Nullable Output<String> vswitchId;

    /**
     * @return VSwitch ID, which specifies the VSwitch resource used to create the mount point.
     * 
     */
    public Optional<Output<String>> vswitchId() {
        return Optional.ofNullable(this.vswitchId);
    }

    private MountPointState() {}

    private MountPointState(MountPointState $) {
        this.accessGroupId = $.accessGroupId;
        this.aliasPrefix = $.aliasPrefix;
        this.createTime = $.createTime;
        this.description = $.description;
        this.fileSystemId = $.fileSystemId;
        this.mountPointId = $.mountPointId;
        this.networkType = $.networkType;
        this.regionId = $.regionId;
        this.status = $.status;
        this.vpcId = $.vpcId;
        this.vswitchId = $.vswitchId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MountPointState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MountPointState $;

        public Builder() {
            $ = new MountPointState();
        }

        public Builder(MountPointState defaults) {
            $ = new MountPointState(Objects.requireNonNull(defaults));
        }

        /**
         * @param accessGroupId The id of the permission group associated with the Mount point, which is used to set the access permissions of the Mount point.
         * 
         * @return builder
         * 
         */
        public Builder accessGroupId(@Nullable Output<String> accessGroupId) {
            $.accessGroupId = accessGroupId;
            return this;
        }

        /**
         * @param accessGroupId The id of the permission group associated with the Mount point, which is used to set the access permissions of the Mount point.
         * 
         * @return builder
         * 
         */
        public Builder accessGroupId(String accessGroupId) {
            return accessGroupId(Output.of(accessGroupId));
        }

        /**
         * @param aliasPrefix The mount point alias prefix, which specifies the mount point alias prefix.
         * 
         * @return builder
         * 
         */
        public Builder aliasPrefix(@Nullable Output<String> aliasPrefix) {
            $.aliasPrefix = aliasPrefix;
            return this;
        }

        /**
         * @param aliasPrefix The mount point alias prefix, which specifies the mount point alias prefix.
         * 
         * @return builder
         * 
         */
        public Builder aliasPrefix(String aliasPrefix) {
            return aliasPrefix(Output.of(aliasPrefix));
        }

        /**
         * @param createTime The creation time of the Mount point resource.
         * 
         * @return builder
         * 
         */
        public Builder createTime(@Nullable Output<String> createTime) {
            $.createTime = createTime;
            return this;
        }

        /**
         * @param createTime The creation time of the Mount point resource.
         * 
         * @return builder
         * 
         */
        public Builder createTime(String createTime) {
            return createTime(Output.of(createTime));
        }

        /**
         * @param description The description of the Mount point.  No more than 32 characters in length.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The description of the Mount point.  No more than 32 characters in length.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param fileSystemId Unique file system identifier, used to retrieve specified file system resources.
         * 
         * @return builder
         * 
         */
        public Builder fileSystemId(@Nullable Output<String> fileSystemId) {
            $.fileSystemId = fileSystemId;
            return this;
        }

        /**
         * @param fileSystemId Unique file system identifier, used to retrieve specified file system resources.
         * 
         * @return builder
         * 
         */
        public Builder fileSystemId(String fileSystemId) {
            return fileSystemId(Output.of(fileSystemId));
        }

        /**
         * @param mountPointId The unique identifier of the Mount point, which is used to retrieve the specified mount point resources.
         * 
         * @return builder
         * 
         */
        public Builder mountPointId(@Nullable Output<String> mountPointId) {
            $.mountPointId = mountPointId;
            return this;
        }

        /**
         * @param mountPointId The unique identifier of the Mount point, which is used to retrieve the specified mount point resources.
         * 
         * @return builder
         * 
         */
        public Builder mountPointId(String mountPointId) {
            return mountPointId(Output.of(mountPointId));
        }

        /**
         * @param networkType The network type of the Mount point.  Only VPC (VPC) is supported.
         * 
         * @return builder
         * 
         */
        public Builder networkType(@Nullable Output<String> networkType) {
            $.networkType = networkType;
            return this;
        }

        /**
         * @param networkType The network type of the Mount point.  Only VPC (VPC) is supported.
         * 
         * @return builder
         * 
         */
        public Builder networkType(String networkType) {
            return networkType(Output.of(networkType));
        }

        /**
         * @param regionId (Available since v1.242.0) The region ID of the Mount Point.
         * 
         * @return builder
         * 
         */
        public Builder regionId(@Nullable Output<String> regionId) {
            $.regionId = regionId;
            return this;
        }

        /**
         * @param regionId (Available since v1.242.0) The region ID of the Mount Point.
         * 
         * @return builder
         * 
         */
        public Builder regionId(String regionId) {
            return regionId(Output.of(regionId));
        }

        /**
         * @param status Mount point status. Value: Inactive: Disable mount points Active: Activate the mount point.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status Mount point status. Value: Inactive: Disable mount points Active: Activate the mount point.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param vpcId The ID of the VPC. Specifies the VPC environment to which the mount point belongs.
         * 
         * @return builder
         * 
         */
        public Builder vpcId(@Nullable Output<String> vpcId) {
            $.vpcId = vpcId;
            return this;
        }

        /**
         * @param vpcId The ID of the VPC. Specifies the VPC environment to which the mount point belongs.
         * 
         * @return builder
         * 
         */
        public Builder vpcId(String vpcId) {
            return vpcId(Output.of(vpcId));
        }

        /**
         * @param vswitchId VSwitch ID, which specifies the VSwitch resource used to create the mount point.
         * 
         * @return builder
         * 
         */
        public Builder vswitchId(@Nullable Output<String> vswitchId) {
            $.vswitchId = vswitchId;
            return this;
        }

        /**
         * @param vswitchId VSwitch ID, which specifies the VSwitch resource used to create the mount point.
         * 
         * @return builder
         * 
         */
        public Builder vswitchId(String vswitchId) {
            return vswitchId(Output.of(vswitchId));
        }

        public MountPointState build() {
            return $;
        }
    }

}
