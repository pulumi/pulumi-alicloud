// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.mongodb.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ShardingInstanceShardList {
    /**
     * @return -(Required) Node specification. see [Instance specifications](https://www.alibabacloud.com/help/doc-detail/57141.htm).
     * 
     */
    private String nodeClass;
    /**
     * @return The ID of the Config Server node.
     * 
     */
    private @Nullable String nodeId;
    /**
     * @return - Custom storage space; value range: [10, 1,000]
     * - 10-GB increments. Unit: GB.
     * 
     */
    private Integer nodeStorage;
    /**
     * @return The number of read-only nodes in shard node. Valid values: 0 to 5. Default value: 0.
     * 
     */
    private @Nullable Integer readonlyReplicas;

    private ShardingInstanceShardList() {}
    /**
     * @return -(Required) Node specification. see [Instance specifications](https://www.alibabacloud.com/help/doc-detail/57141.htm).
     * 
     */
    public String nodeClass() {
        return this.nodeClass;
    }
    /**
     * @return The ID of the Config Server node.
     * 
     */
    public Optional<String> nodeId() {
        return Optional.ofNullable(this.nodeId);
    }
    /**
     * @return - Custom storage space; value range: [10, 1,000]
     * - 10-GB increments. Unit: GB.
     * 
     */
    public Integer nodeStorage() {
        return this.nodeStorage;
    }
    /**
     * @return The number of read-only nodes in shard node. Valid values: 0 to 5. Default value: 0.
     * 
     */
    public Optional<Integer> readonlyReplicas() {
        return Optional.ofNullable(this.readonlyReplicas);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ShardingInstanceShardList defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String nodeClass;
        private @Nullable String nodeId;
        private Integer nodeStorage;
        private @Nullable Integer readonlyReplicas;
        public Builder() {}
        public Builder(ShardingInstanceShardList defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.nodeClass = defaults.nodeClass;
    	      this.nodeId = defaults.nodeId;
    	      this.nodeStorage = defaults.nodeStorage;
    	      this.readonlyReplicas = defaults.readonlyReplicas;
        }

        @CustomType.Setter
        public Builder nodeClass(String nodeClass) {
            this.nodeClass = Objects.requireNonNull(nodeClass);
            return this;
        }
        @CustomType.Setter
        public Builder nodeId(@Nullable String nodeId) {
            this.nodeId = nodeId;
            return this;
        }
        @CustomType.Setter
        public Builder nodeStorage(Integer nodeStorage) {
            this.nodeStorage = Objects.requireNonNull(nodeStorage);
            return this;
        }
        @CustomType.Setter
        public Builder readonlyReplicas(@Nullable Integer readonlyReplicas) {
            this.readonlyReplicas = readonlyReplicas;
            return this;
        }
        public ShardingInstanceShardList build() {
            final var o = new ShardingInstanceShardList();
            o.nodeClass = nodeClass;
            o.nodeId = nodeId;
            o.nodeStorage = nodeStorage;
            o.readonlyReplicas = readonlyReplicas;
            return o;
        }
    }
}
