// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.dms.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetEnterpriseInstancesInstance {
    /**
     * @return The name of the data link for the database instance.
     * 
     */
    private String dataLinkName;
    /**
     * @return The logon password of the database instance.
     * 
     */
    private String databasePassword;
    /**
     * @return The logon username of the database instance.
     * 
     */
    private String databaseUser;
    /**
     * @return The ID of the database administrator (DBA) of the database instance.
     * 
     */
    private String dbaId;
    /**
     * @return The nickname of the DBA.
     * 
     */
    private String dbaNickName;
    /**
     * @return Indicates whether the online data description language (DDL) service was enabled for the database instance.
     * 
     */
    private Integer ddlOnline;
    /**
     * @return The ID of the Elastic Compute Service (ECS) instance to which the database instance belongs.
     * 
     */
    private String ecsInstanceId;
    /**
     * @return The region where the database instance resides.
     * 
     */
    private String ecsRegion;
    /**
     * @return The type of the environment to which the database instance belongs.
     * 
     */
    private String envType;
    /**
     * @return The timeout period for exporting the database instance.
     * 
     */
    private Integer exportTimeout;
    /**
     * @return The endpoint of the database instance.
     * 
     */
    private String host;
    private String id;
    /**
     * @return The alias of the database instance.
     * 
     */
    private String instanceAlias;
    /**
     * @return The ID of the database instance.
     * 
     */
    private String instanceId;
    private String instanceName;
    /**
     * @return The source of the database instance.
     * 
     */
    private String instanceSource;
    /**
     * @return The ID of the database instance.
     * 
     */
    private String instanceType;
    /**
     * @return The connection port of the database instance.
     * 
     */
    private Integer port;
    /**
     * @return The timeout period for querying the database instance.
     * 
     */
    private Integer queryTimeout;
    /**
     * @return The ID of the security rule for the database instance.
     * 
     */
    private String safeRuleId;
    /**
     * @return The system ID (SID) of the database instance.
     * 
     */
    private String sid;
    /**
     * @return Filter the results by status of the DMS Enterprise Instances. Valid values: `NORMAL`, `UNAVAILABLE`, `UNKNOWN`, `DELETED`, `DISABLE`.
     * 
     */
    private String status;
    /**
     * @return Indicates whether cross-database query was enabled for the database instance.
     * 
     */
    private Integer useDsql;
    /**
     * @return The ID of the Virtual Private Cloud (VPC) to which the database instance belongs.
     * 
     */
    private String vpcId;

    private GetEnterpriseInstancesInstance() {}
    /**
     * @return The name of the data link for the database instance.
     * 
     */
    public String dataLinkName() {
        return this.dataLinkName;
    }
    /**
     * @return The logon password of the database instance.
     * 
     */
    public String databasePassword() {
        return this.databasePassword;
    }
    /**
     * @return The logon username of the database instance.
     * 
     */
    public String databaseUser() {
        return this.databaseUser;
    }
    /**
     * @return The ID of the database administrator (DBA) of the database instance.
     * 
     */
    public String dbaId() {
        return this.dbaId;
    }
    /**
     * @return The nickname of the DBA.
     * 
     */
    public String dbaNickName() {
        return this.dbaNickName;
    }
    /**
     * @return Indicates whether the online data description language (DDL) service was enabled for the database instance.
     * 
     */
    public Integer ddlOnline() {
        return this.ddlOnline;
    }
    /**
     * @return The ID of the Elastic Compute Service (ECS) instance to which the database instance belongs.
     * 
     */
    public String ecsInstanceId() {
        return this.ecsInstanceId;
    }
    /**
     * @return The region where the database instance resides.
     * 
     */
    public String ecsRegion() {
        return this.ecsRegion;
    }
    /**
     * @return The type of the environment to which the database instance belongs.
     * 
     */
    public String envType() {
        return this.envType;
    }
    /**
     * @return The timeout period for exporting the database instance.
     * 
     */
    public Integer exportTimeout() {
        return this.exportTimeout;
    }
    /**
     * @return The endpoint of the database instance.
     * 
     */
    public String host() {
        return this.host;
    }
    public String id() {
        return this.id;
    }
    /**
     * @return The alias of the database instance.
     * 
     */
    public String instanceAlias() {
        return this.instanceAlias;
    }
    /**
     * @return The ID of the database instance.
     * 
     */
    public String instanceId() {
        return this.instanceId;
    }
    public String instanceName() {
        return this.instanceName;
    }
    /**
     * @return The source of the database instance.
     * 
     */
    public String instanceSource() {
        return this.instanceSource;
    }
    /**
     * @return The ID of the database instance.
     * 
     */
    public String instanceType() {
        return this.instanceType;
    }
    /**
     * @return The connection port of the database instance.
     * 
     */
    public Integer port() {
        return this.port;
    }
    /**
     * @return The timeout period for querying the database instance.
     * 
     */
    public Integer queryTimeout() {
        return this.queryTimeout;
    }
    /**
     * @return The ID of the security rule for the database instance.
     * 
     */
    public String safeRuleId() {
        return this.safeRuleId;
    }
    /**
     * @return The system ID (SID) of the database instance.
     * 
     */
    public String sid() {
        return this.sid;
    }
    /**
     * @return Filter the results by status of the DMS Enterprise Instances. Valid values: `NORMAL`, `UNAVAILABLE`, `UNKNOWN`, `DELETED`, `DISABLE`.
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return Indicates whether cross-database query was enabled for the database instance.
     * 
     */
    public Integer useDsql() {
        return this.useDsql;
    }
    /**
     * @return The ID of the Virtual Private Cloud (VPC) to which the database instance belongs.
     * 
     */
    public String vpcId() {
        return this.vpcId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetEnterpriseInstancesInstance defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String dataLinkName;
        private String databasePassword;
        private String databaseUser;
        private String dbaId;
        private String dbaNickName;
        private Integer ddlOnline;
        private String ecsInstanceId;
        private String ecsRegion;
        private String envType;
        private Integer exportTimeout;
        private String host;
        private String id;
        private String instanceAlias;
        private String instanceId;
        private String instanceName;
        private String instanceSource;
        private String instanceType;
        private Integer port;
        private Integer queryTimeout;
        private String safeRuleId;
        private String sid;
        private String status;
        private Integer useDsql;
        private String vpcId;
        public Builder() {}
        public Builder(GetEnterpriseInstancesInstance defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.dataLinkName = defaults.dataLinkName;
    	      this.databasePassword = defaults.databasePassword;
    	      this.databaseUser = defaults.databaseUser;
    	      this.dbaId = defaults.dbaId;
    	      this.dbaNickName = defaults.dbaNickName;
    	      this.ddlOnline = defaults.ddlOnline;
    	      this.ecsInstanceId = defaults.ecsInstanceId;
    	      this.ecsRegion = defaults.ecsRegion;
    	      this.envType = defaults.envType;
    	      this.exportTimeout = defaults.exportTimeout;
    	      this.host = defaults.host;
    	      this.id = defaults.id;
    	      this.instanceAlias = defaults.instanceAlias;
    	      this.instanceId = defaults.instanceId;
    	      this.instanceName = defaults.instanceName;
    	      this.instanceSource = defaults.instanceSource;
    	      this.instanceType = defaults.instanceType;
    	      this.port = defaults.port;
    	      this.queryTimeout = defaults.queryTimeout;
    	      this.safeRuleId = defaults.safeRuleId;
    	      this.sid = defaults.sid;
    	      this.status = defaults.status;
    	      this.useDsql = defaults.useDsql;
    	      this.vpcId = defaults.vpcId;
        }

        @CustomType.Setter
        public Builder dataLinkName(String dataLinkName) {
            this.dataLinkName = Objects.requireNonNull(dataLinkName);
            return this;
        }
        @CustomType.Setter
        public Builder databasePassword(String databasePassword) {
            this.databasePassword = Objects.requireNonNull(databasePassword);
            return this;
        }
        @CustomType.Setter
        public Builder databaseUser(String databaseUser) {
            this.databaseUser = Objects.requireNonNull(databaseUser);
            return this;
        }
        @CustomType.Setter
        public Builder dbaId(String dbaId) {
            this.dbaId = Objects.requireNonNull(dbaId);
            return this;
        }
        @CustomType.Setter
        public Builder dbaNickName(String dbaNickName) {
            this.dbaNickName = Objects.requireNonNull(dbaNickName);
            return this;
        }
        @CustomType.Setter
        public Builder ddlOnline(Integer ddlOnline) {
            this.ddlOnline = Objects.requireNonNull(ddlOnline);
            return this;
        }
        @CustomType.Setter
        public Builder ecsInstanceId(String ecsInstanceId) {
            this.ecsInstanceId = Objects.requireNonNull(ecsInstanceId);
            return this;
        }
        @CustomType.Setter
        public Builder ecsRegion(String ecsRegion) {
            this.ecsRegion = Objects.requireNonNull(ecsRegion);
            return this;
        }
        @CustomType.Setter
        public Builder envType(String envType) {
            this.envType = Objects.requireNonNull(envType);
            return this;
        }
        @CustomType.Setter
        public Builder exportTimeout(Integer exportTimeout) {
            this.exportTimeout = Objects.requireNonNull(exportTimeout);
            return this;
        }
        @CustomType.Setter
        public Builder host(String host) {
            this.host = Objects.requireNonNull(host);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder instanceAlias(String instanceAlias) {
            this.instanceAlias = Objects.requireNonNull(instanceAlias);
            return this;
        }
        @CustomType.Setter
        public Builder instanceId(String instanceId) {
            this.instanceId = Objects.requireNonNull(instanceId);
            return this;
        }
        @CustomType.Setter
        public Builder instanceName(String instanceName) {
            this.instanceName = Objects.requireNonNull(instanceName);
            return this;
        }
        @CustomType.Setter
        public Builder instanceSource(String instanceSource) {
            this.instanceSource = Objects.requireNonNull(instanceSource);
            return this;
        }
        @CustomType.Setter
        public Builder instanceType(String instanceType) {
            this.instanceType = Objects.requireNonNull(instanceType);
            return this;
        }
        @CustomType.Setter
        public Builder port(Integer port) {
            this.port = Objects.requireNonNull(port);
            return this;
        }
        @CustomType.Setter
        public Builder queryTimeout(Integer queryTimeout) {
            this.queryTimeout = Objects.requireNonNull(queryTimeout);
            return this;
        }
        @CustomType.Setter
        public Builder safeRuleId(String safeRuleId) {
            this.safeRuleId = Objects.requireNonNull(safeRuleId);
            return this;
        }
        @CustomType.Setter
        public Builder sid(String sid) {
            this.sid = Objects.requireNonNull(sid);
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            this.status = Objects.requireNonNull(status);
            return this;
        }
        @CustomType.Setter
        public Builder useDsql(Integer useDsql) {
            this.useDsql = Objects.requireNonNull(useDsql);
            return this;
        }
        @CustomType.Setter
        public Builder vpcId(String vpcId) {
            this.vpcId = Objects.requireNonNull(vpcId);
            return this;
        }
        public GetEnterpriseInstancesInstance build() {
            final var o = new GetEnterpriseInstancesInstance();
            o.dataLinkName = dataLinkName;
            o.databasePassword = databasePassword;
            o.databaseUser = databaseUser;
            o.dbaId = dbaId;
            o.dbaNickName = dbaNickName;
            o.ddlOnline = ddlOnline;
            o.ecsInstanceId = ecsInstanceId;
            o.ecsRegion = ecsRegion;
            o.envType = envType;
            o.exportTimeout = exportTimeout;
            o.host = host;
            o.id = id;
            o.instanceAlias = instanceAlias;
            o.instanceId = instanceId;
            o.instanceName = instanceName;
            o.instanceSource = instanceSource;
            o.instanceType = instanceType;
            o.port = port;
            o.queryTimeout = queryTimeout;
            o.safeRuleId = safeRuleId;
            o.sid = sid;
            o.status = status;
            o.useDsql = useDsql;
            o.vpcId = vpcId;
            return o;
        }
    }
}
