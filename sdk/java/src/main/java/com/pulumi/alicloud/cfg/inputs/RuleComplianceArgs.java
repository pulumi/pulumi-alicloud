// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.cfg.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RuleComplianceArgs extends com.pulumi.resources.ResourceArgs {

    public static final RuleComplianceArgs Empty = new RuleComplianceArgs();

    /**
     * The type of compliance. Valid values: `COMPLIANT`, `NON_COMPLIANT`, `NOT_APPLICABLE`, `INSUFFICIENT_DATA`.
     * 
     */
    @Import(name="complianceType")
    private @Nullable Output<String> complianceType;

    /**
     * @return The type of compliance. Valid values: `COMPLIANT`, `NON_COMPLIANT`, `NOT_APPLICABLE`, `INSUFFICIENT_DATA`.
     * 
     */
    public Optional<Output<String>> complianceType() {
        return Optional.ofNullable(this.complianceType);
    }

    /**
     * The count of compliance.
     * 
     */
    @Import(name="count")
    private @Nullable Output<Integer> count;

    /**
     * @return The count of compliance.
     * 
     */
    public Optional<Output<Integer>> count() {
        return Optional.ofNullable(this.count);
    }

    private RuleComplianceArgs() {}

    private RuleComplianceArgs(RuleComplianceArgs $) {
        this.complianceType = $.complianceType;
        this.count = $.count;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RuleComplianceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RuleComplianceArgs $;

        public Builder() {
            $ = new RuleComplianceArgs();
        }

        public Builder(RuleComplianceArgs defaults) {
            $ = new RuleComplianceArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param complianceType The type of compliance. Valid values: `COMPLIANT`, `NON_COMPLIANT`, `NOT_APPLICABLE`, `INSUFFICIENT_DATA`.
         * 
         * @return builder
         * 
         */
        public Builder complianceType(@Nullable Output<String> complianceType) {
            $.complianceType = complianceType;
            return this;
        }

        /**
         * @param complianceType The type of compliance. Valid values: `COMPLIANT`, `NON_COMPLIANT`, `NOT_APPLICABLE`, `INSUFFICIENT_DATA`.
         * 
         * @return builder
         * 
         */
        public Builder complianceType(String complianceType) {
            return complianceType(Output.of(complianceType));
        }

        /**
         * @param count The count of compliance.
         * 
         * @return builder
         * 
         */
        public Builder count(@Nullable Output<Integer> count) {
            $.count = count;
            return this;
        }

        /**
         * @param count The count of compliance.
         * 
         * @return builder
         * 
         */
        public Builder count(Integer count) {
            return count(Output.of(count));
        }

        public RuleComplianceArgs build() {
            return $;
        }
    }

}
