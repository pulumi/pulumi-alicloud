// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.cloudsso;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class UserProvisioningArgs extends com.pulumi.resources.ResourceArgs {

    public static final UserProvisioningArgs Empty = new UserProvisioningArgs();

    /**
     * The processing policy for users who have been synchronized when deleting synchronization
     * 
     */
    @Import(name="deletionStrategy", required=true)
    private Output<String> deletionStrategy;

    /**
     * @return The processing policy for users who have been synchronized when deleting synchronization
     * 
     */
    public Output<String> deletionStrategy() {
        return this.deletionStrategy;
    }

    /**
     * Description of User Synchronization
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Description of User Synchronization
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The ID of the directory to which the synchronization belongs
     * 
     */
    @Import(name="directoryId", required=true)
    private Output<String> directoryId;

    /**
     * @return The ID of the directory to which the synchronization belongs
     * 
     */
    public Output<String> directoryId() {
        return this.directoryId;
    }

    /**
     * Processing Policy for Synchronization Conflicts
     * 
     */
    @Import(name="duplicationStrategy", required=true)
    private Output<String> duplicationStrategy;

    /**
     * @return Processing Policy for Synchronization Conflicts
     * 
     */
    public Output<String> duplicationStrategy() {
        return this.duplicationStrategy;
    }

    /**
     * The ID of the CloudSSO user/group associated with the synchronization.
     * 
     */
    @Import(name="principalId", required=true)
    private Output<String> principalId;

    /**
     * @return The ID of the CloudSSO user/group associated with the synchronization.
     * 
     */
    public Output<String> principalId() {
        return this.principalId;
    }

    /**
     * The ID of the CloudSSO user/group associated with the synchronization.
     * 
     */
    @Import(name="principalType", required=true)
    private Output<String> principalType;

    /**
     * @return The ID of the CloudSSO user/group associated with the synchronization.
     * 
     */
    public Output<String> principalType() {
        return this.principalType;
    }

    /**
     * The ID of the destination associated with the synchronization.
     * 
     */
    @Import(name="targetId", required=true)
    private Output<String> targetId;

    /**
     * @return The ID of the destination associated with the synchronization.
     * 
     */
    public Output<String> targetId() {
        return this.targetId;
    }

    /**
     * The target type associated with the synchronization
     * 
     */
    @Import(name="targetType", required=true)
    private Output<String> targetType;

    /**
     * @return The target type associated with the synchronization
     * 
     */
    public Output<String> targetType() {
        return this.targetType;
    }

    private UserProvisioningArgs() {}

    private UserProvisioningArgs(UserProvisioningArgs $) {
        this.deletionStrategy = $.deletionStrategy;
        this.description = $.description;
        this.directoryId = $.directoryId;
        this.duplicationStrategy = $.duplicationStrategy;
        this.principalId = $.principalId;
        this.principalType = $.principalType;
        this.targetId = $.targetId;
        this.targetType = $.targetType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(UserProvisioningArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private UserProvisioningArgs $;

        public Builder() {
            $ = new UserProvisioningArgs();
        }

        public Builder(UserProvisioningArgs defaults) {
            $ = new UserProvisioningArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param deletionStrategy The processing policy for users who have been synchronized when deleting synchronization
         * 
         * @return builder
         * 
         */
        public Builder deletionStrategy(Output<String> deletionStrategy) {
            $.deletionStrategy = deletionStrategy;
            return this;
        }

        /**
         * @param deletionStrategy The processing policy for users who have been synchronized when deleting synchronization
         * 
         * @return builder
         * 
         */
        public Builder deletionStrategy(String deletionStrategy) {
            return deletionStrategy(Output.of(deletionStrategy));
        }

        /**
         * @param description Description of User Synchronization
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Description of User Synchronization
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param directoryId The ID of the directory to which the synchronization belongs
         * 
         * @return builder
         * 
         */
        public Builder directoryId(Output<String> directoryId) {
            $.directoryId = directoryId;
            return this;
        }

        /**
         * @param directoryId The ID of the directory to which the synchronization belongs
         * 
         * @return builder
         * 
         */
        public Builder directoryId(String directoryId) {
            return directoryId(Output.of(directoryId));
        }

        /**
         * @param duplicationStrategy Processing Policy for Synchronization Conflicts
         * 
         * @return builder
         * 
         */
        public Builder duplicationStrategy(Output<String> duplicationStrategy) {
            $.duplicationStrategy = duplicationStrategy;
            return this;
        }

        /**
         * @param duplicationStrategy Processing Policy for Synchronization Conflicts
         * 
         * @return builder
         * 
         */
        public Builder duplicationStrategy(String duplicationStrategy) {
            return duplicationStrategy(Output.of(duplicationStrategy));
        }

        /**
         * @param principalId The ID of the CloudSSO user/group associated with the synchronization.
         * 
         * @return builder
         * 
         */
        public Builder principalId(Output<String> principalId) {
            $.principalId = principalId;
            return this;
        }

        /**
         * @param principalId The ID of the CloudSSO user/group associated with the synchronization.
         * 
         * @return builder
         * 
         */
        public Builder principalId(String principalId) {
            return principalId(Output.of(principalId));
        }

        /**
         * @param principalType The ID of the CloudSSO user/group associated with the synchronization.
         * 
         * @return builder
         * 
         */
        public Builder principalType(Output<String> principalType) {
            $.principalType = principalType;
            return this;
        }

        /**
         * @param principalType The ID of the CloudSSO user/group associated with the synchronization.
         * 
         * @return builder
         * 
         */
        public Builder principalType(String principalType) {
            return principalType(Output.of(principalType));
        }

        /**
         * @param targetId The ID of the destination associated with the synchronization.
         * 
         * @return builder
         * 
         */
        public Builder targetId(Output<String> targetId) {
            $.targetId = targetId;
            return this;
        }

        /**
         * @param targetId The ID of the destination associated with the synchronization.
         * 
         * @return builder
         * 
         */
        public Builder targetId(String targetId) {
            return targetId(Output.of(targetId));
        }

        /**
         * @param targetType The target type associated with the synchronization
         * 
         * @return builder
         * 
         */
        public Builder targetType(Output<String> targetType) {
            $.targetType = targetType;
            return this;
        }

        /**
         * @param targetType The target type associated with the synchronization
         * 
         * @return builder
         * 
         */
        public Builder targetType(String targetType) {
            return targetType(Output.of(targetType));
        }

        public UserProvisioningArgs build() {
            if ($.deletionStrategy == null) {
                throw new MissingRequiredPropertyException("UserProvisioningArgs", "deletionStrategy");
            }
            if ($.directoryId == null) {
                throw new MissingRequiredPropertyException("UserProvisioningArgs", "directoryId");
            }
            if ($.duplicationStrategy == null) {
                throw new MissingRequiredPropertyException("UserProvisioningArgs", "duplicationStrategy");
            }
            if ($.principalId == null) {
                throw new MissingRequiredPropertyException("UserProvisioningArgs", "principalId");
            }
            if ($.principalType == null) {
                throw new MissingRequiredPropertyException("UserProvisioningArgs", "principalType");
            }
            if ($.targetId == null) {
                throw new MissingRequiredPropertyException("UserProvisioningArgs", "targetId");
            }
            if ($.targetType == null) {
                throw new MissingRequiredPropertyException("UserProvisioningArgs", "targetType");
            }
            return $;
        }
    }

}
