// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.eflo;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class VscArgs extends com.pulumi.resources.ResourceArgs {

    public static final VscArgs Empty = new VscArgs();

    /**
     * The ID of the Node.
     * 
     */
    @Import(name="nodeId", required=true)
    private Output<String> nodeId;

    /**
     * @return The ID of the Node.
     * 
     */
    public Output<String> nodeId() {
        return this.nodeId;
    }

    /**
     * The ID of the resource group.
     * 
     */
    @Import(name="resourceGroupId")
    private @Nullable Output<String> resourceGroupId;

    /**
     * @return The ID of the resource group.
     * 
     */
    public Optional<Output<String>> resourceGroupId() {
        return Optional.ofNullable(this.resourceGroupId);
    }

    /**
     * The tag of the resource.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return The tag of the resource.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * The name of the Vsc.
     * 
     */
    @Import(name="vscName")
    private @Nullable Output<String> vscName;

    /**
     * @return The name of the Vsc.
     * 
     */
    public Optional<Output<String>> vscName() {
        return Optional.ofNullable(this.vscName);
    }

    /**
     * The type of the Vsc. Default value: `primary`. Valid values: `primary`.
     * 
     */
    @Import(name="vscType")
    private @Nullable Output<String> vscType;

    /**
     * @return The type of the Vsc. Default value: `primary`. Valid values: `primary`.
     * 
     */
    public Optional<Output<String>> vscType() {
        return Optional.ofNullable(this.vscType);
    }

    private VscArgs() {}

    private VscArgs(VscArgs $) {
        this.nodeId = $.nodeId;
        this.resourceGroupId = $.resourceGroupId;
        this.tags = $.tags;
        this.vscName = $.vscName;
        this.vscType = $.vscType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VscArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VscArgs $;

        public Builder() {
            $ = new VscArgs();
        }

        public Builder(VscArgs defaults) {
            $ = new VscArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param nodeId The ID of the Node.
         * 
         * @return builder
         * 
         */
        public Builder nodeId(Output<String> nodeId) {
            $.nodeId = nodeId;
            return this;
        }

        /**
         * @param nodeId The ID of the Node.
         * 
         * @return builder
         * 
         */
        public Builder nodeId(String nodeId) {
            return nodeId(Output.of(nodeId));
        }

        /**
         * @param resourceGroupId The ID of the resource group.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupId(@Nullable Output<String> resourceGroupId) {
            $.resourceGroupId = resourceGroupId;
            return this;
        }

        /**
         * @param resourceGroupId The ID of the resource group.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupId(String resourceGroupId) {
            return resourceGroupId(Output.of(resourceGroupId));
        }

        /**
         * @param tags The tag of the resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags The tag of the resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param vscName The name of the Vsc.
         * 
         * @return builder
         * 
         */
        public Builder vscName(@Nullable Output<String> vscName) {
            $.vscName = vscName;
            return this;
        }

        /**
         * @param vscName The name of the Vsc.
         * 
         * @return builder
         * 
         */
        public Builder vscName(String vscName) {
            return vscName(Output.of(vscName));
        }

        /**
         * @param vscType The type of the Vsc. Default value: `primary`. Valid values: `primary`.
         * 
         * @return builder
         * 
         */
        public Builder vscType(@Nullable Output<String> vscType) {
            $.vscType = vscType;
            return this;
        }

        /**
         * @param vscType The type of the Vsc. Default value: `primary`. Valid values: `primary`.
         * 
         * @return builder
         * 
         */
        public Builder vscType(String vscType) {
            return vscType(Output.of(vscType));
        }

        public VscArgs build() {
            if ($.nodeId == null) {
                throw new MissingRequiredPropertyException("VscArgs", "nodeId");
            }
            return $;
        }
    }

}
