// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.cloudstoragegateway;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GatewayLoggingArgs extends com.pulumi.resources.ResourceArgs {

    public static final GatewayLoggingArgs Empty = new GatewayLoggingArgs();

    /**
     * The ID of the Gateway.
     * 
     */
    @Import(name="gatewayId", required=true)
    private Output<String> gatewayId;

    /**
     * @return The ID of the Gateway.
     * 
     */
    public Output<String> gatewayId() {
        return this.gatewayId;
    }

    /**
     * The name of the Log Store.
     * 
     */
    @Import(name="slsLogstore", required=true)
    private Output<String> slsLogstore;

    /**
     * @return The name of the Log Store.
     * 
     */
    public Output<String> slsLogstore() {
        return this.slsLogstore;
    }

    /**
     * The name of the Project.
     * 
     */
    @Import(name="slsProject", required=true)
    private Output<String> slsProject;

    /**
     * @return The name of the Project.
     * 
     */
    public Output<String> slsProject() {
        return this.slsProject;
    }

    /**
     * The status of the resource. Valid values: `Enabled`, `Disable`.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return The status of the resource. Valid values: `Enabled`, `Disable`.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    private GatewayLoggingArgs() {}

    private GatewayLoggingArgs(GatewayLoggingArgs $) {
        this.gatewayId = $.gatewayId;
        this.slsLogstore = $.slsLogstore;
        this.slsProject = $.slsProject;
        this.status = $.status;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GatewayLoggingArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GatewayLoggingArgs $;

        public Builder() {
            $ = new GatewayLoggingArgs();
        }

        public Builder(GatewayLoggingArgs defaults) {
            $ = new GatewayLoggingArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param gatewayId The ID of the Gateway.
         * 
         * @return builder
         * 
         */
        public Builder gatewayId(Output<String> gatewayId) {
            $.gatewayId = gatewayId;
            return this;
        }

        /**
         * @param gatewayId The ID of the Gateway.
         * 
         * @return builder
         * 
         */
        public Builder gatewayId(String gatewayId) {
            return gatewayId(Output.of(gatewayId));
        }

        /**
         * @param slsLogstore The name of the Log Store.
         * 
         * @return builder
         * 
         */
        public Builder slsLogstore(Output<String> slsLogstore) {
            $.slsLogstore = slsLogstore;
            return this;
        }

        /**
         * @param slsLogstore The name of the Log Store.
         * 
         * @return builder
         * 
         */
        public Builder slsLogstore(String slsLogstore) {
            return slsLogstore(Output.of(slsLogstore));
        }

        /**
         * @param slsProject The name of the Project.
         * 
         * @return builder
         * 
         */
        public Builder slsProject(Output<String> slsProject) {
            $.slsProject = slsProject;
            return this;
        }

        /**
         * @param slsProject The name of the Project.
         * 
         * @return builder
         * 
         */
        public Builder slsProject(String slsProject) {
            return slsProject(Output.of(slsProject));
        }

        /**
         * @param status The status of the resource. Valid values: `Enabled`, `Disable`.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status The status of the resource. Valid values: `Enabled`, `Disable`.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        public GatewayLoggingArgs build() {
            if ($.gatewayId == null) {
                throw new MissingRequiredPropertyException("GatewayLoggingArgs", "gatewayId");
            }
            if ($.slsLogstore == null) {
                throw new MissingRequiredPropertyException("GatewayLoggingArgs", "slsLogstore");
            }
            if ($.slsProject == null) {
                throw new MissingRequiredPropertyException("GatewayLoggingArgs", "slsProject");
            }
            return $;
        }
    }

}
