// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.databasefilesystem;

import com.pulumi.alicloud.databasefilesystem.inputs.InstanceEcsListArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class InstanceArgs extends com.pulumi.resources.ResourceArgs {

    public static final InstanceArgs Empty = new InstanceArgs();

    /**
     * The number of CPU cores and the upper limit of memory used by the database file storage instance.
     * 
     */
    @Import(name="advancedFeatures")
    private @Nullable Output<String> advancedFeatures;

    /**
     * @return The number of CPU cores and the upper limit of memory used by the database file storage instance.
     * 
     */
    public Optional<Output<String>> advancedFeatures() {
        return Optional.ofNullable(this.advancedFeatures);
    }

    /**
     * Category of database file system.
     * 
     */
    @Import(name="category", required=true)
    private Output<String> category;

    /**
     * @return Category of database file system.
     * 
     */
    public Output<String> category() {
        return this.category;
    }

    /**
     * Whether to delete the original snapshot after creating DBFS using the snapshot.
     * 
     */
    @Import(name="deleteSnapshot")
    private @Nullable Output<Boolean> deleteSnapshot;

    /**
     * @return Whether to delete the original snapshot after creating DBFS using the snapshot.
     * 
     */
    public Optional<Output<Boolean>> deleteSnapshot() {
        return Optional.ofNullable(this.deleteSnapshot);
    }

    /**
     * The collection of ECS instances mounted to the Database file system. See `ecs_list` below.  **NOTE:** Field &#39;ecs_list&#39; has been deprecated from provider version 1.156.0 and it will be removed in the future version. Please use the new resource &#39;alicloud_dbfs_instance_attachment&#39; to attach ECS and DBFS. See `ecs_list` below.
     * 
     * @deprecated
     * Field &#39;ecs_list&#39; has been deprecated from provider version 1.156.0 and it will be removed in the future version. Please use the new resource &#39;alicloud_dbfs_instance_attachment&#39; to attach ECS and DBFS.
     * 
     */
    @Deprecated /* Field 'ecs_list' has been deprecated from provider version 1.156.0 and it will be removed in the future version. Please use the new resource 'alicloud_dbfs_instance_attachment' to attach ECS and DBFS. */
    @Import(name="ecsLists")
    private @Nullable Output<List<InstanceEcsListArgs>> ecsLists;

    /**
     * @return The collection of ECS instances mounted to the Database file system. See `ecs_list` below.  **NOTE:** Field &#39;ecs_list&#39; has been deprecated from provider version 1.156.0 and it will be removed in the future version. Please use the new resource &#39;alicloud_dbfs_instance_attachment&#39; to attach ECS and DBFS. See `ecs_list` below.
     * 
     * @deprecated
     * Field &#39;ecs_list&#39; has been deprecated from provider version 1.156.0 and it will be removed in the future version. Please use the new resource &#39;alicloud_dbfs_instance_attachment&#39; to attach ECS and DBFS.
     * 
     */
    @Deprecated /* Field 'ecs_list' has been deprecated from provider version 1.156.0 and it will be removed in the future version. Please use the new resource 'alicloud_dbfs_instance_attachment' to attach ECS and DBFS. */
    public Optional<Output<List<InstanceEcsListArgs>>> ecsLists() {
        return Optional.ofNullable(this.ecsLists);
    }

    /**
     * Whether to create DBFS in RAID mode. If created in RAID mode, the capacity is at least 66GB.Valid values: true or false. Default value: false.
     * 
     */
    @Import(name="enableRaid")
    private @Nullable Output<Boolean> enableRaid;

    /**
     * @return Whether to create DBFS in RAID mode. If created in RAID mode, the capacity is at least 66GB.Valid values: true or false. Default value: false.
     * 
     */
    public Optional<Output<Boolean>> enableRaid() {
        return Optional.ofNullable(this.enableRaid);
    }

    /**
     * Whether to encrypt DBFS.Valid values: true or false. Default value: false.
     * 
     */
    @Import(name="encryption")
    private @Nullable Output<Boolean> encryption;

    /**
     * @return Whether to encrypt DBFS.Valid values: true or false. Default value: false.
     * 
     */
    public Optional<Output<Boolean>> encryption() {
        return Optional.ofNullable(this.encryption);
    }

    /**
     * Database file system name.
     * 
     */
    @Import(name="fsName")
    private @Nullable Output<String> fsName;

    /**
     * @return Database file system name.
     * 
     */
    public Optional<Output<String>> fsName() {
        return Optional.ofNullable(this.fsName);
    }

    /**
     * . Field &#39;instance_name&#39; has been deprecated from provider version 1.212.0. New field &#39;fs_name&#39; instead.
     * 
     * @deprecated
     * Field &#39;instance_name&#39; has been deprecated since provider version 1.212.0. New field &#39;fs_name&#39; instead.
     * 
     */
    @Deprecated /* Field 'instance_name' has been deprecated since provider version 1.212.0. New field 'fs_name' instead. */
    @Import(name="instanceName")
    private @Nullable Output<String> instanceName;

    /**
     * @return . Field &#39;instance_name&#39; has been deprecated from provider version 1.212.0. New field &#39;fs_name&#39; instead.
     * 
     * @deprecated
     * Field &#39;instance_name&#39; has been deprecated since provider version 1.212.0. New field &#39;fs_name&#39; instead.
     * 
     */
    @Deprecated /* Field 'instance_name' has been deprecated since provider version 1.212.0. New field 'fs_name' instead. */
    public Optional<Output<String>> instanceName() {
        return Optional.ofNullable(this.instanceName);
    }

    /**
     * Instance type. Value range:
     * - dbfs.small
     * - dbfs.medium
     * - dbfs.large (default)
     * 
     */
    @Import(name="instanceType")
    private @Nullable Output<String> instanceType;

    /**
     * @return Instance type. Value range:
     * - dbfs.small
     * - dbfs.medium
     * - dbfs.large (default)
     * 
     */
    public Optional<Output<String>> instanceType() {
        return Optional.ofNullable(this.instanceType);
    }

    /**
     * The ID of the KMS key used by DBFS.
     * 
     */
    @Import(name="kmsKeyId")
    private @Nullable Output<String> kmsKeyId;

    /**
     * @return The ID of the KMS key used by DBFS.
     * 
     */
    public Optional<Output<String>> kmsKeyId() {
        return Optional.ofNullable(this.kmsKeyId);
    }

    /**
     * When you create a DBFS instance, set the performance level of the DBFS instance. Value range:
     * - PL0: single disk maximum random read-write IOPS 10000
     * - PL1: highest random read-write IOPS 50000 per disk (default)
     * - PL2: single disk maximum random read-write IOPS 100000
     * - PL3: single disk maximum random read-write IOPS 1 million.
     * 
     */
    @Import(name="performanceLevel")
    private @Nullable Output<String> performanceLevel;

    /**
     * @return When you create a DBFS instance, set the performance level of the DBFS instance. Value range:
     * - PL0: single disk maximum random read-write IOPS 10000
     * - PL1: highest random read-write IOPS 50000 per disk (default)
     * - PL2: single disk maximum random read-write IOPS 100000
     * - PL3: single disk maximum random read-write IOPS 1 million.
     * 
     */
    public Optional<Output<String>> performanceLevel() {
        return Optional.ofNullable(this.performanceLevel);
    }

    /**
     * Number of strips. Required when the EnableRaid parameter is true.Value range: Currently, only 8 stripes are supported.
     * 
     */
    @Import(name="raidStripeUnitNumber")
    private @Nullable Output<Integer> raidStripeUnitNumber;

    /**
     * @return Number of strips. Required when the EnableRaid parameter is true.Value range: Currently, only 8 stripes are supported.
     * 
     */
    public Optional<Output<Integer>> raidStripeUnitNumber() {
        return Optional.ofNullable(this.raidStripeUnitNumber);
    }

    /**
     * Size of database file system, unit GiB.
     * 
     */
    @Import(name="size", required=true)
    private Output<Integer> size;

    /**
     * @return Size of database file system, unit GiB.
     * 
     */
    public Output<Integer> size() {
        return this.size;
    }

    /**
     * The ID of the snapshot used to create the DBFS instance.
     * 
     */
    @Import(name="snapshotId")
    private @Nullable Output<String> snapshotId;

    /**
     * @return The ID of the snapshot used to create the DBFS instance.
     * 
     */
    public Optional<Output<String>> snapshotId() {
        return Optional.ofNullable(this.snapshotId);
    }

    /**
     * A mapping of tags to assign to the resource.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,Object>> tags;

    /**
     * @return A mapping of tags to assign to the resource.
     * 
     */
    public Optional<Output<Map<String,Object>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * The usage scenario of DBFS. Value range:
     * - MySQL 5.7
     * - PostgreSQL
     * - MongoDB.
     * 
     */
    @Import(name="usedScene")
    private @Nullable Output<String> usedScene;

    /**
     * @return The usage scenario of DBFS. Value range:
     * - MySQL 5.7
     * - PostgreSQL
     * - MongoDB.
     * 
     */
    public Optional<Output<String>> usedScene() {
        return Optional.ofNullable(this.usedScene);
    }

    /**
     * The ID of the zone to which the database file system belongs.
     * 
     */
    @Import(name="zoneId", required=true)
    private Output<String> zoneId;

    /**
     * @return The ID of the zone to which the database file system belongs.
     * 
     */
    public Output<String> zoneId() {
        return this.zoneId;
    }

    private InstanceArgs() {}

    private InstanceArgs(InstanceArgs $) {
        this.advancedFeatures = $.advancedFeatures;
        this.category = $.category;
        this.deleteSnapshot = $.deleteSnapshot;
        this.ecsLists = $.ecsLists;
        this.enableRaid = $.enableRaid;
        this.encryption = $.encryption;
        this.fsName = $.fsName;
        this.instanceName = $.instanceName;
        this.instanceType = $.instanceType;
        this.kmsKeyId = $.kmsKeyId;
        this.performanceLevel = $.performanceLevel;
        this.raidStripeUnitNumber = $.raidStripeUnitNumber;
        this.size = $.size;
        this.snapshotId = $.snapshotId;
        this.tags = $.tags;
        this.usedScene = $.usedScene;
        this.zoneId = $.zoneId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(InstanceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private InstanceArgs $;

        public Builder() {
            $ = new InstanceArgs();
        }

        public Builder(InstanceArgs defaults) {
            $ = new InstanceArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param advancedFeatures The number of CPU cores and the upper limit of memory used by the database file storage instance.
         * 
         * @return builder
         * 
         */
        public Builder advancedFeatures(@Nullable Output<String> advancedFeatures) {
            $.advancedFeatures = advancedFeatures;
            return this;
        }

        /**
         * @param advancedFeatures The number of CPU cores and the upper limit of memory used by the database file storage instance.
         * 
         * @return builder
         * 
         */
        public Builder advancedFeatures(String advancedFeatures) {
            return advancedFeatures(Output.of(advancedFeatures));
        }

        /**
         * @param category Category of database file system.
         * 
         * @return builder
         * 
         */
        public Builder category(Output<String> category) {
            $.category = category;
            return this;
        }

        /**
         * @param category Category of database file system.
         * 
         * @return builder
         * 
         */
        public Builder category(String category) {
            return category(Output.of(category));
        }

        /**
         * @param deleteSnapshot Whether to delete the original snapshot after creating DBFS using the snapshot.
         * 
         * @return builder
         * 
         */
        public Builder deleteSnapshot(@Nullable Output<Boolean> deleteSnapshot) {
            $.deleteSnapshot = deleteSnapshot;
            return this;
        }

        /**
         * @param deleteSnapshot Whether to delete the original snapshot after creating DBFS using the snapshot.
         * 
         * @return builder
         * 
         */
        public Builder deleteSnapshot(Boolean deleteSnapshot) {
            return deleteSnapshot(Output.of(deleteSnapshot));
        }

        /**
         * @param ecsLists The collection of ECS instances mounted to the Database file system. See `ecs_list` below.  **NOTE:** Field &#39;ecs_list&#39; has been deprecated from provider version 1.156.0 and it will be removed in the future version. Please use the new resource &#39;alicloud_dbfs_instance_attachment&#39; to attach ECS and DBFS. See `ecs_list` below.
         * 
         * @return builder
         * 
         * @deprecated
         * Field &#39;ecs_list&#39; has been deprecated from provider version 1.156.0 and it will be removed in the future version. Please use the new resource &#39;alicloud_dbfs_instance_attachment&#39; to attach ECS and DBFS.
         * 
         */
        @Deprecated /* Field 'ecs_list' has been deprecated from provider version 1.156.0 and it will be removed in the future version. Please use the new resource 'alicloud_dbfs_instance_attachment' to attach ECS and DBFS. */
        public Builder ecsLists(@Nullable Output<List<InstanceEcsListArgs>> ecsLists) {
            $.ecsLists = ecsLists;
            return this;
        }

        /**
         * @param ecsLists The collection of ECS instances mounted to the Database file system. See `ecs_list` below.  **NOTE:** Field &#39;ecs_list&#39; has been deprecated from provider version 1.156.0 and it will be removed in the future version. Please use the new resource &#39;alicloud_dbfs_instance_attachment&#39; to attach ECS and DBFS. See `ecs_list` below.
         * 
         * @return builder
         * 
         * @deprecated
         * Field &#39;ecs_list&#39; has been deprecated from provider version 1.156.0 and it will be removed in the future version. Please use the new resource &#39;alicloud_dbfs_instance_attachment&#39; to attach ECS and DBFS.
         * 
         */
        @Deprecated /* Field 'ecs_list' has been deprecated from provider version 1.156.0 and it will be removed in the future version. Please use the new resource 'alicloud_dbfs_instance_attachment' to attach ECS and DBFS. */
        public Builder ecsLists(List<InstanceEcsListArgs> ecsLists) {
            return ecsLists(Output.of(ecsLists));
        }

        /**
         * @param ecsLists The collection of ECS instances mounted to the Database file system. See `ecs_list` below.  **NOTE:** Field &#39;ecs_list&#39; has been deprecated from provider version 1.156.0 and it will be removed in the future version. Please use the new resource &#39;alicloud_dbfs_instance_attachment&#39; to attach ECS and DBFS. See `ecs_list` below.
         * 
         * @return builder
         * 
         * @deprecated
         * Field &#39;ecs_list&#39; has been deprecated from provider version 1.156.0 and it will be removed in the future version. Please use the new resource &#39;alicloud_dbfs_instance_attachment&#39; to attach ECS and DBFS.
         * 
         */
        @Deprecated /* Field 'ecs_list' has been deprecated from provider version 1.156.0 and it will be removed in the future version. Please use the new resource 'alicloud_dbfs_instance_attachment' to attach ECS and DBFS. */
        public Builder ecsLists(InstanceEcsListArgs... ecsLists) {
            return ecsLists(List.of(ecsLists));
        }

        /**
         * @param enableRaid Whether to create DBFS in RAID mode. If created in RAID mode, the capacity is at least 66GB.Valid values: true or false. Default value: false.
         * 
         * @return builder
         * 
         */
        public Builder enableRaid(@Nullable Output<Boolean> enableRaid) {
            $.enableRaid = enableRaid;
            return this;
        }

        /**
         * @param enableRaid Whether to create DBFS in RAID mode. If created in RAID mode, the capacity is at least 66GB.Valid values: true or false. Default value: false.
         * 
         * @return builder
         * 
         */
        public Builder enableRaid(Boolean enableRaid) {
            return enableRaid(Output.of(enableRaid));
        }

        /**
         * @param encryption Whether to encrypt DBFS.Valid values: true or false. Default value: false.
         * 
         * @return builder
         * 
         */
        public Builder encryption(@Nullable Output<Boolean> encryption) {
            $.encryption = encryption;
            return this;
        }

        /**
         * @param encryption Whether to encrypt DBFS.Valid values: true or false. Default value: false.
         * 
         * @return builder
         * 
         */
        public Builder encryption(Boolean encryption) {
            return encryption(Output.of(encryption));
        }

        /**
         * @param fsName Database file system name.
         * 
         * @return builder
         * 
         */
        public Builder fsName(@Nullable Output<String> fsName) {
            $.fsName = fsName;
            return this;
        }

        /**
         * @param fsName Database file system name.
         * 
         * @return builder
         * 
         */
        public Builder fsName(String fsName) {
            return fsName(Output.of(fsName));
        }

        /**
         * @param instanceName . Field &#39;instance_name&#39; has been deprecated from provider version 1.212.0. New field &#39;fs_name&#39; instead.
         * 
         * @return builder
         * 
         * @deprecated
         * Field &#39;instance_name&#39; has been deprecated since provider version 1.212.0. New field &#39;fs_name&#39; instead.
         * 
         */
        @Deprecated /* Field 'instance_name' has been deprecated since provider version 1.212.0. New field 'fs_name' instead. */
        public Builder instanceName(@Nullable Output<String> instanceName) {
            $.instanceName = instanceName;
            return this;
        }

        /**
         * @param instanceName . Field &#39;instance_name&#39; has been deprecated from provider version 1.212.0. New field &#39;fs_name&#39; instead.
         * 
         * @return builder
         * 
         * @deprecated
         * Field &#39;instance_name&#39; has been deprecated since provider version 1.212.0. New field &#39;fs_name&#39; instead.
         * 
         */
        @Deprecated /* Field 'instance_name' has been deprecated since provider version 1.212.0. New field 'fs_name' instead. */
        public Builder instanceName(String instanceName) {
            return instanceName(Output.of(instanceName));
        }

        /**
         * @param instanceType Instance type. Value range:
         * - dbfs.small
         * - dbfs.medium
         * - dbfs.large (default)
         * 
         * @return builder
         * 
         */
        public Builder instanceType(@Nullable Output<String> instanceType) {
            $.instanceType = instanceType;
            return this;
        }

        /**
         * @param instanceType Instance type. Value range:
         * - dbfs.small
         * - dbfs.medium
         * - dbfs.large (default)
         * 
         * @return builder
         * 
         */
        public Builder instanceType(String instanceType) {
            return instanceType(Output.of(instanceType));
        }

        /**
         * @param kmsKeyId The ID of the KMS key used by DBFS.
         * 
         * @return builder
         * 
         */
        public Builder kmsKeyId(@Nullable Output<String> kmsKeyId) {
            $.kmsKeyId = kmsKeyId;
            return this;
        }

        /**
         * @param kmsKeyId The ID of the KMS key used by DBFS.
         * 
         * @return builder
         * 
         */
        public Builder kmsKeyId(String kmsKeyId) {
            return kmsKeyId(Output.of(kmsKeyId));
        }

        /**
         * @param performanceLevel When you create a DBFS instance, set the performance level of the DBFS instance. Value range:
         * - PL0: single disk maximum random read-write IOPS 10000
         * - PL1: highest random read-write IOPS 50000 per disk (default)
         * - PL2: single disk maximum random read-write IOPS 100000
         * - PL3: single disk maximum random read-write IOPS 1 million.
         * 
         * @return builder
         * 
         */
        public Builder performanceLevel(@Nullable Output<String> performanceLevel) {
            $.performanceLevel = performanceLevel;
            return this;
        }

        /**
         * @param performanceLevel When you create a DBFS instance, set the performance level of the DBFS instance. Value range:
         * - PL0: single disk maximum random read-write IOPS 10000
         * - PL1: highest random read-write IOPS 50000 per disk (default)
         * - PL2: single disk maximum random read-write IOPS 100000
         * - PL3: single disk maximum random read-write IOPS 1 million.
         * 
         * @return builder
         * 
         */
        public Builder performanceLevel(String performanceLevel) {
            return performanceLevel(Output.of(performanceLevel));
        }

        /**
         * @param raidStripeUnitNumber Number of strips. Required when the EnableRaid parameter is true.Value range: Currently, only 8 stripes are supported.
         * 
         * @return builder
         * 
         */
        public Builder raidStripeUnitNumber(@Nullable Output<Integer> raidStripeUnitNumber) {
            $.raidStripeUnitNumber = raidStripeUnitNumber;
            return this;
        }

        /**
         * @param raidStripeUnitNumber Number of strips. Required when the EnableRaid parameter is true.Value range: Currently, only 8 stripes are supported.
         * 
         * @return builder
         * 
         */
        public Builder raidStripeUnitNumber(Integer raidStripeUnitNumber) {
            return raidStripeUnitNumber(Output.of(raidStripeUnitNumber));
        }

        /**
         * @param size Size of database file system, unit GiB.
         * 
         * @return builder
         * 
         */
        public Builder size(Output<Integer> size) {
            $.size = size;
            return this;
        }

        /**
         * @param size Size of database file system, unit GiB.
         * 
         * @return builder
         * 
         */
        public Builder size(Integer size) {
            return size(Output.of(size));
        }

        /**
         * @param snapshotId The ID of the snapshot used to create the DBFS instance.
         * 
         * @return builder
         * 
         */
        public Builder snapshotId(@Nullable Output<String> snapshotId) {
            $.snapshotId = snapshotId;
            return this;
        }

        /**
         * @param snapshotId The ID of the snapshot used to create the DBFS instance.
         * 
         * @return builder
         * 
         */
        public Builder snapshotId(String snapshotId) {
            return snapshotId(Output.of(snapshotId));
        }

        /**
         * @param tags A mapping of tags to assign to the resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,Object>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags A mapping of tags to assign to the resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,Object> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param usedScene The usage scenario of DBFS. Value range:
         * - MySQL 5.7
         * - PostgreSQL
         * - MongoDB.
         * 
         * @return builder
         * 
         */
        public Builder usedScene(@Nullable Output<String> usedScene) {
            $.usedScene = usedScene;
            return this;
        }

        /**
         * @param usedScene The usage scenario of DBFS. Value range:
         * - MySQL 5.7
         * - PostgreSQL
         * - MongoDB.
         * 
         * @return builder
         * 
         */
        public Builder usedScene(String usedScene) {
            return usedScene(Output.of(usedScene));
        }

        /**
         * @param zoneId The ID of the zone to which the database file system belongs.
         * 
         * @return builder
         * 
         */
        public Builder zoneId(Output<String> zoneId) {
            $.zoneId = zoneId;
            return this;
        }

        /**
         * @param zoneId The ID of the zone to which the database file system belongs.
         * 
         * @return builder
         * 
         */
        public Builder zoneId(String zoneId) {
            return zoneId(Output.of(zoneId));
        }

        public InstanceArgs build() {
            $.category = Objects.requireNonNull($.category, "expected parameter 'category' to be non-null");
            $.size = Objects.requireNonNull($.size, "expected parameter 'size' to be non-null");
            $.zoneId = Objects.requireNonNull($.zoneId, "expected parameter 'zoneId' to be non-null");
            return $;
        }
    }

}
