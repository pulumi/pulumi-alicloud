// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.hbr.inputs;

import com.pulumi.alicloud.hbr.inputs.GetBackupJobsFilterArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetBackupJobsArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetBackupJobsArgs Empty = new GetBackupJobsArgs();

    @Import(name="filters")
    private @Nullable Output<List<GetBackupJobsFilterArgs>> filters;

    public Optional<Output<List<GetBackupJobsFilterArgs>>> filters() {
        return Optional.ofNullable(this.filters);
    }

    /**
     * A list of Backup Job IDs.
     * 
     */
    @Import(name="ids")
    private @Nullable Output<List<String>> ids;

    /**
     * @return A list of Backup Job IDs.
     * 
     */
    public Optional<Output<List<String>>> ids() {
        return Optional.ofNullable(this.ids);
    }

    /**
     * File name where to save data source results (after running `pulumi preview`).
     * 
     */
    @Import(name="outputFile")
    private @Nullable Output<String> outputFile;

    /**
     * @return File name where to save data source results (after running `pulumi preview`).
     * 
     */
    public Optional<Output<String>> outputFile() {
        return Optional.ofNullable(this.outputFile);
    }

    /**
     * The sort direction, sort results by ascending or descending order based on the value jobs id. Valid values: `ASCEND`, `DESCEND`.
     * 
     */
    @Import(name="sortDirection")
    private @Nullable Output<String> sortDirection;

    /**
     * @return The sort direction, sort results by ascending or descending order based on the value jobs id. Valid values: `ASCEND`, `DESCEND`.
     * 
     */
    public Optional<Output<String>> sortDirection() {
        return Optional.ofNullable(this.sortDirection);
    }

    /**
     * The type of data source. Valid Values: `ECS_FILE`, `OSS`, `NAS`, `UDM_DISK`.
     * 
     */
    @Import(name="sourceType", required=true)
    private Output<String> sourceType;

    /**
     * @return The type of data source. Valid Values: `ECS_FILE`, `OSS`, `NAS`, `UDM_DISK`.
     * 
     */
    public Output<String> sourceType() {
        return this.sourceType;
    }

    /**
     * The status of restore job. Valid values: `COMPLETE` , `PARTIAL_COMPLETE`, `FAILED`.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return The status of restore job. Valid values: `COMPLETE` , `PARTIAL_COMPLETE`, `FAILED`.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    private GetBackupJobsArgs() {}

    private GetBackupJobsArgs(GetBackupJobsArgs $) {
        this.filters = $.filters;
        this.ids = $.ids;
        this.outputFile = $.outputFile;
        this.sortDirection = $.sortDirection;
        this.sourceType = $.sourceType;
        this.status = $.status;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetBackupJobsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetBackupJobsArgs $;

        public Builder() {
            $ = new GetBackupJobsArgs();
        }

        public Builder(GetBackupJobsArgs defaults) {
            $ = new GetBackupJobsArgs(Objects.requireNonNull(defaults));
        }

        public Builder filters(@Nullable Output<List<GetBackupJobsFilterArgs>> filters) {
            $.filters = filters;
            return this;
        }

        public Builder filters(List<GetBackupJobsFilterArgs> filters) {
            return filters(Output.of(filters));
        }

        public Builder filters(GetBackupJobsFilterArgs... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param ids A list of Backup Job IDs.
         * 
         * @return builder
         * 
         */
        public Builder ids(@Nullable Output<List<String>> ids) {
            $.ids = ids;
            return this;
        }

        /**
         * @param ids A list of Backup Job IDs.
         * 
         * @return builder
         * 
         */
        public Builder ids(List<String> ids) {
            return ids(Output.of(ids));
        }

        /**
         * @param ids A list of Backup Job IDs.
         * 
         * @return builder
         * 
         */
        public Builder ids(String... ids) {
            return ids(List.of(ids));
        }

        /**
         * @param outputFile File name where to save data source results (after running `pulumi preview`).
         * 
         * @return builder
         * 
         */
        public Builder outputFile(@Nullable Output<String> outputFile) {
            $.outputFile = outputFile;
            return this;
        }

        /**
         * @param outputFile File name where to save data source results (after running `pulumi preview`).
         * 
         * @return builder
         * 
         */
        public Builder outputFile(String outputFile) {
            return outputFile(Output.of(outputFile));
        }

        /**
         * @param sortDirection The sort direction, sort results by ascending or descending order based on the value jobs id. Valid values: `ASCEND`, `DESCEND`.
         * 
         * @return builder
         * 
         */
        public Builder sortDirection(@Nullable Output<String> sortDirection) {
            $.sortDirection = sortDirection;
            return this;
        }

        /**
         * @param sortDirection The sort direction, sort results by ascending or descending order based on the value jobs id. Valid values: `ASCEND`, `DESCEND`.
         * 
         * @return builder
         * 
         */
        public Builder sortDirection(String sortDirection) {
            return sortDirection(Output.of(sortDirection));
        }

        /**
         * @param sourceType The type of data source. Valid Values: `ECS_FILE`, `OSS`, `NAS`, `UDM_DISK`.
         * 
         * @return builder
         * 
         */
        public Builder sourceType(Output<String> sourceType) {
            $.sourceType = sourceType;
            return this;
        }

        /**
         * @param sourceType The type of data source. Valid Values: `ECS_FILE`, `OSS`, `NAS`, `UDM_DISK`.
         * 
         * @return builder
         * 
         */
        public Builder sourceType(String sourceType) {
            return sourceType(Output.of(sourceType));
        }

        /**
         * @param status The status of restore job. Valid values: `COMPLETE` , `PARTIAL_COMPLETE`, `FAILED`.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status The status of restore job. Valid values: `COMPLETE` , `PARTIAL_COMPLETE`, `FAILED`.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        public GetBackupJobsArgs build() {
            if ($.sourceType == null) {
                throw new MissingRequiredPropertyException("GetBackupJobsArgs", "sourceType");
            }
            return $;
        }
    }

}
