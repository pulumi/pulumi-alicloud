// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.cen;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class FlowLogArgs extends com.pulumi.resources.ResourceArgs {

    public static final FlowLogArgs Empty = new FlowLogArgs();

    /**
     * cen id
     * 
     */
    @Import(name="cenId", required=true)
    private Output<String> cenId;

    /**
     * @return cen id
     * 
     */
    public Output<String> cenId() {
        return this.cenId;
    }

    /**
     * The description of the flowlog.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The description of the flowlog.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The name of the flowlog.
     * 
     */
    @Import(name="flowLogName")
    private @Nullable Output<String> flowLogName;

    /**
     * @return The name of the flowlog.
     * 
     */
    public Optional<Output<String>> flowLogName() {
        return Optional.ofNullable(this.flowLogName);
    }

    /**
     * The duration of the capture window for the flow log to capture traffic. Unit: seconds. Valid values: `60` or **600 * *. Default value: **600 * *.
     * 
     */
    @Import(name="interval")
    private @Nullable Output<Integer> interval;

    /**
     * @return The duration of the capture window for the flow log to capture traffic. Unit: seconds. Valid values: `60` or **600 * *. Default value: **600 * *.
     * 
     */
    public Optional<Output<Integer>> interval() {
        return Optional.ofNullable(this.interval);
    }

    /**
     * Log Format
     * 
     */
    @Import(name="logFormatString")
    private @Nullable Output<String> logFormatString;

    /**
     * @return Log Format
     * 
     */
    public Optional<Output<String>> logFormatString() {
        return Optional.ofNullable(this.logFormatString);
    }

    /**
     * The LogStore that stores the flowlog.
     * 
     */
    @Import(name="logStoreName", required=true)
    private Output<String> logStoreName;

    /**
     * @return The LogStore that stores the flowlog.
     * 
     */
    public Output<String> logStoreName() {
        return this.logStoreName;
    }

    /**
     * The Project that stores the flowlog.
     * 
     */
    @Import(name="projectName", required=true)
    private Output<String> projectName;

    /**
     * @return The Project that stores the flowlog.
     * 
     */
    public Output<String> projectName() {
        return this.projectName;
    }

    /**
     * The status of the flow log. Valid values:
     * - `Active`: started.
     * - `InActive`: not started.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return The status of the flow log. Valid values:
     * - `Active`: started.
     * - `InActive`: not started.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * The tag of the resource
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return The tag of the resource
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * Cross-region Connection ID or VBR connection ID.
     * 
     * &gt; **NOTE:**  This parameter is required.
     * 
     */
    @Import(name="transitRouterAttachmentId")
    private @Nullable Output<String> transitRouterAttachmentId;

    /**
     * @return Cross-region Connection ID or VBR connection ID.
     * 
     * &gt; **NOTE:**  This parameter is required.
     * 
     */
    public Optional<Output<String>> transitRouterAttachmentId() {
        return Optional.ofNullable(this.transitRouterAttachmentId);
    }

    /**
     * Transit Router ID
     * 
     */
    @Import(name="transitRouterId")
    private @Nullable Output<String> transitRouterId;

    /**
     * @return Transit Router ID
     * 
     */
    public Optional<Output<String>> transitRouterId() {
        return Optional.ofNullable(this.transitRouterId);
    }

    private FlowLogArgs() {}

    private FlowLogArgs(FlowLogArgs $) {
        this.cenId = $.cenId;
        this.description = $.description;
        this.flowLogName = $.flowLogName;
        this.interval = $.interval;
        this.logFormatString = $.logFormatString;
        this.logStoreName = $.logStoreName;
        this.projectName = $.projectName;
        this.status = $.status;
        this.tags = $.tags;
        this.transitRouterAttachmentId = $.transitRouterAttachmentId;
        this.transitRouterId = $.transitRouterId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FlowLogArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FlowLogArgs $;

        public Builder() {
            $ = new FlowLogArgs();
        }

        public Builder(FlowLogArgs defaults) {
            $ = new FlowLogArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param cenId cen id
         * 
         * @return builder
         * 
         */
        public Builder cenId(Output<String> cenId) {
            $.cenId = cenId;
            return this;
        }

        /**
         * @param cenId cen id
         * 
         * @return builder
         * 
         */
        public Builder cenId(String cenId) {
            return cenId(Output.of(cenId));
        }

        /**
         * @param description The description of the flowlog.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The description of the flowlog.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param flowLogName The name of the flowlog.
         * 
         * @return builder
         * 
         */
        public Builder flowLogName(@Nullable Output<String> flowLogName) {
            $.flowLogName = flowLogName;
            return this;
        }

        /**
         * @param flowLogName The name of the flowlog.
         * 
         * @return builder
         * 
         */
        public Builder flowLogName(String flowLogName) {
            return flowLogName(Output.of(flowLogName));
        }

        /**
         * @param interval The duration of the capture window for the flow log to capture traffic. Unit: seconds. Valid values: `60` or **600 * *. Default value: **600 * *.
         * 
         * @return builder
         * 
         */
        public Builder interval(@Nullable Output<Integer> interval) {
            $.interval = interval;
            return this;
        }

        /**
         * @param interval The duration of the capture window for the flow log to capture traffic. Unit: seconds. Valid values: `60` or **600 * *. Default value: **600 * *.
         * 
         * @return builder
         * 
         */
        public Builder interval(Integer interval) {
            return interval(Output.of(interval));
        }

        /**
         * @param logFormatString Log Format
         * 
         * @return builder
         * 
         */
        public Builder logFormatString(@Nullable Output<String> logFormatString) {
            $.logFormatString = logFormatString;
            return this;
        }

        /**
         * @param logFormatString Log Format
         * 
         * @return builder
         * 
         */
        public Builder logFormatString(String logFormatString) {
            return logFormatString(Output.of(logFormatString));
        }

        /**
         * @param logStoreName The LogStore that stores the flowlog.
         * 
         * @return builder
         * 
         */
        public Builder logStoreName(Output<String> logStoreName) {
            $.logStoreName = logStoreName;
            return this;
        }

        /**
         * @param logStoreName The LogStore that stores the flowlog.
         * 
         * @return builder
         * 
         */
        public Builder logStoreName(String logStoreName) {
            return logStoreName(Output.of(logStoreName));
        }

        /**
         * @param projectName The Project that stores the flowlog.
         * 
         * @return builder
         * 
         */
        public Builder projectName(Output<String> projectName) {
            $.projectName = projectName;
            return this;
        }

        /**
         * @param projectName The Project that stores the flowlog.
         * 
         * @return builder
         * 
         */
        public Builder projectName(String projectName) {
            return projectName(Output.of(projectName));
        }

        /**
         * @param status The status of the flow log. Valid values:
         * - `Active`: started.
         * - `InActive`: not started.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status The status of the flow log. Valid values:
         * - `Active`: started.
         * - `InActive`: not started.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param tags The tag of the resource
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags The tag of the resource
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param transitRouterAttachmentId Cross-region Connection ID or VBR connection ID.
         * 
         * &gt; **NOTE:**  This parameter is required.
         * 
         * @return builder
         * 
         */
        public Builder transitRouterAttachmentId(@Nullable Output<String> transitRouterAttachmentId) {
            $.transitRouterAttachmentId = transitRouterAttachmentId;
            return this;
        }

        /**
         * @param transitRouterAttachmentId Cross-region Connection ID or VBR connection ID.
         * 
         * &gt; **NOTE:**  This parameter is required.
         * 
         * @return builder
         * 
         */
        public Builder transitRouterAttachmentId(String transitRouterAttachmentId) {
            return transitRouterAttachmentId(Output.of(transitRouterAttachmentId));
        }

        /**
         * @param transitRouterId Transit Router ID
         * 
         * @return builder
         * 
         */
        public Builder transitRouterId(@Nullable Output<String> transitRouterId) {
            $.transitRouterId = transitRouterId;
            return this;
        }

        /**
         * @param transitRouterId Transit Router ID
         * 
         * @return builder
         * 
         */
        public Builder transitRouterId(String transitRouterId) {
            return transitRouterId(Output.of(transitRouterId));
        }

        public FlowLogArgs build() {
            if ($.cenId == null) {
                throw new MissingRequiredPropertyException("FlowLogArgs", "cenId");
            }
            if ($.logStoreName == null) {
                throw new MissingRequiredPropertyException("FlowLogArgs", "logStoreName");
            }
            if ($.projectName == null) {
                throw new MissingRequiredPropertyException("FlowLogArgs", "projectName");
            }
            return $;
        }
    }

}
