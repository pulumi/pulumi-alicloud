// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.dataworks.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DiAlarmRuleTriggerConditionArgs extends com.pulumi.resources.ResourceArgs {

    public static final DiAlarmRuleTriggerConditionArgs Empty = new DiAlarmRuleTriggerConditionArgs();

    /**
     * It takes effect only when the DDL notification is issued. The list of effective DDLs is required.
     * 
     */
    @Import(name="ddlReportTags")
    private @Nullable Output<List<String>> ddlReportTags;

    /**
     * @return It takes effect only when the DDL notification is issued. The list of effective DDLs is required.
     * 
     */
    public Optional<Output<List<String>>> ddlReportTags() {
        return Optional.ofNullable(this.ddlReportTags);
    }

    /**
     * Alarm calculation time interval, unit minute
     * 
     */
    @Import(name="duration")
    private @Nullable Output<Integer> duration;

    /**
     * @return Alarm calculation time interval, unit minute
     * 
     */
    public Optional<Output<Integer>> duration() {
        return Optional.ofNullable(this.duration);
    }

    /**
     * Severity, optional enumeration value:
     * 
     * Warning
     * 
     * Critical
     * 
     */
    @Import(name="severity")
    private @Nullable Output<String> severity;

    /**
     * @return Severity, optional enumeration value:
     * 
     * Warning
     * 
     * Critical
     * 
     */
    public Optional<Output<String>> severity() {
        return Optional.ofNullable(this.severity);
    }

    /**
     * Alarm threshold.
     * 
     * Task status alarm: no need to fill in the threshold.
     * 
     * failover alarm: The threshold is the number of failover alarms.
     * 
     * Task Delay Alarm: The threshold is the delay duration, in seconds.
     * 
     */
    @Import(name="threshold")
    private @Nullable Output<Integer> threshold;

    /**
     * @return Alarm threshold.
     * 
     * Task status alarm: no need to fill in the threshold.
     * 
     * failover alarm: The threshold is the number of failover alarms.
     * 
     * Task Delay Alarm: The threshold is the delay duration, in seconds.
     * 
     */
    public Optional<Output<Integer>> threshold() {
        return Optional.ofNullable(this.threshold);
    }

    private DiAlarmRuleTriggerConditionArgs() {}

    private DiAlarmRuleTriggerConditionArgs(DiAlarmRuleTriggerConditionArgs $) {
        this.ddlReportTags = $.ddlReportTags;
        this.duration = $.duration;
        this.severity = $.severity;
        this.threshold = $.threshold;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DiAlarmRuleTriggerConditionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DiAlarmRuleTriggerConditionArgs $;

        public Builder() {
            $ = new DiAlarmRuleTriggerConditionArgs();
        }

        public Builder(DiAlarmRuleTriggerConditionArgs defaults) {
            $ = new DiAlarmRuleTriggerConditionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param ddlReportTags It takes effect only when the DDL notification is issued. The list of effective DDLs is required.
         * 
         * @return builder
         * 
         */
        public Builder ddlReportTags(@Nullable Output<List<String>> ddlReportTags) {
            $.ddlReportTags = ddlReportTags;
            return this;
        }

        /**
         * @param ddlReportTags It takes effect only when the DDL notification is issued. The list of effective DDLs is required.
         * 
         * @return builder
         * 
         */
        public Builder ddlReportTags(List<String> ddlReportTags) {
            return ddlReportTags(Output.of(ddlReportTags));
        }

        /**
         * @param ddlReportTags It takes effect only when the DDL notification is issued. The list of effective DDLs is required.
         * 
         * @return builder
         * 
         */
        public Builder ddlReportTags(String... ddlReportTags) {
            return ddlReportTags(List.of(ddlReportTags));
        }

        /**
         * @param duration Alarm calculation time interval, unit minute
         * 
         * @return builder
         * 
         */
        public Builder duration(@Nullable Output<Integer> duration) {
            $.duration = duration;
            return this;
        }

        /**
         * @param duration Alarm calculation time interval, unit minute
         * 
         * @return builder
         * 
         */
        public Builder duration(Integer duration) {
            return duration(Output.of(duration));
        }

        /**
         * @param severity Severity, optional enumeration value:
         * 
         * Warning
         * 
         * Critical
         * 
         * @return builder
         * 
         */
        public Builder severity(@Nullable Output<String> severity) {
            $.severity = severity;
            return this;
        }

        /**
         * @param severity Severity, optional enumeration value:
         * 
         * Warning
         * 
         * Critical
         * 
         * @return builder
         * 
         */
        public Builder severity(String severity) {
            return severity(Output.of(severity));
        }

        /**
         * @param threshold Alarm threshold.
         * 
         * Task status alarm: no need to fill in the threshold.
         * 
         * failover alarm: The threshold is the number of failover alarms.
         * 
         * Task Delay Alarm: The threshold is the delay duration, in seconds.
         * 
         * @return builder
         * 
         */
        public Builder threshold(@Nullable Output<Integer> threshold) {
            $.threshold = threshold;
            return this;
        }

        /**
         * @param threshold Alarm threshold.
         * 
         * Task status alarm: no need to fill in the threshold.
         * 
         * failover alarm: The threshold is the number of failover alarms.
         * 
         * Task Delay Alarm: The threshold is the delay duration, in seconds.
         * 
         * @return builder
         * 
         */
        public Builder threshold(Integer threshold) {
            return threshold(Output.of(threshold));
        }

        public DiAlarmRuleTriggerConditionArgs build() {
            return $;
        }
    }

}
