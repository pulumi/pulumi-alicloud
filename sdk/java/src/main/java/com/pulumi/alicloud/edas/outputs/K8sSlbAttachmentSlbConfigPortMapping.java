// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.edas.outputs;

import com.pulumi.alicloud.edas.outputs.K8sSlbAttachmentSlbConfigPortMappingServicePort;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class K8sSlbAttachmentSlbConfigPortMapping {
    /**
     * @return The ID of your tls certification, this is used for &#39;HTTPS&#39; protocol only.
     * 
     */
    private @Nullable String certId;
    /**
     * @return The protocol of SLB instance configuration, values can be &#39;TCP&#39;, &#39;HTTP&#39; or &#39;HTTPS&#39;.
     * 
     */
    private String loadbalancerProtocol;
    /**
     * @return The backend k8s service configuration for SLB instance, which is supported for multiple configurations. See `service_port` below.
     * 
     */
    private K8sSlbAttachmentSlbConfigPortMappingServicePort servicePort;

    private K8sSlbAttachmentSlbConfigPortMapping() {}
    /**
     * @return The ID of your tls certification, this is used for &#39;HTTPS&#39; protocol only.
     * 
     */
    public Optional<String> certId() {
        return Optional.ofNullable(this.certId);
    }
    /**
     * @return The protocol of SLB instance configuration, values can be &#39;TCP&#39;, &#39;HTTP&#39; or &#39;HTTPS&#39;.
     * 
     */
    public String loadbalancerProtocol() {
        return this.loadbalancerProtocol;
    }
    /**
     * @return The backend k8s service configuration for SLB instance, which is supported for multiple configurations. See `service_port` below.
     * 
     */
    public K8sSlbAttachmentSlbConfigPortMappingServicePort servicePort() {
        return this.servicePort;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(K8sSlbAttachmentSlbConfigPortMapping defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String certId;
        private String loadbalancerProtocol;
        private K8sSlbAttachmentSlbConfigPortMappingServicePort servicePort;
        public Builder() {}
        public Builder(K8sSlbAttachmentSlbConfigPortMapping defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.certId = defaults.certId;
    	      this.loadbalancerProtocol = defaults.loadbalancerProtocol;
    	      this.servicePort = defaults.servicePort;
        }

        @CustomType.Setter
        public Builder certId(@Nullable String certId) {

            this.certId = certId;
            return this;
        }
        @CustomType.Setter
        public Builder loadbalancerProtocol(String loadbalancerProtocol) {
            if (loadbalancerProtocol == null) {
              throw new MissingRequiredPropertyException("K8sSlbAttachmentSlbConfigPortMapping", "loadbalancerProtocol");
            }
            this.loadbalancerProtocol = loadbalancerProtocol;
            return this;
        }
        @CustomType.Setter
        public Builder servicePort(K8sSlbAttachmentSlbConfigPortMappingServicePort servicePort) {
            if (servicePort == null) {
              throw new MissingRequiredPropertyException("K8sSlbAttachmentSlbConfigPortMapping", "servicePort");
            }
            this.servicePort = servicePort;
            return this;
        }
        public K8sSlbAttachmentSlbConfigPortMapping build() {
            final var _resultValue = new K8sSlbAttachmentSlbConfigPortMapping();
            _resultValue.certId = certId;
            _resultValue.loadbalancerProtocol = loadbalancerProtocol;
            _resultValue.servicePort = servicePort;
            return _resultValue;
        }
    }
}
