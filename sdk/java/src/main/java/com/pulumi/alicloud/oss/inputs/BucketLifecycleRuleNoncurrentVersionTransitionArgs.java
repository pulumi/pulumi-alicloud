// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.oss.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class BucketLifecycleRuleNoncurrentVersionTransitionArgs extends com.pulumi.resources.ResourceArgs {

    public static final BucketLifecycleRuleNoncurrentVersionTransitionArgs Empty = new BucketLifecycleRuleNoncurrentVersionTransitionArgs();

    /**
     * Specifies the number of days noncurrent object versions transition.
     * 
     */
    @Import(name="days", required=true)
    private Output<Integer> days;

    /**
     * @return Specifies the number of days noncurrent object versions transition.
     * 
     */
    public Output<Integer> days() {
        return this.days;
    }

    /**
     * Specifies whether the lifecycle rule applies to objects based on their last access time. If set to `true`, the rule applies to objects based on their last access time; if set to `false`, the rule applies to objects based on their last modified time. If configure the rule based on the last access time, please enable `access_monitor` first.
     * 
     */
    @Import(name="isAccessTime")
    private @Nullable Output<Boolean> isAccessTime;

    /**
     * @return Specifies whether the lifecycle rule applies to objects based on their last access time. If set to `true`, the rule applies to objects based on their last access time; if set to `false`, the rule applies to objects based on their last modified time. If configure the rule based on the last access time, please enable `access_monitor` first.
     * 
     */
    public Optional<Output<Boolean>> isAccessTime() {
        return Optional.ofNullable(this.isAccessTime);
    }

    /**
     * Specifies whether to convert the storage class of non-Standard objects back to Standard after the objects are accessed. It takes effect only when the IsAccessTime parameter is set to true. If set to `true`, converts the storage class of the objects to Standard; if set to `false`, does not convert the storage class of the objects to Standard.
     * 
     */
    @Import(name="returnToStdWhenVisit")
    private @Nullable Output<Boolean> returnToStdWhenVisit;

    /**
     * @return Specifies whether to convert the storage class of non-Standard objects back to Standard after the objects are accessed. It takes effect only when the IsAccessTime parameter is set to true. If set to `true`, converts the storage class of the objects to Standard; if set to `false`, does not convert the storage class of the objects to Standard.
     * 
     */
    public Optional<Output<Boolean>> returnToStdWhenVisit() {
        return Optional.ofNullable(this.returnToStdWhenVisit);
    }

    /**
     * The [storage class](https://www.alibabacloud.com/help/doc-detail/51374.htm) to apply. Can be &#34;Standard&#34;, &#34;IA&#34;, &#34;Archive&#34;, &#34;ColdArchive&#34; and &#34;DeepColdArchive&#34;. Defaults to &#34;Standard&#34;. &#34;ColdArchive&#34; is available since 1.203.0. &#34;DeepColdArchive&#34; is available since 1.209.0.
     * 
     */
    @Import(name="storageClass", required=true)
    private Output<String> storageClass;

    /**
     * @return The [storage class](https://www.alibabacloud.com/help/doc-detail/51374.htm) to apply. Can be &#34;Standard&#34;, &#34;IA&#34;, &#34;Archive&#34;, &#34;ColdArchive&#34; and &#34;DeepColdArchive&#34;. Defaults to &#34;Standard&#34;. &#34;ColdArchive&#34; is available since 1.203.0. &#34;DeepColdArchive&#34; is available since 1.209.0.
     * 
     */
    public Output<String> storageClass() {
        return this.storageClass;
    }

    private BucketLifecycleRuleNoncurrentVersionTransitionArgs() {}

    private BucketLifecycleRuleNoncurrentVersionTransitionArgs(BucketLifecycleRuleNoncurrentVersionTransitionArgs $) {
        this.days = $.days;
        this.isAccessTime = $.isAccessTime;
        this.returnToStdWhenVisit = $.returnToStdWhenVisit;
        this.storageClass = $.storageClass;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BucketLifecycleRuleNoncurrentVersionTransitionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BucketLifecycleRuleNoncurrentVersionTransitionArgs $;

        public Builder() {
            $ = new BucketLifecycleRuleNoncurrentVersionTransitionArgs();
        }

        public Builder(BucketLifecycleRuleNoncurrentVersionTransitionArgs defaults) {
            $ = new BucketLifecycleRuleNoncurrentVersionTransitionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param days Specifies the number of days noncurrent object versions transition.
         * 
         * @return builder
         * 
         */
        public Builder days(Output<Integer> days) {
            $.days = days;
            return this;
        }

        /**
         * @param days Specifies the number of days noncurrent object versions transition.
         * 
         * @return builder
         * 
         */
        public Builder days(Integer days) {
            return days(Output.of(days));
        }

        /**
         * @param isAccessTime Specifies whether the lifecycle rule applies to objects based on their last access time. If set to `true`, the rule applies to objects based on their last access time; if set to `false`, the rule applies to objects based on their last modified time. If configure the rule based on the last access time, please enable `access_monitor` first.
         * 
         * @return builder
         * 
         */
        public Builder isAccessTime(@Nullable Output<Boolean> isAccessTime) {
            $.isAccessTime = isAccessTime;
            return this;
        }

        /**
         * @param isAccessTime Specifies whether the lifecycle rule applies to objects based on their last access time. If set to `true`, the rule applies to objects based on their last access time; if set to `false`, the rule applies to objects based on their last modified time. If configure the rule based on the last access time, please enable `access_monitor` first.
         * 
         * @return builder
         * 
         */
        public Builder isAccessTime(Boolean isAccessTime) {
            return isAccessTime(Output.of(isAccessTime));
        }

        /**
         * @param returnToStdWhenVisit Specifies whether to convert the storage class of non-Standard objects back to Standard after the objects are accessed. It takes effect only when the IsAccessTime parameter is set to true. If set to `true`, converts the storage class of the objects to Standard; if set to `false`, does not convert the storage class of the objects to Standard.
         * 
         * @return builder
         * 
         */
        public Builder returnToStdWhenVisit(@Nullable Output<Boolean> returnToStdWhenVisit) {
            $.returnToStdWhenVisit = returnToStdWhenVisit;
            return this;
        }

        /**
         * @param returnToStdWhenVisit Specifies whether to convert the storage class of non-Standard objects back to Standard after the objects are accessed. It takes effect only when the IsAccessTime parameter is set to true. If set to `true`, converts the storage class of the objects to Standard; if set to `false`, does not convert the storage class of the objects to Standard.
         * 
         * @return builder
         * 
         */
        public Builder returnToStdWhenVisit(Boolean returnToStdWhenVisit) {
            return returnToStdWhenVisit(Output.of(returnToStdWhenVisit));
        }

        /**
         * @param storageClass The [storage class](https://www.alibabacloud.com/help/doc-detail/51374.htm) to apply. Can be &#34;Standard&#34;, &#34;IA&#34;, &#34;Archive&#34;, &#34;ColdArchive&#34; and &#34;DeepColdArchive&#34;. Defaults to &#34;Standard&#34;. &#34;ColdArchive&#34; is available since 1.203.0. &#34;DeepColdArchive&#34; is available since 1.209.0.
         * 
         * @return builder
         * 
         */
        public Builder storageClass(Output<String> storageClass) {
            $.storageClass = storageClass;
            return this;
        }

        /**
         * @param storageClass The [storage class](https://www.alibabacloud.com/help/doc-detail/51374.htm) to apply. Can be &#34;Standard&#34;, &#34;IA&#34;, &#34;Archive&#34;, &#34;ColdArchive&#34; and &#34;DeepColdArchive&#34;. Defaults to &#34;Standard&#34;. &#34;ColdArchive&#34; is available since 1.203.0. &#34;DeepColdArchive&#34; is available since 1.209.0.
         * 
         * @return builder
         * 
         */
        public Builder storageClass(String storageClass) {
            return storageClass(Output.of(storageClass));
        }

        public BucketLifecycleRuleNoncurrentVersionTransitionArgs build() {
            if ($.days == null) {
                throw new MissingRequiredPropertyException("BucketLifecycleRuleNoncurrentVersionTransitionArgs", "days");
            }
            if ($.storageClass == null) {
                throw new MissingRequiredPropertyException("BucketLifecycleRuleNoncurrentVersionTransitionArgs", "storageClass");
            }
            return $;
        }
    }

}
