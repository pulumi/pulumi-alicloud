// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.apigateway;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AclEntryAttachmentArgs extends com.pulumi.resources.ResourceArgs {

    public static final AclEntryAttachmentArgs Empty = new AclEntryAttachmentArgs();

    /**
     * The ID of the ACL that the entry will be attached to.
     * 
     */
    @Import(name="aclId", required=true)
    private Output<String> aclId;

    /**
     * @return The ID of the ACL that the entry will be attached to.
     * 
     */
    public Output<String> aclId() {
        return this.aclId;
    }

    /**
     * The comment for the entry.
     * 
     */
    @Import(name="comment")
    private @Nullable Output<String> comment;

    /**
     * @return The comment for the entry.
     * 
     */
    public Optional<Output<String>> comment() {
        return Optional.ofNullable(this.comment);
    }

    /**
     * The CIDR block of the entry to attach.
     * 
     */
    @Import(name="entry", required=true)
    private Output<String> entry;

    /**
     * @return The CIDR block of the entry to attach.
     * 
     */
    public Output<String> entry() {
        return this.entry;
    }

    private AclEntryAttachmentArgs() {}

    private AclEntryAttachmentArgs(AclEntryAttachmentArgs $) {
        this.aclId = $.aclId;
        this.comment = $.comment;
        this.entry = $.entry;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AclEntryAttachmentArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AclEntryAttachmentArgs $;

        public Builder() {
            $ = new AclEntryAttachmentArgs();
        }

        public Builder(AclEntryAttachmentArgs defaults) {
            $ = new AclEntryAttachmentArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param aclId The ID of the ACL that the entry will be attached to.
         * 
         * @return builder
         * 
         */
        public Builder aclId(Output<String> aclId) {
            $.aclId = aclId;
            return this;
        }

        /**
         * @param aclId The ID of the ACL that the entry will be attached to.
         * 
         * @return builder
         * 
         */
        public Builder aclId(String aclId) {
            return aclId(Output.of(aclId));
        }

        /**
         * @param comment The comment for the entry.
         * 
         * @return builder
         * 
         */
        public Builder comment(@Nullable Output<String> comment) {
            $.comment = comment;
            return this;
        }

        /**
         * @param comment The comment for the entry.
         * 
         * @return builder
         * 
         */
        public Builder comment(String comment) {
            return comment(Output.of(comment));
        }

        /**
         * @param entry The CIDR block of the entry to attach.
         * 
         * @return builder
         * 
         */
        public Builder entry(Output<String> entry) {
            $.entry = entry;
            return this;
        }

        /**
         * @param entry The CIDR block of the entry to attach.
         * 
         * @return builder
         * 
         */
        public Builder entry(String entry) {
            return entry(Output.of(entry));
        }

        public AclEntryAttachmentArgs build() {
            if ($.aclId == null) {
                throw new MissingRequiredPropertyException("AclEntryAttachmentArgs", "aclId");
            }
            if ($.entry == null) {
                throw new MissingRequiredPropertyException("AclEntryAttachmentArgs", "entry");
            }
            return $;
        }
    }

}
