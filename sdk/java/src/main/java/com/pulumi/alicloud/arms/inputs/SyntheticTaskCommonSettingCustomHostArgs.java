// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.arms.inputs;

import com.pulumi.alicloud.arms.inputs.SyntheticTaskCommonSettingCustomHostHostArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.util.List;
import java.util.Objects;


public final class SyntheticTaskCommonSettingCustomHostArgs extends com.pulumi.resources.ResourceArgs {

    public static final SyntheticTaskCommonSettingCustomHostArgs Empty = new SyntheticTaskCommonSettingCustomHostArgs();

    /**
     * The host list. See `hosts` below.
     * 
     */
    @Import(name="hosts", required=true)
    private Output<List<SyntheticTaskCommonSettingCustomHostHostArgs>> hosts;

    /**
     * @return The host list. See `hosts` below.
     * 
     */
    public Output<List<SyntheticTaskCommonSettingCustomHostHostArgs>> hosts() {
        return this.hosts;
    }

    /**
     * Selection method:
     * - 0: Random
     * - 1: Polling.
     * 
     */
    @Import(name="selectType", required=true)
    private Output<Integer> selectType;

    /**
     * @return Selection method:
     * - 0: Random
     * - 1: Polling.
     * 
     */
    public Output<Integer> selectType() {
        return this.selectType;
    }

    private SyntheticTaskCommonSettingCustomHostArgs() {}

    private SyntheticTaskCommonSettingCustomHostArgs(SyntheticTaskCommonSettingCustomHostArgs $) {
        this.hosts = $.hosts;
        this.selectType = $.selectType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SyntheticTaskCommonSettingCustomHostArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SyntheticTaskCommonSettingCustomHostArgs $;

        public Builder() {
            $ = new SyntheticTaskCommonSettingCustomHostArgs();
        }

        public Builder(SyntheticTaskCommonSettingCustomHostArgs defaults) {
            $ = new SyntheticTaskCommonSettingCustomHostArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param hosts The host list. See `hosts` below.
         * 
         * @return builder
         * 
         */
        public Builder hosts(Output<List<SyntheticTaskCommonSettingCustomHostHostArgs>> hosts) {
            $.hosts = hosts;
            return this;
        }

        /**
         * @param hosts The host list. See `hosts` below.
         * 
         * @return builder
         * 
         */
        public Builder hosts(List<SyntheticTaskCommonSettingCustomHostHostArgs> hosts) {
            return hosts(Output.of(hosts));
        }

        /**
         * @param hosts The host list. See `hosts` below.
         * 
         * @return builder
         * 
         */
        public Builder hosts(SyntheticTaskCommonSettingCustomHostHostArgs... hosts) {
            return hosts(List.of(hosts));
        }

        /**
         * @param selectType Selection method:
         * - 0: Random
         * - 1: Polling.
         * 
         * @return builder
         * 
         */
        public Builder selectType(Output<Integer> selectType) {
            $.selectType = selectType;
            return this;
        }

        /**
         * @param selectType Selection method:
         * - 0: Random
         * - 1: Polling.
         * 
         * @return builder
         * 
         */
        public Builder selectType(Integer selectType) {
            return selectType(Output.of(selectType));
        }

        public SyntheticTaskCommonSettingCustomHostArgs build() {
            if ($.hosts == null) {
                throw new MissingRequiredPropertyException("SyntheticTaskCommonSettingCustomHostArgs", "hosts");
            }
            if ($.selectType == null) {
                throw new MissingRequiredPropertyException("SyntheticTaskCommonSettingCustomHostArgs", "selectType");
            }
            return $;
        }
    }

}
