// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.adb;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DBClusterLakeVersionArgs extends com.pulumi.resources.ResourceArgs {

    public static final DBClusterLakeVersionArgs Empty = new DBClusterLakeVersionArgs();

    /**
     * The ID of the backup set that you want to use to restore data.
     * 
     */
    @Import(name="backupSetId")
    private @Nullable Output<String> backupSetId;

    /**
     * @return The ID of the backup set that you want to use to restore data.
     * 
     */
    public Optional<Output<String>> backupSetId() {
        return Optional.ofNullable(this.backupSetId);
    }

    /**
     * The computing resources of the cluster.
     * 
     */
    @Import(name="computeResource")
    private @Nullable Output<String> computeResource;

    /**
     * @return The computing resources of the cluster.
     * 
     */
    public Optional<Output<String>> computeResource() {
        return Optional.ofNullable(this.computeResource);
    }

    /**
     * The description of the cluster.
     * 
     */
    @Import(name="dbClusterDescription")
    private @Nullable Output<String> dbClusterDescription;

    /**
     * @return The description of the cluster.
     * 
     */
    public Optional<Output<String>> dbClusterDescription() {
        return Optional.ofNullable(this.dbClusterDescription);
    }

    /**
     * The version of the cluster. Valid values: `5.0`.
     * 
     */
    @Import(name="dbClusterVersion", required=true)
    private Output<String> dbClusterVersion;

    /**
     * @return The version of the cluster. Valid values: `5.0`.
     * 
     */
    public Output<String> dbClusterVersion() {
        return this.dbClusterVersion;
    }

    /**
     * Specifies whether to enable disk encryption. Valid values: `true`, `false`.
     * 
     */
    @Import(name="diskEncryption")
    private @Nullable Output<Boolean> diskEncryption;

    /**
     * @return Specifies whether to enable disk encryption. Valid values: `true`, `false`.
     * 
     */
    public Optional<Output<Boolean>> diskEncryption() {
        return Optional.ofNullable(this.diskEncryption);
    }

    /**
     * Whether to enable default allocation of resources to userDefault resource groups.
     * 
     */
    @Import(name="enableDefaultResourceGroup")
    private @Nullable Output<Boolean> enableDefaultResourceGroup;

    /**
     * @return Whether to enable default allocation of resources to userDefault resource groups.
     * 
     */
    public Optional<Output<Boolean>> enableDefaultResourceGroup() {
        return Optional.ofNullable(this.enableDefaultResourceGroup);
    }

    /**
     * Specifies whether to enable SSL encryption. Valid values: `true`, `false`.
     * 
     */
    @Import(name="enableSsl")
    private @Nullable Output<Boolean> enableSsl;

    /**
     * @return Specifies whether to enable SSL encryption. Valid values: `true`, `false`.
     * 
     */
    public Optional<Output<Boolean>> enableSsl() {
        return Optional.ofNullable(this.enableSsl);
    }

    /**
     * The ID of the key that is used to encrypt disk data. `kmsId` is valid only when `diskEncryption` is set to `true`.
     * 
     */
    @Import(name="kmsId")
    private @Nullable Output<String> kmsId;

    /**
     * @return The ID of the key that is used to encrypt disk data. `kmsId` is valid only when `diskEncryption` is set to `true`.
     * 
     */
    public Optional<Output<String>> kmsId() {
        return Optional.ofNullable(this.kmsId);
    }

    /**
     * The payment type of the resource. Valid values: `PayAsYouGo`, `Subscription`. **NOTE:** From version 1.245.0, `paymentType` can be set to `Subscription`.
     * 
     */
    @Import(name="paymentType", required=true)
    private Output<String> paymentType;

    /**
     * @return The payment type of the resource. Valid values: `PayAsYouGo`, `Subscription`. **NOTE:** From version 1.245.0, `paymentType` can be set to `Subscription`.
     * 
     */
    public Output<String> paymentType() {
        return this.paymentType;
    }

    /**
     * The subscription period of the subscription cluster. Valid values: `1` to `9`, `12`, `24`, `36`.
     * 
     */
    @Import(name="period")
    private @Nullable Output<Integer> period;

    /**
     * @return The subscription period of the subscription cluster. Valid values: `1` to `9`, `12`, `24`, `36`.
     * 
     */
    public Optional<Output<Integer>> period() {
        return Optional.ofNullable(this.period);
    }

    /**
     * The product form of the cluster. Valid values:
     * - `IntegrationForm`: Integrated.
     * - `LegacyForm`: Data Lakehouse Edition.
     * 
     */
    @Import(name="productForm")
    private @Nullable Output<String> productForm;

    /**
     * @return The product form of the cluster. Valid values:
     * - `IntegrationForm`: Integrated.
     * - `LegacyForm`: Data Lakehouse Edition.
     * 
     */
    public Optional<Output<String>> productForm() {
        return Optional.ofNullable(this.productForm);
    }

    /**
     * The edition of the cluster. Valid values:
     * - `BasicVersion`: Basic Edition.
     * - `EnterpriseVersion`: Enterprise Edition.
     * &gt; **NOTE:** `productVersion` must be specified only when `productForm` is set to `IntegrationForm`.
     * 
     */
    @Import(name="productVersion")
    private @Nullable Output<String> productVersion;

    /**
     * @return The edition of the cluster. Valid values:
     * - `BasicVersion`: Basic Edition.
     * - `EnterpriseVersion`: Enterprise Edition.
     * &gt; **NOTE:** `productVersion` must be specified only when `productForm` is set to `IntegrationForm`.
     * 
     */
    public Optional<Output<String>> productVersion() {
        return Optional.ofNullable(this.productVersion);
    }

    /**
     * The number of reserved resource nodes.
     * 
     */
    @Import(name="reservedNodeCount")
    private @Nullable Output<Integer> reservedNodeCount;

    /**
     * @return The number of reserved resource nodes.
     * 
     */
    public Optional<Output<Integer>> reservedNodeCount() {
        return Optional.ofNullable(this.reservedNodeCount);
    }

    /**
     * The specifications of reserved resource nodes.
     * 
     */
    @Import(name="reservedNodeSize")
    private @Nullable Output<String> reservedNodeSize;

    /**
     * @return The specifications of reserved resource nodes.
     * 
     */
    public Optional<Output<String>> reservedNodeSize() {
        return Optional.ofNullable(this.reservedNodeSize);
    }

    /**
     * The ID of the resource group.
     * 
     */
    @Import(name="resourceGroupId")
    private @Nullable Output<String> resourceGroupId;

    /**
     * @return The ID of the resource group.
     * 
     */
    public Optional<Output<String>> resourceGroupId() {
        return Optional.ofNullable(this.resourceGroupId);
    }

    /**
     * The point in time to which you want to restore data from the backup set.
     * 
     */
    @Import(name="restoreToTime")
    private @Nullable Output<String> restoreToTime;

    /**
     * @return The point in time to which you want to restore data from the backup set.
     * 
     */
    public Optional<Output<String>> restoreToTime() {
        return Optional.ofNullable(this.restoreToTime);
    }

    /**
     * The method that you want to use to restore data. Valid values:
     * 
     */
    @Import(name="restoreType")
    private @Nullable Output<String> restoreType;

    /**
     * @return The method that you want to use to restore data. Valid values:
     * 
     */
    public Optional<Output<String>> restoreType() {
        return Optional.ofNullable(this.restoreType);
    }

    /**
     * The ID of the secondary zone.
     * 
     */
    @Import(name="secondaryVswitchId")
    private @Nullable Output<String> secondaryVswitchId;

    /**
     * @return The ID of the secondary zone.
     * 
     */
    public Optional<Output<String>> secondaryVswitchId() {
        return Optional.ofNullable(this.secondaryVswitchId);
    }

    /**
     * The ID of the secondary vSwitch.
     * 
     */
    @Import(name="secondaryZoneId")
    private @Nullable Output<String> secondaryZoneId;

    /**
     * @return The ID of the secondary vSwitch.
     * 
     */
    public Optional<Output<String>> secondaryZoneId() {
        return Optional.ofNullable(this.secondaryZoneId);
    }

    /**
     * The IP addresses in an IP address whitelist of a cluster. Separate multiple IP addresses with commas (,). You can add a maximum of 500 different IP addresses to a whitelist. The entries in the IP address whitelist must be in one of the following formats:
     * - IP addresses, such as 10.23.XX.XX.
     * - CIDR blocks, such as 10.23.xx.xx/24. In this example, 24 indicates that the prefix of each IP address in the IP whitelist is 24 bits in length. You can replace 24 with a value within the range of 1 to 32.
     * 
     */
    @Import(name="securityIps")
    private @Nullable Output<String> securityIps;

    /**
     * @return The IP addresses in an IP address whitelist of a cluster. Separate multiple IP addresses with commas (,). You can add a maximum of 500 different IP addresses to a whitelist. The entries in the IP address whitelist must be in one of the following formats:
     * - IP addresses, such as 10.23.XX.XX.
     * - CIDR blocks, such as 10.23.xx.xx/24. In this example, 24 indicates that the prefix of each IP address in the IP whitelist is 24 bits in length. You can replace 24 with a value within the range of 1 to 32.
     * 
     */
    public Optional<Output<String>> securityIps() {
        return Optional.ofNullable(this.securityIps);
    }

    /**
     * The ID of the source AnalyticDB for MySQL Data Warehouse Edition cluster.
     * 
     */
    @Import(name="sourceDbClusterId")
    private @Nullable Output<String> sourceDbClusterId;

    /**
     * @return The ID of the source AnalyticDB for MySQL Data Warehouse Edition cluster.
     * 
     */
    public Optional<Output<String>> sourceDbClusterId() {
        return Optional.ofNullable(this.sourceDbClusterId);
    }

    /**
     * The storage resources of the cluster.
     * 
     */
    @Import(name="storageResource")
    private @Nullable Output<String> storageResource;

    /**
     * @return The storage resources of the cluster.
     * 
     */
    public Optional<Output<String>> storageResource() {
        return Optional.ofNullable(this.storageResource);
    }

    /**
     * The vpc ID of the resource.
     * 
     */
    @Import(name="vpcId", required=true)
    private Output<String> vpcId;

    /**
     * @return The vpc ID of the resource.
     * 
     */
    public Output<String> vpcId() {
        return this.vpcId;
    }

    /**
     * The ID of the vSwitch.
     * 
     */
    @Import(name="vswitchId", required=true)
    private Output<String> vswitchId;

    /**
     * @return The ID of the vSwitch.
     * 
     */
    public Output<String> vswitchId() {
        return this.vswitchId;
    }

    /**
     * The zone ID of the resource.
     * 
     */
    @Import(name="zoneId", required=true)
    private Output<String> zoneId;

    /**
     * @return The zone ID of the resource.
     * 
     */
    public Output<String> zoneId() {
        return this.zoneId;
    }

    private DBClusterLakeVersionArgs() {}

    private DBClusterLakeVersionArgs(DBClusterLakeVersionArgs $) {
        this.backupSetId = $.backupSetId;
        this.computeResource = $.computeResource;
        this.dbClusterDescription = $.dbClusterDescription;
        this.dbClusterVersion = $.dbClusterVersion;
        this.diskEncryption = $.diskEncryption;
        this.enableDefaultResourceGroup = $.enableDefaultResourceGroup;
        this.enableSsl = $.enableSsl;
        this.kmsId = $.kmsId;
        this.paymentType = $.paymentType;
        this.period = $.period;
        this.productForm = $.productForm;
        this.productVersion = $.productVersion;
        this.reservedNodeCount = $.reservedNodeCount;
        this.reservedNodeSize = $.reservedNodeSize;
        this.resourceGroupId = $.resourceGroupId;
        this.restoreToTime = $.restoreToTime;
        this.restoreType = $.restoreType;
        this.secondaryVswitchId = $.secondaryVswitchId;
        this.secondaryZoneId = $.secondaryZoneId;
        this.securityIps = $.securityIps;
        this.sourceDbClusterId = $.sourceDbClusterId;
        this.storageResource = $.storageResource;
        this.vpcId = $.vpcId;
        this.vswitchId = $.vswitchId;
        this.zoneId = $.zoneId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DBClusterLakeVersionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DBClusterLakeVersionArgs $;

        public Builder() {
            $ = new DBClusterLakeVersionArgs();
        }

        public Builder(DBClusterLakeVersionArgs defaults) {
            $ = new DBClusterLakeVersionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param backupSetId The ID of the backup set that you want to use to restore data.
         * 
         * @return builder
         * 
         */
        public Builder backupSetId(@Nullable Output<String> backupSetId) {
            $.backupSetId = backupSetId;
            return this;
        }

        /**
         * @param backupSetId The ID of the backup set that you want to use to restore data.
         * 
         * @return builder
         * 
         */
        public Builder backupSetId(String backupSetId) {
            return backupSetId(Output.of(backupSetId));
        }

        /**
         * @param computeResource The computing resources of the cluster.
         * 
         * @return builder
         * 
         */
        public Builder computeResource(@Nullable Output<String> computeResource) {
            $.computeResource = computeResource;
            return this;
        }

        /**
         * @param computeResource The computing resources of the cluster.
         * 
         * @return builder
         * 
         */
        public Builder computeResource(String computeResource) {
            return computeResource(Output.of(computeResource));
        }

        /**
         * @param dbClusterDescription The description of the cluster.
         * 
         * @return builder
         * 
         */
        public Builder dbClusterDescription(@Nullable Output<String> dbClusterDescription) {
            $.dbClusterDescription = dbClusterDescription;
            return this;
        }

        /**
         * @param dbClusterDescription The description of the cluster.
         * 
         * @return builder
         * 
         */
        public Builder dbClusterDescription(String dbClusterDescription) {
            return dbClusterDescription(Output.of(dbClusterDescription));
        }

        /**
         * @param dbClusterVersion The version of the cluster. Valid values: `5.0`.
         * 
         * @return builder
         * 
         */
        public Builder dbClusterVersion(Output<String> dbClusterVersion) {
            $.dbClusterVersion = dbClusterVersion;
            return this;
        }

        /**
         * @param dbClusterVersion The version of the cluster. Valid values: `5.0`.
         * 
         * @return builder
         * 
         */
        public Builder dbClusterVersion(String dbClusterVersion) {
            return dbClusterVersion(Output.of(dbClusterVersion));
        }

        /**
         * @param diskEncryption Specifies whether to enable disk encryption. Valid values: `true`, `false`.
         * 
         * @return builder
         * 
         */
        public Builder diskEncryption(@Nullable Output<Boolean> diskEncryption) {
            $.diskEncryption = diskEncryption;
            return this;
        }

        /**
         * @param diskEncryption Specifies whether to enable disk encryption. Valid values: `true`, `false`.
         * 
         * @return builder
         * 
         */
        public Builder diskEncryption(Boolean diskEncryption) {
            return diskEncryption(Output.of(diskEncryption));
        }

        /**
         * @param enableDefaultResourceGroup Whether to enable default allocation of resources to userDefault resource groups.
         * 
         * @return builder
         * 
         */
        public Builder enableDefaultResourceGroup(@Nullable Output<Boolean> enableDefaultResourceGroup) {
            $.enableDefaultResourceGroup = enableDefaultResourceGroup;
            return this;
        }

        /**
         * @param enableDefaultResourceGroup Whether to enable default allocation of resources to userDefault resource groups.
         * 
         * @return builder
         * 
         */
        public Builder enableDefaultResourceGroup(Boolean enableDefaultResourceGroup) {
            return enableDefaultResourceGroup(Output.of(enableDefaultResourceGroup));
        }

        /**
         * @param enableSsl Specifies whether to enable SSL encryption. Valid values: `true`, `false`.
         * 
         * @return builder
         * 
         */
        public Builder enableSsl(@Nullable Output<Boolean> enableSsl) {
            $.enableSsl = enableSsl;
            return this;
        }

        /**
         * @param enableSsl Specifies whether to enable SSL encryption. Valid values: `true`, `false`.
         * 
         * @return builder
         * 
         */
        public Builder enableSsl(Boolean enableSsl) {
            return enableSsl(Output.of(enableSsl));
        }

        /**
         * @param kmsId The ID of the key that is used to encrypt disk data. `kmsId` is valid only when `diskEncryption` is set to `true`.
         * 
         * @return builder
         * 
         */
        public Builder kmsId(@Nullable Output<String> kmsId) {
            $.kmsId = kmsId;
            return this;
        }

        /**
         * @param kmsId The ID of the key that is used to encrypt disk data. `kmsId` is valid only when `diskEncryption` is set to `true`.
         * 
         * @return builder
         * 
         */
        public Builder kmsId(String kmsId) {
            return kmsId(Output.of(kmsId));
        }

        /**
         * @param paymentType The payment type of the resource. Valid values: `PayAsYouGo`, `Subscription`. **NOTE:** From version 1.245.0, `paymentType` can be set to `Subscription`.
         * 
         * @return builder
         * 
         */
        public Builder paymentType(Output<String> paymentType) {
            $.paymentType = paymentType;
            return this;
        }

        /**
         * @param paymentType The payment type of the resource. Valid values: `PayAsYouGo`, `Subscription`. **NOTE:** From version 1.245.0, `paymentType` can be set to `Subscription`.
         * 
         * @return builder
         * 
         */
        public Builder paymentType(String paymentType) {
            return paymentType(Output.of(paymentType));
        }

        /**
         * @param period The subscription period of the subscription cluster. Valid values: `1` to `9`, `12`, `24`, `36`.
         * 
         * @return builder
         * 
         */
        public Builder period(@Nullable Output<Integer> period) {
            $.period = period;
            return this;
        }

        /**
         * @param period The subscription period of the subscription cluster. Valid values: `1` to `9`, `12`, `24`, `36`.
         * 
         * @return builder
         * 
         */
        public Builder period(Integer period) {
            return period(Output.of(period));
        }

        /**
         * @param productForm The product form of the cluster. Valid values:
         * - `IntegrationForm`: Integrated.
         * - `LegacyForm`: Data Lakehouse Edition.
         * 
         * @return builder
         * 
         */
        public Builder productForm(@Nullable Output<String> productForm) {
            $.productForm = productForm;
            return this;
        }

        /**
         * @param productForm The product form of the cluster. Valid values:
         * - `IntegrationForm`: Integrated.
         * - `LegacyForm`: Data Lakehouse Edition.
         * 
         * @return builder
         * 
         */
        public Builder productForm(String productForm) {
            return productForm(Output.of(productForm));
        }

        /**
         * @param productVersion The edition of the cluster. Valid values:
         * - `BasicVersion`: Basic Edition.
         * - `EnterpriseVersion`: Enterprise Edition.
         * &gt; **NOTE:** `productVersion` must be specified only when `productForm` is set to `IntegrationForm`.
         * 
         * @return builder
         * 
         */
        public Builder productVersion(@Nullable Output<String> productVersion) {
            $.productVersion = productVersion;
            return this;
        }

        /**
         * @param productVersion The edition of the cluster. Valid values:
         * - `BasicVersion`: Basic Edition.
         * - `EnterpriseVersion`: Enterprise Edition.
         * &gt; **NOTE:** `productVersion` must be specified only when `productForm` is set to `IntegrationForm`.
         * 
         * @return builder
         * 
         */
        public Builder productVersion(String productVersion) {
            return productVersion(Output.of(productVersion));
        }

        /**
         * @param reservedNodeCount The number of reserved resource nodes.
         * 
         * @return builder
         * 
         */
        public Builder reservedNodeCount(@Nullable Output<Integer> reservedNodeCount) {
            $.reservedNodeCount = reservedNodeCount;
            return this;
        }

        /**
         * @param reservedNodeCount The number of reserved resource nodes.
         * 
         * @return builder
         * 
         */
        public Builder reservedNodeCount(Integer reservedNodeCount) {
            return reservedNodeCount(Output.of(reservedNodeCount));
        }

        /**
         * @param reservedNodeSize The specifications of reserved resource nodes.
         * 
         * @return builder
         * 
         */
        public Builder reservedNodeSize(@Nullable Output<String> reservedNodeSize) {
            $.reservedNodeSize = reservedNodeSize;
            return this;
        }

        /**
         * @param reservedNodeSize The specifications of reserved resource nodes.
         * 
         * @return builder
         * 
         */
        public Builder reservedNodeSize(String reservedNodeSize) {
            return reservedNodeSize(Output.of(reservedNodeSize));
        }

        /**
         * @param resourceGroupId The ID of the resource group.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupId(@Nullable Output<String> resourceGroupId) {
            $.resourceGroupId = resourceGroupId;
            return this;
        }

        /**
         * @param resourceGroupId The ID of the resource group.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupId(String resourceGroupId) {
            return resourceGroupId(Output.of(resourceGroupId));
        }

        /**
         * @param restoreToTime The point in time to which you want to restore data from the backup set.
         * 
         * @return builder
         * 
         */
        public Builder restoreToTime(@Nullable Output<String> restoreToTime) {
            $.restoreToTime = restoreToTime;
            return this;
        }

        /**
         * @param restoreToTime The point in time to which you want to restore data from the backup set.
         * 
         * @return builder
         * 
         */
        public Builder restoreToTime(String restoreToTime) {
            return restoreToTime(Output.of(restoreToTime));
        }

        /**
         * @param restoreType The method that you want to use to restore data. Valid values:
         * 
         * @return builder
         * 
         */
        public Builder restoreType(@Nullable Output<String> restoreType) {
            $.restoreType = restoreType;
            return this;
        }

        /**
         * @param restoreType The method that you want to use to restore data. Valid values:
         * 
         * @return builder
         * 
         */
        public Builder restoreType(String restoreType) {
            return restoreType(Output.of(restoreType));
        }

        /**
         * @param secondaryVswitchId The ID of the secondary zone.
         * 
         * @return builder
         * 
         */
        public Builder secondaryVswitchId(@Nullable Output<String> secondaryVswitchId) {
            $.secondaryVswitchId = secondaryVswitchId;
            return this;
        }

        /**
         * @param secondaryVswitchId The ID of the secondary zone.
         * 
         * @return builder
         * 
         */
        public Builder secondaryVswitchId(String secondaryVswitchId) {
            return secondaryVswitchId(Output.of(secondaryVswitchId));
        }

        /**
         * @param secondaryZoneId The ID of the secondary vSwitch.
         * 
         * @return builder
         * 
         */
        public Builder secondaryZoneId(@Nullable Output<String> secondaryZoneId) {
            $.secondaryZoneId = secondaryZoneId;
            return this;
        }

        /**
         * @param secondaryZoneId The ID of the secondary vSwitch.
         * 
         * @return builder
         * 
         */
        public Builder secondaryZoneId(String secondaryZoneId) {
            return secondaryZoneId(Output.of(secondaryZoneId));
        }

        /**
         * @param securityIps The IP addresses in an IP address whitelist of a cluster. Separate multiple IP addresses with commas (,). You can add a maximum of 500 different IP addresses to a whitelist. The entries in the IP address whitelist must be in one of the following formats:
         * - IP addresses, such as 10.23.XX.XX.
         * - CIDR blocks, such as 10.23.xx.xx/24. In this example, 24 indicates that the prefix of each IP address in the IP whitelist is 24 bits in length. You can replace 24 with a value within the range of 1 to 32.
         * 
         * @return builder
         * 
         */
        public Builder securityIps(@Nullable Output<String> securityIps) {
            $.securityIps = securityIps;
            return this;
        }

        /**
         * @param securityIps The IP addresses in an IP address whitelist of a cluster. Separate multiple IP addresses with commas (,). You can add a maximum of 500 different IP addresses to a whitelist. The entries in the IP address whitelist must be in one of the following formats:
         * - IP addresses, such as 10.23.XX.XX.
         * - CIDR blocks, such as 10.23.xx.xx/24. In this example, 24 indicates that the prefix of each IP address in the IP whitelist is 24 bits in length. You can replace 24 with a value within the range of 1 to 32.
         * 
         * @return builder
         * 
         */
        public Builder securityIps(String securityIps) {
            return securityIps(Output.of(securityIps));
        }

        /**
         * @param sourceDbClusterId The ID of the source AnalyticDB for MySQL Data Warehouse Edition cluster.
         * 
         * @return builder
         * 
         */
        public Builder sourceDbClusterId(@Nullable Output<String> sourceDbClusterId) {
            $.sourceDbClusterId = sourceDbClusterId;
            return this;
        }

        /**
         * @param sourceDbClusterId The ID of the source AnalyticDB for MySQL Data Warehouse Edition cluster.
         * 
         * @return builder
         * 
         */
        public Builder sourceDbClusterId(String sourceDbClusterId) {
            return sourceDbClusterId(Output.of(sourceDbClusterId));
        }

        /**
         * @param storageResource The storage resources of the cluster.
         * 
         * @return builder
         * 
         */
        public Builder storageResource(@Nullable Output<String> storageResource) {
            $.storageResource = storageResource;
            return this;
        }

        /**
         * @param storageResource The storage resources of the cluster.
         * 
         * @return builder
         * 
         */
        public Builder storageResource(String storageResource) {
            return storageResource(Output.of(storageResource));
        }

        /**
         * @param vpcId The vpc ID of the resource.
         * 
         * @return builder
         * 
         */
        public Builder vpcId(Output<String> vpcId) {
            $.vpcId = vpcId;
            return this;
        }

        /**
         * @param vpcId The vpc ID of the resource.
         * 
         * @return builder
         * 
         */
        public Builder vpcId(String vpcId) {
            return vpcId(Output.of(vpcId));
        }

        /**
         * @param vswitchId The ID of the vSwitch.
         * 
         * @return builder
         * 
         */
        public Builder vswitchId(Output<String> vswitchId) {
            $.vswitchId = vswitchId;
            return this;
        }

        /**
         * @param vswitchId The ID of the vSwitch.
         * 
         * @return builder
         * 
         */
        public Builder vswitchId(String vswitchId) {
            return vswitchId(Output.of(vswitchId));
        }

        /**
         * @param zoneId The zone ID of the resource.
         * 
         * @return builder
         * 
         */
        public Builder zoneId(Output<String> zoneId) {
            $.zoneId = zoneId;
            return this;
        }

        /**
         * @param zoneId The zone ID of the resource.
         * 
         * @return builder
         * 
         */
        public Builder zoneId(String zoneId) {
            return zoneId(Output.of(zoneId));
        }

        public DBClusterLakeVersionArgs build() {
            if ($.dbClusterVersion == null) {
                throw new MissingRequiredPropertyException("DBClusterLakeVersionArgs", "dbClusterVersion");
            }
            if ($.paymentType == null) {
                throw new MissingRequiredPropertyException("DBClusterLakeVersionArgs", "paymentType");
            }
            if ($.vpcId == null) {
                throw new MissingRequiredPropertyException("DBClusterLakeVersionArgs", "vpcId");
            }
            if ($.vswitchId == null) {
                throw new MissingRequiredPropertyException("DBClusterLakeVersionArgs", "vswitchId");
            }
            if ($.zoneId == null) {
                throw new MissingRequiredPropertyException("DBClusterLakeVersionArgs", "zoneId");
            }
            return $;
        }
    }

}
