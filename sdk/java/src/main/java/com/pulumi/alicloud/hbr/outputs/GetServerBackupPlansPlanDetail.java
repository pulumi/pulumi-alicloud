// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.hbr.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetServerBackupPlansPlanDetail {
    private Boolean appConsistent;
    private String destinationRegionId;
    private Integer destinationRetention;
    private List<String> diskIdLists;
    private Boolean doCopy;
    private Boolean enableFsFreeze;
    private String postScriptPath;
    private String preScriptPath;
    private Boolean snapshotGroup;
    private Integer timeoutInSeconds;

    private GetServerBackupPlansPlanDetail() {}
    public Boolean appConsistent() {
        return this.appConsistent;
    }
    public String destinationRegionId() {
        return this.destinationRegionId;
    }
    public Integer destinationRetention() {
        return this.destinationRetention;
    }
    public List<String> diskIdLists() {
        return this.diskIdLists;
    }
    public Boolean doCopy() {
        return this.doCopy;
    }
    public Boolean enableFsFreeze() {
        return this.enableFsFreeze;
    }
    public String postScriptPath() {
        return this.postScriptPath;
    }
    public String preScriptPath() {
        return this.preScriptPath;
    }
    public Boolean snapshotGroup() {
        return this.snapshotGroup;
    }
    public Integer timeoutInSeconds() {
        return this.timeoutInSeconds;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetServerBackupPlansPlanDetail defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean appConsistent;
        private String destinationRegionId;
        private Integer destinationRetention;
        private List<String> diskIdLists;
        private Boolean doCopy;
        private Boolean enableFsFreeze;
        private String postScriptPath;
        private String preScriptPath;
        private Boolean snapshotGroup;
        private Integer timeoutInSeconds;
        public Builder() {}
        public Builder(GetServerBackupPlansPlanDetail defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.appConsistent = defaults.appConsistent;
    	      this.destinationRegionId = defaults.destinationRegionId;
    	      this.destinationRetention = defaults.destinationRetention;
    	      this.diskIdLists = defaults.diskIdLists;
    	      this.doCopy = defaults.doCopy;
    	      this.enableFsFreeze = defaults.enableFsFreeze;
    	      this.postScriptPath = defaults.postScriptPath;
    	      this.preScriptPath = defaults.preScriptPath;
    	      this.snapshotGroup = defaults.snapshotGroup;
    	      this.timeoutInSeconds = defaults.timeoutInSeconds;
        }

        @CustomType.Setter
        public Builder appConsistent(Boolean appConsistent) {
            if (appConsistent == null) {
              throw new MissingRequiredPropertyException("GetServerBackupPlansPlanDetail", "appConsistent");
            }
            this.appConsistent = appConsistent;
            return this;
        }
        @CustomType.Setter
        public Builder destinationRegionId(String destinationRegionId) {
            if (destinationRegionId == null) {
              throw new MissingRequiredPropertyException("GetServerBackupPlansPlanDetail", "destinationRegionId");
            }
            this.destinationRegionId = destinationRegionId;
            return this;
        }
        @CustomType.Setter
        public Builder destinationRetention(Integer destinationRetention) {
            if (destinationRetention == null) {
              throw new MissingRequiredPropertyException("GetServerBackupPlansPlanDetail", "destinationRetention");
            }
            this.destinationRetention = destinationRetention;
            return this;
        }
        @CustomType.Setter
        public Builder diskIdLists(List<String> diskIdLists) {
            if (diskIdLists == null) {
              throw new MissingRequiredPropertyException("GetServerBackupPlansPlanDetail", "diskIdLists");
            }
            this.diskIdLists = diskIdLists;
            return this;
        }
        public Builder diskIdLists(String... diskIdLists) {
            return diskIdLists(List.of(diskIdLists));
        }
        @CustomType.Setter
        public Builder doCopy(Boolean doCopy) {
            if (doCopy == null) {
              throw new MissingRequiredPropertyException("GetServerBackupPlansPlanDetail", "doCopy");
            }
            this.doCopy = doCopy;
            return this;
        }
        @CustomType.Setter
        public Builder enableFsFreeze(Boolean enableFsFreeze) {
            if (enableFsFreeze == null) {
              throw new MissingRequiredPropertyException("GetServerBackupPlansPlanDetail", "enableFsFreeze");
            }
            this.enableFsFreeze = enableFsFreeze;
            return this;
        }
        @CustomType.Setter
        public Builder postScriptPath(String postScriptPath) {
            if (postScriptPath == null) {
              throw new MissingRequiredPropertyException("GetServerBackupPlansPlanDetail", "postScriptPath");
            }
            this.postScriptPath = postScriptPath;
            return this;
        }
        @CustomType.Setter
        public Builder preScriptPath(String preScriptPath) {
            if (preScriptPath == null) {
              throw new MissingRequiredPropertyException("GetServerBackupPlansPlanDetail", "preScriptPath");
            }
            this.preScriptPath = preScriptPath;
            return this;
        }
        @CustomType.Setter
        public Builder snapshotGroup(Boolean snapshotGroup) {
            if (snapshotGroup == null) {
              throw new MissingRequiredPropertyException("GetServerBackupPlansPlanDetail", "snapshotGroup");
            }
            this.snapshotGroup = snapshotGroup;
            return this;
        }
        @CustomType.Setter
        public Builder timeoutInSeconds(Integer timeoutInSeconds) {
            if (timeoutInSeconds == null) {
              throw new MissingRequiredPropertyException("GetServerBackupPlansPlanDetail", "timeoutInSeconds");
            }
            this.timeoutInSeconds = timeoutInSeconds;
            return this;
        }
        public GetServerBackupPlansPlanDetail build() {
            final var _resultValue = new GetServerBackupPlansPlanDetail();
            _resultValue.appConsistent = appConsistent;
            _resultValue.destinationRegionId = destinationRegionId;
            _resultValue.destinationRetention = destinationRetention;
            _resultValue.diskIdLists = diskIdLists;
            _resultValue.doCopy = doCopy;
            _resultValue.enableFsFreeze = enableFsFreeze;
            _resultValue.postScriptPath = postScriptPath;
            _resultValue.preScriptPath = preScriptPath;
            _resultValue.snapshotGroup = snapshotGroup;
            _resultValue.timeoutInSeconds = timeoutInSeconds;
            return _resultValue;
        }
    }
}
