// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.alb.inputs;

import com.pulumi.alicloud.alb.inputs.LoadBalancerZoneMappingLoadBalancerAddressArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class LoadBalancerZoneMappingArgs extends com.pulumi.resources.ResourceArgs {

    public static final LoadBalancerZoneMappingArgs Empty = new LoadBalancerZoneMappingArgs();

    /**
     * An IP address of the IPv4 type.
     * 
     */
    @Import(name="address")
    private @Nullable Output<String> address;

    /**
     * @return An IP address of the IPv4 type.
     * 
     */
    public Optional<Output<String>> address() {
        return Optional.ofNullable(this.address);
    }

    /**
     * The ID of the EIP instance.
     * 
     */
    @Import(name="allocationId")
    private @Nullable Output<String> allocationId;

    /**
     * @return The ID of the EIP instance.
     * 
     */
    public Optional<Output<String>> allocationId() {
        return Optional.ofNullable(this.allocationId);
    }

    /**
     * The type of the EIP instance.
     * 
     */
    @Import(name="eipType")
    private @Nullable Output<String> eipType;

    /**
     * @return The type of the EIP instance.
     * 
     */
    public Optional<Output<String>> eipType() {
        return Optional.ofNullable(this.eipType);
    }

    /**
     * IPv4 private network address.
     * 
     */
    @Import(name="intranetAddress")
    private @Nullable Output<String> intranetAddress;

    /**
     * @return IPv4 private network address.
     * 
     */
    public Optional<Output<String>> intranetAddress() {
        return Optional.ofNullable(this.intranetAddress);
    }

    /**
     * An IP address of the IPv6 type.
     * 
     */
    @Import(name="ipv6Address")
    private @Nullable Output<String> ipv6Address;

    /**
     * @return An IP address of the IPv6 type.
     * 
     */
    public Optional<Output<String>> ipv6Address() {
        return Optional.ofNullable(this.ipv6Address);
    }

    /**
     * The instance address.
     * 
     */
    @Import(name="loadBalancerAddresses")
    private @Nullable Output<List<LoadBalancerZoneMappingLoadBalancerAddressArgs>> loadBalancerAddresses;

    /**
     * @return The instance address.
     * 
     */
    public Optional<Output<List<LoadBalancerZoneMappingLoadBalancerAddressArgs>>> loadBalancerAddresses() {
        return Optional.ofNullable(this.loadBalancerAddresses);
    }

    /**
     * The ID of the vSwitch that corresponds to the zone. Each zone can use only one vSwitch and subnet.
     * 
     */
    @Import(name="vswitchId", required=true)
    private Output<String> vswitchId;

    /**
     * @return The ID of the vSwitch that corresponds to the zone. Each zone can use only one vSwitch and subnet.
     * 
     */
    public Output<String> vswitchId() {
        return this.vswitchId;
    }

    /**
     * The ID of the zone to which the SLB instance belongs.
     * 
     */
    @Import(name="zoneId", required=true)
    private Output<String> zoneId;

    /**
     * @return The ID of the zone to which the SLB instance belongs.
     * 
     */
    public Output<String> zoneId() {
        return this.zoneId;
    }

    private LoadBalancerZoneMappingArgs() {}

    private LoadBalancerZoneMappingArgs(LoadBalancerZoneMappingArgs $) {
        this.address = $.address;
        this.allocationId = $.allocationId;
        this.eipType = $.eipType;
        this.intranetAddress = $.intranetAddress;
        this.ipv6Address = $.ipv6Address;
        this.loadBalancerAddresses = $.loadBalancerAddresses;
        this.vswitchId = $.vswitchId;
        this.zoneId = $.zoneId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LoadBalancerZoneMappingArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LoadBalancerZoneMappingArgs $;

        public Builder() {
            $ = new LoadBalancerZoneMappingArgs();
        }

        public Builder(LoadBalancerZoneMappingArgs defaults) {
            $ = new LoadBalancerZoneMappingArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param address An IP address of the IPv4 type.
         * 
         * @return builder
         * 
         */
        public Builder address(@Nullable Output<String> address) {
            $.address = address;
            return this;
        }

        /**
         * @param address An IP address of the IPv4 type.
         * 
         * @return builder
         * 
         */
        public Builder address(String address) {
            return address(Output.of(address));
        }

        /**
         * @param allocationId The ID of the EIP instance.
         * 
         * @return builder
         * 
         */
        public Builder allocationId(@Nullable Output<String> allocationId) {
            $.allocationId = allocationId;
            return this;
        }

        /**
         * @param allocationId The ID of the EIP instance.
         * 
         * @return builder
         * 
         */
        public Builder allocationId(String allocationId) {
            return allocationId(Output.of(allocationId));
        }

        /**
         * @param eipType The type of the EIP instance.
         * 
         * @return builder
         * 
         */
        public Builder eipType(@Nullable Output<String> eipType) {
            $.eipType = eipType;
            return this;
        }

        /**
         * @param eipType The type of the EIP instance.
         * 
         * @return builder
         * 
         */
        public Builder eipType(String eipType) {
            return eipType(Output.of(eipType));
        }

        /**
         * @param intranetAddress IPv4 private network address.
         * 
         * @return builder
         * 
         */
        public Builder intranetAddress(@Nullable Output<String> intranetAddress) {
            $.intranetAddress = intranetAddress;
            return this;
        }

        /**
         * @param intranetAddress IPv4 private network address.
         * 
         * @return builder
         * 
         */
        public Builder intranetAddress(String intranetAddress) {
            return intranetAddress(Output.of(intranetAddress));
        }

        /**
         * @param ipv6Address An IP address of the IPv6 type.
         * 
         * @return builder
         * 
         */
        public Builder ipv6Address(@Nullable Output<String> ipv6Address) {
            $.ipv6Address = ipv6Address;
            return this;
        }

        /**
         * @param ipv6Address An IP address of the IPv6 type.
         * 
         * @return builder
         * 
         */
        public Builder ipv6Address(String ipv6Address) {
            return ipv6Address(Output.of(ipv6Address));
        }

        /**
         * @param loadBalancerAddresses The instance address.
         * 
         * @return builder
         * 
         */
        public Builder loadBalancerAddresses(@Nullable Output<List<LoadBalancerZoneMappingLoadBalancerAddressArgs>> loadBalancerAddresses) {
            $.loadBalancerAddresses = loadBalancerAddresses;
            return this;
        }

        /**
         * @param loadBalancerAddresses The instance address.
         * 
         * @return builder
         * 
         */
        public Builder loadBalancerAddresses(List<LoadBalancerZoneMappingLoadBalancerAddressArgs> loadBalancerAddresses) {
            return loadBalancerAddresses(Output.of(loadBalancerAddresses));
        }

        /**
         * @param loadBalancerAddresses The instance address.
         * 
         * @return builder
         * 
         */
        public Builder loadBalancerAddresses(LoadBalancerZoneMappingLoadBalancerAddressArgs... loadBalancerAddresses) {
            return loadBalancerAddresses(List.of(loadBalancerAddresses));
        }

        /**
         * @param vswitchId The ID of the vSwitch that corresponds to the zone. Each zone can use only one vSwitch and subnet.
         * 
         * @return builder
         * 
         */
        public Builder vswitchId(Output<String> vswitchId) {
            $.vswitchId = vswitchId;
            return this;
        }

        /**
         * @param vswitchId The ID of the vSwitch that corresponds to the zone. Each zone can use only one vSwitch and subnet.
         * 
         * @return builder
         * 
         */
        public Builder vswitchId(String vswitchId) {
            return vswitchId(Output.of(vswitchId));
        }

        /**
         * @param zoneId The ID of the zone to which the SLB instance belongs.
         * 
         * @return builder
         * 
         */
        public Builder zoneId(Output<String> zoneId) {
            $.zoneId = zoneId;
            return this;
        }

        /**
         * @param zoneId The ID of the zone to which the SLB instance belongs.
         * 
         * @return builder
         * 
         */
        public Builder zoneId(String zoneId) {
            return zoneId(Output.of(zoneId));
        }

        public LoadBalancerZoneMappingArgs build() {
            if ($.vswitchId == null) {
                throw new MissingRequiredPropertyException("LoadBalancerZoneMappingArgs", "vswitchId");
            }
            if ($.zoneId == null) {
                throw new MissingRequiredPropertyException("LoadBalancerZoneMappingArgs", "zoneId");
            }
            return $;
        }
    }

}
