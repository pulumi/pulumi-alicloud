// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.sls.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetAlertsAlertConfigurationQueryList {
    /**
     * @return Chart Name.
     * 
     */
    private String chartTitle;
    /**
     * @return Dashboard ID.
     * 
     */
    private String dashboardId;
    /**
     * @return End time. When storeType is set to log or metric, end must be set.
     * 
     */
    private String end;
    /**
     * @return Whether to use exclusive SQL. The value is as follows: auto: automatic switching. enable: Starts. disable: disable.
     * 
     */
    private String powerSqlMode;
    /**
     * @return Project Name.
     * 
     */
    private String project;
    /**
     * @return Query and analysis statements. When storeType is set to log or metric, query is set to the query analysis statement. When storeType is set to meta, set query to an empty string.
     * 
     */
    private String query;
    /**
     * @return Region of the target Project.
     * 
     */
    private String region;
    /**
     * @return Roles used to write alarm data to the event Library.
     * 
     */
    private String roleArn;
    /**
     * @return Start time. When storeType is set to log or metric, start must be set.
     * 
     */
    private String start;
    /**
     * @return Query the Logstore, Metricstore, or resource data associated with the statistics. When storeType is set to log, store is set to the target Logstore. When storeType is set to metric, store is set to the target Metricstore. When storeType is set to meta, store is set to the target resource data name.
     * 
     */
    private String store;
    /**
     * @return Query the data source type. The value is as follows: log: Logstore. metric: Time series Library. meta: resource data.
     * 
     */
    private String storeType;
    /**
     * @return Time Type.
     * 
     */
    private String timeSpanType;
    /**
     * @return Use of specific scene alarm front end.
     * 
     */
    private String ui;

    private GetAlertsAlertConfigurationQueryList() {}
    /**
     * @return Chart Name.
     * 
     */
    public String chartTitle() {
        return this.chartTitle;
    }
    /**
     * @return Dashboard ID.
     * 
     */
    public String dashboardId() {
        return this.dashboardId;
    }
    /**
     * @return End time. When storeType is set to log or metric, end must be set.
     * 
     */
    public String end() {
        return this.end;
    }
    /**
     * @return Whether to use exclusive SQL. The value is as follows: auto: automatic switching. enable: Starts. disable: disable.
     * 
     */
    public String powerSqlMode() {
        return this.powerSqlMode;
    }
    /**
     * @return Project Name.
     * 
     */
    public String project() {
        return this.project;
    }
    /**
     * @return Query and analysis statements. When storeType is set to log or metric, query is set to the query analysis statement. When storeType is set to meta, set query to an empty string.
     * 
     */
    public String query() {
        return this.query;
    }
    /**
     * @return Region of the target Project.
     * 
     */
    public String region() {
        return this.region;
    }
    /**
     * @return Roles used to write alarm data to the event Library.
     * 
     */
    public String roleArn() {
        return this.roleArn;
    }
    /**
     * @return Start time. When storeType is set to log or metric, start must be set.
     * 
     */
    public String start() {
        return this.start;
    }
    /**
     * @return Query the Logstore, Metricstore, or resource data associated with the statistics. When storeType is set to log, store is set to the target Logstore. When storeType is set to metric, store is set to the target Metricstore. When storeType is set to meta, store is set to the target resource data name.
     * 
     */
    public String store() {
        return this.store;
    }
    /**
     * @return Query the data source type. The value is as follows: log: Logstore. metric: Time series Library. meta: resource data.
     * 
     */
    public String storeType() {
        return this.storeType;
    }
    /**
     * @return Time Type.
     * 
     */
    public String timeSpanType() {
        return this.timeSpanType;
    }
    /**
     * @return Use of specific scene alarm front end.
     * 
     */
    public String ui() {
        return this.ui;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetAlertsAlertConfigurationQueryList defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String chartTitle;
        private String dashboardId;
        private String end;
        private String powerSqlMode;
        private String project;
        private String query;
        private String region;
        private String roleArn;
        private String start;
        private String store;
        private String storeType;
        private String timeSpanType;
        private String ui;
        public Builder() {}
        public Builder(GetAlertsAlertConfigurationQueryList defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.chartTitle = defaults.chartTitle;
    	      this.dashboardId = defaults.dashboardId;
    	      this.end = defaults.end;
    	      this.powerSqlMode = defaults.powerSqlMode;
    	      this.project = defaults.project;
    	      this.query = defaults.query;
    	      this.region = defaults.region;
    	      this.roleArn = defaults.roleArn;
    	      this.start = defaults.start;
    	      this.store = defaults.store;
    	      this.storeType = defaults.storeType;
    	      this.timeSpanType = defaults.timeSpanType;
    	      this.ui = defaults.ui;
        }

        @CustomType.Setter
        public Builder chartTitle(String chartTitle) {
            if (chartTitle == null) {
              throw new MissingRequiredPropertyException("GetAlertsAlertConfigurationQueryList", "chartTitle");
            }
            this.chartTitle = chartTitle;
            return this;
        }
        @CustomType.Setter
        public Builder dashboardId(String dashboardId) {
            if (dashboardId == null) {
              throw new MissingRequiredPropertyException("GetAlertsAlertConfigurationQueryList", "dashboardId");
            }
            this.dashboardId = dashboardId;
            return this;
        }
        @CustomType.Setter
        public Builder end(String end) {
            if (end == null) {
              throw new MissingRequiredPropertyException("GetAlertsAlertConfigurationQueryList", "end");
            }
            this.end = end;
            return this;
        }
        @CustomType.Setter
        public Builder powerSqlMode(String powerSqlMode) {
            if (powerSqlMode == null) {
              throw new MissingRequiredPropertyException("GetAlertsAlertConfigurationQueryList", "powerSqlMode");
            }
            this.powerSqlMode = powerSqlMode;
            return this;
        }
        @CustomType.Setter
        public Builder project(String project) {
            if (project == null) {
              throw new MissingRequiredPropertyException("GetAlertsAlertConfigurationQueryList", "project");
            }
            this.project = project;
            return this;
        }
        @CustomType.Setter
        public Builder query(String query) {
            if (query == null) {
              throw new MissingRequiredPropertyException("GetAlertsAlertConfigurationQueryList", "query");
            }
            this.query = query;
            return this;
        }
        @CustomType.Setter
        public Builder region(String region) {
            if (region == null) {
              throw new MissingRequiredPropertyException("GetAlertsAlertConfigurationQueryList", "region");
            }
            this.region = region;
            return this;
        }
        @CustomType.Setter
        public Builder roleArn(String roleArn) {
            if (roleArn == null) {
              throw new MissingRequiredPropertyException("GetAlertsAlertConfigurationQueryList", "roleArn");
            }
            this.roleArn = roleArn;
            return this;
        }
        @CustomType.Setter
        public Builder start(String start) {
            if (start == null) {
              throw new MissingRequiredPropertyException("GetAlertsAlertConfigurationQueryList", "start");
            }
            this.start = start;
            return this;
        }
        @CustomType.Setter
        public Builder store(String store) {
            if (store == null) {
              throw new MissingRequiredPropertyException("GetAlertsAlertConfigurationQueryList", "store");
            }
            this.store = store;
            return this;
        }
        @CustomType.Setter
        public Builder storeType(String storeType) {
            if (storeType == null) {
              throw new MissingRequiredPropertyException("GetAlertsAlertConfigurationQueryList", "storeType");
            }
            this.storeType = storeType;
            return this;
        }
        @CustomType.Setter
        public Builder timeSpanType(String timeSpanType) {
            if (timeSpanType == null) {
              throw new MissingRequiredPropertyException("GetAlertsAlertConfigurationQueryList", "timeSpanType");
            }
            this.timeSpanType = timeSpanType;
            return this;
        }
        @CustomType.Setter
        public Builder ui(String ui) {
            if (ui == null) {
              throw new MissingRequiredPropertyException("GetAlertsAlertConfigurationQueryList", "ui");
            }
            this.ui = ui;
            return this;
        }
        public GetAlertsAlertConfigurationQueryList build() {
            final var _resultValue = new GetAlertsAlertConfigurationQueryList();
            _resultValue.chartTitle = chartTitle;
            _resultValue.dashboardId = dashboardId;
            _resultValue.end = end;
            _resultValue.powerSqlMode = powerSqlMode;
            _resultValue.project = project;
            _resultValue.query = query;
            _resultValue.region = region;
            _resultValue.roleArn = roleArn;
            _resultValue.start = start;
            _resultValue.store = store;
            _resultValue.storeType = storeType;
            _resultValue.timeSpanType = timeSpanType;
            _resultValue.ui = ui;
            return _resultValue;
        }
    }
}
