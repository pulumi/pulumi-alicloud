// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.arms.outputs;

import com.pulumi.alicloud.arms.outputs.SyntheticTaskMonitorConfApiHttp;
import com.pulumi.alicloud.arms.outputs.SyntheticTaskMonitorConfFileDownload;
import com.pulumi.alicloud.arms.outputs.SyntheticTaskMonitorConfNetDns;
import com.pulumi.alicloud.arms.outputs.SyntheticTaskMonitorConfNetIcmp;
import com.pulumi.alicloud.arms.outputs.SyntheticTaskMonitorConfNetTcp;
import com.pulumi.alicloud.arms.outputs.SyntheticTaskMonitorConfStream;
import com.pulumi.alicloud.arms.outputs.SyntheticTaskMonitorConfWebsite;
import com.pulumi.core.annotations.CustomType;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class SyntheticTaskMonitorConf {
    /**
     * @return HTTP(S) task configuration information. See `api_http` below.
     * 
     */
    private @Nullable SyntheticTaskMonitorConfApiHttp apiHttp;
    /**
     * @return File download type task configuration. See `file_download` below.
     * 
     */
    private @Nullable SyntheticTaskMonitorConfFileDownload fileDownload;
    /**
     * @return The configuration parameters of the DNS dial test. Required when TaskType is 3. See `net_dns` below.
     * 
     */
    private @Nullable SyntheticTaskMonitorConfNetDns netDns;
    /**
     * @return ICMP dialing configuration parameters. Required when TaskType is 1. See `net_icmp` below.
     * 
     */
    private @Nullable SyntheticTaskMonitorConfNetIcmp netIcmp;
    /**
     * @return The configuration parameters of TCP dial test. Required when TaskType is 2. See `net_tcp` below.
     * 
     */
    private @Nullable SyntheticTaskMonitorConfNetTcp netTcp;
    /**
     * @return Streaming Media Dial Test Configuration. See `stream` below.
     * 
     */
    private @Nullable SyntheticTaskMonitorConfStream stream;
    /**
     * @return Website speed measurement type task configuration. See `website` below.
     * 
     */
    private @Nullable SyntheticTaskMonitorConfWebsite website;

    private SyntheticTaskMonitorConf() {}
    /**
     * @return HTTP(S) task configuration information. See `api_http` below.
     * 
     */
    public Optional<SyntheticTaskMonitorConfApiHttp> apiHttp() {
        return Optional.ofNullable(this.apiHttp);
    }
    /**
     * @return File download type task configuration. See `file_download` below.
     * 
     */
    public Optional<SyntheticTaskMonitorConfFileDownload> fileDownload() {
        return Optional.ofNullable(this.fileDownload);
    }
    /**
     * @return The configuration parameters of the DNS dial test. Required when TaskType is 3. See `net_dns` below.
     * 
     */
    public Optional<SyntheticTaskMonitorConfNetDns> netDns() {
        return Optional.ofNullable(this.netDns);
    }
    /**
     * @return ICMP dialing configuration parameters. Required when TaskType is 1. See `net_icmp` below.
     * 
     */
    public Optional<SyntheticTaskMonitorConfNetIcmp> netIcmp() {
        return Optional.ofNullable(this.netIcmp);
    }
    /**
     * @return The configuration parameters of TCP dial test. Required when TaskType is 2. See `net_tcp` below.
     * 
     */
    public Optional<SyntheticTaskMonitorConfNetTcp> netTcp() {
        return Optional.ofNullable(this.netTcp);
    }
    /**
     * @return Streaming Media Dial Test Configuration. See `stream` below.
     * 
     */
    public Optional<SyntheticTaskMonitorConfStream> stream() {
        return Optional.ofNullable(this.stream);
    }
    /**
     * @return Website speed measurement type task configuration. See `website` below.
     * 
     */
    public Optional<SyntheticTaskMonitorConfWebsite> website() {
        return Optional.ofNullable(this.website);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SyntheticTaskMonitorConf defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable SyntheticTaskMonitorConfApiHttp apiHttp;
        private @Nullable SyntheticTaskMonitorConfFileDownload fileDownload;
        private @Nullable SyntheticTaskMonitorConfNetDns netDns;
        private @Nullable SyntheticTaskMonitorConfNetIcmp netIcmp;
        private @Nullable SyntheticTaskMonitorConfNetTcp netTcp;
        private @Nullable SyntheticTaskMonitorConfStream stream;
        private @Nullable SyntheticTaskMonitorConfWebsite website;
        public Builder() {}
        public Builder(SyntheticTaskMonitorConf defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.apiHttp = defaults.apiHttp;
    	      this.fileDownload = defaults.fileDownload;
    	      this.netDns = defaults.netDns;
    	      this.netIcmp = defaults.netIcmp;
    	      this.netTcp = defaults.netTcp;
    	      this.stream = defaults.stream;
    	      this.website = defaults.website;
        }

        @CustomType.Setter
        public Builder apiHttp(@Nullable SyntheticTaskMonitorConfApiHttp apiHttp) {

            this.apiHttp = apiHttp;
            return this;
        }
        @CustomType.Setter
        public Builder fileDownload(@Nullable SyntheticTaskMonitorConfFileDownload fileDownload) {

            this.fileDownload = fileDownload;
            return this;
        }
        @CustomType.Setter
        public Builder netDns(@Nullable SyntheticTaskMonitorConfNetDns netDns) {

            this.netDns = netDns;
            return this;
        }
        @CustomType.Setter
        public Builder netIcmp(@Nullable SyntheticTaskMonitorConfNetIcmp netIcmp) {

            this.netIcmp = netIcmp;
            return this;
        }
        @CustomType.Setter
        public Builder netTcp(@Nullable SyntheticTaskMonitorConfNetTcp netTcp) {

            this.netTcp = netTcp;
            return this;
        }
        @CustomType.Setter
        public Builder stream(@Nullable SyntheticTaskMonitorConfStream stream) {

            this.stream = stream;
            return this;
        }
        @CustomType.Setter
        public Builder website(@Nullable SyntheticTaskMonitorConfWebsite website) {

            this.website = website;
            return this;
        }
        public SyntheticTaskMonitorConf build() {
            final var _resultValue = new SyntheticTaskMonitorConf();
            _resultValue.apiHttp = apiHttp;
            _resultValue.fileDownload = fileDownload;
            _resultValue.netDns = netDns;
            _resultValue.netIcmp = netIcmp;
            _resultValue.netTcp = netTcp;
            _resultValue.stream = stream;
            _resultValue.website = website;
            return _resultValue;
        }
    }
}
