// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.cen;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TransitRouteTableAggregationArgs extends com.pulumi.resources.ResourceArgs {

    public static final TransitRouteTableAggregationArgs Empty = new TransitRouteTableAggregationArgs();

    /**
     * The destination CIDR block of the aggregate route.
     * 
     * &gt; **NOTE:**   The following CIDR blocks are not supported:
     * 
     * &gt; **NOTE:** *   CIDR blocks that start with 0 or 100.64.
     * 
     * &gt; **NOTE:** *   Multicast CIDR blocks, including 224.0.0.1 to 239.255.255.254.
     * 
     */
    @Import(name="transitRouteTableAggregationCidr", required=true)
    private Output<String> transitRouteTableAggregationCidr;

    /**
     * @return The destination CIDR block of the aggregate route.
     * 
     * &gt; **NOTE:**   The following CIDR blocks are not supported:
     * 
     * &gt; **NOTE:** *   CIDR blocks that start with 0 or 100.64.
     * 
     * &gt; **NOTE:** *   Multicast CIDR blocks, including 224.0.0.1 to 239.255.255.254.
     * 
     */
    public Output<String> transitRouteTableAggregationCidr() {
        return this.transitRouteTableAggregationCidr;
    }

    /**
     * The list of propagation ranges of the aggregation route.
     * 
     * &gt; **NOTE:**   You must specify at least one of the following attributes: Aggregation Scope and Aggregate Scope List. We recommend that you specify the latter. The elements in the two attributes cannot be duplicate.
     * 
     */
    @Import(name="transitRouteTableAggregationDescription")
    private @Nullable Output<String> transitRouteTableAggregationDescription;

    /**
     * @return The list of propagation ranges of the aggregation route.
     * 
     * &gt; **NOTE:**   You must specify at least one of the following attributes: Aggregation Scope and Aggregate Scope List. We recommend that you specify the latter. The elements in the two attributes cannot be duplicate.
     * 
     */
    public Optional<Output<String>> transitRouteTableAggregationDescription() {
        return Optional.ofNullable(this.transitRouteTableAggregationDescription);
    }

    /**
     * The name of the aggregate route.
     * The name can be empty or 1 to 128 characters in length, and cannot start with http:// or https://.
     * 
     */
    @Import(name="transitRouteTableAggregationName")
    private @Nullable Output<String> transitRouteTableAggregationName;

    /**
     * @return The name of the aggregate route.
     * The name can be empty or 1 to 128 characters in length, and cannot start with http:// or https://.
     * 
     */
    public Optional<Output<String>> transitRouteTableAggregationName() {
        return Optional.ofNullable(this.transitRouteTableAggregationName);
    }

    /**
     * The scope of networks that you want to advertise the aggregate route.
     * The valid value is `VPC`, which indicates that the aggregate route is advertised to all VPCs that have associated forwarding correlation with the Enterprise Edition transit router and have route synchronization enabled.
     * 
     */
    @Import(name="transitRouteTableAggregationScope")
    private @Nullable Output<String> transitRouteTableAggregationScope;

    /**
     * @return The scope of networks that you want to advertise the aggregate route.
     * The valid value is `VPC`, which indicates that the aggregate route is advertised to all VPCs that have associated forwarding correlation with the Enterprise Edition transit router and have route synchronization enabled.
     * 
     */
    public Optional<Output<String>> transitRouteTableAggregationScope() {
        return Optional.ofNullable(this.transitRouteTableAggregationScope);
    }

    /**
     * Aggregation Route Scopes
     * 
     */
    @Import(name="transitRouteTableAggregationScopeLists")
    private @Nullable Output<List<String>> transitRouteTableAggregationScopeLists;

    /**
     * @return Aggregation Route Scopes
     * 
     */
    public Optional<Output<List<String>>> transitRouteTableAggregationScopeLists() {
        return Optional.ofNullable(this.transitRouteTableAggregationScopeLists);
    }

    /**
     * The list of route table IDs of the Enterprise Edition transit router.
     * 
     */
    @Import(name="transitRouteTableId", required=true)
    private Output<String> transitRouteTableId;

    /**
     * @return The list of route table IDs of the Enterprise Edition transit router.
     * 
     */
    public Output<String> transitRouteTableId() {
        return this.transitRouteTableId;
    }

    private TransitRouteTableAggregationArgs() {}

    private TransitRouteTableAggregationArgs(TransitRouteTableAggregationArgs $) {
        this.transitRouteTableAggregationCidr = $.transitRouteTableAggregationCidr;
        this.transitRouteTableAggregationDescription = $.transitRouteTableAggregationDescription;
        this.transitRouteTableAggregationName = $.transitRouteTableAggregationName;
        this.transitRouteTableAggregationScope = $.transitRouteTableAggregationScope;
        this.transitRouteTableAggregationScopeLists = $.transitRouteTableAggregationScopeLists;
        this.transitRouteTableId = $.transitRouteTableId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TransitRouteTableAggregationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TransitRouteTableAggregationArgs $;

        public Builder() {
            $ = new TransitRouteTableAggregationArgs();
        }

        public Builder(TransitRouteTableAggregationArgs defaults) {
            $ = new TransitRouteTableAggregationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param transitRouteTableAggregationCidr The destination CIDR block of the aggregate route.
         * 
         * &gt; **NOTE:**   The following CIDR blocks are not supported:
         * 
         * &gt; **NOTE:** *   CIDR blocks that start with 0 or 100.64.
         * 
         * &gt; **NOTE:** *   Multicast CIDR blocks, including 224.0.0.1 to 239.255.255.254.
         * 
         * @return builder
         * 
         */
        public Builder transitRouteTableAggregationCidr(Output<String> transitRouteTableAggregationCidr) {
            $.transitRouteTableAggregationCidr = transitRouteTableAggregationCidr;
            return this;
        }

        /**
         * @param transitRouteTableAggregationCidr The destination CIDR block of the aggregate route.
         * 
         * &gt; **NOTE:**   The following CIDR blocks are not supported:
         * 
         * &gt; **NOTE:** *   CIDR blocks that start with 0 or 100.64.
         * 
         * &gt; **NOTE:** *   Multicast CIDR blocks, including 224.0.0.1 to 239.255.255.254.
         * 
         * @return builder
         * 
         */
        public Builder transitRouteTableAggregationCidr(String transitRouteTableAggregationCidr) {
            return transitRouteTableAggregationCidr(Output.of(transitRouteTableAggregationCidr));
        }

        /**
         * @param transitRouteTableAggregationDescription The list of propagation ranges of the aggregation route.
         * 
         * &gt; **NOTE:**   You must specify at least one of the following attributes: Aggregation Scope and Aggregate Scope List. We recommend that you specify the latter. The elements in the two attributes cannot be duplicate.
         * 
         * @return builder
         * 
         */
        public Builder transitRouteTableAggregationDescription(@Nullable Output<String> transitRouteTableAggregationDescription) {
            $.transitRouteTableAggregationDescription = transitRouteTableAggregationDescription;
            return this;
        }

        /**
         * @param transitRouteTableAggregationDescription The list of propagation ranges of the aggregation route.
         * 
         * &gt; **NOTE:**   You must specify at least one of the following attributes: Aggregation Scope and Aggregate Scope List. We recommend that you specify the latter. The elements in the two attributes cannot be duplicate.
         * 
         * @return builder
         * 
         */
        public Builder transitRouteTableAggregationDescription(String transitRouteTableAggregationDescription) {
            return transitRouteTableAggregationDescription(Output.of(transitRouteTableAggregationDescription));
        }

        /**
         * @param transitRouteTableAggregationName The name of the aggregate route.
         * The name can be empty or 1 to 128 characters in length, and cannot start with http:// or https://.
         * 
         * @return builder
         * 
         */
        public Builder transitRouteTableAggregationName(@Nullable Output<String> transitRouteTableAggregationName) {
            $.transitRouteTableAggregationName = transitRouteTableAggregationName;
            return this;
        }

        /**
         * @param transitRouteTableAggregationName The name of the aggregate route.
         * The name can be empty or 1 to 128 characters in length, and cannot start with http:// or https://.
         * 
         * @return builder
         * 
         */
        public Builder transitRouteTableAggregationName(String transitRouteTableAggregationName) {
            return transitRouteTableAggregationName(Output.of(transitRouteTableAggregationName));
        }

        /**
         * @param transitRouteTableAggregationScope The scope of networks that you want to advertise the aggregate route.
         * The valid value is `VPC`, which indicates that the aggregate route is advertised to all VPCs that have associated forwarding correlation with the Enterprise Edition transit router and have route synchronization enabled.
         * 
         * @return builder
         * 
         */
        public Builder transitRouteTableAggregationScope(@Nullable Output<String> transitRouteTableAggregationScope) {
            $.transitRouteTableAggregationScope = transitRouteTableAggregationScope;
            return this;
        }

        /**
         * @param transitRouteTableAggregationScope The scope of networks that you want to advertise the aggregate route.
         * The valid value is `VPC`, which indicates that the aggregate route is advertised to all VPCs that have associated forwarding correlation with the Enterprise Edition transit router and have route synchronization enabled.
         * 
         * @return builder
         * 
         */
        public Builder transitRouteTableAggregationScope(String transitRouteTableAggregationScope) {
            return transitRouteTableAggregationScope(Output.of(transitRouteTableAggregationScope));
        }

        /**
         * @param transitRouteTableAggregationScopeLists Aggregation Route Scopes
         * 
         * @return builder
         * 
         */
        public Builder transitRouteTableAggregationScopeLists(@Nullable Output<List<String>> transitRouteTableAggregationScopeLists) {
            $.transitRouteTableAggregationScopeLists = transitRouteTableAggregationScopeLists;
            return this;
        }

        /**
         * @param transitRouteTableAggregationScopeLists Aggregation Route Scopes
         * 
         * @return builder
         * 
         */
        public Builder transitRouteTableAggregationScopeLists(List<String> transitRouteTableAggregationScopeLists) {
            return transitRouteTableAggregationScopeLists(Output.of(transitRouteTableAggregationScopeLists));
        }

        /**
         * @param transitRouteTableAggregationScopeLists Aggregation Route Scopes
         * 
         * @return builder
         * 
         */
        public Builder transitRouteTableAggregationScopeLists(String... transitRouteTableAggregationScopeLists) {
            return transitRouteTableAggregationScopeLists(List.of(transitRouteTableAggregationScopeLists));
        }

        /**
         * @param transitRouteTableId The list of route table IDs of the Enterprise Edition transit router.
         * 
         * @return builder
         * 
         */
        public Builder transitRouteTableId(Output<String> transitRouteTableId) {
            $.transitRouteTableId = transitRouteTableId;
            return this;
        }

        /**
         * @param transitRouteTableId The list of route table IDs of the Enterprise Edition transit router.
         * 
         * @return builder
         * 
         */
        public Builder transitRouteTableId(String transitRouteTableId) {
            return transitRouteTableId(Output.of(transitRouteTableId));
        }

        public TransitRouteTableAggregationArgs build() {
            if ($.transitRouteTableAggregationCidr == null) {
                throw new MissingRequiredPropertyException("TransitRouteTableAggregationArgs", "transitRouteTableAggregationCidr");
            }
            if ($.transitRouteTableId == null) {
                throw new MissingRequiredPropertyException("TransitRouteTableAggregationArgs", "transitRouteTableId");
            }
            return $;
        }
    }

}
