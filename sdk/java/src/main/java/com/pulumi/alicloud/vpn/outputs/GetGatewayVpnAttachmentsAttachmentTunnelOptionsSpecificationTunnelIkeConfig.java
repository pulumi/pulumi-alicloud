// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.vpn.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetGatewayVpnAttachmentsAttachmentTunnelOptionsSpecificationTunnelIkeConfig {
    /**
     * @return The authentication algorithm negotiated in the first stage. Values: **md5**, **sha1**, **sha256**, **sha384**, **sha512**. Default value: **sha1**.
     * 
     */
    private String ikeAuthAlg;
    /**
     * @return The encryption algorithm negotiated in the first stage. Value: **aes**, **aes192**, **aes256**, **des**, or **3des**. Default value: **aes**.
     * 
     */
    private String ikeEncAlg;
    /**
     * @return The life cycle of SA negotiated in the first stage. Unit: seconds.Value range: **0** to **86400**. Default value: **86400**.
     * 
     */
    private Integer ikeLifetime;
    /**
     * @return IKE version of the negotiation mode. Value: **main** or **aggressive**. Default value: **main**.-**main**: main mode, high security during negotiation.-**aggressive**: Savage mode, fast negotiation and high negotiation success rate.
     * 
     */
    private String ikeMode;
    /**
     * @return The first stage negotiates the Diffie-Hellman key exchange algorithm used. Default value: **group2**.Values: **group1**, **group2**, **group5**, **group14**.
     * 
     */
    private String ikePfs;
    /**
     * @return Version of the IKE protocol. Value: **ikev1** or **ikev2**. Default value: **ikev2**.Compared with IKEv1, IKEv2 simplifies the SA negotiation process and provides better support for multiple network segments.
     * 
     */
    private String ikeVersion;
    /**
     * @return The identifier of the local end of the tunnel (Alibaba Cloud side), which is used for the first phase of negotiation. The length is limited to 100 characters and cannot contain spaces. The default value is the IP address of the tunnel.**LocalId** supports the FQDN format. If you use the FQDN format, we recommend that you select **aggressive** (barbaric mode) as the negotiation mode.
     * 
     */
    private String localId;
    /**
     * @return The pre-shared key is used for identity authentication between the tunnel and the tunnel peer.-The key can be 1 to 100 characters in length. It supports numbers, upper and lower case English letters, and characters on the right. It cannot contain spaces. &#39;&#39;&#39;~! \&#39;{@literal @}#$%^&amp; *()_-+ ={}[]|;:&#39;,./? &#39;&#39;&#39;-If you do not specify a pre-shared key, the system randomly generates a 16-bit string as the pre-shared key. &gt; The pre-shared key of the tunnel and the tunnel peer must be the same, otherwise the system cannot establish the tunnel normally.
     * 
     */
    private String psk;
    /**
     * @return Identifier of the tunnel peer, which is used for the first-stage negotiation. The length is limited to 100 characters and cannot contain spaces. The default value is the IP address of the user gateway associated with the tunnel.- **RemoteId** supports the FQDN format. If you use the FQDN format, we recommend that you select **aggressive** (barbaric mode) as the negotiation mode.
     * 
     */
    private String remoteId;

    private GetGatewayVpnAttachmentsAttachmentTunnelOptionsSpecificationTunnelIkeConfig() {}
    /**
     * @return The authentication algorithm negotiated in the first stage. Values: **md5**, **sha1**, **sha256**, **sha384**, **sha512**. Default value: **sha1**.
     * 
     */
    public String ikeAuthAlg() {
        return this.ikeAuthAlg;
    }
    /**
     * @return The encryption algorithm negotiated in the first stage. Value: **aes**, **aes192**, **aes256**, **des**, or **3des**. Default value: **aes**.
     * 
     */
    public String ikeEncAlg() {
        return this.ikeEncAlg;
    }
    /**
     * @return The life cycle of SA negotiated in the first stage. Unit: seconds.Value range: **0** to **86400**. Default value: **86400**.
     * 
     */
    public Integer ikeLifetime() {
        return this.ikeLifetime;
    }
    /**
     * @return IKE version of the negotiation mode. Value: **main** or **aggressive**. Default value: **main**.-**main**: main mode, high security during negotiation.-**aggressive**: Savage mode, fast negotiation and high negotiation success rate.
     * 
     */
    public String ikeMode() {
        return this.ikeMode;
    }
    /**
     * @return The first stage negotiates the Diffie-Hellman key exchange algorithm used. Default value: **group2**.Values: **group1**, **group2**, **group5**, **group14**.
     * 
     */
    public String ikePfs() {
        return this.ikePfs;
    }
    /**
     * @return Version of the IKE protocol. Value: **ikev1** or **ikev2**. Default value: **ikev2**.Compared with IKEv1, IKEv2 simplifies the SA negotiation process and provides better support for multiple network segments.
     * 
     */
    public String ikeVersion() {
        return this.ikeVersion;
    }
    /**
     * @return The identifier of the local end of the tunnel (Alibaba Cloud side), which is used for the first phase of negotiation. The length is limited to 100 characters and cannot contain spaces. The default value is the IP address of the tunnel.**LocalId** supports the FQDN format. If you use the FQDN format, we recommend that you select **aggressive** (barbaric mode) as the negotiation mode.
     * 
     */
    public String localId() {
        return this.localId;
    }
    /**
     * @return The pre-shared key is used for identity authentication between the tunnel and the tunnel peer.-The key can be 1 to 100 characters in length. It supports numbers, upper and lower case English letters, and characters on the right. It cannot contain spaces. &#39;&#39;&#39;~! \&#39;{@literal @}#$%^&amp; *()_-+ ={}[]|;:&#39;,./? &#39;&#39;&#39;-If you do not specify a pre-shared key, the system randomly generates a 16-bit string as the pre-shared key. &gt; The pre-shared key of the tunnel and the tunnel peer must be the same, otherwise the system cannot establish the tunnel normally.
     * 
     */
    public String psk() {
        return this.psk;
    }
    /**
     * @return Identifier of the tunnel peer, which is used for the first-stage negotiation. The length is limited to 100 characters and cannot contain spaces. The default value is the IP address of the user gateway associated with the tunnel.- **RemoteId** supports the FQDN format. If you use the FQDN format, we recommend that you select **aggressive** (barbaric mode) as the negotiation mode.
     * 
     */
    public String remoteId() {
        return this.remoteId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetGatewayVpnAttachmentsAttachmentTunnelOptionsSpecificationTunnelIkeConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String ikeAuthAlg;
        private String ikeEncAlg;
        private Integer ikeLifetime;
        private String ikeMode;
        private String ikePfs;
        private String ikeVersion;
        private String localId;
        private String psk;
        private String remoteId;
        public Builder() {}
        public Builder(GetGatewayVpnAttachmentsAttachmentTunnelOptionsSpecificationTunnelIkeConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.ikeAuthAlg = defaults.ikeAuthAlg;
    	      this.ikeEncAlg = defaults.ikeEncAlg;
    	      this.ikeLifetime = defaults.ikeLifetime;
    	      this.ikeMode = defaults.ikeMode;
    	      this.ikePfs = defaults.ikePfs;
    	      this.ikeVersion = defaults.ikeVersion;
    	      this.localId = defaults.localId;
    	      this.psk = defaults.psk;
    	      this.remoteId = defaults.remoteId;
        }

        @CustomType.Setter
        public Builder ikeAuthAlg(String ikeAuthAlg) {
            if (ikeAuthAlg == null) {
              throw new MissingRequiredPropertyException("GetGatewayVpnAttachmentsAttachmentTunnelOptionsSpecificationTunnelIkeConfig", "ikeAuthAlg");
            }
            this.ikeAuthAlg = ikeAuthAlg;
            return this;
        }
        @CustomType.Setter
        public Builder ikeEncAlg(String ikeEncAlg) {
            if (ikeEncAlg == null) {
              throw new MissingRequiredPropertyException("GetGatewayVpnAttachmentsAttachmentTunnelOptionsSpecificationTunnelIkeConfig", "ikeEncAlg");
            }
            this.ikeEncAlg = ikeEncAlg;
            return this;
        }
        @CustomType.Setter
        public Builder ikeLifetime(Integer ikeLifetime) {
            if (ikeLifetime == null) {
              throw new MissingRequiredPropertyException("GetGatewayVpnAttachmentsAttachmentTunnelOptionsSpecificationTunnelIkeConfig", "ikeLifetime");
            }
            this.ikeLifetime = ikeLifetime;
            return this;
        }
        @CustomType.Setter
        public Builder ikeMode(String ikeMode) {
            if (ikeMode == null) {
              throw new MissingRequiredPropertyException("GetGatewayVpnAttachmentsAttachmentTunnelOptionsSpecificationTunnelIkeConfig", "ikeMode");
            }
            this.ikeMode = ikeMode;
            return this;
        }
        @CustomType.Setter
        public Builder ikePfs(String ikePfs) {
            if (ikePfs == null) {
              throw new MissingRequiredPropertyException("GetGatewayVpnAttachmentsAttachmentTunnelOptionsSpecificationTunnelIkeConfig", "ikePfs");
            }
            this.ikePfs = ikePfs;
            return this;
        }
        @CustomType.Setter
        public Builder ikeVersion(String ikeVersion) {
            if (ikeVersion == null) {
              throw new MissingRequiredPropertyException("GetGatewayVpnAttachmentsAttachmentTunnelOptionsSpecificationTunnelIkeConfig", "ikeVersion");
            }
            this.ikeVersion = ikeVersion;
            return this;
        }
        @CustomType.Setter
        public Builder localId(String localId) {
            if (localId == null) {
              throw new MissingRequiredPropertyException("GetGatewayVpnAttachmentsAttachmentTunnelOptionsSpecificationTunnelIkeConfig", "localId");
            }
            this.localId = localId;
            return this;
        }
        @CustomType.Setter
        public Builder psk(String psk) {
            if (psk == null) {
              throw new MissingRequiredPropertyException("GetGatewayVpnAttachmentsAttachmentTunnelOptionsSpecificationTunnelIkeConfig", "psk");
            }
            this.psk = psk;
            return this;
        }
        @CustomType.Setter
        public Builder remoteId(String remoteId) {
            if (remoteId == null) {
              throw new MissingRequiredPropertyException("GetGatewayVpnAttachmentsAttachmentTunnelOptionsSpecificationTunnelIkeConfig", "remoteId");
            }
            this.remoteId = remoteId;
            return this;
        }
        public GetGatewayVpnAttachmentsAttachmentTunnelOptionsSpecificationTunnelIkeConfig build() {
            final var _resultValue = new GetGatewayVpnAttachmentsAttachmentTunnelOptionsSpecificationTunnelIkeConfig();
            _resultValue.ikeAuthAlg = ikeAuthAlg;
            _resultValue.ikeEncAlg = ikeEncAlg;
            _resultValue.ikeLifetime = ikeLifetime;
            _resultValue.ikeMode = ikeMode;
            _resultValue.ikePfs = ikePfs;
            _resultValue.ikeVersion = ikeVersion;
            _resultValue.localId = localId;
            _resultValue.psk = psk;
            _resultValue.remoteId = remoteId;
            return _resultValue;
        }
    }
}
