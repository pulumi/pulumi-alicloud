// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.gpdb.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class InstanceParameterArgs extends com.pulumi.resources.ResourceArgs {

    public static final InstanceParameterArgs Empty = new InstanceParameterArgs();

    /**
     * (Available since v1.231.0) The default value of the parameter.
     * 
     */
    @Import(name="defaultValue")
    private @Nullable Output<String> defaultValue;

    /**
     * @return (Available since v1.231.0) The default value of the parameter.
     * 
     */
    public Optional<Output<String>> defaultValue() {
        return Optional.ofNullable(this.defaultValue);
    }

    /**
     * (Available since v1.231.0) Whether to force restart the instance to config the parameter.
     * 
     */
    @Import(name="forceRestartInstance")
    private @Nullable Output<String> forceRestartInstance;

    /**
     * @return (Available since v1.231.0) Whether to force restart the instance to config the parameter.
     * 
     */
    public Optional<Output<String>> forceRestartInstance() {
        return Optional.ofNullable(this.forceRestartInstance);
    }

    /**
     * (Available since v1.231.0) Whether the parameter is changeable.
     * 
     */
    @Import(name="isChangeableConfig")
    private @Nullable Output<String> isChangeableConfig;

    /**
     * @return (Available since v1.231.0) Whether the parameter is changeable.
     * 
     */
    public Optional<Output<String>> isChangeableConfig() {
        return Optional.ofNullable(this.isChangeableConfig);
    }

    /**
     * The name of the parameter.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return The name of the parameter.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * (Available since v1.231.0) The optional range of the parameter.
     * 
     */
    @Import(name="optionalRange")
    private @Nullable Output<String> optionalRange;

    /**
     * @return (Available since v1.231.0) The optional range of the parameter.
     * 
     */
    public Optional<Output<String>> optionalRange() {
        return Optional.ofNullable(this.optionalRange);
    }

    /**
     * (Available since v1.231.0) The description of the parameter.
     * 
     */
    @Import(name="parameterDescription")
    private @Nullable Output<String> parameterDescription;

    /**
     * @return (Available since v1.231.0) The description of the parameter.
     * 
     */
    public Optional<Output<String>> parameterDescription() {
        return Optional.ofNullable(this.parameterDescription);
    }

    /**
     * The value of the parameter.
     * 
     */
    @Import(name="value", required=true)
    private Output<String> value;

    /**
     * @return The value of the parameter.
     * 
     */
    public Output<String> value() {
        return this.value;
    }

    private InstanceParameterArgs() {}

    private InstanceParameterArgs(InstanceParameterArgs $) {
        this.defaultValue = $.defaultValue;
        this.forceRestartInstance = $.forceRestartInstance;
        this.isChangeableConfig = $.isChangeableConfig;
        this.name = $.name;
        this.optionalRange = $.optionalRange;
        this.parameterDescription = $.parameterDescription;
        this.value = $.value;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(InstanceParameterArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private InstanceParameterArgs $;

        public Builder() {
            $ = new InstanceParameterArgs();
        }

        public Builder(InstanceParameterArgs defaults) {
            $ = new InstanceParameterArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param defaultValue (Available since v1.231.0) The default value of the parameter.
         * 
         * @return builder
         * 
         */
        public Builder defaultValue(@Nullable Output<String> defaultValue) {
            $.defaultValue = defaultValue;
            return this;
        }

        /**
         * @param defaultValue (Available since v1.231.0) The default value of the parameter.
         * 
         * @return builder
         * 
         */
        public Builder defaultValue(String defaultValue) {
            return defaultValue(Output.of(defaultValue));
        }

        /**
         * @param forceRestartInstance (Available since v1.231.0) Whether to force restart the instance to config the parameter.
         * 
         * @return builder
         * 
         */
        public Builder forceRestartInstance(@Nullable Output<String> forceRestartInstance) {
            $.forceRestartInstance = forceRestartInstance;
            return this;
        }

        /**
         * @param forceRestartInstance (Available since v1.231.0) Whether to force restart the instance to config the parameter.
         * 
         * @return builder
         * 
         */
        public Builder forceRestartInstance(String forceRestartInstance) {
            return forceRestartInstance(Output.of(forceRestartInstance));
        }

        /**
         * @param isChangeableConfig (Available since v1.231.0) Whether the parameter is changeable.
         * 
         * @return builder
         * 
         */
        public Builder isChangeableConfig(@Nullable Output<String> isChangeableConfig) {
            $.isChangeableConfig = isChangeableConfig;
            return this;
        }

        /**
         * @param isChangeableConfig (Available since v1.231.0) Whether the parameter is changeable.
         * 
         * @return builder
         * 
         */
        public Builder isChangeableConfig(String isChangeableConfig) {
            return isChangeableConfig(Output.of(isChangeableConfig));
        }

        /**
         * @param name The name of the parameter.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the parameter.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param optionalRange (Available since v1.231.0) The optional range of the parameter.
         * 
         * @return builder
         * 
         */
        public Builder optionalRange(@Nullable Output<String> optionalRange) {
            $.optionalRange = optionalRange;
            return this;
        }

        /**
         * @param optionalRange (Available since v1.231.0) The optional range of the parameter.
         * 
         * @return builder
         * 
         */
        public Builder optionalRange(String optionalRange) {
            return optionalRange(Output.of(optionalRange));
        }

        /**
         * @param parameterDescription (Available since v1.231.0) The description of the parameter.
         * 
         * @return builder
         * 
         */
        public Builder parameterDescription(@Nullable Output<String> parameterDescription) {
            $.parameterDescription = parameterDescription;
            return this;
        }

        /**
         * @param parameterDescription (Available since v1.231.0) The description of the parameter.
         * 
         * @return builder
         * 
         */
        public Builder parameterDescription(String parameterDescription) {
            return parameterDescription(Output.of(parameterDescription));
        }

        /**
         * @param value The value of the parameter.
         * 
         * @return builder
         * 
         */
        public Builder value(Output<String> value) {
            $.value = value;
            return this;
        }

        /**
         * @param value The value of the parameter.
         * 
         * @return builder
         * 
         */
        public Builder value(String value) {
            return value(Output.of(value));
        }

        public InstanceParameterArgs build() {
            if ($.name == null) {
                throw new MissingRequiredPropertyException("InstanceParameterArgs", "name");
            }
            if ($.value == null) {
                throw new MissingRequiredPropertyException("InstanceParameterArgs", "value");
            }
            return $;
        }
    }

}
