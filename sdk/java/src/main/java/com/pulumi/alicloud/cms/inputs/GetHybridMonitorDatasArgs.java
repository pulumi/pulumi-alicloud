// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.cms.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetHybridMonitorDatasArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetHybridMonitorDatasArgs Empty = new GetHybridMonitorDatasArgs();

    /**
     * The timestamp that specifies the end of the time range to query.
     * 
     */
    @Import(name="end", required=true)
    private Output<String> end;

    /**
     * @return The timestamp that specifies the end of the time range to query.
     * 
     */
    public Output<String> end() {
        return this.end;
    }

    /**
     * The name of the namespace.
     * 
     */
    @Import(name="namespace", required=true)
    private Output<String> namespace;

    /**
     * @return The name of the namespace.
     * 
     */
    public Output<String> namespace() {
        return this.namespace;
    }

    /**
     * File name where to save data source results (after running `pulumi preview`).
     * 
     */
    @Import(name="outputFile")
    private @Nullable Output<String> outputFile;

    /**
     * @return File name where to save data source results (after running `pulumi preview`).
     * 
     */
    public Optional<Output<String>> outputFile() {
        return Optional.ofNullable(this.outputFile);
    }

    /**
     * The interval at which monitoring data is collected. Unit: seconds.
     * 
     */
    @Import(name="period")
    private @Nullable Output<String> period;

    /**
     * @return The interval at which monitoring data is collected. Unit: seconds.
     * 
     */
    public Optional<Output<String>> period() {
        return Optional.ofNullable(this.period);
    }

    /**
     * The name of the metric. Note PromQL statements are supported.
     * 
     */
    @Import(name="promSql", required=true)
    private Output<String> promSql;

    /**
     * @return The name of the metric. Note PromQL statements are supported.
     * 
     */
    public Output<String> promSql() {
        return this.promSql;
    }

    /**
     * The timestamp that specifies the beginning of the time range to query.
     * 
     */
    @Import(name="start", required=true)
    private Output<String> start;

    /**
     * @return The timestamp that specifies the beginning of the time range to query.
     * 
     */
    public Output<String> start() {
        return this.start;
    }

    private GetHybridMonitorDatasArgs() {}

    private GetHybridMonitorDatasArgs(GetHybridMonitorDatasArgs $) {
        this.end = $.end;
        this.namespace = $.namespace;
        this.outputFile = $.outputFile;
        this.period = $.period;
        this.promSql = $.promSql;
        this.start = $.start;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetHybridMonitorDatasArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetHybridMonitorDatasArgs $;

        public Builder() {
            $ = new GetHybridMonitorDatasArgs();
        }

        public Builder(GetHybridMonitorDatasArgs defaults) {
            $ = new GetHybridMonitorDatasArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param end The timestamp that specifies the end of the time range to query.
         * 
         * @return builder
         * 
         */
        public Builder end(Output<String> end) {
            $.end = end;
            return this;
        }

        /**
         * @param end The timestamp that specifies the end of the time range to query.
         * 
         * @return builder
         * 
         */
        public Builder end(String end) {
            return end(Output.of(end));
        }

        /**
         * @param namespace The name of the namespace.
         * 
         * @return builder
         * 
         */
        public Builder namespace(Output<String> namespace) {
            $.namespace = namespace;
            return this;
        }

        /**
         * @param namespace The name of the namespace.
         * 
         * @return builder
         * 
         */
        public Builder namespace(String namespace) {
            return namespace(Output.of(namespace));
        }

        /**
         * @param outputFile File name where to save data source results (after running `pulumi preview`).
         * 
         * @return builder
         * 
         */
        public Builder outputFile(@Nullable Output<String> outputFile) {
            $.outputFile = outputFile;
            return this;
        }

        /**
         * @param outputFile File name where to save data source results (after running `pulumi preview`).
         * 
         * @return builder
         * 
         */
        public Builder outputFile(String outputFile) {
            return outputFile(Output.of(outputFile));
        }

        /**
         * @param period The interval at which monitoring data is collected. Unit: seconds.
         * 
         * @return builder
         * 
         */
        public Builder period(@Nullable Output<String> period) {
            $.period = period;
            return this;
        }

        /**
         * @param period The interval at which monitoring data is collected. Unit: seconds.
         * 
         * @return builder
         * 
         */
        public Builder period(String period) {
            return period(Output.of(period));
        }

        /**
         * @param promSql The name of the metric. Note PromQL statements are supported.
         * 
         * @return builder
         * 
         */
        public Builder promSql(Output<String> promSql) {
            $.promSql = promSql;
            return this;
        }

        /**
         * @param promSql The name of the metric. Note PromQL statements are supported.
         * 
         * @return builder
         * 
         */
        public Builder promSql(String promSql) {
            return promSql(Output.of(promSql));
        }

        /**
         * @param start The timestamp that specifies the beginning of the time range to query.
         * 
         * @return builder
         * 
         */
        public Builder start(Output<String> start) {
            $.start = start;
            return this;
        }

        /**
         * @param start The timestamp that specifies the beginning of the time range to query.
         * 
         * @return builder
         * 
         */
        public Builder start(String start) {
            return start(Output.of(start));
        }

        public GetHybridMonitorDatasArgs build() {
            if ($.end == null) {
                throw new MissingRequiredPropertyException("GetHybridMonitorDatasArgs", "end");
            }
            if ($.namespace == null) {
                throw new MissingRequiredPropertyException("GetHybridMonitorDatasArgs", "namespace");
            }
            if ($.promSql == null) {
                throw new MissingRequiredPropertyException("GetHybridMonitorDatasArgs", "promSql");
            }
            if ($.start == null) {
                throw new MissingRequiredPropertyException("GetHybridMonitorDatasArgs", "start");
            }
            return $;
        }
    }

}
