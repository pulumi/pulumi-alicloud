// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.arms.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class EnvFeatureState extends com.pulumi.resources.ResourceArgs {

    public static final EnvFeatureState Empty = new EnvFeatureState();

    /**
     * The name of the resource.
     * 
     */
    @Import(name="envFeatureName")
    private @Nullable Output<String> envFeatureName;

    /**
     * @return The name of the resource.
     * 
     */
    public Optional<Output<String>> envFeatureName() {
        return Optional.ofNullable(this.envFeatureName);
    }

    /**
     * The first ID of the resource.
     * 
     */
    @Import(name="environmentId")
    private @Nullable Output<String> environmentId;

    /**
     * @return The first ID of the resource.
     * 
     */
    public Optional<Output<String>> environmentId() {
        return Optional.ofNullable(this.environmentId);
    }

    /**
     * Version information of the Feature. You can query Feature information by using ListEnvironmentFeatures.
     * 
     */
    @Import(name="featureVersion")
    private @Nullable Output<String> featureVersion;

    /**
     * @return Version information of the Feature. You can query Feature information by using ListEnvironmentFeatures.
     * 
     */
    public Optional<Output<String>> featureVersion() {
        return Optional.ofNullable(this.featureVersion);
    }

    /**
     * Namespace.
     * 
     */
    @Import(name="namespace")
    private @Nullable Output<String> namespace;

    /**
     * @return Namespace.
     * 
     */
    public Optional<Output<String>> namespace() {
        return Optional.ofNullable(this.namespace);
    }

    /**
     * Status.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return Status.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    private EnvFeatureState() {}

    private EnvFeatureState(EnvFeatureState $) {
        this.envFeatureName = $.envFeatureName;
        this.environmentId = $.environmentId;
        this.featureVersion = $.featureVersion;
        this.namespace = $.namespace;
        this.status = $.status;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(EnvFeatureState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private EnvFeatureState $;

        public Builder() {
            $ = new EnvFeatureState();
        }

        public Builder(EnvFeatureState defaults) {
            $ = new EnvFeatureState(Objects.requireNonNull(defaults));
        }

        /**
         * @param envFeatureName The name of the resource.
         * 
         * @return builder
         * 
         */
        public Builder envFeatureName(@Nullable Output<String> envFeatureName) {
            $.envFeatureName = envFeatureName;
            return this;
        }

        /**
         * @param envFeatureName The name of the resource.
         * 
         * @return builder
         * 
         */
        public Builder envFeatureName(String envFeatureName) {
            return envFeatureName(Output.of(envFeatureName));
        }

        /**
         * @param environmentId The first ID of the resource.
         * 
         * @return builder
         * 
         */
        public Builder environmentId(@Nullable Output<String> environmentId) {
            $.environmentId = environmentId;
            return this;
        }

        /**
         * @param environmentId The first ID of the resource.
         * 
         * @return builder
         * 
         */
        public Builder environmentId(String environmentId) {
            return environmentId(Output.of(environmentId));
        }

        /**
         * @param featureVersion Version information of the Feature. You can query Feature information by using ListEnvironmentFeatures.
         * 
         * @return builder
         * 
         */
        public Builder featureVersion(@Nullable Output<String> featureVersion) {
            $.featureVersion = featureVersion;
            return this;
        }

        /**
         * @param featureVersion Version information of the Feature. You can query Feature information by using ListEnvironmentFeatures.
         * 
         * @return builder
         * 
         */
        public Builder featureVersion(String featureVersion) {
            return featureVersion(Output.of(featureVersion));
        }

        /**
         * @param namespace Namespace.
         * 
         * @return builder
         * 
         */
        public Builder namespace(@Nullable Output<String> namespace) {
            $.namespace = namespace;
            return this;
        }

        /**
         * @param namespace Namespace.
         * 
         * @return builder
         * 
         */
        public Builder namespace(String namespace) {
            return namespace(Output.of(namespace));
        }

        /**
         * @param status Status.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status Status.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        public EnvFeatureState build() {
            return $;
        }
    }

}
