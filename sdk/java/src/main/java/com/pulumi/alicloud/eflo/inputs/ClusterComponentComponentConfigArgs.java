// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.eflo.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ClusterComponentComponentConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final ClusterComponentComponentConfigArgs Empty = new ClusterComponentComponentConfigArgs();

    /**
     * Component Basic Parameters
     * 
     */
    @Import(name="basicArgs")
    private @Nullable Output<String> basicArgs;

    /**
     * @return Component Basic Parameters
     * 
     */
    public Optional<Output<String>> basicArgs() {
        return Optional.ofNullable(this.basicArgs);
    }

    /**
     * Node pool configuration, and is used to establish the corresponding relationship between node groups and node pools. When
     * ComponentType = &#34;ACKEdge&#34; is required. Other values are empty.
     * 
     */
    @Import(name="nodeUnits")
    private @Nullable Output<List<String>> nodeUnits;

    /**
     * @return Node pool configuration, and is used to establish the corresponding relationship between node groups and node pools. When
     * ComponentType = &#34;ACKEdge&#34; is required. Other values are empty.
     * 
     */
    public Optional<Output<List<String>>> nodeUnits() {
        return Optional.ofNullable(this.nodeUnits);
    }

    private ClusterComponentComponentConfigArgs() {}

    private ClusterComponentComponentConfigArgs(ClusterComponentComponentConfigArgs $) {
        this.basicArgs = $.basicArgs;
        this.nodeUnits = $.nodeUnits;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ClusterComponentComponentConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ClusterComponentComponentConfigArgs $;

        public Builder() {
            $ = new ClusterComponentComponentConfigArgs();
        }

        public Builder(ClusterComponentComponentConfigArgs defaults) {
            $ = new ClusterComponentComponentConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param basicArgs Component Basic Parameters
         * 
         * @return builder
         * 
         */
        public Builder basicArgs(@Nullable Output<String> basicArgs) {
            $.basicArgs = basicArgs;
            return this;
        }

        /**
         * @param basicArgs Component Basic Parameters
         * 
         * @return builder
         * 
         */
        public Builder basicArgs(String basicArgs) {
            return basicArgs(Output.of(basicArgs));
        }

        /**
         * @param nodeUnits Node pool configuration, and is used to establish the corresponding relationship between node groups and node pools. When
         * ComponentType = &#34;ACKEdge&#34; is required. Other values are empty.
         * 
         * @return builder
         * 
         */
        public Builder nodeUnits(@Nullable Output<List<String>> nodeUnits) {
            $.nodeUnits = nodeUnits;
            return this;
        }

        /**
         * @param nodeUnits Node pool configuration, and is used to establish the corresponding relationship between node groups and node pools. When
         * ComponentType = &#34;ACKEdge&#34; is required. Other values are empty.
         * 
         * @return builder
         * 
         */
        public Builder nodeUnits(List<String> nodeUnits) {
            return nodeUnits(Output.of(nodeUnits));
        }

        /**
         * @param nodeUnits Node pool configuration, and is used to establish the corresponding relationship between node groups and node pools. When
         * ComponentType = &#34;ACKEdge&#34; is required. Other values are empty.
         * 
         * @return builder
         * 
         */
        public Builder nodeUnits(String... nodeUnits) {
            return nodeUnits(List.of(nodeUnits));
        }

        public ClusterComponentComponentConfigArgs build() {
            return $;
        }
    }

}
