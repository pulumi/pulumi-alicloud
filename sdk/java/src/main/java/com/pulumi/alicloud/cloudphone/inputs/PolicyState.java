// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.cloudphone.inputs;

import com.pulumi.alicloud.cloudphone.inputs.PolicyNetRedirectPolicyArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PolicyState extends com.pulumi.resources.ResourceArgs {

    public static final PolicyState Empty = new PolicyState();

    /**
     * Whether to turn on local camera redirection.
     * 
     */
    @Import(name="cameraRedirect")
    private @Nullable Output<String> cameraRedirect;

    /**
     * @return Whether to turn on local camera redirection.
     * 
     */
    public Optional<Output<String>> cameraRedirect() {
        return Optional.ofNullable(this.cameraRedirect);
    }

    /**
     * Clipboard permissions.
     * 
     */
    @Import(name="clipboard")
    private @Nullable Output<String> clipboard;

    /**
     * @return Clipboard permissions.
     * 
     */
    public Optional<Output<String>> clipboard() {
        return Optional.ofNullable(this.clipboard);
    }

    /**
     * Whether to lock the resolution.
     * 
     */
    @Import(name="lockResolution")
    private @Nullable Output<String> lockResolution;

    /**
     * @return Whether to lock the resolution.
     * 
     */
    public Optional<Output<String>> lockResolution() {
        return Optional.ofNullable(this.lockResolution);
    }

    /**
     * Network redirection. See `net_redirect_policy` below.
     * 
     */
    @Import(name="netRedirectPolicy")
    private @Nullable Output<PolicyNetRedirectPolicyArgs> netRedirectPolicy;

    /**
     * @return Network redirection. See `net_redirect_policy` below.
     * 
     */
    public Optional<Output<PolicyNetRedirectPolicyArgs>> netRedirectPolicy() {
        return Optional.ofNullable(this.netRedirectPolicy);
    }

    /**
     * The policy name.
     * 
     */
    @Import(name="policyGroupName")
    private @Nullable Output<String> policyGroupName;

    /**
     * @return The policy name.
     * 
     */
    public Optional<Output<String>> policyGroupName() {
        return Optional.ofNullable(this.policyGroupName);
    }

    /**
     * The height of the resolution. Unit: Pixels.
     * 
     */
    @Import(name="resolutionHeight")
    private @Nullable Output<Integer> resolutionHeight;

    /**
     * @return The height of the resolution. Unit: Pixels.
     * 
     */
    public Optional<Output<Integer>> resolutionHeight() {
        return Optional.ofNullable(this.resolutionHeight);
    }

    /**
     * The width of the resolution. Unit: Pixels.
     * 
     */
    @Import(name="resolutionWidth")
    private @Nullable Output<Integer> resolutionWidth;

    /**
     * @return The width of the resolution. Unit: Pixels.
     * 
     */
    public Optional<Output<Integer>> resolutionWidth() {
        return Optional.ofNullable(this.resolutionWidth);
    }

    private PolicyState() {}

    private PolicyState(PolicyState $) {
        this.cameraRedirect = $.cameraRedirect;
        this.clipboard = $.clipboard;
        this.lockResolution = $.lockResolution;
        this.netRedirectPolicy = $.netRedirectPolicy;
        this.policyGroupName = $.policyGroupName;
        this.resolutionHeight = $.resolutionHeight;
        this.resolutionWidth = $.resolutionWidth;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PolicyState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PolicyState $;

        public Builder() {
            $ = new PolicyState();
        }

        public Builder(PolicyState defaults) {
            $ = new PolicyState(Objects.requireNonNull(defaults));
        }

        /**
         * @param cameraRedirect Whether to turn on local camera redirection.
         * 
         * @return builder
         * 
         */
        public Builder cameraRedirect(@Nullable Output<String> cameraRedirect) {
            $.cameraRedirect = cameraRedirect;
            return this;
        }

        /**
         * @param cameraRedirect Whether to turn on local camera redirection.
         * 
         * @return builder
         * 
         */
        public Builder cameraRedirect(String cameraRedirect) {
            return cameraRedirect(Output.of(cameraRedirect));
        }

        /**
         * @param clipboard Clipboard permissions.
         * 
         * @return builder
         * 
         */
        public Builder clipboard(@Nullable Output<String> clipboard) {
            $.clipboard = clipboard;
            return this;
        }

        /**
         * @param clipboard Clipboard permissions.
         * 
         * @return builder
         * 
         */
        public Builder clipboard(String clipboard) {
            return clipboard(Output.of(clipboard));
        }

        /**
         * @param lockResolution Whether to lock the resolution.
         * 
         * @return builder
         * 
         */
        public Builder lockResolution(@Nullable Output<String> lockResolution) {
            $.lockResolution = lockResolution;
            return this;
        }

        /**
         * @param lockResolution Whether to lock the resolution.
         * 
         * @return builder
         * 
         */
        public Builder lockResolution(String lockResolution) {
            return lockResolution(Output.of(lockResolution));
        }

        /**
         * @param netRedirectPolicy Network redirection. See `net_redirect_policy` below.
         * 
         * @return builder
         * 
         */
        public Builder netRedirectPolicy(@Nullable Output<PolicyNetRedirectPolicyArgs> netRedirectPolicy) {
            $.netRedirectPolicy = netRedirectPolicy;
            return this;
        }

        /**
         * @param netRedirectPolicy Network redirection. See `net_redirect_policy` below.
         * 
         * @return builder
         * 
         */
        public Builder netRedirectPolicy(PolicyNetRedirectPolicyArgs netRedirectPolicy) {
            return netRedirectPolicy(Output.of(netRedirectPolicy));
        }

        /**
         * @param policyGroupName The policy name.
         * 
         * @return builder
         * 
         */
        public Builder policyGroupName(@Nullable Output<String> policyGroupName) {
            $.policyGroupName = policyGroupName;
            return this;
        }

        /**
         * @param policyGroupName The policy name.
         * 
         * @return builder
         * 
         */
        public Builder policyGroupName(String policyGroupName) {
            return policyGroupName(Output.of(policyGroupName));
        }

        /**
         * @param resolutionHeight The height of the resolution. Unit: Pixels.
         * 
         * @return builder
         * 
         */
        public Builder resolutionHeight(@Nullable Output<Integer> resolutionHeight) {
            $.resolutionHeight = resolutionHeight;
            return this;
        }

        /**
         * @param resolutionHeight The height of the resolution. Unit: Pixels.
         * 
         * @return builder
         * 
         */
        public Builder resolutionHeight(Integer resolutionHeight) {
            return resolutionHeight(Output.of(resolutionHeight));
        }

        /**
         * @param resolutionWidth The width of the resolution. Unit: Pixels.
         * 
         * @return builder
         * 
         */
        public Builder resolutionWidth(@Nullable Output<Integer> resolutionWidth) {
            $.resolutionWidth = resolutionWidth;
            return this;
        }

        /**
         * @param resolutionWidth The width of the resolution. Unit: Pixels.
         * 
         * @return builder
         * 
         */
        public Builder resolutionWidth(Integer resolutionWidth) {
            return resolutionWidth(Output.of(resolutionWidth));
        }

        public PolicyState build() {
            return $;
        }
    }

}
