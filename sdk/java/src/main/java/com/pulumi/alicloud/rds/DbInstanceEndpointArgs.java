// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.rds;

import com.pulumi.alicloud.rds.inputs.DbInstanceEndpointNodeItemArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DbInstanceEndpointArgs extends com.pulumi.resources.ResourceArgs {

    public static final DbInstanceEndpointArgs Empty = new DbInstanceEndpointArgs();

    /**
     * The IP address of the internal endpoint.
     * 
     */
    @Import(name="connectionStringPrefix", required=true)
    private Output<String> connectionStringPrefix;

    /**
     * @return The IP address of the internal endpoint.
     * 
     */
    public Output<String> connectionStringPrefix() {
        return this.connectionStringPrefix;
    }

    /**
     * The user-defined description of the endpoint.
     * 
     */
    @Import(name="dbInstanceEndpointDescription")
    private @Nullable Output<String> dbInstanceEndpointDescription;

    /**
     * @return The user-defined description of the endpoint.
     * 
     */
    public Optional<Output<String>> dbInstanceEndpointDescription() {
        return Optional.ofNullable(this.dbInstanceEndpointDescription);
    }

    /**
     * The ID of the instance.
     * 
     */
    @Import(name="dbInstanceId", required=true)
    private Output<String> dbInstanceId;

    /**
     * @return The ID of the instance.
     * 
     */
    public Output<String> dbInstanceId() {
        return this.dbInstanceId;
    }

    /**
     * The information about the node that is configured for the endpoint.  It contains two sub-fields(node_id and weight).
     * 
     */
    @Import(name="nodeItems", required=true)
    private Output<List<DbInstanceEndpointNodeItemArgs>> nodeItems;

    /**
     * @return The information about the node that is configured for the endpoint.  It contains two sub-fields(node_id and weight).
     * 
     */
    public Output<List<DbInstanceEndpointNodeItemArgs>> nodeItems() {
        return this.nodeItems;
    }

    /**
     * The port number of the internal endpoint. You can specify the port number for the internal endpoint.Valid values: 3000 to 5999.
     * 
     */
    @Import(name="port", required=true)
    private Output<String> port;

    /**
     * @return The port number of the internal endpoint. You can specify the port number for the internal endpoint.Valid values: 3000 to 5999.
     * 
     */
    public Output<String> port() {
        return this.port;
    }

    /**
     * The virtual private cloud (VPC) ID of the internal endpoint.
     * 
     */
    @Import(name="vpcId", required=true)
    private Output<String> vpcId;

    /**
     * @return The virtual private cloud (VPC) ID of the internal endpoint.
     * 
     */
    public Output<String> vpcId() {
        return this.vpcId;
    }

    /**
     * The vSwitch ID of the internal endpoint.
     * 
     */
    @Import(name="vswitchId", required=true)
    private Output<String> vswitchId;

    /**
     * @return The vSwitch ID of the internal endpoint.
     * 
     */
    public Output<String> vswitchId() {
        return this.vswitchId;
    }

    private DbInstanceEndpointArgs() {}

    private DbInstanceEndpointArgs(DbInstanceEndpointArgs $) {
        this.connectionStringPrefix = $.connectionStringPrefix;
        this.dbInstanceEndpointDescription = $.dbInstanceEndpointDescription;
        this.dbInstanceId = $.dbInstanceId;
        this.nodeItems = $.nodeItems;
        this.port = $.port;
        this.vpcId = $.vpcId;
        this.vswitchId = $.vswitchId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DbInstanceEndpointArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DbInstanceEndpointArgs $;

        public Builder() {
            $ = new DbInstanceEndpointArgs();
        }

        public Builder(DbInstanceEndpointArgs defaults) {
            $ = new DbInstanceEndpointArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param connectionStringPrefix The IP address of the internal endpoint.
         * 
         * @return builder
         * 
         */
        public Builder connectionStringPrefix(Output<String> connectionStringPrefix) {
            $.connectionStringPrefix = connectionStringPrefix;
            return this;
        }

        /**
         * @param connectionStringPrefix The IP address of the internal endpoint.
         * 
         * @return builder
         * 
         */
        public Builder connectionStringPrefix(String connectionStringPrefix) {
            return connectionStringPrefix(Output.of(connectionStringPrefix));
        }

        /**
         * @param dbInstanceEndpointDescription The user-defined description of the endpoint.
         * 
         * @return builder
         * 
         */
        public Builder dbInstanceEndpointDescription(@Nullable Output<String> dbInstanceEndpointDescription) {
            $.dbInstanceEndpointDescription = dbInstanceEndpointDescription;
            return this;
        }

        /**
         * @param dbInstanceEndpointDescription The user-defined description of the endpoint.
         * 
         * @return builder
         * 
         */
        public Builder dbInstanceEndpointDescription(String dbInstanceEndpointDescription) {
            return dbInstanceEndpointDescription(Output.of(dbInstanceEndpointDescription));
        }

        /**
         * @param dbInstanceId The ID of the instance.
         * 
         * @return builder
         * 
         */
        public Builder dbInstanceId(Output<String> dbInstanceId) {
            $.dbInstanceId = dbInstanceId;
            return this;
        }

        /**
         * @param dbInstanceId The ID of the instance.
         * 
         * @return builder
         * 
         */
        public Builder dbInstanceId(String dbInstanceId) {
            return dbInstanceId(Output.of(dbInstanceId));
        }

        /**
         * @param nodeItems The information about the node that is configured for the endpoint.  It contains two sub-fields(node_id and weight).
         * 
         * @return builder
         * 
         */
        public Builder nodeItems(Output<List<DbInstanceEndpointNodeItemArgs>> nodeItems) {
            $.nodeItems = nodeItems;
            return this;
        }

        /**
         * @param nodeItems The information about the node that is configured for the endpoint.  It contains two sub-fields(node_id and weight).
         * 
         * @return builder
         * 
         */
        public Builder nodeItems(List<DbInstanceEndpointNodeItemArgs> nodeItems) {
            return nodeItems(Output.of(nodeItems));
        }

        /**
         * @param nodeItems The information about the node that is configured for the endpoint.  It contains two sub-fields(node_id and weight).
         * 
         * @return builder
         * 
         */
        public Builder nodeItems(DbInstanceEndpointNodeItemArgs... nodeItems) {
            return nodeItems(List.of(nodeItems));
        }

        /**
         * @param port The port number of the internal endpoint. You can specify the port number for the internal endpoint.Valid values: 3000 to 5999.
         * 
         * @return builder
         * 
         */
        public Builder port(Output<String> port) {
            $.port = port;
            return this;
        }

        /**
         * @param port The port number of the internal endpoint. You can specify the port number for the internal endpoint.Valid values: 3000 to 5999.
         * 
         * @return builder
         * 
         */
        public Builder port(String port) {
            return port(Output.of(port));
        }

        /**
         * @param vpcId The virtual private cloud (VPC) ID of the internal endpoint.
         * 
         * @return builder
         * 
         */
        public Builder vpcId(Output<String> vpcId) {
            $.vpcId = vpcId;
            return this;
        }

        /**
         * @param vpcId The virtual private cloud (VPC) ID of the internal endpoint.
         * 
         * @return builder
         * 
         */
        public Builder vpcId(String vpcId) {
            return vpcId(Output.of(vpcId));
        }

        /**
         * @param vswitchId The vSwitch ID of the internal endpoint.
         * 
         * @return builder
         * 
         */
        public Builder vswitchId(Output<String> vswitchId) {
            $.vswitchId = vswitchId;
            return this;
        }

        /**
         * @param vswitchId The vSwitch ID of the internal endpoint.
         * 
         * @return builder
         * 
         */
        public Builder vswitchId(String vswitchId) {
            return vswitchId(Output.of(vswitchId));
        }

        public DbInstanceEndpointArgs build() {
            $.connectionStringPrefix = Objects.requireNonNull($.connectionStringPrefix, "expected parameter 'connectionStringPrefix' to be non-null");
            $.dbInstanceId = Objects.requireNonNull($.dbInstanceId, "expected parameter 'dbInstanceId' to be non-null");
            $.nodeItems = Objects.requireNonNull($.nodeItems, "expected parameter 'nodeItems' to be non-null");
            $.port = Objects.requireNonNull($.port, "expected parameter 'port' to be non-null");
            $.vpcId = Objects.requireNonNull($.vpcId, "expected parameter 'vpcId' to be non-null");
            $.vswitchId = Objects.requireNonNull($.vswitchId, "expected parameter 'vswitchId' to be non-null");
            return $;
        }
    }

}
