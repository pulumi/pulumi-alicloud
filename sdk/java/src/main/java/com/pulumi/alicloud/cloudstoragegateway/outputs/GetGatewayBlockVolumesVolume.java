// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.cloudstoragegateway.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetGatewayBlockVolumesVolume {
    /**
     * @return The IP ADDRESS.
     * 
     */
    private String address;
    /**
     * @return The Block volume set mode to cache mode. Valid values: `Cache`, `WriteThrough`.
     * 
     */
    private String cacheMode;
    /**
     * @return Whether to enable iSCSI access of CHAP authentication, which currently supports both CHAP inbound authentication.  Default value: `false`.
     * 
     */
    private Boolean chapEnabled;
    /**
     * @return The Inbound CHAP user.**NOTE:** When the `chap_enabled` is  `true` is,The `chap_in_password` is valid.
     * 
     */
    private String chapInUser;
    /**
     * @return The Block volume storage allocation unit.  Valid values: `8192`, `16384`, `32768`, `65536`, `131072`. Default value: `32768`. Unit: `Byte`.
     * 
     */
    private Integer chunkSize;
    /**
     * @return The cache disk ID.
     * 
     */
    private String diskId;
    /**
     * @return The cache disk type.
     * 
     */
    private String diskType;
    /**
     * @return Whether to enable Volume.
     * 
     */
    private Boolean enabled;
    /**
     * @return The Block volume name.  The name must be 1 to 32 characters in length, and can contain lowercase letters, numbers.
     * 
     */
    private String gatewayBlockVolumeName;
    /**
     * @return The Gateway ID.
     * 
     */
    private String gatewayId;
    /**
     * @return The ID of the Gateway Block Volume. The value formats as `&lt;gateway_id&gt;:&lt;index_id&gt;`.
     * 
     */
    private String id;
    /**
     * @return The ID of the index.
     * 
     */
    private String indexId;
    /**
     * @return CThe Cache disk to local path. **NOTE:**  When the `cache_mode` is  `Cache` is,The `chap_in_password` is valid.
     * 
     */
    private String localPath;
    /**
     * @return The Lun identifier.
     * 
     */
    private Integer lunId;
    /**
     * @return The name of the OSS Bucket.
     * 
     */
    private String ossBucketName;
    /**
     * @return Whether to enable SSL access your OSS Buckets. Default value: `true`.
     * 
     */
    private Boolean ossBucketSsl;
    /**
     * @return The endpoint of the OSS Bucket.
     * 
     */
    private String ossEndpoint;
    /**
     * @return The Port.
     * 
     */
    private Integer port;
    /**
     * @return The Protocol.
     * 
     */
    private String protocol;
    /**
     * @return The Volume size.
     * 
     */
    private Integer size;
    /**
     * @return The Buffer status.
     * 
     */
    private String state;
    /**
     * @return The status of volume.
     * 
     */
    private Integer status;
    /**
     * @return The target.
     * 
     */
    private String target;
    /**
     * @return The total amount of downloaded data. Unit: `B`.
     * 
     */
    private Integer totalDownload;
    /**
     * @return The total amount of uploaded data. Unit: `B`.
     * 
     */
    private Integer totalUpload;
    private Integer volumeState;

    private GetGatewayBlockVolumesVolume() {}
    /**
     * @return The IP ADDRESS.
     * 
     */
    public String address() {
        return this.address;
    }
    /**
     * @return The Block volume set mode to cache mode. Valid values: `Cache`, `WriteThrough`.
     * 
     */
    public String cacheMode() {
        return this.cacheMode;
    }
    /**
     * @return Whether to enable iSCSI access of CHAP authentication, which currently supports both CHAP inbound authentication.  Default value: `false`.
     * 
     */
    public Boolean chapEnabled() {
        return this.chapEnabled;
    }
    /**
     * @return The Inbound CHAP user.**NOTE:** When the `chap_enabled` is  `true` is,The `chap_in_password` is valid.
     * 
     */
    public String chapInUser() {
        return this.chapInUser;
    }
    /**
     * @return The Block volume storage allocation unit.  Valid values: `8192`, `16384`, `32768`, `65536`, `131072`. Default value: `32768`. Unit: `Byte`.
     * 
     */
    public Integer chunkSize() {
        return this.chunkSize;
    }
    /**
     * @return The cache disk ID.
     * 
     */
    public String diskId() {
        return this.diskId;
    }
    /**
     * @return The cache disk type.
     * 
     */
    public String diskType() {
        return this.diskType;
    }
    /**
     * @return Whether to enable Volume.
     * 
     */
    public Boolean enabled() {
        return this.enabled;
    }
    /**
     * @return The Block volume name.  The name must be 1 to 32 characters in length, and can contain lowercase letters, numbers.
     * 
     */
    public String gatewayBlockVolumeName() {
        return this.gatewayBlockVolumeName;
    }
    /**
     * @return The Gateway ID.
     * 
     */
    public String gatewayId() {
        return this.gatewayId;
    }
    /**
     * @return The ID of the Gateway Block Volume. The value formats as `&lt;gateway_id&gt;:&lt;index_id&gt;`.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The ID of the index.
     * 
     */
    public String indexId() {
        return this.indexId;
    }
    /**
     * @return CThe Cache disk to local path. **NOTE:**  When the `cache_mode` is  `Cache` is,The `chap_in_password` is valid.
     * 
     */
    public String localPath() {
        return this.localPath;
    }
    /**
     * @return The Lun identifier.
     * 
     */
    public Integer lunId() {
        return this.lunId;
    }
    /**
     * @return The name of the OSS Bucket.
     * 
     */
    public String ossBucketName() {
        return this.ossBucketName;
    }
    /**
     * @return Whether to enable SSL access your OSS Buckets. Default value: `true`.
     * 
     */
    public Boolean ossBucketSsl() {
        return this.ossBucketSsl;
    }
    /**
     * @return The endpoint of the OSS Bucket.
     * 
     */
    public String ossEndpoint() {
        return this.ossEndpoint;
    }
    /**
     * @return The Port.
     * 
     */
    public Integer port() {
        return this.port;
    }
    /**
     * @return The Protocol.
     * 
     */
    public String protocol() {
        return this.protocol;
    }
    /**
     * @return The Volume size.
     * 
     */
    public Integer size() {
        return this.size;
    }
    /**
     * @return The Buffer status.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return The status of volume.
     * 
     */
    public Integer status() {
        return this.status;
    }
    /**
     * @return The target.
     * 
     */
    public String target() {
        return this.target;
    }
    /**
     * @return The total amount of downloaded data. Unit: `B`.
     * 
     */
    public Integer totalDownload() {
        return this.totalDownload;
    }
    /**
     * @return The total amount of uploaded data. Unit: `B`.
     * 
     */
    public Integer totalUpload() {
        return this.totalUpload;
    }
    public Integer volumeState() {
        return this.volumeState;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetGatewayBlockVolumesVolume defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String address;
        private String cacheMode;
        private Boolean chapEnabled;
        private String chapInUser;
        private Integer chunkSize;
        private String diskId;
        private String diskType;
        private Boolean enabled;
        private String gatewayBlockVolumeName;
        private String gatewayId;
        private String id;
        private String indexId;
        private String localPath;
        private Integer lunId;
        private String ossBucketName;
        private Boolean ossBucketSsl;
        private String ossEndpoint;
        private Integer port;
        private String protocol;
        private Integer size;
        private String state;
        private Integer status;
        private String target;
        private Integer totalDownload;
        private Integer totalUpload;
        private Integer volumeState;
        public Builder() {}
        public Builder(GetGatewayBlockVolumesVolume defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.address = defaults.address;
    	      this.cacheMode = defaults.cacheMode;
    	      this.chapEnabled = defaults.chapEnabled;
    	      this.chapInUser = defaults.chapInUser;
    	      this.chunkSize = defaults.chunkSize;
    	      this.diskId = defaults.diskId;
    	      this.diskType = defaults.diskType;
    	      this.enabled = defaults.enabled;
    	      this.gatewayBlockVolumeName = defaults.gatewayBlockVolumeName;
    	      this.gatewayId = defaults.gatewayId;
    	      this.id = defaults.id;
    	      this.indexId = defaults.indexId;
    	      this.localPath = defaults.localPath;
    	      this.lunId = defaults.lunId;
    	      this.ossBucketName = defaults.ossBucketName;
    	      this.ossBucketSsl = defaults.ossBucketSsl;
    	      this.ossEndpoint = defaults.ossEndpoint;
    	      this.port = defaults.port;
    	      this.protocol = defaults.protocol;
    	      this.size = defaults.size;
    	      this.state = defaults.state;
    	      this.status = defaults.status;
    	      this.target = defaults.target;
    	      this.totalDownload = defaults.totalDownload;
    	      this.totalUpload = defaults.totalUpload;
    	      this.volumeState = defaults.volumeState;
        }

        @CustomType.Setter
        public Builder address(String address) {
            this.address = Objects.requireNonNull(address);
            return this;
        }
        @CustomType.Setter
        public Builder cacheMode(String cacheMode) {
            this.cacheMode = Objects.requireNonNull(cacheMode);
            return this;
        }
        @CustomType.Setter
        public Builder chapEnabled(Boolean chapEnabled) {
            this.chapEnabled = Objects.requireNonNull(chapEnabled);
            return this;
        }
        @CustomType.Setter
        public Builder chapInUser(String chapInUser) {
            this.chapInUser = Objects.requireNonNull(chapInUser);
            return this;
        }
        @CustomType.Setter
        public Builder chunkSize(Integer chunkSize) {
            this.chunkSize = Objects.requireNonNull(chunkSize);
            return this;
        }
        @CustomType.Setter
        public Builder diskId(String diskId) {
            this.diskId = Objects.requireNonNull(diskId);
            return this;
        }
        @CustomType.Setter
        public Builder diskType(String diskType) {
            this.diskType = Objects.requireNonNull(diskType);
            return this;
        }
        @CustomType.Setter
        public Builder enabled(Boolean enabled) {
            this.enabled = Objects.requireNonNull(enabled);
            return this;
        }
        @CustomType.Setter
        public Builder gatewayBlockVolumeName(String gatewayBlockVolumeName) {
            this.gatewayBlockVolumeName = Objects.requireNonNull(gatewayBlockVolumeName);
            return this;
        }
        @CustomType.Setter
        public Builder gatewayId(String gatewayId) {
            this.gatewayId = Objects.requireNonNull(gatewayId);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder indexId(String indexId) {
            this.indexId = Objects.requireNonNull(indexId);
            return this;
        }
        @CustomType.Setter
        public Builder localPath(String localPath) {
            this.localPath = Objects.requireNonNull(localPath);
            return this;
        }
        @CustomType.Setter
        public Builder lunId(Integer lunId) {
            this.lunId = Objects.requireNonNull(lunId);
            return this;
        }
        @CustomType.Setter
        public Builder ossBucketName(String ossBucketName) {
            this.ossBucketName = Objects.requireNonNull(ossBucketName);
            return this;
        }
        @CustomType.Setter
        public Builder ossBucketSsl(Boolean ossBucketSsl) {
            this.ossBucketSsl = Objects.requireNonNull(ossBucketSsl);
            return this;
        }
        @CustomType.Setter
        public Builder ossEndpoint(String ossEndpoint) {
            this.ossEndpoint = Objects.requireNonNull(ossEndpoint);
            return this;
        }
        @CustomType.Setter
        public Builder port(Integer port) {
            this.port = Objects.requireNonNull(port);
            return this;
        }
        @CustomType.Setter
        public Builder protocol(String protocol) {
            this.protocol = Objects.requireNonNull(protocol);
            return this;
        }
        @CustomType.Setter
        public Builder size(Integer size) {
            this.size = Objects.requireNonNull(size);
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            this.state = Objects.requireNonNull(state);
            return this;
        }
        @CustomType.Setter
        public Builder status(Integer status) {
            this.status = Objects.requireNonNull(status);
            return this;
        }
        @CustomType.Setter
        public Builder target(String target) {
            this.target = Objects.requireNonNull(target);
            return this;
        }
        @CustomType.Setter
        public Builder totalDownload(Integer totalDownload) {
            this.totalDownload = Objects.requireNonNull(totalDownload);
            return this;
        }
        @CustomType.Setter
        public Builder totalUpload(Integer totalUpload) {
            this.totalUpload = Objects.requireNonNull(totalUpload);
            return this;
        }
        @CustomType.Setter
        public Builder volumeState(Integer volumeState) {
            this.volumeState = Objects.requireNonNull(volumeState);
            return this;
        }
        public GetGatewayBlockVolumesVolume build() {
            final var o = new GetGatewayBlockVolumesVolume();
            o.address = address;
            o.cacheMode = cacheMode;
            o.chapEnabled = chapEnabled;
            o.chapInUser = chapInUser;
            o.chunkSize = chunkSize;
            o.diskId = diskId;
            o.diskType = diskType;
            o.enabled = enabled;
            o.gatewayBlockVolumeName = gatewayBlockVolumeName;
            o.gatewayId = gatewayId;
            o.id = id;
            o.indexId = indexId;
            o.localPath = localPath;
            o.lunId = lunId;
            o.ossBucketName = ossBucketName;
            o.ossBucketSsl = ossBucketSsl;
            o.ossEndpoint = ossEndpoint;
            o.port = port;
            o.protocol = protocol;
            o.size = size;
            o.state = state;
            o.status = status;
            o.target = target;
            o.totalDownload = totalDownload;
            o.totalUpload = totalUpload;
            o.volumeState = volumeState;
            return o;
        }
    }
}
