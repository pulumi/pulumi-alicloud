// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.gpdb.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetDataBackupsBackup {
    /**
     * @return The backup end time. Format: yyyy-MM-ddTHH:mm:ssZ(UTC time).
     * 
     */
    private String backupEndTime;
    /**
     * @return The end time of the backup (local time).
     * 
     */
    private String backupEndTimeLocal;
    /**
     * @return Backup method. Value Description:-**Physical**: Physical backup.-**Snapshot**: the Snapshot backup.
     * 
     */
    private String backupMethod;
    /**
     * @return Backup mode.Full Backup Value Description:-**Automated**: The system is automatically backed up.-**Manual**: Manual backup.Recovery point value description:-**Automated**: The recovery point after a full backup.-**Manual**: The recovery point triggered manually by the user.-**Period**: The recovery point triggered periodically because of the backup policy.
     * 
     */
    private String backupMode;
    /**
     * @return The ID of the backup set.
     * 
     */
    private String backupSetId;
    /**
     * @return The size of the backup file. Unit: Byte.
     * 
     */
    private Integer backupSize;
    /**
     * @return The backup start time. Format: yyyy-MM-ddTHH:mm:ssZ(UTC time).
     * 
     */
    private String backupStartTime;
    /**
     * @return The start time of the backup (local time).
     * 
     */
    private String backupStartTimeLocal;
    /**
     * @return The name of the recovery point or full backup set.
     * 
     */
    private String baksetName;
    /**
     * @return -Full backup: Returns the timestamp of the consistent point in time.-Recoverable point: Returns the timestamp of the recoverable point in time.
     * 
     */
    private Integer consistentTime;
    /**
     * @return The backup type. Value Description:-**DATA**: Full backup.-**RESTOREPOI**: Recoverable point.
     * 
     */
    private String dataType;
    /**
     * @return The instance ID.
     * 
     */
    private String dbInstanceId;
    /**
     * @return Backup set status. Value Description:-Success: The backup has been completed.-Failed: Backup Failed.If not, return all.
     * 
     */
    private String status;

    private GetDataBackupsBackup() {}
    /**
     * @return The backup end time. Format: yyyy-MM-ddTHH:mm:ssZ(UTC time).
     * 
     */
    public String backupEndTime() {
        return this.backupEndTime;
    }
    /**
     * @return The end time of the backup (local time).
     * 
     */
    public String backupEndTimeLocal() {
        return this.backupEndTimeLocal;
    }
    /**
     * @return Backup method. Value Description:-**Physical**: Physical backup.-**Snapshot**: the Snapshot backup.
     * 
     */
    public String backupMethod() {
        return this.backupMethod;
    }
    /**
     * @return Backup mode.Full Backup Value Description:-**Automated**: The system is automatically backed up.-**Manual**: Manual backup.Recovery point value description:-**Automated**: The recovery point after a full backup.-**Manual**: The recovery point triggered manually by the user.-**Period**: The recovery point triggered periodically because of the backup policy.
     * 
     */
    public String backupMode() {
        return this.backupMode;
    }
    /**
     * @return The ID of the backup set.
     * 
     */
    public String backupSetId() {
        return this.backupSetId;
    }
    /**
     * @return The size of the backup file. Unit: Byte.
     * 
     */
    public Integer backupSize() {
        return this.backupSize;
    }
    /**
     * @return The backup start time. Format: yyyy-MM-ddTHH:mm:ssZ(UTC time).
     * 
     */
    public String backupStartTime() {
        return this.backupStartTime;
    }
    /**
     * @return The start time of the backup (local time).
     * 
     */
    public String backupStartTimeLocal() {
        return this.backupStartTimeLocal;
    }
    /**
     * @return The name of the recovery point or full backup set.
     * 
     */
    public String baksetName() {
        return this.baksetName;
    }
    /**
     * @return -Full backup: Returns the timestamp of the consistent point in time.-Recoverable point: Returns the timestamp of the recoverable point in time.
     * 
     */
    public Integer consistentTime() {
        return this.consistentTime;
    }
    /**
     * @return The backup type. Value Description:-**DATA**: Full backup.-**RESTOREPOI**: Recoverable point.
     * 
     */
    public String dataType() {
        return this.dataType;
    }
    /**
     * @return The instance ID.
     * 
     */
    public String dbInstanceId() {
        return this.dbInstanceId;
    }
    /**
     * @return Backup set status. Value Description:-Success: The backup has been completed.-Failed: Backup Failed.If not, return all.
     * 
     */
    public String status() {
        return this.status;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDataBackupsBackup defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String backupEndTime;
        private String backupEndTimeLocal;
        private String backupMethod;
        private String backupMode;
        private String backupSetId;
        private Integer backupSize;
        private String backupStartTime;
        private String backupStartTimeLocal;
        private String baksetName;
        private Integer consistentTime;
        private String dataType;
        private String dbInstanceId;
        private String status;
        public Builder() {}
        public Builder(GetDataBackupsBackup defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.backupEndTime = defaults.backupEndTime;
    	      this.backupEndTimeLocal = defaults.backupEndTimeLocal;
    	      this.backupMethod = defaults.backupMethod;
    	      this.backupMode = defaults.backupMode;
    	      this.backupSetId = defaults.backupSetId;
    	      this.backupSize = defaults.backupSize;
    	      this.backupStartTime = defaults.backupStartTime;
    	      this.backupStartTimeLocal = defaults.backupStartTimeLocal;
    	      this.baksetName = defaults.baksetName;
    	      this.consistentTime = defaults.consistentTime;
    	      this.dataType = defaults.dataType;
    	      this.dbInstanceId = defaults.dbInstanceId;
    	      this.status = defaults.status;
        }

        @CustomType.Setter
        public Builder backupEndTime(String backupEndTime) {
            if (backupEndTime == null) {
              throw new MissingRequiredPropertyException("GetDataBackupsBackup", "backupEndTime");
            }
            this.backupEndTime = backupEndTime;
            return this;
        }
        @CustomType.Setter
        public Builder backupEndTimeLocal(String backupEndTimeLocal) {
            if (backupEndTimeLocal == null) {
              throw new MissingRequiredPropertyException("GetDataBackupsBackup", "backupEndTimeLocal");
            }
            this.backupEndTimeLocal = backupEndTimeLocal;
            return this;
        }
        @CustomType.Setter
        public Builder backupMethod(String backupMethod) {
            if (backupMethod == null) {
              throw new MissingRequiredPropertyException("GetDataBackupsBackup", "backupMethod");
            }
            this.backupMethod = backupMethod;
            return this;
        }
        @CustomType.Setter
        public Builder backupMode(String backupMode) {
            if (backupMode == null) {
              throw new MissingRequiredPropertyException("GetDataBackupsBackup", "backupMode");
            }
            this.backupMode = backupMode;
            return this;
        }
        @CustomType.Setter
        public Builder backupSetId(String backupSetId) {
            if (backupSetId == null) {
              throw new MissingRequiredPropertyException("GetDataBackupsBackup", "backupSetId");
            }
            this.backupSetId = backupSetId;
            return this;
        }
        @CustomType.Setter
        public Builder backupSize(Integer backupSize) {
            if (backupSize == null) {
              throw new MissingRequiredPropertyException("GetDataBackupsBackup", "backupSize");
            }
            this.backupSize = backupSize;
            return this;
        }
        @CustomType.Setter
        public Builder backupStartTime(String backupStartTime) {
            if (backupStartTime == null) {
              throw new MissingRequiredPropertyException("GetDataBackupsBackup", "backupStartTime");
            }
            this.backupStartTime = backupStartTime;
            return this;
        }
        @CustomType.Setter
        public Builder backupStartTimeLocal(String backupStartTimeLocal) {
            if (backupStartTimeLocal == null) {
              throw new MissingRequiredPropertyException("GetDataBackupsBackup", "backupStartTimeLocal");
            }
            this.backupStartTimeLocal = backupStartTimeLocal;
            return this;
        }
        @CustomType.Setter
        public Builder baksetName(String baksetName) {
            if (baksetName == null) {
              throw new MissingRequiredPropertyException("GetDataBackupsBackup", "baksetName");
            }
            this.baksetName = baksetName;
            return this;
        }
        @CustomType.Setter
        public Builder consistentTime(Integer consistentTime) {
            if (consistentTime == null) {
              throw new MissingRequiredPropertyException("GetDataBackupsBackup", "consistentTime");
            }
            this.consistentTime = consistentTime;
            return this;
        }
        @CustomType.Setter
        public Builder dataType(String dataType) {
            if (dataType == null) {
              throw new MissingRequiredPropertyException("GetDataBackupsBackup", "dataType");
            }
            this.dataType = dataType;
            return this;
        }
        @CustomType.Setter
        public Builder dbInstanceId(String dbInstanceId) {
            if (dbInstanceId == null) {
              throw new MissingRequiredPropertyException("GetDataBackupsBackup", "dbInstanceId");
            }
            this.dbInstanceId = dbInstanceId;
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            if (status == null) {
              throw new MissingRequiredPropertyException("GetDataBackupsBackup", "status");
            }
            this.status = status;
            return this;
        }
        public GetDataBackupsBackup build() {
            final var _resultValue = new GetDataBackupsBackup();
            _resultValue.backupEndTime = backupEndTime;
            _resultValue.backupEndTimeLocal = backupEndTimeLocal;
            _resultValue.backupMethod = backupMethod;
            _resultValue.backupMode = backupMode;
            _resultValue.backupSetId = backupSetId;
            _resultValue.backupSize = backupSize;
            _resultValue.backupStartTime = backupStartTime;
            _resultValue.backupStartTimeLocal = backupStartTimeLocal;
            _resultValue.baksetName = baksetName;
            _resultValue.consistentTime = consistentTime;
            _resultValue.dataType = dataType;
            _resultValue.dbInstanceId = dbInstanceId;
            _resultValue.status = status;
            return _resultValue;
        }
    }
}
