// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.fc;

import com.pulumi.alicloud.fc.inputs.CustomDomainCertConfigArgs;
import com.pulumi.alicloud.fc.inputs.CustomDomainRouteConfigArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CustomDomainArgs extends com.pulumi.resources.ResourceArgs {

    public static final CustomDomainArgs Empty = new CustomDomainArgs();

    /**
     * The configuration of HTTPS certificate.See `cert_config` below.
     * 
     */
    @Import(name="certConfig")
    private @Nullable Output<CustomDomainCertConfigArgs> certConfig;

    /**
     * @return The configuration of HTTPS certificate.See `cert_config` below.
     * 
     */
    public Optional<Output<CustomDomainCertConfigArgs>> certConfig() {
        return Optional.ofNullable(this.certConfig);
    }

    /**
     * The custom domain name. For example, &#34;example.com&#34;.
     * 
     */
    @Import(name="domainName", required=true)
    private Output<String> domainName;

    /**
     * @return The custom domain name. For example, &#34;example.com&#34;.
     * 
     */
    public Output<String> domainName() {
        return this.domainName;
    }

    /**
     * The protocol, `HTTP` or `HTTP,HTTPS`.
     * 
     */
    @Import(name="protocol", required=true)
    private Output<String> protocol;

    /**
     * @return The protocol, `HTTP` or `HTTP,HTTPS`.
     * 
     */
    public Output<String> protocol() {
        return this.protocol;
    }

    /**
     * The configuration of domain route, mapping the path and Function Compute function.See `route_config` below.
     * 
     */
    @Import(name="routeConfigs")
    private @Nullable Output<List<CustomDomainRouteConfigArgs>> routeConfigs;

    /**
     * @return The configuration of domain route, mapping the path and Function Compute function.See `route_config` below.
     * 
     */
    public Optional<Output<List<CustomDomainRouteConfigArgs>>> routeConfigs() {
        return Optional.ofNullable(this.routeConfigs);
    }

    private CustomDomainArgs() {}

    private CustomDomainArgs(CustomDomainArgs $) {
        this.certConfig = $.certConfig;
        this.domainName = $.domainName;
        this.protocol = $.protocol;
        this.routeConfigs = $.routeConfigs;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CustomDomainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CustomDomainArgs $;

        public Builder() {
            $ = new CustomDomainArgs();
        }

        public Builder(CustomDomainArgs defaults) {
            $ = new CustomDomainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param certConfig The configuration of HTTPS certificate.See `cert_config` below.
         * 
         * @return builder
         * 
         */
        public Builder certConfig(@Nullable Output<CustomDomainCertConfigArgs> certConfig) {
            $.certConfig = certConfig;
            return this;
        }

        /**
         * @param certConfig The configuration of HTTPS certificate.See `cert_config` below.
         * 
         * @return builder
         * 
         */
        public Builder certConfig(CustomDomainCertConfigArgs certConfig) {
            return certConfig(Output.of(certConfig));
        }

        /**
         * @param domainName The custom domain name. For example, &#34;example.com&#34;.
         * 
         * @return builder
         * 
         */
        public Builder domainName(Output<String> domainName) {
            $.domainName = domainName;
            return this;
        }

        /**
         * @param domainName The custom domain name. For example, &#34;example.com&#34;.
         * 
         * @return builder
         * 
         */
        public Builder domainName(String domainName) {
            return domainName(Output.of(domainName));
        }

        /**
         * @param protocol The protocol, `HTTP` or `HTTP,HTTPS`.
         * 
         * @return builder
         * 
         */
        public Builder protocol(Output<String> protocol) {
            $.protocol = protocol;
            return this;
        }

        /**
         * @param protocol The protocol, `HTTP` or `HTTP,HTTPS`.
         * 
         * @return builder
         * 
         */
        public Builder protocol(String protocol) {
            return protocol(Output.of(protocol));
        }

        /**
         * @param routeConfigs The configuration of domain route, mapping the path and Function Compute function.See `route_config` below.
         * 
         * @return builder
         * 
         */
        public Builder routeConfigs(@Nullable Output<List<CustomDomainRouteConfigArgs>> routeConfigs) {
            $.routeConfigs = routeConfigs;
            return this;
        }

        /**
         * @param routeConfigs The configuration of domain route, mapping the path and Function Compute function.See `route_config` below.
         * 
         * @return builder
         * 
         */
        public Builder routeConfigs(List<CustomDomainRouteConfigArgs> routeConfigs) {
            return routeConfigs(Output.of(routeConfigs));
        }

        /**
         * @param routeConfigs The configuration of domain route, mapping the path and Function Compute function.See `route_config` below.
         * 
         * @return builder
         * 
         */
        public Builder routeConfigs(CustomDomainRouteConfigArgs... routeConfigs) {
            return routeConfigs(List.of(routeConfigs));
        }

        public CustomDomainArgs build() {
            $.domainName = Objects.requireNonNull($.domainName, "expected parameter 'domainName' to be non-null");
            $.protocol = Objects.requireNonNull($.protocol, "expected parameter 'protocol' to be non-null");
            return $;
        }
    }

}
