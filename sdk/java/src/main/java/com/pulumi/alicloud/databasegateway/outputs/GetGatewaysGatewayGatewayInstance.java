// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.databasegateway.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetGatewaysGatewayGatewayInstance {
    private String connectEndpointType;
    private String currentDaemonVersion;
    private String currentVersion;
    private String endPoint;
    private String gatewayInstanceId;
    private String gatewayInstanceStatus;
    private String lastUpdateTime;
    private String localIp;
    private String message;
    private String outputIp;

    private GetGatewaysGatewayGatewayInstance() {}
    public String connectEndpointType() {
        return this.connectEndpointType;
    }
    public String currentDaemonVersion() {
        return this.currentDaemonVersion;
    }
    public String currentVersion() {
        return this.currentVersion;
    }
    public String endPoint() {
        return this.endPoint;
    }
    public String gatewayInstanceId() {
        return this.gatewayInstanceId;
    }
    public String gatewayInstanceStatus() {
        return this.gatewayInstanceStatus;
    }
    public String lastUpdateTime() {
        return this.lastUpdateTime;
    }
    public String localIp() {
        return this.localIp;
    }
    public String message() {
        return this.message;
    }
    public String outputIp() {
        return this.outputIp;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetGatewaysGatewayGatewayInstance defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String connectEndpointType;
        private String currentDaemonVersion;
        private String currentVersion;
        private String endPoint;
        private String gatewayInstanceId;
        private String gatewayInstanceStatus;
        private String lastUpdateTime;
        private String localIp;
        private String message;
        private String outputIp;
        public Builder() {}
        public Builder(GetGatewaysGatewayGatewayInstance defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.connectEndpointType = defaults.connectEndpointType;
    	      this.currentDaemonVersion = defaults.currentDaemonVersion;
    	      this.currentVersion = defaults.currentVersion;
    	      this.endPoint = defaults.endPoint;
    	      this.gatewayInstanceId = defaults.gatewayInstanceId;
    	      this.gatewayInstanceStatus = defaults.gatewayInstanceStatus;
    	      this.lastUpdateTime = defaults.lastUpdateTime;
    	      this.localIp = defaults.localIp;
    	      this.message = defaults.message;
    	      this.outputIp = defaults.outputIp;
        }

        @CustomType.Setter
        public Builder connectEndpointType(String connectEndpointType) {
            if (connectEndpointType == null) {
              throw new MissingRequiredPropertyException("GetGatewaysGatewayGatewayInstance", "connectEndpointType");
            }
            this.connectEndpointType = connectEndpointType;
            return this;
        }
        @CustomType.Setter
        public Builder currentDaemonVersion(String currentDaemonVersion) {
            if (currentDaemonVersion == null) {
              throw new MissingRequiredPropertyException("GetGatewaysGatewayGatewayInstance", "currentDaemonVersion");
            }
            this.currentDaemonVersion = currentDaemonVersion;
            return this;
        }
        @CustomType.Setter
        public Builder currentVersion(String currentVersion) {
            if (currentVersion == null) {
              throw new MissingRequiredPropertyException("GetGatewaysGatewayGatewayInstance", "currentVersion");
            }
            this.currentVersion = currentVersion;
            return this;
        }
        @CustomType.Setter
        public Builder endPoint(String endPoint) {
            if (endPoint == null) {
              throw new MissingRequiredPropertyException("GetGatewaysGatewayGatewayInstance", "endPoint");
            }
            this.endPoint = endPoint;
            return this;
        }
        @CustomType.Setter
        public Builder gatewayInstanceId(String gatewayInstanceId) {
            if (gatewayInstanceId == null) {
              throw new MissingRequiredPropertyException("GetGatewaysGatewayGatewayInstance", "gatewayInstanceId");
            }
            this.gatewayInstanceId = gatewayInstanceId;
            return this;
        }
        @CustomType.Setter
        public Builder gatewayInstanceStatus(String gatewayInstanceStatus) {
            if (gatewayInstanceStatus == null) {
              throw new MissingRequiredPropertyException("GetGatewaysGatewayGatewayInstance", "gatewayInstanceStatus");
            }
            this.gatewayInstanceStatus = gatewayInstanceStatus;
            return this;
        }
        @CustomType.Setter
        public Builder lastUpdateTime(String lastUpdateTime) {
            if (lastUpdateTime == null) {
              throw new MissingRequiredPropertyException("GetGatewaysGatewayGatewayInstance", "lastUpdateTime");
            }
            this.lastUpdateTime = lastUpdateTime;
            return this;
        }
        @CustomType.Setter
        public Builder localIp(String localIp) {
            if (localIp == null) {
              throw new MissingRequiredPropertyException("GetGatewaysGatewayGatewayInstance", "localIp");
            }
            this.localIp = localIp;
            return this;
        }
        @CustomType.Setter
        public Builder message(String message) {
            if (message == null) {
              throw new MissingRequiredPropertyException("GetGatewaysGatewayGatewayInstance", "message");
            }
            this.message = message;
            return this;
        }
        @CustomType.Setter
        public Builder outputIp(String outputIp) {
            if (outputIp == null) {
              throw new MissingRequiredPropertyException("GetGatewaysGatewayGatewayInstance", "outputIp");
            }
            this.outputIp = outputIp;
            return this;
        }
        public GetGatewaysGatewayGatewayInstance build() {
            final var _resultValue = new GetGatewaysGatewayGatewayInstance();
            _resultValue.connectEndpointType = connectEndpointType;
            _resultValue.currentDaemonVersion = currentDaemonVersion;
            _resultValue.currentVersion = currentVersion;
            _resultValue.endPoint = endPoint;
            _resultValue.gatewayInstanceId = gatewayInstanceId;
            _resultValue.gatewayInstanceStatus = gatewayInstanceStatus;
            _resultValue.lastUpdateTime = lastUpdateTime;
            _resultValue.localIp = localIp;
            _resultValue.message = message;
            _resultValue.outputIp = outputIp;
            return _resultValue;
        }
    }
}
