// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class StarRocksInstanceBackendNodeGroup {
    /**
     * @return Number of CUs. CU (Compute Unit) is the basic measurement unit of the service, where 1 CU = 1 CPU core + 4 GiB memory.
     * 
     */
    private @Nullable Integer cu;
    /**
     * @return The number of disks.
     * 
     */
    private @Nullable Integer diskNumber;
    /**
     * @return Local SSD instance specifications.
     * 
     */
    private @Nullable String localStorageInstanceType;
    /**
     * @return Resident node number of node group.
     * 
     */
    private @Nullable Integer residentNodeNumber;
    /**
     * @return Compute group specification types include the following:
     * - standard
     * - localSSD
     * - bigData
     * - ramEnhanced
     * - networkEnhanced
     * 
     */
    private @Nullable String specType;
    /**
     * @return Performance levels of cloud disks include the following values:
     * - pl0: Maximum random read/write IOPS per disk is 10,000.
     * - pl1: Maximum random read/write IOPS per disk is 50,000.
     * - pl2: Maximum random read/write IOPS per disk is 100,000.
     * - pl3: Maximum random read/write IOPS per disk is 1,000,000.
     * 
     */
    private @Nullable String storagePerformanceLevel;
    /**
     * @return Storage size, measured in GiB.
     * 
     */
    private @Nullable Integer storageSize;
    /**
     * @return Zone ID.
     * 
     */
    private @Nullable String zoneId;

    private StarRocksInstanceBackendNodeGroup() {}
    /**
     * @return Number of CUs. CU (Compute Unit) is the basic measurement unit of the service, where 1 CU = 1 CPU core + 4 GiB memory.
     * 
     */
    public Optional<Integer> cu() {
        return Optional.ofNullable(this.cu);
    }
    /**
     * @return The number of disks.
     * 
     */
    public Optional<Integer> diskNumber() {
        return Optional.ofNullable(this.diskNumber);
    }
    /**
     * @return Local SSD instance specifications.
     * 
     */
    public Optional<String> localStorageInstanceType() {
        return Optional.ofNullable(this.localStorageInstanceType);
    }
    /**
     * @return Resident node number of node group.
     * 
     */
    public Optional<Integer> residentNodeNumber() {
        return Optional.ofNullable(this.residentNodeNumber);
    }
    /**
     * @return Compute group specification types include the following:
     * - standard
     * - localSSD
     * - bigData
     * - ramEnhanced
     * - networkEnhanced
     * 
     */
    public Optional<String> specType() {
        return Optional.ofNullable(this.specType);
    }
    /**
     * @return Performance levels of cloud disks include the following values:
     * - pl0: Maximum random read/write IOPS per disk is 10,000.
     * - pl1: Maximum random read/write IOPS per disk is 50,000.
     * - pl2: Maximum random read/write IOPS per disk is 100,000.
     * - pl3: Maximum random read/write IOPS per disk is 1,000,000.
     * 
     */
    public Optional<String> storagePerformanceLevel() {
        return Optional.ofNullable(this.storagePerformanceLevel);
    }
    /**
     * @return Storage size, measured in GiB.
     * 
     */
    public Optional<Integer> storageSize() {
        return Optional.ofNullable(this.storageSize);
    }
    /**
     * @return Zone ID.
     * 
     */
    public Optional<String> zoneId() {
        return Optional.ofNullable(this.zoneId);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(StarRocksInstanceBackendNodeGroup defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Integer cu;
        private @Nullable Integer diskNumber;
        private @Nullable String localStorageInstanceType;
        private @Nullable Integer residentNodeNumber;
        private @Nullable String specType;
        private @Nullable String storagePerformanceLevel;
        private @Nullable Integer storageSize;
        private @Nullable String zoneId;
        public Builder() {}
        public Builder(StarRocksInstanceBackendNodeGroup defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.cu = defaults.cu;
    	      this.diskNumber = defaults.diskNumber;
    	      this.localStorageInstanceType = defaults.localStorageInstanceType;
    	      this.residentNodeNumber = defaults.residentNodeNumber;
    	      this.specType = defaults.specType;
    	      this.storagePerformanceLevel = defaults.storagePerformanceLevel;
    	      this.storageSize = defaults.storageSize;
    	      this.zoneId = defaults.zoneId;
        }

        @CustomType.Setter
        public Builder cu(@Nullable Integer cu) {

            this.cu = cu;
            return this;
        }
        @CustomType.Setter
        public Builder diskNumber(@Nullable Integer diskNumber) {

            this.diskNumber = diskNumber;
            return this;
        }
        @CustomType.Setter
        public Builder localStorageInstanceType(@Nullable String localStorageInstanceType) {

            this.localStorageInstanceType = localStorageInstanceType;
            return this;
        }
        @CustomType.Setter
        public Builder residentNodeNumber(@Nullable Integer residentNodeNumber) {

            this.residentNodeNumber = residentNodeNumber;
            return this;
        }
        @CustomType.Setter
        public Builder specType(@Nullable String specType) {

            this.specType = specType;
            return this;
        }
        @CustomType.Setter
        public Builder storagePerformanceLevel(@Nullable String storagePerformanceLevel) {

            this.storagePerformanceLevel = storagePerformanceLevel;
            return this;
        }
        @CustomType.Setter
        public Builder storageSize(@Nullable Integer storageSize) {

            this.storageSize = storageSize;
            return this;
        }
        @CustomType.Setter
        public Builder zoneId(@Nullable String zoneId) {

            this.zoneId = zoneId;
            return this;
        }
        public StarRocksInstanceBackendNodeGroup build() {
            final var _resultValue = new StarRocksInstanceBackendNodeGroup();
            _resultValue.cu = cu;
            _resultValue.diskNumber = diskNumber;
            _resultValue.localStorageInstanceType = localStorageInstanceType;
            _resultValue.residentNodeNumber = residentNodeNumber;
            _resultValue.specType = specType;
            _resultValue.storagePerformanceLevel = storagePerformanceLevel;
            _resultValue.storageSize = storageSize;
            _resultValue.zoneId = zoneId;
            return _resultValue;
        }
    }
}
