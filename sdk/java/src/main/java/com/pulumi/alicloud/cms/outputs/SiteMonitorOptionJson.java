// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.cms.outputs;

import com.pulumi.alicloud.cms.outputs.SiteMonitorOptionJsonAssertion;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class SiteMonitorOptionJson {
    /**
     * @return Assertion configuration group. See `assertions` below.
     * 
     */
    private @Nullable List<SiteMonitorOptionJsonAssertion> assertions;
    /**
     * @return Number of retries after DNS failed.
     * 
     */
    private @Nullable Integer attempts;
    /**
     * @return The Cookie that sends the HTTP request.
     * 
     */
    private @Nullable String cookie;
    /**
     * @return Whether to enable automatic MTR network diagnosis after a task failure. Value:
     * - false: does not enable automatic MTR network diagnosis.
     * - true to turn on automatic MTR network diagnostics.
     * 
     */
    private @Nullable Boolean diagnosisMtr;
    /**
     * @return Whether to enable the automatic PING network delay detection after the task fails. Value:
     * - false: does not enable automatic PING network delay detection.
     * - true: Enable automatic PING network delay detection.
     * 
     */
    private @Nullable Boolean diagnosisPing;
    /**
     * @return List of DNS hijacking configurations.
     * 
     */
    private @Nullable String dnsHijackWhitelist;
    /**
     * @return Matching Rules for DNS. Value:
     * - IN_DNS: The alias or IP address that is expected to be resolved is in the DNS response.
     * - DNS_IN: All DNS responses appear in the alias or IP address that is expected to be resolved.
     * - EQUAL: the DNS response is exactly the same as the alias or IP address that is expected to be resolved.
     * - ANY:DNS response and the alias or IP address expected to be resolved have an intersection.
     * 
     */
    private @Nullable String dnsMatchRule;
    /**
     * @return The IP address of the DNS server.
     * 
     * &gt; **NOTE:**  only applicable to DNS probe types.
     * 
     */
    private @Nullable String dnsServer;
    /**
     * @return DNS resolution type. Only applicable to DNS probe types. Value:
     * - A (default): specifies the IP address corresponding to the host name or domain name.
     * - CNAME: maps multiple domain names to another domain name.
     * - NS: specifies that the domain name is resolved by a DNS server.
     * - MX: point domain name to a mail server address.
     * - TXT: Description of host name or domain name. The text length is limited to 512 bytes, which is usually used as SPF(Sender Policy Framework) record, that is, anti-spam.
     * 
     */
    private @Nullable String dnsType;
    /**
     * @return The alias or address to be resolved.
     * 
     * &gt; **NOTE:**  This parameter applies only to DNS probe types.
     * 
     */
    private @Nullable String expectValue;
    /**
     * @return Packet loss rate.
     * 
     * &gt; **NOTE:**  This parameter only applies to PING probe types.
     * 
     */
    private @Nullable String failureRate;
    /**
     * @return HTTP request header.
     * 
     */
    private @Nullable String header;
    /**
     * @return HTTP request method. Value:
     * - get
     * - post
     * - head
     * 
     */
    private @Nullable String httpMethod;
    /**
     * @return Whether the parameter&#39; Password&#39; is Base64 encoded.
     * - true: Yes.
     * - false: No.
     * 
     */
    private @Nullable Boolean isBaseEncode;
    /**
     * @return Whether alarm rules are included. Value:
     * - 0: Yes.
     * - 1: No.
     * 
     */
    private @Nullable Integer matchRule;
    /**
     * @return Minimum TLS version. By default, TLS1.2 and later versions are supported. TLS1.0 and 1.1 have been disabled. If they still need to be supported, the configuration can be changed.
     * 
     */
    private @Nullable String minTlsVersion;
    /**
     * @return The password of the SMTP, POP3, or FTP probe type.
     * 
     */
    private @Nullable String password;
    /**
     * @return The heartbeat of the PING probe type.
     * 
     */
    private @Nullable Integer pingNum;
    /**
     * @return PING the port. Applies to TCP PING.
     * 
     */
    private @Nullable Integer pingPort;
    /**
     * @return The PING protocol type. Value:
     * - icmp
     * - tcp
     * - udp
     * 
     */
    private @Nullable String pingType;
    /**
     * @return Ports of TCP, UDP, SMTP, and POP3 probe types.
     * 
     */
    private @Nullable Integer port;
    /**
     * @return The request content of the HTTP probe type.
     * 
     */
    private @Nullable String requestContent;
    /**
     * @return HTTP request content format. Value:
     * - hex: hexadecimal format.
     * - text: text format.
     * 
     */
    private @Nullable String requestFormat;
    /**
     * @return Match the response content.
     * 
     */
    private @Nullable String responseContent;
    /**
     * @return HTTP response content format. Value:
     * - hex: hexadecimal format.
     * - text: text format.
     * 
     */
    private @Nullable String responseFormat;
    /**
     * @return Timeout time. Unit: milliseconds.
     * 
     */
    private @Nullable Integer timeout;
    /**
     * @return The username of FTP, SMTP, or pop3.
     * 
     */
    private @Nullable String userName;

    private SiteMonitorOptionJson() {}
    /**
     * @return Assertion configuration group. See `assertions` below.
     * 
     */
    public List<SiteMonitorOptionJsonAssertion> assertions() {
        return this.assertions == null ? List.of() : this.assertions;
    }
    /**
     * @return Number of retries after DNS failed.
     * 
     */
    public Optional<Integer> attempts() {
        return Optional.ofNullable(this.attempts);
    }
    /**
     * @return The Cookie that sends the HTTP request.
     * 
     */
    public Optional<String> cookie() {
        return Optional.ofNullable(this.cookie);
    }
    /**
     * @return Whether to enable automatic MTR network diagnosis after a task failure. Value:
     * - false: does not enable automatic MTR network diagnosis.
     * - true to turn on automatic MTR network diagnostics.
     * 
     */
    public Optional<Boolean> diagnosisMtr() {
        return Optional.ofNullable(this.diagnosisMtr);
    }
    /**
     * @return Whether to enable the automatic PING network delay detection after the task fails. Value:
     * - false: does not enable automatic PING network delay detection.
     * - true: Enable automatic PING network delay detection.
     * 
     */
    public Optional<Boolean> diagnosisPing() {
        return Optional.ofNullable(this.diagnosisPing);
    }
    /**
     * @return List of DNS hijacking configurations.
     * 
     */
    public Optional<String> dnsHijackWhitelist() {
        return Optional.ofNullable(this.dnsHijackWhitelist);
    }
    /**
     * @return Matching Rules for DNS. Value:
     * - IN_DNS: The alias or IP address that is expected to be resolved is in the DNS response.
     * - DNS_IN: All DNS responses appear in the alias or IP address that is expected to be resolved.
     * - EQUAL: the DNS response is exactly the same as the alias or IP address that is expected to be resolved.
     * - ANY:DNS response and the alias or IP address expected to be resolved have an intersection.
     * 
     */
    public Optional<String> dnsMatchRule() {
        return Optional.ofNullable(this.dnsMatchRule);
    }
    /**
     * @return The IP address of the DNS server.
     * 
     * &gt; **NOTE:**  only applicable to DNS probe types.
     * 
     */
    public Optional<String> dnsServer() {
        return Optional.ofNullable(this.dnsServer);
    }
    /**
     * @return DNS resolution type. Only applicable to DNS probe types. Value:
     * - A (default): specifies the IP address corresponding to the host name or domain name.
     * - CNAME: maps multiple domain names to another domain name.
     * - NS: specifies that the domain name is resolved by a DNS server.
     * - MX: point domain name to a mail server address.
     * - TXT: Description of host name or domain name. The text length is limited to 512 bytes, which is usually used as SPF(Sender Policy Framework) record, that is, anti-spam.
     * 
     */
    public Optional<String> dnsType() {
        return Optional.ofNullable(this.dnsType);
    }
    /**
     * @return The alias or address to be resolved.
     * 
     * &gt; **NOTE:**  This parameter applies only to DNS probe types.
     * 
     */
    public Optional<String> expectValue() {
        return Optional.ofNullable(this.expectValue);
    }
    /**
     * @return Packet loss rate.
     * 
     * &gt; **NOTE:**  This parameter only applies to PING probe types.
     * 
     */
    public Optional<String> failureRate() {
        return Optional.ofNullable(this.failureRate);
    }
    /**
     * @return HTTP request header.
     * 
     */
    public Optional<String> header() {
        return Optional.ofNullable(this.header);
    }
    /**
     * @return HTTP request method. Value:
     * - get
     * - post
     * - head
     * 
     */
    public Optional<String> httpMethod() {
        return Optional.ofNullable(this.httpMethod);
    }
    /**
     * @return Whether the parameter&#39; Password&#39; is Base64 encoded.
     * - true: Yes.
     * - false: No.
     * 
     */
    public Optional<Boolean> isBaseEncode() {
        return Optional.ofNullable(this.isBaseEncode);
    }
    /**
     * @return Whether alarm rules are included. Value:
     * - 0: Yes.
     * - 1: No.
     * 
     */
    public Optional<Integer> matchRule() {
        return Optional.ofNullable(this.matchRule);
    }
    /**
     * @return Minimum TLS version. By default, TLS1.2 and later versions are supported. TLS1.0 and 1.1 have been disabled. If they still need to be supported, the configuration can be changed.
     * 
     */
    public Optional<String> minTlsVersion() {
        return Optional.ofNullable(this.minTlsVersion);
    }
    /**
     * @return The password of the SMTP, POP3, or FTP probe type.
     * 
     */
    public Optional<String> password() {
        return Optional.ofNullable(this.password);
    }
    /**
     * @return The heartbeat of the PING probe type.
     * 
     */
    public Optional<Integer> pingNum() {
        return Optional.ofNullable(this.pingNum);
    }
    /**
     * @return PING the port. Applies to TCP PING.
     * 
     */
    public Optional<Integer> pingPort() {
        return Optional.ofNullable(this.pingPort);
    }
    /**
     * @return The PING protocol type. Value:
     * - icmp
     * - tcp
     * - udp
     * 
     */
    public Optional<String> pingType() {
        return Optional.ofNullable(this.pingType);
    }
    /**
     * @return Ports of TCP, UDP, SMTP, and POP3 probe types.
     * 
     */
    public Optional<Integer> port() {
        return Optional.ofNullable(this.port);
    }
    /**
     * @return The request content of the HTTP probe type.
     * 
     */
    public Optional<String> requestContent() {
        return Optional.ofNullable(this.requestContent);
    }
    /**
     * @return HTTP request content format. Value:
     * - hex: hexadecimal format.
     * - text: text format.
     * 
     */
    public Optional<String> requestFormat() {
        return Optional.ofNullable(this.requestFormat);
    }
    /**
     * @return Match the response content.
     * 
     */
    public Optional<String> responseContent() {
        return Optional.ofNullable(this.responseContent);
    }
    /**
     * @return HTTP response content format. Value:
     * - hex: hexadecimal format.
     * - text: text format.
     * 
     */
    public Optional<String> responseFormat() {
        return Optional.ofNullable(this.responseFormat);
    }
    /**
     * @return Timeout time. Unit: milliseconds.
     * 
     */
    public Optional<Integer> timeout() {
        return Optional.ofNullable(this.timeout);
    }
    /**
     * @return The username of FTP, SMTP, or pop3.
     * 
     */
    public Optional<String> userName() {
        return Optional.ofNullable(this.userName);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SiteMonitorOptionJson defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<SiteMonitorOptionJsonAssertion> assertions;
        private @Nullable Integer attempts;
        private @Nullable String cookie;
        private @Nullable Boolean diagnosisMtr;
        private @Nullable Boolean diagnosisPing;
        private @Nullable String dnsHijackWhitelist;
        private @Nullable String dnsMatchRule;
        private @Nullable String dnsServer;
        private @Nullable String dnsType;
        private @Nullable String expectValue;
        private @Nullable String failureRate;
        private @Nullable String header;
        private @Nullable String httpMethod;
        private @Nullable Boolean isBaseEncode;
        private @Nullable Integer matchRule;
        private @Nullable String minTlsVersion;
        private @Nullable String password;
        private @Nullable Integer pingNum;
        private @Nullable Integer pingPort;
        private @Nullable String pingType;
        private @Nullable Integer port;
        private @Nullable String requestContent;
        private @Nullable String requestFormat;
        private @Nullable String responseContent;
        private @Nullable String responseFormat;
        private @Nullable Integer timeout;
        private @Nullable String userName;
        public Builder() {}
        public Builder(SiteMonitorOptionJson defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.assertions = defaults.assertions;
    	      this.attempts = defaults.attempts;
    	      this.cookie = defaults.cookie;
    	      this.diagnosisMtr = defaults.diagnosisMtr;
    	      this.diagnosisPing = defaults.diagnosisPing;
    	      this.dnsHijackWhitelist = defaults.dnsHijackWhitelist;
    	      this.dnsMatchRule = defaults.dnsMatchRule;
    	      this.dnsServer = defaults.dnsServer;
    	      this.dnsType = defaults.dnsType;
    	      this.expectValue = defaults.expectValue;
    	      this.failureRate = defaults.failureRate;
    	      this.header = defaults.header;
    	      this.httpMethod = defaults.httpMethod;
    	      this.isBaseEncode = defaults.isBaseEncode;
    	      this.matchRule = defaults.matchRule;
    	      this.minTlsVersion = defaults.minTlsVersion;
    	      this.password = defaults.password;
    	      this.pingNum = defaults.pingNum;
    	      this.pingPort = defaults.pingPort;
    	      this.pingType = defaults.pingType;
    	      this.port = defaults.port;
    	      this.requestContent = defaults.requestContent;
    	      this.requestFormat = defaults.requestFormat;
    	      this.responseContent = defaults.responseContent;
    	      this.responseFormat = defaults.responseFormat;
    	      this.timeout = defaults.timeout;
    	      this.userName = defaults.userName;
        }

        @CustomType.Setter
        public Builder assertions(@Nullable List<SiteMonitorOptionJsonAssertion> assertions) {

            this.assertions = assertions;
            return this;
        }
        public Builder assertions(SiteMonitorOptionJsonAssertion... assertions) {
            return assertions(List.of(assertions));
        }
        @CustomType.Setter
        public Builder attempts(@Nullable Integer attempts) {

            this.attempts = attempts;
            return this;
        }
        @CustomType.Setter
        public Builder cookie(@Nullable String cookie) {

            this.cookie = cookie;
            return this;
        }
        @CustomType.Setter
        public Builder diagnosisMtr(@Nullable Boolean diagnosisMtr) {

            this.diagnosisMtr = diagnosisMtr;
            return this;
        }
        @CustomType.Setter
        public Builder diagnosisPing(@Nullable Boolean diagnosisPing) {

            this.diagnosisPing = diagnosisPing;
            return this;
        }
        @CustomType.Setter
        public Builder dnsHijackWhitelist(@Nullable String dnsHijackWhitelist) {

            this.dnsHijackWhitelist = dnsHijackWhitelist;
            return this;
        }
        @CustomType.Setter
        public Builder dnsMatchRule(@Nullable String dnsMatchRule) {

            this.dnsMatchRule = dnsMatchRule;
            return this;
        }
        @CustomType.Setter
        public Builder dnsServer(@Nullable String dnsServer) {

            this.dnsServer = dnsServer;
            return this;
        }
        @CustomType.Setter
        public Builder dnsType(@Nullable String dnsType) {

            this.dnsType = dnsType;
            return this;
        }
        @CustomType.Setter
        public Builder expectValue(@Nullable String expectValue) {

            this.expectValue = expectValue;
            return this;
        }
        @CustomType.Setter
        public Builder failureRate(@Nullable String failureRate) {

            this.failureRate = failureRate;
            return this;
        }
        @CustomType.Setter
        public Builder header(@Nullable String header) {

            this.header = header;
            return this;
        }
        @CustomType.Setter
        public Builder httpMethod(@Nullable String httpMethod) {

            this.httpMethod = httpMethod;
            return this;
        }
        @CustomType.Setter
        public Builder isBaseEncode(@Nullable Boolean isBaseEncode) {

            this.isBaseEncode = isBaseEncode;
            return this;
        }
        @CustomType.Setter
        public Builder matchRule(@Nullable Integer matchRule) {

            this.matchRule = matchRule;
            return this;
        }
        @CustomType.Setter
        public Builder minTlsVersion(@Nullable String minTlsVersion) {

            this.minTlsVersion = minTlsVersion;
            return this;
        }
        @CustomType.Setter
        public Builder password(@Nullable String password) {

            this.password = password;
            return this;
        }
        @CustomType.Setter
        public Builder pingNum(@Nullable Integer pingNum) {

            this.pingNum = pingNum;
            return this;
        }
        @CustomType.Setter
        public Builder pingPort(@Nullable Integer pingPort) {

            this.pingPort = pingPort;
            return this;
        }
        @CustomType.Setter
        public Builder pingType(@Nullable String pingType) {

            this.pingType = pingType;
            return this;
        }
        @CustomType.Setter
        public Builder port(@Nullable Integer port) {

            this.port = port;
            return this;
        }
        @CustomType.Setter
        public Builder requestContent(@Nullable String requestContent) {

            this.requestContent = requestContent;
            return this;
        }
        @CustomType.Setter
        public Builder requestFormat(@Nullable String requestFormat) {

            this.requestFormat = requestFormat;
            return this;
        }
        @CustomType.Setter
        public Builder responseContent(@Nullable String responseContent) {

            this.responseContent = responseContent;
            return this;
        }
        @CustomType.Setter
        public Builder responseFormat(@Nullable String responseFormat) {

            this.responseFormat = responseFormat;
            return this;
        }
        @CustomType.Setter
        public Builder timeout(@Nullable Integer timeout) {

            this.timeout = timeout;
            return this;
        }
        @CustomType.Setter
        public Builder userName(@Nullable String userName) {

            this.userName = userName;
            return this;
        }
        public SiteMonitorOptionJson build() {
            final var _resultValue = new SiteMonitorOptionJson();
            _resultValue.assertions = assertions;
            _resultValue.attempts = attempts;
            _resultValue.cookie = cookie;
            _resultValue.diagnosisMtr = diagnosisMtr;
            _resultValue.diagnosisPing = diagnosisPing;
            _resultValue.dnsHijackWhitelist = dnsHijackWhitelist;
            _resultValue.dnsMatchRule = dnsMatchRule;
            _resultValue.dnsServer = dnsServer;
            _resultValue.dnsType = dnsType;
            _resultValue.expectValue = expectValue;
            _resultValue.failureRate = failureRate;
            _resultValue.header = header;
            _resultValue.httpMethod = httpMethod;
            _resultValue.isBaseEncode = isBaseEncode;
            _resultValue.matchRule = matchRule;
            _resultValue.minTlsVersion = minTlsVersion;
            _resultValue.password = password;
            _resultValue.pingNum = pingNum;
            _resultValue.pingPort = pingPort;
            _resultValue.pingType = pingType;
            _resultValue.port = port;
            _resultValue.requestContent = requestContent;
            _resultValue.requestFormat = requestFormat;
            _resultValue.responseContent = responseContent;
            _resultValue.responseFormat = responseFormat;
            _resultValue.timeout = timeout;
            _resultValue.userName = userName;
            return _resultValue;
        }
    }
}
