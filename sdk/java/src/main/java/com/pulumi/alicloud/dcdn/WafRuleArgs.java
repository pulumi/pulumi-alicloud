// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.dcdn;

import com.pulumi.alicloud.dcdn.inputs.WafRuleConditionArgs;
import com.pulumi.alicloud.dcdn.inputs.WafRuleRateLimitArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class WafRuleArgs extends com.pulumi.resources.ResourceArgs {

    public static final WafRuleArgs Empty = new WafRuleArgs();

    /**
     * Specifies the action of the rule. Valid values: `block`, `monitor`, `js`.
     * 
     */
    @Import(name="action")
    private @Nullable Output<String> action;

    /**
     * @return Specifies the action of the rule. Valid values: `block`, `monitor`, `js`.
     * 
     */
    public Optional<Output<String>> action() {
        return Optional.ofNullable(this.action);
    }

    /**
     * Specifies whether to enable rate limiting. Valid values: `on` and `off`. **NOTE:** This parameter is required when policy is of type `custom_acl`.
     * 
     */
    @Import(name="ccStatus")
    private @Nullable Output<String> ccStatus;

    /**
     * @return Specifies whether to enable rate limiting. Valid values: `on` and `off`. **NOTE:** This parameter is required when policy is of type `custom_acl`.
     * 
     */
    public Optional<Output<String>> ccStatus() {
        return Optional.ofNullable(this.ccStatus);
    }

    /**
     * The blocked regions in the Chinese mainland, separated by commas (,).
     * 
     */
    @Import(name="cnRegionList")
    private @Nullable Output<String> cnRegionList;

    /**
     * @return The blocked regions in the Chinese mainland, separated by commas (,).
     * 
     */
    public Optional<Output<String>> cnRegionList() {
        return Optional.ofNullable(this.cnRegionList);
    }

    /**
     * Conditions that trigger the rule. See the following `Block Conditions`. **NOTE:** This parameter is required when policy is of type `custom_acl` or `whitelist`.
     * 
     */
    @Import(name="conditions")
    private @Nullable Output<List<WafRuleConditionArgs>> conditions;

    /**
     * @return Conditions that trigger the rule. See the following `Block Conditions`. **NOTE:** This parameter is required when policy is of type `custom_acl` or `whitelist`.
     * 
     */
    public Optional<Output<List<WafRuleConditionArgs>>> conditions() {
        return Optional.ofNullable(this.conditions);
    }

    /**
     * The effective scope of the rate limiting blacklist. If you set ccStatus to on, you must configure this parameter. Valid values: `rule` (takes effect for the current rule) and `service` (takes effect globally).
     * 
     */
    @Import(name="effect")
    private @Nullable Output<String> effect;

    /**
     * @return The effective scope of the rate limiting blacklist. If you set ccStatus to on, you must configure this parameter. Valid values: `rule` (takes effect for the current rule) and `service` (takes effect globally).
     * 
     */
    public Optional<Output<String>> effect() {
        return Optional.ofNullable(this.effect);
    }

    /**
     * Blocked regions outside the Chinese mainland, separated by commas (,).
     * 
     */
    @Import(name="otherRegionList")
    private @Nullable Output<String> otherRegionList;

    /**
     * @return Blocked regions outside the Chinese mainland, separated by commas (,).
     * 
     */
    public Optional<Output<String>> otherRegionList() {
        return Optional.ofNullable(this.otherRegionList);
    }

    /**
     * The protection policy ID.
     * 
     */
    @Import(name="policyId", required=true)
    private Output<String> policyId;

    /**
     * @return The protection policy ID.
     * 
     */
    public Output<String> policyId() {
        return this.policyId;
    }

    /**
     * The rules of rate limiting. If you set `cc_status` to on, you must configure this parameter. See the following `Block RateLimit`.
     * 
     */
    @Import(name="rateLimit")
    private @Nullable Output<WafRuleRateLimitArgs> rateLimit;

    /**
     * @return The rules of rate limiting. If you set `cc_status` to on, you must configure this parameter. See the following `Block RateLimit`.
     * 
     */
    public Optional<Output<WafRuleRateLimitArgs>> rateLimit() {
        return Optional.ofNullable(this.rateLimit);
    }

    /**
     * The regular expression.e, when waf_group appears in tags, this value can be filled in, and only one list of six digits in string format can appear with regultypes.
     * 
     */
    @Import(name="regularRules")
    private @Nullable Output<List<String>> regularRules;

    /**
     * @return The regular expression.e, when waf_group appears in tags, this value can be filled in, and only one list of six digits in string format can appear with regultypes.
     * 
     */
    public Optional<Output<List<String>>> regularRules() {
        return Optional.ofNullable(this.regularRules);
    }

    /**
     * Regular rule type, when waf_group appears in tags, this value can be filled in, optional values:[&#34;sqli&#34;, &#34;xss&#34;, &#34;code_exec&#34;, &#34;crlf&#34;, &#34;lfileii&#34;, &#34;rfileii&#34;, &#34;webshell&#34;, &#34;vvip&#34;, &#34;other&#34;]
     * 
     */
    @Import(name="regularTypes")
    private @Nullable Output<List<String>> regularTypes;

    /**
     * @return Regular rule type, when waf_group appears in tags, this value can be filled in, optional values:[&#34;sqli&#34;, &#34;xss&#34;, &#34;code_exec&#34;, &#34;crlf&#34;, &#34;lfileii&#34;, &#34;rfileii&#34;, &#34;webshell&#34;, &#34;vvip&#34;, &#34;other&#34;]
     * 
     */
    public Optional<Output<List<String>>> regularTypes() {
        return Optional.ofNullable(this.regularTypes);
    }

    /**
     * Filter by IP address.
     * 
     */
    @Import(name="remoteAddrs")
    private @Nullable Output<List<String>> remoteAddrs;

    /**
     * @return Filter by IP address.
     * 
     */
    public Optional<Output<List<String>>> remoteAddrs() {
        return Optional.ofNullable(this.remoteAddrs);
    }

    /**
     * The name of the protection rule. The name can be up to 64 characters in length and can contain letters, digits, and underscores (_). **NOTE:** This parameter cannot be modified when policy is of type `region_block`.
     * 
     */
    @Import(name="ruleName", required=true)
    private Output<String> ruleName;

    /**
     * @return The name of the protection rule. The name can be up to 64 characters in length and can contain letters, digits, and underscores (_). **NOTE:** This parameter cannot be modified when policy is of type `region_block`.
     * 
     */
    public Output<String> ruleName() {
        return this.ruleName;
    }

    /**
     * The types of the protection policies.
     * 
     */
    @Import(name="scenes")
    private @Nullable Output<List<String>> scenes;

    /**
     * @return The types of the protection policies.
     * 
     */
    public Optional<Output<List<String>>> scenes() {
        return Optional.ofNullable(this.scenes);
    }

    /**
     * The status of the waf rule. Valid values: `on` and `off`. Default value: on.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return The status of the waf rule. Valid values: `on` and `off`. Default value: on.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * The id of the waf rule group. The default value is &#34;1012&#34;. Multiple rules are separated by commas.
     * 
     */
    @Import(name="wafGroupIds")
    private @Nullable Output<String> wafGroupIds;

    /**
     * @return The id of the waf rule group. The default value is &#34;1012&#34;. Multiple rules are separated by commas.
     * 
     */
    public Optional<Output<String>> wafGroupIds() {
        return Optional.ofNullable(this.wafGroupIds);
    }

    private WafRuleArgs() {}

    private WafRuleArgs(WafRuleArgs $) {
        this.action = $.action;
        this.ccStatus = $.ccStatus;
        this.cnRegionList = $.cnRegionList;
        this.conditions = $.conditions;
        this.effect = $.effect;
        this.otherRegionList = $.otherRegionList;
        this.policyId = $.policyId;
        this.rateLimit = $.rateLimit;
        this.regularRules = $.regularRules;
        this.regularTypes = $.regularTypes;
        this.remoteAddrs = $.remoteAddrs;
        this.ruleName = $.ruleName;
        this.scenes = $.scenes;
        this.status = $.status;
        this.wafGroupIds = $.wafGroupIds;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(WafRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private WafRuleArgs $;

        public Builder() {
            $ = new WafRuleArgs();
        }

        public Builder(WafRuleArgs defaults) {
            $ = new WafRuleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param action Specifies the action of the rule. Valid values: `block`, `monitor`, `js`.
         * 
         * @return builder
         * 
         */
        public Builder action(@Nullable Output<String> action) {
            $.action = action;
            return this;
        }

        /**
         * @param action Specifies the action of the rule. Valid values: `block`, `monitor`, `js`.
         * 
         * @return builder
         * 
         */
        public Builder action(String action) {
            return action(Output.of(action));
        }

        /**
         * @param ccStatus Specifies whether to enable rate limiting. Valid values: `on` and `off`. **NOTE:** This parameter is required when policy is of type `custom_acl`.
         * 
         * @return builder
         * 
         */
        public Builder ccStatus(@Nullable Output<String> ccStatus) {
            $.ccStatus = ccStatus;
            return this;
        }

        /**
         * @param ccStatus Specifies whether to enable rate limiting. Valid values: `on` and `off`. **NOTE:** This parameter is required when policy is of type `custom_acl`.
         * 
         * @return builder
         * 
         */
        public Builder ccStatus(String ccStatus) {
            return ccStatus(Output.of(ccStatus));
        }

        /**
         * @param cnRegionList The blocked regions in the Chinese mainland, separated by commas (,).
         * 
         * @return builder
         * 
         */
        public Builder cnRegionList(@Nullable Output<String> cnRegionList) {
            $.cnRegionList = cnRegionList;
            return this;
        }

        /**
         * @param cnRegionList The blocked regions in the Chinese mainland, separated by commas (,).
         * 
         * @return builder
         * 
         */
        public Builder cnRegionList(String cnRegionList) {
            return cnRegionList(Output.of(cnRegionList));
        }

        /**
         * @param conditions Conditions that trigger the rule. See the following `Block Conditions`. **NOTE:** This parameter is required when policy is of type `custom_acl` or `whitelist`.
         * 
         * @return builder
         * 
         */
        public Builder conditions(@Nullable Output<List<WafRuleConditionArgs>> conditions) {
            $.conditions = conditions;
            return this;
        }

        /**
         * @param conditions Conditions that trigger the rule. See the following `Block Conditions`. **NOTE:** This parameter is required when policy is of type `custom_acl` or `whitelist`.
         * 
         * @return builder
         * 
         */
        public Builder conditions(List<WafRuleConditionArgs> conditions) {
            return conditions(Output.of(conditions));
        }

        /**
         * @param conditions Conditions that trigger the rule. See the following `Block Conditions`. **NOTE:** This parameter is required when policy is of type `custom_acl` or `whitelist`.
         * 
         * @return builder
         * 
         */
        public Builder conditions(WafRuleConditionArgs... conditions) {
            return conditions(List.of(conditions));
        }

        /**
         * @param effect The effective scope of the rate limiting blacklist. If you set ccStatus to on, you must configure this parameter. Valid values: `rule` (takes effect for the current rule) and `service` (takes effect globally).
         * 
         * @return builder
         * 
         */
        public Builder effect(@Nullable Output<String> effect) {
            $.effect = effect;
            return this;
        }

        /**
         * @param effect The effective scope of the rate limiting blacklist. If you set ccStatus to on, you must configure this parameter. Valid values: `rule` (takes effect for the current rule) and `service` (takes effect globally).
         * 
         * @return builder
         * 
         */
        public Builder effect(String effect) {
            return effect(Output.of(effect));
        }

        /**
         * @param otherRegionList Blocked regions outside the Chinese mainland, separated by commas (,).
         * 
         * @return builder
         * 
         */
        public Builder otherRegionList(@Nullable Output<String> otherRegionList) {
            $.otherRegionList = otherRegionList;
            return this;
        }

        /**
         * @param otherRegionList Blocked regions outside the Chinese mainland, separated by commas (,).
         * 
         * @return builder
         * 
         */
        public Builder otherRegionList(String otherRegionList) {
            return otherRegionList(Output.of(otherRegionList));
        }

        /**
         * @param policyId The protection policy ID.
         * 
         * @return builder
         * 
         */
        public Builder policyId(Output<String> policyId) {
            $.policyId = policyId;
            return this;
        }

        /**
         * @param policyId The protection policy ID.
         * 
         * @return builder
         * 
         */
        public Builder policyId(String policyId) {
            return policyId(Output.of(policyId));
        }

        /**
         * @param rateLimit The rules of rate limiting. If you set `cc_status` to on, you must configure this parameter. See the following `Block RateLimit`.
         * 
         * @return builder
         * 
         */
        public Builder rateLimit(@Nullable Output<WafRuleRateLimitArgs> rateLimit) {
            $.rateLimit = rateLimit;
            return this;
        }

        /**
         * @param rateLimit The rules of rate limiting. If you set `cc_status` to on, you must configure this parameter. See the following `Block RateLimit`.
         * 
         * @return builder
         * 
         */
        public Builder rateLimit(WafRuleRateLimitArgs rateLimit) {
            return rateLimit(Output.of(rateLimit));
        }

        /**
         * @param regularRules The regular expression.e, when waf_group appears in tags, this value can be filled in, and only one list of six digits in string format can appear with regultypes.
         * 
         * @return builder
         * 
         */
        public Builder regularRules(@Nullable Output<List<String>> regularRules) {
            $.regularRules = regularRules;
            return this;
        }

        /**
         * @param regularRules The regular expression.e, when waf_group appears in tags, this value can be filled in, and only one list of six digits in string format can appear with regultypes.
         * 
         * @return builder
         * 
         */
        public Builder regularRules(List<String> regularRules) {
            return regularRules(Output.of(regularRules));
        }

        /**
         * @param regularRules The regular expression.e, when waf_group appears in tags, this value can be filled in, and only one list of six digits in string format can appear with regultypes.
         * 
         * @return builder
         * 
         */
        public Builder regularRules(String... regularRules) {
            return regularRules(List.of(regularRules));
        }

        /**
         * @param regularTypes Regular rule type, when waf_group appears in tags, this value can be filled in, optional values:[&#34;sqli&#34;, &#34;xss&#34;, &#34;code_exec&#34;, &#34;crlf&#34;, &#34;lfileii&#34;, &#34;rfileii&#34;, &#34;webshell&#34;, &#34;vvip&#34;, &#34;other&#34;]
         * 
         * @return builder
         * 
         */
        public Builder regularTypes(@Nullable Output<List<String>> regularTypes) {
            $.regularTypes = regularTypes;
            return this;
        }

        /**
         * @param regularTypes Regular rule type, when waf_group appears in tags, this value can be filled in, optional values:[&#34;sqli&#34;, &#34;xss&#34;, &#34;code_exec&#34;, &#34;crlf&#34;, &#34;lfileii&#34;, &#34;rfileii&#34;, &#34;webshell&#34;, &#34;vvip&#34;, &#34;other&#34;]
         * 
         * @return builder
         * 
         */
        public Builder regularTypes(List<String> regularTypes) {
            return regularTypes(Output.of(regularTypes));
        }

        /**
         * @param regularTypes Regular rule type, when waf_group appears in tags, this value can be filled in, optional values:[&#34;sqli&#34;, &#34;xss&#34;, &#34;code_exec&#34;, &#34;crlf&#34;, &#34;lfileii&#34;, &#34;rfileii&#34;, &#34;webshell&#34;, &#34;vvip&#34;, &#34;other&#34;]
         * 
         * @return builder
         * 
         */
        public Builder regularTypes(String... regularTypes) {
            return regularTypes(List.of(regularTypes));
        }

        /**
         * @param remoteAddrs Filter by IP address.
         * 
         * @return builder
         * 
         */
        public Builder remoteAddrs(@Nullable Output<List<String>> remoteAddrs) {
            $.remoteAddrs = remoteAddrs;
            return this;
        }

        /**
         * @param remoteAddrs Filter by IP address.
         * 
         * @return builder
         * 
         */
        public Builder remoteAddrs(List<String> remoteAddrs) {
            return remoteAddrs(Output.of(remoteAddrs));
        }

        /**
         * @param remoteAddrs Filter by IP address.
         * 
         * @return builder
         * 
         */
        public Builder remoteAddrs(String... remoteAddrs) {
            return remoteAddrs(List.of(remoteAddrs));
        }

        /**
         * @param ruleName The name of the protection rule. The name can be up to 64 characters in length and can contain letters, digits, and underscores (_). **NOTE:** This parameter cannot be modified when policy is of type `region_block`.
         * 
         * @return builder
         * 
         */
        public Builder ruleName(Output<String> ruleName) {
            $.ruleName = ruleName;
            return this;
        }

        /**
         * @param ruleName The name of the protection rule. The name can be up to 64 characters in length and can contain letters, digits, and underscores (_). **NOTE:** This parameter cannot be modified when policy is of type `region_block`.
         * 
         * @return builder
         * 
         */
        public Builder ruleName(String ruleName) {
            return ruleName(Output.of(ruleName));
        }

        /**
         * @param scenes The types of the protection policies.
         * 
         * @return builder
         * 
         */
        public Builder scenes(@Nullable Output<List<String>> scenes) {
            $.scenes = scenes;
            return this;
        }

        /**
         * @param scenes The types of the protection policies.
         * 
         * @return builder
         * 
         */
        public Builder scenes(List<String> scenes) {
            return scenes(Output.of(scenes));
        }

        /**
         * @param scenes The types of the protection policies.
         * 
         * @return builder
         * 
         */
        public Builder scenes(String... scenes) {
            return scenes(List.of(scenes));
        }

        /**
         * @param status The status of the waf rule. Valid values: `on` and `off`. Default value: on.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status The status of the waf rule. Valid values: `on` and `off`. Default value: on.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param wafGroupIds The id of the waf rule group. The default value is &#34;1012&#34;. Multiple rules are separated by commas.
         * 
         * @return builder
         * 
         */
        public Builder wafGroupIds(@Nullable Output<String> wafGroupIds) {
            $.wafGroupIds = wafGroupIds;
            return this;
        }

        /**
         * @param wafGroupIds The id of the waf rule group. The default value is &#34;1012&#34;. Multiple rules are separated by commas.
         * 
         * @return builder
         * 
         */
        public Builder wafGroupIds(String wafGroupIds) {
            return wafGroupIds(Output.of(wafGroupIds));
        }

        public WafRuleArgs build() {
            $.policyId = Objects.requireNonNull($.policyId, "expected parameter 'policyId' to be non-null");
            $.ruleName = Objects.requireNonNull($.ruleName, "expected parameter 'ruleName' to be non-null");
            return $;
        }
    }

}
