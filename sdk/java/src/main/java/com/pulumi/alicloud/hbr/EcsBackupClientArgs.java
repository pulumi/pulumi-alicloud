// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.hbr;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class EcsBackupClientArgs extends com.pulumi.resources.ResourceArgs {

    public static final EcsBackupClientArgs Empty = new EcsBackupClientArgs();

    /**
     * The data plane access point type. Valid values: `CLASSIC`, `PUBLIC`, `VPC`. **NOTE:** The value of `CLASSIC` has been deprecated in v1.161.0+.
     * 
     */
    @Import(name="dataNetworkType")
    private @Nullable Output<String> dataNetworkType;

    /**
     * @return The data plane access point type. Valid values: `CLASSIC`, `PUBLIC`, `VPC`. **NOTE:** The value of `CLASSIC` has been deprecated in v1.161.0+.
     * 
     */
    public Optional<Output<String>> dataNetworkType() {
        return Optional.ofNullable(this.dataNetworkType);
    }

    /**
     * The data plane proxy settings. Valid values: `CUSTOM`, `DISABLE`, `USE_CONTROL_PROXY`.
     * 
     */
    @Import(name="dataProxySetting")
    private @Nullable Output<String> dataProxySetting;

    /**
     * @return The data plane proxy settings. Valid values: `CUSTOM`, `DISABLE`, `USE_CONTROL_PROXY`.
     * 
     */
    public Optional<Output<String>> dataProxySetting() {
        return Optional.ofNullable(this.dataProxySetting);
    }

    /**
     * The ID of ECS instance.
     * 
     */
    @Import(name="instanceId", required=true)
    private Output<String> instanceId;

    /**
     * @return The ID of ECS instance.
     * 
     */
    public Output<String> instanceId() {
        return this.instanceId;
    }

    /**
     * The number of CPU cores used by a single backup task, 0 means no restrictions.
     * 
     */
    @Import(name="maxCpuCore")
    private @Nullable Output<String> maxCpuCore;

    /**
     * @return The number of CPU cores used by a single backup task, 0 means no restrictions.
     * 
     */
    public Optional<Output<String>> maxCpuCore() {
        return Optional.ofNullable(this.maxCpuCore);
    }

    /**
     * The number of concurrent jobs for a single backup task, 0 means no restrictions.
     * 
     */
    @Import(name="maxWorker")
    private @Nullable Output<String> maxWorker;

    /**
     * @return The number of concurrent jobs for a single backup task, 0 means no restrictions.
     * 
     */
    public Optional<Output<String>> maxWorker() {
        return Optional.ofNullable(this.maxWorker);
    }

    /**
     * Custom data plane proxy server host address.
     * 
     */
    @Import(name="proxyHost")
    private @Nullable Output<String> proxyHost;

    /**
     * @return Custom data plane proxy server host address.
     * 
     */
    public Optional<Output<String>> proxyHost() {
        return Optional.ofNullable(this.proxyHost);
    }

    /**
     * The password of custom data plane proxy server.
     * 
     */
    @Import(name="proxyPassword")
    private @Nullable Output<String> proxyPassword;

    /**
     * @return The password of custom data plane proxy server.
     * 
     */
    public Optional<Output<String>> proxyPassword() {
        return Optional.ofNullable(this.proxyPassword);
    }

    /**
     * Custom data plane proxy server host port.
     * 
     */
    @Import(name="proxyPort")
    private @Nullable Output<String> proxyPort;

    /**
     * @return Custom data plane proxy server host port.
     * 
     */
    public Optional<Output<String>> proxyPort() {
        return Optional.ofNullable(this.proxyPort);
    }

    /**
     * The username of custom data plane proxy server.
     * 
     */
    @Import(name="proxyUser")
    private @Nullable Output<String> proxyUser;

    /**
     * @return The username of custom data plane proxy server.
     * 
     */
    public Optional<Output<String>> proxyUser() {
        return Optional.ofNullable(this.proxyUser);
    }

    /**
     * Status of client. Valid values: `ACTIVATED`, `STOPPED`. You can start or stop the client by specifying the status.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return Status of client. Valid values: `ACTIVATED`, `STOPPED`. You can start or stop the client by specifying the status.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * Indicates whether to use the HTTPS protocol. Valid values: `true`, `false`.
     * 
     */
    @Import(name="useHttps")
    private @Nullable Output<Boolean> useHttps;

    /**
     * @return Indicates whether to use the HTTPS protocol. Valid values: `true`, `false`.
     * 
     */
    public Optional<Output<Boolean>> useHttps() {
        return Optional.ofNullable(this.useHttps);
    }

    private EcsBackupClientArgs() {}

    private EcsBackupClientArgs(EcsBackupClientArgs $) {
        this.dataNetworkType = $.dataNetworkType;
        this.dataProxySetting = $.dataProxySetting;
        this.instanceId = $.instanceId;
        this.maxCpuCore = $.maxCpuCore;
        this.maxWorker = $.maxWorker;
        this.proxyHost = $.proxyHost;
        this.proxyPassword = $.proxyPassword;
        this.proxyPort = $.proxyPort;
        this.proxyUser = $.proxyUser;
        this.status = $.status;
        this.useHttps = $.useHttps;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(EcsBackupClientArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private EcsBackupClientArgs $;

        public Builder() {
            $ = new EcsBackupClientArgs();
        }

        public Builder(EcsBackupClientArgs defaults) {
            $ = new EcsBackupClientArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param dataNetworkType The data plane access point type. Valid values: `CLASSIC`, `PUBLIC`, `VPC`. **NOTE:** The value of `CLASSIC` has been deprecated in v1.161.0+.
         * 
         * @return builder
         * 
         */
        public Builder dataNetworkType(@Nullable Output<String> dataNetworkType) {
            $.dataNetworkType = dataNetworkType;
            return this;
        }

        /**
         * @param dataNetworkType The data plane access point type. Valid values: `CLASSIC`, `PUBLIC`, `VPC`. **NOTE:** The value of `CLASSIC` has been deprecated in v1.161.0+.
         * 
         * @return builder
         * 
         */
        public Builder dataNetworkType(String dataNetworkType) {
            return dataNetworkType(Output.of(dataNetworkType));
        }

        /**
         * @param dataProxySetting The data plane proxy settings. Valid values: `CUSTOM`, `DISABLE`, `USE_CONTROL_PROXY`.
         * 
         * @return builder
         * 
         */
        public Builder dataProxySetting(@Nullable Output<String> dataProxySetting) {
            $.dataProxySetting = dataProxySetting;
            return this;
        }

        /**
         * @param dataProxySetting The data plane proxy settings. Valid values: `CUSTOM`, `DISABLE`, `USE_CONTROL_PROXY`.
         * 
         * @return builder
         * 
         */
        public Builder dataProxySetting(String dataProxySetting) {
            return dataProxySetting(Output.of(dataProxySetting));
        }

        /**
         * @param instanceId The ID of ECS instance.
         * 
         * @return builder
         * 
         */
        public Builder instanceId(Output<String> instanceId) {
            $.instanceId = instanceId;
            return this;
        }

        /**
         * @param instanceId The ID of ECS instance.
         * 
         * @return builder
         * 
         */
        public Builder instanceId(String instanceId) {
            return instanceId(Output.of(instanceId));
        }

        /**
         * @param maxCpuCore The number of CPU cores used by a single backup task, 0 means no restrictions.
         * 
         * @return builder
         * 
         */
        public Builder maxCpuCore(@Nullable Output<String> maxCpuCore) {
            $.maxCpuCore = maxCpuCore;
            return this;
        }

        /**
         * @param maxCpuCore The number of CPU cores used by a single backup task, 0 means no restrictions.
         * 
         * @return builder
         * 
         */
        public Builder maxCpuCore(String maxCpuCore) {
            return maxCpuCore(Output.of(maxCpuCore));
        }

        /**
         * @param maxWorker The number of concurrent jobs for a single backup task, 0 means no restrictions.
         * 
         * @return builder
         * 
         */
        public Builder maxWorker(@Nullable Output<String> maxWorker) {
            $.maxWorker = maxWorker;
            return this;
        }

        /**
         * @param maxWorker The number of concurrent jobs for a single backup task, 0 means no restrictions.
         * 
         * @return builder
         * 
         */
        public Builder maxWorker(String maxWorker) {
            return maxWorker(Output.of(maxWorker));
        }

        /**
         * @param proxyHost Custom data plane proxy server host address.
         * 
         * @return builder
         * 
         */
        public Builder proxyHost(@Nullable Output<String> proxyHost) {
            $.proxyHost = proxyHost;
            return this;
        }

        /**
         * @param proxyHost Custom data plane proxy server host address.
         * 
         * @return builder
         * 
         */
        public Builder proxyHost(String proxyHost) {
            return proxyHost(Output.of(proxyHost));
        }

        /**
         * @param proxyPassword The password of custom data plane proxy server.
         * 
         * @return builder
         * 
         */
        public Builder proxyPassword(@Nullable Output<String> proxyPassword) {
            $.proxyPassword = proxyPassword;
            return this;
        }

        /**
         * @param proxyPassword The password of custom data plane proxy server.
         * 
         * @return builder
         * 
         */
        public Builder proxyPassword(String proxyPassword) {
            return proxyPassword(Output.of(proxyPassword));
        }

        /**
         * @param proxyPort Custom data plane proxy server host port.
         * 
         * @return builder
         * 
         */
        public Builder proxyPort(@Nullable Output<String> proxyPort) {
            $.proxyPort = proxyPort;
            return this;
        }

        /**
         * @param proxyPort Custom data plane proxy server host port.
         * 
         * @return builder
         * 
         */
        public Builder proxyPort(String proxyPort) {
            return proxyPort(Output.of(proxyPort));
        }

        /**
         * @param proxyUser The username of custom data plane proxy server.
         * 
         * @return builder
         * 
         */
        public Builder proxyUser(@Nullable Output<String> proxyUser) {
            $.proxyUser = proxyUser;
            return this;
        }

        /**
         * @param proxyUser The username of custom data plane proxy server.
         * 
         * @return builder
         * 
         */
        public Builder proxyUser(String proxyUser) {
            return proxyUser(Output.of(proxyUser));
        }

        /**
         * @param status Status of client. Valid values: `ACTIVATED`, `STOPPED`. You can start or stop the client by specifying the status.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status Status of client. Valid values: `ACTIVATED`, `STOPPED`. You can start or stop the client by specifying the status.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param useHttps Indicates whether to use the HTTPS protocol. Valid values: `true`, `false`.
         * 
         * @return builder
         * 
         */
        public Builder useHttps(@Nullable Output<Boolean> useHttps) {
            $.useHttps = useHttps;
            return this;
        }

        /**
         * @param useHttps Indicates whether to use the HTTPS protocol. Valid values: `true`, `false`.
         * 
         * @return builder
         * 
         */
        public Builder useHttps(Boolean useHttps) {
            return useHttps(Output.of(useHttps));
        }

        public EcsBackupClientArgs build() {
            if ($.instanceId == null) {
                throw new MissingRequiredPropertyException("EcsBackupClientArgs", "instanceId");
            }
            return $;
        }
    }

}
