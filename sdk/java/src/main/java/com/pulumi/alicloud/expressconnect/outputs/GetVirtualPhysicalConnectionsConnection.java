// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.expressconnect.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetVirtualPhysicalConnectionsConnection {
    /**
     * @return The ID of the access point of the physical connection.
     * 
     */
    private String accessPointId;
    /**
     * @return The physical location where the physical connection access device is located.
     * 
     */
    private String adLocation;
    /**
     * @return The bandwidth of the physical connection. Unit: Mbps.
     * 
     */
    private String bandwidth;
    /**
     * @return The commercial status of the physical line. Value:
     * - **Normal**: activated.
     * - **Financialized**: Arrears locked.
     * - **SecurityLocked**: locked for security reasons.
     * 
     */
    private String businessStatus;
    /**
     * @return The circuit code provided by the operator for the physical connection.
     * 
     */
    private String circuitCode;
    /**
     * @return The creation time of the resource
     * 
     */
    private String createTime;
    /**
     * @return The description of the physical connection.
     * 
     */
    private String description;
    /**
     * @return The opening time of the physical connection.
     * 
     */
    private String enabledTime;
    /**
     * @return The expiration time of the shared line.Time is expressed according to ISO8601 standard and UTC time is used. The format is: YYYY-MM-DDThh:mm:ssZ.
     * 
     */
    private String endTime;
    /**
     * @return The estimated bandwidth value of the shared line. The expected bandwidth value will not take effect until the payment is completed.Unit: **M** indicates Mbps,**G** indicates Gbps.
     * 
     */
    private String expectSpec;
    /**
     * @return The ID of the Virtual Physical Connection.
     * 
     */
    private String id;
    /**
     * @return Operators that provide access to physical lines. Value:-**CT**: China Telecom.-**CU**: China Unicom.-**CM**: China Mobile.-**CO**: China Other.-**Equinix**:Equinix.-**Other**: Other abroad.
     * 
     */
    private String lineOperator;
    /**
     * @return The state of LOA. Value:-**Applying**:LOA application.-**Accept**:LOA application passed.-**Available**:LOA is Available.-**Rejected**:LOA application Rejected.-**Completing**: The dedicated line is under construction.-**Complete**: The construction of the dedicated line is completed.-**Deleted**:LOA has been Deleted.
     * 
     */
    private String loaStatus;
    /**
     * @return The payment method of shared dedicated line. Value:-**PayByPhysicalConnectionOwner**: indicates that the owner of the physical line associated with the shared line pays.-**PayByVirtualPhysicalConnectionOwner**: indicates that the owner of the shared line pays.
     * 
     */
    private String orderMode;
    /**
     * @return The ID of the Alibaba Cloud account (primary account) to which the physical connection belongs.
     * 
     */
    private String parentPhysicalConnectionAliUid;
    /**
     * @return The ID of the instance of the physical connection.
     * 
     */
    private String parentPhysicalConnectionId;
    /**
     * @return The geographic location of the local data center.
     * 
     */
    private String peerLocation;
    /**
     * @return The port number of the physical connection device.
     * 
     */
    private String portNumber;
    /**
     * @return Physical connection port type. Value:-**100Base-T**: 100 megabytes port.-**1000Base-T**: Gigabit port.-**1000Base-LX**: Gigabit single mode optical port (10km).-**10GBase-T**: 10 Gigabit port.-**10GBase-LR**: 10 Gigabit single mode optical port (10km).-**40GBase-LR**: 40 megabytes single-mode optical port.-**100GBase-LR**: 100,000 megabytes single-mode optical port.
     * 
     */
    private String portType;
    /**
     * @return The ID of the redundant physical connection.
     * 
     */
    private String redundantPhysicalConnectionId;
    /**
     * @return The resource group id
     * 
     */
    private String resourceGroupId;
    /**
     * @return The bandwidth value of the shared line.Unit: **M** indicates Mbps,**G** indicates Gbps.
     * 
     */
    private String spec;
    /**
     * @return The status of the resource
     * 
     */
    private String status;
    /**
     * @return The ID of the hosted connection
     * 
     */
    private String virtualPhysicalConnectionId;
    /**
     * @return The name of the physical connection.
     * 
     */
    private String virtualPhysicalConnectionName;
    /**
     * @return The business status of the shared line. Value:
     * - **Confirmed**: The shared line has been Confirmed to receive.
     * - **UnConfirmed**: The shared line has not been confirmed to be received.
     * - **Deleted**: The shared line has been Deleted.
     * 
     */
    private String virtualPhysicalConnectionStatus;
    /**
     * @return The VLAN ID of the shared leased line.
     * 
     */
    private Integer vlanId;
    /**
     * @return The ID of the Alibaba Cloud account (primary account) of the owner of the shared line.
     * 
     */
    private String vpconnAliUid;

    private GetVirtualPhysicalConnectionsConnection() {}
    /**
     * @return The ID of the access point of the physical connection.
     * 
     */
    public String accessPointId() {
        return this.accessPointId;
    }
    /**
     * @return The physical location where the physical connection access device is located.
     * 
     */
    public String adLocation() {
        return this.adLocation;
    }
    /**
     * @return The bandwidth of the physical connection. Unit: Mbps.
     * 
     */
    public String bandwidth() {
        return this.bandwidth;
    }
    /**
     * @return The commercial status of the physical line. Value:
     * - **Normal**: activated.
     * - **Financialized**: Arrears locked.
     * - **SecurityLocked**: locked for security reasons.
     * 
     */
    public String businessStatus() {
        return this.businessStatus;
    }
    /**
     * @return The circuit code provided by the operator for the physical connection.
     * 
     */
    public String circuitCode() {
        return this.circuitCode;
    }
    /**
     * @return The creation time of the resource
     * 
     */
    public String createTime() {
        return this.createTime;
    }
    /**
     * @return The description of the physical connection.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return The opening time of the physical connection.
     * 
     */
    public String enabledTime() {
        return this.enabledTime;
    }
    /**
     * @return The expiration time of the shared line.Time is expressed according to ISO8601 standard and UTC time is used. The format is: YYYY-MM-DDThh:mm:ssZ.
     * 
     */
    public String endTime() {
        return this.endTime;
    }
    /**
     * @return The estimated bandwidth value of the shared line. The expected bandwidth value will not take effect until the payment is completed.Unit: **M** indicates Mbps,**G** indicates Gbps.
     * 
     */
    public String expectSpec() {
        return this.expectSpec;
    }
    /**
     * @return The ID of the Virtual Physical Connection.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Operators that provide access to physical lines. Value:-**CT**: China Telecom.-**CU**: China Unicom.-**CM**: China Mobile.-**CO**: China Other.-**Equinix**:Equinix.-**Other**: Other abroad.
     * 
     */
    public String lineOperator() {
        return this.lineOperator;
    }
    /**
     * @return The state of LOA. Value:-**Applying**:LOA application.-**Accept**:LOA application passed.-**Available**:LOA is Available.-**Rejected**:LOA application Rejected.-**Completing**: The dedicated line is under construction.-**Complete**: The construction of the dedicated line is completed.-**Deleted**:LOA has been Deleted.
     * 
     */
    public String loaStatus() {
        return this.loaStatus;
    }
    /**
     * @return The payment method of shared dedicated line. Value:-**PayByPhysicalConnectionOwner**: indicates that the owner of the physical line associated with the shared line pays.-**PayByVirtualPhysicalConnectionOwner**: indicates that the owner of the shared line pays.
     * 
     */
    public String orderMode() {
        return this.orderMode;
    }
    /**
     * @return The ID of the Alibaba Cloud account (primary account) to which the physical connection belongs.
     * 
     */
    public String parentPhysicalConnectionAliUid() {
        return this.parentPhysicalConnectionAliUid;
    }
    /**
     * @return The ID of the instance of the physical connection.
     * 
     */
    public String parentPhysicalConnectionId() {
        return this.parentPhysicalConnectionId;
    }
    /**
     * @return The geographic location of the local data center.
     * 
     */
    public String peerLocation() {
        return this.peerLocation;
    }
    /**
     * @return The port number of the physical connection device.
     * 
     */
    public String portNumber() {
        return this.portNumber;
    }
    /**
     * @return Physical connection port type. Value:-**100Base-T**: 100 megabytes port.-**1000Base-T**: Gigabit port.-**1000Base-LX**: Gigabit single mode optical port (10km).-**10GBase-T**: 10 Gigabit port.-**10GBase-LR**: 10 Gigabit single mode optical port (10km).-**40GBase-LR**: 40 megabytes single-mode optical port.-**100GBase-LR**: 100,000 megabytes single-mode optical port.
     * 
     */
    public String portType() {
        return this.portType;
    }
    /**
     * @return The ID of the redundant physical connection.
     * 
     */
    public String redundantPhysicalConnectionId() {
        return this.redundantPhysicalConnectionId;
    }
    /**
     * @return The resource group id
     * 
     */
    public String resourceGroupId() {
        return this.resourceGroupId;
    }
    /**
     * @return The bandwidth value of the shared line.Unit: **M** indicates Mbps,**G** indicates Gbps.
     * 
     */
    public String spec() {
        return this.spec;
    }
    /**
     * @return The status of the resource
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return The ID of the hosted connection
     * 
     */
    public String virtualPhysicalConnectionId() {
        return this.virtualPhysicalConnectionId;
    }
    /**
     * @return The name of the physical connection.
     * 
     */
    public String virtualPhysicalConnectionName() {
        return this.virtualPhysicalConnectionName;
    }
    /**
     * @return The business status of the shared line. Value:
     * - **Confirmed**: The shared line has been Confirmed to receive.
     * - **UnConfirmed**: The shared line has not been confirmed to be received.
     * - **Deleted**: The shared line has been Deleted.
     * 
     */
    public String virtualPhysicalConnectionStatus() {
        return this.virtualPhysicalConnectionStatus;
    }
    /**
     * @return The VLAN ID of the shared leased line.
     * 
     */
    public Integer vlanId() {
        return this.vlanId;
    }
    /**
     * @return The ID of the Alibaba Cloud account (primary account) of the owner of the shared line.
     * 
     */
    public String vpconnAliUid() {
        return this.vpconnAliUid;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetVirtualPhysicalConnectionsConnection defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String accessPointId;
        private String adLocation;
        private String bandwidth;
        private String businessStatus;
        private String circuitCode;
        private String createTime;
        private String description;
        private String enabledTime;
        private String endTime;
        private String expectSpec;
        private String id;
        private String lineOperator;
        private String loaStatus;
        private String orderMode;
        private String parentPhysicalConnectionAliUid;
        private String parentPhysicalConnectionId;
        private String peerLocation;
        private String portNumber;
        private String portType;
        private String redundantPhysicalConnectionId;
        private String resourceGroupId;
        private String spec;
        private String status;
        private String virtualPhysicalConnectionId;
        private String virtualPhysicalConnectionName;
        private String virtualPhysicalConnectionStatus;
        private Integer vlanId;
        private String vpconnAliUid;
        public Builder() {}
        public Builder(GetVirtualPhysicalConnectionsConnection defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accessPointId = defaults.accessPointId;
    	      this.adLocation = defaults.adLocation;
    	      this.bandwidth = defaults.bandwidth;
    	      this.businessStatus = defaults.businessStatus;
    	      this.circuitCode = defaults.circuitCode;
    	      this.createTime = defaults.createTime;
    	      this.description = defaults.description;
    	      this.enabledTime = defaults.enabledTime;
    	      this.endTime = defaults.endTime;
    	      this.expectSpec = defaults.expectSpec;
    	      this.id = defaults.id;
    	      this.lineOperator = defaults.lineOperator;
    	      this.loaStatus = defaults.loaStatus;
    	      this.orderMode = defaults.orderMode;
    	      this.parentPhysicalConnectionAliUid = defaults.parentPhysicalConnectionAliUid;
    	      this.parentPhysicalConnectionId = defaults.parentPhysicalConnectionId;
    	      this.peerLocation = defaults.peerLocation;
    	      this.portNumber = defaults.portNumber;
    	      this.portType = defaults.portType;
    	      this.redundantPhysicalConnectionId = defaults.redundantPhysicalConnectionId;
    	      this.resourceGroupId = defaults.resourceGroupId;
    	      this.spec = defaults.spec;
    	      this.status = defaults.status;
    	      this.virtualPhysicalConnectionId = defaults.virtualPhysicalConnectionId;
    	      this.virtualPhysicalConnectionName = defaults.virtualPhysicalConnectionName;
    	      this.virtualPhysicalConnectionStatus = defaults.virtualPhysicalConnectionStatus;
    	      this.vlanId = defaults.vlanId;
    	      this.vpconnAliUid = defaults.vpconnAliUid;
        }

        @CustomType.Setter
        public Builder accessPointId(String accessPointId) {
            if (accessPointId == null) {
              throw new MissingRequiredPropertyException("GetVirtualPhysicalConnectionsConnection", "accessPointId");
            }
            this.accessPointId = accessPointId;
            return this;
        }
        @CustomType.Setter
        public Builder adLocation(String adLocation) {
            if (adLocation == null) {
              throw new MissingRequiredPropertyException("GetVirtualPhysicalConnectionsConnection", "adLocation");
            }
            this.adLocation = adLocation;
            return this;
        }
        @CustomType.Setter
        public Builder bandwidth(String bandwidth) {
            if (bandwidth == null) {
              throw new MissingRequiredPropertyException("GetVirtualPhysicalConnectionsConnection", "bandwidth");
            }
            this.bandwidth = bandwidth;
            return this;
        }
        @CustomType.Setter
        public Builder businessStatus(String businessStatus) {
            if (businessStatus == null) {
              throw new MissingRequiredPropertyException("GetVirtualPhysicalConnectionsConnection", "businessStatus");
            }
            this.businessStatus = businessStatus;
            return this;
        }
        @CustomType.Setter
        public Builder circuitCode(String circuitCode) {
            if (circuitCode == null) {
              throw new MissingRequiredPropertyException("GetVirtualPhysicalConnectionsConnection", "circuitCode");
            }
            this.circuitCode = circuitCode;
            return this;
        }
        @CustomType.Setter
        public Builder createTime(String createTime) {
            if (createTime == null) {
              throw new MissingRequiredPropertyException("GetVirtualPhysicalConnectionsConnection", "createTime");
            }
            this.createTime = createTime;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetVirtualPhysicalConnectionsConnection", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder enabledTime(String enabledTime) {
            if (enabledTime == null) {
              throw new MissingRequiredPropertyException("GetVirtualPhysicalConnectionsConnection", "enabledTime");
            }
            this.enabledTime = enabledTime;
            return this;
        }
        @CustomType.Setter
        public Builder endTime(String endTime) {
            if (endTime == null) {
              throw new MissingRequiredPropertyException("GetVirtualPhysicalConnectionsConnection", "endTime");
            }
            this.endTime = endTime;
            return this;
        }
        @CustomType.Setter
        public Builder expectSpec(String expectSpec) {
            if (expectSpec == null) {
              throw new MissingRequiredPropertyException("GetVirtualPhysicalConnectionsConnection", "expectSpec");
            }
            this.expectSpec = expectSpec;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetVirtualPhysicalConnectionsConnection", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder lineOperator(String lineOperator) {
            if (lineOperator == null) {
              throw new MissingRequiredPropertyException("GetVirtualPhysicalConnectionsConnection", "lineOperator");
            }
            this.lineOperator = lineOperator;
            return this;
        }
        @CustomType.Setter
        public Builder loaStatus(String loaStatus) {
            if (loaStatus == null) {
              throw new MissingRequiredPropertyException("GetVirtualPhysicalConnectionsConnection", "loaStatus");
            }
            this.loaStatus = loaStatus;
            return this;
        }
        @CustomType.Setter
        public Builder orderMode(String orderMode) {
            if (orderMode == null) {
              throw new MissingRequiredPropertyException("GetVirtualPhysicalConnectionsConnection", "orderMode");
            }
            this.orderMode = orderMode;
            return this;
        }
        @CustomType.Setter
        public Builder parentPhysicalConnectionAliUid(String parentPhysicalConnectionAliUid) {
            if (parentPhysicalConnectionAliUid == null) {
              throw new MissingRequiredPropertyException("GetVirtualPhysicalConnectionsConnection", "parentPhysicalConnectionAliUid");
            }
            this.parentPhysicalConnectionAliUid = parentPhysicalConnectionAliUid;
            return this;
        }
        @CustomType.Setter
        public Builder parentPhysicalConnectionId(String parentPhysicalConnectionId) {
            if (parentPhysicalConnectionId == null) {
              throw new MissingRequiredPropertyException("GetVirtualPhysicalConnectionsConnection", "parentPhysicalConnectionId");
            }
            this.parentPhysicalConnectionId = parentPhysicalConnectionId;
            return this;
        }
        @CustomType.Setter
        public Builder peerLocation(String peerLocation) {
            if (peerLocation == null) {
              throw new MissingRequiredPropertyException("GetVirtualPhysicalConnectionsConnection", "peerLocation");
            }
            this.peerLocation = peerLocation;
            return this;
        }
        @CustomType.Setter
        public Builder portNumber(String portNumber) {
            if (portNumber == null) {
              throw new MissingRequiredPropertyException("GetVirtualPhysicalConnectionsConnection", "portNumber");
            }
            this.portNumber = portNumber;
            return this;
        }
        @CustomType.Setter
        public Builder portType(String portType) {
            if (portType == null) {
              throw new MissingRequiredPropertyException("GetVirtualPhysicalConnectionsConnection", "portType");
            }
            this.portType = portType;
            return this;
        }
        @CustomType.Setter
        public Builder redundantPhysicalConnectionId(String redundantPhysicalConnectionId) {
            if (redundantPhysicalConnectionId == null) {
              throw new MissingRequiredPropertyException("GetVirtualPhysicalConnectionsConnection", "redundantPhysicalConnectionId");
            }
            this.redundantPhysicalConnectionId = redundantPhysicalConnectionId;
            return this;
        }
        @CustomType.Setter
        public Builder resourceGroupId(String resourceGroupId) {
            if (resourceGroupId == null) {
              throw new MissingRequiredPropertyException("GetVirtualPhysicalConnectionsConnection", "resourceGroupId");
            }
            this.resourceGroupId = resourceGroupId;
            return this;
        }
        @CustomType.Setter
        public Builder spec(String spec) {
            if (spec == null) {
              throw new MissingRequiredPropertyException("GetVirtualPhysicalConnectionsConnection", "spec");
            }
            this.spec = spec;
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            if (status == null) {
              throw new MissingRequiredPropertyException("GetVirtualPhysicalConnectionsConnection", "status");
            }
            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder virtualPhysicalConnectionId(String virtualPhysicalConnectionId) {
            if (virtualPhysicalConnectionId == null) {
              throw new MissingRequiredPropertyException("GetVirtualPhysicalConnectionsConnection", "virtualPhysicalConnectionId");
            }
            this.virtualPhysicalConnectionId = virtualPhysicalConnectionId;
            return this;
        }
        @CustomType.Setter
        public Builder virtualPhysicalConnectionName(String virtualPhysicalConnectionName) {
            if (virtualPhysicalConnectionName == null) {
              throw new MissingRequiredPropertyException("GetVirtualPhysicalConnectionsConnection", "virtualPhysicalConnectionName");
            }
            this.virtualPhysicalConnectionName = virtualPhysicalConnectionName;
            return this;
        }
        @CustomType.Setter
        public Builder virtualPhysicalConnectionStatus(String virtualPhysicalConnectionStatus) {
            if (virtualPhysicalConnectionStatus == null) {
              throw new MissingRequiredPropertyException("GetVirtualPhysicalConnectionsConnection", "virtualPhysicalConnectionStatus");
            }
            this.virtualPhysicalConnectionStatus = virtualPhysicalConnectionStatus;
            return this;
        }
        @CustomType.Setter
        public Builder vlanId(Integer vlanId) {
            if (vlanId == null) {
              throw new MissingRequiredPropertyException("GetVirtualPhysicalConnectionsConnection", "vlanId");
            }
            this.vlanId = vlanId;
            return this;
        }
        @CustomType.Setter
        public Builder vpconnAliUid(String vpconnAliUid) {
            if (vpconnAliUid == null) {
              throw new MissingRequiredPropertyException("GetVirtualPhysicalConnectionsConnection", "vpconnAliUid");
            }
            this.vpconnAliUid = vpconnAliUid;
            return this;
        }
        public GetVirtualPhysicalConnectionsConnection build() {
            final var _resultValue = new GetVirtualPhysicalConnectionsConnection();
            _resultValue.accessPointId = accessPointId;
            _resultValue.adLocation = adLocation;
            _resultValue.bandwidth = bandwidth;
            _resultValue.businessStatus = businessStatus;
            _resultValue.circuitCode = circuitCode;
            _resultValue.createTime = createTime;
            _resultValue.description = description;
            _resultValue.enabledTime = enabledTime;
            _resultValue.endTime = endTime;
            _resultValue.expectSpec = expectSpec;
            _resultValue.id = id;
            _resultValue.lineOperator = lineOperator;
            _resultValue.loaStatus = loaStatus;
            _resultValue.orderMode = orderMode;
            _resultValue.parentPhysicalConnectionAliUid = parentPhysicalConnectionAliUid;
            _resultValue.parentPhysicalConnectionId = parentPhysicalConnectionId;
            _resultValue.peerLocation = peerLocation;
            _resultValue.portNumber = portNumber;
            _resultValue.portType = portType;
            _resultValue.redundantPhysicalConnectionId = redundantPhysicalConnectionId;
            _resultValue.resourceGroupId = resourceGroupId;
            _resultValue.spec = spec;
            _resultValue.status = status;
            _resultValue.virtualPhysicalConnectionId = virtualPhysicalConnectionId;
            _resultValue.virtualPhysicalConnectionName = virtualPhysicalConnectionName;
            _resultValue.virtualPhysicalConnectionStatus = virtualPhysicalConnectionStatus;
            _resultValue.vlanId = vlanId;
            _resultValue.vpconnAliUid = vpconnAliUid;
            return _resultValue;
        }
    }
}
