// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.schedulerx;

import com.pulumi.alicloud.schedulerx.inputs.JobJobMonitorInfoArgs;
import com.pulumi.alicloud.schedulerx.inputs.JobMapTaskXattrsArgs;
import com.pulumi.alicloud.schedulerx.inputs.JobTimeConfigArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class JobArgs extends com.pulumi.resources.ResourceArgs {

    public static final JobArgs Empty = new JobArgs();

    /**
     * Error retry interval, unit s, default value 30.
     * 
     */
    @Import(name="attemptInterval")
    private @Nullable Output<Integer> attemptInterval;

    /**
     * @return Error retry interval, unit s, default value 30.
     * 
     */
    public Optional<Output<Integer>> attemptInterval() {
        return Optional.ofNullable(this.attemptInterval);
    }

    /**
     * Full path of the task interface class.
     * 
     * This field is available only when your task is of the Java task type.
     * 
     */
    @Import(name="className")
    private @Nullable Output<String> className;

    /**
     * @return Full path of the task interface class.
     * 
     * This field is available only when your task is of the Java task type.
     * 
     */
    public Optional<Output<String>> className() {
        return Optional.ofNullable(this.className);
    }

    /**
     * The script code of the python, shell, and go task types.
     * 
     */
    @Import(name="content")
    private @Nullable Output<String> content;

    /**
     * @return The script code of the python, shell, and go task types.
     * 
     */
    public Optional<Output<String>> content() {
        return Optional.ofNullable(this.content);
    }

    /**
     * Task description.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Task description.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Task execution mode, the possible results are as follows:
     * 
     */
    @Import(name="executeMode", required=true)
    private Output<String> executeMode;

    /**
     * @return Task execution mode, the possible results are as follows:
     * 
     */
    public Output<String> executeMode() {
        return this.executeMode;
    }

    /**
     * Number of consecutive failed alarms
     * 
     */
    @Import(name="failTimes")
    private @Nullable Output<Integer> failTimes;

    /**
     * @return Number of consecutive failed alarms
     * 
     */
    public Optional<Output<Integer>> failTimes() {
        return Optional.ofNullable(this.failTimes);
    }

    /**
     * The application ID, which is obtained from the **application management** page of the console.
     * 
     */
    @Import(name="groupId", required=true)
    private Output<String> groupId;

    /**
     * @return The application ID, which is obtained from the **application management** page of the console.
     * 
     */
    public Output<String> groupId() {
        return this.groupId;
    }

    /**
     * Task monitoring information See `jobMonitorInfo` below.
     * 
     */
    @Import(name="jobMonitorInfo")
    private @Nullable Output<JobJobMonitorInfoArgs> jobMonitorInfo;

    /**
     * @return Task monitoring information See `jobMonitorInfo` below.
     * 
     */
    public Optional<Output<JobJobMonitorInfoArgs>> jobMonitorInfo() {
        return Optional.ofNullable(this.jobMonitorInfo);
    }

    /**
     * JobName
     * 
     */
    @Import(name="jobName", required=true)
    private Output<String> jobName;

    /**
     * @return JobName
     * 
     */
    public Output<String> jobName() {
        return this.jobName;
    }

    /**
     * Job Type
     * 
     */
    @Import(name="jobType", required=true)
    private Output<String> jobType;

    /**
     * @return Job Type
     * 
     */
    public Output<String> jobType() {
        return this.jobType;
    }

    /**
     * Advanced configuration, limited to parallel computing, memory grid, and grid computing. See `mapTaskXattrs` below.
     * 
     */
    @Import(name="mapTaskXattrs")
    private @Nullable Output<JobMapTaskXattrsArgs> mapTaskXattrs;

    /**
     * @return Advanced configuration, limited to parallel computing, memory grid, and grid computing. See `mapTaskXattrs` below.
     * 
     */
    public Optional<Output<JobMapTaskXattrsArgs>> mapTaskXattrs() {
        return Optional.ofNullable(this.mapTaskXattrs);
    }

    /**
     * The maximum number of error retries, which is set based on business requirements. The default value is 0.
     * 
     */
    @Import(name="maxAttempt")
    private @Nullable Output<Integer> maxAttempt;

    /**
     * @return The maximum number of error retries, which is set based on business requirements. The default value is 0.
     * 
     */
    public Optional<Output<Integer>> maxAttempt() {
        return Optional.ofNullable(this.maxAttempt);
    }

    /**
     * The maximum number of instances running at the same time. The default value is 1, that is, the last trigger is not completed, and the next trigger will not be performed even at the running time.
     * 
     */
    @Import(name="maxConcurrency")
    private @Nullable Output<String> maxConcurrency;

    /**
     * @return The maximum number of instances running at the same time. The default value is 1, that is, the last trigger is not completed, and the next trigger will not be performed even at the running time.
     * 
     */
    public Optional<Output<String>> maxConcurrency() {
        return Optional.ofNullable(this.maxConcurrency);
    }

    /**
     * Namespace, which is obtained on the `Namespace` page of the console.
     * 
     */
    @Import(name="namespace", required=true)
    private Output<String> namespace;

    /**
     * @return Namespace, which is obtained on the `Namespace` page of the console.
     * 
     */
    public Output<String> namespace() {
        return this.namespace;
    }

    /**
     * Special third parties are required.
     * 
     */
    @Import(name="namespaceSource")
    private @Nullable Output<String> namespaceSource;

    /**
     * @return Special third parties are required.
     * 
     */
    public Optional<Output<String>> namespaceSource() {
        return Optional.ofNullable(this.namespaceSource);
    }

    /**
     * User-defined parameters, which can be obtained at runtime.
     * 
     */
    @Import(name="parameters")
    private @Nullable Output<String> parameters;

    /**
     * @return User-defined parameters, which can be obtained at runtime.
     * 
     */
    public Optional<Output<String>> parameters() {
        return Optional.ofNullable(this.parameters);
    }

    /**
     * Task status. The values are as follows:
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return Task status. The values are as follows:
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * Success Notification Switch
     * 
     */
    @Import(name="successNoticeEnable")
    private @Nullable Output<Boolean> successNoticeEnable;

    /**
     * @return Success Notification Switch
     * 
     */
    public Optional<Output<Boolean>> successNoticeEnable() {
        return Optional.ofNullable(this.successNoticeEnable);
    }

    /**
     * Advanced configuration of parallel grid tasks, push model or pull model
     * 
     */
    @Import(name="taskDispatchMode")
    private @Nullable Output<String> taskDispatchMode;

    /**
     * @return Advanced configuration of parallel grid tasks, push model or pull model
     * 
     */
    public Optional<Output<String>> taskDispatchMode() {
        return Optional.ofNullable(this.taskDispatchMode);
    }

    /**
     * K8s task type custom task template
     * 
     */
    @Import(name="template")
    private @Nullable Output<String> template;

    /**
     * @return K8s task type custom task template
     * 
     */
    public Optional<Output<String>> template() {
        return Optional.ofNullable(this.template);
    }

    /**
     * Time configuration information See `timeConfig` below.
     * 
     */
    @Import(name="timeConfig", required=true)
    private Output<JobTimeConfigArgs> timeConfig;

    /**
     * @return Time configuration information See `timeConfig` below.
     * 
     */
    public Output<JobTimeConfigArgs> timeConfig() {
        return this.timeConfig;
    }

    /**
     * Time Zone
     * 
     */
    @Import(name="timezone")
    private @Nullable Output<String> timezone;

    /**
     * @return Time Zone
     * 
     */
    public Optional<Output<String>> timezone() {
        return Optional.ofNullable(this.timezone);
    }

    /**
     * Task Extension Field
     * 
     */
    @Import(name="xAttrs")
    private @Nullable Output<String> xAttrs;

    /**
     * @return Task Extension Field
     * 
     */
    public Optional<Output<String>> xAttrs() {
        return Optional.ofNullable(this.xAttrs);
    }

    private JobArgs() {}

    private JobArgs(JobArgs $) {
        this.attemptInterval = $.attemptInterval;
        this.className = $.className;
        this.content = $.content;
        this.description = $.description;
        this.executeMode = $.executeMode;
        this.failTimes = $.failTimes;
        this.groupId = $.groupId;
        this.jobMonitorInfo = $.jobMonitorInfo;
        this.jobName = $.jobName;
        this.jobType = $.jobType;
        this.mapTaskXattrs = $.mapTaskXattrs;
        this.maxAttempt = $.maxAttempt;
        this.maxConcurrency = $.maxConcurrency;
        this.namespace = $.namespace;
        this.namespaceSource = $.namespaceSource;
        this.parameters = $.parameters;
        this.status = $.status;
        this.successNoticeEnable = $.successNoticeEnable;
        this.taskDispatchMode = $.taskDispatchMode;
        this.template = $.template;
        this.timeConfig = $.timeConfig;
        this.timezone = $.timezone;
        this.xAttrs = $.xAttrs;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(JobArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private JobArgs $;

        public Builder() {
            $ = new JobArgs();
        }

        public Builder(JobArgs defaults) {
            $ = new JobArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param attemptInterval Error retry interval, unit s, default value 30.
         * 
         * @return builder
         * 
         */
        public Builder attemptInterval(@Nullable Output<Integer> attemptInterval) {
            $.attemptInterval = attemptInterval;
            return this;
        }

        /**
         * @param attemptInterval Error retry interval, unit s, default value 30.
         * 
         * @return builder
         * 
         */
        public Builder attemptInterval(Integer attemptInterval) {
            return attemptInterval(Output.of(attemptInterval));
        }

        /**
         * @param className Full path of the task interface class.
         * 
         * This field is available only when your task is of the Java task type.
         * 
         * @return builder
         * 
         */
        public Builder className(@Nullable Output<String> className) {
            $.className = className;
            return this;
        }

        /**
         * @param className Full path of the task interface class.
         * 
         * This field is available only when your task is of the Java task type.
         * 
         * @return builder
         * 
         */
        public Builder className(String className) {
            return className(Output.of(className));
        }

        /**
         * @param content The script code of the python, shell, and go task types.
         * 
         * @return builder
         * 
         */
        public Builder content(@Nullable Output<String> content) {
            $.content = content;
            return this;
        }

        /**
         * @param content The script code of the python, shell, and go task types.
         * 
         * @return builder
         * 
         */
        public Builder content(String content) {
            return content(Output.of(content));
        }

        /**
         * @param description Task description.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Task description.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param executeMode Task execution mode, the possible results are as follows:
         * 
         * @return builder
         * 
         */
        public Builder executeMode(Output<String> executeMode) {
            $.executeMode = executeMode;
            return this;
        }

        /**
         * @param executeMode Task execution mode, the possible results are as follows:
         * 
         * @return builder
         * 
         */
        public Builder executeMode(String executeMode) {
            return executeMode(Output.of(executeMode));
        }

        /**
         * @param failTimes Number of consecutive failed alarms
         * 
         * @return builder
         * 
         */
        public Builder failTimes(@Nullable Output<Integer> failTimes) {
            $.failTimes = failTimes;
            return this;
        }

        /**
         * @param failTimes Number of consecutive failed alarms
         * 
         * @return builder
         * 
         */
        public Builder failTimes(Integer failTimes) {
            return failTimes(Output.of(failTimes));
        }

        /**
         * @param groupId The application ID, which is obtained from the **application management** page of the console.
         * 
         * @return builder
         * 
         */
        public Builder groupId(Output<String> groupId) {
            $.groupId = groupId;
            return this;
        }

        /**
         * @param groupId The application ID, which is obtained from the **application management** page of the console.
         * 
         * @return builder
         * 
         */
        public Builder groupId(String groupId) {
            return groupId(Output.of(groupId));
        }

        /**
         * @param jobMonitorInfo Task monitoring information See `jobMonitorInfo` below.
         * 
         * @return builder
         * 
         */
        public Builder jobMonitorInfo(@Nullable Output<JobJobMonitorInfoArgs> jobMonitorInfo) {
            $.jobMonitorInfo = jobMonitorInfo;
            return this;
        }

        /**
         * @param jobMonitorInfo Task monitoring information See `jobMonitorInfo` below.
         * 
         * @return builder
         * 
         */
        public Builder jobMonitorInfo(JobJobMonitorInfoArgs jobMonitorInfo) {
            return jobMonitorInfo(Output.of(jobMonitorInfo));
        }

        /**
         * @param jobName JobName
         * 
         * @return builder
         * 
         */
        public Builder jobName(Output<String> jobName) {
            $.jobName = jobName;
            return this;
        }

        /**
         * @param jobName JobName
         * 
         * @return builder
         * 
         */
        public Builder jobName(String jobName) {
            return jobName(Output.of(jobName));
        }

        /**
         * @param jobType Job Type
         * 
         * @return builder
         * 
         */
        public Builder jobType(Output<String> jobType) {
            $.jobType = jobType;
            return this;
        }

        /**
         * @param jobType Job Type
         * 
         * @return builder
         * 
         */
        public Builder jobType(String jobType) {
            return jobType(Output.of(jobType));
        }

        /**
         * @param mapTaskXattrs Advanced configuration, limited to parallel computing, memory grid, and grid computing. See `mapTaskXattrs` below.
         * 
         * @return builder
         * 
         */
        public Builder mapTaskXattrs(@Nullable Output<JobMapTaskXattrsArgs> mapTaskXattrs) {
            $.mapTaskXattrs = mapTaskXattrs;
            return this;
        }

        /**
         * @param mapTaskXattrs Advanced configuration, limited to parallel computing, memory grid, and grid computing. See `mapTaskXattrs` below.
         * 
         * @return builder
         * 
         */
        public Builder mapTaskXattrs(JobMapTaskXattrsArgs mapTaskXattrs) {
            return mapTaskXattrs(Output.of(mapTaskXattrs));
        }

        /**
         * @param maxAttempt The maximum number of error retries, which is set based on business requirements. The default value is 0.
         * 
         * @return builder
         * 
         */
        public Builder maxAttempt(@Nullable Output<Integer> maxAttempt) {
            $.maxAttempt = maxAttempt;
            return this;
        }

        /**
         * @param maxAttempt The maximum number of error retries, which is set based on business requirements. The default value is 0.
         * 
         * @return builder
         * 
         */
        public Builder maxAttempt(Integer maxAttempt) {
            return maxAttempt(Output.of(maxAttempt));
        }

        /**
         * @param maxConcurrency The maximum number of instances running at the same time. The default value is 1, that is, the last trigger is not completed, and the next trigger will not be performed even at the running time.
         * 
         * @return builder
         * 
         */
        public Builder maxConcurrency(@Nullable Output<String> maxConcurrency) {
            $.maxConcurrency = maxConcurrency;
            return this;
        }

        /**
         * @param maxConcurrency The maximum number of instances running at the same time. The default value is 1, that is, the last trigger is not completed, and the next trigger will not be performed even at the running time.
         * 
         * @return builder
         * 
         */
        public Builder maxConcurrency(String maxConcurrency) {
            return maxConcurrency(Output.of(maxConcurrency));
        }

        /**
         * @param namespace Namespace, which is obtained on the `Namespace` page of the console.
         * 
         * @return builder
         * 
         */
        public Builder namespace(Output<String> namespace) {
            $.namespace = namespace;
            return this;
        }

        /**
         * @param namespace Namespace, which is obtained on the `Namespace` page of the console.
         * 
         * @return builder
         * 
         */
        public Builder namespace(String namespace) {
            return namespace(Output.of(namespace));
        }

        /**
         * @param namespaceSource Special third parties are required.
         * 
         * @return builder
         * 
         */
        public Builder namespaceSource(@Nullable Output<String> namespaceSource) {
            $.namespaceSource = namespaceSource;
            return this;
        }

        /**
         * @param namespaceSource Special third parties are required.
         * 
         * @return builder
         * 
         */
        public Builder namespaceSource(String namespaceSource) {
            return namespaceSource(Output.of(namespaceSource));
        }

        /**
         * @param parameters User-defined parameters, which can be obtained at runtime.
         * 
         * @return builder
         * 
         */
        public Builder parameters(@Nullable Output<String> parameters) {
            $.parameters = parameters;
            return this;
        }

        /**
         * @param parameters User-defined parameters, which can be obtained at runtime.
         * 
         * @return builder
         * 
         */
        public Builder parameters(String parameters) {
            return parameters(Output.of(parameters));
        }

        /**
         * @param status Task status. The values are as follows:
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status Task status. The values are as follows:
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param successNoticeEnable Success Notification Switch
         * 
         * @return builder
         * 
         */
        public Builder successNoticeEnable(@Nullable Output<Boolean> successNoticeEnable) {
            $.successNoticeEnable = successNoticeEnable;
            return this;
        }

        /**
         * @param successNoticeEnable Success Notification Switch
         * 
         * @return builder
         * 
         */
        public Builder successNoticeEnable(Boolean successNoticeEnable) {
            return successNoticeEnable(Output.of(successNoticeEnable));
        }

        /**
         * @param taskDispatchMode Advanced configuration of parallel grid tasks, push model or pull model
         * 
         * @return builder
         * 
         */
        public Builder taskDispatchMode(@Nullable Output<String> taskDispatchMode) {
            $.taskDispatchMode = taskDispatchMode;
            return this;
        }

        /**
         * @param taskDispatchMode Advanced configuration of parallel grid tasks, push model or pull model
         * 
         * @return builder
         * 
         */
        public Builder taskDispatchMode(String taskDispatchMode) {
            return taskDispatchMode(Output.of(taskDispatchMode));
        }

        /**
         * @param template K8s task type custom task template
         * 
         * @return builder
         * 
         */
        public Builder template(@Nullable Output<String> template) {
            $.template = template;
            return this;
        }

        /**
         * @param template K8s task type custom task template
         * 
         * @return builder
         * 
         */
        public Builder template(String template) {
            return template(Output.of(template));
        }

        /**
         * @param timeConfig Time configuration information See `timeConfig` below.
         * 
         * @return builder
         * 
         */
        public Builder timeConfig(Output<JobTimeConfigArgs> timeConfig) {
            $.timeConfig = timeConfig;
            return this;
        }

        /**
         * @param timeConfig Time configuration information See `timeConfig` below.
         * 
         * @return builder
         * 
         */
        public Builder timeConfig(JobTimeConfigArgs timeConfig) {
            return timeConfig(Output.of(timeConfig));
        }

        /**
         * @param timezone Time Zone
         * 
         * @return builder
         * 
         */
        public Builder timezone(@Nullable Output<String> timezone) {
            $.timezone = timezone;
            return this;
        }

        /**
         * @param timezone Time Zone
         * 
         * @return builder
         * 
         */
        public Builder timezone(String timezone) {
            return timezone(Output.of(timezone));
        }

        /**
         * @param xAttrs Task Extension Field
         * 
         * @return builder
         * 
         */
        public Builder xAttrs(@Nullable Output<String> xAttrs) {
            $.xAttrs = xAttrs;
            return this;
        }

        /**
         * @param xAttrs Task Extension Field
         * 
         * @return builder
         * 
         */
        public Builder xAttrs(String xAttrs) {
            return xAttrs(Output.of(xAttrs));
        }

        public JobArgs build() {
            if ($.executeMode == null) {
                throw new MissingRequiredPropertyException("JobArgs", "executeMode");
            }
            if ($.groupId == null) {
                throw new MissingRequiredPropertyException("JobArgs", "groupId");
            }
            if ($.jobName == null) {
                throw new MissingRequiredPropertyException("JobArgs", "jobName");
            }
            if ($.jobType == null) {
                throw new MissingRequiredPropertyException("JobArgs", "jobType");
            }
            if ($.namespace == null) {
                throw new MissingRequiredPropertyException("JobArgs", "namespace");
            }
            if ($.timeConfig == null) {
                throw new MissingRequiredPropertyException("JobArgs", "timeConfig");
            }
            return $;
        }
    }

}
