// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.dcdn.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;


public final class DomainConfigFunctionArgArgs extends com.pulumi.resources.ResourceArgs {

    public static final DomainConfigFunctionArgArgs Empty = new DomainConfigFunctionArgArgs();

    /**
     * The name of arg.
     * 
     */
    @Import(name="argName", required=true)
    private Output<String> argName;

    /**
     * @return The name of arg.
     * 
     */
    public Output<String> argName() {
        return this.argName;
    }

    /**
     * The value of arg.
     * 
     */
    @Import(name="argValue", required=true)
    private Output<String> argValue;

    /**
     * @return The value of arg.
     * 
     */
    public Output<String> argValue() {
        return this.argValue;
    }

    private DomainConfigFunctionArgArgs() {}

    private DomainConfigFunctionArgArgs(DomainConfigFunctionArgArgs $) {
        this.argName = $.argName;
        this.argValue = $.argValue;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DomainConfigFunctionArgArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DomainConfigFunctionArgArgs $;

        public Builder() {
            $ = new DomainConfigFunctionArgArgs();
        }

        public Builder(DomainConfigFunctionArgArgs defaults) {
            $ = new DomainConfigFunctionArgArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param argName The name of arg.
         * 
         * @return builder
         * 
         */
        public Builder argName(Output<String> argName) {
            $.argName = argName;
            return this;
        }

        /**
         * @param argName The name of arg.
         * 
         * @return builder
         * 
         */
        public Builder argName(String argName) {
            return argName(Output.of(argName));
        }

        /**
         * @param argValue The value of arg.
         * 
         * @return builder
         * 
         */
        public Builder argValue(Output<String> argValue) {
            $.argValue = argValue;
            return this;
        }

        /**
         * @param argValue The value of arg.
         * 
         * @return builder
         * 
         */
        public Builder argValue(String argValue) {
            return argValue(Output.of(argValue));
        }

        public DomainConfigFunctionArgArgs build() {
            if ($.argName == null) {
                throw new MissingRequiredPropertyException("DomainConfigFunctionArgArgs", "argName");
            }
            if ($.argValue == null) {
                throw new MissingRequiredPropertyException("DomainConfigFunctionArgArgs", "argValue");
            }
            return $;
        }
    }

}
