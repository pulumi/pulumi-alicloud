// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.cdn;

import com.pulumi.alicloud.cdn.inputs.DomainNewCertificateConfigArgs;
import com.pulumi.alicloud.cdn.inputs.DomainNewSourceArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DomainNewArgs extends com.pulumi.resources.ResourceArgs {

    public static final DomainNewArgs Empty = new DomainNewArgs();

    /**
     * Cdn type of the accelerated domain. Valid values are `web`, `download`, `video`.
     * 
     */
    @Import(name="cdnType", required=true)
    private Output<String> cdnType;

    /**
     * @return Cdn type of the accelerated domain. Valid values are `web`, `download`, `video`.
     * 
     */
    public Output<String> cdnType() {
        return this.cdnType;
    }

    /**
     * Certificate configuration See `certificate_config` below.
     * 
     */
    @Import(name="certificateConfig")
    private @Nullable Output<DomainNewCertificateConfigArgs> certificateConfig;

    /**
     * @return Certificate configuration See `certificate_config` below.
     * 
     */
    public Optional<Output<DomainNewCertificateConfigArgs>> certificateConfig() {
        return Optional.ofNullable(this.certificateConfig);
    }

    /**
     * Health test URL.
     * 
     */
    @Import(name="checkUrl")
    private @Nullable Output<String> checkUrl;

    /**
     * @return Health test URL.
     * 
     */
    public Optional<Output<String>> checkUrl() {
        return Optional.ofNullable(this.checkUrl);
    }

    /**
     * Name of the accelerated domain. This name without suffix can have a string of 1 to 63 characters, must contain only alphanumeric characters or &#34;-&#34;, and must not begin or end with &#34;-&#34;, and &#34;-&#34; must not in the 3th and 4th character positions at the same time. Suffix `.sh` and `.tel` are not supported.
     * 
     */
    @Import(name="domainName", required=true)
    private Output<String> domainName;

    /**
     * @return Name of the accelerated domain. This name without suffix can have a string of 1 to 63 characters, must contain only alphanumeric characters or &#34;-&#34;, and must not begin or end with &#34;-&#34;, and &#34;-&#34; must not in the 3th and 4th character positions at the same time. Suffix `.sh` and `.tel` are not supported.
     * 
     */
    public Output<String> domainName() {
        return this.domainName;
    }

    /**
     * Whether to issue a certificate in grayscale. Value: staging: issued certificate in grayscale. Not passing or passing any other value is a formal certificate.
     * 
     */
    @Import(name="env")
    private @Nullable Output<String> env;

    /**
     * @return Whether to issue a certificate in grayscale. Value: staging: issued certificate in grayscale. Not passing or passing any other value is a formal certificate.
     * 
     */
    public Optional<Output<String>> env() {
        return Optional.ofNullable(this.env);
    }

    /**
     * The ID of the resource group.
     * 
     */
    @Import(name="resourceGroupId")
    private @Nullable Output<String> resourceGroupId;

    /**
     * @return The ID of the resource group.
     * 
     */
    public Optional<Output<String>> resourceGroupId() {
        return Optional.ofNullable(this.resourceGroupId);
    }

    /**
     * Scope of the accelerated domain. Valid values are `domestic`, `overseas`, `global`. Default value is `domestic`. This parameter&#39;s setting is valid Only for the international users and domestic L3 and above users. Value:
     * 
     */
    @Import(name="scope")
    private @Nullable Output<String> scope;

    /**
     * @return Scope of the accelerated domain. Valid values are `domestic`, `overseas`, `global`. Default value is `domestic`. This parameter&#39;s setting is valid Only for the international users and domestic L3 and above users. Value:
     * 
     */
    public Optional<Output<String>> scope() {
        return Optional.ofNullable(this.scope);
    }

    /**
     * The source address list of the accelerated domain. Defaults to null. See `sources` below.
     * 
     */
    @Import(name="sources", required=true)
    private Output<List<DomainNewSourceArgs>> sources;

    /**
     * @return The source address list of the accelerated domain. Defaults to null. See `sources` below.
     * 
     */
    public Output<List<DomainNewSourceArgs>> sources() {
        return this.sources;
    }

    /**
     * The status of the resource, valid values: `online`, `offline`.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return The status of the resource, valid values: `online`, `offline`.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * The tag of the resource
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return The tag of the resource
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private DomainNewArgs() {}

    private DomainNewArgs(DomainNewArgs $) {
        this.cdnType = $.cdnType;
        this.certificateConfig = $.certificateConfig;
        this.checkUrl = $.checkUrl;
        this.domainName = $.domainName;
        this.env = $.env;
        this.resourceGroupId = $.resourceGroupId;
        this.scope = $.scope;
        this.sources = $.sources;
        this.status = $.status;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DomainNewArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DomainNewArgs $;

        public Builder() {
            $ = new DomainNewArgs();
        }

        public Builder(DomainNewArgs defaults) {
            $ = new DomainNewArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param cdnType Cdn type of the accelerated domain. Valid values are `web`, `download`, `video`.
         * 
         * @return builder
         * 
         */
        public Builder cdnType(Output<String> cdnType) {
            $.cdnType = cdnType;
            return this;
        }

        /**
         * @param cdnType Cdn type of the accelerated domain. Valid values are `web`, `download`, `video`.
         * 
         * @return builder
         * 
         */
        public Builder cdnType(String cdnType) {
            return cdnType(Output.of(cdnType));
        }

        /**
         * @param certificateConfig Certificate configuration See `certificate_config` below.
         * 
         * @return builder
         * 
         */
        public Builder certificateConfig(@Nullable Output<DomainNewCertificateConfigArgs> certificateConfig) {
            $.certificateConfig = certificateConfig;
            return this;
        }

        /**
         * @param certificateConfig Certificate configuration See `certificate_config` below.
         * 
         * @return builder
         * 
         */
        public Builder certificateConfig(DomainNewCertificateConfigArgs certificateConfig) {
            return certificateConfig(Output.of(certificateConfig));
        }

        /**
         * @param checkUrl Health test URL.
         * 
         * @return builder
         * 
         */
        public Builder checkUrl(@Nullable Output<String> checkUrl) {
            $.checkUrl = checkUrl;
            return this;
        }

        /**
         * @param checkUrl Health test URL.
         * 
         * @return builder
         * 
         */
        public Builder checkUrl(String checkUrl) {
            return checkUrl(Output.of(checkUrl));
        }

        /**
         * @param domainName Name of the accelerated domain. This name without suffix can have a string of 1 to 63 characters, must contain only alphanumeric characters or &#34;-&#34;, and must not begin or end with &#34;-&#34;, and &#34;-&#34; must not in the 3th and 4th character positions at the same time. Suffix `.sh` and `.tel` are not supported.
         * 
         * @return builder
         * 
         */
        public Builder domainName(Output<String> domainName) {
            $.domainName = domainName;
            return this;
        }

        /**
         * @param domainName Name of the accelerated domain. This name without suffix can have a string of 1 to 63 characters, must contain only alphanumeric characters or &#34;-&#34;, and must not begin or end with &#34;-&#34;, and &#34;-&#34; must not in the 3th and 4th character positions at the same time. Suffix `.sh` and `.tel` are not supported.
         * 
         * @return builder
         * 
         */
        public Builder domainName(String domainName) {
            return domainName(Output.of(domainName));
        }

        /**
         * @param env Whether to issue a certificate in grayscale. Value: staging: issued certificate in grayscale. Not passing or passing any other value is a formal certificate.
         * 
         * @return builder
         * 
         */
        public Builder env(@Nullable Output<String> env) {
            $.env = env;
            return this;
        }

        /**
         * @param env Whether to issue a certificate in grayscale. Value: staging: issued certificate in grayscale. Not passing or passing any other value is a formal certificate.
         * 
         * @return builder
         * 
         */
        public Builder env(String env) {
            return env(Output.of(env));
        }

        /**
         * @param resourceGroupId The ID of the resource group.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupId(@Nullable Output<String> resourceGroupId) {
            $.resourceGroupId = resourceGroupId;
            return this;
        }

        /**
         * @param resourceGroupId The ID of the resource group.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupId(String resourceGroupId) {
            return resourceGroupId(Output.of(resourceGroupId));
        }

        /**
         * @param scope Scope of the accelerated domain. Valid values are `domestic`, `overseas`, `global`. Default value is `domestic`. This parameter&#39;s setting is valid Only for the international users and domestic L3 and above users. Value:
         * 
         * @return builder
         * 
         */
        public Builder scope(@Nullable Output<String> scope) {
            $.scope = scope;
            return this;
        }

        /**
         * @param scope Scope of the accelerated domain. Valid values are `domestic`, `overseas`, `global`. Default value is `domestic`. This parameter&#39;s setting is valid Only for the international users and domestic L3 and above users. Value:
         * 
         * @return builder
         * 
         */
        public Builder scope(String scope) {
            return scope(Output.of(scope));
        }

        /**
         * @param sources The source address list of the accelerated domain. Defaults to null. See `sources` below.
         * 
         * @return builder
         * 
         */
        public Builder sources(Output<List<DomainNewSourceArgs>> sources) {
            $.sources = sources;
            return this;
        }

        /**
         * @param sources The source address list of the accelerated domain. Defaults to null. See `sources` below.
         * 
         * @return builder
         * 
         */
        public Builder sources(List<DomainNewSourceArgs> sources) {
            return sources(Output.of(sources));
        }

        /**
         * @param sources The source address list of the accelerated domain. Defaults to null. See `sources` below.
         * 
         * @return builder
         * 
         */
        public Builder sources(DomainNewSourceArgs... sources) {
            return sources(List.of(sources));
        }

        /**
         * @param status The status of the resource, valid values: `online`, `offline`.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status The status of the resource, valid values: `online`, `offline`.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param tags The tag of the resource
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags The tag of the resource
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public DomainNewArgs build() {
            if ($.cdnType == null) {
                throw new MissingRequiredPropertyException("DomainNewArgs", "cdnType");
            }
            if ($.domainName == null) {
                throw new MissingRequiredPropertyException("DomainNewArgs", "domainName");
            }
            if ($.sources == null) {
                throw new MissingRequiredPropertyException("DomainNewArgs", "sources");
            }
            return $;
        }
    }

}
