// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.cloudfirewall;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ControlPolicyArgs extends com.pulumi.resources.ResourceArgs {

    public static final ControlPolicyArgs Empty = new ControlPolicyArgs();

    /**
     * The action that Cloud Firewall performs on the traffic. Valid values: `accept`, `drop`, `log`.
     * 
     */
    @Import(name="aclAction", required=true)
    private Output<String> aclAction;

    /**
     * @return The action that Cloud Firewall performs on the traffic. Valid values: `accept`, `drop`, `log`.
     * 
     */
    public Output<String> aclAction() {
        return this.aclAction;
    }

    /**
     * The application type supported by the access control policy. Valid values: `ANY`, `HTTP`, `HTTPS`, `MQTT`, `Memcache`, `MongoDB`, `MySQL`, `RDP`, `Redis`, `SMTP`, `SMTPS`, `SSH`, `SSL`, `VNC`.
     * &gt; **NOTE:** If `proto` is set to `TCP`, you can set `application_name` to any valid value. If `proto` is set to `UDP`, `ICMP`, or `ANY`, you can only set `application_name` to `ANY`.
     * 
     */
    @Import(name="applicationName", required=true)
    private Output<String> applicationName;

    /**
     * @return The application type supported by the access control policy. Valid values: `ANY`, `HTTP`, `HTTPS`, `MQTT`, `Memcache`, `MongoDB`, `MySQL`, `RDP`, `Redis`, `SMTP`, `SMTPS`, `SSH`, `SSL`, `VNC`.
     * &gt; **NOTE:** If `proto` is set to `TCP`, you can set `application_name` to any valid value. If `proto` is set to `UDP`, `ICMP`, or `ANY`, you can only set `application_name` to `ANY`.
     * 
     */
    public Output<String> applicationName() {
        return this.applicationName;
    }

    /**
     * The description of the access control policy.
     * 
     */
    @Import(name="description", required=true)
    private Output<String> description;

    /**
     * @return The description of the access control policy.
     * 
     */
    public Output<String> description() {
        return this.description;
    }

    /**
     * The destination port in the access control policy. **Note:** If `dest_port_type` is set to `port`, you must specify `dest_port`.
     * 
     */
    @Import(name="destPort")
    private @Nullable Output<String> destPort;

    /**
     * @return The destination port in the access control policy. **Note:** If `dest_port_type` is set to `port`, you must specify `dest_port`.
     * 
     */
    public Optional<Output<String>> destPort() {
        return Optional.ofNullable(this.destPort);
    }

    /**
     * The name of the destination port address book in the access control policy. **Note:** If `dest_port_type` is set to `group`, you must specify `dest_port_group`.
     * 
     */
    @Import(name="destPortGroup")
    private @Nullable Output<String> destPortGroup;

    /**
     * @return The name of the destination port address book in the access control policy. **Note:** If `dest_port_type` is set to `group`, you must specify `dest_port_group`.
     * 
     */
    public Optional<Output<String>> destPortGroup() {
        return Optional.ofNullable(this.destPortGroup);
    }

    /**
     * The type of the destination port in the access control policy. Valid values: `port`, `group`.
     * 
     */
    @Import(name="destPortType")
    private @Nullable Output<String> destPortType;

    /**
     * @return The type of the destination port in the access control policy. Valid values: `port`, `group`.
     * 
     */
    public Optional<Output<String>> destPortType() {
        return Optional.ofNullable(this.destPortType);
    }

    /**
     * The destination address in the access control policy.
     * 
     */
    @Import(name="destination", required=true)
    private Output<String> destination;

    /**
     * @return The destination address in the access control policy.
     * 
     */
    public Output<String> destination() {
        return this.destination;
    }

    /**
     * The type of the destination address in the access control policy. Valid values: `net`, `group`, `domain`, `location`.
     * 
     */
    @Import(name="destinationType", required=true)
    private Output<String> destinationType;

    /**
     * @return The type of the destination address in the access control policy. Valid values: `net`, `group`, `domain`, `location`.
     * 
     */
    public Output<String> destinationType() {
        return this.destinationType;
    }

    /**
     * The direction of the traffic to which the access control policy applies. Valid values: `in`, `out`.
     * 
     */
    @Import(name="direction", required=true)
    private Output<String> direction;

    /**
     * @return The direction of the traffic to which the access control policy applies. Valid values: `in`, `out`.
     * 
     */
    public Output<String> direction() {
        return this.direction;
    }

    /**
     * The IP version supported by the access control policy. Default value: `4`. Valid values:
     * 
     */
    @Import(name="ipVersion")
    private @Nullable Output<String> ipVersion;

    /**
     * @return The IP version supported by the access control policy. Default value: `4`. Valid values:
     * 
     */
    public Optional<Output<String>> ipVersion() {
        return Optional.ofNullable(this.ipVersion);
    }

    /**
     * The language of the content within the request and response. Valid values: `zh`, `en`.
     * 
     */
    @Import(name="lang")
    private @Nullable Output<String> lang;

    /**
     * @return The language of the content within the request and response. Valid values: `zh`, `en`.
     * 
     */
    public Optional<Output<String>> lang() {
        return Optional.ofNullable(this.lang);
    }

    /**
     * The protocol type supported by the access control policy. Valid values: `ANY`, `  TCP `, `UDP`, `ICMP`.
     * 
     */
    @Import(name="proto", required=true)
    private Output<String> proto;

    /**
     * @return The protocol type supported by the access control policy. Valid values: `ANY`, `  TCP `, `UDP`, `ICMP`.
     * 
     */
    public Output<String> proto() {
        return this.proto;
    }

    /**
     * The status of the access control policy. Valid values: `true`, `false`.
     * 
     */
    @Import(name="release")
    private @Nullable Output<String> release;

    /**
     * @return The status of the access control policy. Valid values: `true`, `false`.
     * 
     */
    public Optional<Output<String>> release() {
        return Optional.ofNullable(this.release);
    }

    /**
     * The source address in the access control policy.
     * 
     */
    @Import(name="source", required=true)
    private Output<String> source;

    /**
     * @return The source address in the access control policy.
     * 
     */
    public Output<String> source() {
        return this.source;
    }

    /**
     * The source IP address of the request.
     * 
     */
    @Import(name="sourceIp")
    private @Nullable Output<String> sourceIp;

    /**
     * @return The source IP address of the request.
     * 
     */
    public Optional<Output<String>> sourceIp() {
        return Optional.ofNullable(this.sourceIp);
    }

    /**
     * The type of the source address in the access control policy. Valid values: `net`, `group`, `location`.
     * 
     */
    @Import(name="sourceType", required=true)
    private Output<String> sourceType;

    /**
     * @return The type of the source address in the access control policy. Valid values: `net`, `group`, `location`.
     * 
     */
    public Output<String> sourceType() {
        return this.sourceType;
    }

    private ControlPolicyArgs() {}

    private ControlPolicyArgs(ControlPolicyArgs $) {
        this.aclAction = $.aclAction;
        this.applicationName = $.applicationName;
        this.description = $.description;
        this.destPort = $.destPort;
        this.destPortGroup = $.destPortGroup;
        this.destPortType = $.destPortType;
        this.destination = $.destination;
        this.destinationType = $.destinationType;
        this.direction = $.direction;
        this.ipVersion = $.ipVersion;
        this.lang = $.lang;
        this.proto = $.proto;
        this.release = $.release;
        this.source = $.source;
        this.sourceIp = $.sourceIp;
        this.sourceType = $.sourceType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ControlPolicyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ControlPolicyArgs $;

        public Builder() {
            $ = new ControlPolicyArgs();
        }

        public Builder(ControlPolicyArgs defaults) {
            $ = new ControlPolicyArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param aclAction The action that Cloud Firewall performs on the traffic. Valid values: `accept`, `drop`, `log`.
         * 
         * @return builder
         * 
         */
        public Builder aclAction(Output<String> aclAction) {
            $.aclAction = aclAction;
            return this;
        }

        /**
         * @param aclAction The action that Cloud Firewall performs on the traffic. Valid values: `accept`, `drop`, `log`.
         * 
         * @return builder
         * 
         */
        public Builder aclAction(String aclAction) {
            return aclAction(Output.of(aclAction));
        }

        /**
         * @param applicationName The application type supported by the access control policy. Valid values: `ANY`, `HTTP`, `HTTPS`, `MQTT`, `Memcache`, `MongoDB`, `MySQL`, `RDP`, `Redis`, `SMTP`, `SMTPS`, `SSH`, `SSL`, `VNC`.
         * &gt; **NOTE:** If `proto` is set to `TCP`, you can set `application_name` to any valid value. If `proto` is set to `UDP`, `ICMP`, or `ANY`, you can only set `application_name` to `ANY`.
         * 
         * @return builder
         * 
         */
        public Builder applicationName(Output<String> applicationName) {
            $.applicationName = applicationName;
            return this;
        }

        /**
         * @param applicationName The application type supported by the access control policy. Valid values: `ANY`, `HTTP`, `HTTPS`, `MQTT`, `Memcache`, `MongoDB`, `MySQL`, `RDP`, `Redis`, `SMTP`, `SMTPS`, `SSH`, `SSL`, `VNC`.
         * &gt; **NOTE:** If `proto` is set to `TCP`, you can set `application_name` to any valid value. If `proto` is set to `UDP`, `ICMP`, or `ANY`, you can only set `application_name` to `ANY`.
         * 
         * @return builder
         * 
         */
        public Builder applicationName(String applicationName) {
            return applicationName(Output.of(applicationName));
        }

        /**
         * @param description The description of the access control policy.
         * 
         * @return builder
         * 
         */
        public Builder description(Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The description of the access control policy.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param destPort The destination port in the access control policy. **Note:** If `dest_port_type` is set to `port`, you must specify `dest_port`.
         * 
         * @return builder
         * 
         */
        public Builder destPort(@Nullable Output<String> destPort) {
            $.destPort = destPort;
            return this;
        }

        /**
         * @param destPort The destination port in the access control policy. **Note:** If `dest_port_type` is set to `port`, you must specify `dest_port`.
         * 
         * @return builder
         * 
         */
        public Builder destPort(String destPort) {
            return destPort(Output.of(destPort));
        }

        /**
         * @param destPortGroup The name of the destination port address book in the access control policy. **Note:** If `dest_port_type` is set to `group`, you must specify `dest_port_group`.
         * 
         * @return builder
         * 
         */
        public Builder destPortGroup(@Nullable Output<String> destPortGroup) {
            $.destPortGroup = destPortGroup;
            return this;
        }

        /**
         * @param destPortGroup The name of the destination port address book in the access control policy. **Note:** If `dest_port_type` is set to `group`, you must specify `dest_port_group`.
         * 
         * @return builder
         * 
         */
        public Builder destPortGroup(String destPortGroup) {
            return destPortGroup(Output.of(destPortGroup));
        }

        /**
         * @param destPortType The type of the destination port in the access control policy. Valid values: `port`, `group`.
         * 
         * @return builder
         * 
         */
        public Builder destPortType(@Nullable Output<String> destPortType) {
            $.destPortType = destPortType;
            return this;
        }

        /**
         * @param destPortType The type of the destination port in the access control policy. Valid values: `port`, `group`.
         * 
         * @return builder
         * 
         */
        public Builder destPortType(String destPortType) {
            return destPortType(Output.of(destPortType));
        }

        /**
         * @param destination The destination address in the access control policy.
         * 
         * @return builder
         * 
         */
        public Builder destination(Output<String> destination) {
            $.destination = destination;
            return this;
        }

        /**
         * @param destination The destination address in the access control policy.
         * 
         * @return builder
         * 
         */
        public Builder destination(String destination) {
            return destination(Output.of(destination));
        }

        /**
         * @param destinationType The type of the destination address in the access control policy. Valid values: `net`, `group`, `domain`, `location`.
         * 
         * @return builder
         * 
         */
        public Builder destinationType(Output<String> destinationType) {
            $.destinationType = destinationType;
            return this;
        }

        /**
         * @param destinationType The type of the destination address in the access control policy. Valid values: `net`, `group`, `domain`, `location`.
         * 
         * @return builder
         * 
         */
        public Builder destinationType(String destinationType) {
            return destinationType(Output.of(destinationType));
        }

        /**
         * @param direction The direction of the traffic to which the access control policy applies. Valid values: `in`, `out`.
         * 
         * @return builder
         * 
         */
        public Builder direction(Output<String> direction) {
            $.direction = direction;
            return this;
        }

        /**
         * @param direction The direction of the traffic to which the access control policy applies. Valid values: `in`, `out`.
         * 
         * @return builder
         * 
         */
        public Builder direction(String direction) {
            return direction(Output.of(direction));
        }

        /**
         * @param ipVersion The IP version supported by the access control policy. Default value: `4`. Valid values:
         * 
         * @return builder
         * 
         */
        public Builder ipVersion(@Nullable Output<String> ipVersion) {
            $.ipVersion = ipVersion;
            return this;
        }

        /**
         * @param ipVersion The IP version supported by the access control policy. Default value: `4`. Valid values:
         * 
         * @return builder
         * 
         */
        public Builder ipVersion(String ipVersion) {
            return ipVersion(Output.of(ipVersion));
        }

        /**
         * @param lang The language of the content within the request and response. Valid values: `zh`, `en`.
         * 
         * @return builder
         * 
         */
        public Builder lang(@Nullable Output<String> lang) {
            $.lang = lang;
            return this;
        }

        /**
         * @param lang The language of the content within the request and response. Valid values: `zh`, `en`.
         * 
         * @return builder
         * 
         */
        public Builder lang(String lang) {
            return lang(Output.of(lang));
        }

        /**
         * @param proto The protocol type supported by the access control policy. Valid values: `ANY`, `  TCP `, `UDP`, `ICMP`.
         * 
         * @return builder
         * 
         */
        public Builder proto(Output<String> proto) {
            $.proto = proto;
            return this;
        }

        /**
         * @param proto The protocol type supported by the access control policy. Valid values: `ANY`, `  TCP `, `UDP`, `ICMP`.
         * 
         * @return builder
         * 
         */
        public Builder proto(String proto) {
            return proto(Output.of(proto));
        }

        /**
         * @param release The status of the access control policy. Valid values: `true`, `false`.
         * 
         * @return builder
         * 
         */
        public Builder release(@Nullable Output<String> release) {
            $.release = release;
            return this;
        }

        /**
         * @param release The status of the access control policy. Valid values: `true`, `false`.
         * 
         * @return builder
         * 
         */
        public Builder release(String release) {
            return release(Output.of(release));
        }

        /**
         * @param source The source address in the access control policy.
         * 
         * @return builder
         * 
         */
        public Builder source(Output<String> source) {
            $.source = source;
            return this;
        }

        /**
         * @param source The source address in the access control policy.
         * 
         * @return builder
         * 
         */
        public Builder source(String source) {
            return source(Output.of(source));
        }

        /**
         * @param sourceIp The source IP address of the request.
         * 
         * @return builder
         * 
         */
        public Builder sourceIp(@Nullable Output<String> sourceIp) {
            $.sourceIp = sourceIp;
            return this;
        }

        /**
         * @param sourceIp The source IP address of the request.
         * 
         * @return builder
         * 
         */
        public Builder sourceIp(String sourceIp) {
            return sourceIp(Output.of(sourceIp));
        }

        /**
         * @param sourceType The type of the source address in the access control policy. Valid values: `net`, `group`, `location`.
         * 
         * @return builder
         * 
         */
        public Builder sourceType(Output<String> sourceType) {
            $.sourceType = sourceType;
            return this;
        }

        /**
         * @param sourceType The type of the source address in the access control policy. Valid values: `net`, `group`, `location`.
         * 
         * @return builder
         * 
         */
        public Builder sourceType(String sourceType) {
            return sourceType(Output.of(sourceType));
        }

        public ControlPolicyArgs build() {
            if ($.aclAction == null) {
                throw new MissingRequiredPropertyException("ControlPolicyArgs", "aclAction");
            }
            if ($.applicationName == null) {
                throw new MissingRequiredPropertyException("ControlPolicyArgs", "applicationName");
            }
            if ($.description == null) {
                throw new MissingRequiredPropertyException("ControlPolicyArgs", "description");
            }
            if ($.destination == null) {
                throw new MissingRequiredPropertyException("ControlPolicyArgs", "destination");
            }
            if ($.destinationType == null) {
                throw new MissingRequiredPropertyException("ControlPolicyArgs", "destinationType");
            }
            if ($.direction == null) {
                throw new MissingRequiredPropertyException("ControlPolicyArgs", "direction");
            }
            if ($.proto == null) {
                throw new MissingRequiredPropertyException("ControlPolicyArgs", "proto");
            }
            if ($.source == null) {
                throw new MissingRequiredPropertyException("ControlPolicyArgs", "source");
            }
            if ($.sourceType == null) {
                throw new MissingRequiredPropertyException("ControlPolicyArgs", "sourceType");
            }
            return $;
        }
    }

}
