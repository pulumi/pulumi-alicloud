// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.esa.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class VideoProcessingState extends com.pulumi.resources.ResourceArgs {

    public static final VideoProcessingState Empty = new VideoProcessingState();

    /**
     * Config Id
     * 
     */
    @Import(name="configId")
    private @Nullable Output<Integer> configId;

    /**
     * @return Config Id
     * 
     */
    public Optional<Output<Integer>> configId() {
        return Optional.ofNullable(this.configId);
    }

    /**
     * Custom FLV end parameters.
     * 
     */
    @Import(name="flvSeekEnd")
    private @Nullable Output<String> flvSeekEnd;

    /**
     * @return Custom FLV end parameters.
     * 
     */
    public Optional<Output<String>> flvSeekEnd() {
        return Optional.ofNullable(this.flvSeekEnd);
    }

    /**
     * Custom FLV start parameters.
     * 
     */
    @Import(name="flvSeekStart")
    private @Nullable Output<String> flvSeekStart;

    /**
     * @return Custom FLV start parameters.
     * 
     */
    public Optional<Output<String>> flvSeekStart() {
        return Optional.ofNullable(this.flvSeekStart);
    }

    /**
     * FLV drag mode. Value range:
     * 
     */
    @Import(name="flvVideoSeekMode")
    private @Nullable Output<String> flvVideoSeekMode;

    /**
     * @return FLV drag mode. Value range:
     * 
     */
    public Optional<Output<String>> flvVideoSeekMode() {
        return Optional.ofNullable(this.flvVideoSeekMode);
    }

    /**
     * Custom mp4 end parameters.
     * 
     */
    @Import(name="mp4SeekEnd")
    private @Nullable Output<String> mp4SeekEnd;

    /**
     * @return Custom mp4 end parameters.
     * 
     */
    public Optional<Output<String>> mp4SeekEnd() {
        return Optional.ofNullable(this.mp4SeekEnd);
    }

    /**
     * Custom mp4 start parameters.
     * 
     */
    @Import(name="mp4SeekStart")
    private @Nullable Output<String> mp4SeekStart;

    /**
     * @return Custom mp4 start parameters.
     * 
     */
    public Optional<Output<String>> mp4SeekStart() {
        return Optional.ofNullable(this.mp4SeekStart);
    }

    /**
     * Rule content, using conditional expressions to match user requests. When adding global configuration, this parameter does not need to be set. There are two usage scenarios:
     * - Match all incoming requests: value set to true
     * - Match specified request: Set the value to a custom expression, for example: (http.host eq \&#34;video.example.com\&#34;)
     * 
     */
    @Import(name="rule")
    private @Nullable Output<String> rule;

    /**
     * @return Rule content, using conditional expressions to match user requests. When adding global configuration, this parameter does not need to be set. There are two usage scenarios:
     * - Match all incoming requests: value set to true
     * - Match specified request: Set the value to a custom expression, for example: (http.host eq \&#34;video.example.com\&#34;)
     * 
     */
    public Optional<Output<String>> rule() {
        return Optional.ofNullable(this.rule);
    }

    /**
     * Rule switch. When adding global configuration, this parameter does not need to be set. Value range:
     * 
     */
    @Import(name="ruleEnable")
    private @Nullable Output<String> ruleEnable;

    /**
     * @return Rule switch. When adding global configuration, this parameter does not need to be set. Value range:
     * 
     */
    public Optional<Output<String>> ruleEnable() {
        return Optional.ofNullable(this.ruleEnable);
    }

    /**
     * Rule name. When adding global configuration, this parameter does not need to be set.
     * 
     */
    @Import(name="ruleName")
    private @Nullable Output<String> ruleName;

    /**
     * @return Rule name. When adding global configuration, this parameter does not need to be set.
     * 
     */
    public Optional<Output<String>> ruleName() {
        return Optional.ofNullable(this.ruleName);
    }

    /**
     * Order of rule execution. The smaller the value, the higher the priority for execution.
     * 
     */
    @Import(name="sequence")
    private @Nullable Output<Integer> sequence;

    /**
     * @return Order of rule execution. The smaller the value, the higher the priority for execution.
     * 
     */
    public Optional<Output<Integer>> sequence() {
        return Optional.ofNullable(this.sequence);
    }

    /**
     * The site ID, which can be obtained by calling the ListSites API.
     * 
     */
    @Import(name="siteId")
    private @Nullable Output<Integer> siteId;

    /**
     * @return The site ID, which can be obtained by calling the ListSites API.
     * 
     */
    public Optional<Output<Integer>> siteId() {
        return Optional.ofNullable(this.siteId);
    }

    /**
     * The version number of the site configuration. For sites that have enabled configuration version management, this parameter can be used to specify the effective version of the configuration site, which defaults to version 0.
     * 
     */
    @Import(name="siteVersion")
    private @Nullable Output<Integer> siteVersion;

    /**
     * @return The version number of the site configuration. For sites that have enabled configuration version management, this parameter can be used to specify the effective version of the configuration site, which defaults to version 0.
     * 
     */
    public Optional<Output<Integer>> siteVersion() {
        return Optional.ofNullable(this.siteVersion);
    }

    /**
     * Drag and drop the play function switch. Value range:
     * 
     */
    @Import(name="videoSeekEnable")
    private @Nullable Output<String> videoSeekEnable;

    /**
     * @return Drag and drop the play function switch. Value range:
     * 
     */
    public Optional<Output<String>> videoSeekEnable() {
        return Optional.ofNullable(this.videoSeekEnable);
    }

    private VideoProcessingState() {}

    private VideoProcessingState(VideoProcessingState $) {
        this.configId = $.configId;
        this.flvSeekEnd = $.flvSeekEnd;
        this.flvSeekStart = $.flvSeekStart;
        this.flvVideoSeekMode = $.flvVideoSeekMode;
        this.mp4SeekEnd = $.mp4SeekEnd;
        this.mp4SeekStart = $.mp4SeekStart;
        this.rule = $.rule;
        this.ruleEnable = $.ruleEnable;
        this.ruleName = $.ruleName;
        this.sequence = $.sequence;
        this.siteId = $.siteId;
        this.siteVersion = $.siteVersion;
        this.videoSeekEnable = $.videoSeekEnable;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VideoProcessingState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VideoProcessingState $;

        public Builder() {
            $ = new VideoProcessingState();
        }

        public Builder(VideoProcessingState defaults) {
            $ = new VideoProcessingState(Objects.requireNonNull(defaults));
        }

        /**
         * @param configId Config Id
         * 
         * @return builder
         * 
         */
        public Builder configId(@Nullable Output<Integer> configId) {
            $.configId = configId;
            return this;
        }

        /**
         * @param configId Config Id
         * 
         * @return builder
         * 
         */
        public Builder configId(Integer configId) {
            return configId(Output.of(configId));
        }

        /**
         * @param flvSeekEnd Custom FLV end parameters.
         * 
         * @return builder
         * 
         */
        public Builder flvSeekEnd(@Nullable Output<String> flvSeekEnd) {
            $.flvSeekEnd = flvSeekEnd;
            return this;
        }

        /**
         * @param flvSeekEnd Custom FLV end parameters.
         * 
         * @return builder
         * 
         */
        public Builder flvSeekEnd(String flvSeekEnd) {
            return flvSeekEnd(Output.of(flvSeekEnd));
        }

        /**
         * @param flvSeekStart Custom FLV start parameters.
         * 
         * @return builder
         * 
         */
        public Builder flvSeekStart(@Nullable Output<String> flvSeekStart) {
            $.flvSeekStart = flvSeekStart;
            return this;
        }

        /**
         * @param flvSeekStart Custom FLV start parameters.
         * 
         * @return builder
         * 
         */
        public Builder flvSeekStart(String flvSeekStart) {
            return flvSeekStart(Output.of(flvSeekStart));
        }

        /**
         * @param flvVideoSeekMode FLV drag mode. Value range:
         * 
         * @return builder
         * 
         */
        public Builder flvVideoSeekMode(@Nullable Output<String> flvVideoSeekMode) {
            $.flvVideoSeekMode = flvVideoSeekMode;
            return this;
        }

        /**
         * @param flvVideoSeekMode FLV drag mode. Value range:
         * 
         * @return builder
         * 
         */
        public Builder flvVideoSeekMode(String flvVideoSeekMode) {
            return flvVideoSeekMode(Output.of(flvVideoSeekMode));
        }

        /**
         * @param mp4SeekEnd Custom mp4 end parameters.
         * 
         * @return builder
         * 
         */
        public Builder mp4SeekEnd(@Nullable Output<String> mp4SeekEnd) {
            $.mp4SeekEnd = mp4SeekEnd;
            return this;
        }

        /**
         * @param mp4SeekEnd Custom mp4 end parameters.
         * 
         * @return builder
         * 
         */
        public Builder mp4SeekEnd(String mp4SeekEnd) {
            return mp4SeekEnd(Output.of(mp4SeekEnd));
        }

        /**
         * @param mp4SeekStart Custom mp4 start parameters.
         * 
         * @return builder
         * 
         */
        public Builder mp4SeekStart(@Nullable Output<String> mp4SeekStart) {
            $.mp4SeekStart = mp4SeekStart;
            return this;
        }

        /**
         * @param mp4SeekStart Custom mp4 start parameters.
         * 
         * @return builder
         * 
         */
        public Builder mp4SeekStart(String mp4SeekStart) {
            return mp4SeekStart(Output.of(mp4SeekStart));
        }

        /**
         * @param rule Rule content, using conditional expressions to match user requests. When adding global configuration, this parameter does not need to be set. There are two usage scenarios:
         * - Match all incoming requests: value set to true
         * - Match specified request: Set the value to a custom expression, for example: (http.host eq \&#34;video.example.com\&#34;)
         * 
         * @return builder
         * 
         */
        public Builder rule(@Nullable Output<String> rule) {
            $.rule = rule;
            return this;
        }

        /**
         * @param rule Rule content, using conditional expressions to match user requests. When adding global configuration, this parameter does not need to be set. There are two usage scenarios:
         * - Match all incoming requests: value set to true
         * - Match specified request: Set the value to a custom expression, for example: (http.host eq \&#34;video.example.com\&#34;)
         * 
         * @return builder
         * 
         */
        public Builder rule(String rule) {
            return rule(Output.of(rule));
        }

        /**
         * @param ruleEnable Rule switch. When adding global configuration, this parameter does not need to be set. Value range:
         * 
         * @return builder
         * 
         */
        public Builder ruleEnable(@Nullable Output<String> ruleEnable) {
            $.ruleEnable = ruleEnable;
            return this;
        }

        /**
         * @param ruleEnable Rule switch. When adding global configuration, this parameter does not need to be set. Value range:
         * 
         * @return builder
         * 
         */
        public Builder ruleEnable(String ruleEnable) {
            return ruleEnable(Output.of(ruleEnable));
        }

        /**
         * @param ruleName Rule name. When adding global configuration, this parameter does not need to be set.
         * 
         * @return builder
         * 
         */
        public Builder ruleName(@Nullable Output<String> ruleName) {
            $.ruleName = ruleName;
            return this;
        }

        /**
         * @param ruleName Rule name. When adding global configuration, this parameter does not need to be set.
         * 
         * @return builder
         * 
         */
        public Builder ruleName(String ruleName) {
            return ruleName(Output.of(ruleName));
        }

        /**
         * @param sequence Order of rule execution. The smaller the value, the higher the priority for execution.
         * 
         * @return builder
         * 
         */
        public Builder sequence(@Nullable Output<Integer> sequence) {
            $.sequence = sequence;
            return this;
        }

        /**
         * @param sequence Order of rule execution. The smaller the value, the higher the priority for execution.
         * 
         * @return builder
         * 
         */
        public Builder sequence(Integer sequence) {
            return sequence(Output.of(sequence));
        }

        /**
         * @param siteId The site ID, which can be obtained by calling the ListSites API.
         * 
         * @return builder
         * 
         */
        public Builder siteId(@Nullable Output<Integer> siteId) {
            $.siteId = siteId;
            return this;
        }

        /**
         * @param siteId The site ID, which can be obtained by calling the ListSites API.
         * 
         * @return builder
         * 
         */
        public Builder siteId(Integer siteId) {
            return siteId(Output.of(siteId));
        }

        /**
         * @param siteVersion The version number of the site configuration. For sites that have enabled configuration version management, this parameter can be used to specify the effective version of the configuration site, which defaults to version 0.
         * 
         * @return builder
         * 
         */
        public Builder siteVersion(@Nullable Output<Integer> siteVersion) {
            $.siteVersion = siteVersion;
            return this;
        }

        /**
         * @param siteVersion The version number of the site configuration. For sites that have enabled configuration version management, this parameter can be used to specify the effective version of the configuration site, which defaults to version 0.
         * 
         * @return builder
         * 
         */
        public Builder siteVersion(Integer siteVersion) {
            return siteVersion(Output.of(siteVersion));
        }

        /**
         * @param videoSeekEnable Drag and drop the play function switch. Value range:
         * 
         * @return builder
         * 
         */
        public Builder videoSeekEnable(@Nullable Output<String> videoSeekEnable) {
            $.videoSeekEnable = videoSeekEnable;
            return this;
        }

        /**
         * @param videoSeekEnable Drag and drop the play function switch. Value range:
         * 
         * @return builder
         * 
         */
        public Builder videoSeekEnable(String videoSeekEnable) {
            return videoSeekEnable(Output.of(videoSeekEnable));
        }

        public VideoProcessingState build() {
            return $;
        }
    }

}
