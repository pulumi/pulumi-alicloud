// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.fc.inputs;

import com.pulumi.alicloud.fc.inputs.V3FunctionCodeArgs;
import com.pulumi.alicloud.fc.inputs.V3FunctionCustomContainerConfigArgs;
import com.pulumi.alicloud.fc.inputs.V3FunctionCustomDnsArgs;
import com.pulumi.alicloud.fc.inputs.V3FunctionCustomRuntimeConfigArgs;
import com.pulumi.alicloud.fc.inputs.V3FunctionGpuConfigArgs;
import com.pulumi.alicloud.fc.inputs.V3FunctionInstanceLifecycleConfigArgs;
import com.pulumi.alicloud.fc.inputs.V3FunctionInvocationRestrictionArgs;
import com.pulumi.alicloud.fc.inputs.V3FunctionLogConfigArgs;
import com.pulumi.alicloud.fc.inputs.V3FunctionNasConfigArgs;
import com.pulumi.alicloud.fc.inputs.V3FunctionOssMountConfigArgs;
import com.pulumi.alicloud.fc.inputs.V3FunctionTracingConfigArgs;
import com.pulumi.alicloud.fc.inputs.V3FunctionVpcConfigArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class V3FunctionState extends com.pulumi.resources.ResourceArgs {

    public static final V3FunctionState Empty = new V3FunctionState();

    /**
     * Function code ZIP package. code and customContainerConfig. See `code` below.
     * 
     */
    @Import(name="code")
    private @Nullable Output<V3FunctionCodeArgs> code;

    /**
     * @return Function code ZIP package. code and customContainerConfig. See `code` below.
     * 
     */
    public Optional<Output<V3FunctionCodeArgs>> code() {
        return Optional.ofNullable(this.code);
    }

    /**
     * The code package size of the function returned by the system, in byte Example : 1024
     * 
     */
    @Import(name="codeSize")
    private @Nullable Output<Integer> codeSize;

    /**
     * @return The code package size of the function returned by the system, in byte Example : 1024
     * 
     */
    public Optional<Output<Integer>> codeSize() {
        return Optional.ofNullable(this.codeSize);
    }

    /**
     * The CPU specification of the function. The unit is vCPU, which is a multiple of the 0.05 vCPU.
     * 
     */
    @Import(name="cpu")
    private @Nullable Output<Double> cpu;

    /**
     * @return The CPU specification of the function. The unit is vCPU, which is a multiple of the 0.05 vCPU.
     * 
     */
    public Optional<Output<Double>> cpu() {
        return Optional.ofNullable(this.cpu);
    }

    /**
     * The creation time of the function.
     * 
     */
    @Import(name="createTime")
    private @Nullable Output<String> createTime;

    /**
     * @return The creation time of the function.
     * 
     */
    public Optional<Output<String>> createTime() {
        return Optional.ofNullable(this.createTime);
    }

    /**
     * The configuration of the custom container runtime. After the configuration is successful, the function can use the custom container image to execute the function. code and customContainerConfig. See `custom_container_config` below.
     * 
     */
    @Import(name="customContainerConfig")
    private @Nullable Output<V3FunctionCustomContainerConfigArgs> customContainerConfig;

    /**
     * @return The configuration of the custom container runtime. After the configuration is successful, the function can use the custom container image to execute the function. code and customContainerConfig. See `custom_container_config` below.
     * 
     */
    public Optional<Output<V3FunctionCustomContainerConfigArgs>> customContainerConfig() {
        return Optional.ofNullable(this.customContainerConfig);
    }

    /**
     * Function custom DNS configuration See `custom_dns` below.
     * 
     */
    @Import(name="customDns")
    private @Nullable Output<V3FunctionCustomDnsArgs> customDns;

    /**
     * @return Function custom DNS configuration See `custom_dns` below.
     * 
     */
    public Optional<Output<V3FunctionCustomDnsArgs>> customDns() {
        return Optional.ofNullable(this.customDns);
    }

    /**
     * Customize the runtime configuration. See `custom_runtime_config` below.
     * 
     */
    @Import(name="customRuntimeConfig")
    private @Nullable Output<V3FunctionCustomRuntimeConfigArgs> customRuntimeConfig;

    /**
     * @return Customize the runtime configuration. See `custom_runtime_config` below.
     * 
     */
    public Optional<Output<V3FunctionCustomRuntimeConfigArgs>> customRuntimeConfig() {
        return Optional.ofNullable(this.customRuntimeConfig);
    }

    /**
     * The description of the function. The function compute system does not use this attribute value, but we recommend that you set a concise and clear description for the function.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The description of the function. The function compute system does not use this attribute value, but we recommend that you set a concise and clear description for the function.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The disk specification of the function, in MB. The optional value is 512 MB or 10240MB.
     * 
     */
    @Import(name="diskSize")
    private @Nullable Output<Integer> diskSize;

    /**
     * @return The disk specification of the function, in MB. The optional value is 512 MB or 10240MB.
     * 
     */
    public Optional<Output<Integer>> diskSize() {
        return Optional.ofNullable(this.diskSize);
    }

    /**
     * The environment variable set for the function, you can get the value of the environment variable in the function.
     * 
     */
    @Import(name="environmentVariables")
    private @Nullable Output<Map<String,String>> environmentVariables;

    /**
     * @return The environment variable set for the function, you can get the value of the environment variable in the function.
     * 
     */
    public Optional<Output<Map<String,String>>> environmentVariables() {
        return Optional.ofNullable(this.environmentVariables);
    }

    /**
     * ARN of function
     * 
     */
    @Import(name="functionArn")
    private @Nullable Output<String> functionArn;

    /**
     * @return ARN of function
     * 
     */
    public Optional<Output<String>> functionArn() {
        return Optional.ofNullable(this.functionArn);
    }

    /**
     * The first ID of the resource
     * 
     */
    @Import(name="functionId")
    private @Nullable Output<String> functionId;

    /**
     * @return The first ID of the resource
     * 
     */
    public Optional<Output<String>> functionId() {
        return Optional.ofNullable(this.functionId);
    }

    /**
     * The function name. Consists of uppercase and lowercase letters, digits (0 to 9), underscores (_), and dashes (-). It must begin with an English letter (a ~ z), (A ~ Z), or an underscore (_). Case sensitive. The length is 1~128 characters.
     * 
     */
    @Import(name="functionName")
    private @Nullable Output<String> functionName;

    /**
     * @return The function name. Consists of uppercase and lowercase letters, digits (0 to 9), underscores (_), and dashes (-). It must begin with an English letter (a ~ z), (A ~ Z), or an underscore (_). Case sensitive. The length is 1~128 characters.
     * 
     */
    public Optional<Output<String>> functionName() {
        return Optional.ofNullable(this.functionName);
    }

    /**
     * Function GPU configuration. See `gpu_config` below.
     * 
     */
    @Import(name="gpuConfig")
    private @Nullable Output<V3FunctionGpuConfigArgs> gpuConfig;

    /**
     * @return Function GPU configuration. See `gpu_config` below.
     * 
     */
    public Optional<Output<V3FunctionGpuConfigArgs>> gpuConfig() {
        return Optional.ofNullable(this.gpuConfig);
    }

    /**
     * Function Handler: the call entry for the function compute system to run your function.
     * 
     */
    @Import(name="handler")
    private @Nullable Output<String> handler;

    /**
     * @return Function Handler: the call entry for the function compute system to run your function.
     * 
     */
    public Optional<Output<String>> handler() {
        return Optional.ofNullable(this.handler);
    }

    /**
     * Maximum instance concurrency.
     * 
     */
    @Import(name="instanceConcurrency")
    private @Nullable Output<Integer> instanceConcurrency;

    /**
     * @return Maximum instance concurrency.
     * 
     */
    public Optional<Output<Integer>> instanceConcurrency() {
        return Optional.ofNullable(this.instanceConcurrency);
    }

    /**
     * Instance isolation mode
     * 
     */
    @Import(name="instanceIsolationMode")
    private @Nullable Output<String> instanceIsolationMode;

    /**
     * @return Instance isolation mode
     * 
     */
    public Optional<Output<String>> instanceIsolationMode() {
        return Optional.ofNullable(this.instanceIsolationMode);
    }

    /**
     * Instance lifecycle callback method configuration. See `instance_lifecycle_config` below.
     * 
     */
    @Import(name="instanceLifecycleConfig")
    private @Nullable Output<V3FunctionInstanceLifecycleConfigArgs> instanceLifecycleConfig;

    /**
     * @return Instance lifecycle callback method configuration. See `instance_lifecycle_config` below.
     * 
     */
    public Optional<Output<V3FunctionInstanceLifecycleConfigArgs>> instanceLifecycleConfig() {
        return Optional.ofNullable(this.instanceLifecycleConfig);
    }

    /**
     * Allow function to access public network
     * 
     */
    @Import(name="internetAccess")
    private @Nullable Output<Boolean> internetAccess;

    /**
     * @return Allow function to access public network
     * 
     */
    public Optional<Output<Boolean>> internetAccess() {
        return Optional.ofNullable(this.internetAccess);
    }

    /**
     * Invocation Restriction Detail See `invocation_restriction` below.
     * 
     */
    @Import(name="invocationRestriction")
    private @Nullable Output<V3FunctionInvocationRestrictionArgs> invocationRestriction;

    /**
     * @return Invocation Restriction Detail See `invocation_restriction` below.
     * 
     */
    public Optional<Output<V3FunctionInvocationRestrictionArgs>> invocationRestriction() {
        return Optional.ofNullable(this.invocationRestriction);
    }

    /**
     * Last time the function was Updated
     * 
     */
    @Import(name="lastModifiedTime")
    private @Nullable Output<String> lastModifiedTime;

    /**
     * @return Last time the function was Updated
     * 
     */
    public Optional<Output<String>> lastModifiedTime() {
        return Optional.ofNullable(this.lastModifiedTime);
    }

    /**
     * The status of the last function update operation. When the function is created successfully, the value is Successful. Optional values are Successful, Failed, and InProgress.
     * 
     */
    @Import(name="lastUpdateStatus")
    private @Nullable Output<String> lastUpdateStatus;

    /**
     * @return The status of the last function update operation. When the function is created successfully, the value is Successful. Optional values are Successful, Failed, and InProgress.
     * 
     */
    public Optional<Output<String>> lastUpdateStatus() {
        return Optional.ofNullable(this.lastUpdateStatus);
    }

    /**
     * The reason that caused the last function to update the Operation State to the current value
     * 
     */
    @Import(name="lastUpdateStatusReason")
    private @Nullable Output<String> lastUpdateStatusReason;

    /**
     * @return The reason that caused the last function to update the Operation State to the current value
     * 
     */
    public Optional<Output<String>> lastUpdateStatusReason() {
        return Optional.ofNullable(this.lastUpdateStatusReason);
    }

    /**
     * Status code of the reason that caused the last function update operation status to the current value
     * 
     */
    @Import(name="lastUpdateStatusReasonCode")
    private @Nullable Output<String> lastUpdateStatusReasonCode;

    /**
     * @return Status code of the reason that caused the last function update operation status to the current value
     * 
     */
    public Optional<Output<String>> lastUpdateStatusReasonCode() {
        return Optional.ofNullable(this.lastUpdateStatusReasonCode);
    }

    /**
     * The list of layers.
     * 
     */
    @Import(name="layers")
    private @Nullable Output<List<String>> layers;

    /**
     * @return The list of layers.
     * 
     */
    public Optional<Output<List<String>>> layers() {
        return Optional.ofNullable(this.layers);
    }

    /**
     * The logs generated by the function are written to the configured Logstore. See `log_config` below.
     * 
     */
    @Import(name="logConfig")
    private @Nullable Output<V3FunctionLogConfigArgs> logConfig;

    /**
     * @return The logs generated by the function are written to the configured Logstore. See `log_config` below.
     * 
     */
    public Optional<Output<V3FunctionLogConfigArgs>> logConfig() {
        return Optional.ofNullable(this.logConfig);
    }

    /**
     * The memory specification of the function. The unit is MB. The memory size is a multiple of 64MB. The minimum value is 128MB and the maximum value is 32GB. At the same time, the ratio of cpu to memorySize (calculated by GB) should be between 1:1 and 1:4.
     * 
     */
    @Import(name="memorySize")
    private @Nullable Output<Integer> memorySize;

    /**
     * @return The memory specification of the function. The unit is MB. The memory size is a multiple of 64MB. The minimum value is 128MB and the maximum value is 32GB. At the same time, the ratio of cpu to memorySize (calculated by GB) should be between 1:1 and 1:4.
     * 
     */
    public Optional<Output<Integer>> memorySize() {
        return Optional.ofNullable(this.memorySize);
    }

    /**
     * NAS configuration. After this parameter is configured, the function can access the specified NAS resource. See `nas_config` below.
     * 
     */
    @Import(name="nasConfig")
    private @Nullable Output<V3FunctionNasConfigArgs> nasConfig;

    /**
     * @return NAS configuration. After this parameter is configured, the function can access the specified NAS resource. See `nas_config` below.
     * 
     */
    public Optional<Output<V3FunctionNasConfigArgs>> nasConfig() {
        return Optional.ofNullable(this.nasConfig);
    }

    /**
     * OSS mount configuration See `oss_mount_config` below.
     * 
     */
    @Import(name="ossMountConfig")
    private @Nullable Output<V3FunctionOssMountConfigArgs> ossMountConfig;

    /**
     * @return OSS mount configuration See `oss_mount_config` below.
     * 
     */
    public Optional<Output<V3FunctionOssMountConfigArgs>> ossMountConfig() {
        return Optional.ofNullable(this.ossMountConfig);
    }

    /**
     * The user is authorized to the RAM role of function compute. After the configuration, function compute will assume this role to generate temporary access credentials. In the function, you can use the temporary access credentials of the role to access the specified Alibaba cloud service, such as OSS and OTS
     * 
     */
    @Import(name="role")
    private @Nullable Output<String> role;

    /**
     * @return The user is authorized to the RAM role of function compute. After the configuration, function compute will assume this role to generate temporary access credentials. In the function, you can use the temporary access credentials of the role to access the specified Alibaba cloud service, such as OSS and OTS
     * 
     */
    public Optional<Output<String>> role() {
        return Optional.ofNullable(this.role);
    }

    /**
     * Function runtime type
     * 
     */
    @Import(name="runtime")
    private @Nullable Output<String> runtime;

    /**
     * @return Function runtime type
     * 
     */
    public Optional<Output<String>> runtime() {
        return Optional.ofNullable(this.runtime);
    }

    /**
     * The affinity policy of the function compute call request. To implement the request affinity of the MCP SSE protocol, set it to MCP_SSE. If Cookie affinity is used, it can be set to GENERATED_COOKIE. If Header affinity is used, it can be set to HEADER_FIELD. If it is not set or set to NONE, the affinity effect is not set, and the request is routed according to the default scheduling policy of the function calculation system.
     * 
     */
    @Import(name="sessionAffinity")
    private @Nullable Output<String> sessionAffinity;

    /**
     * @return The affinity policy of the function compute call request. To implement the request affinity of the MCP SSE protocol, set it to MCP_SSE. If Cookie affinity is used, it can be set to GENERATED_COOKIE. If Header affinity is used, it can be set to HEADER_FIELD. If it is not set or set to NONE, the affinity effect is not set, and the request is routed according to the default scheduling policy of the function calculation system.
     * 
     */
    public Optional<Output<String>> sessionAffinity() {
        return Optional.ofNullable(this.sessionAffinity);
    }

    /**
     * When you set the sessionAffinity affinity type, you need to set the relevant affinity configuration. For example, the MCP_SSE affinity needs to fill in the mcpssessionaffinityconfig configuration. The Cookie affinity needs to be filled with the CookieSessionAffinityConfig configuration, and the Header Field affinity needs to be filled with the HeaderFieldSessionAffinityConfig configuration.
     * 
     */
    @Import(name="sessionAffinityConfig")
    private @Nullable Output<String> sessionAffinityConfig;

    /**
     * @return When you set the sessionAffinity affinity type, you need to set the relevant affinity configuration. For example, the MCP_SSE affinity needs to fill in the mcpssessionaffinityconfig configuration. The Cookie affinity needs to be filled with the CookieSessionAffinityConfig configuration, and the Header Field affinity needs to be filled with the HeaderFieldSessionAffinityConfig configuration.
     * 
     */
    public Optional<Output<String>> sessionAffinityConfig() {
        return Optional.ofNullable(this.sessionAffinityConfig);
    }

    /**
     * Function Status
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return Function Status
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * The reason why the function is in the current state
     * 
     */
    @Import(name="stateReason")
    private @Nullable Output<String> stateReason;

    /**
     * @return The reason why the function is in the current state
     * 
     */
    public Optional<Output<String>> stateReason() {
        return Optional.ofNullable(this.stateReason);
    }

    /**
     * The status code of the reason the function is in the current state.
     * 
     */
    @Import(name="stateReasonCode")
    private @Nullable Output<String> stateReasonCode;

    /**
     * @return The status code of the reason the function is in the current state.
     * 
     */
    public Optional<Output<String>> stateReasonCode() {
        return Optional.ofNullable(this.stateReasonCode);
    }

    /**
     * The tag of the resource
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return The tag of the resource
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * The maximum running time of the function, in seconds.
     * 
     */
    @Import(name="timeout")
    private @Nullable Output<Integer> timeout;

    /**
     * @return The maximum running time of the function, in seconds.
     * 
     */
    public Optional<Output<Integer>> timeout() {
        return Optional.ofNullable(this.timeout);
    }

    /**
     * Tracing configuration
     * 
     */
    @Import(name="tracingConfig")
    private @Nullable Output<V3FunctionTracingConfigArgs> tracingConfig;

    /**
     * @return Tracing configuration
     * 
     */
    public Optional<Output<V3FunctionTracingConfigArgs>> tracingConfig() {
        return Optional.ofNullable(this.tracingConfig);
    }

    /**
     * VPC configuration. After this parameter is configured, the function can access the specified VPC resources. See `vpc_config` below.
     * 
     */
    @Import(name="vpcConfig")
    private @Nullable Output<V3FunctionVpcConfigArgs> vpcConfig;

    /**
     * @return VPC configuration. After this parameter is configured, the function can access the specified VPC resources. See `vpc_config` below.
     * 
     */
    public Optional<Output<V3FunctionVpcConfigArgs>> vpcConfig() {
        return Optional.ofNullable(this.vpcConfig);
    }

    private V3FunctionState() {}

    private V3FunctionState(V3FunctionState $) {
        this.code = $.code;
        this.codeSize = $.codeSize;
        this.cpu = $.cpu;
        this.createTime = $.createTime;
        this.customContainerConfig = $.customContainerConfig;
        this.customDns = $.customDns;
        this.customRuntimeConfig = $.customRuntimeConfig;
        this.description = $.description;
        this.diskSize = $.diskSize;
        this.environmentVariables = $.environmentVariables;
        this.functionArn = $.functionArn;
        this.functionId = $.functionId;
        this.functionName = $.functionName;
        this.gpuConfig = $.gpuConfig;
        this.handler = $.handler;
        this.instanceConcurrency = $.instanceConcurrency;
        this.instanceIsolationMode = $.instanceIsolationMode;
        this.instanceLifecycleConfig = $.instanceLifecycleConfig;
        this.internetAccess = $.internetAccess;
        this.invocationRestriction = $.invocationRestriction;
        this.lastModifiedTime = $.lastModifiedTime;
        this.lastUpdateStatus = $.lastUpdateStatus;
        this.lastUpdateStatusReason = $.lastUpdateStatusReason;
        this.lastUpdateStatusReasonCode = $.lastUpdateStatusReasonCode;
        this.layers = $.layers;
        this.logConfig = $.logConfig;
        this.memorySize = $.memorySize;
        this.nasConfig = $.nasConfig;
        this.ossMountConfig = $.ossMountConfig;
        this.role = $.role;
        this.runtime = $.runtime;
        this.sessionAffinity = $.sessionAffinity;
        this.sessionAffinityConfig = $.sessionAffinityConfig;
        this.state = $.state;
        this.stateReason = $.stateReason;
        this.stateReasonCode = $.stateReasonCode;
        this.tags = $.tags;
        this.timeout = $.timeout;
        this.tracingConfig = $.tracingConfig;
        this.vpcConfig = $.vpcConfig;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(V3FunctionState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private V3FunctionState $;

        public Builder() {
            $ = new V3FunctionState();
        }

        public Builder(V3FunctionState defaults) {
            $ = new V3FunctionState(Objects.requireNonNull(defaults));
        }

        /**
         * @param code Function code ZIP package. code and customContainerConfig. See `code` below.
         * 
         * @return builder
         * 
         */
        public Builder code(@Nullable Output<V3FunctionCodeArgs> code) {
            $.code = code;
            return this;
        }

        /**
         * @param code Function code ZIP package. code and customContainerConfig. See `code` below.
         * 
         * @return builder
         * 
         */
        public Builder code(V3FunctionCodeArgs code) {
            return code(Output.of(code));
        }

        /**
         * @param codeSize The code package size of the function returned by the system, in byte Example : 1024
         * 
         * @return builder
         * 
         */
        public Builder codeSize(@Nullable Output<Integer> codeSize) {
            $.codeSize = codeSize;
            return this;
        }

        /**
         * @param codeSize The code package size of the function returned by the system, in byte Example : 1024
         * 
         * @return builder
         * 
         */
        public Builder codeSize(Integer codeSize) {
            return codeSize(Output.of(codeSize));
        }

        /**
         * @param cpu The CPU specification of the function. The unit is vCPU, which is a multiple of the 0.05 vCPU.
         * 
         * @return builder
         * 
         */
        public Builder cpu(@Nullable Output<Double> cpu) {
            $.cpu = cpu;
            return this;
        }

        /**
         * @param cpu The CPU specification of the function. The unit is vCPU, which is a multiple of the 0.05 vCPU.
         * 
         * @return builder
         * 
         */
        public Builder cpu(Double cpu) {
            return cpu(Output.of(cpu));
        }

        /**
         * @param createTime The creation time of the function.
         * 
         * @return builder
         * 
         */
        public Builder createTime(@Nullable Output<String> createTime) {
            $.createTime = createTime;
            return this;
        }

        /**
         * @param createTime The creation time of the function.
         * 
         * @return builder
         * 
         */
        public Builder createTime(String createTime) {
            return createTime(Output.of(createTime));
        }

        /**
         * @param customContainerConfig The configuration of the custom container runtime. After the configuration is successful, the function can use the custom container image to execute the function. code and customContainerConfig. See `custom_container_config` below.
         * 
         * @return builder
         * 
         */
        public Builder customContainerConfig(@Nullable Output<V3FunctionCustomContainerConfigArgs> customContainerConfig) {
            $.customContainerConfig = customContainerConfig;
            return this;
        }

        /**
         * @param customContainerConfig The configuration of the custom container runtime. After the configuration is successful, the function can use the custom container image to execute the function. code and customContainerConfig. See `custom_container_config` below.
         * 
         * @return builder
         * 
         */
        public Builder customContainerConfig(V3FunctionCustomContainerConfigArgs customContainerConfig) {
            return customContainerConfig(Output.of(customContainerConfig));
        }

        /**
         * @param customDns Function custom DNS configuration See `custom_dns` below.
         * 
         * @return builder
         * 
         */
        public Builder customDns(@Nullable Output<V3FunctionCustomDnsArgs> customDns) {
            $.customDns = customDns;
            return this;
        }

        /**
         * @param customDns Function custom DNS configuration See `custom_dns` below.
         * 
         * @return builder
         * 
         */
        public Builder customDns(V3FunctionCustomDnsArgs customDns) {
            return customDns(Output.of(customDns));
        }

        /**
         * @param customRuntimeConfig Customize the runtime configuration. See `custom_runtime_config` below.
         * 
         * @return builder
         * 
         */
        public Builder customRuntimeConfig(@Nullable Output<V3FunctionCustomRuntimeConfigArgs> customRuntimeConfig) {
            $.customRuntimeConfig = customRuntimeConfig;
            return this;
        }

        /**
         * @param customRuntimeConfig Customize the runtime configuration. See `custom_runtime_config` below.
         * 
         * @return builder
         * 
         */
        public Builder customRuntimeConfig(V3FunctionCustomRuntimeConfigArgs customRuntimeConfig) {
            return customRuntimeConfig(Output.of(customRuntimeConfig));
        }

        /**
         * @param description The description of the function. The function compute system does not use this attribute value, but we recommend that you set a concise and clear description for the function.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The description of the function. The function compute system does not use this attribute value, but we recommend that you set a concise and clear description for the function.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param diskSize The disk specification of the function, in MB. The optional value is 512 MB or 10240MB.
         * 
         * @return builder
         * 
         */
        public Builder diskSize(@Nullable Output<Integer> diskSize) {
            $.diskSize = diskSize;
            return this;
        }

        /**
         * @param diskSize The disk specification of the function, in MB. The optional value is 512 MB or 10240MB.
         * 
         * @return builder
         * 
         */
        public Builder diskSize(Integer diskSize) {
            return diskSize(Output.of(diskSize));
        }

        /**
         * @param environmentVariables The environment variable set for the function, you can get the value of the environment variable in the function.
         * 
         * @return builder
         * 
         */
        public Builder environmentVariables(@Nullable Output<Map<String,String>> environmentVariables) {
            $.environmentVariables = environmentVariables;
            return this;
        }

        /**
         * @param environmentVariables The environment variable set for the function, you can get the value of the environment variable in the function.
         * 
         * @return builder
         * 
         */
        public Builder environmentVariables(Map<String,String> environmentVariables) {
            return environmentVariables(Output.of(environmentVariables));
        }

        /**
         * @param functionArn ARN of function
         * 
         * @return builder
         * 
         */
        public Builder functionArn(@Nullable Output<String> functionArn) {
            $.functionArn = functionArn;
            return this;
        }

        /**
         * @param functionArn ARN of function
         * 
         * @return builder
         * 
         */
        public Builder functionArn(String functionArn) {
            return functionArn(Output.of(functionArn));
        }

        /**
         * @param functionId The first ID of the resource
         * 
         * @return builder
         * 
         */
        public Builder functionId(@Nullable Output<String> functionId) {
            $.functionId = functionId;
            return this;
        }

        /**
         * @param functionId The first ID of the resource
         * 
         * @return builder
         * 
         */
        public Builder functionId(String functionId) {
            return functionId(Output.of(functionId));
        }

        /**
         * @param functionName The function name. Consists of uppercase and lowercase letters, digits (0 to 9), underscores (_), and dashes (-). It must begin with an English letter (a ~ z), (A ~ Z), or an underscore (_). Case sensitive. The length is 1~128 characters.
         * 
         * @return builder
         * 
         */
        public Builder functionName(@Nullable Output<String> functionName) {
            $.functionName = functionName;
            return this;
        }

        /**
         * @param functionName The function name. Consists of uppercase and lowercase letters, digits (0 to 9), underscores (_), and dashes (-). It must begin with an English letter (a ~ z), (A ~ Z), or an underscore (_). Case sensitive. The length is 1~128 characters.
         * 
         * @return builder
         * 
         */
        public Builder functionName(String functionName) {
            return functionName(Output.of(functionName));
        }

        /**
         * @param gpuConfig Function GPU configuration. See `gpu_config` below.
         * 
         * @return builder
         * 
         */
        public Builder gpuConfig(@Nullable Output<V3FunctionGpuConfigArgs> gpuConfig) {
            $.gpuConfig = gpuConfig;
            return this;
        }

        /**
         * @param gpuConfig Function GPU configuration. See `gpu_config` below.
         * 
         * @return builder
         * 
         */
        public Builder gpuConfig(V3FunctionGpuConfigArgs gpuConfig) {
            return gpuConfig(Output.of(gpuConfig));
        }

        /**
         * @param handler Function Handler: the call entry for the function compute system to run your function.
         * 
         * @return builder
         * 
         */
        public Builder handler(@Nullable Output<String> handler) {
            $.handler = handler;
            return this;
        }

        /**
         * @param handler Function Handler: the call entry for the function compute system to run your function.
         * 
         * @return builder
         * 
         */
        public Builder handler(String handler) {
            return handler(Output.of(handler));
        }

        /**
         * @param instanceConcurrency Maximum instance concurrency.
         * 
         * @return builder
         * 
         */
        public Builder instanceConcurrency(@Nullable Output<Integer> instanceConcurrency) {
            $.instanceConcurrency = instanceConcurrency;
            return this;
        }

        /**
         * @param instanceConcurrency Maximum instance concurrency.
         * 
         * @return builder
         * 
         */
        public Builder instanceConcurrency(Integer instanceConcurrency) {
            return instanceConcurrency(Output.of(instanceConcurrency));
        }

        /**
         * @param instanceIsolationMode Instance isolation mode
         * 
         * @return builder
         * 
         */
        public Builder instanceIsolationMode(@Nullable Output<String> instanceIsolationMode) {
            $.instanceIsolationMode = instanceIsolationMode;
            return this;
        }

        /**
         * @param instanceIsolationMode Instance isolation mode
         * 
         * @return builder
         * 
         */
        public Builder instanceIsolationMode(String instanceIsolationMode) {
            return instanceIsolationMode(Output.of(instanceIsolationMode));
        }

        /**
         * @param instanceLifecycleConfig Instance lifecycle callback method configuration. See `instance_lifecycle_config` below.
         * 
         * @return builder
         * 
         */
        public Builder instanceLifecycleConfig(@Nullable Output<V3FunctionInstanceLifecycleConfigArgs> instanceLifecycleConfig) {
            $.instanceLifecycleConfig = instanceLifecycleConfig;
            return this;
        }

        /**
         * @param instanceLifecycleConfig Instance lifecycle callback method configuration. See `instance_lifecycle_config` below.
         * 
         * @return builder
         * 
         */
        public Builder instanceLifecycleConfig(V3FunctionInstanceLifecycleConfigArgs instanceLifecycleConfig) {
            return instanceLifecycleConfig(Output.of(instanceLifecycleConfig));
        }

        /**
         * @param internetAccess Allow function to access public network
         * 
         * @return builder
         * 
         */
        public Builder internetAccess(@Nullable Output<Boolean> internetAccess) {
            $.internetAccess = internetAccess;
            return this;
        }

        /**
         * @param internetAccess Allow function to access public network
         * 
         * @return builder
         * 
         */
        public Builder internetAccess(Boolean internetAccess) {
            return internetAccess(Output.of(internetAccess));
        }

        /**
         * @param invocationRestriction Invocation Restriction Detail See `invocation_restriction` below.
         * 
         * @return builder
         * 
         */
        public Builder invocationRestriction(@Nullable Output<V3FunctionInvocationRestrictionArgs> invocationRestriction) {
            $.invocationRestriction = invocationRestriction;
            return this;
        }

        /**
         * @param invocationRestriction Invocation Restriction Detail See `invocation_restriction` below.
         * 
         * @return builder
         * 
         */
        public Builder invocationRestriction(V3FunctionInvocationRestrictionArgs invocationRestriction) {
            return invocationRestriction(Output.of(invocationRestriction));
        }

        /**
         * @param lastModifiedTime Last time the function was Updated
         * 
         * @return builder
         * 
         */
        public Builder lastModifiedTime(@Nullable Output<String> lastModifiedTime) {
            $.lastModifiedTime = lastModifiedTime;
            return this;
        }

        /**
         * @param lastModifiedTime Last time the function was Updated
         * 
         * @return builder
         * 
         */
        public Builder lastModifiedTime(String lastModifiedTime) {
            return lastModifiedTime(Output.of(lastModifiedTime));
        }

        /**
         * @param lastUpdateStatus The status of the last function update operation. When the function is created successfully, the value is Successful. Optional values are Successful, Failed, and InProgress.
         * 
         * @return builder
         * 
         */
        public Builder lastUpdateStatus(@Nullable Output<String> lastUpdateStatus) {
            $.lastUpdateStatus = lastUpdateStatus;
            return this;
        }

        /**
         * @param lastUpdateStatus The status of the last function update operation. When the function is created successfully, the value is Successful. Optional values are Successful, Failed, and InProgress.
         * 
         * @return builder
         * 
         */
        public Builder lastUpdateStatus(String lastUpdateStatus) {
            return lastUpdateStatus(Output.of(lastUpdateStatus));
        }

        /**
         * @param lastUpdateStatusReason The reason that caused the last function to update the Operation State to the current value
         * 
         * @return builder
         * 
         */
        public Builder lastUpdateStatusReason(@Nullable Output<String> lastUpdateStatusReason) {
            $.lastUpdateStatusReason = lastUpdateStatusReason;
            return this;
        }

        /**
         * @param lastUpdateStatusReason The reason that caused the last function to update the Operation State to the current value
         * 
         * @return builder
         * 
         */
        public Builder lastUpdateStatusReason(String lastUpdateStatusReason) {
            return lastUpdateStatusReason(Output.of(lastUpdateStatusReason));
        }

        /**
         * @param lastUpdateStatusReasonCode Status code of the reason that caused the last function update operation status to the current value
         * 
         * @return builder
         * 
         */
        public Builder lastUpdateStatusReasonCode(@Nullable Output<String> lastUpdateStatusReasonCode) {
            $.lastUpdateStatusReasonCode = lastUpdateStatusReasonCode;
            return this;
        }

        /**
         * @param lastUpdateStatusReasonCode Status code of the reason that caused the last function update operation status to the current value
         * 
         * @return builder
         * 
         */
        public Builder lastUpdateStatusReasonCode(String lastUpdateStatusReasonCode) {
            return lastUpdateStatusReasonCode(Output.of(lastUpdateStatusReasonCode));
        }

        /**
         * @param layers The list of layers.
         * 
         * @return builder
         * 
         */
        public Builder layers(@Nullable Output<List<String>> layers) {
            $.layers = layers;
            return this;
        }

        /**
         * @param layers The list of layers.
         * 
         * @return builder
         * 
         */
        public Builder layers(List<String> layers) {
            return layers(Output.of(layers));
        }

        /**
         * @param layers The list of layers.
         * 
         * @return builder
         * 
         */
        public Builder layers(String... layers) {
            return layers(List.of(layers));
        }

        /**
         * @param logConfig The logs generated by the function are written to the configured Logstore. See `log_config` below.
         * 
         * @return builder
         * 
         */
        public Builder logConfig(@Nullable Output<V3FunctionLogConfigArgs> logConfig) {
            $.logConfig = logConfig;
            return this;
        }

        /**
         * @param logConfig The logs generated by the function are written to the configured Logstore. See `log_config` below.
         * 
         * @return builder
         * 
         */
        public Builder logConfig(V3FunctionLogConfigArgs logConfig) {
            return logConfig(Output.of(logConfig));
        }

        /**
         * @param memorySize The memory specification of the function. The unit is MB. The memory size is a multiple of 64MB. The minimum value is 128MB and the maximum value is 32GB. At the same time, the ratio of cpu to memorySize (calculated by GB) should be between 1:1 and 1:4.
         * 
         * @return builder
         * 
         */
        public Builder memorySize(@Nullable Output<Integer> memorySize) {
            $.memorySize = memorySize;
            return this;
        }

        /**
         * @param memorySize The memory specification of the function. The unit is MB. The memory size is a multiple of 64MB. The minimum value is 128MB and the maximum value is 32GB. At the same time, the ratio of cpu to memorySize (calculated by GB) should be between 1:1 and 1:4.
         * 
         * @return builder
         * 
         */
        public Builder memorySize(Integer memorySize) {
            return memorySize(Output.of(memorySize));
        }

        /**
         * @param nasConfig NAS configuration. After this parameter is configured, the function can access the specified NAS resource. See `nas_config` below.
         * 
         * @return builder
         * 
         */
        public Builder nasConfig(@Nullable Output<V3FunctionNasConfigArgs> nasConfig) {
            $.nasConfig = nasConfig;
            return this;
        }

        /**
         * @param nasConfig NAS configuration. After this parameter is configured, the function can access the specified NAS resource. See `nas_config` below.
         * 
         * @return builder
         * 
         */
        public Builder nasConfig(V3FunctionNasConfigArgs nasConfig) {
            return nasConfig(Output.of(nasConfig));
        }

        /**
         * @param ossMountConfig OSS mount configuration See `oss_mount_config` below.
         * 
         * @return builder
         * 
         */
        public Builder ossMountConfig(@Nullable Output<V3FunctionOssMountConfigArgs> ossMountConfig) {
            $.ossMountConfig = ossMountConfig;
            return this;
        }

        /**
         * @param ossMountConfig OSS mount configuration See `oss_mount_config` below.
         * 
         * @return builder
         * 
         */
        public Builder ossMountConfig(V3FunctionOssMountConfigArgs ossMountConfig) {
            return ossMountConfig(Output.of(ossMountConfig));
        }

        /**
         * @param role The user is authorized to the RAM role of function compute. After the configuration, function compute will assume this role to generate temporary access credentials. In the function, you can use the temporary access credentials of the role to access the specified Alibaba cloud service, such as OSS and OTS
         * 
         * @return builder
         * 
         */
        public Builder role(@Nullable Output<String> role) {
            $.role = role;
            return this;
        }

        /**
         * @param role The user is authorized to the RAM role of function compute. After the configuration, function compute will assume this role to generate temporary access credentials. In the function, you can use the temporary access credentials of the role to access the specified Alibaba cloud service, such as OSS and OTS
         * 
         * @return builder
         * 
         */
        public Builder role(String role) {
            return role(Output.of(role));
        }

        /**
         * @param runtime Function runtime type
         * 
         * @return builder
         * 
         */
        public Builder runtime(@Nullable Output<String> runtime) {
            $.runtime = runtime;
            return this;
        }

        /**
         * @param runtime Function runtime type
         * 
         * @return builder
         * 
         */
        public Builder runtime(String runtime) {
            return runtime(Output.of(runtime));
        }

        /**
         * @param sessionAffinity The affinity policy of the function compute call request. To implement the request affinity of the MCP SSE protocol, set it to MCP_SSE. If Cookie affinity is used, it can be set to GENERATED_COOKIE. If Header affinity is used, it can be set to HEADER_FIELD. If it is not set or set to NONE, the affinity effect is not set, and the request is routed according to the default scheduling policy of the function calculation system.
         * 
         * @return builder
         * 
         */
        public Builder sessionAffinity(@Nullable Output<String> sessionAffinity) {
            $.sessionAffinity = sessionAffinity;
            return this;
        }

        /**
         * @param sessionAffinity The affinity policy of the function compute call request. To implement the request affinity of the MCP SSE protocol, set it to MCP_SSE. If Cookie affinity is used, it can be set to GENERATED_COOKIE. If Header affinity is used, it can be set to HEADER_FIELD. If it is not set or set to NONE, the affinity effect is not set, and the request is routed according to the default scheduling policy of the function calculation system.
         * 
         * @return builder
         * 
         */
        public Builder sessionAffinity(String sessionAffinity) {
            return sessionAffinity(Output.of(sessionAffinity));
        }

        /**
         * @param sessionAffinityConfig When you set the sessionAffinity affinity type, you need to set the relevant affinity configuration. For example, the MCP_SSE affinity needs to fill in the mcpssessionaffinityconfig configuration. The Cookie affinity needs to be filled with the CookieSessionAffinityConfig configuration, and the Header Field affinity needs to be filled with the HeaderFieldSessionAffinityConfig configuration.
         * 
         * @return builder
         * 
         */
        public Builder sessionAffinityConfig(@Nullable Output<String> sessionAffinityConfig) {
            $.sessionAffinityConfig = sessionAffinityConfig;
            return this;
        }

        /**
         * @param sessionAffinityConfig When you set the sessionAffinity affinity type, you need to set the relevant affinity configuration. For example, the MCP_SSE affinity needs to fill in the mcpssessionaffinityconfig configuration. The Cookie affinity needs to be filled with the CookieSessionAffinityConfig configuration, and the Header Field affinity needs to be filled with the HeaderFieldSessionAffinityConfig configuration.
         * 
         * @return builder
         * 
         */
        public Builder sessionAffinityConfig(String sessionAffinityConfig) {
            return sessionAffinityConfig(Output.of(sessionAffinityConfig));
        }

        /**
         * @param state Function Status
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state Function Status
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        /**
         * @param stateReason The reason why the function is in the current state
         * 
         * @return builder
         * 
         */
        public Builder stateReason(@Nullable Output<String> stateReason) {
            $.stateReason = stateReason;
            return this;
        }

        /**
         * @param stateReason The reason why the function is in the current state
         * 
         * @return builder
         * 
         */
        public Builder stateReason(String stateReason) {
            return stateReason(Output.of(stateReason));
        }

        /**
         * @param stateReasonCode The status code of the reason the function is in the current state.
         * 
         * @return builder
         * 
         */
        public Builder stateReasonCode(@Nullable Output<String> stateReasonCode) {
            $.stateReasonCode = stateReasonCode;
            return this;
        }

        /**
         * @param stateReasonCode The status code of the reason the function is in the current state.
         * 
         * @return builder
         * 
         */
        public Builder stateReasonCode(String stateReasonCode) {
            return stateReasonCode(Output.of(stateReasonCode));
        }

        /**
         * @param tags The tag of the resource
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags The tag of the resource
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param timeout The maximum running time of the function, in seconds.
         * 
         * @return builder
         * 
         */
        public Builder timeout(@Nullable Output<Integer> timeout) {
            $.timeout = timeout;
            return this;
        }

        /**
         * @param timeout The maximum running time of the function, in seconds.
         * 
         * @return builder
         * 
         */
        public Builder timeout(Integer timeout) {
            return timeout(Output.of(timeout));
        }

        /**
         * @param tracingConfig Tracing configuration
         * 
         * @return builder
         * 
         */
        public Builder tracingConfig(@Nullable Output<V3FunctionTracingConfigArgs> tracingConfig) {
            $.tracingConfig = tracingConfig;
            return this;
        }

        /**
         * @param tracingConfig Tracing configuration
         * 
         * @return builder
         * 
         */
        public Builder tracingConfig(V3FunctionTracingConfigArgs tracingConfig) {
            return tracingConfig(Output.of(tracingConfig));
        }

        /**
         * @param vpcConfig VPC configuration. After this parameter is configured, the function can access the specified VPC resources. See `vpc_config` below.
         * 
         * @return builder
         * 
         */
        public Builder vpcConfig(@Nullable Output<V3FunctionVpcConfigArgs> vpcConfig) {
            $.vpcConfig = vpcConfig;
            return this;
        }

        /**
         * @param vpcConfig VPC configuration. After this parameter is configured, the function can access the specified VPC resources. See `vpc_config` below.
         * 
         * @return builder
         * 
         */
        public Builder vpcConfig(V3FunctionVpcConfigArgs vpcConfig) {
            return vpcConfig(Output.of(vpcConfig));
        }

        public V3FunctionState build() {
            return $;
        }
    }

}
