// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.log;

import com.pulumi.alicloud.log.inputs.StoreEncryptConfArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class StoreArgs extends com.pulumi.resources.ResourceArgs {

    public static final StoreArgs Empty = new StoreArgs();

    /**
     * Determines whether to append log meta automatically. The meta includes log receive time and client IP address. Default to `true`.
     * 
     */
    @Import(name="appendMeta")
    private @Nullable Output<Boolean> appendMeta;

    /**
     * @return Determines whether to append log meta automatically. The meta includes log receive time and client IP address. Default to `true`.
     * 
     */
    public Optional<Output<Boolean>> appendMeta() {
        return Optional.ofNullable(this.appendMeta);
    }

    /**
     * Determines whether to automatically split a shard. Default to `false`.
     * 
     */
    @Import(name="autoSplit")
    private @Nullable Output<Boolean> autoSplit;

    /**
     * @return Determines whether to automatically split a shard. Default to `false`.
     * 
     */
    public Optional<Output<Boolean>> autoSplit() {
        return Optional.ofNullable(this.autoSplit);
    }

    /**
     * Determines whether to enable Web Tracking. Default `false`.
     * 
     */
    @Import(name="enableWebTracking")
    private @Nullable Output<Boolean> enableWebTracking;

    /**
     * @return Determines whether to enable Web Tracking. Default `false`.
     * 
     */
    public Optional<Output<Boolean>> enableWebTracking() {
        return Optional.ofNullable(this.enableWebTracking);
    }

    /**
     * Encrypted storage of data, providing data static protection capability, `encrypt_conf` can be updated since 1.188.0+ (only `enable` change is supported when updating logstore)
     * 
     */
    @Import(name="encryptConf")
    private @Nullable Output<StoreEncryptConfArgs> encryptConf;

    /**
     * @return Encrypted storage of data, providing data static protection capability, `encrypt_conf` can be updated since 1.188.0+ (only `enable` change is supported when updating logstore)
     * 
     */
    public Optional<Output<StoreEncryptConfArgs>> encryptConf() {
        return Optional.ofNullable(this.encryptConf);
    }

    /**
     * The ttl of hot storage. Default to `30`, at least `30`, hot storage ttl must be less than ttl.
     * 
     */
    @Import(name="hotTtl")
    private @Nullable Output<Integer> hotTtl;

    /**
     * @return The ttl of hot storage. Default to `30`, at least `30`, hot storage ttl must be less than ttl.
     * 
     */
    public Optional<Output<Integer>> hotTtl() {
        return Optional.ofNullable(this.hotTtl);
    }

    /**
     * The maximum number of shards for automatic split, which is in the range of 1 to 64. You must specify this parameter when autoSplit is true.
     * 
     */
    @Import(name="maxSplitShardCount")
    private @Nullable Output<Integer> maxSplitShardCount;

    /**
     * @return The maximum number of shards for automatic split, which is in the range of 1 to 64. You must specify this parameter when autoSplit is true.
     * 
     */
    public Optional<Output<Integer>> maxSplitShardCount() {
        return Optional.ofNullable(this.maxSplitShardCount);
    }

    /**
     * The mode of storage. Default to `standard`, must be `standard` or `query`, `mode` is only valid when creating, can&#39;t be changed after created.
     * 
     */
    @Import(name="mode")
    private @Nullable Output<String> mode;

    /**
     * @return The mode of storage. Default to `standard`, must be `standard` or `query`, `mode` is only valid when creating, can&#39;t be changed after created.
     * 
     */
    public Optional<Output<String>> mode() {
        return Optional.ofNullable(this.mode);
    }

    /**
     * The log store, which is unique in the same project.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The log store, which is unique in the same project.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The project name to the log store belongs.
     * 
     */
    @Import(name="project", required=true)
    private Output<String> project;

    /**
     * @return The project name to the log store belongs.
     * 
     */
    public Output<String> project() {
        return this.project;
    }

    /**
     * The data retention time (in days). Valid values: [1-3650]. Default to `30`. Log store data will be stored permanently when the value is `3650`.
     * 
     */
    @Import(name="retentionPeriod")
    private @Nullable Output<Integer> retentionPeriod;

    /**
     * @return The data retention time (in days). Valid values: [1-3650]. Default to `30`. Log store data will be stored permanently when the value is `3650`.
     * 
     */
    public Optional<Output<Integer>> retentionPeriod() {
        return Optional.ofNullable(this.retentionPeriod);
    }

    /**
     * The number of shards in this log store. Default to 2. You can modify it by &#34;Split&#34; or &#34;Merge&#34; operations. [Refer to details](https://www.alibabacloud.com/help/doc-detail/28976.htm)
     * 
     */
    @Import(name="shardCount")
    private @Nullable Output<Integer> shardCount;

    /**
     * @return The number of shards in this log store. Default to 2. You can modify it by &#34;Split&#34; or &#34;Merge&#34; operations. [Refer to details](https://www.alibabacloud.com/help/doc-detail/28976.htm)
     * 
     */
    public Optional<Output<Integer>> shardCount() {
        return Optional.ofNullable(this.shardCount);
    }

    /**
     * Determines whether store type is metric. `Metrics` means metric store, empty means log store.
     * 
     */
    @Import(name="telemetryType")
    private @Nullable Output<String> telemetryType;

    /**
     * @return Determines whether store type is metric. `Metrics` means metric store, empty means log store.
     * 
     */
    public Optional<Output<String>> telemetryType() {
        return Optional.ofNullable(this.telemetryType);
    }

    private StoreArgs() {}

    private StoreArgs(StoreArgs $) {
        this.appendMeta = $.appendMeta;
        this.autoSplit = $.autoSplit;
        this.enableWebTracking = $.enableWebTracking;
        this.encryptConf = $.encryptConf;
        this.hotTtl = $.hotTtl;
        this.maxSplitShardCount = $.maxSplitShardCount;
        this.mode = $.mode;
        this.name = $.name;
        this.project = $.project;
        this.retentionPeriod = $.retentionPeriod;
        this.shardCount = $.shardCount;
        this.telemetryType = $.telemetryType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(StoreArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private StoreArgs $;

        public Builder() {
            $ = new StoreArgs();
        }

        public Builder(StoreArgs defaults) {
            $ = new StoreArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param appendMeta Determines whether to append log meta automatically. The meta includes log receive time and client IP address. Default to `true`.
         * 
         * @return builder
         * 
         */
        public Builder appendMeta(@Nullable Output<Boolean> appendMeta) {
            $.appendMeta = appendMeta;
            return this;
        }

        /**
         * @param appendMeta Determines whether to append log meta automatically. The meta includes log receive time and client IP address. Default to `true`.
         * 
         * @return builder
         * 
         */
        public Builder appendMeta(Boolean appendMeta) {
            return appendMeta(Output.of(appendMeta));
        }

        /**
         * @param autoSplit Determines whether to automatically split a shard. Default to `false`.
         * 
         * @return builder
         * 
         */
        public Builder autoSplit(@Nullable Output<Boolean> autoSplit) {
            $.autoSplit = autoSplit;
            return this;
        }

        /**
         * @param autoSplit Determines whether to automatically split a shard. Default to `false`.
         * 
         * @return builder
         * 
         */
        public Builder autoSplit(Boolean autoSplit) {
            return autoSplit(Output.of(autoSplit));
        }

        /**
         * @param enableWebTracking Determines whether to enable Web Tracking. Default `false`.
         * 
         * @return builder
         * 
         */
        public Builder enableWebTracking(@Nullable Output<Boolean> enableWebTracking) {
            $.enableWebTracking = enableWebTracking;
            return this;
        }

        /**
         * @param enableWebTracking Determines whether to enable Web Tracking. Default `false`.
         * 
         * @return builder
         * 
         */
        public Builder enableWebTracking(Boolean enableWebTracking) {
            return enableWebTracking(Output.of(enableWebTracking));
        }

        /**
         * @param encryptConf Encrypted storage of data, providing data static protection capability, `encrypt_conf` can be updated since 1.188.0+ (only `enable` change is supported when updating logstore)
         * 
         * @return builder
         * 
         */
        public Builder encryptConf(@Nullable Output<StoreEncryptConfArgs> encryptConf) {
            $.encryptConf = encryptConf;
            return this;
        }

        /**
         * @param encryptConf Encrypted storage of data, providing data static protection capability, `encrypt_conf` can be updated since 1.188.0+ (only `enable` change is supported when updating logstore)
         * 
         * @return builder
         * 
         */
        public Builder encryptConf(StoreEncryptConfArgs encryptConf) {
            return encryptConf(Output.of(encryptConf));
        }

        /**
         * @param hotTtl The ttl of hot storage. Default to `30`, at least `30`, hot storage ttl must be less than ttl.
         * 
         * @return builder
         * 
         */
        public Builder hotTtl(@Nullable Output<Integer> hotTtl) {
            $.hotTtl = hotTtl;
            return this;
        }

        /**
         * @param hotTtl The ttl of hot storage. Default to `30`, at least `30`, hot storage ttl must be less than ttl.
         * 
         * @return builder
         * 
         */
        public Builder hotTtl(Integer hotTtl) {
            return hotTtl(Output.of(hotTtl));
        }

        /**
         * @param maxSplitShardCount The maximum number of shards for automatic split, which is in the range of 1 to 64. You must specify this parameter when autoSplit is true.
         * 
         * @return builder
         * 
         */
        public Builder maxSplitShardCount(@Nullable Output<Integer> maxSplitShardCount) {
            $.maxSplitShardCount = maxSplitShardCount;
            return this;
        }

        /**
         * @param maxSplitShardCount The maximum number of shards for automatic split, which is in the range of 1 to 64. You must specify this parameter when autoSplit is true.
         * 
         * @return builder
         * 
         */
        public Builder maxSplitShardCount(Integer maxSplitShardCount) {
            return maxSplitShardCount(Output.of(maxSplitShardCount));
        }

        /**
         * @param mode The mode of storage. Default to `standard`, must be `standard` or `query`, `mode` is only valid when creating, can&#39;t be changed after created.
         * 
         * @return builder
         * 
         */
        public Builder mode(@Nullable Output<String> mode) {
            $.mode = mode;
            return this;
        }

        /**
         * @param mode The mode of storage. Default to `standard`, must be `standard` or `query`, `mode` is only valid when creating, can&#39;t be changed after created.
         * 
         * @return builder
         * 
         */
        public Builder mode(String mode) {
            return mode(Output.of(mode));
        }

        /**
         * @param name The log store, which is unique in the same project.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The log store, which is unique in the same project.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param project The project name to the log store belongs.
         * 
         * @return builder
         * 
         */
        public Builder project(Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The project name to the log store belongs.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param retentionPeriod The data retention time (in days). Valid values: [1-3650]. Default to `30`. Log store data will be stored permanently when the value is `3650`.
         * 
         * @return builder
         * 
         */
        public Builder retentionPeriod(@Nullable Output<Integer> retentionPeriod) {
            $.retentionPeriod = retentionPeriod;
            return this;
        }

        /**
         * @param retentionPeriod The data retention time (in days). Valid values: [1-3650]. Default to `30`. Log store data will be stored permanently when the value is `3650`.
         * 
         * @return builder
         * 
         */
        public Builder retentionPeriod(Integer retentionPeriod) {
            return retentionPeriod(Output.of(retentionPeriod));
        }

        /**
         * @param shardCount The number of shards in this log store. Default to 2. You can modify it by &#34;Split&#34; or &#34;Merge&#34; operations. [Refer to details](https://www.alibabacloud.com/help/doc-detail/28976.htm)
         * 
         * @return builder
         * 
         */
        public Builder shardCount(@Nullable Output<Integer> shardCount) {
            $.shardCount = shardCount;
            return this;
        }

        /**
         * @param shardCount The number of shards in this log store. Default to 2. You can modify it by &#34;Split&#34; or &#34;Merge&#34; operations. [Refer to details](https://www.alibabacloud.com/help/doc-detail/28976.htm)
         * 
         * @return builder
         * 
         */
        public Builder shardCount(Integer shardCount) {
            return shardCount(Output.of(shardCount));
        }

        /**
         * @param telemetryType Determines whether store type is metric. `Metrics` means metric store, empty means log store.
         * 
         * @return builder
         * 
         */
        public Builder telemetryType(@Nullable Output<String> telemetryType) {
            $.telemetryType = telemetryType;
            return this;
        }

        /**
         * @param telemetryType Determines whether store type is metric. `Metrics` means metric store, empty means log store.
         * 
         * @return builder
         * 
         */
        public Builder telemetryType(String telemetryType) {
            return telemetryType(Output.of(telemetryType));
        }

        public StoreArgs build() {
            $.project = Objects.requireNonNull($.project, "expected parameter 'project' to be non-null");
            return $;
        }
    }

}
