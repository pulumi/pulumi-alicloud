// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.databasefilesystem.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetSnapshotsSnapshot {
    /**
     * @return The type of the Snapshot.
     * 
     */
    private String category;
    /**
     * @return The creation time of the snapshot.
     * 
     */
    private String createTime;
    /**
     * @return The description of the snapshot.
     * 
     */
    private String description;
    /**
     * @return The ID of the Snapshot.
     * 
     */
    private String id;
    /**
     * @return The ID of the database file system.
     * 
     */
    private String instanceId;
    /**
     * @return The last modification time of the snapshot.
     * 
     */
    private String lastModifiedTime;
    /**
     * @return The progress of the snapshot.
     * 
     */
    private String progress;
    /**
     * @return The remaining completion time of the snapshot being created, in seconds.
     * 
     */
    private Integer remainTime;
    /**
     * @return The retention days of the snapshot.
     * 
     */
    private Integer retentionDays;
    /**
     * @return The ID of the snapshot.
     * 
     */
    private String snapshotId;
    /**
     * @return The name of the snapshot.
     * 
     */
    private String snapshotName;
    /**
     * @return The creation of the snapshot.
     * 
     */
    private String snapshotType;
    /**
     * @return Source database file system capacity.
     * 
     */
    private Integer sourceFsSize;
    /**
     * @return The status of the snapshot. Possible values: `progressing`, `accomplished`, `failed`.
     * 
     */
    private String status;

    private GetSnapshotsSnapshot() {}
    /**
     * @return The type of the Snapshot.
     * 
     */
    public String category() {
        return this.category;
    }
    /**
     * @return The creation time of the snapshot.
     * 
     */
    public String createTime() {
        return this.createTime;
    }
    /**
     * @return The description of the snapshot.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return The ID of the Snapshot.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The ID of the database file system.
     * 
     */
    public String instanceId() {
        return this.instanceId;
    }
    /**
     * @return The last modification time of the snapshot.
     * 
     */
    public String lastModifiedTime() {
        return this.lastModifiedTime;
    }
    /**
     * @return The progress of the snapshot.
     * 
     */
    public String progress() {
        return this.progress;
    }
    /**
     * @return The remaining completion time of the snapshot being created, in seconds.
     * 
     */
    public Integer remainTime() {
        return this.remainTime;
    }
    /**
     * @return The retention days of the snapshot.
     * 
     */
    public Integer retentionDays() {
        return this.retentionDays;
    }
    /**
     * @return The ID of the snapshot.
     * 
     */
    public String snapshotId() {
        return this.snapshotId;
    }
    /**
     * @return The name of the snapshot.
     * 
     */
    public String snapshotName() {
        return this.snapshotName;
    }
    /**
     * @return The creation of the snapshot.
     * 
     */
    public String snapshotType() {
        return this.snapshotType;
    }
    /**
     * @return Source database file system capacity.
     * 
     */
    public Integer sourceFsSize() {
        return this.sourceFsSize;
    }
    /**
     * @return The status of the snapshot. Possible values: `progressing`, `accomplished`, `failed`.
     * 
     */
    public String status() {
        return this.status;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSnapshotsSnapshot defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String category;
        private String createTime;
        private String description;
        private String id;
        private String instanceId;
        private String lastModifiedTime;
        private String progress;
        private Integer remainTime;
        private Integer retentionDays;
        private String snapshotId;
        private String snapshotName;
        private String snapshotType;
        private Integer sourceFsSize;
        private String status;
        public Builder() {}
        public Builder(GetSnapshotsSnapshot defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.category = defaults.category;
    	      this.createTime = defaults.createTime;
    	      this.description = defaults.description;
    	      this.id = defaults.id;
    	      this.instanceId = defaults.instanceId;
    	      this.lastModifiedTime = defaults.lastModifiedTime;
    	      this.progress = defaults.progress;
    	      this.remainTime = defaults.remainTime;
    	      this.retentionDays = defaults.retentionDays;
    	      this.snapshotId = defaults.snapshotId;
    	      this.snapshotName = defaults.snapshotName;
    	      this.snapshotType = defaults.snapshotType;
    	      this.sourceFsSize = defaults.sourceFsSize;
    	      this.status = defaults.status;
        }

        @CustomType.Setter
        public Builder category(String category) {
            this.category = Objects.requireNonNull(category);
            return this;
        }
        @CustomType.Setter
        public Builder createTime(String createTime) {
            this.createTime = Objects.requireNonNull(createTime);
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder instanceId(String instanceId) {
            this.instanceId = Objects.requireNonNull(instanceId);
            return this;
        }
        @CustomType.Setter
        public Builder lastModifiedTime(String lastModifiedTime) {
            this.lastModifiedTime = Objects.requireNonNull(lastModifiedTime);
            return this;
        }
        @CustomType.Setter
        public Builder progress(String progress) {
            this.progress = Objects.requireNonNull(progress);
            return this;
        }
        @CustomType.Setter
        public Builder remainTime(Integer remainTime) {
            this.remainTime = Objects.requireNonNull(remainTime);
            return this;
        }
        @CustomType.Setter
        public Builder retentionDays(Integer retentionDays) {
            this.retentionDays = Objects.requireNonNull(retentionDays);
            return this;
        }
        @CustomType.Setter
        public Builder snapshotId(String snapshotId) {
            this.snapshotId = Objects.requireNonNull(snapshotId);
            return this;
        }
        @CustomType.Setter
        public Builder snapshotName(String snapshotName) {
            this.snapshotName = Objects.requireNonNull(snapshotName);
            return this;
        }
        @CustomType.Setter
        public Builder snapshotType(String snapshotType) {
            this.snapshotType = Objects.requireNonNull(snapshotType);
            return this;
        }
        @CustomType.Setter
        public Builder sourceFsSize(Integer sourceFsSize) {
            this.sourceFsSize = Objects.requireNonNull(sourceFsSize);
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            this.status = Objects.requireNonNull(status);
            return this;
        }
        public GetSnapshotsSnapshot build() {
            final var o = new GetSnapshotsSnapshot();
            o.category = category;
            o.createTime = createTime;
            o.description = description;
            o.id = id;
            o.instanceId = instanceId;
            o.lastModifiedTime = lastModifiedTime;
            o.progress = progress;
            o.remainTime = remainTime;
            o.retentionDays = retentionDays;
            o.snapshotId = snapshotId;
            o.snapshotName = snapshotName;
            o.snapshotType = snapshotType;
            o.sourceFsSize = sourceFsSize;
            o.status = status;
            return o;
        }
    }
}
