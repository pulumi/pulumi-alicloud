// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.ddos;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;


public final class BasicThresholdArgs extends com.pulumi.resources.ResourceArgs {

    public static final BasicThresholdArgs Empty = new BasicThresholdArgs();

    /**
     * Specifies the traffic scrubbing threshold. Unit: Mbit/s. The traffic scrubbing threshold cannot exceed the peak inbound or outbound Internet traffic, whichever is larger, of the asset.
     * 
     */
    @Import(name="bps", required=true)
    private Output<Integer> bps;

    /**
     * @return Specifies the traffic scrubbing threshold. Unit: Mbit/s. The traffic scrubbing threshold cannot exceed the peak inbound or outbound Internet traffic, whichever is larger, of the asset.
     * 
     */
    public Output<Integer> bps() {
        return this.bps;
    }

    /**
     * The ID of the instance.
     * 
     */
    @Import(name="instanceId", required=true)
    private Output<String> instanceId;

    /**
     * @return The ID of the instance.
     * 
     */
    public Output<String> instanceId() {
        return this.instanceId;
    }

    /**
     * The type of the Instance. Valid values: `ecs`,`slb`,`eip`.
     * 
     */
    @Import(name="instanceType", required=true)
    private Output<String> instanceType;

    /**
     * @return The type of the Instance. Valid values: `ecs`,`slb`,`eip`.
     * 
     */
    public Output<String> instanceType() {
        return this.instanceType;
    }

    /**
     * The IP address of the public IP address asset.
     * 
     */
    @Import(name="internetIp", required=true)
    private Output<String> internetIp;

    /**
     * @return The IP address of the public IP address asset.
     * 
     */
    public Output<String> internetIp() {
        return this.internetIp;
    }

    /**
     * The current message number cleaning threshold. Unit: pps.
     * 
     */
    @Import(name="pps", required=true)
    private Output<Integer> pps;

    /**
     * @return The current message number cleaning threshold. Unit: pps.
     * 
     */
    public Output<Integer> pps() {
        return this.pps;
    }

    private BasicThresholdArgs() {}

    private BasicThresholdArgs(BasicThresholdArgs $) {
        this.bps = $.bps;
        this.instanceId = $.instanceId;
        this.instanceType = $.instanceType;
        this.internetIp = $.internetIp;
        this.pps = $.pps;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BasicThresholdArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BasicThresholdArgs $;

        public Builder() {
            $ = new BasicThresholdArgs();
        }

        public Builder(BasicThresholdArgs defaults) {
            $ = new BasicThresholdArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param bps Specifies the traffic scrubbing threshold. Unit: Mbit/s. The traffic scrubbing threshold cannot exceed the peak inbound or outbound Internet traffic, whichever is larger, of the asset.
         * 
         * @return builder
         * 
         */
        public Builder bps(Output<Integer> bps) {
            $.bps = bps;
            return this;
        }

        /**
         * @param bps Specifies the traffic scrubbing threshold. Unit: Mbit/s. The traffic scrubbing threshold cannot exceed the peak inbound or outbound Internet traffic, whichever is larger, of the asset.
         * 
         * @return builder
         * 
         */
        public Builder bps(Integer bps) {
            return bps(Output.of(bps));
        }

        /**
         * @param instanceId The ID of the instance.
         * 
         * @return builder
         * 
         */
        public Builder instanceId(Output<String> instanceId) {
            $.instanceId = instanceId;
            return this;
        }

        /**
         * @param instanceId The ID of the instance.
         * 
         * @return builder
         * 
         */
        public Builder instanceId(String instanceId) {
            return instanceId(Output.of(instanceId));
        }

        /**
         * @param instanceType The type of the Instance. Valid values: `ecs`,`slb`,`eip`.
         * 
         * @return builder
         * 
         */
        public Builder instanceType(Output<String> instanceType) {
            $.instanceType = instanceType;
            return this;
        }

        /**
         * @param instanceType The type of the Instance. Valid values: `ecs`,`slb`,`eip`.
         * 
         * @return builder
         * 
         */
        public Builder instanceType(String instanceType) {
            return instanceType(Output.of(instanceType));
        }

        /**
         * @param internetIp The IP address of the public IP address asset.
         * 
         * @return builder
         * 
         */
        public Builder internetIp(Output<String> internetIp) {
            $.internetIp = internetIp;
            return this;
        }

        /**
         * @param internetIp The IP address of the public IP address asset.
         * 
         * @return builder
         * 
         */
        public Builder internetIp(String internetIp) {
            return internetIp(Output.of(internetIp));
        }

        /**
         * @param pps The current message number cleaning threshold. Unit: pps.
         * 
         * @return builder
         * 
         */
        public Builder pps(Output<Integer> pps) {
            $.pps = pps;
            return this;
        }

        /**
         * @param pps The current message number cleaning threshold. Unit: pps.
         * 
         * @return builder
         * 
         */
        public Builder pps(Integer pps) {
            return pps(Output.of(pps));
        }

        public BasicThresholdArgs build() {
            if ($.bps == null) {
                throw new MissingRequiredPropertyException("BasicThresholdArgs", "bps");
            }
            if ($.instanceId == null) {
                throw new MissingRequiredPropertyException("BasicThresholdArgs", "instanceId");
            }
            if ($.instanceType == null) {
                throw new MissingRequiredPropertyException("BasicThresholdArgs", "instanceType");
            }
            if ($.internetIp == null) {
                throw new MissingRequiredPropertyException("BasicThresholdArgs", "internetIp");
            }
            if ($.pps == null) {
                throw new MissingRequiredPropertyException("BasicThresholdArgs", "pps");
            }
            return $;
        }
    }

}
