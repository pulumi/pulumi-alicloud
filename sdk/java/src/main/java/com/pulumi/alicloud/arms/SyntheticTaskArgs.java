// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.arms;

import com.pulumi.alicloud.arms.inputs.SyntheticTaskAvailableAssertionArgs;
import com.pulumi.alicloud.arms.inputs.SyntheticTaskCommonSettingArgs;
import com.pulumi.alicloud.arms.inputs.SyntheticTaskCustomPeriodArgs;
import com.pulumi.alicloud.arms.inputs.SyntheticTaskMonitorArgs;
import com.pulumi.alicloud.arms.inputs.SyntheticTaskMonitorConfArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SyntheticTaskArgs extends com.pulumi.resources.ResourceArgs {

    public static final SyntheticTaskArgs Empty = new SyntheticTaskArgs();

    /**
     * Assertion List. See `available_assertions` below.
     * 
     */
    @Import(name="availableAssertions")
    private @Nullable Output<List<SyntheticTaskAvailableAssertionArgs>> availableAssertions;

    /**
     * @return Assertion List. See `available_assertions` below.
     * 
     */
    public Optional<Output<List<SyntheticTaskAvailableAssertionArgs>>> availableAssertions() {
        return Optional.ofNullable(this.availableAssertions);
    }

    /**
     * Common settings. See `common_setting` below.
     * 
     */
    @Import(name="commonSetting")
    private @Nullable Output<SyntheticTaskCommonSettingArgs> commonSetting;

    /**
     * @return Common settings. See `common_setting` below.
     * 
     */
    public Optional<Output<SyntheticTaskCommonSettingArgs>> commonSetting() {
        return Optional.ofNullable(this.commonSetting);
    }

    /**
     * Custom Cycle. See `custom_period` below.
     * 
     */
    @Import(name="customPeriod")
    private @Nullable Output<SyntheticTaskCustomPeriodArgs> customPeriod;

    /**
     * @return Custom Cycle. See `custom_period` below.
     * 
     */
    public Optional<Output<SyntheticTaskCustomPeriodArgs>> customPeriod() {
        return Optional.ofNullable(this.customPeriod);
    }

    /**
     * Frequency.
     * 
     */
    @Import(name="frequency", required=true)
    private Output<String> frequency;

    /**
     * @return Frequency.
     * 
     */
    public Output<String> frequency() {
        return this.frequency;
    }

    /**
     * Classification of selected monitors.
     * 
     */
    @Import(name="monitorCategory", required=true)
    private Output<Integer> monitorCategory;

    /**
     * @return Classification of selected monitors.
     * 
     */
    public Output<Integer> monitorCategory() {
        return this.monitorCategory;
    }

    /**
     * Monitoring configuration. See `monitor_conf` below.
     * 
     */
    @Import(name="monitorConf", required=true)
    private Output<SyntheticTaskMonitorConfArgs> monitorConf;

    /**
     * @return Monitoring configuration. See `monitor_conf` below.
     * 
     */
    public Output<SyntheticTaskMonitorConfArgs> monitorConf() {
        return this.monitorConf;
    }

    /**
     * List of selected monitors. See `monitors` below.
     * 
     */
    @Import(name="monitors", required=true)
    private Output<List<SyntheticTaskMonitorArgs>> monitors;

    /**
     * @return List of selected monitors. See `monitors` below.
     * 
     */
    public Output<List<SyntheticTaskMonitorArgs>> monitors() {
        return this.monitors;
    }

    /**
     * Describes which resource group the resource belongs.
     * 
     */
    @Import(name="resourceGroupId")
    private @Nullable Output<String> resourceGroupId;

    /**
     * @return Describes which resource group the resource belongs.
     * 
     */
    public Optional<Output<String>> resourceGroupId() {
        return Optional.ofNullable(this.resourceGroupId);
    }

    /**
     * task status.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return task status.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * The name of synthetic task.
     * 
     */
    @Import(name="syntheticTaskName", required=true)
    private Output<String> syntheticTaskName;

    /**
     * @return The name of synthetic task.
     * 
     */
    public Output<String> syntheticTaskName() {
        return this.syntheticTaskName;
    }

    /**
     * The list of tags.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,Object>> tags;

    /**
     * @return The list of tags.
     * 
     */
    public Optional<Output<Map<String,Object>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * The type of synthetic task.
     * 
     */
    @Import(name="taskType", required=true)
    private Output<Integer> taskType;

    /**
     * @return The type of synthetic task.
     * 
     */
    public Output<Integer> taskType() {
        return this.taskType;
    }

    private SyntheticTaskArgs() {}

    private SyntheticTaskArgs(SyntheticTaskArgs $) {
        this.availableAssertions = $.availableAssertions;
        this.commonSetting = $.commonSetting;
        this.customPeriod = $.customPeriod;
        this.frequency = $.frequency;
        this.monitorCategory = $.monitorCategory;
        this.monitorConf = $.monitorConf;
        this.monitors = $.monitors;
        this.resourceGroupId = $.resourceGroupId;
        this.status = $.status;
        this.syntheticTaskName = $.syntheticTaskName;
        this.tags = $.tags;
        this.taskType = $.taskType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SyntheticTaskArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SyntheticTaskArgs $;

        public Builder() {
            $ = new SyntheticTaskArgs();
        }

        public Builder(SyntheticTaskArgs defaults) {
            $ = new SyntheticTaskArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param availableAssertions Assertion List. See `available_assertions` below.
         * 
         * @return builder
         * 
         */
        public Builder availableAssertions(@Nullable Output<List<SyntheticTaskAvailableAssertionArgs>> availableAssertions) {
            $.availableAssertions = availableAssertions;
            return this;
        }

        /**
         * @param availableAssertions Assertion List. See `available_assertions` below.
         * 
         * @return builder
         * 
         */
        public Builder availableAssertions(List<SyntheticTaskAvailableAssertionArgs> availableAssertions) {
            return availableAssertions(Output.of(availableAssertions));
        }

        /**
         * @param availableAssertions Assertion List. See `available_assertions` below.
         * 
         * @return builder
         * 
         */
        public Builder availableAssertions(SyntheticTaskAvailableAssertionArgs... availableAssertions) {
            return availableAssertions(List.of(availableAssertions));
        }

        /**
         * @param commonSetting Common settings. See `common_setting` below.
         * 
         * @return builder
         * 
         */
        public Builder commonSetting(@Nullable Output<SyntheticTaskCommonSettingArgs> commonSetting) {
            $.commonSetting = commonSetting;
            return this;
        }

        /**
         * @param commonSetting Common settings. See `common_setting` below.
         * 
         * @return builder
         * 
         */
        public Builder commonSetting(SyntheticTaskCommonSettingArgs commonSetting) {
            return commonSetting(Output.of(commonSetting));
        }

        /**
         * @param customPeriod Custom Cycle. See `custom_period` below.
         * 
         * @return builder
         * 
         */
        public Builder customPeriod(@Nullable Output<SyntheticTaskCustomPeriodArgs> customPeriod) {
            $.customPeriod = customPeriod;
            return this;
        }

        /**
         * @param customPeriod Custom Cycle. See `custom_period` below.
         * 
         * @return builder
         * 
         */
        public Builder customPeriod(SyntheticTaskCustomPeriodArgs customPeriod) {
            return customPeriod(Output.of(customPeriod));
        }

        /**
         * @param frequency Frequency.
         * 
         * @return builder
         * 
         */
        public Builder frequency(Output<String> frequency) {
            $.frequency = frequency;
            return this;
        }

        /**
         * @param frequency Frequency.
         * 
         * @return builder
         * 
         */
        public Builder frequency(String frequency) {
            return frequency(Output.of(frequency));
        }

        /**
         * @param monitorCategory Classification of selected monitors.
         * 
         * @return builder
         * 
         */
        public Builder monitorCategory(Output<Integer> monitorCategory) {
            $.monitorCategory = monitorCategory;
            return this;
        }

        /**
         * @param monitorCategory Classification of selected monitors.
         * 
         * @return builder
         * 
         */
        public Builder monitorCategory(Integer monitorCategory) {
            return monitorCategory(Output.of(monitorCategory));
        }

        /**
         * @param monitorConf Monitoring configuration. See `monitor_conf` below.
         * 
         * @return builder
         * 
         */
        public Builder monitorConf(Output<SyntheticTaskMonitorConfArgs> monitorConf) {
            $.monitorConf = monitorConf;
            return this;
        }

        /**
         * @param monitorConf Monitoring configuration. See `monitor_conf` below.
         * 
         * @return builder
         * 
         */
        public Builder monitorConf(SyntheticTaskMonitorConfArgs monitorConf) {
            return monitorConf(Output.of(monitorConf));
        }

        /**
         * @param monitors List of selected monitors. See `monitors` below.
         * 
         * @return builder
         * 
         */
        public Builder monitors(Output<List<SyntheticTaskMonitorArgs>> monitors) {
            $.monitors = monitors;
            return this;
        }

        /**
         * @param monitors List of selected monitors. See `monitors` below.
         * 
         * @return builder
         * 
         */
        public Builder monitors(List<SyntheticTaskMonitorArgs> monitors) {
            return monitors(Output.of(monitors));
        }

        /**
         * @param monitors List of selected monitors. See `monitors` below.
         * 
         * @return builder
         * 
         */
        public Builder monitors(SyntheticTaskMonitorArgs... monitors) {
            return monitors(List.of(monitors));
        }

        /**
         * @param resourceGroupId Describes which resource group the resource belongs.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupId(@Nullable Output<String> resourceGroupId) {
            $.resourceGroupId = resourceGroupId;
            return this;
        }

        /**
         * @param resourceGroupId Describes which resource group the resource belongs.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupId(String resourceGroupId) {
            return resourceGroupId(Output.of(resourceGroupId));
        }

        /**
         * @param status task status.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status task status.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param syntheticTaskName The name of synthetic task.
         * 
         * @return builder
         * 
         */
        public Builder syntheticTaskName(Output<String> syntheticTaskName) {
            $.syntheticTaskName = syntheticTaskName;
            return this;
        }

        /**
         * @param syntheticTaskName The name of synthetic task.
         * 
         * @return builder
         * 
         */
        public Builder syntheticTaskName(String syntheticTaskName) {
            return syntheticTaskName(Output.of(syntheticTaskName));
        }

        /**
         * @param tags The list of tags.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,Object>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags The list of tags.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,Object> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param taskType The type of synthetic task.
         * 
         * @return builder
         * 
         */
        public Builder taskType(Output<Integer> taskType) {
            $.taskType = taskType;
            return this;
        }

        /**
         * @param taskType The type of synthetic task.
         * 
         * @return builder
         * 
         */
        public Builder taskType(Integer taskType) {
            return taskType(Output.of(taskType));
        }

        public SyntheticTaskArgs build() {
            if ($.frequency == null) {
                throw new MissingRequiredPropertyException("SyntheticTaskArgs", "frequency");
            }
            if ($.monitorCategory == null) {
                throw new MissingRequiredPropertyException("SyntheticTaskArgs", "monitorCategory");
            }
            if ($.monitorConf == null) {
                throw new MissingRequiredPropertyException("SyntheticTaskArgs", "monitorConf");
            }
            if ($.monitors == null) {
                throw new MissingRequiredPropertyException("SyntheticTaskArgs", "monitors");
            }
            if ($.syntheticTaskName == null) {
                throw new MissingRequiredPropertyException("SyntheticTaskArgs", "syntheticTaskName");
            }
            if ($.taskType == null) {
                throw new MissingRequiredPropertyException("SyntheticTaskArgs", "taskType");
            }
            return $;
        }
    }

}
