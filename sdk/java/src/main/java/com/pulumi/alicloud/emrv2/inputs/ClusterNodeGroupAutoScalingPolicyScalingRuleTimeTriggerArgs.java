// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.emrv2.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ClusterNodeGroupAutoScalingPolicyScalingRuleTimeTriggerArgs extends com.pulumi.resources.ResourceArgs {

    public static final ClusterNodeGroupAutoScalingPolicyScalingRuleTimeTriggerArgs Empty = new ClusterNodeGroupAutoScalingPolicyScalingRuleTimeTriggerArgs();

    /**
     * The end time for this scaling rule specific metrics trigger.
     * 
     */
    @Import(name="endTime")
    private @Nullable Output<String> endTime;

    /**
     * @return The end time for this scaling rule specific metrics trigger.
     * 
     */
    public Optional<Output<String>> endTime() {
        return Optional.ofNullable(this.endTime);
    }

    /**
     * The launch expiration time for this scaling rule specific time trigger. The value should between 0 and 3600.
     * 
     */
    @Import(name="launchExpirationTime")
    private @Nullable Output<Integer> launchExpirationTime;

    /**
     * @return The launch expiration time for this scaling rule specific time trigger. The value should between 0 and 3600.
     * 
     */
    public Optional<Output<Integer>> launchExpirationTime() {
        return Optional.ofNullable(this.launchExpirationTime);
    }

    /**
     * The launch time for this scaling rule specific time trigger.
     * 
     */
    @Import(name="launchTime", required=true)
    private Output<String> launchTime;

    /**
     * @return The launch time for this scaling rule specific time trigger.
     * 
     */
    public Output<String> launchTime() {
        return this.launchTime;
    }

    /**
     * The recurrence type for this scaling rule specific time trigger. Valid values: `MINUTELY`, `HOURLY`, `DAILY`, `WEEKLY`, `MONTHLY`.
     * 
     */
    @Import(name="recurrenceType")
    private @Nullable Output<String> recurrenceType;

    /**
     * @return The recurrence type for this scaling rule specific time trigger. Valid values: `MINUTELY`, `HOURLY`, `DAILY`, `WEEKLY`, `MONTHLY`.
     * 
     */
    public Optional<Output<String>> recurrenceType() {
        return Optional.ofNullable(this.recurrenceType);
    }

    /**
     * The recurrence value for this scaling rule specific time trigger.
     * 
     */
    @Import(name="recurrenceValue")
    private @Nullable Output<String> recurrenceValue;

    /**
     * @return The recurrence value for this scaling rule specific time trigger.
     * 
     */
    public Optional<Output<String>> recurrenceValue() {
        return Optional.ofNullable(this.recurrenceValue);
    }

    /**
     * The start time for this scaling rule specific metrics trigger.
     * 
     */
    @Import(name="startTime")
    private @Nullable Output<String> startTime;

    /**
     * @return The start time for this scaling rule specific metrics trigger.
     * 
     */
    public Optional<Output<String>> startTime() {
        return Optional.ofNullable(this.startTime);
    }

    private ClusterNodeGroupAutoScalingPolicyScalingRuleTimeTriggerArgs() {}

    private ClusterNodeGroupAutoScalingPolicyScalingRuleTimeTriggerArgs(ClusterNodeGroupAutoScalingPolicyScalingRuleTimeTriggerArgs $) {
        this.endTime = $.endTime;
        this.launchExpirationTime = $.launchExpirationTime;
        this.launchTime = $.launchTime;
        this.recurrenceType = $.recurrenceType;
        this.recurrenceValue = $.recurrenceValue;
        this.startTime = $.startTime;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ClusterNodeGroupAutoScalingPolicyScalingRuleTimeTriggerArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ClusterNodeGroupAutoScalingPolicyScalingRuleTimeTriggerArgs $;

        public Builder() {
            $ = new ClusterNodeGroupAutoScalingPolicyScalingRuleTimeTriggerArgs();
        }

        public Builder(ClusterNodeGroupAutoScalingPolicyScalingRuleTimeTriggerArgs defaults) {
            $ = new ClusterNodeGroupAutoScalingPolicyScalingRuleTimeTriggerArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param endTime The end time for this scaling rule specific metrics trigger.
         * 
         * @return builder
         * 
         */
        public Builder endTime(@Nullable Output<String> endTime) {
            $.endTime = endTime;
            return this;
        }

        /**
         * @param endTime The end time for this scaling rule specific metrics trigger.
         * 
         * @return builder
         * 
         */
        public Builder endTime(String endTime) {
            return endTime(Output.of(endTime));
        }

        /**
         * @param launchExpirationTime The launch expiration time for this scaling rule specific time trigger. The value should between 0 and 3600.
         * 
         * @return builder
         * 
         */
        public Builder launchExpirationTime(@Nullable Output<Integer> launchExpirationTime) {
            $.launchExpirationTime = launchExpirationTime;
            return this;
        }

        /**
         * @param launchExpirationTime The launch expiration time for this scaling rule specific time trigger. The value should between 0 and 3600.
         * 
         * @return builder
         * 
         */
        public Builder launchExpirationTime(Integer launchExpirationTime) {
            return launchExpirationTime(Output.of(launchExpirationTime));
        }

        /**
         * @param launchTime The launch time for this scaling rule specific time trigger.
         * 
         * @return builder
         * 
         */
        public Builder launchTime(Output<String> launchTime) {
            $.launchTime = launchTime;
            return this;
        }

        /**
         * @param launchTime The launch time for this scaling rule specific time trigger.
         * 
         * @return builder
         * 
         */
        public Builder launchTime(String launchTime) {
            return launchTime(Output.of(launchTime));
        }

        /**
         * @param recurrenceType The recurrence type for this scaling rule specific time trigger. Valid values: `MINUTELY`, `HOURLY`, `DAILY`, `WEEKLY`, `MONTHLY`.
         * 
         * @return builder
         * 
         */
        public Builder recurrenceType(@Nullable Output<String> recurrenceType) {
            $.recurrenceType = recurrenceType;
            return this;
        }

        /**
         * @param recurrenceType The recurrence type for this scaling rule specific time trigger. Valid values: `MINUTELY`, `HOURLY`, `DAILY`, `WEEKLY`, `MONTHLY`.
         * 
         * @return builder
         * 
         */
        public Builder recurrenceType(String recurrenceType) {
            return recurrenceType(Output.of(recurrenceType));
        }

        /**
         * @param recurrenceValue The recurrence value for this scaling rule specific time trigger.
         * 
         * @return builder
         * 
         */
        public Builder recurrenceValue(@Nullable Output<String> recurrenceValue) {
            $.recurrenceValue = recurrenceValue;
            return this;
        }

        /**
         * @param recurrenceValue The recurrence value for this scaling rule specific time trigger.
         * 
         * @return builder
         * 
         */
        public Builder recurrenceValue(String recurrenceValue) {
            return recurrenceValue(Output.of(recurrenceValue));
        }

        /**
         * @param startTime The start time for this scaling rule specific metrics trigger.
         * 
         * @return builder
         * 
         */
        public Builder startTime(@Nullable Output<String> startTime) {
            $.startTime = startTime;
            return this;
        }

        /**
         * @param startTime The start time for this scaling rule specific metrics trigger.
         * 
         * @return builder
         * 
         */
        public Builder startTime(String startTime) {
            return startTime(Output.of(startTime));
        }

        public ClusterNodeGroupAutoScalingPolicyScalingRuleTimeTriggerArgs build() {
            if ($.launchTime == null) {
                throw new MissingRequiredPropertyException("ClusterNodeGroupAutoScalingPolicyScalingRuleTimeTriggerArgs", "launchTime");
            }
            return $;
        }
    }

}
