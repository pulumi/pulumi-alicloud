// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.sae.outputs;

import com.pulumi.alicloud.sae.outputs.GetApplicationsApplicationMountDesc;
import com.pulumi.alicloud.sae.outputs.GetApplicationsApplicationOssMountDetail;
import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetApplicationsApplication {
    /**
     * @return The ARN of the RAM role required when pulling images across accounts.
     * 
     */
    private String acrAssumeRoleArn;
    /**
     * @return Application description information. No more than 1024 characters.
     * 
     */
    private String appDescription;
    /**
     * @return Application Name. Combinations of numbers, letters, and dashes (-) are allowed. It must start with a letter and the maximum length is 36 characters.
     * 
     */
    private String appName;
    /**
     * @return The first ID of the resource.
     * 
     */
    private String applicationId;
    /**
     * @return Mirror start command. The command must be an executable object in the container. For example: sleep. Setting this command will cause the original startup command of the mirror to become invalid.
     * 
     */
    private String command;
    /**
     * @return Mirror startup command parameters. The parameters required for the above start command. For example: 1d.
     * 
     */
    private String commandArgs;
    /**
     * @return ConfigMap mount description.
     * 
     */
    private String configMapMountDesc;
    /**
     * @return The CPU required for each instance, in millicores, cannot be 0.
     * 
     */
    private Integer cpu;
    /**
     * @return Indicates That the Application of the Creation Time.
     * 
     */
    private String createTime;
    /**
     * @return Custom host mapping in the container. For example: [{&#34;hostName&#34;:&#34;samplehost&#34;,&#34;ip&#34;:&#34;127.0.0.1&#34;}].
     * 
     */
    private String customHostAlias;
    /**
     * @return The operating environment used by the Pandora application.
     * 
     */
    private String edasContainerVersion;
    /**
     * @return The virtual switch where the elastic network card of the application instance is located. The switch must be located in the aforementioned VPC. The switch also has a binding relationship with the SAE namespace. If it is left blank, the default is the vSwitch ID bound to the namespace.
     * 
     */
    private String envs;
    /**
     * @return The ID of the Application.
     * 
     */
    private String id;
    /**
     * @return Mirror address. Only Image type applications can configure the mirror address.
     * 
     */
    private String imageUrl;
    /**
     * @return The JAR package starts application parameters. Application default startup command: $JAVA_HOME/bin/java $JarStartOptions -jar $CATALINA_OPTS &#34;$package_path&#34; $JarStartArgs.
     * 
     */
    private String jarStartArgs;
    /**
     * @return The JAR package starts the application option. Application default startup command: $JAVA_HOME/bin/java $JarStartOptions -jar $CATALINA_OPTS &#34;$package_path&#34; $JarStartArgs.
     * 
     */
    private String jarStartOptions;
    /**
     * @return The JDK version that the deployment package depends on. Image type applications are not supported.
     * 
     */
    private String jdk;
    /**
     * @return Container health check. Containers that fail the health check will be shut down and restored. Currently, only the method of issuing commands in the container is supported.
     * 
     */
    private String liveness;
    /**
     * @return The memory required for each instance, in MB, cannot be 0. One-to-one correspondence with CPU.
     * 
     */
    private Integer memory;
    /**
     * @return The Minimum Available Instance. On the Change Had Promised during the Available Number of Instances to Be.
     * 
     */
    private Integer minReadyInstances;
    /**
     * @return Mount description information.
     * 
     */
    private List<GetApplicationsApplicationMountDesc> mountDescs;
    /**
     * @return Mount point of NAS in application VPC.
     * 
     */
    private String mountHost;
    /**
     * @return SAE namespace ID. Only namespaces whose names are lowercase letters and dashes (-) are supported, and must start with a letter. The namespace can be obtained by calling the DescribeNamespaceList interface.
     * 
     */
    private String namespaceId;
    /**
     * @return ID of the mounted NAS, Must be in the same region as the cluster. It must have an available mount point creation quota, or its mount point must be on a switch in the VPC. If it is not filled in and the mountDescs field is present, a NAS will be automatically purchased and mounted on the switch in the VPC by default.
     * 
     */
    private String nasId;
    /**
     * @return OSS AccessKey ID.
     * 
     */
    private String ossAkId;
    /**
     * @return OSS  AccessKey Secret.
     * 
     */
    private String ossAkSecret;
    /**
     * @return OSS mount description information.
     * 
     */
    private String ossMountDescs;
    /**
     * @return The OSS mount detail.
     * 
     */
    private List<GetApplicationsApplicationOssMountDetail> ossMountDetails;
    /**
     * @return Application package type. Support FatJar, War and Image.
     * 
     */
    private String packageType;
    /**
     * @return Deployment package address. Only FatJar or War type applications can configure the deployment package address.
     * 
     */
    private String packageUrl;
    /**
     * @return The version number of the deployment package. Required when the Package Type is War and FatJar.
     * 
     */
    private String packageVersion;
    /**
     * @return The PHP application monitors the mount path, and you need to ensure that the PHP server will load the configuration file of this path. You don&#39;t need to pay attention to the configuration content, SAE will automatically render the correct configuration file.
     * 
     */
    private String phpArmsConfigLocation;
    /**
     * @return PHP configuration file content.
     * 
     */
    private String phpConfig;
    /**
     * @return PHP application startup configuration mount path, you need to ensure that the PHP server will start using this configuration file.
     * 
     */
    private String phpConfigLocation;
    /**
     * @return Execute the script after startup, the format is like: {&#34;exec&#34;:{&#34;command&#34;:[&#34;cat&#34;,&#34;/etc/group&#34;]}}.
     * 
     */
    private String postStart;
    /**
     * @return Execute the script before stopping, the format is like: {&#34;exec&#34;:{&#34;command&#34;:[&#34;cat&#34;,&#34;/etc/group&#34;]}}.
     * 
     */
    private String preStop;
    /**
     * @return Application startup status checks, containers that fail multiple health checks will be shut down and restarted. Containers that do not pass the health check will not receive SLB traffic. For example: {&#34;exec&#34;:{&#34;command&#34;:[&#34;sh&#34;,&#34;-c&#34;,&#34;cat /home/admin/start.sh&#34;]},&#34;initialDelaySeconds&#34;:30,&#34;periodSeconds&#34;:30,&#34;timeoutSeconds &#34;:2}.
     * 
     */
    private String readiness;
    private String regionId;
    /**
     * @return Initial number of instances.
     * 
     */
    private Integer replicas;
    private String repoName;
    private String repoNamespace;
    private String repoOriginType;
    /**
     * @return Security group ID.
     * 
     */
    private String securityGroupId;
    /**
     * @return SLS  configuration.
     * 
     */
    private String slsConfigs;
    /**
     * @return The status of the resource.
     * 
     */
    private String status;
    /**
     * @return A mapping of tags to assign to the resource.
     * 
     */
    private Map<String,Object> tags;
    /**
     * @return Graceful offline timeout, the default is 30, the unit is seconds. The value range is 1~60.
     * 
     */
    private Integer terminationGracePeriodSeconds;
    /**
     * @return Time zone, the default value is Asia/Shanghai.
     * 
     */
    private String timezone;
    /**
     * @return Tomcat file configuration, set to &#34;&#34; or &#34;{}&#34; means to delete the configuration:  useDefaultConfig: Whether to use a custom configuration, if it is true, it means that the custom configuration is not used; if it is false, it means that the custom configuration is used. If you do not use custom configuration, the following parameter configuration will not take effect.  contextInputType: Select the access path of the application.  war: No need to fill in the custom path, the access path of the application is the WAR package name. root: No need to fill in the custom path, the access path of the application is /. custom: You need to fill in the custom path in the custom path below. contextPath: custom path, this parameter only needs to be configured when the contextInputType type is custom.  httpPort: The port range is 1024~65535. Ports less than 1024 need Root permission to operate. Because the container is configured with Admin permissions, please fill in a port greater than 1024. If not configured, the default is 8080. maxThreads: Configure the number of connections in the connection pool, the default size is 400. uriEncoding: Tomcat encoding format, including UTF-8, ISO-8859-1, GBK and GB2312. If not set, the default is ISO-8859-1. useBodyEncoding: Whether to use BodyEncoding for URL.
     * 
     */
    private String tomcatConfig;
    /**
     * @return The VPC corresponding to the SAE namespace. In SAE, a namespace can only correspond to one VPC and cannot be modified. Creating a SAE application in the namespace for the first time will form a binding relationship. Multiple namespaces can correspond to a VPC. If you leave it blank, it will default to the VPC ID bound to the namespace.
     * 
     */
    private String vpcId;
    /**
     * @return The vswitch id.
     * 
     */
    private String vswitchId;
    /**
     * @return WAR package launch application option. Application default startup command: java $JAVA_OPTS $CATALINA_OPTS [-Options] org.apache.catalina.startup.Bootstrap &#34;$@&#34; start.
     * 
     */
    private String warStartOptions;
    /**
     * @return The version of tomcat that the deployment package depends on. Image type applications are not supported.
     * 
     */
    private String webContainer;

    private GetApplicationsApplication() {}
    /**
     * @return The ARN of the RAM role required when pulling images across accounts.
     * 
     */
    public String acrAssumeRoleArn() {
        return this.acrAssumeRoleArn;
    }
    /**
     * @return Application description information. No more than 1024 characters.
     * 
     */
    public String appDescription() {
        return this.appDescription;
    }
    /**
     * @return Application Name. Combinations of numbers, letters, and dashes (-) are allowed. It must start with a letter and the maximum length is 36 characters.
     * 
     */
    public String appName() {
        return this.appName;
    }
    /**
     * @return The first ID of the resource.
     * 
     */
    public String applicationId() {
        return this.applicationId;
    }
    /**
     * @return Mirror start command. The command must be an executable object in the container. For example: sleep. Setting this command will cause the original startup command of the mirror to become invalid.
     * 
     */
    public String command() {
        return this.command;
    }
    /**
     * @return Mirror startup command parameters. The parameters required for the above start command. For example: 1d.
     * 
     */
    public String commandArgs() {
        return this.commandArgs;
    }
    /**
     * @return ConfigMap mount description.
     * 
     */
    public String configMapMountDesc() {
        return this.configMapMountDesc;
    }
    /**
     * @return The CPU required for each instance, in millicores, cannot be 0.
     * 
     */
    public Integer cpu() {
        return this.cpu;
    }
    /**
     * @return Indicates That the Application of the Creation Time.
     * 
     */
    public String createTime() {
        return this.createTime;
    }
    /**
     * @return Custom host mapping in the container. For example: [{&#34;hostName&#34;:&#34;samplehost&#34;,&#34;ip&#34;:&#34;127.0.0.1&#34;}].
     * 
     */
    public String customHostAlias() {
        return this.customHostAlias;
    }
    /**
     * @return The operating environment used by the Pandora application.
     * 
     */
    public String edasContainerVersion() {
        return this.edasContainerVersion;
    }
    /**
     * @return The virtual switch where the elastic network card of the application instance is located. The switch must be located in the aforementioned VPC. The switch also has a binding relationship with the SAE namespace. If it is left blank, the default is the vSwitch ID bound to the namespace.
     * 
     */
    public String envs() {
        return this.envs;
    }
    /**
     * @return The ID of the Application.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Mirror address. Only Image type applications can configure the mirror address.
     * 
     */
    public String imageUrl() {
        return this.imageUrl;
    }
    /**
     * @return The JAR package starts application parameters. Application default startup command: $JAVA_HOME/bin/java $JarStartOptions -jar $CATALINA_OPTS &#34;$package_path&#34; $JarStartArgs.
     * 
     */
    public String jarStartArgs() {
        return this.jarStartArgs;
    }
    /**
     * @return The JAR package starts the application option. Application default startup command: $JAVA_HOME/bin/java $JarStartOptions -jar $CATALINA_OPTS &#34;$package_path&#34; $JarStartArgs.
     * 
     */
    public String jarStartOptions() {
        return this.jarStartOptions;
    }
    /**
     * @return The JDK version that the deployment package depends on. Image type applications are not supported.
     * 
     */
    public String jdk() {
        return this.jdk;
    }
    /**
     * @return Container health check. Containers that fail the health check will be shut down and restored. Currently, only the method of issuing commands in the container is supported.
     * 
     */
    public String liveness() {
        return this.liveness;
    }
    /**
     * @return The memory required for each instance, in MB, cannot be 0. One-to-one correspondence with CPU.
     * 
     */
    public Integer memory() {
        return this.memory;
    }
    /**
     * @return The Minimum Available Instance. On the Change Had Promised during the Available Number of Instances to Be.
     * 
     */
    public Integer minReadyInstances() {
        return this.minReadyInstances;
    }
    /**
     * @return Mount description information.
     * 
     */
    public List<GetApplicationsApplicationMountDesc> mountDescs() {
        return this.mountDescs;
    }
    /**
     * @return Mount point of NAS in application VPC.
     * 
     */
    public String mountHost() {
        return this.mountHost;
    }
    /**
     * @return SAE namespace ID. Only namespaces whose names are lowercase letters and dashes (-) are supported, and must start with a letter. The namespace can be obtained by calling the DescribeNamespaceList interface.
     * 
     */
    public String namespaceId() {
        return this.namespaceId;
    }
    /**
     * @return ID of the mounted NAS, Must be in the same region as the cluster. It must have an available mount point creation quota, or its mount point must be on a switch in the VPC. If it is not filled in and the mountDescs field is present, a NAS will be automatically purchased and mounted on the switch in the VPC by default.
     * 
     */
    public String nasId() {
        return this.nasId;
    }
    /**
     * @return OSS AccessKey ID.
     * 
     */
    public String ossAkId() {
        return this.ossAkId;
    }
    /**
     * @return OSS  AccessKey Secret.
     * 
     */
    public String ossAkSecret() {
        return this.ossAkSecret;
    }
    /**
     * @return OSS mount description information.
     * 
     */
    public String ossMountDescs() {
        return this.ossMountDescs;
    }
    /**
     * @return The OSS mount detail.
     * 
     */
    public List<GetApplicationsApplicationOssMountDetail> ossMountDetails() {
        return this.ossMountDetails;
    }
    /**
     * @return Application package type. Support FatJar, War and Image.
     * 
     */
    public String packageType() {
        return this.packageType;
    }
    /**
     * @return Deployment package address. Only FatJar or War type applications can configure the deployment package address.
     * 
     */
    public String packageUrl() {
        return this.packageUrl;
    }
    /**
     * @return The version number of the deployment package. Required when the Package Type is War and FatJar.
     * 
     */
    public String packageVersion() {
        return this.packageVersion;
    }
    /**
     * @return The PHP application monitors the mount path, and you need to ensure that the PHP server will load the configuration file of this path. You don&#39;t need to pay attention to the configuration content, SAE will automatically render the correct configuration file.
     * 
     */
    public String phpArmsConfigLocation() {
        return this.phpArmsConfigLocation;
    }
    /**
     * @return PHP configuration file content.
     * 
     */
    public String phpConfig() {
        return this.phpConfig;
    }
    /**
     * @return PHP application startup configuration mount path, you need to ensure that the PHP server will start using this configuration file.
     * 
     */
    public String phpConfigLocation() {
        return this.phpConfigLocation;
    }
    /**
     * @return Execute the script after startup, the format is like: {&#34;exec&#34;:{&#34;command&#34;:[&#34;cat&#34;,&#34;/etc/group&#34;]}}.
     * 
     */
    public String postStart() {
        return this.postStart;
    }
    /**
     * @return Execute the script before stopping, the format is like: {&#34;exec&#34;:{&#34;command&#34;:[&#34;cat&#34;,&#34;/etc/group&#34;]}}.
     * 
     */
    public String preStop() {
        return this.preStop;
    }
    /**
     * @return Application startup status checks, containers that fail multiple health checks will be shut down and restarted. Containers that do not pass the health check will not receive SLB traffic. For example: {&#34;exec&#34;:{&#34;command&#34;:[&#34;sh&#34;,&#34;-c&#34;,&#34;cat /home/admin/start.sh&#34;]},&#34;initialDelaySeconds&#34;:30,&#34;periodSeconds&#34;:30,&#34;timeoutSeconds &#34;:2}.
     * 
     */
    public String readiness() {
        return this.readiness;
    }
    public String regionId() {
        return this.regionId;
    }
    /**
     * @return Initial number of instances.
     * 
     */
    public Integer replicas() {
        return this.replicas;
    }
    public String repoName() {
        return this.repoName;
    }
    public String repoNamespace() {
        return this.repoNamespace;
    }
    public String repoOriginType() {
        return this.repoOriginType;
    }
    /**
     * @return Security group ID.
     * 
     */
    public String securityGroupId() {
        return this.securityGroupId;
    }
    /**
     * @return SLS  configuration.
     * 
     */
    public String slsConfigs() {
        return this.slsConfigs;
    }
    /**
     * @return The status of the resource.
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return A mapping of tags to assign to the resource.
     * 
     */
    public Map<String,Object> tags() {
        return this.tags;
    }
    /**
     * @return Graceful offline timeout, the default is 30, the unit is seconds. The value range is 1~60.
     * 
     */
    public Integer terminationGracePeriodSeconds() {
        return this.terminationGracePeriodSeconds;
    }
    /**
     * @return Time zone, the default value is Asia/Shanghai.
     * 
     */
    public String timezone() {
        return this.timezone;
    }
    /**
     * @return Tomcat file configuration, set to &#34;&#34; or &#34;{}&#34; means to delete the configuration:  useDefaultConfig: Whether to use a custom configuration, if it is true, it means that the custom configuration is not used; if it is false, it means that the custom configuration is used. If you do not use custom configuration, the following parameter configuration will not take effect.  contextInputType: Select the access path of the application.  war: No need to fill in the custom path, the access path of the application is the WAR package name. root: No need to fill in the custom path, the access path of the application is /. custom: You need to fill in the custom path in the custom path below. contextPath: custom path, this parameter only needs to be configured when the contextInputType type is custom.  httpPort: The port range is 1024~65535. Ports less than 1024 need Root permission to operate. Because the container is configured with Admin permissions, please fill in a port greater than 1024. If not configured, the default is 8080. maxThreads: Configure the number of connections in the connection pool, the default size is 400. uriEncoding: Tomcat encoding format, including UTF-8, ISO-8859-1, GBK and GB2312. If not set, the default is ISO-8859-1. useBodyEncoding: Whether to use BodyEncoding for URL.
     * 
     */
    public String tomcatConfig() {
        return this.tomcatConfig;
    }
    /**
     * @return The VPC corresponding to the SAE namespace. In SAE, a namespace can only correspond to one VPC and cannot be modified. Creating a SAE application in the namespace for the first time will form a binding relationship. Multiple namespaces can correspond to a VPC. If you leave it blank, it will default to the VPC ID bound to the namespace.
     * 
     */
    public String vpcId() {
        return this.vpcId;
    }
    /**
     * @return The vswitch id.
     * 
     */
    public String vswitchId() {
        return this.vswitchId;
    }
    /**
     * @return WAR package launch application option. Application default startup command: java $JAVA_OPTS $CATALINA_OPTS [-Options] org.apache.catalina.startup.Bootstrap &#34;$@&#34; start.
     * 
     */
    public String warStartOptions() {
        return this.warStartOptions;
    }
    /**
     * @return The version of tomcat that the deployment package depends on. Image type applications are not supported.
     * 
     */
    public String webContainer() {
        return this.webContainer;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetApplicationsApplication defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String acrAssumeRoleArn;
        private String appDescription;
        private String appName;
        private String applicationId;
        private String command;
        private String commandArgs;
        private String configMapMountDesc;
        private Integer cpu;
        private String createTime;
        private String customHostAlias;
        private String edasContainerVersion;
        private String envs;
        private String id;
        private String imageUrl;
        private String jarStartArgs;
        private String jarStartOptions;
        private String jdk;
        private String liveness;
        private Integer memory;
        private Integer minReadyInstances;
        private List<GetApplicationsApplicationMountDesc> mountDescs;
        private String mountHost;
        private String namespaceId;
        private String nasId;
        private String ossAkId;
        private String ossAkSecret;
        private String ossMountDescs;
        private List<GetApplicationsApplicationOssMountDetail> ossMountDetails;
        private String packageType;
        private String packageUrl;
        private String packageVersion;
        private String phpArmsConfigLocation;
        private String phpConfig;
        private String phpConfigLocation;
        private String postStart;
        private String preStop;
        private String readiness;
        private String regionId;
        private Integer replicas;
        private String repoName;
        private String repoNamespace;
        private String repoOriginType;
        private String securityGroupId;
        private String slsConfigs;
        private String status;
        private Map<String,Object> tags;
        private Integer terminationGracePeriodSeconds;
        private String timezone;
        private String tomcatConfig;
        private String vpcId;
        private String vswitchId;
        private String warStartOptions;
        private String webContainer;
        public Builder() {}
        public Builder(GetApplicationsApplication defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.acrAssumeRoleArn = defaults.acrAssumeRoleArn;
    	      this.appDescription = defaults.appDescription;
    	      this.appName = defaults.appName;
    	      this.applicationId = defaults.applicationId;
    	      this.command = defaults.command;
    	      this.commandArgs = defaults.commandArgs;
    	      this.configMapMountDesc = defaults.configMapMountDesc;
    	      this.cpu = defaults.cpu;
    	      this.createTime = defaults.createTime;
    	      this.customHostAlias = defaults.customHostAlias;
    	      this.edasContainerVersion = defaults.edasContainerVersion;
    	      this.envs = defaults.envs;
    	      this.id = defaults.id;
    	      this.imageUrl = defaults.imageUrl;
    	      this.jarStartArgs = defaults.jarStartArgs;
    	      this.jarStartOptions = defaults.jarStartOptions;
    	      this.jdk = defaults.jdk;
    	      this.liveness = defaults.liveness;
    	      this.memory = defaults.memory;
    	      this.minReadyInstances = defaults.minReadyInstances;
    	      this.mountDescs = defaults.mountDescs;
    	      this.mountHost = defaults.mountHost;
    	      this.namespaceId = defaults.namespaceId;
    	      this.nasId = defaults.nasId;
    	      this.ossAkId = defaults.ossAkId;
    	      this.ossAkSecret = defaults.ossAkSecret;
    	      this.ossMountDescs = defaults.ossMountDescs;
    	      this.ossMountDetails = defaults.ossMountDetails;
    	      this.packageType = defaults.packageType;
    	      this.packageUrl = defaults.packageUrl;
    	      this.packageVersion = defaults.packageVersion;
    	      this.phpArmsConfigLocation = defaults.phpArmsConfigLocation;
    	      this.phpConfig = defaults.phpConfig;
    	      this.phpConfigLocation = defaults.phpConfigLocation;
    	      this.postStart = defaults.postStart;
    	      this.preStop = defaults.preStop;
    	      this.readiness = defaults.readiness;
    	      this.regionId = defaults.regionId;
    	      this.replicas = defaults.replicas;
    	      this.repoName = defaults.repoName;
    	      this.repoNamespace = defaults.repoNamespace;
    	      this.repoOriginType = defaults.repoOriginType;
    	      this.securityGroupId = defaults.securityGroupId;
    	      this.slsConfigs = defaults.slsConfigs;
    	      this.status = defaults.status;
    	      this.tags = defaults.tags;
    	      this.terminationGracePeriodSeconds = defaults.terminationGracePeriodSeconds;
    	      this.timezone = defaults.timezone;
    	      this.tomcatConfig = defaults.tomcatConfig;
    	      this.vpcId = defaults.vpcId;
    	      this.vswitchId = defaults.vswitchId;
    	      this.warStartOptions = defaults.warStartOptions;
    	      this.webContainer = defaults.webContainer;
        }

        @CustomType.Setter
        public Builder acrAssumeRoleArn(String acrAssumeRoleArn) {
            this.acrAssumeRoleArn = Objects.requireNonNull(acrAssumeRoleArn);
            return this;
        }
        @CustomType.Setter
        public Builder appDescription(String appDescription) {
            this.appDescription = Objects.requireNonNull(appDescription);
            return this;
        }
        @CustomType.Setter
        public Builder appName(String appName) {
            this.appName = Objects.requireNonNull(appName);
            return this;
        }
        @CustomType.Setter
        public Builder applicationId(String applicationId) {
            this.applicationId = Objects.requireNonNull(applicationId);
            return this;
        }
        @CustomType.Setter
        public Builder command(String command) {
            this.command = Objects.requireNonNull(command);
            return this;
        }
        @CustomType.Setter
        public Builder commandArgs(String commandArgs) {
            this.commandArgs = Objects.requireNonNull(commandArgs);
            return this;
        }
        @CustomType.Setter
        public Builder configMapMountDesc(String configMapMountDesc) {
            this.configMapMountDesc = Objects.requireNonNull(configMapMountDesc);
            return this;
        }
        @CustomType.Setter
        public Builder cpu(Integer cpu) {
            this.cpu = Objects.requireNonNull(cpu);
            return this;
        }
        @CustomType.Setter
        public Builder createTime(String createTime) {
            this.createTime = Objects.requireNonNull(createTime);
            return this;
        }
        @CustomType.Setter
        public Builder customHostAlias(String customHostAlias) {
            this.customHostAlias = Objects.requireNonNull(customHostAlias);
            return this;
        }
        @CustomType.Setter
        public Builder edasContainerVersion(String edasContainerVersion) {
            this.edasContainerVersion = Objects.requireNonNull(edasContainerVersion);
            return this;
        }
        @CustomType.Setter
        public Builder envs(String envs) {
            this.envs = Objects.requireNonNull(envs);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder imageUrl(String imageUrl) {
            this.imageUrl = Objects.requireNonNull(imageUrl);
            return this;
        }
        @CustomType.Setter
        public Builder jarStartArgs(String jarStartArgs) {
            this.jarStartArgs = Objects.requireNonNull(jarStartArgs);
            return this;
        }
        @CustomType.Setter
        public Builder jarStartOptions(String jarStartOptions) {
            this.jarStartOptions = Objects.requireNonNull(jarStartOptions);
            return this;
        }
        @CustomType.Setter
        public Builder jdk(String jdk) {
            this.jdk = Objects.requireNonNull(jdk);
            return this;
        }
        @CustomType.Setter
        public Builder liveness(String liveness) {
            this.liveness = Objects.requireNonNull(liveness);
            return this;
        }
        @CustomType.Setter
        public Builder memory(Integer memory) {
            this.memory = Objects.requireNonNull(memory);
            return this;
        }
        @CustomType.Setter
        public Builder minReadyInstances(Integer minReadyInstances) {
            this.minReadyInstances = Objects.requireNonNull(minReadyInstances);
            return this;
        }
        @CustomType.Setter
        public Builder mountDescs(List<GetApplicationsApplicationMountDesc> mountDescs) {
            this.mountDescs = Objects.requireNonNull(mountDescs);
            return this;
        }
        public Builder mountDescs(GetApplicationsApplicationMountDesc... mountDescs) {
            return mountDescs(List.of(mountDescs));
        }
        @CustomType.Setter
        public Builder mountHost(String mountHost) {
            this.mountHost = Objects.requireNonNull(mountHost);
            return this;
        }
        @CustomType.Setter
        public Builder namespaceId(String namespaceId) {
            this.namespaceId = Objects.requireNonNull(namespaceId);
            return this;
        }
        @CustomType.Setter
        public Builder nasId(String nasId) {
            this.nasId = Objects.requireNonNull(nasId);
            return this;
        }
        @CustomType.Setter
        public Builder ossAkId(String ossAkId) {
            this.ossAkId = Objects.requireNonNull(ossAkId);
            return this;
        }
        @CustomType.Setter
        public Builder ossAkSecret(String ossAkSecret) {
            this.ossAkSecret = Objects.requireNonNull(ossAkSecret);
            return this;
        }
        @CustomType.Setter
        public Builder ossMountDescs(String ossMountDescs) {
            this.ossMountDescs = Objects.requireNonNull(ossMountDescs);
            return this;
        }
        @CustomType.Setter
        public Builder ossMountDetails(List<GetApplicationsApplicationOssMountDetail> ossMountDetails) {
            this.ossMountDetails = Objects.requireNonNull(ossMountDetails);
            return this;
        }
        public Builder ossMountDetails(GetApplicationsApplicationOssMountDetail... ossMountDetails) {
            return ossMountDetails(List.of(ossMountDetails));
        }
        @CustomType.Setter
        public Builder packageType(String packageType) {
            this.packageType = Objects.requireNonNull(packageType);
            return this;
        }
        @CustomType.Setter
        public Builder packageUrl(String packageUrl) {
            this.packageUrl = Objects.requireNonNull(packageUrl);
            return this;
        }
        @CustomType.Setter
        public Builder packageVersion(String packageVersion) {
            this.packageVersion = Objects.requireNonNull(packageVersion);
            return this;
        }
        @CustomType.Setter
        public Builder phpArmsConfigLocation(String phpArmsConfigLocation) {
            this.phpArmsConfigLocation = Objects.requireNonNull(phpArmsConfigLocation);
            return this;
        }
        @CustomType.Setter
        public Builder phpConfig(String phpConfig) {
            this.phpConfig = Objects.requireNonNull(phpConfig);
            return this;
        }
        @CustomType.Setter
        public Builder phpConfigLocation(String phpConfigLocation) {
            this.phpConfigLocation = Objects.requireNonNull(phpConfigLocation);
            return this;
        }
        @CustomType.Setter
        public Builder postStart(String postStart) {
            this.postStart = Objects.requireNonNull(postStart);
            return this;
        }
        @CustomType.Setter
        public Builder preStop(String preStop) {
            this.preStop = Objects.requireNonNull(preStop);
            return this;
        }
        @CustomType.Setter
        public Builder readiness(String readiness) {
            this.readiness = Objects.requireNonNull(readiness);
            return this;
        }
        @CustomType.Setter
        public Builder regionId(String regionId) {
            this.regionId = Objects.requireNonNull(regionId);
            return this;
        }
        @CustomType.Setter
        public Builder replicas(Integer replicas) {
            this.replicas = Objects.requireNonNull(replicas);
            return this;
        }
        @CustomType.Setter
        public Builder repoName(String repoName) {
            this.repoName = Objects.requireNonNull(repoName);
            return this;
        }
        @CustomType.Setter
        public Builder repoNamespace(String repoNamespace) {
            this.repoNamespace = Objects.requireNonNull(repoNamespace);
            return this;
        }
        @CustomType.Setter
        public Builder repoOriginType(String repoOriginType) {
            this.repoOriginType = Objects.requireNonNull(repoOriginType);
            return this;
        }
        @CustomType.Setter
        public Builder securityGroupId(String securityGroupId) {
            this.securityGroupId = Objects.requireNonNull(securityGroupId);
            return this;
        }
        @CustomType.Setter
        public Builder slsConfigs(String slsConfigs) {
            this.slsConfigs = Objects.requireNonNull(slsConfigs);
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            this.status = Objects.requireNonNull(status);
            return this;
        }
        @CustomType.Setter
        public Builder tags(Map<String,Object> tags) {
            this.tags = Objects.requireNonNull(tags);
            return this;
        }
        @CustomType.Setter
        public Builder terminationGracePeriodSeconds(Integer terminationGracePeriodSeconds) {
            this.terminationGracePeriodSeconds = Objects.requireNonNull(terminationGracePeriodSeconds);
            return this;
        }
        @CustomType.Setter
        public Builder timezone(String timezone) {
            this.timezone = Objects.requireNonNull(timezone);
            return this;
        }
        @CustomType.Setter
        public Builder tomcatConfig(String tomcatConfig) {
            this.tomcatConfig = Objects.requireNonNull(tomcatConfig);
            return this;
        }
        @CustomType.Setter
        public Builder vpcId(String vpcId) {
            this.vpcId = Objects.requireNonNull(vpcId);
            return this;
        }
        @CustomType.Setter
        public Builder vswitchId(String vswitchId) {
            this.vswitchId = Objects.requireNonNull(vswitchId);
            return this;
        }
        @CustomType.Setter
        public Builder warStartOptions(String warStartOptions) {
            this.warStartOptions = Objects.requireNonNull(warStartOptions);
            return this;
        }
        @CustomType.Setter
        public Builder webContainer(String webContainer) {
            this.webContainer = Objects.requireNonNull(webContainer);
            return this;
        }
        public GetApplicationsApplication build() {
            final var o = new GetApplicationsApplication();
            o.acrAssumeRoleArn = acrAssumeRoleArn;
            o.appDescription = appDescription;
            o.appName = appName;
            o.applicationId = applicationId;
            o.command = command;
            o.commandArgs = commandArgs;
            o.configMapMountDesc = configMapMountDesc;
            o.cpu = cpu;
            o.createTime = createTime;
            o.customHostAlias = customHostAlias;
            o.edasContainerVersion = edasContainerVersion;
            o.envs = envs;
            o.id = id;
            o.imageUrl = imageUrl;
            o.jarStartArgs = jarStartArgs;
            o.jarStartOptions = jarStartOptions;
            o.jdk = jdk;
            o.liveness = liveness;
            o.memory = memory;
            o.minReadyInstances = minReadyInstances;
            o.mountDescs = mountDescs;
            o.mountHost = mountHost;
            o.namespaceId = namespaceId;
            o.nasId = nasId;
            o.ossAkId = ossAkId;
            o.ossAkSecret = ossAkSecret;
            o.ossMountDescs = ossMountDescs;
            o.ossMountDetails = ossMountDetails;
            o.packageType = packageType;
            o.packageUrl = packageUrl;
            o.packageVersion = packageVersion;
            o.phpArmsConfigLocation = phpArmsConfigLocation;
            o.phpConfig = phpConfig;
            o.phpConfigLocation = phpConfigLocation;
            o.postStart = postStart;
            o.preStop = preStop;
            o.readiness = readiness;
            o.regionId = regionId;
            o.replicas = replicas;
            o.repoName = repoName;
            o.repoNamespace = repoNamespace;
            o.repoOriginType = repoOriginType;
            o.securityGroupId = securityGroupId;
            o.slsConfigs = slsConfigs;
            o.status = status;
            o.tags = tags;
            o.terminationGracePeriodSeconds = terminationGracePeriodSeconds;
            o.timezone = timezone;
            o.tomcatConfig = tomcatConfig;
            o.vpcId = vpcId;
            o.vswitchId = vswitchId;
            o.warStartOptions = warStartOptions;
            o.webContainer = webContainer;
            return o;
        }
    }
}
