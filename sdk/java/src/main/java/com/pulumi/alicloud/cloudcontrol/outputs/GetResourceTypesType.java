// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.cloudcontrol.outputs;

import com.pulumi.alicloud.cloudcontrol.outputs.GetResourceTypesTypeHandlers;
import com.pulumi.alicloud.cloudcontrol.outputs.GetResourceTypesTypeInfo;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetResourceTypesType {
    /**
     * @return Create an operation private parameter collection. The attributes are not returned in the resource query operation, but the parameters are required in the creation operation.
     * 
     */
    private List<String> createOnlyProperties;
    /**
     * @return Delete operation private parameter collection. The attribute is not returned in the resource query operation, but the parameter is required in the delete operation.
     * 
     */
    private List<String> deleteOnlyProperties;
    /**
     * @return A collection of attributes that can be used as the filter parameter during the list operation.
     * 
     */
    private List<String> filterProperties;
    /**
     * @return Query operation private parameter collection. The attribute is not returned in the resource query operation, but the input parameter is required in the query operation.
     * 
     */
    private List<String> getOnlyProperties;
    /**
     * @return The collection of properties returned by the query.
     * 
     */
    private List<String> getResponseProperties;
    /**
     * @return Supported resource operation information (including RAM permissions).
     * 
     */
    private GetResourceTypesTypeHandlers handlers;
    /**
     * @return The ID of the resource supplied above.
     * 
     */
    private String id;
    /**
     * @return Basic information about the resource type.
     * 
     */
    private List<GetResourceTypesTypeInfo> infos;
    /**
     * @return Enumerate the operation private parameter collection. The attributes are not returned in the resource query operation, but the parameters that need to be passed in the enumeration operation.
     * 
     */
    private List<String> listOnlyProperties;
    /**
     * @return Enumerates the returned property collection.
     * 
     */
    private List<String> listResponseProperties;
    /**
     * @return Resource ID
     * 
     */
    private String primaryIdentifier;
    /**
     * @return Product Code.
     * 
     */
    private String product;
    /**
     * @return Resource attribute definition, where key is the attribute name and value is the attribute details.
     * 
     */
    private String properties;
    /**
     * @return A collection of public attributes, which are the basic attributes of the resource. Non-Operation private parameters.
     * 
     */
    private List<String> publicProperties;
    /**
     * @return A set of read-only parameters. It is returned only in the list or get Operation. It is not used as an input parameter during creation and change.
     * 
     */
    private List<String> readOnlyProperties;
    /**
     * @return Resource creation required parameter collection.
     * 
     */
    private List<String> requireds;
    /**
     * @return The resource type.
     * 
     */
    private String resourceType;
    /**
     * @return A collection of sensitive attributes, such as passwords.
     * 
     */
    private List<String> sensitiveInfoProperties;
    /**
     * @return Update operation private parameter collection. The attributes are not returned in the resource query operation, but the parameters are required in the update operation.
     * 
     */
    private List<String> updateOnlyProperties;
    /**
     * @return A collection of properties that can be modified.
     * 
     */
    private List<String> updateTypeProperties;

    private GetResourceTypesType() {}
    /**
     * @return Create an operation private parameter collection. The attributes are not returned in the resource query operation, but the parameters are required in the creation operation.
     * 
     */
    public List<String> createOnlyProperties() {
        return this.createOnlyProperties;
    }
    /**
     * @return Delete operation private parameter collection. The attribute is not returned in the resource query operation, but the parameter is required in the delete operation.
     * 
     */
    public List<String> deleteOnlyProperties() {
        return this.deleteOnlyProperties;
    }
    /**
     * @return A collection of attributes that can be used as the filter parameter during the list operation.
     * 
     */
    public List<String> filterProperties() {
        return this.filterProperties;
    }
    /**
     * @return Query operation private parameter collection. The attribute is not returned in the resource query operation, but the input parameter is required in the query operation.
     * 
     */
    public List<String> getOnlyProperties() {
        return this.getOnlyProperties;
    }
    /**
     * @return The collection of properties returned by the query.
     * 
     */
    public List<String> getResponseProperties() {
        return this.getResponseProperties;
    }
    /**
     * @return Supported resource operation information (including RAM permissions).
     * 
     */
    public GetResourceTypesTypeHandlers handlers() {
        return this.handlers;
    }
    /**
     * @return The ID of the resource supplied above.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Basic information about the resource type.
     * 
     */
    public List<GetResourceTypesTypeInfo> infos() {
        return this.infos;
    }
    /**
     * @return Enumerate the operation private parameter collection. The attributes are not returned in the resource query operation, but the parameters that need to be passed in the enumeration operation.
     * 
     */
    public List<String> listOnlyProperties() {
        return this.listOnlyProperties;
    }
    /**
     * @return Enumerates the returned property collection.
     * 
     */
    public List<String> listResponseProperties() {
        return this.listResponseProperties;
    }
    /**
     * @return Resource ID
     * 
     */
    public String primaryIdentifier() {
        return this.primaryIdentifier;
    }
    /**
     * @return Product Code.
     * 
     */
    public String product() {
        return this.product;
    }
    /**
     * @return Resource attribute definition, where key is the attribute name and value is the attribute details.
     * 
     */
    public String properties() {
        return this.properties;
    }
    /**
     * @return A collection of public attributes, which are the basic attributes of the resource. Non-Operation private parameters.
     * 
     */
    public List<String> publicProperties() {
        return this.publicProperties;
    }
    /**
     * @return A set of read-only parameters. It is returned only in the list or get Operation. It is not used as an input parameter during creation and change.
     * 
     */
    public List<String> readOnlyProperties() {
        return this.readOnlyProperties;
    }
    /**
     * @return Resource creation required parameter collection.
     * 
     */
    public List<String> requireds() {
        return this.requireds;
    }
    /**
     * @return The resource type.
     * 
     */
    public String resourceType() {
        return this.resourceType;
    }
    /**
     * @return A collection of sensitive attributes, such as passwords.
     * 
     */
    public List<String> sensitiveInfoProperties() {
        return this.sensitiveInfoProperties;
    }
    /**
     * @return Update operation private parameter collection. The attributes are not returned in the resource query operation, but the parameters are required in the update operation.
     * 
     */
    public List<String> updateOnlyProperties() {
        return this.updateOnlyProperties;
    }
    /**
     * @return A collection of properties that can be modified.
     * 
     */
    public List<String> updateTypeProperties() {
        return this.updateTypeProperties;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetResourceTypesType defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<String> createOnlyProperties;
        private List<String> deleteOnlyProperties;
        private List<String> filterProperties;
        private List<String> getOnlyProperties;
        private List<String> getResponseProperties;
        private GetResourceTypesTypeHandlers handlers;
        private String id;
        private List<GetResourceTypesTypeInfo> infos;
        private List<String> listOnlyProperties;
        private List<String> listResponseProperties;
        private String primaryIdentifier;
        private String product;
        private String properties;
        private List<String> publicProperties;
        private List<String> readOnlyProperties;
        private List<String> requireds;
        private String resourceType;
        private List<String> sensitiveInfoProperties;
        private List<String> updateOnlyProperties;
        private List<String> updateTypeProperties;
        public Builder() {}
        public Builder(GetResourceTypesType defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.createOnlyProperties = defaults.createOnlyProperties;
    	      this.deleteOnlyProperties = defaults.deleteOnlyProperties;
    	      this.filterProperties = defaults.filterProperties;
    	      this.getOnlyProperties = defaults.getOnlyProperties;
    	      this.getResponseProperties = defaults.getResponseProperties;
    	      this.handlers = defaults.handlers;
    	      this.id = defaults.id;
    	      this.infos = defaults.infos;
    	      this.listOnlyProperties = defaults.listOnlyProperties;
    	      this.listResponseProperties = defaults.listResponseProperties;
    	      this.primaryIdentifier = defaults.primaryIdentifier;
    	      this.product = defaults.product;
    	      this.properties = defaults.properties;
    	      this.publicProperties = defaults.publicProperties;
    	      this.readOnlyProperties = defaults.readOnlyProperties;
    	      this.requireds = defaults.requireds;
    	      this.resourceType = defaults.resourceType;
    	      this.sensitiveInfoProperties = defaults.sensitiveInfoProperties;
    	      this.updateOnlyProperties = defaults.updateOnlyProperties;
    	      this.updateTypeProperties = defaults.updateTypeProperties;
        }

        @CustomType.Setter
        public Builder createOnlyProperties(List<String> createOnlyProperties) {
            if (createOnlyProperties == null) {
              throw new MissingRequiredPropertyException("GetResourceTypesType", "createOnlyProperties");
            }
            this.createOnlyProperties = createOnlyProperties;
            return this;
        }
        public Builder createOnlyProperties(String... createOnlyProperties) {
            return createOnlyProperties(List.of(createOnlyProperties));
        }
        @CustomType.Setter
        public Builder deleteOnlyProperties(List<String> deleteOnlyProperties) {
            if (deleteOnlyProperties == null) {
              throw new MissingRequiredPropertyException("GetResourceTypesType", "deleteOnlyProperties");
            }
            this.deleteOnlyProperties = deleteOnlyProperties;
            return this;
        }
        public Builder deleteOnlyProperties(String... deleteOnlyProperties) {
            return deleteOnlyProperties(List.of(deleteOnlyProperties));
        }
        @CustomType.Setter
        public Builder filterProperties(List<String> filterProperties) {
            if (filterProperties == null) {
              throw new MissingRequiredPropertyException("GetResourceTypesType", "filterProperties");
            }
            this.filterProperties = filterProperties;
            return this;
        }
        public Builder filterProperties(String... filterProperties) {
            return filterProperties(List.of(filterProperties));
        }
        @CustomType.Setter
        public Builder getOnlyProperties(List<String> getOnlyProperties) {
            if (getOnlyProperties == null) {
              throw new MissingRequiredPropertyException("GetResourceTypesType", "getOnlyProperties");
            }
            this.getOnlyProperties = getOnlyProperties;
            return this;
        }
        public Builder getOnlyProperties(String... getOnlyProperties) {
            return getOnlyProperties(List.of(getOnlyProperties));
        }
        @CustomType.Setter
        public Builder getResponseProperties(List<String> getResponseProperties) {
            if (getResponseProperties == null) {
              throw new MissingRequiredPropertyException("GetResourceTypesType", "getResponseProperties");
            }
            this.getResponseProperties = getResponseProperties;
            return this;
        }
        public Builder getResponseProperties(String... getResponseProperties) {
            return getResponseProperties(List.of(getResponseProperties));
        }
        @CustomType.Setter
        public Builder handlers(GetResourceTypesTypeHandlers handlers) {
            if (handlers == null) {
              throw new MissingRequiredPropertyException("GetResourceTypesType", "handlers");
            }
            this.handlers = handlers;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetResourceTypesType", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder infos(List<GetResourceTypesTypeInfo> infos) {
            if (infos == null) {
              throw new MissingRequiredPropertyException("GetResourceTypesType", "infos");
            }
            this.infos = infos;
            return this;
        }
        public Builder infos(GetResourceTypesTypeInfo... infos) {
            return infos(List.of(infos));
        }
        @CustomType.Setter
        public Builder listOnlyProperties(List<String> listOnlyProperties) {
            if (listOnlyProperties == null) {
              throw new MissingRequiredPropertyException("GetResourceTypesType", "listOnlyProperties");
            }
            this.listOnlyProperties = listOnlyProperties;
            return this;
        }
        public Builder listOnlyProperties(String... listOnlyProperties) {
            return listOnlyProperties(List.of(listOnlyProperties));
        }
        @CustomType.Setter
        public Builder listResponseProperties(List<String> listResponseProperties) {
            if (listResponseProperties == null) {
              throw new MissingRequiredPropertyException("GetResourceTypesType", "listResponseProperties");
            }
            this.listResponseProperties = listResponseProperties;
            return this;
        }
        public Builder listResponseProperties(String... listResponseProperties) {
            return listResponseProperties(List.of(listResponseProperties));
        }
        @CustomType.Setter
        public Builder primaryIdentifier(String primaryIdentifier) {
            if (primaryIdentifier == null) {
              throw new MissingRequiredPropertyException("GetResourceTypesType", "primaryIdentifier");
            }
            this.primaryIdentifier = primaryIdentifier;
            return this;
        }
        @CustomType.Setter
        public Builder product(String product) {
            if (product == null) {
              throw new MissingRequiredPropertyException("GetResourceTypesType", "product");
            }
            this.product = product;
            return this;
        }
        @CustomType.Setter
        public Builder properties(String properties) {
            if (properties == null) {
              throw new MissingRequiredPropertyException("GetResourceTypesType", "properties");
            }
            this.properties = properties;
            return this;
        }
        @CustomType.Setter
        public Builder publicProperties(List<String> publicProperties) {
            if (publicProperties == null) {
              throw new MissingRequiredPropertyException("GetResourceTypesType", "publicProperties");
            }
            this.publicProperties = publicProperties;
            return this;
        }
        public Builder publicProperties(String... publicProperties) {
            return publicProperties(List.of(publicProperties));
        }
        @CustomType.Setter
        public Builder readOnlyProperties(List<String> readOnlyProperties) {
            if (readOnlyProperties == null) {
              throw new MissingRequiredPropertyException("GetResourceTypesType", "readOnlyProperties");
            }
            this.readOnlyProperties = readOnlyProperties;
            return this;
        }
        public Builder readOnlyProperties(String... readOnlyProperties) {
            return readOnlyProperties(List.of(readOnlyProperties));
        }
        @CustomType.Setter
        public Builder requireds(List<String> requireds) {
            if (requireds == null) {
              throw new MissingRequiredPropertyException("GetResourceTypesType", "requireds");
            }
            this.requireds = requireds;
            return this;
        }
        public Builder requireds(String... requireds) {
            return requireds(List.of(requireds));
        }
        @CustomType.Setter
        public Builder resourceType(String resourceType) {
            if (resourceType == null) {
              throw new MissingRequiredPropertyException("GetResourceTypesType", "resourceType");
            }
            this.resourceType = resourceType;
            return this;
        }
        @CustomType.Setter
        public Builder sensitiveInfoProperties(List<String> sensitiveInfoProperties) {
            if (sensitiveInfoProperties == null) {
              throw new MissingRequiredPropertyException("GetResourceTypesType", "sensitiveInfoProperties");
            }
            this.sensitiveInfoProperties = sensitiveInfoProperties;
            return this;
        }
        public Builder sensitiveInfoProperties(String... sensitiveInfoProperties) {
            return sensitiveInfoProperties(List.of(sensitiveInfoProperties));
        }
        @CustomType.Setter
        public Builder updateOnlyProperties(List<String> updateOnlyProperties) {
            if (updateOnlyProperties == null) {
              throw new MissingRequiredPropertyException("GetResourceTypesType", "updateOnlyProperties");
            }
            this.updateOnlyProperties = updateOnlyProperties;
            return this;
        }
        public Builder updateOnlyProperties(String... updateOnlyProperties) {
            return updateOnlyProperties(List.of(updateOnlyProperties));
        }
        @CustomType.Setter
        public Builder updateTypeProperties(List<String> updateTypeProperties) {
            if (updateTypeProperties == null) {
              throw new MissingRequiredPropertyException("GetResourceTypesType", "updateTypeProperties");
            }
            this.updateTypeProperties = updateTypeProperties;
            return this;
        }
        public Builder updateTypeProperties(String... updateTypeProperties) {
            return updateTypeProperties(List.of(updateTypeProperties));
        }
        public GetResourceTypesType build() {
            final var _resultValue = new GetResourceTypesType();
            _resultValue.createOnlyProperties = createOnlyProperties;
            _resultValue.deleteOnlyProperties = deleteOnlyProperties;
            _resultValue.filterProperties = filterProperties;
            _resultValue.getOnlyProperties = getOnlyProperties;
            _resultValue.getResponseProperties = getResponseProperties;
            _resultValue.handlers = handlers;
            _resultValue.id = id;
            _resultValue.infos = infos;
            _resultValue.listOnlyProperties = listOnlyProperties;
            _resultValue.listResponseProperties = listResponseProperties;
            _resultValue.primaryIdentifier = primaryIdentifier;
            _resultValue.product = product;
            _resultValue.properties = properties;
            _resultValue.publicProperties = publicProperties;
            _resultValue.readOnlyProperties = readOnlyProperties;
            _resultValue.requireds = requireds;
            _resultValue.resourceType = resourceType;
            _resultValue.sensitiveInfoProperties = sensitiveInfoProperties;
            _resultValue.updateOnlyProperties = updateOnlyProperties;
            _resultValue.updateTypeProperties = updateTypeProperties;
            return _resultValue;
        }
    }
}
