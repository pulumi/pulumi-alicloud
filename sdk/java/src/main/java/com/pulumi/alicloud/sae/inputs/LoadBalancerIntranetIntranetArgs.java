// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.sae.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class LoadBalancerIntranetIntranetArgs extends com.pulumi.resources.ResourceArgs {

    public static final LoadBalancerIntranetIntranetArgs Empty = new LoadBalancerIntranetIntranetArgs();

    /**
     * The SSL certificate. `httpsCertId` is required when HTTPS is selected
     * 
     */
    @Import(name="httpsCertId")
    private @Nullable Output<String> httpsCertId;

    /**
     * @return The SSL certificate. `httpsCertId` is required when HTTPS is selected
     * 
     */
    public Optional<Output<String>> httpsCertId() {
        return Optional.ofNullable(this.httpsCertId);
    }

    /**
     * The SLB Port.
     * 
     */
    @Import(name="port")
    private @Nullable Output<Integer> port;

    /**
     * @return The SLB Port.
     * 
     */
    public Optional<Output<Integer>> port() {
        return Optional.ofNullable(this.port);
    }

    /**
     * The Network protocol. Valid values: `TCP` ,`HTTP`,`HTTPS`.
     * 
     */
    @Import(name="protocol")
    private @Nullable Output<String> protocol;

    /**
     * @return The Network protocol. Valid values: `TCP` ,`HTTP`,`HTTPS`.
     * 
     */
    public Optional<Output<String>> protocol() {
        return Optional.ofNullable(this.protocol);
    }

    /**
     * The Container port.
     * 
     */
    @Import(name="targetPort")
    private @Nullable Output<Integer> targetPort;

    /**
     * @return The Container port.
     * 
     */
    public Optional<Output<Integer>> targetPort() {
        return Optional.ofNullable(this.targetPort);
    }

    private LoadBalancerIntranetIntranetArgs() {}

    private LoadBalancerIntranetIntranetArgs(LoadBalancerIntranetIntranetArgs $) {
        this.httpsCertId = $.httpsCertId;
        this.port = $.port;
        this.protocol = $.protocol;
        this.targetPort = $.targetPort;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LoadBalancerIntranetIntranetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LoadBalancerIntranetIntranetArgs $;

        public Builder() {
            $ = new LoadBalancerIntranetIntranetArgs();
        }

        public Builder(LoadBalancerIntranetIntranetArgs defaults) {
            $ = new LoadBalancerIntranetIntranetArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param httpsCertId The SSL certificate. `httpsCertId` is required when HTTPS is selected
         * 
         * @return builder
         * 
         */
        public Builder httpsCertId(@Nullable Output<String> httpsCertId) {
            $.httpsCertId = httpsCertId;
            return this;
        }

        /**
         * @param httpsCertId The SSL certificate. `httpsCertId` is required when HTTPS is selected
         * 
         * @return builder
         * 
         */
        public Builder httpsCertId(String httpsCertId) {
            return httpsCertId(Output.of(httpsCertId));
        }

        /**
         * @param port The SLB Port.
         * 
         * @return builder
         * 
         */
        public Builder port(@Nullable Output<Integer> port) {
            $.port = port;
            return this;
        }

        /**
         * @param port The SLB Port.
         * 
         * @return builder
         * 
         */
        public Builder port(Integer port) {
            return port(Output.of(port));
        }

        /**
         * @param protocol The Network protocol. Valid values: `TCP` ,`HTTP`,`HTTPS`.
         * 
         * @return builder
         * 
         */
        public Builder protocol(@Nullable Output<String> protocol) {
            $.protocol = protocol;
            return this;
        }

        /**
         * @param protocol The Network protocol. Valid values: `TCP` ,`HTTP`,`HTTPS`.
         * 
         * @return builder
         * 
         */
        public Builder protocol(String protocol) {
            return protocol(Output.of(protocol));
        }

        /**
         * @param targetPort The Container port.
         * 
         * @return builder
         * 
         */
        public Builder targetPort(@Nullable Output<Integer> targetPort) {
            $.targetPort = targetPort;
            return this;
        }

        /**
         * @param targetPort The Container port.
         * 
         * @return builder
         * 
         */
        public Builder targetPort(Integer targetPort) {
            return targetPort(Output.of(targetPort));
        }

        public LoadBalancerIntranetIntranetArgs build() {
            return $;
        }
    }

}
