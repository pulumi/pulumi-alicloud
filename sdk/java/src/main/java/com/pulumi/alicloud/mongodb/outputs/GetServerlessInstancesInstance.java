// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.mongodb.outputs;

import com.pulumi.alicloud.mongodb.outputs.GetServerlessInstancesInstanceSecurityIpGroup;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetServerlessInstancesInstance {
    /**
     * @return The read/write throughput consumed by the instance.
     * 
     */
    private Integer capacityUnit;
    /**
     * @return The db instance class.
     * 
     */
    private String dbInstanceClass;
    /**
     * @return The db instance description.
     * 
     */
    private String dbInstanceDescription;
    /**
     * @return The db instance id.
     * 
     */
    private String dbInstanceId;
    /**
     * @return The db instance release protection.
     * 
     */
    private Boolean dbInstanceReleaseProtection;
    /**
     * @return The db instance storage.
     * 
     */
    private Integer dbInstanceStorage;
    /**
     * @return The database engine of the instance.
     * 
     */
    private String engine;
    /**
     * @return The database version number. Valid values: `4.2`.
     * 
     */
    private String engineVersion;
    /**
     * @return The time when the subscription instance expires. The time is in the `yyyy-MM-ddTHH:mmZ` format. The time is displayed in UTC.
     * 
     */
    private String expireTime;
    /**
     * @return The ID of the Serverless Instance.
     * 
     */
    private String id;
    /**
     * @return Indicates the type of the instance. Valid values: `0`: physical machine. `1`: ECS. `2`: DOCKER. `18`: k8s new architecture instance.
     * 
     */
    private String kindCode;
    /**
     * @return The locked status of the instance.
     * 
     */
    private String lockMode;
    /**
     * @return The start time of the maintenance window. The time is in the `HH:mmZ` format. The time is displayed in UTC.
     * 
     */
    private String maintainEndTime;
    /**
     * @return The end time of the maintenance window. The time is in the `HH:mmZ` format. The time is displayed in UTC.
     * 
     */
    private String maintainStartTime;
    /**
     * @return Instance maximum connections.
     * 
     */
    private Integer maxConnections;
    /**
     * @return The maximum IOPS of the instance.
     * 
     */
    private Integer maxIops;
    /**
     * @return The network type of the instance.
     * 
     */
    private String networkType;
    /**
     * @return The Payment type of the instance.
     * 
     */
    private String paymentType;
    /**
     * @return The access protocol type of the instance. Valid values: `mongodb`, `dynamodb`.
     * 
     */
    private String protocolType;
    /**
     * @return The ID of the resource group.
     * 
     */
    private String resourceGroupId;
    /**
     * @return The security ip list.
     * 
     */
    private List<GetServerlessInstancesInstanceSecurityIpGroup> securityIpGroups;
    /**
     * @return The status of the instance.
     * 
     */
    private String status;
    /**
     * @return The storage engine used by the instance.
     * 
     */
    private String storageEngine;
    /**
     * @return The tag of the resource.
     * 
     */
    private Map<String,Object> tags;
    /**
     * @return Intranet secret free access mode.
     * 
     */
    private String vpcAuthMode;
    /**
     * @return The ID of the VPC network.
     * 
     */
    private String vpcId;
    /**
     * @return The id of the vswitch.
     * 
     */
    private String vswitchId;
    /**
     * @return The ID of the zone.
     * 
     */
    private String zoneId;

    private GetServerlessInstancesInstance() {}
    /**
     * @return The read/write throughput consumed by the instance.
     * 
     */
    public Integer capacityUnit() {
        return this.capacityUnit;
    }
    /**
     * @return The db instance class.
     * 
     */
    public String dbInstanceClass() {
        return this.dbInstanceClass;
    }
    /**
     * @return The db instance description.
     * 
     */
    public String dbInstanceDescription() {
        return this.dbInstanceDescription;
    }
    /**
     * @return The db instance id.
     * 
     */
    public String dbInstanceId() {
        return this.dbInstanceId;
    }
    /**
     * @return The db instance release protection.
     * 
     */
    public Boolean dbInstanceReleaseProtection() {
        return this.dbInstanceReleaseProtection;
    }
    /**
     * @return The db instance storage.
     * 
     */
    public Integer dbInstanceStorage() {
        return this.dbInstanceStorage;
    }
    /**
     * @return The database engine of the instance.
     * 
     */
    public String engine() {
        return this.engine;
    }
    /**
     * @return The database version number. Valid values: `4.2`.
     * 
     */
    public String engineVersion() {
        return this.engineVersion;
    }
    /**
     * @return The time when the subscription instance expires. The time is in the `yyyy-MM-ddTHH:mmZ` format. The time is displayed in UTC.
     * 
     */
    public String expireTime() {
        return this.expireTime;
    }
    /**
     * @return The ID of the Serverless Instance.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Indicates the type of the instance. Valid values: `0`: physical machine. `1`: ECS. `2`: DOCKER. `18`: k8s new architecture instance.
     * 
     */
    public String kindCode() {
        return this.kindCode;
    }
    /**
     * @return The locked status of the instance.
     * 
     */
    public String lockMode() {
        return this.lockMode;
    }
    /**
     * @return The start time of the maintenance window. The time is in the `HH:mmZ` format. The time is displayed in UTC.
     * 
     */
    public String maintainEndTime() {
        return this.maintainEndTime;
    }
    /**
     * @return The end time of the maintenance window. The time is in the `HH:mmZ` format. The time is displayed in UTC.
     * 
     */
    public String maintainStartTime() {
        return this.maintainStartTime;
    }
    /**
     * @return Instance maximum connections.
     * 
     */
    public Integer maxConnections() {
        return this.maxConnections;
    }
    /**
     * @return The maximum IOPS of the instance.
     * 
     */
    public Integer maxIops() {
        return this.maxIops;
    }
    /**
     * @return The network type of the instance.
     * 
     */
    public String networkType() {
        return this.networkType;
    }
    /**
     * @return The Payment type of the instance.
     * 
     */
    public String paymentType() {
        return this.paymentType;
    }
    /**
     * @return The access protocol type of the instance. Valid values: `mongodb`, `dynamodb`.
     * 
     */
    public String protocolType() {
        return this.protocolType;
    }
    /**
     * @return The ID of the resource group.
     * 
     */
    public String resourceGroupId() {
        return this.resourceGroupId;
    }
    /**
     * @return The security ip list.
     * 
     */
    public List<GetServerlessInstancesInstanceSecurityIpGroup> securityIpGroups() {
        return this.securityIpGroups;
    }
    /**
     * @return The status of the instance.
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return The storage engine used by the instance.
     * 
     */
    public String storageEngine() {
        return this.storageEngine;
    }
    /**
     * @return The tag of the resource.
     * 
     */
    public Map<String,Object> tags() {
        return this.tags;
    }
    /**
     * @return Intranet secret free access mode.
     * 
     */
    public String vpcAuthMode() {
        return this.vpcAuthMode;
    }
    /**
     * @return The ID of the VPC network.
     * 
     */
    public String vpcId() {
        return this.vpcId;
    }
    /**
     * @return The id of the vswitch.
     * 
     */
    public String vswitchId() {
        return this.vswitchId;
    }
    /**
     * @return The ID of the zone.
     * 
     */
    public String zoneId() {
        return this.zoneId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetServerlessInstancesInstance defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Integer capacityUnit;
        private String dbInstanceClass;
        private String dbInstanceDescription;
        private String dbInstanceId;
        private Boolean dbInstanceReleaseProtection;
        private Integer dbInstanceStorage;
        private String engine;
        private String engineVersion;
        private String expireTime;
        private String id;
        private String kindCode;
        private String lockMode;
        private String maintainEndTime;
        private String maintainStartTime;
        private Integer maxConnections;
        private Integer maxIops;
        private String networkType;
        private String paymentType;
        private String protocolType;
        private String resourceGroupId;
        private List<GetServerlessInstancesInstanceSecurityIpGroup> securityIpGroups;
        private String status;
        private String storageEngine;
        private Map<String,Object> tags;
        private String vpcAuthMode;
        private String vpcId;
        private String vswitchId;
        private String zoneId;
        public Builder() {}
        public Builder(GetServerlessInstancesInstance defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.capacityUnit = defaults.capacityUnit;
    	      this.dbInstanceClass = defaults.dbInstanceClass;
    	      this.dbInstanceDescription = defaults.dbInstanceDescription;
    	      this.dbInstanceId = defaults.dbInstanceId;
    	      this.dbInstanceReleaseProtection = defaults.dbInstanceReleaseProtection;
    	      this.dbInstanceStorage = defaults.dbInstanceStorage;
    	      this.engine = defaults.engine;
    	      this.engineVersion = defaults.engineVersion;
    	      this.expireTime = defaults.expireTime;
    	      this.id = defaults.id;
    	      this.kindCode = defaults.kindCode;
    	      this.lockMode = defaults.lockMode;
    	      this.maintainEndTime = defaults.maintainEndTime;
    	      this.maintainStartTime = defaults.maintainStartTime;
    	      this.maxConnections = defaults.maxConnections;
    	      this.maxIops = defaults.maxIops;
    	      this.networkType = defaults.networkType;
    	      this.paymentType = defaults.paymentType;
    	      this.protocolType = defaults.protocolType;
    	      this.resourceGroupId = defaults.resourceGroupId;
    	      this.securityIpGroups = defaults.securityIpGroups;
    	      this.status = defaults.status;
    	      this.storageEngine = defaults.storageEngine;
    	      this.tags = defaults.tags;
    	      this.vpcAuthMode = defaults.vpcAuthMode;
    	      this.vpcId = defaults.vpcId;
    	      this.vswitchId = defaults.vswitchId;
    	      this.zoneId = defaults.zoneId;
        }

        @CustomType.Setter
        public Builder capacityUnit(Integer capacityUnit) {
            if (capacityUnit == null) {
              throw new MissingRequiredPropertyException("GetServerlessInstancesInstance", "capacityUnit");
            }
            this.capacityUnit = capacityUnit;
            return this;
        }
        @CustomType.Setter
        public Builder dbInstanceClass(String dbInstanceClass) {
            if (dbInstanceClass == null) {
              throw new MissingRequiredPropertyException("GetServerlessInstancesInstance", "dbInstanceClass");
            }
            this.dbInstanceClass = dbInstanceClass;
            return this;
        }
        @CustomType.Setter
        public Builder dbInstanceDescription(String dbInstanceDescription) {
            if (dbInstanceDescription == null) {
              throw new MissingRequiredPropertyException("GetServerlessInstancesInstance", "dbInstanceDescription");
            }
            this.dbInstanceDescription = dbInstanceDescription;
            return this;
        }
        @CustomType.Setter
        public Builder dbInstanceId(String dbInstanceId) {
            if (dbInstanceId == null) {
              throw new MissingRequiredPropertyException("GetServerlessInstancesInstance", "dbInstanceId");
            }
            this.dbInstanceId = dbInstanceId;
            return this;
        }
        @CustomType.Setter
        public Builder dbInstanceReleaseProtection(Boolean dbInstanceReleaseProtection) {
            if (dbInstanceReleaseProtection == null) {
              throw new MissingRequiredPropertyException("GetServerlessInstancesInstance", "dbInstanceReleaseProtection");
            }
            this.dbInstanceReleaseProtection = dbInstanceReleaseProtection;
            return this;
        }
        @CustomType.Setter
        public Builder dbInstanceStorage(Integer dbInstanceStorage) {
            if (dbInstanceStorage == null) {
              throw new MissingRequiredPropertyException("GetServerlessInstancesInstance", "dbInstanceStorage");
            }
            this.dbInstanceStorage = dbInstanceStorage;
            return this;
        }
        @CustomType.Setter
        public Builder engine(String engine) {
            if (engine == null) {
              throw new MissingRequiredPropertyException("GetServerlessInstancesInstance", "engine");
            }
            this.engine = engine;
            return this;
        }
        @CustomType.Setter
        public Builder engineVersion(String engineVersion) {
            if (engineVersion == null) {
              throw new MissingRequiredPropertyException("GetServerlessInstancesInstance", "engineVersion");
            }
            this.engineVersion = engineVersion;
            return this;
        }
        @CustomType.Setter
        public Builder expireTime(String expireTime) {
            if (expireTime == null) {
              throw new MissingRequiredPropertyException("GetServerlessInstancesInstance", "expireTime");
            }
            this.expireTime = expireTime;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetServerlessInstancesInstance", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder kindCode(String kindCode) {
            if (kindCode == null) {
              throw new MissingRequiredPropertyException("GetServerlessInstancesInstance", "kindCode");
            }
            this.kindCode = kindCode;
            return this;
        }
        @CustomType.Setter
        public Builder lockMode(String lockMode) {
            if (lockMode == null) {
              throw new MissingRequiredPropertyException("GetServerlessInstancesInstance", "lockMode");
            }
            this.lockMode = lockMode;
            return this;
        }
        @CustomType.Setter
        public Builder maintainEndTime(String maintainEndTime) {
            if (maintainEndTime == null) {
              throw new MissingRequiredPropertyException("GetServerlessInstancesInstance", "maintainEndTime");
            }
            this.maintainEndTime = maintainEndTime;
            return this;
        }
        @CustomType.Setter
        public Builder maintainStartTime(String maintainStartTime) {
            if (maintainStartTime == null) {
              throw new MissingRequiredPropertyException("GetServerlessInstancesInstance", "maintainStartTime");
            }
            this.maintainStartTime = maintainStartTime;
            return this;
        }
        @CustomType.Setter
        public Builder maxConnections(Integer maxConnections) {
            if (maxConnections == null) {
              throw new MissingRequiredPropertyException("GetServerlessInstancesInstance", "maxConnections");
            }
            this.maxConnections = maxConnections;
            return this;
        }
        @CustomType.Setter
        public Builder maxIops(Integer maxIops) {
            if (maxIops == null) {
              throw new MissingRequiredPropertyException("GetServerlessInstancesInstance", "maxIops");
            }
            this.maxIops = maxIops;
            return this;
        }
        @CustomType.Setter
        public Builder networkType(String networkType) {
            if (networkType == null) {
              throw new MissingRequiredPropertyException("GetServerlessInstancesInstance", "networkType");
            }
            this.networkType = networkType;
            return this;
        }
        @CustomType.Setter
        public Builder paymentType(String paymentType) {
            if (paymentType == null) {
              throw new MissingRequiredPropertyException("GetServerlessInstancesInstance", "paymentType");
            }
            this.paymentType = paymentType;
            return this;
        }
        @CustomType.Setter
        public Builder protocolType(String protocolType) {
            if (protocolType == null) {
              throw new MissingRequiredPropertyException("GetServerlessInstancesInstance", "protocolType");
            }
            this.protocolType = protocolType;
            return this;
        }
        @CustomType.Setter
        public Builder resourceGroupId(String resourceGroupId) {
            if (resourceGroupId == null) {
              throw new MissingRequiredPropertyException("GetServerlessInstancesInstance", "resourceGroupId");
            }
            this.resourceGroupId = resourceGroupId;
            return this;
        }
        @CustomType.Setter
        public Builder securityIpGroups(List<GetServerlessInstancesInstanceSecurityIpGroup> securityIpGroups) {
            if (securityIpGroups == null) {
              throw new MissingRequiredPropertyException("GetServerlessInstancesInstance", "securityIpGroups");
            }
            this.securityIpGroups = securityIpGroups;
            return this;
        }
        public Builder securityIpGroups(GetServerlessInstancesInstanceSecurityIpGroup... securityIpGroups) {
            return securityIpGroups(List.of(securityIpGroups));
        }
        @CustomType.Setter
        public Builder status(String status) {
            if (status == null) {
              throw new MissingRequiredPropertyException("GetServerlessInstancesInstance", "status");
            }
            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder storageEngine(String storageEngine) {
            if (storageEngine == null) {
              throw new MissingRequiredPropertyException("GetServerlessInstancesInstance", "storageEngine");
            }
            this.storageEngine = storageEngine;
            return this;
        }
        @CustomType.Setter
        public Builder tags(Map<String,Object> tags) {
            if (tags == null) {
              throw new MissingRequiredPropertyException("GetServerlessInstancesInstance", "tags");
            }
            this.tags = tags;
            return this;
        }
        @CustomType.Setter
        public Builder vpcAuthMode(String vpcAuthMode) {
            if (vpcAuthMode == null) {
              throw new MissingRequiredPropertyException("GetServerlessInstancesInstance", "vpcAuthMode");
            }
            this.vpcAuthMode = vpcAuthMode;
            return this;
        }
        @CustomType.Setter
        public Builder vpcId(String vpcId) {
            if (vpcId == null) {
              throw new MissingRequiredPropertyException("GetServerlessInstancesInstance", "vpcId");
            }
            this.vpcId = vpcId;
            return this;
        }
        @CustomType.Setter
        public Builder vswitchId(String vswitchId) {
            if (vswitchId == null) {
              throw new MissingRequiredPropertyException("GetServerlessInstancesInstance", "vswitchId");
            }
            this.vswitchId = vswitchId;
            return this;
        }
        @CustomType.Setter
        public Builder zoneId(String zoneId) {
            if (zoneId == null) {
              throw new MissingRequiredPropertyException("GetServerlessInstancesInstance", "zoneId");
            }
            this.zoneId = zoneId;
            return this;
        }
        public GetServerlessInstancesInstance build() {
            final var _resultValue = new GetServerlessInstancesInstance();
            _resultValue.capacityUnit = capacityUnit;
            _resultValue.dbInstanceClass = dbInstanceClass;
            _resultValue.dbInstanceDescription = dbInstanceDescription;
            _resultValue.dbInstanceId = dbInstanceId;
            _resultValue.dbInstanceReleaseProtection = dbInstanceReleaseProtection;
            _resultValue.dbInstanceStorage = dbInstanceStorage;
            _resultValue.engine = engine;
            _resultValue.engineVersion = engineVersion;
            _resultValue.expireTime = expireTime;
            _resultValue.id = id;
            _resultValue.kindCode = kindCode;
            _resultValue.lockMode = lockMode;
            _resultValue.maintainEndTime = maintainEndTime;
            _resultValue.maintainStartTime = maintainStartTime;
            _resultValue.maxConnections = maxConnections;
            _resultValue.maxIops = maxIops;
            _resultValue.networkType = networkType;
            _resultValue.paymentType = paymentType;
            _resultValue.protocolType = protocolType;
            _resultValue.resourceGroupId = resourceGroupId;
            _resultValue.securityIpGroups = securityIpGroups;
            _resultValue.status = status;
            _resultValue.storageEngine = storageEngine;
            _resultValue.tags = tags;
            _resultValue.vpcAuthMode = vpcAuthMode;
            _resultValue.vpcId = vpcId;
            _resultValue.vswitchId = vswitchId;
            _resultValue.zoneId = zoneId;
            return _resultValue;
        }
    }
}
