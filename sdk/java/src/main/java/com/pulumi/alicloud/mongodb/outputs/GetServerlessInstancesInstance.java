// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.mongodb.outputs;

import com.pulumi.alicloud.mongodb.outputs.GetServerlessInstancesInstanceSecurityIpGroup;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetServerlessInstancesInstance {
    /**
     * @return The read/write throughput consumed by the instance.
     * 
     */
    private Integer capacityUnit;
    /**
     * @return The db instance class.
     * 
     */
    private String dbInstanceClass;
    /**
     * @return The db instance description.
     * 
     */
    private String dbInstanceDescription;
    /**
     * @return The db instance id.
     * 
     */
    private String dbInstanceId;
    /**
     * @return The db instance release protection.
     * 
     */
    private Boolean dbInstanceReleaseProtection;
    /**
     * @return The db instance storage.
     * 
     */
    private Integer dbInstanceStorage;
    /**
     * @return The database engine of the instance.
     * 
     */
    private String engine;
    /**
     * @return The database version number. Valid values: `4.2`.
     * 
     */
    private String engineVersion;
    /**
     * @return The time when the subscription instance expires. The time is in the `yyyy-MM-ddTHH:mmZ` format. The time is displayed in UTC.
     * 
     */
    private String expireTime;
    /**
     * @return The ID of the Serverless Instance.
     * 
     */
    private String id;
    /**
     * @return Indicates the type of the instance. Valid values: `0`: physical machine. `1`: ECS. `2`: DOCKER. `18`: k8s new architecture instance.
     * 
     */
    private String kindCode;
    /**
     * @return The locked status of the instance.
     * 
     */
    private String lockMode;
    /**
     * @return The start time of the maintenance window. The time is in the `HH:mmZ` format. The time is displayed in UTC.
     * 
     */
    private String maintainEndTime;
    /**
     * @return The end time of the maintenance window. The time is in the `HH:mmZ` format. The time is displayed in UTC.
     * 
     */
    private String maintainStartTime;
    /**
     * @return Instance maximum connections.
     * 
     */
    private Integer maxConnections;
    /**
     * @return The maximum IOPS of the instance.
     * 
     */
    private Integer maxIops;
    /**
     * @return The network type of the instance.
     * 
     */
    private String networkType;
    /**
     * @return The Payment type of the instance.
     * 
     */
    private String paymentType;
    /**
     * @return The access protocol type of the instance. Valid values: `mongodb`, `dynamodb`.
     * 
     */
    private String protocolType;
    /**
     * @return The ID of the resource group.
     * 
     */
    private String resourceGroupId;
    /**
     * @return The security ip list.
     * 
     */
    private List<GetServerlessInstancesInstanceSecurityIpGroup> securityIpGroups;
    /**
     * @return The status of the instance.
     * 
     */
    private String status;
    /**
     * @return The storage engine used by the instance.
     * 
     */
    private String storageEngine;
    /**
     * @return The tag of the resource.
     * 
     */
    private Map<String,Object> tags;
    /**
     * @return Intranet secret free access mode.
     * 
     */
    private String vpcAuthMode;
    /**
     * @return The ID of the VPC network.
     * 
     */
    private String vpcId;
    /**
     * @return The id of the vswitch.
     * 
     */
    private String vswitchId;
    /**
     * @return The ID of the zone.
     * 
     */
    private String zoneId;

    private GetServerlessInstancesInstance() {}
    /**
     * @return The read/write throughput consumed by the instance.
     * 
     */
    public Integer capacityUnit() {
        return this.capacityUnit;
    }
    /**
     * @return The db instance class.
     * 
     */
    public String dbInstanceClass() {
        return this.dbInstanceClass;
    }
    /**
     * @return The db instance description.
     * 
     */
    public String dbInstanceDescription() {
        return this.dbInstanceDescription;
    }
    /**
     * @return The db instance id.
     * 
     */
    public String dbInstanceId() {
        return this.dbInstanceId;
    }
    /**
     * @return The db instance release protection.
     * 
     */
    public Boolean dbInstanceReleaseProtection() {
        return this.dbInstanceReleaseProtection;
    }
    /**
     * @return The db instance storage.
     * 
     */
    public Integer dbInstanceStorage() {
        return this.dbInstanceStorage;
    }
    /**
     * @return The database engine of the instance.
     * 
     */
    public String engine() {
        return this.engine;
    }
    /**
     * @return The database version number. Valid values: `4.2`.
     * 
     */
    public String engineVersion() {
        return this.engineVersion;
    }
    /**
     * @return The time when the subscription instance expires. The time is in the `yyyy-MM-ddTHH:mmZ` format. The time is displayed in UTC.
     * 
     */
    public String expireTime() {
        return this.expireTime;
    }
    /**
     * @return The ID of the Serverless Instance.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Indicates the type of the instance. Valid values: `0`: physical machine. `1`: ECS. `2`: DOCKER. `18`: k8s new architecture instance.
     * 
     */
    public String kindCode() {
        return this.kindCode;
    }
    /**
     * @return The locked status of the instance.
     * 
     */
    public String lockMode() {
        return this.lockMode;
    }
    /**
     * @return The start time of the maintenance window. The time is in the `HH:mmZ` format. The time is displayed in UTC.
     * 
     */
    public String maintainEndTime() {
        return this.maintainEndTime;
    }
    /**
     * @return The end time of the maintenance window. The time is in the `HH:mmZ` format. The time is displayed in UTC.
     * 
     */
    public String maintainStartTime() {
        return this.maintainStartTime;
    }
    /**
     * @return Instance maximum connections.
     * 
     */
    public Integer maxConnections() {
        return this.maxConnections;
    }
    /**
     * @return The maximum IOPS of the instance.
     * 
     */
    public Integer maxIops() {
        return this.maxIops;
    }
    /**
     * @return The network type of the instance.
     * 
     */
    public String networkType() {
        return this.networkType;
    }
    /**
     * @return The Payment type of the instance.
     * 
     */
    public String paymentType() {
        return this.paymentType;
    }
    /**
     * @return The access protocol type of the instance. Valid values: `mongodb`, `dynamodb`.
     * 
     */
    public String protocolType() {
        return this.protocolType;
    }
    /**
     * @return The ID of the resource group.
     * 
     */
    public String resourceGroupId() {
        return this.resourceGroupId;
    }
    /**
     * @return The security ip list.
     * 
     */
    public List<GetServerlessInstancesInstanceSecurityIpGroup> securityIpGroups() {
        return this.securityIpGroups;
    }
    /**
     * @return The status of the instance.
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return The storage engine used by the instance.
     * 
     */
    public String storageEngine() {
        return this.storageEngine;
    }
    /**
     * @return The tag of the resource.
     * 
     */
    public Map<String,Object> tags() {
        return this.tags;
    }
    /**
     * @return Intranet secret free access mode.
     * 
     */
    public String vpcAuthMode() {
        return this.vpcAuthMode;
    }
    /**
     * @return The ID of the VPC network.
     * 
     */
    public String vpcId() {
        return this.vpcId;
    }
    /**
     * @return The id of the vswitch.
     * 
     */
    public String vswitchId() {
        return this.vswitchId;
    }
    /**
     * @return The ID of the zone.
     * 
     */
    public String zoneId() {
        return this.zoneId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetServerlessInstancesInstance defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Integer capacityUnit;
        private String dbInstanceClass;
        private String dbInstanceDescription;
        private String dbInstanceId;
        private Boolean dbInstanceReleaseProtection;
        private Integer dbInstanceStorage;
        private String engine;
        private String engineVersion;
        private String expireTime;
        private String id;
        private String kindCode;
        private String lockMode;
        private String maintainEndTime;
        private String maintainStartTime;
        private Integer maxConnections;
        private Integer maxIops;
        private String networkType;
        private String paymentType;
        private String protocolType;
        private String resourceGroupId;
        private List<GetServerlessInstancesInstanceSecurityIpGroup> securityIpGroups;
        private String status;
        private String storageEngine;
        private Map<String,Object> tags;
        private String vpcAuthMode;
        private String vpcId;
        private String vswitchId;
        private String zoneId;
        public Builder() {}
        public Builder(GetServerlessInstancesInstance defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.capacityUnit = defaults.capacityUnit;
    	      this.dbInstanceClass = defaults.dbInstanceClass;
    	      this.dbInstanceDescription = defaults.dbInstanceDescription;
    	      this.dbInstanceId = defaults.dbInstanceId;
    	      this.dbInstanceReleaseProtection = defaults.dbInstanceReleaseProtection;
    	      this.dbInstanceStorage = defaults.dbInstanceStorage;
    	      this.engine = defaults.engine;
    	      this.engineVersion = defaults.engineVersion;
    	      this.expireTime = defaults.expireTime;
    	      this.id = defaults.id;
    	      this.kindCode = defaults.kindCode;
    	      this.lockMode = defaults.lockMode;
    	      this.maintainEndTime = defaults.maintainEndTime;
    	      this.maintainStartTime = defaults.maintainStartTime;
    	      this.maxConnections = defaults.maxConnections;
    	      this.maxIops = defaults.maxIops;
    	      this.networkType = defaults.networkType;
    	      this.paymentType = defaults.paymentType;
    	      this.protocolType = defaults.protocolType;
    	      this.resourceGroupId = defaults.resourceGroupId;
    	      this.securityIpGroups = defaults.securityIpGroups;
    	      this.status = defaults.status;
    	      this.storageEngine = defaults.storageEngine;
    	      this.tags = defaults.tags;
    	      this.vpcAuthMode = defaults.vpcAuthMode;
    	      this.vpcId = defaults.vpcId;
    	      this.vswitchId = defaults.vswitchId;
    	      this.zoneId = defaults.zoneId;
        }

        @CustomType.Setter
        public Builder capacityUnit(Integer capacityUnit) {
            this.capacityUnit = Objects.requireNonNull(capacityUnit);
            return this;
        }
        @CustomType.Setter
        public Builder dbInstanceClass(String dbInstanceClass) {
            this.dbInstanceClass = Objects.requireNonNull(dbInstanceClass);
            return this;
        }
        @CustomType.Setter
        public Builder dbInstanceDescription(String dbInstanceDescription) {
            this.dbInstanceDescription = Objects.requireNonNull(dbInstanceDescription);
            return this;
        }
        @CustomType.Setter
        public Builder dbInstanceId(String dbInstanceId) {
            this.dbInstanceId = Objects.requireNonNull(dbInstanceId);
            return this;
        }
        @CustomType.Setter
        public Builder dbInstanceReleaseProtection(Boolean dbInstanceReleaseProtection) {
            this.dbInstanceReleaseProtection = Objects.requireNonNull(dbInstanceReleaseProtection);
            return this;
        }
        @CustomType.Setter
        public Builder dbInstanceStorage(Integer dbInstanceStorage) {
            this.dbInstanceStorage = Objects.requireNonNull(dbInstanceStorage);
            return this;
        }
        @CustomType.Setter
        public Builder engine(String engine) {
            this.engine = Objects.requireNonNull(engine);
            return this;
        }
        @CustomType.Setter
        public Builder engineVersion(String engineVersion) {
            this.engineVersion = Objects.requireNonNull(engineVersion);
            return this;
        }
        @CustomType.Setter
        public Builder expireTime(String expireTime) {
            this.expireTime = Objects.requireNonNull(expireTime);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder kindCode(String kindCode) {
            this.kindCode = Objects.requireNonNull(kindCode);
            return this;
        }
        @CustomType.Setter
        public Builder lockMode(String lockMode) {
            this.lockMode = Objects.requireNonNull(lockMode);
            return this;
        }
        @CustomType.Setter
        public Builder maintainEndTime(String maintainEndTime) {
            this.maintainEndTime = Objects.requireNonNull(maintainEndTime);
            return this;
        }
        @CustomType.Setter
        public Builder maintainStartTime(String maintainStartTime) {
            this.maintainStartTime = Objects.requireNonNull(maintainStartTime);
            return this;
        }
        @CustomType.Setter
        public Builder maxConnections(Integer maxConnections) {
            this.maxConnections = Objects.requireNonNull(maxConnections);
            return this;
        }
        @CustomType.Setter
        public Builder maxIops(Integer maxIops) {
            this.maxIops = Objects.requireNonNull(maxIops);
            return this;
        }
        @CustomType.Setter
        public Builder networkType(String networkType) {
            this.networkType = Objects.requireNonNull(networkType);
            return this;
        }
        @CustomType.Setter
        public Builder paymentType(String paymentType) {
            this.paymentType = Objects.requireNonNull(paymentType);
            return this;
        }
        @CustomType.Setter
        public Builder protocolType(String protocolType) {
            this.protocolType = Objects.requireNonNull(protocolType);
            return this;
        }
        @CustomType.Setter
        public Builder resourceGroupId(String resourceGroupId) {
            this.resourceGroupId = Objects.requireNonNull(resourceGroupId);
            return this;
        }
        @CustomType.Setter
        public Builder securityIpGroups(List<GetServerlessInstancesInstanceSecurityIpGroup> securityIpGroups) {
            this.securityIpGroups = Objects.requireNonNull(securityIpGroups);
            return this;
        }
        public Builder securityIpGroups(GetServerlessInstancesInstanceSecurityIpGroup... securityIpGroups) {
            return securityIpGroups(List.of(securityIpGroups));
        }
        @CustomType.Setter
        public Builder status(String status) {
            this.status = Objects.requireNonNull(status);
            return this;
        }
        @CustomType.Setter
        public Builder storageEngine(String storageEngine) {
            this.storageEngine = Objects.requireNonNull(storageEngine);
            return this;
        }
        @CustomType.Setter
        public Builder tags(Map<String,Object> tags) {
            this.tags = Objects.requireNonNull(tags);
            return this;
        }
        @CustomType.Setter
        public Builder vpcAuthMode(String vpcAuthMode) {
            this.vpcAuthMode = Objects.requireNonNull(vpcAuthMode);
            return this;
        }
        @CustomType.Setter
        public Builder vpcId(String vpcId) {
            this.vpcId = Objects.requireNonNull(vpcId);
            return this;
        }
        @CustomType.Setter
        public Builder vswitchId(String vswitchId) {
            this.vswitchId = Objects.requireNonNull(vswitchId);
            return this;
        }
        @CustomType.Setter
        public Builder zoneId(String zoneId) {
            this.zoneId = Objects.requireNonNull(zoneId);
            return this;
        }
        public GetServerlessInstancesInstance build() {
            final var o = new GetServerlessInstancesInstance();
            o.capacityUnit = capacityUnit;
            o.dbInstanceClass = dbInstanceClass;
            o.dbInstanceDescription = dbInstanceDescription;
            o.dbInstanceId = dbInstanceId;
            o.dbInstanceReleaseProtection = dbInstanceReleaseProtection;
            o.dbInstanceStorage = dbInstanceStorage;
            o.engine = engine;
            o.engineVersion = engineVersion;
            o.expireTime = expireTime;
            o.id = id;
            o.kindCode = kindCode;
            o.lockMode = lockMode;
            o.maintainEndTime = maintainEndTime;
            o.maintainStartTime = maintainStartTime;
            o.maxConnections = maxConnections;
            o.maxIops = maxIops;
            o.networkType = networkType;
            o.paymentType = paymentType;
            o.protocolType = protocolType;
            o.resourceGroupId = resourceGroupId;
            o.securityIpGroups = securityIpGroups;
            o.status = status;
            o.storageEngine = storageEngine;
            o.tags = tags;
            o.vpcAuthMode = vpcAuthMode;
            o.vpcId = vpcId;
            o.vswitchId = vswitchId;
            o.zoneId = zoneId;
            return o;
        }
    }
}
