// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.ecs.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class EcsSnapshotState extends com.pulumi.resources.ResourceArgs {

    public static final EcsSnapshotState Empty = new EcsSnapshotState();

    /**
     * The category of the snapshot. Valid values:
     * 
     */
    @Import(name="category")
    private @Nullable Output<String> category;

    /**
     * @return The category of the snapshot. Valid values:
     * 
     */
    public Optional<Output<String>> category() {
        return Optional.ofNullable(this.category);
    }

    /**
     * (Available since v1.239.0) The time when the snapshot was created.
     * 
     */
    @Import(name="createTime")
    private @Nullable Output<String> createTime;

    /**
     * @return (Available since v1.239.0) The time when the snapshot was created.
     * 
     */
    public Optional<Output<String>> createTime() {
        return Optional.ofNullable(this.createTime);
    }

    /**
     * The description of the snapshot.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The description of the snapshot.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The ID of the disk.
     * 
     */
    @Import(name="diskId")
    private @Nullable Output<String> diskId;

    /**
     * @return The ID of the disk.
     * 
     */
    public Optional<Output<String>> diskId() {
        return Optional.ofNullable(this.diskId);
    }

    /**
     * Specifies whether to force delete the snapshot that has been used to create disks. Valid values:
     * 
     */
    @Import(name="force")
    private @Nullable Output<Boolean> force;

    /**
     * @return Specifies whether to force delete the snapshot that has been used to create disks. Valid values:
     * 
     */
    public Optional<Output<Boolean>> force() {
        return Optional.ofNullable(this.force);
    }

    /**
     * Field `instant_access` has been deprecated from provider version 1.231.0.
     * 
     * @deprecated
     * Field `instant_access` has been deprecated from provider version 1.231.0.
     * 
     */
    @Deprecated /* Field `instant_access` has been deprecated from provider version 1.231.0. */
    @Import(name="instantAccess")
    private @Nullable Output<Boolean> instantAccess;

    /**
     * @return Field `instant_access` has been deprecated from provider version 1.231.0.
     * 
     * @deprecated
     * Field `instant_access` has been deprecated from provider version 1.231.0.
     * 
     */
    @Deprecated /* Field `instant_access` has been deprecated from provider version 1.231.0. */
    public Optional<Output<Boolean>> instantAccess() {
        return Optional.ofNullable(this.instantAccess);
    }

    /**
     * Field `instant_access_retention_days` has been deprecated from provider version 1.231.0.
     * 
     * @deprecated
     * Field `instant_access_retention_days` has been deprecated from provider version 1.231.0.
     * 
     */
    @Deprecated /* Field `instant_access_retention_days` has been deprecated from provider version 1.231.0. */
    @Import(name="instantAccessRetentionDays")
    private @Nullable Output<Integer> instantAccessRetentionDays;

    /**
     * @return Field `instant_access_retention_days` has been deprecated from provider version 1.231.0.
     * 
     * @deprecated
     * Field `instant_access_retention_days` has been deprecated from provider version 1.231.0.
     * 
     */
    @Deprecated /* Field `instant_access_retention_days` has been deprecated from provider version 1.231.0. */
    public Optional<Output<Integer>> instantAccessRetentionDays() {
        return Optional.ofNullable(this.instantAccessRetentionDays);
    }

    /**
     * Field `name` has been deprecated from provider version 1.120.0. New field `snapshot_name` instead.
     * 
     * @deprecated
     * Field `name` has been deprecated from provider version 1.120.0. New field `snapshot_name` instead.
     * 
     */
    @Deprecated /* Field `name` has been deprecated from provider version 1.120.0. New field `snapshot_name` instead. */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Field `name` has been deprecated from provider version 1.120.0. New field `snapshot_name` instead.
     * 
     * @deprecated
     * Field `name` has been deprecated from provider version 1.120.0. New field `snapshot_name` instead.
     * 
     */
    @Deprecated /* Field `name` has been deprecated from provider version 1.120.0. New field `snapshot_name` instead. */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * (Available since v1.239.0) The region ID of the snapshot.
     * 
     */
    @Import(name="regionId")
    private @Nullable Output<String> regionId;

    /**
     * @return (Available since v1.239.0) The region ID of the snapshot.
     * 
     */
    public Optional<Output<String>> regionId() {
        return Optional.ofNullable(this.regionId);
    }

    /**
     * The ID of the resource group. **NOTE:** From version 1.239.0, `resource_group_id` can be modified.
     * 
     */
    @Import(name="resourceGroupId")
    private @Nullable Output<String> resourceGroupId;

    /**
     * @return The ID of the resource group. **NOTE:** From version 1.239.0, `resource_group_id` can be modified.
     * 
     */
    public Optional<Output<String>> resourceGroupId() {
        return Optional.ofNullable(this.resourceGroupId);
    }

    /**
     * The retention period of the snapshot. Valid values: `1` to `65536`. **NOTE:** From version 1.231.0, `retention_days` can be modified.
     * 
     */
    @Import(name="retentionDays")
    private @Nullable Output<Integer> retentionDays;

    /**
     * @return The retention period of the snapshot. Valid values: `1` to `65536`. **NOTE:** From version 1.231.0, `retention_days` can be modified.
     * 
     */
    public Optional<Output<Integer>> retentionDays() {
        return Optional.ofNullable(this.retentionDays);
    }

    /**
     * The name of the snapshot.
     * 
     */
    @Import(name="snapshotName")
    private @Nullable Output<String> snapshotName;

    /**
     * @return The name of the snapshot.
     * 
     */
    public Optional<Output<String>> snapshotName() {
        return Optional.ofNullable(this.snapshotName);
    }

    /**
     * The status of the Snapshot.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return The status of the Snapshot.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * A mapping of tags to assign to the resource.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return A mapping of tags to assign to the resource.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private EcsSnapshotState() {}

    private EcsSnapshotState(EcsSnapshotState $) {
        this.category = $.category;
        this.createTime = $.createTime;
        this.description = $.description;
        this.diskId = $.diskId;
        this.force = $.force;
        this.instantAccess = $.instantAccess;
        this.instantAccessRetentionDays = $.instantAccessRetentionDays;
        this.name = $.name;
        this.regionId = $.regionId;
        this.resourceGroupId = $.resourceGroupId;
        this.retentionDays = $.retentionDays;
        this.snapshotName = $.snapshotName;
        this.status = $.status;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(EcsSnapshotState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private EcsSnapshotState $;

        public Builder() {
            $ = new EcsSnapshotState();
        }

        public Builder(EcsSnapshotState defaults) {
            $ = new EcsSnapshotState(Objects.requireNonNull(defaults));
        }

        /**
         * @param category The category of the snapshot. Valid values:
         * 
         * @return builder
         * 
         */
        public Builder category(@Nullable Output<String> category) {
            $.category = category;
            return this;
        }

        /**
         * @param category The category of the snapshot. Valid values:
         * 
         * @return builder
         * 
         */
        public Builder category(String category) {
            return category(Output.of(category));
        }

        /**
         * @param createTime (Available since v1.239.0) The time when the snapshot was created.
         * 
         * @return builder
         * 
         */
        public Builder createTime(@Nullable Output<String> createTime) {
            $.createTime = createTime;
            return this;
        }

        /**
         * @param createTime (Available since v1.239.0) The time when the snapshot was created.
         * 
         * @return builder
         * 
         */
        public Builder createTime(String createTime) {
            return createTime(Output.of(createTime));
        }

        /**
         * @param description The description of the snapshot.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The description of the snapshot.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param diskId The ID of the disk.
         * 
         * @return builder
         * 
         */
        public Builder diskId(@Nullable Output<String> diskId) {
            $.diskId = diskId;
            return this;
        }

        /**
         * @param diskId The ID of the disk.
         * 
         * @return builder
         * 
         */
        public Builder diskId(String diskId) {
            return diskId(Output.of(diskId));
        }

        /**
         * @param force Specifies whether to force delete the snapshot that has been used to create disks. Valid values:
         * 
         * @return builder
         * 
         */
        public Builder force(@Nullable Output<Boolean> force) {
            $.force = force;
            return this;
        }

        /**
         * @param force Specifies whether to force delete the snapshot that has been used to create disks. Valid values:
         * 
         * @return builder
         * 
         */
        public Builder force(Boolean force) {
            return force(Output.of(force));
        }

        /**
         * @param instantAccess Field `instant_access` has been deprecated from provider version 1.231.0.
         * 
         * @return builder
         * 
         * @deprecated
         * Field `instant_access` has been deprecated from provider version 1.231.0.
         * 
         */
        @Deprecated /* Field `instant_access` has been deprecated from provider version 1.231.0. */
        public Builder instantAccess(@Nullable Output<Boolean> instantAccess) {
            $.instantAccess = instantAccess;
            return this;
        }

        /**
         * @param instantAccess Field `instant_access` has been deprecated from provider version 1.231.0.
         * 
         * @return builder
         * 
         * @deprecated
         * Field `instant_access` has been deprecated from provider version 1.231.0.
         * 
         */
        @Deprecated /* Field `instant_access` has been deprecated from provider version 1.231.0. */
        public Builder instantAccess(Boolean instantAccess) {
            return instantAccess(Output.of(instantAccess));
        }

        /**
         * @param instantAccessRetentionDays Field `instant_access_retention_days` has been deprecated from provider version 1.231.0.
         * 
         * @return builder
         * 
         * @deprecated
         * Field `instant_access_retention_days` has been deprecated from provider version 1.231.0.
         * 
         */
        @Deprecated /* Field `instant_access_retention_days` has been deprecated from provider version 1.231.0. */
        public Builder instantAccessRetentionDays(@Nullable Output<Integer> instantAccessRetentionDays) {
            $.instantAccessRetentionDays = instantAccessRetentionDays;
            return this;
        }

        /**
         * @param instantAccessRetentionDays Field `instant_access_retention_days` has been deprecated from provider version 1.231.0.
         * 
         * @return builder
         * 
         * @deprecated
         * Field `instant_access_retention_days` has been deprecated from provider version 1.231.0.
         * 
         */
        @Deprecated /* Field `instant_access_retention_days` has been deprecated from provider version 1.231.0. */
        public Builder instantAccessRetentionDays(Integer instantAccessRetentionDays) {
            return instantAccessRetentionDays(Output.of(instantAccessRetentionDays));
        }

        /**
         * @param name Field `name` has been deprecated from provider version 1.120.0. New field `snapshot_name` instead.
         * 
         * @return builder
         * 
         * @deprecated
         * Field `name` has been deprecated from provider version 1.120.0. New field `snapshot_name` instead.
         * 
         */
        @Deprecated /* Field `name` has been deprecated from provider version 1.120.0. New field `snapshot_name` instead. */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Field `name` has been deprecated from provider version 1.120.0. New field `snapshot_name` instead.
         * 
         * @return builder
         * 
         * @deprecated
         * Field `name` has been deprecated from provider version 1.120.0. New field `snapshot_name` instead.
         * 
         */
        @Deprecated /* Field `name` has been deprecated from provider version 1.120.0. New field `snapshot_name` instead. */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param regionId (Available since v1.239.0) The region ID of the snapshot.
         * 
         * @return builder
         * 
         */
        public Builder regionId(@Nullable Output<String> regionId) {
            $.regionId = regionId;
            return this;
        }

        /**
         * @param regionId (Available since v1.239.0) The region ID of the snapshot.
         * 
         * @return builder
         * 
         */
        public Builder regionId(String regionId) {
            return regionId(Output.of(regionId));
        }

        /**
         * @param resourceGroupId The ID of the resource group. **NOTE:** From version 1.239.0, `resource_group_id` can be modified.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupId(@Nullable Output<String> resourceGroupId) {
            $.resourceGroupId = resourceGroupId;
            return this;
        }

        /**
         * @param resourceGroupId The ID of the resource group. **NOTE:** From version 1.239.0, `resource_group_id` can be modified.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupId(String resourceGroupId) {
            return resourceGroupId(Output.of(resourceGroupId));
        }

        /**
         * @param retentionDays The retention period of the snapshot. Valid values: `1` to `65536`. **NOTE:** From version 1.231.0, `retention_days` can be modified.
         * 
         * @return builder
         * 
         */
        public Builder retentionDays(@Nullable Output<Integer> retentionDays) {
            $.retentionDays = retentionDays;
            return this;
        }

        /**
         * @param retentionDays The retention period of the snapshot. Valid values: `1` to `65536`. **NOTE:** From version 1.231.0, `retention_days` can be modified.
         * 
         * @return builder
         * 
         */
        public Builder retentionDays(Integer retentionDays) {
            return retentionDays(Output.of(retentionDays));
        }

        /**
         * @param snapshotName The name of the snapshot.
         * 
         * @return builder
         * 
         */
        public Builder snapshotName(@Nullable Output<String> snapshotName) {
            $.snapshotName = snapshotName;
            return this;
        }

        /**
         * @param snapshotName The name of the snapshot.
         * 
         * @return builder
         * 
         */
        public Builder snapshotName(String snapshotName) {
            return snapshotName(Output.of(snapshotName));
        }

        /**
         * @param status The status of the Snapshot.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status The status of the Snapshot.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param tags A mapping of tags to assign to the resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags A mapping of tags to assign to the resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public EcsSnapshotState build() {
            return $;
        }
    }

}
