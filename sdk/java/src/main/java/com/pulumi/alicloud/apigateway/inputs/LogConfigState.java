// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.apigateway.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class LogConfigState extends com.pulumi.resources.ResourceArgs {

    public static final LogConfigState Empty = new LogConfigState();

    /**
     * The type the of log. Valid values: `PROVIDER`.
     * 
     */
    @Import(name="logType")
    private @Nullable Output<String> logType;

    /**
     * @return The type the of log. Valid values: `PROVIDER`.
     * 
     */
    public Optional<Output<String>> logType() {
        return Optional.ofNullable(this.logType);
    }

    /**
     * The name of the Log Store.
     * 
     */
    @Import(name="slsLogStore")
    private @Nullable Output<String> slsLogStore;

    /**
     * @return The name of the Log Store.
     * 
     */
    public Optional<Output<String>> slsLogStore() {
        return Optional.ofNullable(this.slsLogStore);
    }

    /**
     * The name of the Project.
     * 
     */
    @Import(name="slsProject")
    private @Nullable Output<String> slsProject;

    /**
     * @return The name of the Project.
     * 
     */
    public Optional<Output<String>> slsProject() {
        return Optional.ofNullable(this.slsProject);
    }

    private LogConfigState() {}

    private LogConfigState(LogConfigState $) {
        this.logType = $.logType;
        this.slsLogStore = $.slsLogStore;
        this.slsProject = $.slsProject;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LogConfigState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LogConfigState $;

        public Builder() {
            $ = new LogConfigState();
        }

        public Builder(LogConfigState defaults) {
            $ = new LogConfigState(Objects.requireNonNull(defaults));
        }

        /**
         * @param logType The type the of log. Valid values: `PROVIDER`.
         * 
         * @return builder
         * 
         */
        public Builder logType(@Nullable Output<String> logType) {
            $.logType = logType;
            return this;
        }

        /**
         * @param logType The type the of log. Valid values: `PROVIDER`.
         * 
         * @return builder
         * 
         */
        public Builder logType(String logType) {
            return logType(Output.of(logType));
        }

        /**
         * @param slsLogStore The name of the Log Store.
         * 
         * @return builder
         * 
         */
        public Builder slsLogStore(@Nullable Output<String> slsLogStore) {
            $.slsLogStore = slsLogStore;
            return this;
        }

        /**
         * @param slsLogStore The name of the Log Store.
         * 
         * @return builder
         * 
         */
        public Builder slsLogStore(String slsLogStore) {
            return slsLogStore(Output.of(slsLogStore));
        }

        /**
         * @param slsProject The name of the Project.
         * 
         * @return builder
         * 
         */
        public Builder slsProject(@Nullable Output<String> slsProject) {
            $.slsProject = slsProject;
            return this;
        }

        /**
         * @param slsProject The name of the Project.
         * 
         * @return builder
         * 
         */
        public Builder slsProject(String slsProject) {
            return slsProject(Output.of(slsProject));
        }

        public LogConfigState build() {
            return $;
        }
    }

}
