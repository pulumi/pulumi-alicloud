// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.esa.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class WafRuleConfigActionsBypassArgs extends com.pulumi.resources.ResourceArgs {

    public static final WafRuleConfigActionsBypassArgs Empty = new WafRuleConfigActionsBypassArgs();

    /**
     * The IDs of custom rules to skip.
     * 
     */
    @Import(name="customRules")
    private @Nullable Output<List<Integer>> customRules;

    /**
     * @return The IDs of custom rules to skip.
     * 
     */
    public Optional<Output<List<Integer>>> customRules() {
        return Optional.ofNullable(this.customRules);
    }

    /**
     * The IDs of specific managed rules to skip.
     * 
     */
    @Import(name="regularRules")
    private @Nullable Output<List<Integer>> regularRules;

    /**
     * @return The IDs of specific managed rules to skip.
     * 
     */
    public Optional<Output<List<Integer>>> regularRules() {
        return Optional.ofNullable(this.regularRules);
    }

    /**
     * The types of managed rules to skip.
     * 
     */
    @Import(name="regularTypes")
    private @Nullable Output<List<String>> regularTypes;

    /**
     * @return The types of managed rules to skip.
     * 
     */
    public Optional<Output<List<String>>> regularTypes() {
        return Optional.ofNullable(this.regularTypes);
    }

    /**
     * The scope that is skipped when requests match conditions defined in the whitelist rule.
     * 
     */
    @Import(name="skip")
    private @Nullable Output<String> skip;

    /**
     * @return The scope that is skipped when requests match conditions defined in the whitelist rule.
     * 
     */
    public Optional<Output<String>> skip() {
        return Optional.ofNullable(this.skip);
    }

    /**
     * The rule categories that are skipped when requests match conditions defined in the whitelist rule.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<String>> tags;

    /**
     * @return The rule categories that are skipped when requests match conditions defined in the whitelist rule.
     * 
     */
    public Optional<Output<List<String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private WafRuleConfigActionsBypassArgs() {}

    private WafRuleConfigActionsBypassArgs(WafRuleConfigActionsBypassArgs $) {
        this.customRules = $.customRules;
        this.regularRules = $.regularRules;
        this.regularTypes = $.regularTypes;
        this.skip = $.skip;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(WafRuleConfigActionsBypassArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private WafRuleConfigActionsBypassArgs $;

        public Builder() {
            $ = new WafRuleConfigActionsBypassArgs();
        }

        public Builder(WafRuleConfigActionsBypassArgs defaults) {
            $ = new WafRuleConfigActionsBypassArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param customRules The IDs of custom rules to skip.
         * 
         * @return builder
         * 
         */
        public Builder customRules(@Nullable Output<List<Integer>> customRules) {
            $.customRules = customRules;
            return this;
        }

        /**
         * @param customRules The IDs of custom rules to skip.
         * 
         * @return builder
         * 
         */
        public Builder customRules(List<Integer> customRules) {
            return customRules(Output.of(customRules));
        }

        /**
         * @param customRules The IDs of custom rules to skip.
         * 
         * @return builder
         * 
         */
        public Builder customRules(Integer... customRules) {
            return customRules(List.of(customRules));
        }

        /**
         * @param regularRules The IDs of specific managed rules to skip.
         * 
         * @return builder
         * 
         */
        public Builder regularRules(@Nullable Output<List<Integer>> regularRules) {
            $.regularRules = regularRules;
            return this;
        }

        /**
         * @param regularRules The IDs of specific managed rules to skip.
         * 
         * @return builder
         * 
         */
        public Builder regularRules(List<Integer> regularRules) {
            return regularRules(Output.of(regularRules));
        }

        /**
         * @param regularRules The IDs of specific managed rules to skip.
         * 
         * @return builder
         * 
         */
        public Builder regularRules(Integer... regularRules) {
            return regularRules(List.of(regularRules));
        }

        /**
         * @param regularTypes The types of managed rules to skip.
         * 
         * @return builder
         * 
         */
        public Builder regularTypes(@Nullable Output<List<String>> regularTypes) {
            $.regularTypes = regularTypes;
            return this;
        }

        /**
         * @param regularTypes The types of managed rules to skip.
         * 
         * @return builder
         * 
         */
        public Builder regularTypes(List<String> regularTypes) {
            return regularTypes(Output.of(regularTypes));
        }

        /**
         * @param regularTypes The types of managed rules to skip.
         * 
         * @return builder
         * 
         */
        public Builder regularTypes(String... regularTypes) {
            return regularTypes(List.of(regularTypes));
        }

        /**
         * @param skip The scope that is skipped when requests match conditions defined in the whitelist rule.
         * 
         * @return builder
         * 
         */
        public Builder skip(@Nullable Output<String> skip) {
            $.skip = skip;
            return this;
        }

        /**
         * @param skip The scope that is skipped when requests match conditions defined in the whitelist rule.
         * 
         * @return builder
         * 
         */
        public Builder skip(String skip) {
            return skip(Output.of(skip));
        }

        /**
         * @param tags The rule categories that are skipped when requests match conditions defined in the whitelist rule.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<List<String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags The rule categories that are skipped when requests match conditions defined in the whitelist rule.
         * 
         * @return builder
         * 
         */
        public Builder tags(List<String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags The rule categories that are skipped when requests match conditions defined in the whitelist rule.
         * 
         * @return builder
         * 
         */
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }

        public WafRuleConfigActionsBypassArgs build() {
            return $;
        }
    }

}
