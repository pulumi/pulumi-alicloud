// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.oss;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class BucketStyleArgs extends com.pulumi.resources.ResourceArgs {

    public static final BucketStyleArgs Empty = new BucketStyleArgs();

    /**
     * Storage space to which the picture style belongs
     * 
     */
    @Import(name="bucket", required=true)
    private Output<String> bucket;

    /**
     * @return Storage space to which the picture style belongs
     * 
     */
    public Output<String> bucket() {
        return this.bucket;
    }

    /**
     * Style category, valid values: image, document, video.
     * 
     */
    @Import(name="category")
    private @Nullable Output<String> category;

    /**
     * @return Style category, valid values: image, document, video.
     * 
     */
    public Optional<Output<String>> category() {
        return Optional.ofNullable(this.category);
    }

    /**
     * The Image style content can contain single or multiple image processing parameters.
     * 
     */
    @Import(name="content", required=true)
    private Output<String> content;

    /**
     * @return The Image style content can contain single or multiple image processing parameters.
     * 
     */
    public Output<String> content() {
        return this.content;
    }

    /**
     * Image Style Name
     * 
     */
    @Import(name="styleName", required=true)
    private Output<String> styleName;

    /**
     * @return Image Style Name
     * 
     */
    public Output<String> styleName() {
        return this.styleName;
    }

    private BucketStyleArgs() {}

    private BucketStyleArgs(BucketStyleArgs $) {
        this.bucket = $.bucket;
        this.category = $.category;
        this.content = $.content;
        this.styleName = $.styleName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BucketStyleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BucketStyleArgs $;

        public Builder() {
            $ = new BucketStyleArgs();
        }

        public Builder(BucketStyleArgs defaults) {
            $ = new BucketStyleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param bucket Storage space to which the picture style belongs
         * 
         * @return builder
         * 
         */
        public Builder bucket(Output<String> bucket) {
            $.bucket = bucket;
            return this;
        }

        /**
         * @param bucket Storage space to which the picture style belongs
         * 
         * @return builder
         * 
         */
        public Builder bucket(String bucket) {
            return bucket(Output.of(bucket));
        }

        /**
         * @param category Style category, valid values: image, document, video.
         * 
         * @return builder
         * 
         */
        public Builder category(@Nullable Output<String> category) {
            $.category = category;
            return this;
        }

        /**
         * @param category Style category, valid values: image, document, video.
         * 
         * @return builder
         * 
         */
        public Builder category(String category) {
            return category(Output.of(category));
        }

        /**
         * @param content The Image style content can contain single or multiple image processing parameters.
         * 
         * @return builder
         * 
         */
        public Builder content(Output<String> content) {
            $.content = content;
            return this;
        }

        /**
         * @param content The Image style content can contain single or multiple image processing parameters.
         * 
         * @return builder
         * 
         */
        public Builder content(String content) {
            return content(Output.of(content));
        }

        /**
         * @param styleName Image Style Name
         * 
         * @return builder
         * 
         */
        public Builder styleName(Output<String> styleName) {
            $.styleName = styleName;
            return this;
        }

        /**
         * @param styleName Image Style Name
         * 
         * @return builder
         * 
         */
        public Builder styleName(String styleName) {
            return styleName(Output.of(styleName));
        }

        public BucketStyleArgs build() {
            if ($.bucket == null) {
                throw new MissingRequiredPropertyException("BucketStyleArgs", "bucket");
            }
            if ($.content == null) {
                throw new MissingRequiredPropertyException("BucketStyleArgs", "content");
            }
            if ($.styleName == null) {
                throw new MissingRequiredPropertyException("BucketStyleArgs", "styleName");
            }
            return $;
        }
    }

}
