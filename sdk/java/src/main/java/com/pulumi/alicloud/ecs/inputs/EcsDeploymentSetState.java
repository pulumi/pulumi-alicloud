// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.ecs.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class EcsDeploymentSetState extends com.pulumi.resources.ResourceArgs {

    public static final EcsDeploymentSetState Empty = new EcsDeploymentSetState();

    /**
     * The name of the deployment set. The name must be `2` to `128` characters in length and can contain letters, digits, colons (:), underscores (_), and hyphens (-). It must start with a letter and cannot start with `http://` or `https://`.
     * 
     */
    @Import(name="deploymentSetName")
    private @Nullable Output<String> deploymentSetName;

    /**
     * @return The name of the deployment set. The name must be `2` to `128` characters in length and can contain letters, digits, colons (:), underscores (_), and hyphens (-). It must start with a letter and cannot start with `http://` or `https://`.
     * 
     */
    public Optional<Output<String>> deploymentSetName() {
        return Optional.ofNullable(this.deploymentSetName);
    }

    /**
     * The description of the deployment set. The description must be `2` to `256` characters in length and cannot start with `http://` or `https://`.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The description of the deployment set. The description must be `2` to `256` characters in length and cannot start with `http://` or `https://`.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Field `domain` has been deprecated from provider version 1.243.0.
     * 
     * @deprecated
     * Field `domain` has been deprecated from provider version 1.243.0.
     * 
     */
    @Deprecated /* Field `domain` has been deprecated from provider version 1.243.0. */
    @Import(name="domain")
    private @Nullable Output<String> domain;

    /**
     * @return Field `domain` has been deprecated from provider version 1.243.0.
     * 
     * @deprecated
     * Field `domain` has been deprecated from provider version 1.243.0.
     * 
     */
    @Deprecated /* Field `domain` has been deprecated from provider version 1.243.0. */
    public Optional<Output<String>> domain() {
        return Optional.ofNullable(this.domain);
    }

    /**
     * Field `granularity` has been deprecated from provider version 1.243.0.
     * 
     * @deprecated
     * Field `granularity` has been deprecated from provider version 1.243.0.
     * 
     */
    @Deprecated /* Field `granularity` has been deprecated from provider version 1.243.0. */
    @Import(name="granularity")
    private @Nullable Output<String> granularity;

    /**
     * @return Field `granularity` has been deprecated from provider version 1.243.0.
     * 
     * @deprecated
     * Field `granularity` has been deprecated from provider version 1.243.0.
     * 
     */
    @Deprecated /* Field `granularity` has been deprecated from provider version 1.243.0. */
    public Optional<Output<String>> granularity() {
        return Optional.ofNullable(this.granularity);
    }

    /**
     * The emergency solution to use in the situation where instances in the deployment set cannot be evenly distributed to different zones due to resource insufficiency after the instances failover. Valid values:
     * - `CancelMembershipAndStart` - Removes the instances from the deployment set and starts the instances immediately after they are failed over.
     * - `KeepStopped`- Leaves the instances in the Stopped state and starts them after resources are replenished.
     * 
     */
    @Import(name="onUnableToRedeployFailedInstance")
    private @Nullable Output<String> onUnableToRedeployFailedInstance;

    /**
     * @return The emergency solution to use in the situation where instances in the deployment set cannot be evenly distributed to different zones due to resource insufficiency after the instances failover. Valid values:
     * - `CancelMembershipAndStart` - Removes the instances from the deployment set and starts the instances immediately after they are failed over.
     * - `KeepStopped`- Leaves the instances in the Stopped state and starts them after resources are replenished.
     * 
     */
    public Optional<Output<String>> onUnableToRedeployFailedInstance() {
        return Optional.ofNullable(this.onUnableToRedeployFailedInstance);
    }

    /**
     * The deployment strategy. Default value: `Availability`. Valid values: `Availability`, `AvailabilityGroup`, `LowLatency`.
     * 
     */
    @Import(name="strategy")
    private @Nullable Output<String> strategy;

    /**
     * @return The deployment strategy. Default value: `Availability`. Valid values: `Availability`, `AvailabilityGroup`, `LowLatency`.
     * 
     */
    public Optional<Output<String>> strategy() {
        return Optional.ofNullable(this.strategy);
    }

    private EcsDeploymentSetState() {}

    private EcsDeploymentSetState(EcsDeploymentSetState $) {
        this.deploymentSetName = $.deploymentSetName;
        this.description = $.description;
        this.domain = $.domain;
        this.granularity = $.granularity;
        this.onUnableToRedeployFailedInstance = $.onUnableToRedeployFailedInstance;
        this.strategy = $.strategy;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(EcsDeploymentSetState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private EcsDeploymentSetState $;

        public Builder() {
            $ = new EcsDeploymentSetState();
        }

        public Builder(EcsDeploymentSetState defaults) {
            $ = new EcsDeploymentSetState(Objects.requireNonNull(defaults));
        }

        /**
         * @param deploymentSetName The name of the deployment set. The name must be `2` to `128` characters in length and can contain letters, digits, colons (:), underscores (_), and hyphens (-). It must start with a letter and cannot start with `http://` or `https://`.
         * 
         * @return builder
         * 
         */
        public Builder deploymentSetName(@Nullable Output<String> deploymentSetName) {
            $.deploymentSetName = deploymentSetName;
            return this;
        }

        /**
         * @param deploymentSetName The name of the deployment set. The name must be `2` to `128` characters in length and can contain letters, digits, colons (:), underscores (_), and hyphens (-). It must start with a letter and cannot start with `http://` or `https://`.
         * 
         * @return builder
         * 
         */
        public Builder deploymentSetName(String deploymentSetName) {
            return deploymentSetName(Output.of(deploymentSetName));
        }

        /**
         * @param description The description of the deployment set. The description must be `2` to `256` characters in length and cannot start with `http://` or `https://`.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The description of the deployment set. The description must be `2` to `256` characters in length and cannot start with `http://` or `https://`.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param domain Field `domain` has been deprecated from provider version 1.243.0.
         * 
         * @return builder
         * 
         * @deprecated
         * Field `domain` has been deprecated from provider version 1.243.0.
         * 
         */
        @Deprecated /* Field `domain` has been deprecated from provider version 1.243.0. */
        public Builder domain(@Nullable Output<String> domain) {
            $.domain = domain;
            return this;
        }

        /**
         * @param domain Field `domain` has been deprecated from provider version 1.243.0.
         * 
         * @return builder
         * 
         * @deprecated
         * Field `domain` has been deprecated from provider version 1.243.0.
         * 
         */
        @Deprecated /* Field `domain` has been deprecated from provider version 1.243.0. */
        public Builder domain(String domain) {
            return domain(Output.of(domain));
        }

        /**
         * @param granularity Field `granularity` has been deprecated from provider version 1.243.0.
         * 
         * @return builder
         * 
         * @deprecated
         * Field `granularity` has been deprecated from provider version 1.243.0.
         * 
         */
        @Deprecated /* Field `granularity` has been deprecated from provider version 1.243.0. */
        public Builder granularity(@Nullable Output<String> granularity) {
            $.granularity = granularity;
            return this;
        }

        /**
         * @param granularity Field `granularity` has been deprecated from provider version 1.243.0.
         * 
         * @return builder
         * 
         * @deprecated
         * Field `granularity` has been deprecated from provider version 1.243.0.
         * 
         */
        @Deprecated /* Field `granularity` has been deprecated from provider version 1.243.0. */
        public Builder granularity(String granularity) {
            return granularity(Output.of(granularity));
        }

        /**
         * @param onUnableToRedeployFailedInstance The emergency solution to use in the situation where instances in the deployment set cannot be evenly distributed to different zones due to resource insufficiency after the instances failover. Valid values:
         * - `CancelMembershipAndStart` - Removes the instances from the deployment set and starts the instances immediately after they are failed over.
         * - `KeepStopped`- Leaves the instances in the Stopped state and starts them after resources are replenished.
         * 
         * @return builder
         * 
         */
        public Builder onUnableToRedeployFailedInstance(@Nullable Output<String> onUnableToRedeployFailedInstance) {
            $.onUnableToRedeployFailedInstance = onUnableToRedeployFailedInstance;
            return this;
        }

        /**
         * @param onUnableToRedeployFailedInstance The emergency solution to use in the situation where instances in the deployment set cannot be evenly distributed to different zones due to resource insufficiency after the instances failover. Valid values:
         * - `CancelMembershipAndStart` - Removes the instances from the deployment set and starts the instances immediately after they are failed over.
         * - `KeepStopped`- Leaves the instances in the Stopped state and starts them after resources are replenished.
         * 
         * @return builder
         * 
         */
        public Builder onUnableToRedeployFailedInstance(String onUnableToRedeployFailedInstance) {
            return onUnableToRedeployFailedInstance(Output.of(onUnableToRedeployFailedInstance));
        }

        /**
         * @param strategy The deployment strategy. Default value: `Availability`. Valid values: `Availability`, `AvailabilityGroup`, `LowLatency`.
         * 
         * @return builder
         * 
         */
        public Builder strategy(@Nullable Output<String> strategy) {
            $.strategy = strategy;
            return this;
        }

        /**
         * @param strategy The deployment strategy. Default value: `Availability`. Valid values: `Availability`, `AvailabilityGroup`, `LowLatency`.
         * 
         * @return builder
         * 
         */
        public Builder strategy(String strategy) {
            return strategy(Output.of(strategy));
        }

        public EcsDeploymentSetState build() {
            return $;
        }
    }

}
