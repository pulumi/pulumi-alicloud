// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.vod.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DomainSourceArgs extends com.pulumi.resources.ResourceArgs {

    public static final DomainSourceArgs Empty = new DomainSourceArgs();

    @Import(name="sourceContent", required=true)
    private Output<String> sourceContent;

    public Output<String> sourceContent() {
        return this.sourceContent;
    }

    @Import(name="sourcePort", required=true)
    private Output<String> sourcePort;

    public Output<String> sourcePort() {
        return this.sourcePort;
    }

    @Import(name="sourcePriority")
    private @Nullable Output<String> sourcePriority;

    public Optional<Output<String>> sourcePriority() {
        return Optional.ofNullable(this.sourcePriority);
    }

    @Import(name="sourceType", required=true)
    private Output<String> sourceType;

    public Output<String> sourceType() {
        return this.sourceType;
    }

    private DomainSourceArgs() {}

    private DomainSourceArgs(DomainSourceArgs $) {
        this.sourceContent = $.sourceContent;
        this.sourcePort = $.sourcePort;
        this.sourcePriority = $.sourcePriority;
        this.sourceType = $.sourceType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DomainSourceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DomainSourceArgs $;

        public Builder() {
            $ = new DomainSourceArgs();
        }

        public Builder(DomainSourceArgs defaults) {
            $ = new DomainSourceArgs(Objects.requireNonNull(defaults));
        }

        public Builder sourceContent(Output<String> sourceContent) {
            $.sourceContent = sourceContent;
            return this;
        }

        public Builder sourceContent(String sourceContent) {
            return sourceContent(Output.of(sourceContent));
        }

        public Builder sourcePort(Output<String> sourcePort) {
            $.sourcePort = sourcePort;
            return this;
        }

        public Builder sourcePort(String sourcePort) {
            return sourcePort(Output.of(sourcePort));
        }

        public Builder sourcePriority(@Nullable Output<String> sourcePriority) {
            $.sourcePriority = sourcePriority;
            return this;
        }

        public Builder sourcePriority(String sourcePriority) {
            return sourcePriority(Output.of(sourcePriority));
        }

        public Builder sourceType(Output<String> sourceType) {
            $.sourceType = sourceType;
            return this;
        }

        public Builder sourceType(String sourceType) {
            return sourceType(Output.of(sourceType));
        }

        public DomainSourceArgs build() {
            if ($.sourceContent == null) {
                throw new MissingRequiredPropertyException("DomainSourceArgs", "sourceContent");
            }
            if ($.sourcePort == null) {
                throw new MissingRequiredPropertyException("DomainSourceArgs", "sourcePort");
            }
            if ($.sourceType == null) {
                throw new MissingRequiredPropertyException("DomainSourceArgs", "sourceType");
            }
            return $;
        }
    }

}
