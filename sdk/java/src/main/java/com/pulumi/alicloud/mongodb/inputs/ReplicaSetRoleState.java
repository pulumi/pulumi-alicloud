// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.mongodb.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ReplicaSetRoleState extends com.pulumi.resources.ResourceArgs {

    public static final ReplicaSetRoleState Empty = new ReplicaSetRoleState();

    /**
     * The connection address of the role.
     * 
     */
    @Import(name="connectionDomain")
    private @Nullable Output<String> connectionDomain;

    /**
     * @return The connection address of the role.
     * 
     */
    public Optional<Output<String>> connectionDomain() {
        return Optional.ofNullable(this.connectionDomain);
    }

    /**
     * The port of the connection string, will be computed if not specified.`
     * 
     */
    @Import(name="connectionPort")
    private @Nullable Output<Integer> connectionPort;

    /**
     * @return The port of the connection string, will be computed if not specified.`
     * 
     */
    public Optional<Output<Integer>> connectionPort() {
        return Optional.ofNullable(this.connectionPort);
    }

    /**
     * The prefix of the connection string, will be computed if not specified.
     * 
     */
    @Import(name="connectionPrefix")
    private @Nullable Output<String> connectionPrefix;

    /**
     * @return The prefix of the connection string, will be computed if not specified.
     * 
     */
    public Optional<Output<String>> connectionPrefix() {
        return Optional.ofNullable(this.connectionPrefix);
    }

    /**
     * The instance ID.
     * 
     */
    @Import(name="dbInstanceId")
    private @Nullable Output<String> dbInstanceId;

    /**
     * @return The instance ID.
     * 
     */
    public Optional<Output<String>> dbInstanceId() {
        return Optional.ofNullable(this.dbInstanceId);
    }

    /**
     * The network type of the connection string. Valid values:
     * - `VPC`: private network address.
     * - `Public`: public network address.
     * 
     */
    @Import(name="networkType")
    private @Nullable Output<String> networkType;

    /**
     * @return The network type of the connection string. Valid values:
     * - `VPC`: private network address.
     * - `Public`: public network address.
     * 
     */
    public Optional<Output<String>> networkType() {
        return Optional.ofNullable(this.networkType);
    }

    /**
     * The role of the related connection string.
     * 
     */
    @Import(name="replicaSetRole")
    private @Nullable Output<String> replicaSetRole;

    /**
     * @return The role of the related connection string.
     * 
     */
    public Optional<Output<String>> replicaSetRole() {
        return Optional.ofNullable(this.replicaSetRole);
    }

    /**
     * The role ID in the replica set.
     * 
     */
    @Import(name="roleId")
    private @Nullable Output<String> roleId;

    /**
     * @return The role ID in the replica set.
     * 
     */
    public Optional<Output<String>> roleId() {
        return Optional.ofNullable(this.roleId);
    }

    private ReplicaSetRoleState() {}

    private ReplicaSetRoleState(ReplicaSetRoleState $) {
        this.connectionDomain = $.connectionDomain;
        this.connectionPort = $.connectionPort;
        this.connectionPrefix = $.connectionPrefix;
        this.dbInstanceId = $.dbInstanceId;
        this.networkType = $.networkType;
        this.replicaSetRole = $.replicaSetRole;
        this.roleId = $.roleId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ReplicaSetRoleState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ReplicaSetRoleState $;

        public Builder() {
            $ = new ReplicaSetRoleState();
        }

        public Builder(ReplicaSetRoleState defaults) {
            $ = new ReplicaSetRoleState(Objects.requireNonNull(defaults));
        }

        /**
         * @param connectionDomain The connection address of the role.
         * 
         * @return builder
         * 
         */
        public Builder connectionDomain(@Nullable Output<String> connectionDomain) {
            $.connectionDomain = connectionDomain;
            return this;
        }

        /**
         * @param connectionDomain The connection address of the role.
         * 
         * @return builder
         * 
         */
        public Builder connectionDomain(String connectionDomain) {
            return connectionDomain(Output.of(connectionDomain));
        }

        /**
         * @param connectionPort The port of the connection string, will be computed if not specified.`
         * 
         * @return builder
         * 
         */
        public Builder connectionPort(@Nullable Output<Integer> connectionPort) {
            $.connectionPort = connectionPort;
            return this;
        }

        /**
         * @param connectionPort The port of the connection string, will be computed if not specified.`
         * 
         * @return builder
         * 
         */
        public Builder connectionPort(Integer connectionPort) {
            return connectionPort(Output.of(connectionPort));
        }

        /**
         * @param connectionPrefix The prefix of the connection string, will be computed if not specified.
         * 
         * @return builder
         * 
         */
        public Builder connectionPrefix(@Nullable Output<String> connectionPrefix) {
            $.connectionPrefix = connectionPrefix;
            return this;
        }

        /**
         * @param connectionPrefix The prefix of the connection string, will be computed if not specified.
         * 
         * @return builder
         * 
         */
        public Builder connectionPrefix(String connectionPrefix) {
            return connectionPrefix(Output.of(connectionPrefix));
        }

        /**
         * @param dbInstanceId The instance ID.
         * 
         * @return builder
         * 
         */
        public Builder dbInstanceId(@Nullable Output<String> dbInstanceId) {
            $.dbInstanceId = dbInstanceId;
            return this;
        }

        /**
         * @param dbInstanceId The instance ID.
         * 
         * @return builder
         * 
         */
        public Builder dbInstanceId(String dbInstanceId) {
            return dbInstanceId(Output.of(dbInstanceId));
        }

        /**
         * @param networkType The network type of the connection string. Valid values:
         * - `VPC`: private network address.
         * - `Public`: public network address.
         * 
         * @return builder
         * 
         */
        public Builder networkType(@Nullable Output<String> networkType) {
            $.networkType = networkType;
            return this;
        }

        /**
         * @param networkType The network type of the connection string. Valid values:
         * - `VPC`: private network address.
         * - `Public`: public network address.
         * 
         * @return builder
         * 
         */
        public Builder networkType(String networkType) {
            return networkType(Output.of(networkType));
        }

        /**
         * @param replicaSetRole The role of the related connection string.
         * 
         * @return builder
         * 
         */
        public Builder replicaSetRole(@Nullable Output<String> replicaSetRole) {
            $.replicaSetRole = replicaSetRole;
            return this;
        }

        /**
         * @param replicaSetRole The role of the related connection string.
         * 
         * @return builder
         * 
         */
        public Builder replicaSetRole(String replicaSetRole) {
            return replicaSetRole(Output.of(replicaSetRole));
        }

        /**
         * @param roleId The role ID in the replica set.
         * 
         * @return builder
         * 
         */
        public Builder roleId(@Nullable Output<String> roleId) {
            $.roleId = roleId;
            return this;
        }

        /**
         * @param roleId The role ID in the replica set.
         * 
         * @return builder
         * 
         */
        public Builder roleId(String roleId) {
            return roleId(Output.of(roleId));
        }

        public ReplicaSetRoleState build() {
            return $;
        }
    }

}
