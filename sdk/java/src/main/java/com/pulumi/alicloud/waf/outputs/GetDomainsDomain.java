// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.waf.outputs;

import com.pulumi.alicloud.waf.outputs.GetDomainsDomainLogHeader;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetDomainsDomain {
    /**
     * @return The type of the WAF cluster.
     * 
     */
    private String clusterType;
    /**
     * @return The CNAME record assigned by the WAF instance to the specified domain.
     * 
     */
    private String cname;
    /**
     * @return The connection timeout for WAF exclusive clusters. Valid values: `PhysicalCluster` and `VirtualCluster`. Default to `PhysicalCluster`.
     * 
     */
    private Integer connectionTime;
    /**
     * @return Field `domain` has been deprecated from version 1.94.0. Use `domain_name` instead.
     * 
     */
    private String domain;
    /**
     * @return Name of the domain.
     * 
     */
    private String domainName;
    /**
     * @return List of the HTTP 2.0 ports.
     * 
     */
    private List<String> http2Ports;
    /**
     * @return List of the HTTP ports.
     * 
     */
    private List<String> httpPorts;
    /**
     * @return Specifies whether to enable the HTTP back-to-origin feature. After this feature is enabled, the WAF instance can use HTTP to forward HTTPS requests to the origin server.
     * 
     */
    private String httpToUserIp;
    /**
     * @return List of the HTTPS ports.
     * 
     */
    private List<String> httpsPorts;
    /**
     * @return Specifies whether to redirect HTTP requests as HTTPS requests. Valid values: `On` and `Off`. Default to `Off`.
     * 
     */
    private String httpsRedirect;
    /**
     * @return The ID of domain self ID, value as `domain_name`.
     * 
     */
    private String id;
    /**
     * @return Specifies whether to configure a Layer-7 proxy, such as Anti-DDoS Pro or CDN, to filter the inbound traffic before it is forwarded to WAF. Valid values: `On` and &#34;Off&#34;. Default to `Off`.
     * 
     */
    private String isAccessProduct;
    /**
     * @return The load balancing algorithm that is used to forward requests to the origin. Valid values: `IpHash` and `RoundRobin`. Default to `IpHash`.
     * 
     */
    private String loadBalancing;
    /**
     * @return The key-value pair that is used to mark the traffic that flows through WAF to the domain. Each item contains two field:
     * 
     */
    private List<GetDomainsDomainLogHeader> logHeaders;
    /**
     * @return The read timeout of a WAF exclusive cluster. Unit: seconds.
     * 
     */
    private Integer readTime;
    /**
     * @return The ID of the resource group to which the queried domain belongs in Resource Management.
     * 
     */
    private String resourceGroupId;
    /**
     * @return List of the IP address or domain of the origin server to which the specified domain points.
     * 
     */
    private List<String> sourceIps;
    /**
     * @return The system data identifier that is used to control optimistic locking.
     * 
     */
    private Integer version;
    /**
     * @return The timeout period for a WAF exclusive cluster write connection. Unit: seconds.
     * 
     */
    private Integer writeTime;

    private GetDomainsDomain() {}
    /**
     * @return The type of the WAF cluster.
     * 
     */
    public String clusterType() {
        return this.clusterType;
    }
    /**
     * @return The CNAME record assigned by the WAF instance to the specified domain.
     * 
     */
    public String cname() {
        return this.cname;
    }
    /**
     * @return The connection timeout for WAF exclusive clusters. Valid values: `PhysicalCluster` and `VirtualCluster`. Default to `PhysicalCluster`.
     * 
     */
    public Integer connectionTime() {
        return this.connectionTime;
    }
    /**
     * @return Field `domain` has been deprecated from version 1.94.0. Use `domain_name` instead.
     * 
     */
    public String domain() {
        return this.domain;
    }
    /**
     * @return Name of the domain.
     * 
     */
    public String domainName() {
        return this.domainName;
    }
    /**
     * @return List of the HTTP 2.0 ports.
     * 
     */
    public List<String> http2Ports() {
        return this.http2Ports;
    }
    /**
     * @return List of the HTTP ports.
     * 
     */
    public List<String> httpPorts() {
        return this.httpPorts;
    }
    /**
     * @return Specifies whether to enable the HTTP back-to-origin feature. After this feature is enabled, the WAF instance can use HTTP to forward HTTPS requests to the origin server.
     * 
     */
    public String httpToUserIp() {
        return this.httpToUserIp;
    }
    /**
     * @return List of the HTTPS ports.
     * 
     */
    public List<String> httpsPorts() {
        return this.httpsPorts;
    }
    /**
     * @return Specifies whether to redirect HTTP requests as HTTPS requests. Valid values: `On` and `Off`. Default to `Off`.
     * 
     */
    public String httpsRedirect() {
        return this.httpsRedirect;
    }
    /**
     * @return The ID of domain self ID, value as `domain_name`.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Specifies whether to configure a Layer-7 proxy, such as Anti-DDoS Pro or CDN, to filter the inbound traffic before it is forwarded to WAF. Valid values: `On` and &#34;Off&#34;. Default to `Off`.
     * 
     */
    public String isAccessProduct() {
        return this.isAccessProduct;
    }
    /**
     * @return The load balancing algorithm that is used to forward requests to the origin. Valid values: `IpHash` and `RoundRobin`. Default to `IpHash`.
     * 
     */
    public String loadBalancing() {
        return this.loadBalancing;
    }
    /**
     * @return The key-value pair that is used to mark the traffic that flows through WAF to the domain. Each item contains two field:
     * 
     */
    public List<GetDomainsDomainLogHeader> logHeaders() {
        return this.logHeaders;
    }
    /**
     * @return The read timeout of a WAF exclusive cluster. Unit: seconds.
     * 
     */
    public Integer readTime() {
        return this.readTime;
    }
    /**
     * @return The ID of the resource group to which the queried domain belongs in Resource Management.
     * 
     */
    public String resourceGroupId() {
        return this.resourceGroupId;
    }
    /**
     * @return List of the IP address or domain of the origin server to which the specified domain points.
     * 
     */
    public List<String> sourceIps() {
        return this.sourceIps;
    }
    /**
     * @return The system data identifier that is used to control optimistic locking.
     * 
     */
    public Integer version() {
        return this.version;
    }
    /**
     * @return The timeout period for a WAF exclusive cluster write connection. Unit: seconds.
     * 
     */
    public Integer writeTime() {
        return this.writeTime;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDomainsDomain defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String clusterType;
        private String cname;
        private Integer connectionTime;
        private String domain;
        private String domainName;
        private List<String> http2Ports;
        private List<String> httpPorts;
        private String httpToUserIp;
        private List<String> httpsPorts;
        private String httpsRedirect;
        private String id;
        private String isAccessProduct;
        private String loadBalancing;
        private List<GetDomainsDomainLogHeader> logHeaders;
        private Integer readTime;
        private String resourceGroupId;
        private List<String> sourceIps;
        private Integer version;
        private Integer writeTime;
        public Builder() {}
        public Builder(GetDomainsDomain defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.clusterType = defaults.clusterType;
    	      this.cname = defaults.cname;
    	      this.connectionTime = defaults.connectionTime;
    	      this.domain = defaults.domain;
    	      this.domainName = defaults.domainName;
    	      this.http2Ports = defaults.http2Ports;
    	      this.httpPorts = defaults.httpPorts;
    	      this.httpToUserIp = defaults.httpToUserIp;
    	      this.httpsPorts = defaults.httpsPorts;
    	      this.httpsRedirect = defaults.httpsRedirect;
    	      this.id = defaults.id;
    	      this.isAccessProduct = defaults.isAccessProduct;
    	      this.loadBalancing = defaults.loadBalancing;
    	      this.logHeaders = defaults.logHeaders;
    	      this.readTime = defaults.readTime;
    	      this.resourceGroupId = defaults.resourceGroupId;
    	      this.sourceIps = defaults.sourceIps;
    	      this.version = defaults.version;
    	      this.writeTime = defaults.writeTime;
        }

        @CustomType.Setter
        public Builder clusterType(String clusterType) {
            if (clusterType == null) {
              throw new MissingRequiredPropertyException("GetDomainsDomain", "clusterType");
            }
            this.clusterType = clusterType;
            return this;
        }
        @CustomType.Setter
        public Builder cname(String cname) {
            if (cname == null) {
              throw new MissingRequiredPropertyException("GetDomainsDomain", "cname");
            }
            this.cname = cname;
            return this;
        }
        @CustomType.Setter
        public Builder connectionTime(Integer connectionTime) {
            if (connectionTime == null) {
              throw new MissingRequiredPropertyException("GetDomainsDomain", "connectionTime");
            }
            this.connectionTime = connectionTime;
            return this;
        }
        @CustomType.Setter
        public Builder domain(String domain) {
            if (domain == null) {
              throw new MissingRequiredPropertyException("GetDomainsDomain", "domain");
            }
            this.domain = domain;
            return this;
        }
        @CustomType.Setter
        public Builder domainName(String domainName) {
            if (domainName == null) {
              throw new MissingRequiredPropertyException("GetDomainsDomain", "domainName");
            }
            this.domainName = domainName;
            return this;
        }
        @CustomType.Setter
        public Builder http2Ports(List<String> http2Ports) {
            if (http2Ports == null) {
              throw new MissingRequiredPropertyException("GetDomainsDomain", "http2Ports");
            }
            this.http2Ports = http2Ports;
            return this;
        }
        public Builder http2Ports(String... http2Ports) {
            return http2Ports(List.of(http2Ports));
        }
        @CustomType.Setter
        public Builder httpPorts(List<String> httpPorts) {
            if (httpPorts == null) {
              throw new MissingRequiredPropertyException("GetDomainsDomain", "httpPorts");
            }
            this.httpPorts = httpPorts;
            return this;
        }
        public Builder httpPorts(String... httpPorts) {
            return httpPorts(List.of(httpPorts));
        }
        @CustomType.Setter
        public Builder httpToUserIp(String httpToUserIp) {
            if (httpToUserIp == null) {
              throw new MissingRequiredPropertyException("GetDomainsDomain", "httpToUserIp");
            }
            this.httpToUserIp = httpToUserIp;
            return this;
        }
        @CustomType.Setter
        public Builder httpsPorts(List<String> httpsPorts) {
            if (httpsPorts == null) {
              throw new MissingRequiredPropertyException("GetDomainsDomain", "httpsPorts");
            }
            this.httpsPorts = httpsPorts;
            return this;
        }
        public Builder httpsPorts(String... httpsPorts) {
            return httpsPorts(List.of(httpsPorts));
        }
        @CustomType.Setter
        public Builder httpsRedirect(String httpsRedirect) {
            if (httpsRedirect == null) {
              throw new MissingRequiredPropertyException("GetDomainsDomain", "httpsRedirect");
            }
            this.httpsRedirect = httpsRedirect;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetDomainsDomain", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder isAccessProduct(String isAccessProduct) {
            if (isAccessProduct == null) {
              throw new MissingRequiredPropertyException("GetDomainsDomain", "isAccessProduct");
            }
            this.isAccessProduct = isAccessProduct;
            return this;
        }
        @CustomType.Setter
        public Builder loadBalancing(String loadBalancing) {
            if (loadBalancing == null) {
              throw new MissingRequiredPropertyException("GetDomainsDomain", "loadBalancing");
            }
            this.loadBalancing = loadBalancing;
            return this;
        }
        @CustomType.Setter
        public Builder logHeaders(List<GetDomainsDomainLogHeader> logHeaders) {
            if (logHeaders == null) {
              throw new MissingRequiredPropertyException("GetDomainsDomain", "logHeaders");
            }
            this.logHeaders = logHeaders;
            return this;
        }
        public Builder logHeaders(GetDomainsDomainLogHeader... logHeaders) {
            return logHeaders(List.of(logHeaders));
        }
        @CustomType.Setter
        public Builder readTime(Integer readTime) {
            if (readTime == null) {
              throw new MissingRequiredPropertyException("GetDomainsDomain", "readTime");
            }
            this.readTime = readTime;
            return this;
        }
        @CustomType.Setter
        public Builder resourceGroupId(String resourceGroupId) {
            if (resourceGroupId == null) {
              throw new MissingRequiredPropertyException("GetDomainsDomain", "resourceGroupId");
            }
            this.resourceGroupId = resourceGroupId;
            return this;
        }
        @CustomType.Setter
        public Builder sourceIps(List<String> sourceIps) {
            if (sourceIps == null) {
              throw new MissingRequiredPropertyException("GetDomainsDomain", "sourceIps");
            }
            this.sourceIps = sourceIps;
            return this;
        }
        public Builder sourceIps(String... sourceIps) {
            return sourceIps(List.of(sourceIps));
        }
        @CustomType.Setter
        public Builder version(Integer version) {
            if (version == null) {
              throw new MissingRequiredPropertyException("GetDomainsDomain", "version");
            }
            this.version = version;
            return this;
        }
        @CustomType.Setter
        public Builder writeTime(Integer writeTime) {
            if (writeTime == null) {
              throw new MissingRequiredPropertyException("GetDomainsDomain", "writeTime");
            }
            this.writeTime = writeTime;
            return this;
        }
        public GetDomainsDomain build() {
            final var _resultValue = new GetDomainsDomain();
            _resultValue.clusterType = clusterType;
            _resultValue.cname = cname;
            _resultValue.connectionTime = connectionTime;
            _resultValue.domain = domain;
            _resultValue.domainName = domainName;
            _resultValue.http2Ports = http2Ports;
            _resultValue.httpPorts = httpPorts;
            _resultValue.httpToUserIp = httpToUserIp;
            _resultValue.httpsPorts = httpsPorts;
            _resultValue.httpsRedirect = httpsRedirect;
            _resultValue.id = id;
            _resultValue.isAccessProduct = isAccessProduct;
            _resultValue.loadBalancing = loadBalancing;
            _resultValue.logHeaders = logHeaders;
            _resultValue.readTime = readTime;
            _resultValue.resourceGroupId = resourceGroupId;
            _resultValue.sourceIps = sourceIps;
            _resultValue.version = version;
            _resultValue.writeTime = writeTime;
            return _resultValue;
        }
    }
}
