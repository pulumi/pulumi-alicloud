// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.cs;

import com.pulumi.alicloud.cs.inputs.NodePoolDataDiskArgs;
import com.pulumi.alicloud.cs.inputs.NodePoolKubeletConfigurationArgs;
import com.pulumi.alicloud.cs.inputs.NodePoolLabelArgs;
import com.pulumi.alicloud.cs.inputs.NodePoolManagementArgs;
import com.pulumi.alicloud.cs.inputs.NodePoolRollingPolicyArgs;
import com.pulumi.alicloud.cs.inputs.NodePoolRolloutPolicyArgs;
import com.pulumi.alicloud.cs.inputs.NodePoolScalingConfigArgs;
import com.pulumi.alicloud.cs.inputs.NodePoolSpotPriceLimitArgs;
import com.pulumi.alicloud.cs.inputs.NodePoolTaintArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class NodePoolArgs extends com.pulumi.resources.ResourceArgs {

    public static final NodePoolArgs Empty = new NodePoolArgs();

    /**
     * Enable Node payment auto-renew, default is `false`.
     * 
     */
    @Import(name="autoRenew")
    private @Nullable Output<Boolean> autoRenew;

    /**
     * @return Enable Node payment auto-renew, default is `false`.
     * 
     */
    public Optional<Output<Boolean>> autoRenew() {
        return Optional.ofNullable(this.autoRenew);
    }

    /**
     * Node payment auto-renew period, one of `1`, `2`, `3`,`6`, `12`.
     * 
     */
    @Import(name="autoRenewPeriod")
    private @Nullable Output<Integer> autoRenewPeriod;

    /**
     * @return Node payment auto-renew period, one of `1`, `2`, `3`,`6`, `12`.
     * 
     */
    public Optional<Output<Integer>> autoRenewPeriod() {
        return Optional.ofNullable(this.autoRenewPeriod);
    }

    /**
     * Whether enable worker node to support cis security reinforcement, its valid value `true` or `false`. Default to `false` and apply to AliyunLinux series. See [CIS Reinforcement](https://help.aliyun.com/document_detail/223744.html).
     * 
     */
    @Import(name="cisEnabled")
    private @Nullable Output<Boolean> cisEnabled;

    /**
     * @return Whether enable worker node to support cis security reinforcement, its valid value `true` or `false`. Default to `false` and apply to AliyunLinux series. See [CIS Reinforcement](https://help.aliyun.com/document_detail/223744.html).
     * 
     */
    public Optional<Output<Boolean>> cisEnabled() {
        return Optional.ofNullable(this.cisEnabled);
    }

    /**
     * The id of kubernetes cluster.
     * 
     */
    @Import(name="clusterId", required=true)
    private Output<String> clusterId;

    /**
     * @return The id of kubernetes cluster.
     * 
     */
    public Output<String> clusterId() {
        return this.clusterId;
    }

    /**
     * Kubelet cpu policy. For Kubernetes 1.12.6 and later, its valid value is either `static` or `none`. Default to `none` and modification is not supported.
     * 
     */
    @Import(name="cpuPolicy")
    private @Nullable Output<String> cpuPolicy;

    /**
     * @return Kubelet cpu policy. For Kubernetes 1.12.6 and later, its valid value is either `static` or `none`. Default to `none` and modification is not supported.
     * 
     */
    public Optional<Output<String>> cpuPolicy() {
        return Optional.ofNullable(this.cpuPolicy);
    }

    /**
     * The data disk configurations of worker nodes, such as the disk type and disk size. See `data_disks` below.
     * 
     */
    @Import(name="dataDisks")
    private @Nullable Output<List<NodePoolDataDiskArgs>> dataDisks;

    /**
     * @return The data disk configurations of worker nodes, such as the disk type and disk size. See `data_disks` below.
     * 
     */
    public Optional<Output<List<NodePoolDataDiskArgs>>> dataDisks() {
        return Optional.ofNullable(this.dataDisks);
    }

    /**
     * The deployment set of node pool. Specify the deploymentSet to ensure that the nodes in the node pool can be distributed on different physical machines.
     * 
     */
    @Import(name="deploymentSetId")
    private @Nullable Output<String> deploymentSetId;

    /**
     * @return The deployment set of node pool. Specify the deploymentSet to ensure that the nodes in the node pool can be distributed on different physical machines.
     * 
     */
    public Optional<Output<String>> deploymentSetId() {
        return Optional.ofNullable(this.deploymentSetId);
    }

    /**
     * The desired size of nodes of the node pool. From version 1.158.0, `desired_size` is not required.
     * 
     */
    @Import(name="desiredSize")
    private @Nullable Output<Integer> desiredSize;

    /**
     * @return The desired size of nodes of the node pool. From version 1.158.0, `desired_size` is not required.
     * 
     */
    public Optional<Output<Integer>> desiredSize() {
        return Optional.ofNullable(this.desiredSize);
    }

    /**
     * After you select this check box, if data disks have been attached to the specified ECS instances and the file system of the last data disk is uninitialized, the system automatically formats the last data disk to ext4 and mounts the data disk to /var/lib/docker and /var/lib/kubelet. The original data on the disk will be cleared. Make sure that you back up data in advance. If no data disk is mounted on the ECS instance, no new data disk will be purchased. Default is `false`.
     * 
     */
    @Import(name="formatDisk")
    private @Nullable Output<Boolean> formatDisk;

    /**
     * @return After you select this check box, if data disks have been attached to the specified ECS instances and the file system of the last data disk is uninitialized, the system automatically formats the last data disk to ext4 and mounts the data disk to /var/lib/docker and /var/lib/kubelet. The original data on the disk will be cleared. Make sure that you back up data in advance. If no data disk is mounted on the ECS instance, no new data disk will be purchased. Default is `false`.
     * 
     */
    public Optional<Output<Boolean>> formatDisk() {
        return Optional.ofNullable(this.formatDisk);
    }

    /**
     * Custom Image support. Must based on CentOS7 or AliyunLinux2.
     * 
     */
    @Import(name="imageId")
    private @Nullable Output<String> imageId;

    /**
     * @return Custom Image support. Must based on CentOS7 or AliyunLinux2.
     * 
     */
    public Optional<Output<String>> imageId() {
        return Optional.ofNullable(this.imageId);
    }

    /**
     * The image type, instead of `platform`. This field cannot be modified. One of `AliyunLinux`, `AliyunLinux3`, `AliyunLinux3Arm64`, `AliyunLinuxUEFI`, `CentOS`, `Windows`,`WindowsCore`,`AliyunLinux Qboot`,`ContainerOS`. If you select `Windows` or `WindowsCore`, the `passord` is required.
     * 
     */
    @Import(name="imageType")
    private @Nullable Output<String> imageType;

    /**
     * @return The image type, instead of `platform`. This field cannot be modified. One of `AliyunLinux`, `AliyunLinux3`, `AliyunLinux3Arm64`, `AliyunLinuxUEFI`, `CentOS`, `Windows`,`WindowsCore`,`AliyunLinux Qboot`,`ContainerOS`. If you select `Windows` or `WindowsCore`, the `passord` is required.
     * 
     */
    public Optional<Output<String>> imageType() {
        return Optional.ofNullable(this.imageType);
    }

    /**
     * Install the cloud monitoring plug-in on the node, and you can view the monitoring information of the instance through the cloud monitoring console. Default is `true`.
     * 
     */
    @Import(name="installCloudMonitor")
    private @Nullable Output<Boolean> installCloudMonitor;

    /**
     * @return Install the cloud monitoring plug-in on the node, and you can view the monitoring information of the instance through the cloud monitoring console. Default is `true`.
     * 
     */
    public Optional<Output<Boolean>> installCloudMonitor() {
        return Optional.ofNullable(this.installCloudMonitor);
    }

    /**
     * Node payment type. Valid values: `PostPaid`, `PrePaid`, default is `PostPaid`. If value is `PrePaid`, the arguments `period`, `period_unit`, `auto_renew` and `auto_renew_period` are required.
     * 
     */
    @Import(name="instanceChargeType")
    private @Nullable Output<String> instanceChargeType;

    /**
     * @return Node payment type. Valid values: `PostPaid`, `PrePaid`, default is `PostPaid`. If value is `PrePaid`, the arguments `period`, `period_unit`, `auto_renew` and `auto_renew_period` are required.
     * 
     */
    public Optional<Output<String>> instanceChargeType() {
        return Optional.ofNullable(this.instanceChargeType);
    }

    /**
     * The instance type of worker node.
     * 
     */
    @Import(name="instanceTypes", required=true)
    private Output<List<String>> instanceTypes;

    /**
     * @return The instance type of worker node.
     * 
     */
    public Output<List<String>> instanceTypes() {
        return this.instanceTypes;
    }

    /**
     * The instance list. Add existing nodes under the same cluster VPC to the node pool.
     * 
     */
    @Import(name="instances")
    private @Nullable Output<List<String>> instances;

    /**
     * @return The instance list. Add existing nodes under the same cluster VPC to the node pool.
     * 
     */
    public Optional<Output<List<String>>> instances() {
        return Optional.ofNullable(this.instances);
    }

    /**
     * The billing method for network usage. Valid values `PayByBandwidth` and `PayByTraffic`. Conflict with `eip_internet_charge_type`, EIP and public network IP can only choose one.
     * 
     */
    @Import(name="internetChargeType")
    private @Nullable Output<String> internetChargeType;

    /**
     * @return The billing method for network usage. Valid values `PayByBandwidth` and `PayByTraffic`. Conflict with `eip_internet_charge_type`, EIP and public network IP can only choose one.
     * 
     */
    public Optional<Output<String>> internetChargeType() {
        return Optional.ofNullable(this.internetChargeType);
    }

    /**
     * The maximum outbound bandwidth for the public network. Unit: Mbit/s. Valid values: 0 to 100.
     * 
     */
    @Import(name="internetMaxBandwidthOut")
    private @Nullable Output<Integer> internetMaxBandwidthOut;

    /**
     * @return The maximum outbound bandwidth for the public network. Unit: Mbit/s. Valid values: 0 to 100.
     * 
     */
    public Optional<Output<Integer>> internetMaxBandwidthOut() {
        return Optional.ofNullable(this.internetMaxBandwidthOut);
    }

    /**
     * Add an existing instance to the node pool, whether to keep the original instance name. It is recommended to set to `true`.
     * 
     */
    @Import(name="keepInstanceName")
    private @Nullable Output<Boolean> keepInstanceName;

    /**
     * @return Add an existing instance to the node pool, whether to keep the original instance name. It is recommended to set to `true`.
     * 
     */
    public Optional<Output<Boolean>> keepInstanceName() {
        return Optional.ofNullable(this.keepInstanceName);
    }

    /**
     * The keypair of ssh login cluster node, you have to create it first. You have to specify one of `password` `key_name` `kms_encrypted_password` fields. Only `key_name` is supported in the management node pool.
     * 
     */
    @Import(name="keyName")
    private @Nullable Output<String> keyName;

    /**
     * @return The keypair of ssh login cluster node, you have to create it first. You have to specify one of `password` `key_name` `kms_encrypted_password` fields. Only `key_name` is supported in the management node pool.
     * 
     */
    public Optional<Output<String>> keyName() {
        return Optional.ofNullable(this.keyName);
    }

    /**
     * An KMS encrypts password used to a cs kubernetes. You have to specify one of `password` `key_name` `kms_encrypted_password` fields.
     * 
     */
    @Import(name="kmsEncryptedPassword")
    private @Nullable Output<String> kmsEncryptedPassword;

    /**
     * @return An KMS encrypts password used to a cs kubernetes. You have to specify one of `password` `key_name` `kms_encrypted_password` fields.
     * 
     */
    public Optional<Output<String>> kmsEncryptedPassword() {
        return Optional.ofNullable(this.kmsEncryptedPassword);
    }

    /**
     * An KMS encryption context used to decrypt `kms_encrypted_password` before creating or updating a cs kubernetes with `kms_encrypted_password`. See [Encryption Context](https://www.alibabacloud.com/help/doc-detail/42975.htm). It is valid when `kms_encrypted_password` is set.
     * 
     */
    @Import(name="kmsEncryptionContext")
    private @Nullable Output<Map<String,Object>> kmsEncryptionContext;

    /**
     * @return An KMS encryption context used to decrypt `kms_encrypted_password` before creating or updating a cs kubernetes with `kms_encrypted_password`. See [Encryption Context](https://www.alibabacloud.com/help/doc-detail/42975.htm). It is valid when `kms_encrypted_password` is set.
     * 
     */
    public Optional<Output<Map<String,Object>>> kmsEncryptionContext() {
        return Optional.ofNullable(this.kmsEncryptionContext);
    }

    /**
     * Kubelet configuration parameters for worker nodes. See `kubelet_configuration` below. More information in [Kubelet Configuration](https://kubernetes.io/docs/reference/config-api/kubelet-config.v1beta1/).
     * 
     */
    @Import(name="kubeletConfiguration")
    private @Nullable Output<NodePoolKubeletConfigurationArgs> kubeletConfiguration;

    /**
     * @return Kubelet configuration parameters for worker nodes. See `kubelet_configuration` below. More information in [Kubelet Configuration](https://kubernetes.io/docs/reference/config-api/kubelet-config.v1beta1/).
     * 
     */
    public Optional<Output<NodePoolKubeletConfigurationArgs>> kubeletConfiguration() {
        return Optional.ofNullable(this.kubeletConfiguration);
    }

    /**
     * A List of Kubernetes labels to assign to the nodes . Only labels that are applied with the ACK API are managed by this argument. Detailed below. More information in [Labels](https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/). See `labels` below.
     * 
     */
    @Import(name="labels")
    private @Nullable Output<List<NodePoolLabelArgs>> labels;

    /**
     * @return A List of Kubernetes labels to assign to the nodes . Only labels that are applied with the ACK API are managed by this argument. Detailed below. More information in [Labels](https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/). See `labels` below.
     * 
     */
    public Optional<Output<List<NodePoolLabelArgs>>> labels() {
        return Optional.ofNullable(this.labels);
    }

    /**
     * Managed node pool configuration. When using a managed node pool, the node key must use `key_name`. See `management` below.
     * 
     */
    @Import(name="management")
    private @Nullable Output<NodePoolManagementArgs> management;

    /**
     * @return Managed node pool configuration. When using a managed node pool, the node key must use `key_name`. See `management` below.
     * 
     */
    public Optional<Output<NodePoolManagementArgs>> management() {
        return Optional.ofNullable(this.management);
    }

    /**
     * The name of node pool.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of node pool.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The worker node number of the node pool. From version 1.111.0, `node_count` is not required.
     * 
     * @deprecated
     * Field &#39;node_count&#39; has been deprecated from provider version 1.158.0. New field &#39;desired_size&#39; instead.
     * 
     */
    @Deprecated /* Field 'node_count' has been deprecated from provider version 1.158.0. New field 'desired_size' instead. */
    @Import(name="nodeCount")
    private @Nullable Output<Integer> nodeCount;

    /**
     * @return The worker node number of the node pool. From version 1.111.0, `node_count` is not required.
     * 
     * @deprecated
     * Field &#39;node_count&#39; has been deprecated from provider version 1.158.0. New field &#39;desired_size&#39; instead.
     * 
     */
    @Deprecated /* Field 'node_count' has been deprecated from provider version 1.158.0. New field 'desired_size' instead. */
    public Optional<Output<Integer>> nodeCount() {
        return Optional.ofNullable(this.nodeCount);
    }

    /**
     * Each node name consists of a prefix, its private network IP, and a suffix, the input format is `customized,&lt;prefix&gt;,ip,&lt;suffix&gt;`. For example &#34;customized,aliyun.com-,ip,-test&#34;, if the node private network IP address is 192.168.59.176, the prefix is aliyun.com-,and the suffix is -test, the node name will be aliyun.com-192.168.59.176-test.
     * 
     */
    @Import(name="nodeNameMode")
    private @Nullable Output<String> nodeNameMode;

    /**
     * @return Each node name consists of a prefix, its private network IP, and a suffix, the input format is `customized,&lt;prefix&gt;,ip,&lt;suffix&gt;`. For example &#34;customized,aliyun.com-,ip,-test&#34;, if the node private network IP address is 192.168.59.176, the prefix is aliyun.com-,and the suffix is -test, the node name will be aliyun.com-192.168.59.176-test.
     * 
     */
    public Optional<Output<String>> nodeNameMode() {
        return Optional.ofNullable(this.nodeNameMode);
    }

    /**
     * The password of ssh login cluster node. You have to specify one of `password` `key_name` `kms_encrypted_password` fields.
     * 
     */
    @Import(name="password")
    private @Nullable Output<String> password;

    /**
     * @return The password of ssh login cluster node. You have to specify one of `password` `key_name` `kms_encrypted_password` fields.
     * 
     */
    public Optional<Output<String>> password() {
        return Optional.ofNullable(this.password);
    }

    /**
     * Node payment period. Its valid value is one of {1, 2, 3, 6, 12, 24, 36, 48, 60}.
     * 
     */
    @Import(name="period")
    private @Nullable Output<Integer> period;

    /**
     * @return Node payment period. Its valid value is one of {1, 2, 3, 6, 12, 24, 36, 48, 60}.
     * 
     */
    public Optional<Output<Integer>> period() {
        return Optional.ofNullable(this.period);
    }

    /**
     * Node payment period unit, valid value: `Month`. Default is `Month`.
     * 
     */
    @Import(name="periodUnit")
    private @Nullable Output<String> periodUnit;

    /**
     * @return Node payment period unit, valid value: `Month`. Default is `Month`.
     * 
     */
    public Optional<Output<String>> periodUnit() {
        return Optional.ofNullable(this.periodUnit);
    }

    /**
     * The platform. One of `AliyunLinux`, `Windows`, `CentOS`, `WindowsCore`. If you select `Windows` or `WindowsCore`, the `passord` is required. Field `platform` has been deprecated from provider version 1.145.0. New field `image_type` instead.
     * 
     * @deprecated
     * Field &#39;platform&#39; has been deprecated from provider version 1.145.0. New field &#39;image_type&#39; instead
     * 
     */
    @Deprecated /* Field 'platform' has been deprecated from provider version 1.145.0. New field 'image_type' instead */
    @Import(name="platform")
    private @Nullable Output<String> platform;

    /**
     * @return The platform. One of `AliyunLinux`, `Windows`, `CentOS`, `WindowsCore`. If you select `Windows` or `WindowsCore`, the `passord` is required. Field `platform` has been deprecated from provider version 1.145.0. New field `image_type` instead.
     * 
     * @deprecated
     * Field &#39;platform&#39; has been deprecated from provider version 1.145.0. New field &#39;image_type&#39; instead
     * 
     */
    @Deprecated /* Field 'platform' has been deprecated from provider version 1.145.0. New field 'image_type' instead */
    public Optional<Output<String>> platform() {
        return Optional.ofNullable(this.platform);
    }

    /**
     * PolarDB id list, You can choose which PolarDB whitelist to add instances to.
     * 
     */
    @Import(name="polardbIds")
    private @Nullable Output<List<String>> polardbIds;

    /**
     * @return PolarDB id list, You can choose which PolarDB whitelist to add instances to.
     * 
     */
    public Optional<Output<List<String>>> polardbIds() {
        return Optional.ofNullable(this.polardbIds);
    }

    /**
     * RDS instance list, You can choose which RDS instances whitelist to add instances to.
     * 
     */
    @Import(name="rdsInstances")
    private @Nullable Output<List<String>> rdsInstances;

    /**
     * @return RDS instance list, You can choose which RDS instances whitelist to add instances to.
     * 
     */
    public Optional<Output<List<String>>> rdsInstances() {
        return Optional.ofNullable(this.rdsInstances);
    }

    /**
     * The ID of the resource group,by default these cloud resources are automatically assigned to the default resource group.
     * 
     */
    @Import(name="resourceGroupId")
    private @Nullable Output<String> resourceGroupId;

    /**
     * @return The ID of the resource group,by default these cloud resources are automatically assigned to the default resource group.
     * 
     */
    public Optional<Output<String>> resourceGroupId() {
        return Optional.ofNullable(this.resourceGroupId);
    }

    /**
     * Rolling policy is used to specify the strategy when the node pool is rolling update. This field works when nodepool updating. See `rolling_policy` below.
     * 
     */
    @Import(name="rollingPolicy")
    private @Nullable Output<NodePoolRollingPolicyArgs> rollingPolicy;

    /**
     * @return Rolling policy is used to specify the strategy when the node pool is rolling update. This field works when nodepool updating. See `rolling_policy` below.
     * 
     */
    public Optional<Output<NodePoolRollingPolicyArgs>> rollingPolicy() {
        return Optional.ofNullable(this.rollingPolicy);
    }

    /**
     * Rollout policy is used to specify the strategy when the node pool is rolling update. This field works when node pool updating. Please use `rolling_policy` to instead it from provider version 1.185.0. See `rollout_policy` below.
     * 
     * @deprecated
     * Field &#39;rollout_policy&#39; has been deprecated from provider version 1.184.0. Please use new field &#39;rolling_policy&#39; instead it to ensure the config takes effect
     * 
     */
    @Deprecated /* Field 'rollout_policy' has been deprecated from provider version 1.184.0. Please use new field 'rolling_policy' instead it to ensure the config takes effect */
    @Import(name="rolloutPolicy")
    private @Nullable Output<NodePoolRolloutPolicyArgs> rolloutPolicy;

    /**
     * @return Rollout policy is used to specify the strategy when the node pool is rolling update. This field works when node pool updating. Please use `rolling_policy` to instead it from provider version 1.185.0. See `rollout_policy` below.
     * 
     * @deprecated
     * Field &#39;rollout_policy&#39; has been deprecated from provider version 1.184.0. Please use new field &#39;rolling_policy&#39; instead it to ensure the config takes effect
     * 
     */
    @Deprecated /* Field 'rollout_policy' has been deprecated from provider version 1.184.0. Please use new field 'rolling_policy' instead it to ensure the config takes effect */
    public Optional<Output<NodePoolRolloutPolicyArgs>> rolloutPolicy() {
        return Optional.ofNullable(this.rolloutPolicy);
    }

    /**
     * The runtime name of containers. If not set, the cluster runtime will be used as the node pool runtime. If you select another container runtime, see [Comparison of Docker, containerd, and Sandboxed-Container](https://www.alibabacloud.com/help/doc-detail/160313.htm).
     * 
     */
    @Import(name="runtimeName")
    private @Nullable Output<String> runtimeName;

    /**
     * @return The runtime name of containers. If not set, the cluster runtime will be used as the node pool runtime. If you select another container runtime, see [Comparison of Docker, containerd, and Sandboxed-Container](https://www.alibabacloud.com/help/doc-detail/160313.htm).
     * 
     */
    public Optional<Output<String>> runtimeName() {
        return Optional.ofNullable(this.runtimeName);
    }

    /**
     * The runtime version of containers. If not set, the cluster runtime will be used as the node pool runtime.
     * 
     */
    @Import(name="runtimeVersion")
    private @Nullable Output<String> runtimeVersion;

    /**
     * @return The runtime version of containers. If not set, the cluster runtime will be used as the node pool runtime.
     * 
     */
    public Optional<Output<String>> runtimeVersion() {
        return Optional.ofNullable(this.runtimeVersion);
    }

    /**
     * Auto scaling node pool configuration. See `scaling_config` below. With auto-scaling is enabled, the nodes in the node pool will be labeled with `k8s.aliyun.com=true` to prevent system pods such as coredns, metrics-servers from being scheduled to elastic nodes, and to prevent node shrinkage from causing business abnormalities.
     * 
     */
    @Import(name="scalingConfig")
    private @Nullable Output<NodePoolScalingConfigArgs> scalingConfig;

    /**
     * @return Auto scaling node pool configuration. See `scaling_config` below. With auto-scaling is enabled, the nodes in the node pool will be labeled with `k8s.aliyun.com=true` to prevent system pods such as coredns, metrics-servers from being scheduled to elastic nodes, and to prevent node shrinkage from causing business abnormalities.
     * 
     */
    public Optional<Output<NodePoolScalingConfigArgs>> scalingConfig() {
        return Optional.ofNullable(this.scalingConfig);
    }

    /**
     * The scaling mode. Valid values: `release`, `recycle`, default is `release`. Standard mode(release): Create and release ECS instances based on requests.Swift mode(recycle): Create, stop, and restart ECS instances based on needs. New ECS instances are only created when no stopped ECS instance is avalible. This mode further accelerates the scaling process. Apart from ECS instances that use local storage, when an ECS instance is stopped, you are only chatged for storage space.
     * 
     */
    @Import(name="scalingPolicy")
    private @Nullable Output<String> scalingPolicy;

    /**
     * @return The scaling mode. Valid values: `release`, `recycle`, default is `release`. Standard mode(release): Create and release ECS instances based on requests.Swift mode(recycle): Create, stop, and restart ECS instances based on needs. New ECS instances are only created when no stopped ECS instance is avalible. This mode further accelerates the scaling process. Apart from ECS instances that use local storage, when an ECS instance is stopped, you are only chatged for storage space.
     * 
     */
    public Optional<Output<String>> scalingPolicy() {
        return Optional.ofNullable(this.scalingPolicy);
    }

    /**
     * The security group id for worker node. Field `security_group_id` has been deprecated from provider version 1.145.0. New field `security_group_ids` instead.
     * 
     * @deprecated
     * Field &#39;security_group_id&#39; has been deprecated from provider version 1.145.0. New field &#39;security_group_ids&#39; instead
     * 
     */
    @Deprecated /* Field 'security_group_id' has been deprecated from provider version 1.145.0. New field 'security_group_ids' instead */
    @Import(name="securityGroupId")
    private @Nullable Output<String> securityGroupId;

    /**
     * @return The security group id for worker node. Field `security_group_id` has been deprecated from provider version 1.145.0. New field `security_group_ids` instead.
     * 
     * @deprecated
     * Field &#39;security_group_id&#39; has been deprecated from provider version 1.145.0. New field &#39;security_group_ids&#39; instead
     * 
     */
    @Deprecated /* Field 'security_group_id' has been deprecated from provider version 1.145.0. New field 'security_group_ids' instead */
    public Optional<Output<String>> securityGroupId() {
        return Optional.ofNullable(this.securityGroupId);
    }

    /**
     * Multiple security groups can be configured for a node pool. If both `security_group_ids` and `security_group_id` are configured, `security_group_ids` takes effect. This field cannot be modified.
     * 
     */
    @Import(name="securityGroupIds")
    private @Nullable Output<List<String>> securityGroupIds;

    /**
     * @return Multiple security groups can be configured for a node pool. If both `security_group_ids` and `security_group_id` are configured, `security_group_ids` takes effect. This field cannot be modified.
     * 
     */
    public Optional<Output<List<String>>> securityGroupIds() {
        return Optional.ofNullable(this.securityGroupIds);
    }

    /**
     * Whether enable worker node to support soc security reinforcement, its valid value `true` or `false`. Default to `false` and apply to AliyunLinux series. See [SOC Reinforcement](https://help.aliyun.com/document_detail/196148.html).
     * &gt; **NOTE:** It is forbidden to set both `cis_enabled` and `soc_enabled` to `true`at the same time.
     * 
     */
    @Import(name="socEnabled")
    private @Nullable Output<Boolean> socEnabled;

    /**
     * @return Whether enable worker node to support soc security reinforcement, its valid value `true` or `false`. Default to `false` and apply to AliyunLinux series. See [SOC Reinforcement](https://help.aliyun.com/document_detail/196148.html).
     * &gt; **NOTE:** It is forbidden to set both `cis_enabled` and `soc_enabled` to `true`at the same time.
     * 
     */
    public Optional<Output<Boolean>> socEnabled() {
        return Optional.ofNullable(this.socEnabled);
    }

    /**
     * The maximum hourly price of the instance. This parameter takes effect only when `spot_strategy` is set to `SpotWithPriceLimit`. You could enable multiple spot instances by setting this field repeatedly. See `spot_price_limit` below.
     * 
     */
    @Import(name="spotPriceLimits")
    private @Nullable Output<List<NodePoolSpotPriceLimitArgs>> spotPriceLimits;

    /**
     * @return The maximum hourly price of the instance. This parameter takes effect only when `spot_strategy` is set to `SpotWithPriceLimit`. You could enable multiple spot instances by setting this field repeatedly. See `spot_price_limit` below.
     * 
     */
    public Optional<Output<List<NodePoolSpotPriceLimitArgs>>> spotPriceLimits() {
        return Optional.ofNullable(this.spotPriceLimits);
    }

    /**
     * The preemption policy for the pay-as-you-go instance. This parameter takes effect only when `instance_charge_type` is set to `PostPaid`. Valid value `SpotWithPriceLimit`,`SpotAsPriceGo` and `NoSpot`, default is `NoSpot`.
     * 
     */
    @Import(name="spotStrategy")
    private @Nullable Output<String> spotStrategy;

    /**
     * @return The preemption policy for the pay-as-you-go instance. This parameter takes effect only when `instance_charge_type` is set to `PostPaid`. Valid value `SpotWithPriceLimit`,`SpotAsPriceGo` and `NoSpot`, default is `NoSpot`.
     * 
     */
    public Optional<Output<String>> spotStrategy() {
        return Optional.ofNullable(this.spotStrategy);
    }

    /**
     * The system disk category of worker node. Its valid value are `cloud_ssd`, `cloud_efficiency` and `cloud_essd`. Default to `cloud_efficiency`.
     * 
     */
    @Import(name="systemDiskCategory")
    private @Nullable Output<String> systemDiskCategory;

    /**
     * @return The system disk category of worker node. Its valid value are `cloud_ssd`, `cloud_efficiency` and `cloud_essd`. Default to `cloud_efficiency`.
     * 
     */
    public Optional<Output<String>> systemDiskCategory() {
        return Optional.ofNullable(this.systemDiskCategory);
    }

    /**
     * The encryption Algorithm for Encrypting System Disk. It takes effect when system_disk_encrypted is true. Valid values `aes-256` and `sm4-128`.
     * 
     */
    @Import(name="systemDiskEncryptAlgorithm")
    private @Nullable Output<String> systemDiskEncryptAlgorithm;

    /**
     * @return The encryption Algorithm for Encrypting System Disk. It takes effect when system_disk_encrypted is true. Valid values `aes-256` and `sm4-128`.
     * 
     */
    public Optional<Output<String>> systemDiskEncryptAlgorithm() {
        return Optional.ofNullable(this.systemDiskEncryptAlgorithm);
    }

    /**
     * Whether to enable system disk encryption.
     * 
     */
    @Import(name="systemDiskEncrypted")
    private @Nullable Output<Boolean> systemDiskEncrypted;

    /**
     * @return Whether to enable system disk encryption.
     * 
     */
    public Optional<Output<Boolean>> systemDiskEncrypted() {
        return Optional.ofNullable(this.systemDiskEncrypted);
    }

    /**
     * The kms key id used to encrypt the system disk. It takes effect when system_disk_encrypted is true.
     * 
     */
    @Import(name="systemDiskKmsKey")
    private @Nullable Output<String> systemDiskKmsKey;

    /**
     * @return The kms key id used to encrypt the system disk. It takes effect when system_disk_encrypted is true.
     * 
     */
    public Optional<Output<String>> systemDiskKmsKey() {
        return Optional.ofNullable(this.systemDiskKmsKey);
    }

    /**
     * The performance of system disk, only valid for ESSD disk. You have to specify one of `PL0` `PL1` `PL2` `PL3` fields.
     * 
     */
    @Import(name="systemDiskPerformanceLevel")
    private @Nullable Output<String> systemDiskPerformanceLevel;

    /**
     * @return The performance of system disk, only valid for ESSD disk. You have to specify one of `PL0` `PL1` `PL2` `PL3` fields.
     * 
     */
    public Optional<Output<String>> systemDiskPerformanceLevel() {
        return Optional.ofNullable(this.systemDiskPerformanceLevel);
    }

    /**
     * The system disk category of worker node. Its valid value range [40~500] in GB. Default to `120`.
     * 
     */
    @Import(name="systemDiskSize")
    private @Nullable Output<Integer> systemDiskSize;

    /**
     * @return The system disk category of worker node. Its valid value range [40~500] in GB. Default to `120`.
     * 
     */
    public Optional<Output<Integer>> systemDiskSize() {
        return Optional.ofNullable(this.systemDiskSize);
    }

    /**
     * The system disk snapshot policy id.
     * 
     */
    @Import(name="systemDiskSnapshotPolicyId")
    private @Nullable Output<String> systemDiskSnapshotPolicyId;

    /**
     * @return The system disk snapshot policy id.
     * 
     */
    public Optional<Output<String>> systemDiskSnapshotPolicyId() {
        return Optional.ofNullable(this.systemDiskSnapshotPolicyId);
    }

    /**
     * A Map of tags to assign to the resource. It will be applied for ECS instances finally. Detailed below.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,Object>> tags;

    /**
     * @return A Map of tags to assign to the resource. It will be applied for ECS instances finally. Detailed below.
     * 
     */
    public Optional<Output<Map<String,Object>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * A List of Kubernetes taints to assign to the nodes. Detailed below. More information in [Taints and Toleration](https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/). See `taints` below.
     * 
     */
    @Import(name="taints")
    private @Nullable Output<List<NodePoolTaintArgs>> taints;

    /**
     * @return A List of Kubernetes taints to assign to the nodes. Detailed below. More information in [Taints and Toleration](https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/). See `taints` below.
     * 
     */
    public Optional<Output<List<NodePoolTaintArgs>>> taints() {
        return Optional.ofNullable(this.taints);
    }

    /**
     * Set the newly added node as unschedulable. If you want to open the scheduling option, you can open it in the node list of the console. If you are using an auto-scaling node pool, the setting will not take effect. Default is `false`.
     * 
     */
    @Import(name="unschedulable")
    private @Nullable Output<Boolean> unschedulable;

    /**
     * @return Set the newly added node as unschedulable. If you want to open the scheduling option, you can open it in the node list of the console. If you are using an auto-scaling node pool, the setting will not take effect. Default is `false`.
     * 
     */
    public Optional<Output<Boolean>> unschedulable() {
        return Optional.ofNullable(this.unschedulable);
    }

    /**
     * Windows instances support batch and PowerShell scripts. If your script file is larger than 1 KB, we recommend that you upload the script to Object Storage Service (OSS) and pull it through the internal endpoint of your OSS bucket.
     * 
     */
    @Import(name="userData")
    private @Nullable Output<String> userData;

    /**
     * @return Windows instances support batch and PowerShell scripts. If your script file is larger than 1 KB, we recommend that you upload the script to Object Storage Service (OSS) and pull it through the internal endpoint of your OSS bucket.
     * 
     */
    public Optional<Output<String>> userData() {
        return Optional.ofNullable(this.userData);
    }

    /**
     * The vswitches used by node pool workers.
     * 
     */
    @Import(name="vswitchIds", required=true)
    private Output<List<String>> vswitchIds;

    /**
     * @return The vswitches used by node pool workers.
     * 
     */
    public Output<List<String>> vswitchIds() {
        return this.vswitchIds;
    }

    private NodePoolArgs() {}

    private NodePoolArgs(NodePoolArgs $) {
        this.autoRenew = $.autoRenew;
        this.autoRenewPeriod = $.autoRenewPeriod;
        this.cisEnabled = $.cisEnabled;
        this.clusterId = $.clusterId;
        this.cpuPolicy = $.cpuPolicy;
        this.dataDisks = $.dataDisks;
        this.deploymentSetId = $.deploymentSetId;
        this.desiredSize = $.desiredSize;
        this.formatDisk = $.formatDisk;
        this.imageId = $.imageId;
        this.imageType = $.imageType;
        this.installCloudMonitor = $.installCloudMonitor;
        this.instanceChargeType = $.instanceChargeType;
        this.instanceTypes = $.instanceTypes;
        this.instances = $.instances;
        this.internetChargeType = $.internetChargeType;
        this.internetMaxBandwidthOut = $.internetMaxBandwidthOut;
        this.keepInstanceName = $.keepInstanceName;
        this.keyName = $.keyName;
        this.kmsEncryptedPassword = $.kmsEncryptedPassword;
        this.kmsEncryptionContext = $.kmsEncryptionContext;
        this.kubeletConfiguration = $.kubeletConfiguration;
        this.labels = $.labels;
        this.management = $.management;
        this.name = $.name;
        this.nodeCount = $.nodeCount;
        this.nodeNameMode = $.nodeNameMode;
        this.password = $.password;
        this.period = $.period;
        this.periodUnit = $.periodUnit;
        this.platform = $.platform;
        this.polardbIds = $.polardbIds;
        this.rdsInstances = $.rdsInstances;
        this.resourceGroupId = $.resourceGroupId;
        this.rollingPolicy = $.rollingPolicy;
        this.rolloutPolicy = $.rolloutPolicy;
        this.runtimeName = $.runtimeName;
        this.runtimeVersion = $.runtimeVersion;
        this.scalingConfig = $.scalingConfig;
        this.scalingPolicy = $.scalingPolicy;
        this.securityGroupId = $.securityGroupId;
        this.securityGroupIds = $.securityGroupIds;
        this.socEnabled = $.socEnabled;
        this.spotPriceLimits = $.spotPriceLimits;
        this.spotStrategy = $.spotStrategy;
        this.systemDiskCategory = $.systemDiskCategory;
        this.systemDiskEncryptAlgorithm = $.systemDiskEncryptAlgorithm;
        this.systemDiskEncrypted = $.systemDiskEncrypted;
        this.systemDiskKmsKey = $.systemDiskKmsKey;
        this.systemDiskPerformanceLevel = $.systemDiskPerformanceLevel;
        this.systemDiskSize = $.systemDiskSize;
        this.systemDiskSnapshotPolicyId = $.systemDiskSnapshotPolicyId;
        this.tags = $.tags;
        this.taints = $.taints;
        this.unschedulable = $.unschedulable;
        this.userData = $.userData;
        this.vswitchIds = $.vswitchIds;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NodePoolArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NodePoolArgs $;

        public Builder() {
            $ = new NodePoolArgs();
        }

        public Builder(NodePoolArgs defaults) {
            $ = new NodePoolArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param autoRenew Enable Node payment auto-renew, default is `false`.
         * 
         * @return builder
         * 
         */
        public Builder autoRenew(@Nullable Output<Boolean> autoRenew) {
            $.autoRenew = autoRenew;
            return this;
        }

        /**
         * @param autoRenew Enable Node payment auto-renew, default is `false`.
         * 
         * @return builder
         * 
         */
        public Builder autoRenew(Boolean autoRenew) {
            return autoRenew(Output.of(autoRenew));
        }

        /**
         * @param autoRenewPeriod Node payment auto-renew period, one of `1`, `2`, `3`,`6`, `12`.
         * 
         * @return builder
         * 
         */
        public Builder autoRenewPeriod(@Nullable Output<Integer> autoRenewPeriod) {
            $.autoRenewPeriod = autoRenewPeriod;
            return this;
        }

        /**
         * @param autoRenewPeriod Node payment auto-renew period, one of `1`, `2`, `3`,`6`, `12`.
         * 
         * @return builder
         * 
         */
        public Builder autoRenewPeriod(Integer autoRenewPeriod) {
            return autoRenewPeriod(Output.of(autoRenewPeriod));
        }

        /**
         * @param cisEnabled Whether enable worker node to support cis security reinforcement, its valid value `true` or `false`. Default to `false` and apply to AliyunLinux series. See [CIS Reinforcement](https://help.aliyun.com/document_detail/223744.html).
         * 
         * @return builder
         * 
         */
        public Builder cisEnabled(@Nullable Output<Boolean> cisEnabled) {
            $.cisEnabled = cisEnabled;
            return this;
        }

        /**
         * @param cisEnabled Whether enable worker node to support cis security reinforcement, its valid value `true` or `false`. Default to `false` and apply to AliyunLinux series. See [CIS Reinforcement](https://help.aliyun.com/document_detail/223744.html).
         * 
         * @return builder
         * 
         */
        public Builder cisEnabled(Boolean cisEnabled) {
            return cisEnabled(Output.of(cisEnabled));
        }

        /**
         * @param clusterId The id of kubernetes cluster.
         * 
         * @return builder
         * 
         */
        public Builder clusterId(Output<String> clusterId) {
            $.clusterId = clusterId;
            return this;
        }

        /**
         * @param clusterId The id of kubernetes cluster.
         * 
         * @return builder
         * 
         */
        public Builder clusterId(String clusterId) {
            return clusterId(Output.of(clusterId));
        }

        /**
         * @param cpuPolicy Kubelet cpu policy. For Kubernetes 1.12.6 and later, its valid value is either `static` or `none`. Default to `none` and modification is not supported.
         * 
         * @return builder
         * 
         */
        public Builder cpuPolicy(@Nullable Output<String> cpuPolicy) {
            $.cpuPolicy = cpuPolicy;
            return this;
        }

        /**
         * @param cpuPolicy Kubelet cpu policy. For Kubernetes 1.12.6 and later, its valid value is either `static` or `none`. Default to `none` and modification is not supported.
         * 
         * @return builder
         * 
         */
        public Builder cpuPolicy(String cpuPolicy) {
            return cpuPolicy(Output.of(cpuPolicy));
        }

        /**
         * @param dataDisks The data disk configurations of worker nodes, such as the disk type and disk size. See `data_disks` below.
         * 
         * @return builder
         * 
         */
        public Builder dataDisks(@Nullable Output<List<NodePoolDataDiskArgs>> dataDisks) {
            $.dataDisks = dataDisks;
            return this;
        }

        /**
         * @param dataDisks The data disk configurations of worker nodes, such as the disk type and disk size. See `data_disks` below.
         * 
         * @return builder
         * 
         */
        public Builder dataDisks(List<NodePoolDataDiskArgs> dataDisks) {
            return dataDisks(Output.of(dataDisks));
        }

        /**
         * @param dataDisks The data disk configurations of worker nodes, such as the disk type and disk size. See `data_disks` below.
         * 
         * @return builder
         * 
         */
        public Builder dataDisks(NodePoolDataDiskArgs... dataDisks) {
            return dataDisks(List.of(dataDisks));
        }

        /**
         * @param deploymentSetId The deployment set of node pool. Specify the deploymentSet to ensure that the nodes in the node pool can be distributed on different physical machines.
         * 
         * @return builder
         * 
         */
        public Builder deploymentSetId(@Nullable Output<String> deploymentSetId) {
            $.deploymentSetId = deploymentSetId;
            return this;
        }

        /**
         * @param deploymentSetId The deployment set of node pool. Specify the deploymentSet to ensure that the nodes in the node pool can be distributed on different physical machines.
         * 
         * @return builder
         * 
         */
        public Builder deploymentSetId(String deploymentSetId) {
            return deploymentSetId(Output.of(deploymentSetId));
        }

        /**
         * @param desiredSize The desired size of nodes of the node pool. From version 1.158.0, `desired_size` is not required.
         * 
         * @return builder
         * 
         */
        public Builder desiredSize(@Nullable Output<Integer> desiredSize) {
            $.desiredSize = desiredSize;
            return this;
        }

        /**
         * @param desiredSize The desired size of nodes of the node pool. From version 1.158.0, `desired_size` is not required.
         * 
         * @return builder
         * 
         */
        public Builder desiredSize(Integer desiredSize) {
            return desiredSize(Output.of(desiredSize));
        }

        /**
         * @param formatDisk After you select this check box, if data disks have been attached to the specified ECS instances and the file system of the last data disk is uninitialized, the system automatically formats the last data disk to ext4 and mounts the data disk to /var/lib/docker and /var/lib/kubelet. The original data on the disk will be cleared. Make sure that you back up data in advance. If no data disk is mounted on the ECS instance, no new data disk will be purchased. Default is `false`.
         * 
         * @return builder
         * 
         */
        public Builder formatDisk(@Nullable Output<Boolean> formatDisk) {
            $.formatDisk = formatDisk;
            return this;
        }

        /**
         * @param formatDisk After you select this check box, if data disks have been attached to the specified ECS instances and the file system of the last data disk is uninitialized, the system automatically formats the last data disk to ext4 and mounts the data disk to /var/lib/docker and /var/lib/kubelet. The original data on the disk will be cleared. Make sure that you back up data in advance. If no data disk is mounted on the ECS instance, no new data disk will be purchased. Default is `false`.
         * 
         * @return builder
         * 
         */
        public Builder formatDisk(Boolean formatDisk) {
            return formatDisk(Output.of(formatDisk));
        }

        /**
         * @param imageId Custom Image support. Must based on CentOS7 or AliyunLinux2.
         * 
         * @return builder
         * 
         */
        public Builder imageId(@Nullable Output<String> imageId) {
            $.imageId = imageId;
            return this;
        }

        /**
         * @param imageId Custom Image support. Must based on CentOS7 or AliyunLinux2.
         * 
         * @return builder
         * 
         */
        public Builder imageId(String imageId) {
            return imageId(Output.of(imageId));
        }

        /**
         * @param imageType The image type, instead of `platform`. This field cannot be modified. One of `AliyunLinux`, `AliyunLinux3`, `AliyunLinux3Arm64`, `AliyunLinuxUEFI`, `CentOS`, `Windows`,`WindowsCore`,`AliyunLinux Qboot`,`ContainerOS`. If you select `Windows` or `WindowsCore`, the `passord` is required.
         * 
         * @return builder
         * 
         */
        public Builder imageType(@Nullable Output<String> imageType) {
            $.imageType = imageType;
            return this;
        }

        /**
         * @param imageType The image type, instead of `platform`. This field cannot be modified. One of `AliyunLinux`, `AliyunLinux3`, `AliyunLinux3Arm64`, `AliyunLinuxUEFI`, `CentOS`, `Windows`,`WindowsCore`,`AliyunLinux Qboot`,`ContainerOS`. If you select `Windows` or `WindowsCore`, the `passord` is required.
         * 
         * @return builder
         * 
         */
        public Builder imageType(String imageType) {
            return imageType(Output.of(imageType));
        }

        /**
         * @param installCloudMonitor Install the cloud monitoring plug-in on the node, and you can view the monitoring information of the instance through the cloud monitoring console. Default is `true`.
         * 
         * @return builder
         * 
         */
        public Builder installCloudMonitor(@Nullable Output<Boolean> installCloudMonitor) {
            $.installCloudMonitor = installCloudMonitor;
            return this;
        }

        /**
         * @param installCloudMonitor Install the cloud monitoring plug-in on the node, and you can view the monitoring information of the instance through the cloud monitoring console. Default is `true`.
         * 
         * @return builder
         * 
         */
        public Builder installCloudMonitor(Boolean installCloudMonitor) {
            return installCloudMonitor(Output.of(installCloudMonitor));
        }

        /**
         * @param instanceChargeType Node payment type. Valid values: `PostPaid`, `PrePaid`, default is `PostPaid`. If value is `PrePaid`, the arguments `period`, `period_unit`, `auto_renew` and `auto_renew_period` are required.
         * 
         * @return builder
         * 
         */
        public Builder instanceChargeType(@Nullable Output<String> instanceChargeType) {
            $.instanceChargeType = instanceChargeType;
            return this;
        }

        /**
         * @param instanceChargeType Node payment type. Valid values: `PostPaid`, `PrePaid`, default is `PostPaid`. If value is `PrePaid`, the arguments `period`, `period_unit`, `auto_renew` and `auto_renew_period` are required.
         * 
         * @return builder
         * 
         */
        public Builder instanceChargeType(String instanceChargeType) {
            return instanceChargeType(Output.of(instanceChargeType));
        }

        /**
         * @param instanceTypes The instance type of worker node.
         * 
         * @return builder
         * 
         */
        public Builder instanceTypes(Output<List<String>> instanceTypes) {
            $.instanceTypes = instanceTypes;
            return this;
        }

        /**
         * @param instanceTypes The instance type of worker node.
         * 
         * @return builder
         * 
         */
        public Builder instanceTypes(List<String> instanceTypes) {
            return instanceTypes(Output.of(instanceTypes));
        }

        /**
         * @param instanceTypes The instance type of worker node.
         * 
         * @return builder
         * 
         */
        public Builder instanceTypes(String... instanceTypes) {
            return instanceTypes(List.of(instanceTypes));
        }

        /**
         * @param instances The instance list. Add existing nodes under the same cluster VPC to the node pool.
         * 
         * @return builder
         * 
         */
        public Builder instances(@Nullable Output<List<String>> instances) {
            $.instances = instances;
            return this;
        }

        /**
         * @param instances The instance list. Add existing nodes under the same cluster VPC to the node pool.
         * 
         * @return builder
         * 
         */
        public Builder instances(List<String> instances) {
            return instances(Output.of(instances));
        }

        /**
         * @param instances The instance list. Add existing nodes under the same cluster VPC to the node pool.
         * 
         * @return builder
         * 
         */
        public Builder instances(String... instances) {
            return instances(List.of(instances));
        }

        /**
         * @param internetChargeType The billing method for network usage. Valid values `PayByBandwidth` and `PayByTraffic`. Conflict with `eip_internet_charge_type`, EIP and public network IP can only choose one.
         * 
         * @return builder
         * 
         */
        public Builder internetChargeType(@Nullable Output<String> internetChargeType) {
            $.internetChargeType = internetChargeType;
            return this;
        }

        /**
         * @param internetChargeType The billing method for network usage. Valid values `PayByBandwidth` and `PayByTraffic`. Conflict with `eip_internet_charge_type`, EIP and public network IP can only choose one.
         * 
         * @return builder
         * 
         */
        public Builder internetChargeType(String internetChargeType) {
            return internetChargeType(Output.of(internetChargeType));
        }

        /**
         * @param internetMaxBandwidthOut The maximum outbound bandwidth for the public network. Unit: Mbit/s. Valid values: 0 to 100.
         * 
         * @return builder
         * 
         */
        public Builder internetMaxBandwidthOut(@Nullable Output<Integer> internetMaxBandwidthOut) {
            $.internetMaxBandwidthOut = internetMaxBandwidthOut;
            return this;
        }

        /**
         * @param internetMaxBandwidthOut The maximum outbound bandwidth for the public network. Unit: Mbit/s. Valid values: 0 to 100.
         * 
         * @return builder
         * 
         */
        public Builder internetMaxBandwidthOut(Integer internetMaxBandwidthOut) {
            return internetMaxBandwidthOut(Output.of(internetMaxBandwidthOut));
        }

        /**
         * @param keepInstanceName Add an existing instance to the node pool, whether to keep the original instance name. It is recommended to set to `true`.
         * 
         * @return builder
         * 
         */
        public Builder keepInstanceName(@Nullable Output<Boolean> keepInstanceName) {
            $.keepInstanceName = keepInstanceName;
            return this;
        }

        /**
         * @param keepInstanceName Add an existing instance to the node pool, whether to keep the original instance name. It is recommended to set to `true`.
         * 
         * @return builder
         * 
         */
        public Builder keepInstanceName(Boolean keepInstanceName) {
            return keepInstanceName(Output.of(keepInstanceName));
        }

        /**
         * @param keyName The keypair of ssh login cluster node, you have to create it first. You have to specify one of `password` `key_name` `kms_encrypted_password` fields. Only `key_name` is supported in the management node pool.
         * 
         * @return builder
         * 
         */
        public Builder keyName(@Nullable Output<String> keyName) {
            $.keyName = keyName;
            return this;
        }

        /**
         * @param keyName The keypair of ssh login cluster node, you have to create it first. You have to specify one of `password` `key_name` `kms_encrypted_password` fields. Only `key_name` is supported in the management node pool.
         * 
         * @return builder
         * 
         */
        public Builder keyName(String keyName) {
            return keyName(Output.of(keyName));
        }

        /**
         * @param kmsEncryptedPassword An KMS encrypts password used to a cs kubernetes. You have to specify one of `password` `key_name` `kms_encrypted_password` fields.
         * 
         * @return builder
         * 
         */
        public Builder kmsEncryptedPassword(@Nullable Output<String> kmsEncryptedPassword) {
            $.kmsEncryptedPassword = kmsEncryptedPassword;
            return this;
        }

        /**
         * @param kmsEncryptedPassword An KMS encrypts password used to a cs kubernetes. You have to specify one of `password` `key_name` `kms_encrypted_password` fields.
         * 
         * @return builder
         * 
         */
        public Builder kmsEncryptedPassword(String kmsEncryptedPassword) {
            return kmsEncryptedPassword(Output.of(kmsEncryptedPassword));
        }

        /**
         * @param kmsEncryptionContext An KMS encryption context used to decrypt `kms_encrypted_password` before creating or updating a cs kubernetes with `kms_encrypted_password`. See [Encryption Context](https://www.alibabacloud.com/help/doc-detail/42975.htm). It is valid when `kms_encrypted_password` is set.
         * 
         * @return builder
         * 
         */
        public Builder kmsEncryptionContext(@Nullable Output<Map<String,Object>> kmsEncryptionContext) {
            $.kmsEncryptionContext = kmsEncryptionContext;
            return this;
        }

        /**
         * @param kmsEncryptionContext An KMS encryption context used to decrypt `kms_encrypted_password` before creating or updating a cs kubernetes with `kms_encrypted_password`. See [Encryption Context](https://www.alibabacloud.com/help/doc-detail/42975.htm). It is valid when `kms_encrypted_password` is set.
         * 
         * @return builder
         * 
         */
        public Builder kmsEncryptionContext(Map<String,Object> kmsEncryptionContext) {
            return kmsEncryptionContext(Output.of(kmsEncryptionContext));
        }

        /**
         * @param kubeletConfiguration Kubelet configuration parameters for worker nodes. See `kubelet_configuration` below. More information in [Kubelet Configuration](https://kubernetes.io/docs/reference/config-api/kubelet-config.v1beta1/).
         * 
         * @return builder
         * 
         */
        public Builder kubeletConfiguration(@Nullable Output<NodePoolKubeletConfigurationArgs> kubeletConfiguration) {
            $.kubeletConfiguration = kubeletConfiguration;
            return this;
        }

        /**
         * @param kubeletConfiguration Kubelet configuration parameters for worker nodes. See `kubelet_configuration` below. More information in [Kubelet Configuration](https://kubernetes.io/docs/reference/config-api/kubelet-config.v1beta1/).
         * 
         * @return builder
         * 
         */
        public Builder kubeletConfiguration(NodePoolKubeletConfigurationArgs kubeletConfiguration) {
            return kubeletConfiguration(Output.of(kubeletConfiguration));
        }

        /**
         * @param labels A List of Kubernetes labels to assign to the nodes . Only labels that are applied with the ACK API are managed by this argument. Detailed below. More information in [Labels](https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/). See `labels` below.
         * 
         * @return builder
         * 
         */
        public Builder labels(@Nullable Output<List<NodePoolLabelArgs>> labels) {
            $.labels = labels;
            return this;
        }

        /**
         * @param labels A List of Kubernetes labels to assign to the nodes . Only labels that are applied with the ACK API are managed by this argument. Detailed below. More information in [Labels](https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/). See `labels` below.
         * 
         * @return builder
         * 
         */
        public Builder labels(List<NodePoolLabelArgs> labels) {
            return labels(Output.of(labels));
        }

        /**
         * @param labels A List of Kubernetes labels to assign to the nodes . Only labels that are applied with the ACK API are managed by this argument. Detailed below. More information in [Labels](https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/). See `labels` below.
         * 
         * @return builder
         * 
         */
        public Builder labels(NodePoolLabelArgs... labels) {
            return labels(List.of(labels));
        }

        /**
         * @param management Managed node pool configuration. When using a managed node pool, the node key must use `key_name`. See `management` below.
         * 
         * @return builder
         * 
         */
        public Builder management(@Nullable Output<NodePoolManagementArgs> management) {
            $.management = management;
            return this;
        }

        /**
         * @param management Managed node pool configuration. When using a managed node pool, the node key must use `key_name`. See `management` below.
         * 
         * @return builder
         * 
         */
        public Builder management(NodePoolManagementArgs management) {
            return management(Output.of(management));
        }

        /**
         * @param name The name of node pool.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of node pool.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param nodeCount The worker node number of the node pool. From version 1.111.0, `node_count` is not required.
         * 
         * @return builder
         * 
         * @deprecated
         * Field &#39;node_count&#39; has been deprecated from provider version 1.158.0. New field &#39;desired_size&#39; instead.
         * 
         */
        @Deprecated /* Field 'node_count' has been deprecated from provider version 1.158.0. New field 'desired_size' instead. */
        public Builder nodeCount(@Nullable Output<Integer> nodeCount) {
            $.nodeCount = nodeCount;
            return this;
        }

        /**
         * @param nodeCount The worker node number of the node pool. From version 1.111.0, `node_count` is not required.
         * 
         * @return builder
         * 
         * @deprecated
         * Field &#39;node_count&#39; has been deprecated from provider version 1.158.0. New field &#39;desired_size&#39; instead.
         * 
         */
        @Deprecated /* Field 'node_count' has been deprecated from provider version 1.158.0. New field 'desired_size' instead. */
        public Builder nodeCount(Integer nodeCount) {
            return nodeCount(Output.of(nodeCount));
        }

        /**
         * @param nodeNameMode Each node name consists of a prefix, its private network IP, and a suffix, the input format is `customized,&lt;prefix&gt;,ip,&lt;suffix&gt;`. For example &#34;customized,aliyun.com-,ip,-test&#34;, if the node private network IP address is 192.168.59.176, the prefix is aliyun.com-,and the suffix is -test, the node name will be aliyun.com-192.168.59.176-test.
         * 
         * @return builder
         * 
         */
        public Builder nodeNameMode(@Nullable Output<String> nodeNameMode) {
            $.nodeNameMode = nodeNameMode;
            return this;
        }

        /**
         * @param nodeNameMode Each node name consists of a prefix, its private network IP, and a suffix, the input format is `customized,&lt;prefix&gt;,ip,&lt;suffix&gt;`. For example &#34;customized,aliyun.com-,ip,-test&#34;, if the node private network IP address is 192.168.59.176, the prefix is aliyun.com-,and the suffix is -test, the node name will be aliyun.com-192.168.59.176-test.
         * 
         * @return builder
         * 
         */
        public Builder nodeNameMode(String nodeNameMode) {
            return nodeNameMode(Output.of(nodeNameMode));
        }

        /**
         * @param password The password of ssh login cluster node. You have to specify one of `password` `key_name` `kms_encrypted_password` fields.
         * 
         * @return builder
         * 
         */
        public Builder password(@Nullable Output<String> password) {
            $.password = password;
            return this;
        }

        /**
         * @param password The password of ssh login cluster node. You have to specify one of `password` `key_name` `kms_encrypted_password` fields.
         * 
         * @return builder
         * 
         */
        public Builder password(String password) {
            return password(Output.of(password));
        }

        /**
         * @param period Node payment period. Its valid value is one of {1, 2, 3, 6, 12, 24, 36, 48, 60}.
         * 
         * @return builder
         * 
         */
        public Builder period(@Nullable Output<Integer> period) {
            $.period = period;
            return this;
        }

        /**
         * @param period Node payment period. Its valid value is one of {1, 2, 3, 6, 12, 24, 36, 48, 60}.
         * 
         * @return builder
         * 
         */
        public Builder period(Integer period) {
            return period(Output.of(period));
        }

        /**
         * @param periodUnit Node payment period unit, valid value: `Month`. Default is `Month`.
         * 
         * @return builder
         * 
         */
        public Builder periodUnit(@Nullable Output<String> periodUnit) {
            $.periodUnit = periodUnit;
            return this;
        }

        /**
         * @param periodUnit Node payment period unit, valid value: `Month`. Default is `Month`.
         * 
         * @return builder
         * 
         */
        public Builder periodUnit(String periodUnit) {
            return periodUnit(Output.of(periodUnit));
        }

        /**
         * @param platform The platform. One of `AliyunLinux`, `Windows`, `CentOS`, `WindowsCore`. If you select `Windows` or `WindowsCore`, the `passord` is required. Field `platform` has been deprecated from provider version 1.145.0. New field `image_type` instead.
         * 
         * @return builder
         * 
         * @deprecated
         * Field &#39;platform&#39; has been deprecated from provider version 1.145.0. New field &#39;image_type&#39; instead
         * 
         */
        @Deprecated /* Field 'platform' has been deprecated from provider version 1.145.0. New field 'image_type' instead */
        public Builder platform(@Nullable Output<String> platform) {
            $.platform = platform;
            return this;
        }

        /**
         * @param platform The platform. One of `AliyunLinux`, `Windows`, `CentOS`, `WindowsCore`. If you select `Windows` or `WindowsCore`, the `passord` is required. Field `platform` has been deprecated from provider version 1.145.0. New field `image_type` instead.
         * 
         * @return builder
         * 
         * @deprecated
         * Field &#39;platform&#39; has been deprecated from provider version 1.145.0. New field &#39;image_type&#39; instead
         * 
         */
        @Deprecated /* Field 'platform' has been deprecated from provider version 1.145.0. New field 'image_type' instead */
        public Builder platform(String platform) {
            return platform(Output.of(platform));
        }

        /**
         * @param polardbIds PolarDB id list, You can choose which PolarDB whitelist to add instances to.
         * 
         * @return builder
         * 
         */
        public Builder polardbIds(@Nullable Output<List<String>> polardbIds) {
            $.polardbIds = polardbIds;
            return this;
        }

        /**
         * @param polardbIds PolarDB id list, You can choose which PolarDB whitelist to add instances to.
         * 
         * @return builder
         * 
         */
        public Builder polardbIds(List<String> polardbIds) {
            return polardbIds(Output.of(polardbIds));
        }

        /**
         * @param polardbIds PolarDB id list, You can choose which PolarDB whitelist to add instances to.
         * 
         * @return builder
         * 
         */
        public Builder polardbIds(String... polardbIds) {
            return polardbIds(List.of(polardbIds));
        }

        /**
         * @param rdsInstances RDS instance list, You can choose which RDS instances whitelist to add instances to.
         * 
         * @return builder
         * 
         */
        public Builder rdsInstances(@Nullable Output<List<String>> rdsInstances) {
            $.rdsInstances = rdsInstances;
            return this;
        }

        /**
         * @param rdsInstances RDS instance list, You can choose which RDS instances whitelist to add instances to.
         * 
         * @return builder
         * 
         */
        public Builder rdsInstances(List<String> rdsInstances) {
            return rdsInstances(Output.of(rdsInstances));
        }

        /**
         * @param rdsInstances RDS instance list, You can choose which RDS instances whitelist to add instances to.
         * 
         * @return builder
         * 
         */
        public Builder rdsInstances(String... rdsInstances) {
            return rdsInstances(List.of(rdsInstances));
        }

        /**
         * @param resourceGroupId The ID of the resource group,by default these cloud resources are automatically assigned to the default resource group.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupId(@Nullable Output<String> resourceGroupId) {
            $.resourceGroupId = resourceGroupId;
            return this;
        }

        /**
         * @param resourceGroupId The ID of the resource group,by default these cloud resources are automatically assigned to the default resource group.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupId(String resourceGroupId) {
            return resourceGroupId(Output.of(resourceGroupId));
        }

        /**
         * @param rollingPolicy Rolling policy is used to specify the strategy when the node pool is rolling update. This field works when nodepool updating. See `rolling_policy` below.
         * 
         * @return builder
         * 
         */
        public Builder rollingPolicy(@Nullable Output<NodePoolRollingPolicyArgs> rollingPolicy) {
            $.rollingPolicy = rollingPolicy;
            return this;
        }

        /**
         * @param rollingPolicy Rolling policy is used to specify the strategy when the node pool is rolling update. This field works when nodepool updating. See `rolling_policy` below.
         * 
         * @return builder
         * 
         */
        public Builder rollingPolicy(NodePoolRollingPolicyArgs rollingPolicy) {
            return rollingPolicy(Output.of(rollingPolicy));
        }

        /**
         * @param rolloutPolicy Rollout policy is used to specify the strategy when the node pool is rolling update. This field works when node pool updating. Please use `rolling_policy` to instead it from provider version 1.185.0. See `rollout_policy` below.
         * 
         * @return builder
         * 
         * @deprecated
         * Field &#39;rollout_policy&#39; has been deprecated from provider version 1.184.0. Please use new field &#39;rolling_policy&#39; instead it to ensure the config takes effect
         * 
         */
        @Deprecated /* Field 'rollout_policy' has been deprecated from provider version 1.184.0. Please use new field 'rolling_policy' instead it to ensure the config takes effect */
        public Builder rolloutPolicy(@Nullable Output<NodePoolRolloutPolicyArgs> rolloutPolicy) {
            $.rolloutPolicy = rolloutPolicy;
            return this;
        }

        /**
         * @param rolloutPolicy Rollout policy is used to specify the strategy when the node pool is rolling update. This field works when node pool updating. Please use `rolling_policy` to instead it from provider version 1.185.0. See `rollout_policy` below.
         * 
         * @return builder
         * 
         * @deprecated
         * Field &#39;rollout_policy&#39; has been deprecated from provider version 1.184.0. Please use new field &#39;rolling_policy&#39; instead it to ensure the config takes effect
         * 
         */
        @Deprecated /* Field 'rollout_policy' has been deprecated from provider version 1.184.0. Please use new field 'rolling_policy' instead it to ensure the config takes effect */
        public Builder rolloutPolicy(NodePoolRolloutPolicyArgs rolloutPolicy) {
            return rolloutPolicy(Output.of(rolloutPolicy));
        }

        /**
         * @param runtimeName The runtime name of containers. If not set, the cluster runtime will be used as the node pool runtime. If you select another container runtime, see [Comparison of Docker, containerd, and Sandboxed-Container](https://www.alibabacloud.com/help/doc-detail/160313.htm).
         * 
         * @return builder
         * 
         */
        public Builder runtimeName(@Nullable Output<String> runtimeName) {
            $.runtimeName = runtimeName;
            return this;
        }

        /**
         * @param runtimeName The runtime name of containers. If not set, the cluster runtime will be used as the node pool runtime. If you select another container runtime, see [Comparison of Docker, containerd, and Sandboxed-Container](https://www.alibabacloud.com/help/doc-detail/160313.htm).
         * 
         * @return builder
         * 
         */
        public Builder runtimeName(String runtimeName) {
            return runtimeName(Output.of(runtimeName));
        }

        /**
         * @param runtimeVersion The runtime version of containers. If not set, the cluster runtime will be used as the node pool runtime.
         * 
         * @return builder
         * 
         */
        public Builder runtimeVersion(@Nullable Output<String> runtimeVersion) {
            $.runtimeVersion = runtimeVersion;
            return this;
        }

        /**
         * @param runtimeVersion The runtime version of containers. If not set, the cluster runtime will be used as the node pool runtime.
         * 
         * @return builder
         * 
         */
        public Builder runtimeVersion(String runtimeVersion) {
            return runtimeVersion(Output.of(runtimeVersion));
        }

        /**
         * @param scalingConfig Auto scaling node pool configuration. See `scaling_config` below. With auto-scaling is enabled, the nodes in the node pool will be labeled with `k8s.aliyun.com=true` to prevent system pods such as coredns, metrics-servers from being scheduled to elastic nodes, and to prevent node shrinkage from causing business abnormalities.
         * 
         * @return builder
         * 
         */
        public Builder scalingConfig(@Nullable Output<NodePoolScalingConfigArgs> scalingConfig) {
            $.scalingConfig = scalingConfig;
            return this;
        }

        /**
         * @param scalingConfig Auto scaling node pool configuration. See `scaling_config` below. With auto-scaling is enabled, the nodes in the node pool will be labeled with `k8s.aliyun.com=true` to prevent system pods such as coredns, metrics-servers from being scheduled to elastic nodes, and to prevent node shrinkage from causing business abnormalities.
         * 
         * @return builder
         * 
         */
        public Builder scalingConfig(NodePoolScalingConfigArgs scalingConfig) {
            return scalingConfig(Output.of(scalingConfig));
        }

        /**
         * @param scalingPolicy The scaling mode. Valid values: `release`, `recycle`, default is `release`. Standard mode(release): Create and release ECS instances based on requests.Swift mode(recycle): Create, stop, and restart ECS instances based on needs. New ECS instances are only created when no stopped ECS instance is avalible. This mode further accelerates the scaling process. Apart from ECS instances that use local storage, when an ECS instance is stopped, you are only chatged for storage space.
         * 
         * @return builder
         * 
         */
        public Builder scalingPolicy(@Nullable Output<String> scalingPolicy) {
            $.scalingPolicy = scalingPolicy;
            return this;
        }

        /**
         * @param scalingPolicy The scaling mode. Valid values: `release`, `recycle`, default is `release`. Standard mode(release): Create and release ECS instances based on requests.Swift mode(recycle): Create, stop, and restart ECS instances based on needs. New ECS instances are only created when no stopped ECS instance is avalible. This mode further accelerates the scaling process. Apart from ECS instances that use local storage, when an ECS instance is stopped, you are only chatged for storage space.
         * 
         * @return builder
         * 
         */
        public Builder scalingPolicy(String scalingPolicy) {
            return scalingPolicy(Output.of(scalingPolicy));
        }

        /**
         * @param securityGroupId The security group id for worker node. Field `security_group_id` has been deprecated from provider version 1.145.0. New field `security_group_ids` instead.
         * 
         * @return builder
         * 
         * @deprecated
         * Field &#39;security_group_id&#39; has been deprecated from provider version 1.145.0. New field &#39;security_group_ids&#39; instead
         * 
         */
        @Deprecated /* Field 'security_group_id' has been deprecated from provider version 1.145.0. New field 'security_group_ids' instead */
        public Builder securityGroupId(@Nullable Output<String> securityGroupId) {
            $.securityGroupId = securityGroupId;
            return this;
        }

        /**
         * @param securityGroupId The security group id for worker node. Field `security_group_id` has been deprecated from provider version 1.145.0. New field `security_group_ids` instead.
         * 
         * @return builder
         * 
         * @deprecated
         * Field &#39;security_group_id&#39; has been deprecated from provider version 1.145.0. New field &#39;security_group_ids&#39; instead
         * 
         */
        @Deprecated /* Field 'security_group_id' has been deprecated from provider version 1.145.0. New field 'security_group_ids' instead */
        public Builder securityGroupId(String securityGroupId) {
            return securityGroupId(Output.of(securityGroupId));
        }

        /**
         * @param securityGroupIds Multiple security groups can be configured for a node pool. If both `security_group_ids` and `security_group_id` are configured, `security_group_ids` takes effect. This field cannot be modified.
         * 
         * @return builder
         * 
         */
        public Builder securityGroupIds(@Nullable Output<List<String>> securityGroupIds) {
            $.securityGroupIds = securityGroupIds;
            return this;
        }

        /**
         * @param securityGroupIds Multiple security groups can be configured for a node pool. If both `security_group_ids` and `security_group_id` are configured, `security_group_ids` takes effect. This field cannot be modified.
         * 
         * @return builder
         * 
         */
        public Builder securityGroupIds(List<String> securityGroupIds) {
            return securityGroupIds(Output.of(securityGroupIds));
        }

        /**
         * @param securityGroupIds Multiple security groups can be configured for a node pool. If both `security_group_ids` and `security_group_id` are configured, `security_group_ids` takes effect. This field cannot be modified.
         * 
         * @return builder
         * 
         */
        public Builder securityGroupIds(String... securityGroupIds) {
            return securityGroupIds(List.of(securityGroupIds));
        }

        /**
         * @param socEnabled Whether enable worker node to support soc security reinforcement, its valid value `true` or `false`. Default to `false` and apply to AliyunLinux series. See [SOC Reinforcement](https://help.aliyun.com/document_detail/196148.html).
         * &gt; **NOTE:** It is forbidden to set both `cis_enabled` and `soc_enabled` to `true`at the same time.
         * 
         * @return builder
         * 
         */
        public Builder socEnabled(@Nullable Output<Boolean> socEnabled) {
            $.socEnabled = socEnabled;
            return this;
        }

        /**
         * @param socEnabled Whether enable worker node to support soc security reinforcement, its valid value `true` or `false`. Default to `false` and apply to AliyunLinux series. See [SOC Reinforcement](https://help.aliyun.com/document_detail/196148.html).
         * &gt; **NOTE:** It is forbidden to set both `cis_enabled` and `soc_enabled` to `true`at the same time.
         * 
         * @return builder
         * 
         */
        public Builder socEnabled(Boolean socEnabled) {
            return socEnabled(Output.of(socEnabled));
        }

        /**
         * @param spotPriceLimits The maximum hourly price of the instance. This parameter takes effect only when `spot_strategy` is set to `SpotWithPriceLimit`. You could enable multiple spot instances by setting this field repeatedly. See `spot_price_limit` below.
         * 
         * @return builder
         * 
         */
        public Builder spotPriceLimits(@Nullable Output<List<NodePoolSpotPriceLimitArgs>> spotPriceLimits) {
            $.spotPriceLimits = spotPriceLimits;
            return this;
        }

        /**
         * @param spotPriceLimits The maximum hourly price of the instance. This parameter takes effect only when `spot_strategy` is set to `SpotWithPriceLimit`. You could enable multiple spot instances by setting this field repeatedly. See `spot_price_limit` below.
         * 
         * @return builder
         * 
         */
        public Builder spotPriceLimits(List<NodePoolSpotPriceLimitArgs> spotPriceLimits) {
            return spotPriceLimits(Output.of(spotPriceLimits));
        }

        /**
         * @param spotPriceLimits The maximum hourly price of the instance. This parameter takes effect only when `spot_strategy` is set to `SpotWithPriceLimit`. You could enable multiple spot instances by setting this field repeatedly. See `spot_price_limit` below.
         * 
         * @return builder
         * 
         */
        public Builder spotPriceLimits(NodePoolSpotPriceLimitArgs... spotPriceLimits) {
            return spotPriceLimits(List.of(spotPriceLimits));
        }

        /**
         * @param spotStrategy The preemption policy for the pay-as-you-go instance. This parameter takes effect only when `instance_charge_type` is set to `PostPaid`. Valid value `SpotWithPriceLimit`,`SpotAsPriceGo` and `NoSpot`, default is `NoSpot`.
         * 
         * @return builder
         * 
         */
        public Builder spotStrategy(@Nullable Output<String> spotStrategy) {
            $.spotStrategy = spotStrategy;
            return this;
        }

        /**
         * @param spotStrategy The preemption policy for the pay-as-you-go instance. This parameter takes effect only when `instance_charge_type` is set to `PostPaid`. Valid value `SpotWithPriceLimit`,`SpotAsPriceGo` and `NoSpot`, default is `NoSpot`.
         * 
         * @return builder
         * 
         */
        public Builder spotStrategy(String spotStrategy) {
            return spotStrategy(Output.of(spotStrategy));
        }

        /**
         * @param systemDiskCategory The system disk category of worker node. Its valid value are `cloud_ssd`, `cloud_efficiency` and `cloud_essd`. Default to `cloud_efficiency`.
         * 
         * @return builder
         * 
         */
        public Builder systemDiskCategory(@Nullable Output<String> systemDiskCategory) {
            $.systemDiskCategory = systemDiskCategory;
            return this;
        }

        /**
         * @param systemDiskCategory The system disk category of worker node. Its valid value are `cloud_ssd`, `cloud_efficiency` and `cloud_essd`. Default to `cloud_efficiency`.
         * 
         * @return builder
         * 
         */
        public Builder systemDiskCategory(String systemDiskCategory) {
            return systemDiskCategory(Output.of(systemDiskCategory));
        }

        /**
         * @param systemDiskEncryptAlgorithm The encryption Algorithm for Encrypting System Disk. It takes effect when system_disk_encrypted is true. Valid values `aes-256` and `sm4-128`.
         * 
         * @return builder
         * 
         */
        public Builder systemDiskEncryptAlgorithm(@Nullable Output<String> systemDiskEncryptAlgorithm) {
            $.systemDiskEncryptAlgorithm = systemDiskEncryptAlgorithm;
            return this;
        }

        /**
         * @param systemDiskEncryptAlgorithm The encryption Algorithm for Encrypting System Disk. It takes effect when system_disk_encrypted is true. Valid values `aes-256` and `sm4-128`.
         * 
         * @return builder
         * 
         */
        public Builder systemDiskEncryptAlgorithm(String systemDiskEncryptAlgorithm) {
            return systemDiskEncryptAlgorithm(Output.of(systemDiskEncryptAlgorithm));
        }

        /**
         * @param systemDiskEncrypted Whether to enable system disk encryption.
         * 
         * @return builder
         * 
         */
        public Builder systemDiskEncrypted(@Nullable Output<Boolean> systemDiskEncrypted) {
            $.systemDiskEncrypted = systemDiskEncrypted;
            return this;
        }

        /**
         * @param systemDiskEncrypted Whether to enable system disk encryption.
         * 
         * @return builder
         * 
         */
        public Builder systemDiskEncrypted(Boolean systemDiskEncrypted) {
            return systemDiskEncrypted(Output.of(systemDiskEncrypted));
        }

        /**
         * @param systemDiskKmsKey The kms key id used to encrypt the system disk. It takes effect when system_disk_encrypted is true.
         * 
         * @return builder
         * 
         */
        public Builder systemDiskKmsKey(@Nullable Output<String> systemDiskKmsKey) {
            $.systemDiskKmsKey = systemDiskKmsKey;
            return this;
        }

        /**
         * @param systemDiskKmsKey The kms key id used to encrypt the system disk. It takes effect when system_disk_encrypted is true.
         * 
         * @return builder
         * 
         */
        public Builder systemDiskKmsKey(String systemDiskKmsKey) {
            return systemDiskKmsKey(Output.of(systemDiskKmsKey));
        }

        /**
         * @param systemDiskPerformanceLevel The performance of system disk, only valid for ESSD disk. You have to specify one of `PL0` `PL1` `PL2` `PL3` fields.
         * 
         * @return builder
         * 
         */
        public Builder systemDiskPerformanceLevel(@Nullable Output<String> systemDiskPerformanceLevel) {
            $.systemDiskPerformanceLevel = systemDiskPerformanceLevel;
            return this;
        }

        /**
         * @param systemDiskPerformanceLevel The performance of system disk, only valid for ESSD disk. You have to specify one of `PL0` `PL1` `PL2` `PL3` fields.
         * 
         * @return builder
         * 
         */
        public Builder systemDiskPerformanceLevel(String systemDiskPerformanceLevel) {
            return systemDiskPerformanceLevel(Output.of(systemDiskPerformanceLevel));
        }

        /**
         * @param systemDiskSize The system disk category of worker node. Its valid value range [40~500] in GB. Default to `120`.
         * 
         * @return builder
         * 
         */
        public Builder systemDiskSize(@Nullable Output<Integer> systemDiskSize) {
            $.systemDiskSize = systemDiskSize;
            return this;
        }

        /**
         * @param systemDiskSize The system disk category of worker node. Its valid value range [40~500] in GB. Default to `120`.
         * 
         * @return builder
         * 
         */
        public Builder systemDiskSize(Integer systemDiskSize) {
            return systemDiskSize(Output.of(systemDiskSize));
        }

        /**
         * @param systemDiskSnapshotPolicyId The system disk snapshot policy id.
         * 
         * @return builder
         * 
         */
        public Builder systemDiskSnapshotPolicyId(@Nullable Output<String> systemDiskSnapshotPolicyId) {
            $.systemDiskSnapshotPolicyId = systemDiskSnapshotPolicyId;
            return this;
        }

        /**
         * @param systemDiskSnapshotPolicyId The system disk snapshot policy id.
         * 
         * @return builder
         * 
         */
        public Builder systemDiskSnapshotPolicyId(String systemDiskSnapshotPolicyId) {
            return systemDiskSnapshotPolicyId(Output.of(systemDiskSnapshotPolicyId));
        }

        /**
         * @param tags A Map of tags to assign to the resource. It will be applied for ECS instances finally. Detailed below.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,Object>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags A Map of tags to assign to the resource. It will be applied for ECS instances finally. Detailed below.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,Object> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param taints A List of Kubernetes taints to assign to the nodes. Detailed below. More information in [Taints and Toleration](https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/). See `taints` below.
         * 
         * @return builder
         * 
         */
        public Builder taints(@Nullable Output<List<NodePoolTaintArgs>> taints) {
            $.taints = taints;
            return this;
        }

        /**
         * @param taints A List of Kubernetes taints to assign to the nodes. Detailed below. More information in [Taints and Toleration](https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/). See `taints` below.
         * 
         * @return builder
         * 
         */
        public Builder taints(List<NodePoolTaintArgs> taints) {
            return taints(Output.of(taints));
        }

        /**
         * @param taints A List of Kubernetes taints to assign to the nodes. Detailed below. More information in [Taints and Toleration](https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/). See `taints` below.
         * 
         * @return builder
         * 
         */
        public Builder taints(NodePoolTaintArgs... taints) {
            return taints(List.of(taints));
        }

        /**
         * @param unschedulable Set the newly added node as unschedulable. If you want to open the scheduling option, you can open it in the node list of the console. If you are using an auto-scaling node pool, the setting will not take effect. Default is `false`.
         * 
         * @return builder
         * 
         */
        public Builder unschedulable(@Nullable Output<Boolean> unschedulable) {
            $.unschedulable = unschedulable;
            return this;
        }

        /**
         * @param unschedulable Set the newly added node as unschedulable. If you want to open the scheduling option, you can open it in the node list of the console. If you are using an auto-scaling node pool, the setting will not take effect. Default is `false`.
         * 
         * @return builder
         * 
         */
        public Builder unschedulable(Boolean unschedulable) {
            return unschedulable(Output.of(unschedulable));
        }

        /**
         * @param userData Windows instances support batch and PowerShell scripts. If your script file is larger than 1 KB, we recommend that you upload the script to Object Storage Service (OSS) and pull it through the internal endpoint of your OSS bucket.
         * 
         * @return builder
         * 
         */
        public Builder userData(@Nullable Output<String> userData) {
            $.userData = userData;
            return this;
        }

        /**
         * @param userData Windows instances support batch and PowerShell scripts. If your script file is larger than 1 KB, we recommend that you upload the script to Object Storage Service (OSS) and pull it through the internal endpoint of your OSS bucket.
         * 
         * @return builder
         * 
         */
        public Builder userData(String userData) {
            return userData(Output.of(userData));
        }

        /**
         * @param vswitchIds The vswitches used by node pool workers.
         * 
         * @return builder
         * 
         */
        public Builder vswitchIds(Output<List<String>> vswitchIds) {
            $.vswitchIds = vswitchIds;
            return this;
        }

        /**
         * @param vswitchIds The vswitches used by node pool workers.
         * 
         * @return builder
         * 
         */
        public Builder vswitchIds(List<String> vswitchIds) {
            return vswitchIds(Output.of(vswitchIds));
        }

        /**
         * @param vswitchIds The vswitches used by node pool workers.
         * 
         * @return builder
         * 
         */
        public Builder vswitchIds(String... vswitchIds) {
            return vswitchIds(List.of(vswitchIds));
        }

        public NodePoolArgs build() {
            $.clusterId = Objects.requireNonNull($.clusterId, "expected parameter 'clusterId' to be non-null");
            $.instanceTypes = Objects.requireNonNull($.instanceTypes, "expected parameter 'instanceTypes' to be non-null");
            $.vswitchIds = Objects.requireNonNull($.vswitchIds, "expected parameter 'vswitchIds' to be non-null");
            return $;
        }
    }

}
