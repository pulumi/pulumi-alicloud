// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.quotas.inputs;

import com.pulumi.alicloud.quotas.inputs.ApplicationInfoDimensionArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ApplicationInfoState extends com.pulumi.resources.ResourceArgs {

    public static final ApplicationInfoState Empty = new ApplicationInfoState();

    @Import(name="approveValue")
    private @Nullable Output<String> approveValue;

    public Optional<Output<String>> approveValue() {
        return Optional.ofNullable(this.approveValue);
    }

    @Import(name="auditMode")
    private @Nullable Output<String> auditMode;

    public Optional<Output<String>> auditMode() {
        return Optional.ofNullable(this.auditMode);
    }

    @Import(name="auditReason")
    private @Nullable Output<String> auditReason;

    public Optional<Output<String>> auditReason() {
        return Optional.ofNullable(this.auditReason);
    }

    @Import(name="createTime")
    private @Nullable Output<String> createTime;

    public Optional<Output<String>> createTime() {
        return Optional.ofNullable(this.createTime);
    }

    @Import(name="desireValue")
    private @Nullable Output<Double> desireValue;

    public Optional<Output<Double>> desireValue() {
        return Optional.ofNullable(this.desireValue);
    }

    @Import(name="dimensions")
    private @Nullable Output<List<ApplicationInfoDimensionArgs>> dimensions;

    public Optional<Output<List<ApplicationInfoDimensionArgs>>> dimensions() {
        return Optional.ofNullable(this.dimensions);
    }

    @Import(name="effectiveTime")
    private @Nullable Output<String> effectiveTime;

    public Optional<Output<String>> effectiveTime() {
        return Optional.ofNullable(this.effectiveTime);
    }

    @Import(name="envLanguage")
    private @Nullable Output<String> envLanguage;

    public Optional<Output<String>> envLanguage() {
        return Optional.ofNullable(this.envLanguage);
    }

    @Import(name="expireTime")
    private @Nullable Output<String> expireTime;

    public Optional<Output<String>> expireTime() {
        return Optional.ofNullable(this.expireTime);
    }

    @Import(name="noticeType")
    private @Nullable Output<Integer> noticeType;

    public Optional<Output<Integer>> noticeType() {
        return Optional.ofNullable(this.noticeType);
    }

    @Import(name="productCode")
    private @Nullable Output<String> productCode;

    public Optional<Output<String>> productCode() {
        return Optional.ofNullable(this.productCode);
    }

    @Import(name="quotaActionCode")
    private @Nullable Output<String> quotaActionCode;

    public Optional<Output<String>> quotaActionCode() {
        return Optional.ofNullable(this.quotaActionCode);
    }

    @Import(name="quotaCategory")
    private @Nullable Output<String> quotaCategory;

    public Optional<Output<String>> quotaCategory() {
        return Optional.ofNullable(this.quotaCategory);
    }

    @Import(name="quotaDescription")
    private @Nullable Output<String> quotaDescription;

    public Optional<Output<String>> quotaDescription() {
        return Optional.ofNullable(this.quotaDescription);
    }

    @Import(name="quotaName")
    private @Nullable Output<String> quotaName;

    public Optional<Output<String>> quotaName() {
        return Optional.ofNullable(this.quotaName);
    }

    @Import(name="quotaUnit")
    private @Nullable Output<String> quotaUnit;

    public Optional<Output<String>> quotaUnit() {
        return Optional.ofNullable(this.quotaUnit);
    }

    @Import(name="reason")
    private @Nullable Output<String> reason;

    public Optional<Output<String>> reason() {
        return Optional.ofNullable(this.reason);
    }

    @Import(name="status")
    private @Nullable Output<String> status;

    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    private ApplicationInfoState() {}

    private ApplicationInfoState(ApplicationInfoState $) {
        this.approveValue = $.approveValue;
        this.auditMode = $.auditMode;
        this.auditReason = $.auditReason;
        this.createTime = $.createTime;
        this.desireValue = $.desireValue;
        this.dimensions = $.dimensions;
        this.effectiveTime = $.effectiveTime;
        this.envLanguage = $.envLanguage;
        this.expireTime = $.expireTime;
        this.noticeType = $.noticeType;
        this.productCode = $.productCode;
        this.quotaActionCode = $.quotaActionCode;
        this.quotaCategory = $.quotaCategory;
        this.quotaDescription = $.quotaDescription;
        this.quotaName = $.quotaName;
        this.quotaUnit = $.quotaUnit;
        this.reason = $.reason;
        this.status = $.status;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ApplicationInfoState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ApplicationInfoState $;

        public Builder() {
            $ = new ApplicationInfoState();
        }

        public Builder(ApplicationInfoState defaults) {
            $ = new ApplicationInfoState(Objects.requireNonNull(defaults));
        }

        public Builder approveValue(@Nullable Output<String> approveValue) {
            $.approveValue = approveValue;
            return this;
        }

        public Builder approveValue(String approveValue) {
            return approveValue(Output.of(approveValue));
        }

        public Builder auditMode(@Nullable Output<String> auditMode) {
            $.auditMode = auditMode;
            return this;
        }

        public Builder auditMode(String auditMode) {
            return auditMode(Output.of(auditMode));
        }

        public Builder auditReason(@Nullable Output<String> auditReason) {
            $.auditReason = auditReason;
            return this;
        }

        public Builder auditReason(String auditReason) {
            return auditReason(Output.of(auditReason));
        }

        public Builder createTime(@Nullable Output<String> createTime) {
            $.createTime = createTime;
            return this;
        }

        public Builder createTime(String createTime) {
            return createTime(Output.of(createTime));
        }

        public Builder desireValue(@Nullable Output<Double> desireValue) {
            $.desireValue = desireValue;
            return this;
        }

        public Builder desireValue(Double desireValue) {
            return desireValue(Output.of(desireValue));
        }

        public Builder dimensions(@Nullable Output<List<ApplicationInfoDimensionArgs>> dimensions) {
            $.dimensions = dimensions;
            return this;
        }

        public Builder dimensions(List<ApplicationInfoDimensionArgs> dimensions) {
            return dimensions(Output.of(dimensions));
        }

        public Builder dimensions(ApplicationInfoDimensionArgs... dimensions) {
            return dimensions(List.of(dimensions));
        }

        public Builder effectiveTime(@Nullable Output<String> effectiveTime) {
            $.effectiveTime = effectiveTime;
            return this;
        }

        public Builder effectiveTime(String effectiveTime) {
            return effectiveTime(Output.of(effectiveTime));
        }

        public Builder envLanguage(@Nullable Output<String> envLanguage) {
            $.envLanguage = envLanguage;
            return this;
        }

        public Builder envLanguage(String envLanguage) {
            return envLanguage(Output.of(envLanguage));
        }

        public Builder expireTime(@Nullable Output<String> expireTime) {
            $.expireTime = expireTime;
            return this;
        }

        public Builder expireTime(String expireTime) {
            return expireTime(Output.of(expireTime));
        }

        public Builder noticeType(@Nullable Output<Integer> noticeType) {
            $.noticeType = noticeType;
            return this;
        }

        public Builder noticeType(Integer noticeType) {
            return noticeType(Output.of(noticeType));
        }

        public Builder productCode(@Nullable Output<String> productCode) {
            $.productCode = productCode;
            return this;
        }

        public Builder productCode(String productCode) {
            return productCode(Output.of(productCode));
        }

        public Builder quotaActionCode(@Nullable Output<String> quotaActionCode) {
            $.quotaActionCode = quotaActionCode;
            return this;
        }

        public Builder quotaActionCode(String quotaActionCode) {
            return quotaActionCode(Output.of(quotaActionCode));
        }

        public Builder quotaCategory(@Nullable Output<String> quotaCategory) {
            $.quotaCategory = quotaCategory;
            return this;
        }

        public Builder quotaCategory(String quotaCategory) {
            return quotaCategory(Output.of(quotaCategory));
        }

        public Builder quotaDescription(@Nullable Output<String> quotaDescription) {
            $.quotaDescription = quotaDescription;
            return this;
        }

        public Builder quotaDescription(String quotaDescription) {
            return quotaDescription(Output.of(quotaDescription));
        }

        public Builder quotaName(@Nullable Output<String> quotaName) {
            $.quotaName = quotaName;
            return this;
        }

        public Builder quotaName(String quotaName) {
            return quotaName(Output.of(quotaName));
        }

        public Builder quotaUnit(@Nullable Output<String> quotaUnit) {
            $.quotaUnit = quotaUnit;
            return this;
        }

        public Builder quotaUnit(String quotaUnit) {
            return quotaUnit(Output.of(quotaUnit));
        }

        public Builder reason(@Nullable Output<String> reason) {
            $.reason = reason;
            return this;
        }

        public Builder reason(String reason) {
            return reason(Output.of(reason));
        }

        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        public Builder status(String status) {
            return status(Output.of(status));
        }

        public ApplicationInfoState build() {
            return $;
        }
    }

}
