// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.ecs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class EcsImagePipelineArgs extends com.pulumi.resources.ResourceArgs {

    public static final EcsImagePipelineArgs Empty = new EcsImagePipelineArgs();

    /**
     * The ID of Alibaba Cloud account to which to share the created image.
     * 
     */
    @Import(name="addAccounts")
    private @Nullable Output<List<String>> addAccounts;

    /**
     * @return The ID of Alibaba Cloud account to which to share the created image.
     * 
     */
    public Optional<Output<List<String>>> addAccounts() {
        return Optional.ofNullable(this.addAccounts);
    }

    /**
     * The source image. When you set `base_image_type` to `IMAGE`, set `base_image` to the ID of a custom image. When you set `base_image_type` to `IMAGE_FAMILY`, set `base_image` to the name of an image family.
     * 
     */
    @Import(name="baseImage", required=true)
    private Output<String> baseImage;

    /**
     * @return The source image. When you set `base_image_type` to `IMAGE`, set `base_image` to the ID of a custom image. When you set `base_image_type` to `IMAGE_FAMILY`, set `base_image` to the name of an image family.
     * 
     */
    public Output<String> baseImage() {
        return this.baseImage;
    }

    /**
     * The type of the source image. Valid values: `IMAGE`, `IMAGE_FAMILY`.
     * - IMAGE: custom image.
     * - IMAGE_FAMILY: image family.
     * 
     */
    @Import(name="baseImageType", required=true)
    private Output<String> baseImageType;

    /**
     * @return The type of the source image. Valid values: `IMAGE`, `IMAGE_FAMILY`.
     * - IMAGE: custom image.
     * - IMAGE_FAMILY: image family.
     * 
     */
    public Output<String> baseImageType() {
        return this.baseImageType;
    }

    /**
     * The content of the image template. The content cannot be greater than 16 KB in size, and can contain up to 127 commands.
     * 
     */
    @Import(name="buildContent")
    private @Nullable Output<String> buildContent;

    /**
     * @return The content of the image template. The content cannot be greater than 16 KB in size, and can contain up to 127 commands.
     * 
     */
    public Optional<Output<String>> buildContent() {
        return Optional.ofNullable(this.buildContent);
    }

    /**
     * Specifies whether to release the intermediate instance if the image cannot be created.
     * 
     */
    @Import(name="deleteInstanceOnFailure")
    private @Nullable Output<Boolean> deleteInstanceOnFailure;

    /**
     * @return Specifies whether to release the intermediate instance if the image cannot be created.
     * 
     */
    public Optional<Output<Boolean>> deleteInstanceOnFailure() {
        return Optional.ofNullable(this.deleteInstanceOnFailure);
    }

    /**
     * The description of the image template. The description must be `2` to `256` characters in length and cannot start with `http://` or `https://`. **Note:** If the intermediate instance cannot be started, the instance is released by default.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The description of the image template. The description must be `2` to `256` characters in length and cannot start with `http://` or `https://`. **Note:** If the intermediate instance cannot be started, the instance is released by default.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The name prefix of the image to be created. The prefix must be `2` to `64` characters in length. It must start with a letter and cannot start with `http://` or `https://`. It can contain letters, digits, colons (:), underscores (_), periods (.),and hyphens (-).
     * 
     */
    @Import(name="imageName")
    private @Nullable Output<String> imageName;

    /**
     * @return The name prefix of the image to be created. The prefix must be `2` to `64` characters in length. It must start with a letter and cannot start with `http://` or `https://`. It can contain letters, digits, colons (:), underscores (_), periods (.),and hyphens (-).
     * 
     */
    public Optional<Output<String>> imageName() {
        return Optional.ofNullable(this.imageName);
    }

    /**
     * The instance type of the instance. You can call the DescribeInstanceTypes operation to query instance types. If you do not specify this parameter, an instance type that provides the fewest vCPUs and memory resources is automatically selected. This configuration is subject to resource availability of instance types. For example, the `ecs.g6.large` instance type is selected by default. If available `ecs.g6.large` resources are insufficient, the `ecs.g6.xlarge` instance type is selected.
     * 
     */
    @Import(name="instanceType")
    private @Nullable Output<String> instanceType;

    /**
     * @return The instance type of the instance. You can call the DescribeInstanceTypes operation to query instance types. If you do not specify this parameter, an instance type that provides the fewest vCPUs and memory resources is automatically selected. This configuration is subject to resource availability of instance types. For example, the `ecs.g6.large` instance type is selected by default. If available `ecs.g6.large` resources are insufficient, the `ecs.g6.xlarge` instance type is selected.
     * 
     */
    public Optional<Output<String>> instanceType() {
        return Optional.ofNullable(this.instanceType);
    }

    /**
     * The size of the outbound public bandwidth for the intermediate instance. Unit: `Mbit/s`. Valid values: `0` to `100`. Default value: `0`.
     * 
     */
    @Import(name="internetMaxBandwidthOut")
    private @Nullable Output<Integer> internetMaxBandwidthOut;

    /**
     * @return The size of the outbound public bandwidth for the intermediate instance. Unit: `Mbit/s`. Valid values: `0` to `100`. Default value: `0`.
     * 
     */
    public Optional<Output<Integer>> internetMaxBandwidthOut() {
        return Optional.ofNullable(this.internetMaxBandwidthOut);
    }

    /**
     * The name of the image template. The name must be `2` to `128` characters in length. It must start with a letter and cannot start with `http://` or `https://`. It can contain letters, digits, colons (:), underscores (_), periods (.),and hyphens (-).
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the image template. The name must be `2` to `128` characters in length. It must start with a letter and cannot start with `http://` or `https://`. It can contain letters, digits, colons (:), underscores (_), periods (.),and hyphens (-).
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The ID of the resource group.
     * 
     */
    @Import(name="resourceGroupId")
    private @Nullable Output<String> resourceGroupId;

    /**
     * @return The ID of the resource group.
     * 
     */
    public Optional<Output<String>> resourceGroupId() {
        return Optional.ofNullable(this.resourceGroupId);
    }

    /**
     * The size of the system disk of the intermediate instance. Unit: GiB. Valid values: `20` to `500`. Default value: `40`.
     * 
     */
    @Import(name="systemDiskSize")
    private @Nullable Output<Integer> systemDiskSize;

    /**
     * @return The size of the system disk of the intermediate instance. Unit: GiB. Valid values: `20` to `500`. Default value: `40`.
     * 
     */
    public Optional<Output<Integer>> systemDiskSize() {
        return Optional.ofNullable(this.systemDiskSize);
    }

    /**
     * A mapping of tags to assign to the resource.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,Object>> tags;

    /**
     * @return A mapping of tags to assign to the resource.
     * 
     */
    public Optional<Output<Map<String,Object>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * The ID of region to which to distribute the created image.
     * 
     */
    @Import(name="toRegionIds")
    private @Nullable Output<List<String>> toRegionIds;

    /**
     * @return The ID of region to which to distribute the created image.
     * 
     */
    public Optional<Output<List<String>>> toRegionIds() {
        return Optional.ofNullable(this.toRegionIds);
    }

    /**
     * The ID of the vSwitch. If you do not specify this parameter, a virtual private cloud (VPC) and a vSwitch are created by default.
     * 
     */
    @Import(name="vswitchId")
    private @Nullable Output<String> vswitchId;

    /**
     * @return The ID of the vSwitch. If you do not specify this parameter, a virtual private cloud (VPC) and a vSwitch are created by default.
     * 
     */
    public Optional<Output<String>> vswitchId() {
        return Optional.ofNullable(this.vswitchId);
    }

    private EcsImagePipelineArgs() {}

    private EcsImagePipelineArgs(EcsImagePipelineArgs $) {
        this.addAccounts = $.addAccounts;
        this.baseImage = $.baseImage;
        this.baseImageType = $.baseImageType;
        this.buildContent = $.buildContent;
        this.deleteInstanceOnFailure = $.deleteInstanceOnFailure;
        this.description = $.description;
        this.imageName = $.imageName;
        this.instanceType = $.instanceType;
        this.internetMaxBandwidthOut = $.internetMaxBandwidthOut;
        this.name = $.name;
        this.resourceGroupId = $.resourceGroupId;
        this.systemDiskSize = $.systemDiskSize;
        this.tags = $.tags;
        this.toRegionIds = $.toRegionIds;
        this.vswitchId = $.vswitchId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(EcsImagePipelineArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private EcsImagePipelineArgs $;

        public Builder() {
            $ = new EcsImagePipelineArgs();
        }

        public Builder(EcsImagePipelineArgs defaults) {
            $ = new EcsImagePipelineArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param addAccounts The ID of Alibaba Cloud account to which to share the created image.
         * 
         * @return builder
         * 
         */
        public Builder addAccounts(@Nullable Output<List<String>> addAccounts) {
            $.addAccounts = addAccounts;
            return this;
        }

        /**
         * @param addAccounts The ID of Alibaba Cloud account to which to share the created image.
         * 
         * @return builder
         * 
         */
        public Builder addAccounts(List<String> addAccounts) {
            return addAccounts(Output.of(addAccounts));
        }

        /**
         * @param addAccounts The ID of Alibaba Cloud account to which to share the created image.
         * 
         * @return builder
         * 
         */
        public Builder addAccounts(String... addAccounts) {
            return addAccounts(List.of(addAccounts));
        }

        /**
         * @param baseImage The source image. When you set `base_image_type` to `IMAGE`, set `base_image` to the ID of a custom image. When you set `base_image_type` to `IMAGE_FAMILY`, set `base_image` to the name of an image family.
         * 
         * @return builder
         * 
         */
        public Builder baseImage(Output<String> baseImage) {
            $.baseImage = baseImage;
            return this;
        }

        /**
         * @param baseImage The source image. When you set `base_image_type` to `IMAGE`, set `base_image` to the ID of a custom image. When you set `base_image_type` to `IMAGE_FAMILY`, set `base_image` to the name of an image family.
         * 
         * @return builder
         * 
         */
        public Builder baseImage(String baseImage) {
            return baseImage(Output.of(baseImage));
        }

        /**
         * @param baseImageType The type of the source image. Valid values: `IMAGE`, `IMAGE_FAMILY`.
         * - IMAGE: custom image.
         * - IMAGE_FAMILY: image family.
         * 
         * @return builder
         * 
         */
        public Builder baseImageType(Output<String> baseImageType) {
            $.baseImageType = baseImageType;
            return this;
        }

        /**
         * @param baseImageType The type of the source image. Valid values: `IMAGE`, `IMAGE_FAMILY`.
         * - IMAGE: custom image.
         * - IMAGE_FAMILY: image family.
         * 
         * @return builder
         * 
         */
        public Builder baseImageType(String baseImageType) {
            return baseImageType(Output.of(baseImageType));
        }

        /**
         * @param buildContent The content of the image template. The content cannot be greater than 16 KB in size, and can contain up to 127 commands.
         * 
         * @return builder
         * 
         */
        public Builder buildContent(@Nullable Output<String> buildContent) {
            $.buildContent = buildContent;
            return this;
        }

        /**
         * @param buildContent The content of the image template. The content cannot be greater than 16 KB in size, and can contain up to 127 commands.
         * 
         * @return builder
         * 
         */
        public Builder buildContent(String buildContent) {
            return buildContent(Output.of(buildContent));
        }

        /**
         * @param deleteInstanceOnFailure Specifies whether to release the intermediate instance if the image cannot be created.
         * 
         * @return builder
         * 
         */
        public Builder deleteInstanceOnFailure(@Nullable Output<Boolean> deleteInstanceOnFailure) {
            $.deleteInstanceOnFailure = deleteInstanceOnFailure;
            return this;
        }

        /**
         * @param deleteInstanceOnFailure Specifies whether to release the intermediate instance if the image cannot be created.
         * 
         * @return builder
         * 
         */
        public Builder deleteInstanceOnFailure(Boolean deleteInstanceOnFailure) {
            return deleteInstanceOnFailure(Output.of(deleteInstanceOnFailure));
        }

        /**
         * @param description The description of the image template. The description must be `2` to `256` characters in length and cannot start with `http://` or `https://`. **Note:** If the intermediate instance cannot be started, the instance is released by default.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The description of the image template. The description must be `2` to `256` characters in length and cannot start with `http://` or `https://`. **Note:** If the intermediate instance cannot be started, the instance is released by default.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param imageName The name prefix of the image to be created. The prefix must be `2` to `64` characters in length. It must start with a letter and cannot start with `http://` or `https://`. It can contain letters, digits, colons (:), underscores (_), periods (.),and hyphens (-).
         * 
         * @return builder
         * 
         */
        public Builder imageName(@Nullable Output<String> imageName) {
            $.imageName = imageName;
            return this;
        }

        /**
         * @param imageName The name prefix of the image to be created. The prefix must be `2` to `64` characters in length. It must start with a letter and cannot start with `http://` or `https://`. It can contain letters, digits, colons (:), underscores (_), periods (.),and hyphens (-).
         * 
         * @return builder
         * 
         */
        public Builder imageName(String imageName) {
            return imageName(Output.of(imageName));
        }

        /**
         * @param instanceType The instance type of the instance. You can call the DescribeInstanceTypes operation to query instance types. If you do not specify this parameter, an instance type that provides the fewest vCPUs and memory resources is automatically selected. This configuration is subject to resource availability of instance types. For example, the `ecs.g6.large` instance type is selected by default. If available `ecs.g6.large` resources are insufficient, the `ecs.g6.xlarge` instance type is selected.
         * 
         * @return builder
         * 
         */
        public Builder instanceType(@Nullable Output<String> instanceType) {
            $.instanceType = instanceType;
            return this;
        }

        /**
         * @param instanceType The instance type of the instance. You can call the DescribeInstanceTypes operation to query instance types. If you do not specify this parameter, an instance type that provides the fewest vCPUs and memory resources is automatically selected. This configuration is subject to resource availability of instance types. For example, the `ecs.g6.large` instance type is selected by default. If available `ecs.g6.large` resources are insufficient, the `ecs.g6.xlarge` instance type is selected.
         * 
         * @return builder
         * 
         */
        public Builder instanceType(String instanceType) {
            return instanceType(Output.of(instanceType));
        }

        /**
         * @param internetMaxBandwidthOut The size of the outbound public bandwidth for the intermediate instance. Unit: `Mbit/s`. Valid values: `0` to `100`. Default value: `0`.
         * 
         * @return builder
         * 
         */
        public Builder internetMaxBandwidthOut(@Nullable Output<Integer> internetMaxBandwidthOut) {
            $.internetMaxBandwidthOut = internetMaxBandwidthOut;
            return this;
        }

        /**
         * @param internetMaxBandwidthOut The size of the outbound public bandwidth for the intermediate instance. Unit: `Mbit/s`. Valid values: `0` to `100`. Default value: `0`.
         * 
         * @return builder
         * 
         */
        public Builder internetMaxBandwidthOut(Integer internetMaxBandwidthOut) {
            return internetMaxBandwidthOut(Output.of(internetMaxBandwidthOut));
        }

        /**
         * @param name The name of the image template. The name must be `2` to `128` characters in length. It must start with a letter and cannot start with `http://` or `https://`. It can contain letters, digits, colons (:), underscores (_), periods (.),and hyphens (-).
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the image template. The name must be `2` to `128` characters in length. It must start with a letter and cannot start with `http://` or `https://`. It can contain letters, digits, colons (:), underscores (_), periods (.),and hyphens (-).
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param resourceGroupId The ID of the resource group.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupId(@Nullable Output<String> resourceGroupId) {
            $.resourceGroupId = resourceGroupId;
            return this;
        }

        /**
         * @param resourceGroupId The ID of the resource group.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupId(String resourceGroupId) {
            return resourceGroupId(Output.of(resourceGroupId));
        }

        /**
         * @param systemDiskSize The size of the system disk of the intermediate instance. Unit: GiB. Valid values: `20` to `500`. Default value: `40`.
         * 
         * @return builder
         * 
         */
        public Builder systemDiskSize(@Nullable Output<Integer> systemDiskSize) {
            $.systemDiskSize = systemDiskSize;
            return this;
        }

        /**
         * @param systemDiskSize The size of the system disk of the intermediate instance. Unit: GiB. Valid values: `20` to `500`. Default value: `40`.
         * 
         * @return builder
         * 
         */
        public Builder systemDiskSize(Integer systemDiskSize) {
            return systemDiskSize(Output.of(systemDiskSize));
        }

        /**
         * @param tags A mapping of tags to assign to the resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,Object>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags A mapping of tags to assign to the resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,Object> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param toRegionIds The ID of region to which to distribute the created image.
         * 
         * @return builder
         * 
         */
        public Builder toRegionIds(@Nullable Output<List<String>> toRegionIds) {
            $.toRegionIds = toRegionIds;
            return this;
        }

        /**
         * @param toRegionIds The ID of region to which to distribute the created image.
         * 
         * @return builder
         * 
         */
        public Builder toRegionIds(List<String> toRegionIds) {
            return toRegionIds(Output.of(toRegionIds));
        }

        /**
         * @param toRegionIds The ID of region to which to distribute the created image.
         * 
         * @return builder
         * 
         */
        public Builder toRegionIds(String... toRegionIds) {
            return toRegionIds(List.of(toRegionIds));
        }

        /**
         * @param vswitchId The ID of the vSwitch. If you do not specify this parameter, a virtual private cloud (VPC) and a vSwitch are created by default.
         * 
         * @return builder
         * 
         */
        public Builder vswitchId(@Nullable Output<String> vswitchId) {
            $.vswitchId = vswitchId;
            return this;
        }

        /**
         * @param vswitchId The ID of the vSwitch. If you do not specify this parameter, a virtual private cloud (VPC) and a vSwitch are created by default.
         * 
         * @return builder
         * 
         */
        public Builder vswitchId(String vswitchId) {
            return vswitchId(Output.of(vswitchId));
        }

        public EcsImagePipelineArgs build() {
            if ($.baseImage == null) {
                throw new MissingRequiredPropertyException("EcsImagePipelineArgs", "baseImage");
            }
            if ($.baseImageType == null) {
                throw new MissingRequiredPropertyException("EcsImagePipelineArgs", "baseImageType");
            }
            return $;
        }
    }

}
