// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.directmail;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class MailAddressArgs extends com.pulumi.resources.ResourceArgs {

    public static final MailAddressArgs Empty = new MailAddressArgs();

    /**
     * The sender address. The email address must be filled in the format of account@domain, and only lowercase letters or numbers can be used.
     * 
     */
    @Import(name="accountName", required=true)
    private Output<String> accountName;

    /**
     * @return The sender address. The email address must be filled in the format of account@domain, and only lowercase letters or numbers can be used.
     * 
     */
    public Output<String> accountName() {
        return this.accountName;
    }

    /**
     * Account password. The password must be length 10-20 string, contains numbers, uppercase letters, lowercase letters at the same time.
     * 
     */
    @Import(name="password")
    private @Nullable Output<String> password;

    /**
     * @return Account password. The password must be length 10-20 string, contains numbers, uppercase letters, lowercase letters at the same time.
     * 
     */
    public Optional<Output<String>> password() {
        return Optional.ofNullable(this.password);
    }

    /**
     * Return address.
     * 
     */
    @Import(name="replyAddress")
    private @Nullable Output<String> replyAddress;

    /**
     * @return Return address.
     * 
     */
    public Optional<Output<String>> replyAddress() {
        return Optional.ofNullable(this.replyAddress);
    }

    /**
     * Account type. Valid values: `batch`, `trigger`.
     * 
     */
    @Import(name="sendtype", required=true)
    private Output<String> sendtype;

    /**
     * @return Account type. Valid values: `batch`, `trigger`.
     * 
     */
    public Output<String> sendtype() {
        return this.sendtype;
    }

    private MailAddressArgs() {}

    private MailAddressArgs(MailAddressArgs $) {
        this.accountName = $.accountName;
        this.password = $.password;
        this.replyAddress = $.replyAddress;
        this.sendtype = $.sendtype;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MailAddressArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MailAddressArgs $;

        public Builder() {
            $ = new MailAddressArgs();
        }

        public Builder(MailAddressArgs defaults) {
            $ = new MailAddressArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accountName The sender address. The email address must be filled in the format of account@domain, and only lowercase letters or numbers can be used.
         * 
         * @return builder
         * 
         */
        public Builder accountName(Output<String> accountName) {
            $.accountName = accountName;
            return this;
        }

        /**
         * @param accountName The sender address. The email address must be filled in the format of account@domain, and only lowercase letters or numbers can be used.
         * 
         * @return builder
         * 
         */
        public Builder accountName(String accountName) {
            return accountName(Output.of(accountName));
        }

        /**
         * @param password Account password. The password must be length 10-20 string, contains numbers, uppercase letters, lowercase letters at the same time.
         * 
         * @return builder
         * 
         */
        public Builder password(@Nullable Output<String> password) {
            $.password = password;
            return this;
        }

        /**
         * @param password Account password. The password must be length 10-20 string, contains numbers, uppercase letters, lowercase letters at the same time.
         * 
         * @return builder
         * 
         */
        public Builder password(String password) {
            return password(Output.of(password));
        }

        /**
         * @param replyAddress Return address.
         * 
         * @return builder
         * 
         */
        public Builder replyAddress(@Nullable Output<String> replyAddress) {
            $.replyAddress = replyAddress;
            return this;
        }

        /**
         * @param replyAddress Return address.
         * 
         * @return builder
         * 
         */
        public Builder replyAddress(String replyAddress) {
            return replyAddress(Output.of(replyAddress));
        }

        /**
         * @param sendtype Account type. Valid values: `batch`, `trigger`.
         * 
         * @return builder
         * 
         */
        public Builder sendtype(Output<String> sendtype) {
            $.sendtype = sendtype;
            return this;
        }

        /**
         * @param sendtype Account type. Valid values: `batch`, `trigger`.
         * 
         * @return builder
         * 
         */
        public Builder sendtype(String sendtype) {
            return sendtype(Output.of(sendtype));
        }

        public MailAddressArgs build() {
            if ($.accountName == null) {
                throw new MissingRequiredPropertyException("MailAddressArgs", "accountName");
            }
            if ($.sendtype == null) {
                throw new MissingRequiredPropertyException("MailAddressArgs", "sendtype");
            }
            return $;
        }
    }

}
