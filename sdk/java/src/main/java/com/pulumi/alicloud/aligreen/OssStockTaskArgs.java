// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.aligreen;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class OssStockTaskArgs extends com.pulumi.resources.ResourceArgs {

    public static final OssStockTaskArgs Empty = new OssStockTaskArgs();

    /**
     * Voice auto freeze configuration. Example:{&#34;type&#34;:&#34;suggestion&#34;,&#34;value&#34;:&#34;block,review&#34;}. The results are frozen according to the suggestion in the speech detection results.
     * 
     */
    @Import(name="audioAntispamFreezeConfig")
    private @Nullable Output<String> audioAntispamFreezeConfig;

    /**
     * @return Voice auto freeze configuration. Example:{&#34;type&#34;:&#34;suggestion&#34;,&#34;value&#34;:&#34;block,review&#34;}. The results are frozen according to the suggestion in the speech detection results.
     * 
     */
    public Optional<Output<String>> audioAntispamFreezeConfig() {
        return Optional.ofNullable(this.audioAntispamFreezeConfig);
    }

    /**
     * Audio detection auto freeze switch. Value: true: automatically freeze, false: not automatically freeze.
     * 
     */
    @Import(name="audioAutoFreezeOpened")
    private @Nullable Output<Boolean> audioAutoFreezeOpened;

    /**
     * @return Audio detection auto freeze switch. Value: true: automatically freeze, false: not automatically freeze.
     * 
     */
    public Optional<Output<Boolean>> audioAutoFreezeOpened() {
        return Optional.ofNullable(this.audioAutoFreezeOpened);
    }

    /**
     * Resource property field representing the maximum size of a single audio. 1~2048MB, the default is 200MB, more than not detected.
     * 
     */
    @Import(name="audioMaxSize")
    private @Nullable Output<Integer> audioMaxSize;

    /**
     * @return Resource property field representing the maximum size of a single audio. 1~2048MB, the default is 200MB, more than not detected.
     * 
     */
    public Optional<Output<Integer>> audioMaxSize() {
        return Optional.ofNullable(this.audioMaxSize);
    }

    /**
     * oss stock scan task detect audio. true: scan audio, false: do not scan audio
     * 
     */
    @Import(name="audioOpened")
    private @Nullable Output<Boolean> audioOpened;

    /**
     * @return oss stock scan task detect audio. true: scan audio, false: do not scan audio
     * 
     */
    public Optional<Output<Boolean>> audioOpened() {
        return Optional.ofNullable(this.audioOpened);
    }

    /**
     * The upper limit of voice scan in the oss stock scan task. The default value is 1000/Bucket.
     * 
     */
    @Import(name="audioScanLimit")
    private @Nullable Output<Integer> audioScanLimit;

    /**
     * @return The upper limit of voice scan in the oss stock scan task. The default value is 1000/Bucket.
     * 
     */
    public Optional<Output<Integer>> audioScanLimit() {
        return Optional.ofNullable(this.audioScanLimit);
    }

    /**
     * The audio detection scenarios included in the oss stock scan task. Set the value to antispam.
     * 
     */
    @Import(name="audioScenes")
    private @Nullable Output<String> audioScenes;

    /**
     * @return The audio detection scenarios included in the oss stock scan task. Set the value to antispam.
     * 
     */
    public Optional<Output<String>> audioScenes() {
        return Optional.ofNullable(this.audioScenes);
    }

    /**
     * Automatic freeze type. Value: acl: modify permissions, copy: Move files
     * 
     */
    @Import(name="autoFreezeType")
    private @Nullable Output<String> autoFreezeType;

    /**
     * @return Automatic freeze type. Value: acl: modify permissions, copy: Move files
     * 
     */
    public Optional<Output<String>> autoFreezeType() {
        return Optional.ofNullable(this.autoFreezeType);
    }

    /**
     * Business scenarios used by the oss stock scan task
     * 
     */
    @Import(name="bizType")
    private @Nullable Output<String> bizType;

    /**
     * @return Business scenarios used by the oss stock scan task
     * 
     */
    public Optional<Output<String>> bizType() {
        return Optional.ofNullable(this.bizType);
    }

    /**
     * The bucket configuration list of the oss stock scan task. Example:[{&#34;Bucket&#34;:&#34;bucket_01&#34;,&#34;Selected&#34;:true,&#34;Prefixes&#34;:[&#34;img/test_&#34;],&#34;Type&#34;:&#34;exclude&#34;}]
     * 
     */
    @Import(name="buckets")
    private @Nullable Output<String> buckets;

    /**
     * @return The bucket configuration list of the oss stock scan task. Example:[{&#34;Bucket&#34;:&#34;bucket_01&#34;,&#34;Selected&#34;:true,&#34;Prefixes&#34;:[&#34;img/test_&#34;],&#34;Type&#34;:&#34;exclude&#34;}]
     * 
     */
    public Optional<Output<String>> buckets() {
        return Optional.ofNullable(this.buckets);
    }

    /**
     * The ID of the primary key of the notification message bound to the oss stock scan task.
     * 
     */
    @Import(name="callbackId")
    private @Nullable Output<Integer> callbackId;

    /**
     * @return The ID of the primary key of the notification message bound to the oss stock scan task.
     * 
     */
    public Optional<Output<Integer>> callbackId() {
        return Optional.ofNullable(this.callbackId);
    }

    /**
     * The end time of the file upload time range indicates the scanning of files uploaded before this time point.
     * 
     */
    @Import(name="endDate")
    private @Nullable Output<String> endDate;

    /**
     * @return The end time of the file upload time range indicates the scanning of files uploaded before this time point.
     * 
     */
    public Optional<Output<String>> endDate() {
        return Optional.ofNullable(this.endDate);
    }

    /**
     * Picture automatically freezes the configuration of ad scenes. Example: {&#34;type&#34;: &#34;suggestion&#34;, &#34;value&#34;: &#34;block,review&#34;}. The result will be frozen according to the suggestion in the picture detection result.
     * 
     */
    @Import(name="imageAdFreezeConfig")
    private @Nullable Output<String> imageAdFreezeConfig;

    /**
     * @return Picture automatically freezes the configuration of ad scenes. Example: {&#34;type&#34;: &#34;suggestion&#34;, &#34;value&#34;: &#34;block,review&#34;}. The result will be frozen according to the suggestion in the picture detection result.
     * 
     */
    public Optional<Output<String>> imageAdFreezeConfig() {
        return Optional.ofNullable(this.imageAdFreezeConfig);
    }

    /**
     * Picture detection auto freeze switch. Value: true: auto freeze, false: not auto freeze.
     * 
     */
    @Import(name="imageAutoFreezeOpened")
    private @Nullable Output<Boolean> imageAutoFreezeOpened;

    /**
     * @return Picture detection auto freeze switch. Value: true: auto freeze, false: not auto freeze.
     * 
     */
    public Optional<Output<Boolean>> imageAutoFreezeOpened() {
        return Optional.ofNullable(this.imageAutoFreezeOpened);
    }

    /**
     * Picture automatic freezing live scene configuration. Example:{&#34;type&#34;:&#34;suggestion&#34;,&#34;value&#34;:&#34;block,review&#34;}. The result will be frozen according to the suggestion in the picture detection result.
     * 
     */
    @Import(name="imageLiveFreezeConfig")
    private @Nullable Output<String> imageLiveFreezeConfig;

    /**
     * @return Picture automatic freezing live scene configuration. Example:{&#34;type&#34;:&#34;suggestion&#34;,&#34;value&#34;:&#34;block,review&#34;}. The result will be frozen according to the suggestion in the picture detection result.
     * 
     */
    public Optional<Output<String>> imageLiveFreezeConfig() {
        return Optional.ofNullable(this.imageLiveFreezeConfig);
    }

    /**
     * oss stock scan task detect images. true: scan images, false: do not scan images
     * 
     */
    @Import(name="imageOpened")
    private @Nullable Output<Boolean> imageOpened;

    /**
     * @return oss stock scan task detect images. true: scan images, false: do not scan images
     * 
     */
    public Optional<Output<Boolean>> imageOpened() {
        return Optional.ofNullable(this.imageOpened);
    }

    /**
     * Picture automatic freezing porn scene configuration. Example: {&#34;type&#34;: &#34;suggestion&#34;, &#34;value&#34;: &#34;block,review&#34;}. The result will be frozen according to the suggestion in the picture detection result.
     * 
     */
    @Import(name="imagePornFreezeConfig")
    private @Nullable Output<String> imagePornFreezeConfig;

    /**
     * @return Picture automatic freezing porn scene configuration. Example: {&#34;type&#34;: &#34;suggestion&#34;, &#34;value&#34;: &#34;block,review&#34;}. The result will be frozen according to the suggestion in the picture detection result.
     * 
     */
    public Optional<Output<String>> imagePornFreezeConfig() {
        return Optional.ofNullable(this.imagePornFreezeConfig);
    }

    /**
     * The upper limit for scanning images in the oss stock scan task. The default value is 10000 images per Bucket.
     * 
     */
    @Import(name="imageScanLimit")
    private @Nullable Output<Integer> imageScanLimit;

    /**
     * @return The upper limit for scanning images in the oss stock scan task. The default value is 10000 images per Bucket.
     * 
     */
    public Optional<Output<Integer>> imageScanLimit() {
        return Optional.ofNullable(this.imageScanLimit);
    }

    /**
     * The image moderation scenario included in the oss stock scan task.Valid values:
     * porn: pornography detection
     * terrorism: terrorist content detection
     * ad: ad violation detection
     * live: undesirable scene detection
     * 
     */
    @Import(name="imageScenes")
    private @Nullable Output<List<String>> imageScenes;

    /**
     * @return The image moderation scenario included in the oss stock scan task.Valid values:
     * porn: pornography detection
     * terrorism: terrorist content detection
     * ad: ad violation detection
     * live: undesirable scene detection
     * 
     */
    public Optional<Output<List<String>>> imageScenes() {
        return Optional.ofNullable(this.imageScenes);
    }

    /**
     * The picture automatically freezes the configuration of terrorism scenes. Example: {&#34;type&#34;: &#34;suggestion&#34;, &#34;value&#34;: &#34;block,review&#34;}. The result will be frozen according to the suggestion in the picture detection result.
     * 
     */
    @Import(name="imageTerrorismFreezeConfig")
    private @Nullable Output<String> imageTerrorismFreezeConfig;

    /**
     * @return The picture automatically freezes the configuration of terrorism scenes. Example: {&#34;type&#34;: &#34;suggestion&#34;, &#34;value&#34;: &#34;block,review&#34;}. The result will be frozen according to the suggestion in the picture detection result.
     * 
     */
    public Optional<Output<String>> imageTerrorismFreezeConfig() {
        return Optional.ofNullable(this.imageTerrorismFreezeConfig);
    }

    /**
     * Whether the oss stock scan task detects images with file names without suffixes. true: Detect pictures with file names without suffixes, false: Do not detect pictures with file names without suffixes
     * 
     */
    @Import(name="scanImageNoFileType")
    private @Nullable Output<Boolean> scanImageNoFileType;

    /**
     * @return Whether the oss stock scan task detects images with file names without suffixes. true: Detect pictures with file names without suffixes, false: Do not detect pictures with file names without suffixes
     * 
     */
    public Optional<Output<Boolean>> scanImageNoFileType() {
        return Optional.ofNullable(this.scanImageNoFileType);
    }

    /**
     * The start time of the file upload time range represents the files uploaded after scanning this time point.
     * 
     */
    @Import(name="startDate")
    private @Nullable Output<String> startDate;

    /**
     * @return The start time of the file upload time range represents the files uploaded after scanning this time point.
     * 
     */
    public Optional<Output<String>> startDate() {
        return Optional.ofNullable(this.startDate);
    }

    /**
     * The video automatically freezes the configuration of ad scenarios. Example:{&#34;type&#34;:&#34;suggestion&#34;,&#34;value&#34;:&#34;block,review&#34;}. The results will be frozen according to the suggestion in the video detection results.
     * 
     */
    @Import(name="videoAdFreezeConfig")
    private @Nullable Output<String> videoAdFreezeConfig;

    /**
     * @return The video automatically freezes the configuration of ad scenarios. Example:{&#34;type&#34;:&#34;suggestion&#34;,&#34;value&#34;:&#34;block,review&#34;}. The results will be frozen according to the suggestion in the video detection results.
     * 
     */
    public Optional<Output<String>> videoAdFreezeConfig() {
        return Optional.ofNullable(this.videoAdFreezeConfig);
    }

    /**
     * Video detection auto freeze switch. Value: true: automatically freeze, false: not automatically freeze.
     * 
     */
    @Import(name="videoAutoFreezeOpened")
    private @Nullable Output<Boolean> videoAutoFreezeOpened;

    /**
     * @return Video detection auto freeze switch. Value: true: automatically freeze, false: not automatically freeze.
     * 
     */
    public Optional<Output<Boolean>> videoAutoFreezeOpened() {
        return Optional.ofNullable(this.videoAutoFreezeOpened);
    }

    /**
     * Resource attribute field representing the framing frequency. 1~60 seconds/frame, the default is 1 second/frame
     * 
     */
    @Import(name="videoFrameInterval")
    private @Nullable Output<Integer> videoFrameInterval;

    /**
     * @return Resource attribute field representing the framing frequency. 1~60 seconds/frame, the default is 1 second/frame
     * 
     */
    public Optional<Output<Integer>> videoFrameInterval() {
        return Optional.ofNullable(this.videoFrameInterval);
    }

    /**
     * Video automatic freeze live scene configuration. Example:{&#34;type&#34;:&#34;suggestion&#34;,&#34;value&#34;:&#34;block,review&#34;}. The results will be frozen according to the suggestion in the video detection results.
     * 
     */
    @Import(name="videoLiveFreezeConfig")
    private @Nullable Output<String> videoLiveFreezeConfig;

    /**
     * @return Video automatic freeze live scene configuration. Example:{&#34;type&#34;:&#34;suggestion&#34;,&#34;value&#34;:&#34;block,review&#34;}. The results will be frozen according to the suggestion in the video detection results.
     * 
     */
    public Optional<Output<String>> videoLiveFreezeConfig() {
        return Optional.ofNullable(this.videoLiveFreezeConfig);
    }

    /**
     * A resource attribute field that represents the upper limit of a single video frame cut. 5 to 20000 frames, the default is 200 frames
     * 
     */
    @Import(name="videoMaxFrames")
    private @Nullable Output<Integer> videoMaxFrames;

    /**
     * @return A resource attribute field that represents the upper limit of a single video frame cut. 5 to 20000 frames, the default is 200 frames
     * 
     */
    public Optional<Output<Integer>> videoMaxFrames() {
        return Optional.ofNullable(this.videoMaxFrames);
    }

    /**
     * Resource property field representing the maximum size of a single video. 1~2048MB, the default is 500MB, more than not detected.
     * 
     */
    @Import(name="videoMaxSize")
    private @Nullable Output<Integer> videoMaxSize;

    /**
     * @return Resource property field representing the maximum size of a single video. 1~2048MB, the default is 500MB, more than not detected.
     * 
     */
    public Optional<Output<Integer>> videoMaxSize() {
        return Optional.ofNullable(this.videoMaxSize);
    }

    /**
     * oss stock scan task detect video. true: scan video, false: do not scan video
     * 
     */
    @Import(name="videoOpened")
    private @Nullable Output<Boolean> videoOpened;

    /**
     * @return oss stock scan task detect video. true: scan video, false: do not scan video
     * 
     */
    public Optional<Output<Boolean>> videoOpened() {
        return Optional.ofNullable(this.videoOpened);
    }

    /**
     * Video automatic freezing porn scene configuration. Example: {&#34;type&#34;: &#34;suggestion&#34;, &#34;value&#34;: &#34;block,review&#34;}. The result will be frozen according to the suggestion in the video detection result.
     * 
     */
    @Import(name="videoPornFreezeConfig")
    private @Nullable Output<String> videoPornFreezeConfig;

    /**
     * @return Video automatic freezing porn scene configuration. Example: {&#34;type&#34;: &#34;suggestion&#34;, &#34;value&#34;: &#34;block,review&#34;}. The result will be frozen according to the suggestion in the video detection result.
     * 
     */
    public Optional<Output<String>> videoPornFreezeConfig() {
        return Optional.ofNullable(this.videoPornFreezeConfig);
    }

    /**
     * The upper limit of video scanning in the oss stock scan task. The default value is 1000/Bucket.
     * 
     */
    @Import(name="videoScanLimit")
    private @Nullable Output<Integer> videoScanLimit;

    /**
     * @return The upper limit of video scanning in the oss stock scan task. The default value is 1000/Bucket.
     * 
     */
    public Optional<Output<Integer>> videoScanLimit() {
        return Optional.ofNullable(this.videoScanLimit);
    }

    /**
     * The video detection scenarios included in the oss stock scan task.
     * porn: pornography detection
     * terrorism: terrorist content detection
     * ad: ad violation detection
     * live: undesirable scene detection
     * antispam: Video voice antispam
     * 
     */
    @Import(name="videoScenes")
    private @Nullable Output<String> videoScenes;

    /**
     * @return The video detection scenarios included in the oss stock scan task.
     * porn: pornography detection
     * terrorism: terrorist content detection
     * ad: ad violation detection
     * live: undesirable scene detection
     * antispam: Video voice antispam
     * 
     */
    public Optional<Output<String>> videoScenes() {
        return Optional.ofNullable(this.videoScenes);
    }

    /**
     * The video automatically freezes the configuration of terrorism scenes. Example:{&#34;type&#34;:&#34;suggestion&#34;,&#34;value&#34;:&#34;block,review&#34;}. The results will be frozen according to the suggestion in the video detection results.
     * 
     */
    @Import(name="videoTerrorismFreezeConfig")
    private @Nullable Output<String> videoTerrorismFreezeConfig;

    /**
     * @return The video automatically freezes the configuration of terrorism scenes. Example:{&#34;type&#34;:&#34;suggestion&#34;,&#34;value&#34;:&#34;block,review&#34;}. The results will be frozen according to the suggestion in the video detection results.
     * 
     */
    public Optional<Output<String>> videoTerrorismFreezeConfig() {
        return Optional.ofNullable(this.videoTerrorismFreezeConfig);
    }

    /**
     * Voice auto freeze configuration in video. Example:{&#34;type&#34;:&#34;suggestion&#34;,&#34;value&#34;:&#34;block,review&#34;}. The results will be frozen according to the suggestion in the video detection results.
     * 
     */
    @Import(name="videoVoiceAntispamFreezeConfig")
    private @Nullable Output<String> videoVoiceAntispamFreezeConfig;

    /**
     * @return Voice auto freeze configuration in video. Example:{&#34;type&#34;:&#34;suggestion&#34;,&#34;value&#34;:&#34;block,review&#34;}. The results will be frozen according to the suggestion in the video detection results.
     * 
     */
    public Optional<Output<String>> videoVoiceAntispamFreezeConfig() {
        return Optional.ofNullable(this.videoVoiceAntispamFreezeConfig);
    }

    private OssStockTaskArgs() {}

    private OssStockTaskArgs(OssStockTaskArgs $) {
        this.audioAntispamFreezeConfig = $.audioAntispamFreezeConfig;
        this.audioAutoFreezeOpened = $.audioAutoFreezeOpened;
        this.audioMaxSize = $.audioMaxSize;
        this.audioOpened = $.audioOpened;
        this.audioScanLimit = $.audioScanLimit;
        this.audioScenes = $.audioScenes;
        this.autoFreezeType = $.autoFreezeType;
        this.bizType = $.bizType;
        this.buckets = $.buckets;
        this.callbackId = $.callbackId;
        this.endDate = $.endDate;
        this.imageAdFreezeConfig = $.imageAdFreezeConfig;
        this.imageAutoFreezeOpened = $.imageAutoFreezeOpened;
        this.imageLiveFreezeConfig = $.imageLiveFreezeConfig;
        this.imageOpened = $.imageOpened;
        this.imagePornFreezeConfig = $.imagePornFreezeConfig;
        this.imageScanLimit = $.imageScanLimit;
        this.imageScenes = $.imageScenes;
        this.imageTerrorismFreezeConfig = $.imageTerrorismFreezeConfig;
        this.scanImageNoFileType = $.scanImageNoFileType;
        this.startDate = $.startDate;
        this.videoAdFreezeConfig = $.videoAdFreezeConfig;
        this.videoAutoFreezeOpened = $.videoAutoFreezeOpened;
        this.videoFrameInterval = $.videoFrameInterval;
        this.videoLiveFreezeConfig = $.videoLiveFreezeConfig;
        this.videoMaxFrames = $.videoMaxFrames;
        this.videoMaxSize = $.videoMaxSize;
        this.videoOpened = $.videoOpened;
        this.videoPornFreezeConfig = $.videoPornFreezeConfig;
        this.videoScanLimit = $.videoScanLimit;
        this.videoScenes = $.videoScenes;
        this.videoTerrorismFreezeConfig = $.videoTerrorismFreezeConfig;
        this.videoVoiceAntispamFreezeConfig = $.videoVoiceAntispamFreezeConfig;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(OssStockTaskArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private OssStockTaskArgs $;

        public Builder() {
            $ = new OssStockTaskArgs();
        }

        public Builder(OssStockTaskArgs defaults) {
            $ = new OssStockTaskArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param audioAntispamFreezeConfig Voice auto freeze configuration. Example:{&#34;type&#34;:&#34;suggestion&#34;,&#34;value&#34;:&#34;block,review&#34;}. The results are frozen according to the suggestion in the speech detection results.
         * 
         * @return builder
         * 
         */
        public Builder audioAntispamFreezeConfig(@Nullable Output<String> audioAntispamFreezeConfig) {
            $.audioAntispamFreezeConfig = audioAntispamFreezeConfig;
            return this;
        }

        /**
         * @param audioAntispamFreezeConfig Voice auto freeze configuration. Example:{&#34;type&#34;:&#34;suggestion&#34;,&#34;value&#34;:&#34;block,review&#34;}. The results are frozen according to the suggestion in the speech detection results.
         * 
         * @return builder
         * 
         */
        public Builder audioAntispamFreezeConfig(String audioAntispamFreezeConfig) {
            return audioAntispamFreezeConfig(Output.of(audioAntispamFreezeConfig));
        }

        /**
         * @param audioAutoFreezeOpened Audio detection auto freeze switch. Value: true: automatically freeze, false: not automatically freeze.
         * 
         * @return builder
         * 
         */
        public Builder audioAutoFreezeOpened(@Nullable Output<Boolean> audioAutoFreezeOpened) {
            $.audioAutoFreezeOpened = audioAutoFreezeOpened;
            return this;
        }

        /**
         * @param audioAutoFreezeOpened Audio detection auto freeze switch. Value: true: automatically freeze, false: not automatically freeze.
         * 
         * @return builder
         * 
         */
        public Builder audioAutoFreezeOpened(Boolean audioAutoFreezeOpened) {
            return audioAutoFreezeOpened(Output.of(audioAutoFreezeOpened));
        }

        /**
         * @param audioMaxSize Resource property field representing the maximum size of a single audio. 1~2048MB, the default is 200MB, more than not detected.
         * 
         * @return builder
         * 
         */
        public Builder audioMaxSize(@Nullable Output<Integer> audioMaxSize) {
            $.audioMaxSize = audioMaxSize;
            return this;
        }

        /**
         * @param audioMaxSize Resource property field representing the maximum size of a single audio. 1~2048MB, the default is 200MB, more than not detected.
         * 
         * @return builder
         * 
         */
        public Builder audioMaxSize(Integer audioMaxSize) {
            return audioMaxSize(Output.of(audioMaxSize));
        }

        /**
         * @param audioOpened oss stock scan task detect audio. true: scan audio, false: do not scan audio
         * 
         * @return builder
         * 
         */
        public Builder audioOpened(@Nullable Output<Boolean> audioOpened) {
            $.audioOpened = audioOpened;
            return this;
        }

        /**
         * @param audioOpened oss stock scan task detect audio. true: scan audio, false: do not scan audio
         * 
         * @return builder
         * 
         */
        public Builder audioOpened(Boolean audioOpened) {
            return audioOpened(Output.of(audioOpened));
        }

        /**
         * @param audioScanLimit The upper limit of voice scan in the oss stock scan task. The default value is 1000/Bucket.
         * 
         * @return builder
         * 
         */
        public Builder audioScanLimit(@Nullable Output<Integer> audioScanLimit) {
            $.audioScanLimit = audioScanLimit;
            return this;
        }

        /**
         * @param audioScanLimit The upper limit of voice scan in the oss stock scan task. The default value is 1000/Bucket.
         * 
         * @return builder
         * 
         */
        public Builder audioScanLimit(Integer audioScanLimit) {
            return audioScanLimit(Output.of(audioScanLimit));
        }

        /**
         * @param audioScenes The audio detection scenarios included in the oss stock scan task. Set the value to antispam.
         * 
         * @return builder
         * 
         */
        public Builder audioScenes(@Nullable Output<String> audioScenes) {
            $.audioScenes = audioScenes;
            return this;
        }

        /**
         * @param audioScenes The audio detection scenarios included in the oss stock scan task. Set the value to antispam.
         * 
         * @return builder
         * 
         */
        public Builder audioScenes(String audioScenes) {
            return audioScenes(Output.of(audioScenes));
        }

        /**
         * @param autoFreezeType Automatic freeze type. Value: acl: modify permissions, copy: Move files
         * 
         * @return builder
         * 
         */
        public Builder autoFreezeType(@Nullable Output<String> autoFreezeType) {
            $.autoFreezeType = autoFreezeType;
            return this;
        }

        /**
         * @param autoFreezeType Automatic freeze type. Value: acl: modify permissions, copy: Move files
         * 
         * @return builder
         * 
         */
        public Builder autoFreezeType(String autoFreezeType) {
            return autoFreezeType(Output.of(autoFreezeType));
        }

        /**
         * @param bizType Business scenarios used by the oss stock scan task
         * 
         * @return builder
         * 
         */
        public Builder bizType(@Nullable Output<String> bizType) {
            $.bizType = bizType;
            return this;
        }

        /**
         * @param bizType Business scenarios used by the oss stock scan task
         * 
         * @return builder
         * 
         */
        public Builder bizType(String bizType) {
            return bizType(Output.of(bizType));
        }

        /**
         * @param buckets The bucket configuration list of the oss stock scan task. Example:[{&#34;Bucket&#34;:&#34;bucket_01&#34;,&#34;Selected&#34;:true,&#34;Prefixes&#34;:[&#34;img/test_&#34;],&#34;Type&#34;:&#34;exclude&#34;}]
         * 
         * @return builder
         * 
         */
        public Builder buckets(@Nullable Output<String> buckets) {
            $.buckets = buckets;
            return this;
        }

        /**
         * @param buckets The bucket configuration list of the oss stock scan task. Example:[{&#34;Bucket&#34;:&#34;bucket_01&#34;,&#34;Selected&#34;:true,&#34;Prefixes&#34;:[&#34;img/test_&#34;],&#34;Type&#34;:&#34;exclude&#34;}]
         * 
         * @return builder
         * 
         */
        public Builder buckets(String buckets) {
            return buckets(Output.of(buckets));
        }

        /**
         * @param callbackId The ID of the primary key of the notification message bound to the oss stock scan task.
         * 
         * @return builder
         * 
         */
        public Builder callbackId(@Nullable Output<Integer> callbackId) {
            $.callbackId = callbackId;
            return this;
        }

        /**
         * @param callbackId The ID of the primary key of the notification message bound to the oss stock scan task.
         * 
         * @return builder
         * 
         */
        public Builder callbackId(Integer callbackId) {
            return callbackId(Output.of(callbackId));
        }

        /**
         * @param endDate The end time of the file upload time range indicates the scanning of files uploaded before this time point.
         * 
         * @return builder
         * 
         */
        public Builder endDate(@Nullable Output<String> endDate) {
            $.endDate = endDate;
            return this;
        }

        /**
         * @param endDate The end time of the file upload time range indicates the scanning of files uploaded before this time point.
         * 
         * @return builder
         * 
         */
        public Builder endDate(String endDate) {
            return endDate(Output.of(endDate));
        }

        /**
         * @param imageAdFreezeConfig Picture automatically freezes the configuration of ad scenes. Example: {&#34;type&#34;: &#34;suggestion&#34;, &#34;value&#34;: &#34;block,review&#34;}. The result will be frozen according to the suggestion in the picture detection result.
         * 
         * @return builder
         * 
         */
        public Builder imageAdFreezeConfig(@Nullable Output<String> imageAdFreezeConfig) {
            $.imageAdFreezeConfig = imageAdFreezeConfig;
            return this;
        }

        /**
         * @param imageAdFreezeConfig Picture automatically freezes the configuration of ad scenes. Example: {&#34;type&#34;: &#34;suggestion&#34;, &#34;value&#34;: &#34;block,review&#34;}. The result will be frozen according to the suggestion in the picture detection result.
         * 
         * @return builder
         * 
         */
        public Builder imageAdFreezeConfig(String imageAdFreezeConfig) {
            return imageAdFreezeConfig(Output.of(imageAdFreezeConfig));
        }

        /**
         * @param imageAutoFreezeOpened Picture detection auto freeze switch. Value: true: auto freeze, false: not auto freeze.
         * 
         * @return builder
         * 
         */
        public Builder imageAutoFreezeOpened(@Nullable Output<Boolean> imageAutoFreezeOpened) {
            $.imageAutoFreezeOpened = imageAutoFreezeOpened;
            return this;
        }

        /**
         * @param imageAutoFreezeOpened Picture detection auto freeze switch. Value: true: auto freeze, false: not auto freeze.
         * 
         * @return builder
         * 
         */
        public Builder imageAutoFreezeOpened(Boolean imageAutoFreezeOpened) {
            return imageAutoFreezeOpened(Output.of(imageAutoFreezeOpened));
        }

        /**
         * @param imageLiveFreezeConfig Picture automatic freezing live scene configuration. Example:{&#34;type&#34;:&#34;suggestion&#34;,&#34;value&#34;:&#34;block,review&#34;}. The result will be frozen according to the suggestion in the picture detection result.
         * 
         * @return builder
         * 
         */
        public Builder imageLiveFreezeConfig(@Nullable Output<String> imageLiveFreezeConfig) {
            $.imageLiveFreezeConfig = imageLiveFreezeConfig;
            return this;
        }

        /**
         * @param imageLiveFreezeConfig Picture automatic freezing live scene configuration. Example:{&#34;type&#34;:&#34;suggestion&#34;,&#34;value&#34;:&#34;block,review&#34;}. The result will be frozen according to the suggestion in the picture detection result.
         * 
         * @return builder
         * 
         */
        public Builder imageLiveFreezeConfig(String imageLiveFreezeConfig) {
            return imageLiveFreezeConfig(Output.of(imageLiveFreezeConfig));
        }

        /**
         * @param imageOpened oss stock scan task detect images. true: scan images, false: do not scan images
         * 
         * @return builder
         * 
         */
        public Builder imageOpened(@Nullable Output<Boolean> imageOpened) {
            $.imageOpened = imageOpened;
            return this;
        }

        /**
         * @param imageOpened oss stock scan task detect images. true: scan images, false: do not scan images
         * 
         * @return builder
         * 
         */
        public Builder imageOpened(Boolean imageOpened) {
            return imageOpened(Output.of(imageOpened));
        }

        /**
         * @param imagePornFreezeConfig Picture automatic freezing porn scene configuration. Example: {&#34;type&#34;: &#34;suggestion&#34;, &#34;value&#34;: &#34;block,review&#34;}. The result will be frozen according to the suggestion in the picture detection result.
         * 
         * @return builder
         * 
         */
        public Builder imagePornFreezeConfig(@Nullable Output<String> imagePornFreezeConfig) {
            $.imagePornFreezeConfig = imagePornFreezeConfig;
            return this;
        }

        /**
         * @param imagePornFreezeConfig Picture automatic freezing porn scene configuration. Example: {&#34;type&#34;: &#34;suggestion&#34;, &#34;value&#34;: &#34;block,review&#34;}. The result will be frozen according to the suggestion in the picture detection result.
         * 
         * @return builder
         * 
         */
        public Builder imagePornFreezeConfig(String imagePornFreezeConfig) {
            return imagePornFreezeConfig(Output.of(imagePornFreezeConfig));
        }

        /**
         * @param imageScanLimit The upper limit for scanning images in the oss stock scan task. The default value is 10000 images per Bucket.
         * 
         * @return builder
         * 
         */
        public Builder imageScanLimit(@Nullable Output<Integer> imageScanLimit) {
            $.imageScanLimit = imageScanLimit;
            return this;
        }

        /**
         * @param imageScanLimit The upper limit for scanning images in the oss stock scan task. The default value is 10000 images per Bucket.
         * 
         * @return builder
         * 
         */
        public Builder imageScanLimit(Integer imageScanLimit) {
            return imageScanLimit(Output.of(imageScanLimit));
        }

        /**
         * @param imageScenes The image moderation scenario included in the oss stock scan task.Valid values:
         * porn: pornography detection
         * terrorism: terrorist content detection
         * ad: ad violation detection
         * live: undesirable scene detection
         * 
         * @return builder
         * 
         */
        public Builder imageScenes(@Nullable Output<List<String>> imageScenes) {
            $.imageScenes = imageScenes;
            return this;
        }

        /**
         * @param imageScenes The image moderation scenario included in the oss stock scan task.Valid values:
         * porn: pornography detection
         * terrorism: terrorist content detection
         * ad: ad violation detection
         * live: undesirable scene detection
         * 
         * @return builder
         * 
         */
        public Builder imageScenes(List<String> imageScenes) {
            return imageScenes(Output.of(imageScenes));
        }

        /**
         * @param imageScenes The image moderation scenario included in the oss stock scan task.Valid values:
         * porn: pornography detection
         * terrorism: terrorist content detection
         * ad: ad violation detection
         * live: undesirable scene detection
         * 
         * @return builder
         * 
         */
        public Builder imageScenes(String... imageScenes) {
            return imageScenes(List.of(imageScenes));
        }

        /**
         * @param imageTerrorismFreezeConfig The picture automatically freezes the configuration of terrorism scenes. Example: {&#34;type&#34;: &#34;suggestion&#34;, &#34;value&#34;: &#34;block,review&#34;}. The result will be frozen according to the suggestion in the picture detection result.
         * 
         * @return builder
         * 
         */
        public Builder imageTerrorismFreezeConfig(@Nullable Output<String> imageTerrorismFreezeConfig) {
            $.imageTerrorismFreezeConfig = imageTerrorismFreezeConfig;
            return this;
        }

        /**
         * @param imageTerrorismFreezeConfig The picture automatically freezes the configuration of terrorism scenes. Example: {&#34;type&#34;: &#34;suggestion&#34;, &#34;value&#34;: &#34;block,review&#34;}. The result will be frozen according to the suggestion in the picture detection result.
         * 
         * @return builder
         * 
         */
        public Builder imageTerrorismFreezeConfig(String imageTerrorismFreezeConfig) {
            return imageTerrorismFreezeConfig(Output.of(imageTerrorismFreezeConfig));
        }

        /**
         * @param scanImageNoFileType Whether the oss stock scan task detects images with file names without suffixes. true: Detect pictures with file names without suffixes, false: Do not detect pictures with file names without suffixes
         * 
         * @return builder
         * 
         */
        public Builder scanImageNoFileType(@Nullable Output<Boolean> scanImageNoFileType) {
            $.scanImageNoFileType = scanImageNoFileType;
            return this;
        }

        /**
         * @param scanImageNoFileType Whether the oss stock scan task detects images with file names without suffixes. true: Detect pictures with file names without suffixes, false: Do not detect pictures with file names without suffixes
         * 
         * @return builder
         * 
         */
        public Builder scanImageNoFileType(Boolean scanImageNoFileType) {
            return scanImageNoFileType(Output.of(scanImageNoFileType));
        }

        /**
         * @param startDate The start time of the file upload time range represents the files uploaded after scanning this time point.
         * 
         * @return builder
         * 
         */
        public Builder startDate(@Nullable Output<String> startDate) {
            $.startDate = startDate;
            return this;
        }

        /**
         * @param startDate The start time of the file upload time range represents the files uploaded after scanning this time point.
         * 
         * @return builder
         * 
         */
        public Builder startDate(String startDate) {
            return startDate(Output.of(startDate));
        }

        /**
         * @param videoAdFreezeConfig The video automatically freezes the configuration of ad scenarios. Example:{&#34;type&#34;:&#34;suggestion&#34;,&#34;value&#34;:&#34;block,review&#34;}. The results will be frozen according to the suggestion in the video detection results.
         * 
         * @return builder
         * 
         */
        public Builder videoAdFreezeConfig(@Nullable Output<String> videoAdFreezeConfig) {
            $.videoAdFreezeConfig = videoAdFreezeConfig;
            return this;
        }

        /**
         * @param videoAdFreezeConfig The video automatically freezes the configuration of ad scenarios. Example:{&#34;type&#34;:&#34;suggestion&#34;,&#34;value&#34;:&#34;block,review&#34;}. The results will be frozen according to the suggestion in the video detection results.
         * 
         * @return builder
         * 
         */
        public Builder videoAdFreezeConfig(String videoAdFreezeConfig) {
            return videoAdFreezeConfig(Output.of(videoAdFreezeConfig));
        }

        /**
         * @param videoAutoFreezeOpened Video detection auto freeze switch. Value: true: automatically freeze, false: not automatically freeze.
         * 
         * @return builder
         * 
         */
        public Builder videoAutoFreezeOpened(@Nullable Output<Boolean> videoAutoFreezeOpened) {
            $.videoAutoFreezeOpened = videoAutoFreezeOpened;
            return this;
        }

        /**
         * @param videoAutoFreezeOpened Video detection auto freeze switch. Value: true: automatically freeze, false: not automatically freeze.
         * 
         * @return builder
         * 
         */
        public Builder videoAutoFreezeOpened(Boolean videoAutoFreezeOpened) {
            return videoAutoFreezeOpened(Output.of(videoAutoFreezeOpened));
        }

        /**
         * @param videoFrameInterval Resource attribute field representing the framing frequency. 1~60 seconds/frame, the default is 1 second/frame
         * 
         * @return builder
         * 
         */
        public Builder videoFrameInterval(@Nullable Output<Integer> videoFrameInterval) {
            $.videoFrameInterval = videoFrameInterval;
            return this;
        }

        /**
         * @param videoFrameInterval Resource attribute field representing the framing frequency. 1~60 seconds/frame, the default is 1 second/frame
         * 
         * @return builder
         * 
         */
        public Builder videoFrameInterval(Integer videoFrameInterval) {
            return videoFrameInterval(Output.of(videoFrameInterval));
        }

        /**
         * @param videoLiveFreezeConfig Video automatic freeze live scene configuration. Example:{&#34;type&#34;:&#34;suggestion&#34;,&#34;value&#34;:&#34;block,review&#34;}. The results will be frozen according to the suggestion in the video detection results.
         * 
         * @return builder
         * 
         */
        public Builder videoLiveFreezeConfig(@Nullable Output<String> videoLiveFreezeConfig) {
            $.videoLiveFreezeConfig = videoLiveFreezeConfig;
            return this;
        }

        /**
         * @param videoLiveFreezeConfig Video automatic freeze live scene configuration. Example:{&#34;type&#34;:&#34;suggestion&#34;,&#34;value&#34;:&#34;block,review&#34;}. The results will be frozen according to the suggestion in the video detection results.
         * 
         * @return builder
         * 
         */
        public Builder videoLiveFreezeConfig(String videoLiveFreezeConfig) {
            return videoLiveFreezeConfig(Output.of(videoLiveFreezeConfig));
        }

        /**
         * @param videoMaxFrames A resource attribute field that represents the upper limit of a single video frame cut. 5 to 20000 frames, the default is 200 frames
         * 
         * @return builder
         * 
         */
        public Builder videoMaxFrames(@Nullable Output<Integer> videoMaxFrames) {
            $.videoMaxFrames = videoMaxFrames;
            return this;
        }

        /**
         * @param videoMaxFrames A resource attribute field that represents the upper limit of a single video frame cut. 5 to 20000 frames, the default is 200 frames
         * 
         * @return builder
         * 
         */
        public Builder videoMaxFrames(Integer videoMaxFrames) {
            return videoMaxFrames(Output.of(videoMaxFrames));
        }

        /**
         * @param videoMaxSize Resource property field representing the maximum size of a single video. 1~2048MB, the default is 500MB, more than not detected.
         * 
         * @return builder
         * 
         */
        public Builder videoMaxSize(@Nullable Output<Integer> videoMaxSize) {
            $.videoMaxSize = videoMaxSize;
            return this;
        }

        /**
         * @param videoMaxSize Resource property field representing the maximum size of a single video. 1~2048MB, the default is 500MB, more than not detected.
         * 
         * @return builder
         * 
         */
        public Builder videoMaxSize(Integer videoMaxSize) {
            return videoMaxSize(Output.of(videoMaxSize));
        }

        /**
         * @param videoOpened oss stock scan task detect video. true: scan video, false: do not scan video
         * 
         * @return builder
         * 
         */
        public Builder videoOpened(@Nullable Output<Boolean> videoOpened) {
            $.videoOpened = videoOpened;
            return this;
        }

        /**
         * @param videoOpened oss stock scan task detect video. true: scan video, false: do not scan video
         * 
         * @return builder
         * 
         */
        public Builder videoOpened(Boolean videoOpened) {
            return videoOpened(Output.of(videoOpened));
        }

        /**
         * @param videoPornFreezeConfig Video automatic freezing porn scene configuration. Example: {&#34;type&#34;: &#34;suggestion&#34;, &#34;value&#34;: &#34;block,review&#34;}. The result will be frozen according to the suggestion in the video detection result.
         * 
         * @return builder
         * 
         */
        public Builder videoPornFreezeConfig(@Nullable Output<String> videoPornFreezeConfig) {
            $.videoPornFreezeConfig = videoPornFreezeConfig;
            return this;
        }

        /**
         * @param videoPornFreezeConfig Video automatic freezing porn scene configuration. Example: {&#34;type&#34;: &#34;suggestion&#34;, &#34;value&#34;: &#34;block,review&#34;}. The result will be frozen according to the suggestion in the video detection result.
         * 
         * @return builder
         * 
         */
        public Builder videoPornFreezeConfig(String videoPornFreezeConfig) {
            return videoPornFreezeConfig(Output.of(videoPornFreezeConfig));
        }

        /**
         * @param videoScanLimit The upper limit of video scanning in the oss stock scan task. The default value is 1000/Bucket.
         * 
         * @return builder
         * 
         */
        public Builder videoScanLimit(@Nullable Output<Integer> videoScanLimit) {
            $.videoScanLimit = videoScanLimit;
            return this;
        }

        /**
         * @param videoScanLimit The upper limit of video scanning in the oss stock scan task. The default value is 1000/Bucket.
         * 
         * @return builder
         * 
         */
        public Builder videoScanLimit(Integer videoScanLimit) {
            return videoScanLimit(Output.of(videoScanLimit));
        }

        /**
         * @param videoScenes The video detection scenarios included in the oss stock scan task.
         * porn: pornography detection
         * terrorism: terrorist content detection
         * ad: ad violation detection
         * live: undesirable scene detection
         * antispam: Video voice antispam
         * 
         * @return builder
         * 
         */
        public Builder videoScenes(@Nullable Output<String> videoScenes) {
            $.videoScenes = videoScenes;
            return this;
        }

        /**
         * @param videoScenes The video detection scenarios included in the oss stock scan task.
         * porn: pornography detection
         * terrorism: terrorist content detection
         * ad: ad violation detection
         * live: undesirable scene detection
         * antispam: Video voice antispam
         * 
         * @return builder
         * 
         */
        public Builder videoScenes(String videoScenes) {
            return videoScenes(Output.of(videoScenes));
        }

        /**
         * @param videoTerrorismFreezeConfig The video automatically freezes the configuration of terrorism scenes. Example:{&#34;type&#34;:&#34;suggestion&#34;,&#34;value&#34;:&#34;block,review&#34;}. The results will be frozen according to the suggestion in the video detection results.
         * 
         * @return builder
         * 
         */
        public Builder videoTerrorismFreezeConfig(@Nullable Output<String> videoTerrorismFreezeConfig) {
            $.videoTerrorismFreezeConfig = videoTerrorismFreezeConfig;
            return this;
        }

        /**
         * @param videoTerrorismFreezeConfig The video automatically freezes the configuration of terrorism scenes. Example:{&#34;type&#34;:&#34;suggestion&#34;,&#34;value&#34;:&#34;block,review&#34;}. The results will be frozen according to the suggestion in the video detection results.
         * 
         * @return builder
         * 
         */
        public Builder videoTerrorismFreezeConfig(String videoTerrorismFreezeConfig) {
            return videoTerrorismFreezeConfig(Output.of(videoTerrorismFreezeConfig));
        }

        /**
         * @param videoVoiceAntispamFreezeConfig Voice auto freeze configuration in video. Example:{&#34;type&#34;:&#34;suggestion&#34;,&#34;value&#34;:&#34;block,review&#34;}. The results will be frozen according to the suggestion in the video detection results.
         * 
         * @return builder
         * 
         */
        public Builder videoVoiceAntispamFreezeConfig(@Nullable Output<String> videoVoiceAntispamFreezeConfig) {
            $.videoVoiceAntispamFreezeConfig = videoVoiceAntispamFreezeConfig;
            return this;
        }

        /**
         * @param videoVoiceAntispamFreezeConfig Voice auto freeze configuration in video. Example:{&#34;type&#34;:&#34;suggestion&#34;,&#34;value&#34;:&#34;block,review&#34;}. The results will be frozen according to the suggestion in the video detection results.
         * 
         * @return builder
         * 
         */
        public Builder videoVoiceAntispamFreezeConfig(String videoVoiceAntispamFreezeConfig) {
            return videoVoiceAntispamFreezeConfig(Output.of(videoVoiceAntispamFreezeConfig));
        }

        public OssStockTaskArgs build() {
            return $;
        }
    }

}
