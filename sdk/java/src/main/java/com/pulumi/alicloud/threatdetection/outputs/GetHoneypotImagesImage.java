// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.threatdetection.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetHoneypotImagesImage {
    /**
     * @return The name of the honeypot image display.
     * 
     */
    private String honeypotImageDisplayName;
    /**
     * @return The image ID of the honeypot.
     * 
     */
    private String honeypotImageId;
    /**
     * @return Honeypot mirror name.
     * 
     */
    private String honeypotImageName;
    /**
     * @return Honeypot mirror type.
     * 
     */
    private String honeypotImageType;
    /**
     * @return Honeypot Mirror version.
     * 
     */
    private String honeypotImageVersion;
    /**
     * @return The image ID of the honeypot.The value is the same as `honeypot_image_id`.
     * 
     */
    private String id;
    /**
     * @return Ports supported by honeypots. In JSON format. Contains the following fields:-**log_type**: log type-**proto**: Support Protocol-**description**: description-**ports**: supports Port collection-**port_str**: supports port strings-**type**: type
     * 
     */
    private String multiports;
    /**
     * @return Honeypot-supported protocols.
     * 
     */
    private String proto;
    /**
     * @return Honeypot service port.
     * 
     */
    private String servicePort;
    /**
     * @return Honeypot configuration parameter template.
     * 
     */
    private String template;

    private GetHoneypotImagesImage() {}
    /**
     * @return The name of the honeypot image display.
     * 
     */
    public String honeypotImageDisplayName() {
        return this.honeypotImageDisplayName;
    }
    /**
     * @return The image ID of the honeypot.
     * 
     */
    public String honeypotImageId() {
        return this.honeypotImageId;
    }
    /**
     * @return Honeypot mirror name.
     * 
     */
    public String honeypotImageName() {
        return this.honeypotImageName;
    }
    /**
     * @return Honeypot mirror type.
     * 
     */
    public String honeypotImageType() {
        return this.honeypotImageType;
    }
    /**
     * @return Honeypot Mirror version.
     * 
     */
    public String honeypotImageVersion() {
        return this.honeypotImageVersion;
    }
    /**
     * @return The image ID of the honeypot.The value is the same as `honeypot_image_id`.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Ports supported by honeypots. In JSON format. Contains the following fields:-**log_type**: log type-**proto**: Support Protocol-**description**: description-**ports**: supports Port collection-**port_str**: supports port strings-**type**: type
     * 
     */
    public String multiports() {
        return this.multiports;
    }
    /**
     * @return Honeypot-supported protocols.
     * 
     */
    public String proto() {
        return this.proto;
    }
    /**
     * @return Honeypot service port.
     * 
     */
    public String servicePort() {
        return this.servicePort;
    }
    /**
     * @return Honeypot configuration parameter template.
     * 
     */
    public String template() {
        return this.template;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetHoneypotImagesImage defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String honeypotImageDisplayName;
        private String honeypotImageId;
        private String honeypotImageName;
        private String honeypotImageType;
        private String honeypotImageVersion;
        private String id;
        private String multiports;
        private String proto;
        private String servicePort;
        private String template;
        public Builder() {}
        public Builder(GetHoneypotImagesImage defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.honeypotImageDisplayName = defaults.honeypotImageDisplayName;
    	      this.honeypotImageId = defaults.honeypotImageId;
    	      this.honeypotImageName = defaults.honeypotImageName;
    	      this.honeypotImageType = defaults.honeypotImageType;
    	      this.honeypotImageVersion = defaults.honeypotImageVersion;
    	      this.id = defaults.id;
    	      this.multiports = defaults.multiports;
    	      this.proto = defaults.proto;
    	      this.servicePort = defaults.servicePort;
    	      this.template = defaults.template;
        }

        @CustomType.Setter
        public Builder honeypotImageDisplayName(String honeypotImageDisplayName) {
            if (honeypotImageDisplayName == null) {
              throw new MissingRequiredPropertyException("GetHoneypotImagesImage", "honeypotImageDisplayName");
            }
            this.honeypotImageDisplayName = honeypotImageDisplayName;
            return this;
        }
        @CustomType.Setter
        public Builder honeypotImageId(String honeypotImageId) {
            if (honeypotImageId == null) {
              throw new MissingRequiredPropertyException("GetHoneypotImagesImage", "honeypotImageId");
            }
            this.honeypotImageId = honeypotImageId;
            return this;
        }
        @CustomType.Setter
        public Builder honeypotImageName(String honeypotImageName) {
            if (honeypotImageName == null) {
              throw new MissingRequiredPropertyException("GetHoneypotImagesImage", "honeypotImageName");
            }
            this.honeypotImageName = honeypotImageName;
            return this;
        }
        @CustomType.Setter
        public Builder honeypotImageType(String honeypotImageType) {
            if (honeypotImageType == null) {
              throw new MissingRequiredPropertyException("GetHoneypotImagesImage", "honeypotImageType");
            }
            this.honeypotImageType = honeypotImageType;
            return this;
        }
        @CustomType.Setter
        public Builder honeypotImageVersion(String honeypotImageVersion) {
            if (honeypotImageVersion == null) {
              throw new MissingRequiredPropertyException("GetHoneypotImagesImage", "honeypotImageVersion");
            }
            this.honeypotImageVersion = honeypotImageVersion;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetHoneypotImagesImage", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder multiports(String multiports) {
            if (multiports == null) {
              throw new MissingRequiredPropertyException("GetHoneypotImagesImage", "multiports");
            }
            this.multiports = multiports;
            return this;
        }
        @CustomType.Setter
        public Builder proto(String proto) {
            if (proto == null) {
              throw new MissingRequiredPropertyException("GetHoneypotImagesImage", "proto");
            }
            this.proto = proto;
            return this;
        }
        @CustomType.Setter
        public Builder servicePort(String servicePort) {
            if (servicePort == null) {
              throw new MissingRequiredPropertyException("GetHoneypotImagesImage", "servicePort");
            }
            this.servicePort = servicePort;
            return this;
        }
        @CustomType.Setter
        public Builder template(String template) {
            if (template == null) {
              throw new MissingRequiredPropertyException("GetHoneypotImagesImage", "template");
            }
            this.template = template;
            return this;
        }
        public GetHoneypotImagesImage build() {
            final var _resultValue = new GetHoneypotImagesImage();
            _resultValue.honeypotImageDisplayName = honeypotImageDisplayName;
            _resultValue.honeypotImageId = honeypotImageId;
            _resultValue.honeypotImageName = honeypotImageName;
            _resultValue.honeypotImageType = honeypotImageType;
            _resultValue.honeypotImageVersion = honeypotImageVersion;
            _resultValue.id = id;
            _resultValue.multiports = multiports;
            _resultValue.proto = proto;
            _resultValue.servicePort = servicePort;
            _resultValue.template = template;
            return _resultValue;
        }
    }
}
