// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.amqp;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ExchangeArgs extends com.pulumi.resources.ResourceArgs {

    public static final ExchangeArgs Empty = new ExchangeArgs();

    /**
     * The alternate exchange. An alternate exchange is used to receive messages that fail to be routed to queues from the current exchange.
     * 
     */
    @Import(name="alternateExchange")
    private @Nullable Output<String> alternateExchange;

    /**
     * @return The alternate exchange. An alternate exchange is used to receive messages that fail to be routed to queues from the current exchange.
     * 
     */
    public Optional<Output<String>> alternateExchange() {
        return Optional.ofNullable(this.alternateExchange);
    }

    /**
     * Specifies whether to automatically delete the exchange. Valid values:
     * 
     */
    @Import(name="autoDeleteState", required=true)
    private Output<Boolean> autoDeleteState;

    /**
     * @return Specifies whether to automatically delete the exchange. Valid values:
     * 
     */
    public Output<Boolean> autoDeleteState() {
        return this.autoDeleteState;
    }

    /**
     * The name of the exchange that you want to create. The exchange name must meet the following conventions:
     * 
     * - The name must be 1 to 255 characters in length, and can contain only letters, digits, hyphens (-), underscores (\_), periods (.), number signs (#), forward slashes (/), and at signs ({@literal @}).
     * - After the exchange is created, you cannot change its name. If you want to change its name, delete the exchange and create another exchange.
     * 
     */
    @Import(name="exchangeName", required=true)
    private Output<String> exchangeName;

    /**
     * @return The name of the exchange that you want to create. The exchange name must meet the following conventions:
     * 
     * - The name must be 1 to 255 characters in length, and can contain only letters, digits, hyphens (-), underscores (\_), periods (.), number signs (#), forward slashes (/), and at signs ({@literal @}).
     * - After the exchange is created, you cannot change its name. If you want to change its name, delete the exchange and create another exchange.
     * 
     */
    public Output<String> exchangeName() {
        return this.exchangeName;
    }

    /**
     * The Exchange type. Value:
     * - `DIRECT`: This type of Routing rule routes messages to a Queue whose Binding Key matches the Routing Key.
     * - `TOPIC`: This type is similar to the DIRECT type. It uses Routing Key pattern matching and string comparison to route messages to the bound Queue.
     * - `FANOUT`: This type of routing rule is very simple. It routes all messages sent to the Exchange to all queues bound to it, which is equivalent to the broadcast function.
     * - `HEADERS`: This type is similar to the DIRECT type. Headers Exchange uses the Headers attribute instead of Routing Key for route matching. When binding Headers Exchange and Queue, the Key-value pair of the bound attribute is set. When sending a message to Headers Exchange, the Headers attribute Key-value pair of the message is set, and the message is routed to the bound Queue by comparing the Headers attribute Key-value pair with the bound attribute Key-value pair.
     * - `X_delayed_message`: By declaring this type of Exchange, you can customize the Header attribute x-delay of the message to specify the delivery delay time period, in milliseconds. Messages will be delivered to the corresponding Queue after the time period defined in the x-delay according to the routing rules. The routing rule depends on the Exchange route type specified in the x-delayed-type.
     * - `X_CONSISTENT_HASH`: The x-consistent-hash Exchange allows you to Hash the Routing Key or Header value and use the consistent hashing algorithm to route messages to different queues.
     * 
     */
    @Import(name="exchangeType", required=true)
    private Output<String> exchangeType;

    /**
     * @return The Exchange type. Value:
     * - `DIRECT`: This type of Routing rule routes messages to a Queue whose Binding Key matches the Routing Key.
     * - `TOPIC`: This type is similar to the DIRECT type. It uses Routing Key pattern matching and string comparison to route messages to the bound Queue.
     * - `FANOUT`: This type of routing rule is very simple. It routes all messages sent to the Exchange to all queues bound to it, which is equivalent to the broadcast function.
     * - `HEADERS`: This type is similar to the DIRECT type. Headers Exchange uses the Headers attribute instead of Routing Key for route matching. When binding Headers Exchange and Queue, the Key-value pair of the bound attribute is set. When sending a message to Headers Exchange, the Headers attribute Key-value pair of the message is set, and the message is routed to the bound Queue by comparing the Headers attribute Key-value pair with the bound attribute Key-value pair.
     * - `X_delayed_message`: By declaring this type of Exchange, you can customize the Header attribute x-delay of the message to specify the delivery delay time period, in milliseconds. Messages will be delivered to the corresponding Queue after the time period defined in the x-delay according to the routing rules. The routing rule depends on the Exchange route type specified in the x-delayed-type.
     * - `X_CONSISTENT_HASH`: The x-consistent-hash Exchange allows you to Hash the Routing Key or Header value and use the consistent hashing algorithm to route messages to different queues.
     * 
     */
    public Output<String> exchangeType() {
        return this.exchangeType;
    }

    /**
     * The ID of the ApsaraMQ for RabbitMQ instance whose exchange you want to delete.
     * 
     */
    @Import(name="instanceId", required=true)
    private Output<String> instanceId;

    /**
     * @return The ID of the ApsaraMQ for RabbitMQ instance whose exchange you want to delete.
     * 
     */
    public Output<String> instanceId() {
        return this.instanceId;
    }

    /**
     * Specifies whether the exchange is an internal exchange. Valid values:
     * 
     */
    @Import(name="internal", required=true)
    private Output<Boolean> internal;

    /**
     * @return Specifies whether the exchange is an internal exchange. Valid values:
     * 
     */
    public Output<Boolean> internal() {
        return this.internal;
    }

    /**
     * The name of the vhost to which the exchange that you want to create belongs.
     * 
     */
    @Import(name="virtualHostName", required=true)
    private Output<String> virtualHostName;

    /**
     * @return The name of the vhost to which the exchange that you want to create belongs.
     * 
     */
    public Output<String> virtualHostName() {
        return this.virtualHostName;
    }

    /**
     * RabbitMQ supports the x-delayed-message Exchange. By declaring this type of Exchange, you can customize the x-delay header attribute to specify the delay period for message delivery, measured in milliseconds. The message will be delivered to the corresponding Queue after the period defined in x-delay. The routing rules are determined by the type of Exchange specified in x-delayed-type.
     * 
     */
    @Import(name="xDelayedType")
    private @Nullable Output<String> xDelayedType;

    /**
     * @return RabbitMQ supports the x-delayed-message Exchange. By declaring this type of Exchange, you can customize the x-delay header attribute to specify the delay period for message delivery, measured in milliseconds. The message will be delivered to the corresponding Queue after the period defined in x-delay. The routing rules are determined by the type of Exchange specified in x-delayed-type.
     * 
     */
    public Optional<Output<String>> xDelayedType() {
        return Optional.ofNullable(this.xDelayedType);
    }

    private ExchangeArgs() {}

    private ExchangeArgs(ExchangeArgs $) {
        this.alternateExchange = $.alternateExchange;
        this.autoDeleteState = $.autoDeleteState;
        this.exchangeName = $.exchangeName;
        this.exchangeType = $.exchangeType;
        this.instanceId = $.instanceId;
        this.internal = $.internal;
        this.virtualHostName = $.virtualHostName;
        this.xDelayedType = $.xDelayedType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ExchangeArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ExchangeArgs $;

        public Builder() {
            $ = new ExchangeArgs();
        }

        public Builder(ExchangeArgs defaults) {
            $ = new ExchangeArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param alternateExchange The alternate exchange. An alternate exchange is used to receive messages that fail to be routed to queues from the current exchange.
         * 
         * @return builder
         * 
         */
        public Builder alternateExchange(@Nullable Output<String> alternateExchange) {
            $.alternateExchange = alternateExchange;
            return this;
        }

        /**
         * @param alternateExchange The alternate exchange. An alternate exchange is used to receive messages that fail to be routed to queues from the current exchange.
         * 
         * @return builder
         * 
         */
        public Builder alternateExchange(String alternateExchange) {
            return alternateExchange(Output.of(alternateExchange));
        }

        /**
         * @param autoDeleteState Specifies whether to automatically delete the exchange. Valid values:
         * 
         * @return builder
         * 
         */
        public Builder autoDeleteState(Output<Boolean> autoDeleteState) {
            $.autoDeleteState = autoDeleteState;
            return this;
        }

        /**
         * @param autoDeleteState Specifies whether to automatically delete the exchange. Valid values:
         * 
         * @return builder
         * 
         */
        public Builder autoDeleteState(Boolean autoDeleteState) {
            return autoDeleteState(Output.of(autoDeleteState));
        }

        /**
         * @param exchangeName The name of the exchange that you want to create. The exchange name must meet the following conventions:
         * 
         * - The name must be 1 to 255 characters in length, and can contain only letters, digits, hyphens (-), underscores (\_), periods (.), number signs (#), forward slashes (/), and at signs ({@literal @}).
         * - After the exchange is created, you cannot change its name. If you want to change its name, delete the exchange and create another exchange.
         * 
         * @return builder
         * 
         */
        public Builder exchangeName(Output<String> exchangeName) {
            $.exchangeName = exchangeName;
            return this;
        }

        /**
         * @param exchangeName The name of the exchange that you want to create. The exchange name must meet the following conventions:
         * 
         * - The name must be 1 to 255 characters in length, and can contain only letters, digits, hyphens (-), underscores (\_), periods (.), number signs (#), forward slashes (/), and at signs ({@literal @}).
         * - After the exchange is created, you cannot change its name. If you want to change its name, delete the exchange and create another exchange.
         * 
         * @return builder
         * 
         */
        public Builder exchangeName(String exchangeName) {
            return exchangeName(Output.of(exchangeName));
        }

        /**
         * @param exchangeType The Exchange type. Value:
         * - `DIRECT`: This type of Routing rule routes messages to a Queue whose Binding Key matches the Routing Key.
         * - `TOPIC`: This type is similar to the DIRECT type. It uses Routing Key pattern matching and string comparison to route messages to the bound Queue.
         * - `FANOUT`: This type of routing rule is very simple. It routes all messages sent to the Exchange to all queues bound to it, which is equivalent to the broadcast function.
         * - `HEADERS`: This type is similar to the DIRECT type. Headers Exchange uses the Headers attribute instead of Routing Key for route matching. When binding Headers Exchange and Queue, the Key-value pair of the bound attribute is set. When sending a message to Headers Exchange, the Headers attribute Key-value pair of the message is set, and the message is routed to the bound Queue by comparing the Headers attribute Key-value pair with the bound attribute Key-value pair.
         * - `X_delayed_message`: By declaring this type of Exchange, you can customize the Header attribute x-delay of the message to specify the delivery delay time period, in milliseconds. Messages will be delivered to the corresponding Queue after the time period defined in the x-delay according to the routing rules. The routing rule depends on the Exchange route type specified in the x-delayed-type.
         * - `X_CONSISTENT_HASH`: The x-consistent-hash Exchange allows you to Hash the Routing Key or Header value and use the consistent hashing algorithm to route messages to different queues.
         * 
         * @return builder
         * 
         */
        public Builder exchangeType(Output<String> exchangeType) {
            $.exchangeType = exchangeType;
            return this;
        }

        /**
         * @param exchangeType The Exchange type. Value:
         * - `DIRECT`: This type of Routing rule routes messages to a Queue whose Binding Key matches the Routing Key.
         * - `TOPIC`: This type is similar to the DIRECT type. It uses Routing Key pattern matching and string comparison to route messages to the bound Queue.
         * - `FANOUT`: This type of routing rule is very simple. It routes all messages sent to the Exchange to all queues bound to it, which is equivalent to the broadcast function.
         * - `HEADERS`: This type is similar to the DIRECT type. Headers Exchange uses the Headers attribute instead of Routing Key for route matching. When binding Headers Exchange and Queue, the Key-value pair of the bound attribute is set. When sending a message to Headers Exchange, the Headers attribute Key-value pair of the message is set, and the message is routed to the bound Queue by comparing the Headers attribute Key-value pair with the bound attribute Key-value pair.
         * - `X_delayed_message`: By declaring this type of Exchange, you can customize the Header attribute x-delay of the message to specify the delivery delay time period, in milliseconds. Messages will be delivered to the corresponding Queue after the time period defined in the x-delay according to the routing rules. The routing rule depends on the Exchange route type specified in the x-delayed-type.
         * - `X_CONSISTENT_HASH`: The x-consistent-hash Exchange allows you to Hash the Routing Key or Header value and use the consistent hashing algorithm to route messages to different queues.
         * 
         * @return builder
         * 
         */
        public Builder exchangeType(String exchangeType) {
            return exchangeType(Output.of(exchangeType));
        }

        /**
         * @param instanceId The ID of the ApsaraMQ for RabbitMQ instance whose exchange you want to delete.
         * 
         * @return builder
         * 
         */
        public Builder instanceId(Output<String> instanceId) {
            $.instanceId = instanceId;
            return this;
        }

        /**
         * @param instanceId The ID of the ApsaraMQ for RabbitMQ instance whose exchange you want to delete.
         * 
         * @return builder
         * 
         */
        public Builder instanceId(String instanceId) {
            return instanceId(Output.of(instanceId));
        }

        /**
         * @param internal Specifies whether the exchange is an internal exchange. Valid values:
         * 
         * @return builder
         * 
         */
        public Builder internal(Output<Boolean> internal) {
            $.internal = internal;
            return this;
        }

        /**
         * @param internal Specifies whether the exchange is an internal exchange. Valid values:
         * 
         * @return builder
         * 
         */
        public Builder internal(Boolean internal) {
            return internal(Output.of(internal));
        }

        /**
         * @param virtualHostName The name of the vhost to which the exchange that you want to create belongs.
         * 
         * @return builder
         * 
         */
        public Builder virtualHostName(Output<String> virtualHostName) {
            $.virtualHostName = virtualHostName;
            return this;
        }

        /**
         * @param virtualHostName The name of the vhost to which the exchange that you want to create belongs.
         * 
         * @return builder
         * 
         */
        public Builder virtualHostName(String virtualHostName) {
            return virtualHostName(Output.of(virtualHostName));
        }

        /**
         * @param xDelayedType RabbitMQ supports the x-delayed-message Exchange. By declaring this type of Exchange, you can customize the x-delay header attribute to specify the delay period for message delivery, measured in milliseconds. The message will be delivered to the corresponding Queue after the period defined in x-delay. The routing rules are determined by the type of Exchange specified in x-delayed-type.
         * 
         * @return builder
         * 
         */
        public Builder xDelayedType(@Nullable Output<String> xDelayedType) {
            $.xDelayedType = xDelayedType;
            return this;
        }

        /**
         * @param xDelayedType RabbitMQ supports the x-delayed-message Exchange. By declaring this type of Exchange, you can customize the x-delay header attribute to specify the delay period for message delivery, measured in milliseconds. The message will be delivered to the corresponding Queue after the period defined in x-delay. The routing rules are determined by the type of Exchange specified in x-delayed-type.
         * 
         * @return builder
         * 
         */
        public Builder xDelayedType(String xDelayedType) {
            return xDelayedType(Output.of(xDelayedType));
        }

        public ExchangeArgs build() {
            if ($.autoDeleteState == null) {
                throw new MissingRequiredPropertyException("ExchangeArgs", "autoDeleteState");
            }
            if ($.exchangeName == null) {
                throw new MissingRequiredPropertyException("ExchangeArgs", "exchangeName");
            }
            if ($.exchangeType == null) {
                throw new MissingRequiredPropertyException("ExchangeArgs", "exchangeType");
            }
            if ($.instanceId == null) {
                throw new MissingRequiredPropertyException("ExchangeArgs", "instanceId");
            }
            if ($.internal == null) {
                throw new MissingRequiredPropertyException("ExchangeArgs", "internal");
            }
            if ($.virtualHostName == null) {
                throw new MissingRequiredPropertyException("ExchangeArgs", "virtualHostName");
            }
            return $;
        }
    }

}
