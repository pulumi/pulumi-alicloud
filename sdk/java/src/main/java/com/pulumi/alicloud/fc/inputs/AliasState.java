// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.fc.inputs;

import com.pulumi.alicloud.fc.inputs.AliasRoutingConfigArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AliasState extends com.pulumi.resources.ResourceArgs {

    public static final AliasState Empty = new AliasState();

    /**
     * Name for the alias you are creating.
     * 
     */
    @Import(name="aliasName")
    private @Nullable Output<String> aliasName;

    /**
     * @return Name for the alias you are creating.
     * 
     */
    public Optional<Output<String>> aliasName() {
        return Optional.ofNullable(this.aliasName);
    }

    /**
     * Description of the alias.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Description of the alias.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The Function Compute alias&#39; route configuration settings. See `routing_config` below.
     * 
     */
    @Import(name="routingConfig")
    private @Nullable Output<AliasRoutingConfigArgs> routingConfig;

    /**
     * @return The Function Compute alias&#39; route configuration settings. See `routing_config` below.
     * 
     */
    public Optional<Output<AliasRoutingConfigArgs>> routingConfig() {
        return Optional.ofNullable(this.routingConfig);
    }

    /**
     * The Function Compute service name.
     * 
     */
    @Import(name="serviceName")
    private @Nullable Output<String> serviceName;

    /**
     * @return The Function Compute service name.
     * 
     */
    public Optional<Output<String>> serviceName() {
        return Optional.ofNullable(this.serviceName);
    }

    /**
     * The Function Compute service version for which you are creating the alias. Pattern: (LATEST|[0-9]+).
     * 
     */
    @Import(name="serviceVersion")
    private @Nullable Output<String> serviceVersion;

    /**
     * @return The Function Compute service version for which you are creating the alias. Pattern: (LATEST|[0-9]+).
     * 
     */
    public Optional<Output<String>> serviceVersion() {
        return Optional.ofNullable(this.serviceVersion);
    }

    private AliasState() {}

    private AliasState(AliasState $) {
        this.aliasName = $.aliasName;
        this.description = $.description;
        this.routingConfig = $.routingConfig;
        this.serviceName = $.serviceName;
        this.serviceVersion = $.serviceVersion;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AliasState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AliasState $;

        public Builder() {
            $ = new AliasState();
        }

        public Builder(AliasState defaults) {
            $ = new AliasState(Objects.requireNonNull(defaults));
        }

        /**
         * @param aliasName Name for the alias you are creating.
         * 
         * @return builder
         * 
         */
        public Builder aliasName(@Nullable Output<String> aliasName) {
            $.aliasName = aliasName;
            return this;
        }

        /**
         * @param aliasName Name for the alias you are creating.
         * 
         * @return builder
         * 
         */
        public Builder aliasName(String aliasName) {
            return aliasName(Output.of(aliasName));
        }

        /**
         * @param description Description of the alias.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Description of the alias.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param routingConfig The Function Compute alias&#39; route configuration settings. See `routing_config` below.
         * 
         * @return builder
         * 
         */
        public Builder routingConfig(@Nullable Output<AliasRoutingConfigArgs> routingConfig) {
            $.routingConfig = routingConfig;
            return this;
        }

        /**
         * @param routingConfig The Function Compute alias&#39; route configuration settings. See `routing_config` below.
         * 
         * @return builder
         * 
         */
        public Builder routingConfig(AliasRoutingConfigArgs routingConfig) {
            return routingConfig(Output.of(routingConfig));
        }

        /**
         * @param serviceName The Function Compute service name.
         * 
         * @return builder
         * 
         */
        public Builder serviceName(@Nullable Output<String> serviceName) {
            $.serviceName = serviceName;
            return this;
        }

        /**
         * @param serviceName The Function Compute service name.
         * 
         * @return builder
         * 
         */
        public Builder serviceName(String serviceName) {
            return serviceName(Output.of(serviceName));
        }

        /**
         * @param serviceVersion The Function Compute service version for which you are creating the alias. Pattern: (LATEST|[0-9]+).
         * 
         * @return builder
         * 
         */
        public Builder serviceVersion(@Nullable Output<String> serviceVersion) {
            $.serviceVersion = serviceVersion;
            return this;
        }

        /**
         * @param serviceVersion The Function Compute service version for which you are creating the alias. Pattern: (LATEST|[0-9]+).
         * 
         * @return builder
         * 
         */
        public Builder serviceVersion(String serviceVersion) {
            return serviceVersion(Output.of(serviceVersion));
        }

        public AliasState build() {
            return $;
        }
    }

}
