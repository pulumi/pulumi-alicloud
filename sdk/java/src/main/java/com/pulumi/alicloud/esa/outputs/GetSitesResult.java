// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.esa.outputs;

import com.pulumi.alicloud.esa.outputs.GetSitesSite;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetSitesResult {
    /**
     * @return Access type. Value:-**NS**: Managed access via NS.-**CNAME**: access through CNAME.
     * 
     */
    private @Nullable String accessType;
    /**
     * @return Acceleration area
     * 
     */
    private @Nullable String coverage;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return A list of Site IDs.
     * 
     */
    private List<String> ids;
    private @Nullable String nameRegex;
    /**
     * @return A list of name of Sites.
     * 
     */
    private List<String> names;
    private @Nullable Boolean onlyEnterprise;
    private @Nullable String outputFile;
    private @Nullable Integer pageNumber;
    private @Nullable Integer pageSize;
    private @Nullable String planSubscribeType;
    /**
     * @return The ID of the resource group
     * 
     */
    private @Nullable String resourceGroupId;
    /**
     * @return Site Name
     * 
     */
    private @Nullable String siteName;
    private @Nullable String siteSearchType;
    /**
     * @return A list of Site Entries. Each element contains the following attributes:
     * 
     */
    private List<GetSitesSite> sites;
    /**
     * @return The status of the resource
     * 
     */
    private @Nullable String status;
    private @Nullable Map<String,String> tags;

    private GetSitesResult() {}
    /**
     * @return Access type. Value:-**NS**: Managed access via NS.-**CNAME**: access through CNAME.
     * 
     */
    public Optional<String> accessType() {
        return Optional.ofNullable(this.accessType);
    }
    /**
     * @return Acceleration area
     * 
     */
    public Optional<String> coverage() {
        return Optional.ofNullable(this.coverage);
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return A list of Site IDs.
     * 
     */
    public List<String> ids() {
        return this.ids;
    }
    public Optional<String> nameRegex() {
        return Optional.ofNullable(this.nameRegex);
    }
    /**
     * @return A list of name of Sites.
     * 
     */
    public List<String> names() {
        return this.names;
    }
    public Optional<Boolean> onlyEnterprise() {
        return Optional.ofNullable(this.onlyEnterprise);
    }
    public Optional<String> outputFile() {
        return Optional.ofNullable(this.outputFile);
    }
    public Optional<Integer> pageNumber() {
        return Optional.ofNullable(this.pageNumber);
    }
    public Optional<Integer> pageSize() {
        return Optional.ofNullable(this.pageSize);
    }
    public Optional<String> planSubscribeType() {
        return Optional.ofNullable(this.planSubscribeType);
    }
    /**
     * @return The ID of the resource group
     * 
     */
    public Optional<String> resourceGroupId() {
        return Optional.ofNullable(this.resourceGroupId);
    }
    /**
     * @return Site Name
     * 
     */
    public Optional<String> siteName() {
        return Optional.ofNullable(this.siteName);
    }
    public Optional<String> siteSearchType() {
        return Optional.ofNullable(this.siteSearchType);
    }
    /**
     * @return A list of Site Entries. Each element contains the following attributes:
     * 
     */
    public List<GetSitesSite> sites() {
        return this.sites;
    }
    /**
     * @return The status of the resource
     * 
     */
    public Optional<String> status() {
        return Optional.ofNullable(this.status);
    }
    public Map<String,String> tags() {
        return this.tags == null ? Map.of() : this.tags;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSitesResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String accessType;
        private @Nullable String coverage;
        private String id;
        private List<String> ids;
        private @Nullable String nameRegex;
        private List<String> names;
        private @Nullable Boolean onlyEnterprise;
        private @Nullable String outputFile;
        private @Nullable Integer pageNumber;
        private @Nullable Integer pageSize;
        private @Nullable String planSubscribeType;
        private @Nullable String resourceGroupId;
        private @Nullable String siteName;
        private @Nullable String siteSearchType;
        private List<GetSitesSite> sites;
        private @Nullable String status;
        private @Nullable Map<String,String> tags;
        public Builder() {}
        public Builder(GetSitesResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accessType = defaults.accessType;
    	      this.coverage = defaults.coverage;
    	      this.id = defaults.id;
    	      this.ids = defaults.ids;
    	      this.nameRegex = defaults.nameRegex;
    	      this.names = defaults.names;
    	      this.onlyEnterprise = defaults.onlyEnterprise;
    	      this.outputFile = defaults.outputFile;
    	      this.pageNumber = defaults.pageNumber;
    	      this.pageSize = defaults.pageSize;
    	      this.planSubscribeType = defaults.planSubscribeType;
    	      this.resourceGroupId = defaults.resourceGroupId;
    	      this.siteName = defaults.siteName;
    	      this.siteSearchType = defaults.siteSearchType;
    	      this.sites = defaults.sites;
    	      this.status = defaults.status;
    	      this.tags = defaults.tags;
        }

        @CustomType.Setter
        public Builder accessType(@Nullable String accessType) {

            this.accessType = accessType;
            return this;
        }
        @CustomType.Setter
        public Builder coverage(@Nullable String coverage) {

            this.coverage = coverage;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetSitesResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder ids(List<String> ids) {
            if (ids == null) {
              throw new MissingRequiredPropertyException("GetSitesResult", "ids");
            }
            this.ids = ids;
            return this;
        }
        public Builder ids(String... ids) {
            return ids(List.of(ids));
        }
        @CustomType.Setter
        public Builder nameRegex(@Nullable String nameRegex) {

            this.nameRegex = nameRegex;
            return this;
        }
        @CustomType.Setter
        public Builder names(List<String> names) {
            if (names == null) {
              throw new MissingRequiredPropertyException("GetSitesResult", "names");
            }
            this.names = names;
            return this;
        }
        public Builder names(String... names) {
            return names(List.of(names));
        }
        @CustomType.Setter
        public Builder onlyEnterprise(@Nullable Boolean onlyEnterprise) {

            this.onlyEnterprise = onlyEnterprise;
            return this;
        }
        @CustomType.Setter
        public Builder outputFile(@Nullable String outputFile) {

            this.outputFile = outputFile;
            return this;
        }
        @CustomType.Setter
        public Builder pageNumber(@Nullable Integer pageNumber) {

            this.pageNumber = pageNumber;
            return this;
        }
        @CustomType.Setter
        public Builder pageSize(@Nullable Integer pageSize) {

            this.pageSize = pageSize;
            return this;
        }
        @CustomType.Setter
        public Builder planSubscribeType(@Nullable String planSubscribeType) {

            this.planSubscribeType = planSubscribeType;
            return this;
        }
        @CustomType.Setter
        public Builder resourceGroupId(@Nullable String resourceGroupId) {

            this.resourceGroupId = resourceGroupId;
            return this;
        }
        @CustomType.Setter
        public Builder siteName(@Nullable String siteName) {

            this.siteName = siteName;
            return this;
        }
        @CustomType.Setter
        public Builder siteSearchType(@Nullable String siteSearchType) {

            this.siteSearchType = siteSearchType;
            return this;
        }
        @CustomType.Setter
        public Builder sites(List<GetSitesSite> sites) {
            if (sites == null) {
              throw new MissingRequiredPropertyException("GetSitesResult", "sites");
            }
            this.sites = sites;
            return this;
        }
        public Builder sites(GetSitesSite... sites) {
            return sites(List.of(sites));
        }
        @CustomType.Setter
        public Builder status(@Nullable String status) {

            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder tags(@Nullable Map<String,String> tags) {

            this.tags = tags;
            return this;
        }
        public GetSitesResult build() {
            final var _resultValue = new GetSitesResult();
            _resultValue.accessType = accessType;
            _resultValue.coverage = coverage;
            _resultValue.id = id;
            _resultValue.ids = ids;
            _resultValue.nameRegex = nameRegex;
            _resultValue.names = names;
            _resultValue.onlyEnterprise = onlyEnterprise;
            _resultValue.outputFile = outputFile;
            _resultValue.pageNumber = pageNumber;
            _resultValue.pageSize = pageSize;
            _resultValue.planSubscribeType = planSubscribeType;
            _resultValue.resourceGroupId = resourceGroupId;
            _resultValue.siteName = siteName;
            _resultValue.siteSearchType = siteSearchType;
            _resultValue.sites = sites;
            _resultValue.status = status;
            _resultValue.tags = tags;
            return _resultValue;
        }
    }
}
