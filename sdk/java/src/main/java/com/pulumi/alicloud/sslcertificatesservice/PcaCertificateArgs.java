// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.sslcertificatesservice;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PcaCertificateArgs extends com.pulumi.resources.ResourceArgs {

    public static final PcaCertificateArgs Empty = new PcaCertificateArgs();

    /**
     * The key algorithm type of the root CA certificate. The key algorithm is expressed using the &#39;_&lt; key length&gt;&#39; format. Value:
     * - `RSA_1024`: The corresponding signature algorithm is Sha256WithRSA.
     * - `RSA_2048`: The corresponding signature algorithm is Sha256WithRSA.
     * - `RSA_4096`: The corresponding signature algorithm is Sha256WithRSA.
     * - `ECC_256`: The signature algorithm is Sha256WithECDSA.
     * - `ECC_384`: The corresponding signature algorithm is Sha256WithECDSA.
     * - `ECC_512`: The signature algorithm is Sha256WithECDSA.
     * - `SM2_256`: The corresponding signature algorithm is SM3WithSM2.
     *   The encryption algorithm of the root CA certificate must be the same as the **certificate algorithm** of the private Root CA you purchased. Example: If the **certificate algorithm** selected when you purchase a private Root CA is `RSA`, the key algorithm of the root CA certificate must be **RSA\_1024**, **RSA\_2048**, or **RSA\_4096**.
     * 
     */
    @Import(name="algorithm")
    private @Nullable Output<String> algorithm;

    /**
     * @return The key algorithm type of the root CA certificate. The key algorithm is expressed using the &#39;_&lt; key length&gt;&#39; format. Value:
     * - `RSA_1024`: The corresponding signature algorithm is Sha256WithRSA.
     * - `RSA_2048`: The corresponding signature algorithm is Sha256WithRSA.
     * - `RSA_4096`: The corresponding signature algorithm is Sha256WithRSA.
     * - `ECC_256`: The signature algorithm is Sha256WithECDSA.
     * - `ECC_384`: The corresponding signature algorithm is Sha256WithECDSA.
     * - `ECC_512`: The signature algorithm is Sha256WithECDSA.
     * - `SM2_256`: The corresponding signature algorithm is SM3WithSM2.
     *   The encryption algorithm of the root CA certificate must be the same as the **certificate algorithm** of the private Root CA you purchased. Example: If the **certificate algorithm** selected when you purchase a private Root CA is `RSA`, the key algorithm of the root CA certificate must be **RSA\_1024**, **RSA\_2048**, or **RSA\_4096**.
     * 
     */
    public Optional<Output<String>> algorithm() {
        return Optional.ofNullable(this.algorithm);
    }

    /**
     * The common name or abbreviation of the organization. Support the use of Chinese, English characters.
     * 
     */
    @Import(name="commonName", required=true)
    private Output<String> commonName;

    /**
     * @return The common name or abbreviation of the organization. Support the use of Chinese, English characters.
     * 
     */
    public Output<String> commonName() {
        return this.commonName;
    }

    /**
     * The code of the country or region in which the organization is located, using a two-digit capital abbreviation. For example, `CN` represents China and `US` represents the United States.
     * 
     */
    @Import(name="countryCode")
    private @Nullable Output<String> countryCode;

    /**
     * @return The code of the country or region in which the organization is located, using a two-digit capital abbreviation. For example, `CN` represents China and `US` represents the United States.
     * 
     */
    public Optional<Output<String>> countryCode() {
        return Optional.ofNullable(this.countryCode);
    }

    /**
     * Name of the city where the organization is located. Support the use of Chinese, English characters.
     * 
     */
    @Import(name="locality", required=true)
    private Output<String> locality;

    /**
     * @return Name of the city where the organization is located. Support the use of Chinese, English characters.
     * 
     */
    public Output<String> locality() {
        return this.locality;
    }

    /**
     * The name of the organization (corresponding to your enterprise or company) associated with the root CA certificate. Support the use of Chinese, English characters.
     * 
     */
    @Import(name="organization", required=true)
    private Output<String> organization;

    /**
     * @return The name of the organization (corresponding to your enterprise or company) associated with the root CA certificate. Support the use of Chinese, English characters.
     * 
     */
    public Output<String> organization() {
        return this.organization;
    }

    /**
     * The name of the department or branch under the organization. Support the use of Chinese, English characters.
     * 
     */
    @Import(name="organizationUnit", required=true)
    private Output<String> organizationUnit;

    /**
     * @return The name of the department or branch under the organization. Support the use of Chinese, English characters.
     * 
     */
    public Output<String> organizationUnit() {
        return this.organizationUnit;
    }

    /**
     * The name of the province, municipality, or autonomous region in which the organization is located. Support the use of Chinese, English characters.
     * Name of the province or state where the organization is located. Support the use of Chinese, English characters.
     * 
     */
    @Import(name="state", required=true)
    private Output<String> state;

    /**
     * @return The name of the province, municipality, or autonomous region in which the organization is located. Support the use of Chinese, English characters.
     * Name of the province or state where the organization is located. Support the use of Chinese, English characters.
     * 
     */
    public Output<String> state() {
        return this.state;
    }

    /**
     * The validity period of the root CA certificate, in years.
     * &gt; **NOTE:**  It is recommended to set to `5` to `10` years.
     * 
     */
    @Import(name="years", required=true)
    private Output<Integer> years;

    /**
     * @return The validity period of the root CA certificate, in years.
     * &gt; **NOTE:**  It is recommended to set to `5` to `10` years.
     * 
     */
    public Output<Integer> years() {
        return this.years;
    }

    private PcaCertificateArgs() {}

    private PcaCertificateArgs(PcaCertificateArgs $) {
        this.algorithm = $.algorithm;
        this.commonName = $.commonName;
        this.countryCode = $.countryCode;
        this.locality = $.locality;
        this.organization = $.organization;
        this.organizationUnit = $.organizationUnit;
        this.state = $.state;
        this.years = $.years;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PcaCertificateArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PcaCertificateArgs $;

        public Builder() {
            $ = new PcaCertificateArgs();
        }

        public Builder(PcaCertificateArgs defaults) {
            $ = new PcaCertificateArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param algorithm The key algorithm type of the root CA certificate. The key algorithm is expressed using the &#39;_&lt; key length&gt;&#39; format. Value:
         * - `RSA_1024`: The corresponding signature algorithm is Sha256WithRSA.
         * - `RSA_2048`: The corresponding signature algorithm is Sha256WithRSA.
         * - `RSA_4096`: The corresponding signature algorithm is Sha256WithRSA.
         * - `ECC_256`: The signature algorithm is Sha256WithECDSA.
         * - `ECC_384`: The corresponding signature algorithm is Sha256WithECDSA.
         * - `ECC_512`: The signature algorithm is Sha256WithECDSA.
         * - `SM2_256`: The corresponding signature algorithm is SM3WithSM2.
         *   The encryption algorithm of the root CA certificate must be the same as the **certificate algorithm** of the private Root CA you purchased. Example: If the **certificate algorithm** selected when you purchase a private Root CA is `RSA`, the key algorithm of the root CA certificate must be **RSA\_1024**, **RSA\_2048**, or **RSA\_4096**.
         * 
         * @return builder
         * 
         */
        public Builder algorithm(@Nullable Output<String> algorithm) {
            $.algorithm = algorithm;
            return this;
        }

        /**
         * @param algorithm The key algorithm type of the root CA certificate. The key algorithm is expressed using the &#39;_&lt; key length&gt;&#39; format. Value:
         * - `RSA_1024`: The corresponding signature algorithm is Sha256WithRSA.
         * - `RSA_2048`: The corresponding signature algorithm is Sha256WithRSA.
         * - `RSA_4096`: The corresponding signature algorithm is Sha256WithRSA.
         * - `ECC_256`: The signature algorithm is Sha256WithECDSA.
         * - `ECC_384`: The corresponding signature algorithm is Sha256WithECDSA.
         * - `ECC_512`: The signature algorithm is Sha256WithECDSA.
         * - `SM2_256`: The corresponding signature algorithm is SM3WithSM2.
         *   The encryption algorithm of the root CA certificate must be the same as the **certificate algorithm** of the private Root CA you purchased. Example: If the **certificate algorithm** selected when you purchase a private Root CA is `RSA`, the key algorithm of the root CA certificate must be **RSA\_1024**, **RSA\_2048**, or **RSA\_4096**.
         * 
         * @return builder
         * 
         */
        public Builder algorithm(String algorithm) {
            return algorithm(Output.of(algorithm));
        }

        /**
         * @param commonName The common name or abbreviation of the organization. Support the use of Chinese, English characters.
         * 
         * @return builder
         * 
         */
        public Builder commonName(Output<String> commonName) {
            $.commonName = commonName;
            return this;
        }

        /**
         * @param commonName The common name or abbreviation of the organization. Support the use of Chinese, English characters.
         * 
         * @return builder
         * 
         */
        public Builder commonName(String commonName) {
            return commonName(Output.of(commonName));
        }

        /**
         * @param countryCode The code of the country or region in which the organization is located, using a two-digit capital abbreviation. For example, `CN` represents China and `US` represents the United States.
         * 
         * @return builder
         * 
         */
        public Builder countryCode(@Nullable Output<String> countryCode) {
            $.countryCode = countryCode;
            return this;
        }

        /**
         * @param countryCode The code of the country or region in which the organization is located, using a two-digit capital abbreviation. For example, `CN` represents China and `US` represents the United States.
         * 
         * @return builder
         * 
         */
        public Builder countryCode(String countryCode) {
            return countryCode(Output.of(countryCode));
        }

        /**
         * @param locality Name of the city where the organization is located. Support the use of Chinese, English characters.
         * 
         * @return builder
         * 
         */
        public Builder locality(Output<String> locality) {
            $.locality = locality;
            return this;
        }

        /**
         * @param locality Name of the city where the organization is located. Support the use of Chinese, English characters.
         * 
         * @return builder
         * 
         */
        public Builder locality(String locality) {
            return locality(Output.of(locality));
        }

        /**
         * @param organization The name of the organization (corresponding to your enterprise or company) associated with the root CA certificate. Support the use of Chinese, English characters.
         * 
         * @return builder
         * 
         */
        public Builder organization(Output<String> organization) {
            $.organization = organization;
            return this;
        }

        /**
         * @param organization The name of the organization (corresponding to your enterprise or company) associated with the root CA certificate. Support the use of Chinese, English characters.
         * 
         * @return builder
         * 
         */
        public Builder organization(String organization) {
            return organization(Output.of(organization));
        }

        /**
         * @param organizationUnit The name of the department or branch under the organization. Support the use of Chinese, English characters.
         * 
         * @return builder
         * 
         */
        public Builder organizationUnit(Output<String> organizationUnit) {
            $.organizationUnit = organizationUnit;
            return this;
        }

        /**
         * @param organizationUnit The name of the department or branch under the organization. Support the use of Chinese, English characters.
         * 
         * @return builder
         * 
         */
        public Builder organizationUnit(String organizationUnit) {
            return organizationUnit(Output.of(organizationUnit));
        }

        /**
         * @param state The name of the province, municipality, or autonomous region in which the organization is located. Support the use of Chinese, English characters.
         * Name of the province or state where the organization is located. Support the use of Chinese, English characters.
         * 
         * @return builder
         * 
         */
        public Builder state(Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state The name of the province, municipality, or autonomous region in which the organization is located. Support the use of Chinese, English characters.
         * Name of the province or state where the organization is located. Support the use of Chinese, English characters.
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        /**
         * @param years The validity period of the root CA certificate, in years.
         * &gt; **NOTE:**  It is recommended to set to `5` to `10` years.
         * 
         * @return builder
         * 
         */
        public Builder years(Output<Integer> years) {
            $.years = years;
            return this;
        }

        /**
         * @param years The validity period of the root CA certificate, in years.
         * &gt; **NOTE:**  It is recommended to set to `5` to `10` years.
         * 
         * @return builder
         * 
         */
        public Builder years(Integer years) {
            return years(Output.of(years));
        }

        public PcaCertificateArgs build() {
            if ($.commonName == null) {
                throw new MissingRequiredPropertyException("PcaCertificateArgs", "commonName");
            }
            if ($.locality == null) {
                throw new MissingRequiredPropertyException("PcaCertificateArgs", "locality");
            }
            if ($.organization == null) {
                throw new MissingRequiredPropertyException("PcaCertificateArgs", "organization");
            }
            if ($.organizationUnit == null) {
                throw new MissingRequiredPropertyException("PcaCertificateArgs", "organizationUnit");
            }
            if ($.state == null) {
                throw new MissingRequiredPropertyException("PcaCertificateArgs", "state");
            }
            if ($.years == null) {
                throw new MissingRequiredPropertyException("PcaCertificateArgs", "years");
            }
            return $;
        }
    }

}
