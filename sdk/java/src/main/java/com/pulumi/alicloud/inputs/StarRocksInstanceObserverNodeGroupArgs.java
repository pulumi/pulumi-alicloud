// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class StarRocksInstanceObserverNodeGroupArgs extends com.pulumi.resources.ResourceArgs {

    public static final StarRocksInstanceObserverNodeGroupArgs Empty = new StarRocksInstanceObserverNodeGroupArgs();

    /**
     * Number of CUs. CU (Compute Unit) is the basic measurement unit of the service, where 1 CU = 1 CPU core + 4 GiB memory.
     * 
     */
    @Import(name="cu")
    private @Nullable Output<Integer> cu;

    /**
     * @return Number of CUs. CU (Compute Unit) is the basic measurement unit of the service, where 1 CU = 1 CPU core + 4 GiB memory.
     * 
     */
    public Optional<Output<Integer>> cu() {
        return Optional.ofNullable(this.cu);
    }

    /**
     * DiskNumber
     * 
     */
    @Import(name="diskNumber")
    private @Nullable Output<Integer> diskNumber;

    /**
     * @return DiskNumber
     * 
     */
    public Optional<Output<Integer>> diskNumber() {
        return Optional.ofNullable(this.diskNumber);
    }

    /**
     * Local SSD instance specifications.
     * 
     */
    @Import(name="localStorageInstanceType")
    private @Nullable Output<String> localStorageInstanceType;

    /**
     * @return Local SSD instance specifications.
     * 
     */
    public Optional<Output<String>> localStorageInstanceType() {
        return Optional.ofNullable(this.localStorageInstanceType);
    }

    /**
     * Resident node number of node group.
     * 
     */
    @Import(name="residentNodeNumber")
    private @Nullable Output<Integer> residentNodeNumber;

    /**
     * @return Resident node number of node group.
     * 
     */
    public Optional<Output<Integer>> residentNodeNumber() {
        return Optional.ofNullable(this.residentNodeNumber);
    }

    /**
     * Compute group specification types include the following:
     * - standard
     * 
     */
    @Import(name="specType")
    private @Nullable Output<String> specType;

    /**
     * @return Compute group specification types include the following:
     * - standard
     * 
     */
    public Optional<Output<String>> specType() {
        return Optional.ofNullable(this.specType);
    }

    /**
     * Performance levels of cloud disks include the following values:
     * - pl0: Maximum random read/write IOPS per disk is 10,000.
     * - pl1: Maximum random read/write IOPS per disk is 50,000.
     * - pl2: Maximum random read/write IOPS per disk is 100,000.
     * - pl3: Maximum random read/write IOPS per disk is 1,000,000.
     * 
     */
    @Import(name="storagePerformanceLevel")
    private @Nullable Output<String> storagePerformanceLevel;

    /**
     * @return Performance levels of cloud disks include the following values:
     * - pl0: Maximum random read/write IOPS per disk is 10,000.
     * - pl1: Maximum random read/write IOPS per disk is 50,000.
     * - pl2: Maximum random read/write IOPS per disk is 100,000.
     * - pl3: Maximum random read/write IOPS per disk is 1,000,000.
     * 
     */
    public Optional<Output<String>> storagePerformanceLevel() {
        return Optional.ofNullable(this.storagePerformanceLevel);
    }

    /**
     * Storage size, measured in GiB.
     * 
     */
    @Import(name="storageSize")
    private @Nullable Output<Integer> storageSize;

    /**
     * @return Storage size, measured in GiB.
     * 
     */
    public Optional<Output<Integer>> storageSize() {
        return Optional.ofNullable(this.storageSize);
    }

    /**
     * Zone ID.
     * 
     */
    @Import(name="zoneId")
    private @Nullable Output<String> zoneId;

    /**
     * @return Zone ID.
     * 
     */
    public Optional<Output<String>> zoneId() {
        return Optional.ofNullable(this.zoneId);
    }

    private StarRocksInstanceObserverNodeGroupArgs() {}

    private StarRocksInstanceObserverNodeGroupArgs(StarRocksInstanceObserverNodeGroupArgs $) {
        this.cu = $.cu;
        this.diskNumber = $.diskNumber;
        this.localStorageInstanceType = $.localStorageInstanceType;
        this.residentNodeNumber = $.residentNodeNumber;
        this.specType = $.specType;
        this.storagePerformanceLevel = $.storagePerformanceLevel;
        this.storageSize = $.storageSize;
        this.zoneId = $.zoneId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(StarRocksInstanceObserverNodeGroupArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private StarRocksInstanceObserverNodeGroupArgs $;

        public Builder() {
            $ = new StarRocksInstanceObserverNodeGroupArgs();
        }

        public Builder(StarRocksInstanceObserverNodeGroupArgs defaults) {
            $ = new StarRocksInstanceObserverNodeGroupArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param cu Number of CUs. CU (Compute Unit) is the basic measurement unit of the service, where 1 CU = 1 CPU core + 4 GiB memory.
         * 
         * @return builder
         * 
         */
        public Builder cu(@Nullable Output<Integer> cu) {
            $.cu = cu;
            return this;
        }

        /**
         * @param cu Number of CUs. CU (Compute Unit) is the basic measurement unit of the service, where 1 CU = 1 CPU core + 4 GiB memory.
         * 
         * @return builder
         * 
         */
        public Builder cu(Integer cu) {
            return cu(Output.of(cu));
        }

        /**
         * @param diskNumber DiskNumber
         * 
         * @return builder
         * 
         */
        public Builder diskNumber(@Nullable Output<Integer> diskNumber) {
            $.diskNumber = diskNumber;
            return this;
        }

        /**
         * @param diskNumber DiskNumber
         * 
         * @return builder
         * 
         */
        public Builder diskNumber(Integer diskNumber) {
            return diskNumber(Output.of(diskNumber));
        }

        /**
         * @param localStorageInstanceType Local SSD instance specifications.
         * 
         * @return builder
         * 
         */
        public Builder localStorageInstanceType(@Nullable Output<String> localStorageInstanceType) {
            $.localStorageInstanceType = localStorageInstanceType;
            return this;
        }

        /**
         * @param localStorageInstanceType Local SSD instance specifications.
         * 
         * @return builder
         * 
         */
        public Builder localStorageInstanceType(String localStorageInstanceType) {
            return localStorageInstanceType(Output.of(localStorageInstanceType));
        }

        /**
         * @param residentNodeNumber Resident node number of node group.
         * 
         * @return builder
         * 
         */
        public Builder residentNodeNumber(@Nullable Output<Integer> residentNodeNumber) {
            $.residentNodeNumber = residentNodeNumber;
            return this;
        }

        /**
         * @param residentNodeNumber Resident node number of node group.
         * 
         * @return builder
         * 
         */
        public Builder residentNodeNumber(Integer residentNodeNumber) {
            return residentNodeNumber(Output.of(residentNodeNumber));
        }

        /**
         * @param specType Compute group specification types include the following:
         * - standard
         * 
         * @return builder
         * 
         */
        public Builder specType(@Nullable Output<String> specType) {
            $.specType = specType;
            return this;
        }

        /**
         * @param specType Compute group specification types include the following:
         * - standard
         * 
         * @return builder
         * 
         */
        public Builder specType(String specType) {
            return specType(Output.of(specType));
        }

        /**
         * @param storagePerformanceLevel Performance levels of cloud disks include the following values:
         * - pl0: Maximum random read/write IOPS per disk is 10,000.
         * - pl1: Maximum random read/write IOPS per disk is 50,000.
         * - pl2: Maximum random read/write IOPS per disk is 100,000.
         * - pl3: Maximum random read/write IOPS per disk is 1,000,000.
         * 
         * @return builder
         * 
         */
        public Builder storagePerformanceLevel(@Nullable Output<String> storagePerformanceLevel) {
            $.storagePerformanceLevel = storagePerformanceLevel;
            return this;
        }

        /**
         * @param storagePerformanceLevel Performance levels of cloud disks include the following values:
         * - pl0: Maximum random read/write IOPS per disk is 10,000.
         * - pl1: Maximum random read/write IOPS per disk is 50,000.
         * - pl2: Maximum random read/write IOPS per disk is 100,000.
         * - pl3: Maximum random read/write IOPS per disk is 1,000,000.
         * 
         * @return builder
         * 
         */
        public Builder storagePerformanceLevel(String storagePerformanceLevel) {
            return storagePerformanceLevel(Output.of(storagePerformanceLevel));
        }

        /**
         * @param storageSize Storage size, measured in GiB.
         * 
         * @return builder
         * 
         */
        public Builder storageSize(@Nullable Output<Integer> storageSize) {
            $.storageSize = storageSize;
            return this;
        }

        /**
         * @param storageSize Storage size, measured in GiB.
         * 
         * @return builder
         * 
         */
        public Builder storageSize(Integer storageSize) {
            return storageSize(Output.of(storageSize));
        }

        /**
         * @param zoneId Zone ID.
         * 
         * @return builder
         * 
         */
        public Builder zoneId(@Nullable Output<String> zoneId) {
            $.zoneId = zoneId;
            return this;
        }

        /**
         * @param zoneId Zone ID.
         * 
         * @return builder
         * 
         */
        public Builder zoneId(String zoneId) {
            return zoneId(Output.of(zoneId));
        }

        public StarRocksInstanceObserverNodeGroupArgs build() {
            return $;
        }
    }

}
