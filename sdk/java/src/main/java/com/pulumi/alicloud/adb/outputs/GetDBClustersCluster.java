// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.adb.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetDBClustersCluster {
    /**
     * @return Auto-renewal period of an cluster, in the unit of the month.
     * 
     */
    private Integer autoRenewPeriod;
    /**
     * @return The payment type of the resource.
     * 
     */
    private String chargeType;
    /**
     * @return The name of the service.
     * 
     */
    private String commodityCode;
    /**
     * @return The specifications of computing resources in elastic mode. The increase of resources can speed up queries. AnalyticDB for MySQL automatically scales computing resources.
     * 
     */
    private String computeResource;
    /**
     * @return The endpoint of the cluster.
     * 
     */
    private String connectionString;
    /**
     * @return The CreateTime of the ADB cluster.
     * 
     */
    private String createTime;
    /**
     * @return The db cluster category.
     * 
     */
    private String dbClusterCategory;
    /**
     * @return The db cluster id.
     * 
     */
    private String dbClusterId;
    /**
     * @return The db cluster network type.
     * 
     */
    private String dbClusterNetworkType;
    /**
     * @return The db cluster type.
     * 
     */
    private String dbClusterType;
    /**
     * @return The db cluster version.
     * 
     */
    private String dbClusterVersion;
    /**
     * @return The db node class.
     * 
     */
    private String dbNodeClass;
    /**
     * @return The db node count.
     * 
     */
    private Integer dbNodeCount;
    /**
     * @return The db node storage.
     * 
     */
    private Integer dbNodeStorage;
    /**
     * @return The description of DBCluster.
     * 
     */
    private String description;
    /**
     * @return The type of the disk.
     * 
     */
    private String diskType;
    /**
     * @return The ID of the data synchronization task in Data Transmission Service (DTS). This parameter is valid only for analytic instances.
     * 
     */
    private String dtsJobId;
    /**
     * @return The elastic io resource.
     * 
     */
    private Integer elasticIoResource;
    /**
     * @return The engine of the database.
     * 
     */
    private String engine;
    /**
     * @return The engine version of the database.
     * 
     */
    private String engineVersion;
    /**
     * @return The number of nodes. The node resources are used for data computing in elastic mode.
     * 
     */
    private String executorCount;
    /**
     * @return The time when the cluster expires.
     * 
     */
    private String expireTime;
    /**
     * @return Indicates whether the cluster has expired.
     * 
     */
    private String expired;
    /**
     * @return The ID of the DBCluster.
     * 
     */
    private String id;
    /**
     * @return The lock mode of the cluster.
     * 
     */
    private String lockMode;
    /**
     * @return The reason why the cluster is locked.
     * 
     */
    private String lockReason;
    /**
     * @return The maintenance window of the cluster.
     * 
     */
    private String maintainTime;
    /**
     * @return The lock mode of the cluster.
     * 
     */
    private String mode;
    /**
     * @return The db cluster network type.
     * 
     */
    private String networkType;
    /**
     * @return The payment type of the resource.
     * 
     */
    private String paymentType;
    /**
     * @return The port that is used to access the cluster.
     * 
     */
    private Integer port;
    /**
     * @return The ID of the ApsaraDB RDS instance from which data is synchronized to the cluster. This parameter is valid only for analytic instances.
     * 
     */
    private String rdsInstanceId;
    /**
     * @return The region ID  of the resource.
     * 
     */
    private String regionId;
    /**
     * @return The status of renewal.
     * 
     */
    private String renewalStatus;
    /**
     * @return The ID of the resource group.
     * 
     */
    private String resourceGroupId;
    /**
     * @return List of IP addresses allowed to access all databases of an cluster.
     * 
     */
    private List<String> securityIps;
    /**
     * @return The status of the resource.
     * 
     */
    private String status;
    /**
     * @return The specifications of storage resources in elastic mode. The resources are used for data read and write operations. The increase of resources can improve the read and write performance of your cluster.
     * 
     */
    private String storageResource;
    /**
     * @return A map of tags assigned to the cluster.
     * 
     */
    private Map<String,Object> tags;
    /**
     * @return The vpc cloud instance id.
     * 
     */
    private String vpcCloudInstanceId;
    /**
     * @return The vpc id.
     * 
     */
    private String vpcId;
    /**
     * @return The vswitch id.
     * 
     */
    private String vswitchId;
    /**
     * @return The zone ID  of the resource.
     * 
     */
    private String zoneId;

    private GetDBClustersCluster() {}
    /**
     * @return Auto-renewal period of an cluster, in the unit of the month.
     * 
     */
    public Integer autoRenewPeriod() {
        return this.autoRenewPeriod;
    }
    /**
     * @return The payment type of the resource.
     * 
     */
    public String chargeType() {
        return this.chargeType;
    }
    /**
     * @return The name of the service.
     * 
     */
    public String commodityCode() {
        return this.commodityCode;
    }
    /**
     * @return The specifications of computing resources in elastic mode. The increase of resources can speed up queries. AnalyticDB for MySQL automatically scales computing resources.
     * 
     */
    public String computeResource() {
        return this.computeResource;
    }
    /**
     * @return The endpoint of the cluster.
     * 
     */
    public String connectionString() {
        return this.connectionString;
    }
    /**
     * @return The CreateTime of the ADB cluster.
     * 
     */
    public String createTime() {
        return this.createTime;
    }
    /**
     * @return The db cluster category.
     * 
     */
    public String dbClusterCategory() {
        return this.dbClusterCategory;
    }
    /**
     * @return The db cluster id.
     * 
     */
    public String dbClusterId() {
        return this.dbClusterId;
    }
    /**
     * @return The db cluster network type.
     * 
     */
    public String dbClusterNetworkType() {
        return this.dbClusterNetworkType;
    }
    /**
     * @return The db cluster type.
     * 
     */
    public String dbClusterType() {
        return this.dbClusterType;
    }
    /**
     * @return The db cluster version.
     * 
     */
    public String dbClusterVersion() {
        return this.dbClusterVersion;
    }
    /**
     * @return The db node class.
     * 
     */
    public String dbNodeClass() {
        return this.dbNodeClass;
    }
    /**
     * @return The db node count.
     * 
     */
    public Integer dbNodeCount() {
        return this.dbNodeCount;
    }
    /**
     * @return The db node storage.
     * 
     */
    public Integer dbNodeStorage() {
        return this.dbNodeStorage;
    }
    /**
     * @return The description of DBCluster.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return The type of the disk.
     * 
     */
    public String diskType() {
        return this.diskType;
    }
    /**
     * @return The ID of the data synchronization task in Data Transmission Service (DTS). This parameter is valid only for analytic instances.
     * 
     */
    public String dtsJobId() {
        return this.dtsJobId;
    }
    /**
     * @return The elastic io resource.
     * 
     */
    public Integer elasticIoResource() {
        return this.elasticIoResource;
    }
    /**
     * @return The engine of the database.
     * 
     */
    public String engine() {
        return this.engine;
    }
    /**
     * @return The engine version of the database.
     * 
     */
    public String engineVersion() {
        return this.engineVersion;
    }
    /**
     * @return The number of nodes. The node resources are used for data computing in elastic mode.
     * 
     */
    public String executorCount() {
        return this.executorCount;
    }
    /**
     * @return The time when the cluster expires.
     * 
     */
    public String expireTime() {
        return this.expireTime;
    }
    /**
     * @return Indicates whether the cluster has expired.
     * 
     */
    public String expired() {
        return this.expired;
    }
    /**
     * @return The ID of the DBCluster.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The lock mode of the cluster.
     * 
     */
    public String lockMode() {
        return this.lockMode;
    }
    /**
     * @return The reason why the cluster is locked.
     * 
     */
    public String lockReason() {
        return this.lockReason;
    }
    /**
     * @return The maintenance window of the cluster.
     * 
     */
    public String maintainTime() {
        return this.maintainTime;
    }
    /**
     * @return The lock mode of the cluster.
     * 
     */
    public String mode() {
        return this.mode;
    }
    /**
     * @return The db cluster network type.
     * 
     */
    public String networkType() {
        return this.networkType;
    }
    /**
     * @return The payment type of the resource.
     * 
     */
    public String paymentType() {
        return this.paymentType;
    }
    /**
     * @return The port that is used to access the cluster.
     * 
     */
    public Integer port() {
        return this.port;
    }
    /**
     * @return The ID of the ApsaraDB RDS instance from which data is synchronized to the cluster. This parameter is valid only for analytic instances.
     * 
     */
    public String rdsInstanceId() {
        return this.rdsInstanceId;
    }
    /**
     * @return The region ID  of the resource.
     * 
     */
    public String regionId() {
        return this.regionId;
    }
    /**
     * @return The status of renewal.
     * 
     */
    public String renewalStatus() {
        return this.renewalStatus;
    }
    /**
     * @return The ID of the resource group.
     * 
     */
    public String resourceGroupId() {
        return this.resourceGroupId;
    }
    /**
     * @return List of IP addresses allowed to access all databases of an cluster.
     * 
     */
    public List<String> securityIps() {
        return this.securityIps;
    }
    /**
     * @return The status of the resource.
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return The specifications of storage resources in elastic mode. The resources are used for data read and write operations. The increase of resources can improve the read and write performance of your cluster.
     * 
     */
    public String storageResource() {
        return this.storageResource;
    }
    /**
     * @return A map of tags assigned to the cluster.
     * 
     */
    public Map<String,Object> tags() {
        return this.tags;
    }
    /**
     * @return The vpc cloud instance id.
     * 
     */
    public String vpcCloudInstanceId() {
        return this.vpcCloudInstanceId;
    }
    /**
     * @return The vpc id.
     * 
     */
    public String vpcId() {
        return this.vpcId;
    }
    /**
     * @return The vswitch id.
     * 
     */
    public String vswitchId() {
        return this.vswitchId;
    }
    /**
     * @return The zone ID  of the resource.
     * 
     */
    public String zoneId() {
        return this.zoneId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDBClustersCluster defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Integer autoRenewPeriod;
        private String chargeType;
        private String commodityCode;
        private String computeResource;
        private String connectionString;
        private String createTime;
        private String dbClusterCategory;
        private String dbClusterId;
        private String dbClusterNetworkType;
        private String dbClusterType;
        private String dbClusterVersion;
        private String dbNodeClass;
        private Integer dbNodeCount;
        private Integer dbNodeStorage;
        private String description;
        private String diskType;
        private String dtsJobId;
        private Integer elasticIoResource;
        private String engine;
        private String engineVersion;
        private String executorCount;
        private String expireTime;
        private String expired;
        private String id;
        private String lockMode;
        private String lockReason;
        private String maintainTime;
        private String mode;
        private String networkType;
        private String paymentType;
        private Integer port;
        private String rdsInstanceId;
        private String regionId;
        private String renewalStatus;
        private String resourceGroupId;
        private List<String> securityIps;
        private String status;
        private String storageResource;
        private Map<String,Object> tags;
        private String vpcCloudInstanceId;
        private String vpcId;
        private String vswitchId;
        private String zoneId;
        public Builder() {}
        public Builder(GetDBClustersCluster defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.autoRenewPeriod = defaults.autoRenewPeriod;
    	      this.chargeType = defaults.chargeType;
    	      this.commodityCode = defaults.commodityCode;
    	      this.computeResource = defaults.computeResource;
    	      this.connectionString = defaults.connectionString;
    	      this.createTime = defaults.createTime;
    	      this.dbClusterCategory = defaults.dbClusterCategory;
    	      this.dbClusterId = defaults.dbClusterId;
    	      this.dbClusterNetworkType = defaults.dbClusterNetworkType;
    	      this.dbClusterType = defaults.dbClusterType;
    	      this.dbClusterVersion = defaults.dbClusterVersion;
    	      this.dbNodeClass = defaults.dbNodeClass;
    	      this.dbNodeCount = defaults.dbNodeCount;
    	      this.dbNodeStorage = defaults.dbNodeStorage;
    	      this.description = defaults.description;
    	      this.diskType = defaults.diskType;
    	      this.dtsJobId = defaults.dtsJobId;
    	      this.elasticIoResource = defaults.elasticIoResource;
    	      this.engine = defaults.engine;
    	      this.engineVersion = defaults.engineVersion;
    	      this.executorCount = defaults.executorCount;
    	      this.expireTime = defaults.expireTime;
    	      this.expired = defaults.expired;
    	      this.id = defaults.id;
    	      this.lockMode = defaults.lockMode;
    	      this.lockReason = defaults.lockReason;
    	      this.maintainTime = defaults.maintainTime;
    	      this.mode = defaults.mode;
    	      this.networkType = defaults.networkType;
    	      this.paymentType = defaults.paymentType;
    	      this.port = defaults.port;
    	      this.rdsInstanceId = defaults.rdsInstanceId;
    	      this.regionId = defaults.regionId;
    	      this.renewalStatus = defaults.renewalStatus;
    	      this.resourceGroupId = defaults.resourceGroupId;
    	      this.securityIps = defaults.securityIps;
    	      this.status = defaults.status;
    	      this.storageResource = defaults.storageResource;
    	      this.tags = defaults.tags;
    	      this.vpcCloudInstanceId = defaults.vpcCloudInstanceId;
    	      this.vpcId = defaults.vpcId;
    	      this.vswitchId = defaults.vswitchId;
    	      this.zoneId = defaults.zoneId;
        }

        @CustomType.Setter
        public Builder autoRenewPeriod(Integer autoRenewPeriod) {
            if (autoRenewPeriod == null) {
              throw new MissingRequiredPropertyException("GetDBClustersCluster", "autoRenewPeriod");
            }
            this.autoRenewPeriod = autoRenewPeriod;
            return this;
        }
        @CustomType.Setter
        public Builder chargeType(String chargeType) {
            if (chargeType == null) {
              throw new MissingRequiredPropertyException("GetDBClustersCluster", "chargeType");
            }
            this.chargeType = chargeType;
            return this;
        }
        @CustomType.Setter
        public Builder commodityCode(String commodityCode) {
            if (commodityCode == null) {
              throw new MissingRequiredPropertyException("GetDBClustersCluster", "commodityCode");
            }
            this.commodityCode = commodityCode;
            return this;
        }
        @CustomType.Setter
        public Builder computeResource(String computeResource) {
            if (computeResource == null) {
              throw new MissingRequiredPropertyException("GetDBClustersCluster", "computeResource");
            }
            this.computeResource = computeResource;
            return this;
        }
        @CustomType.Setter
        public Builder connectionString(String connectionString) {
            if (connectionString == null) {
              throw new MissingRequiredPropertyException("GetDBClustersCluster", "connectionString");
            }
            this.connectionString = connectionString;
            return this;
        }
        @CustomType.Setter
        public Builder createTime(String createTime) {
            if (createTime == null) {
              throw new MissingRequiredPropertyException("GetDBClustersCluster", "createTime");
            }
            this.createTime = createTime;
            return this;
        }
        @CustomType.Setter
        public Builder dbClusterCategory(String dbClusterCategory) {
            if (dbClusterCategory == null) {
              throw new MissingRequiredPropertyException("GetDBClustersCluster", "dbClusterCategory");
            }
            this.dbClusterCategory = dbClusterCategory;
            return this;
        }
        @CustomType.Setter
        public Builder dbClusterId(String dbClusterId) {
            if (dbClusterId == null) {
              throw new MissingRequiredPropertyException("GetDBClustersCluster", "dbClusterId");
            }
            this.dbClusterId = dbClusterId;
            return this;
        }
        @CustomType.Setter
        public Builder dbClusterNetworkType(String dbClusterNetworkType) {
            if (dbClusterNetworkType == null) {
              throw new MissingRequiredPropertyException("GetDBClustersCluster", "dbClusterNetworkType");
            }
            this.dbClusterNetworkType = dbClusterNetworkType;
            return this;
        }
        @CustomType.Setter
        public Builder dbClusterType(String dbClusterType) {
            if (dbClusterType == null) {
              throw new MissingRequiredPropertyException("GetDBClustersCluster", "dbClusterType");
            }
            this.dbClusterType = dbClusterType;
            return this;
        }
        @CustomType.Setter
        public Builder dbClusterVersion(String dbClusterVersion) {
            if (dbClusterVersion == null) {
              throw new MissingRequiredPropertyException("GetDBClustersCluster", "dbClusterVersion");
            }
            this.dbClusterVersion = dbClusterVersion;
            return this;
        }
        @CustomType.Setter
        public Builder dbNodeClass(String dbNodeClass) {
            if (dbNodeClass == null) {
              throw new MissingRequiredPropertyException("GetDBClustersCluster", "dbNodeClass");
            }
            this.dbNodeClass = dbNodeClass;
            return this;
        }
        @CustomType.Setter
        public Builder dbNodeCount(Integer dbNodeCount) {
            if (dbNodeCount == null) {
              throw new MissingRequiredPropertyException("GetDBClustersCluster", "dbNodeCount");
            }
            this.dbNodeCount = dbNodeCount;
            return this;
        }
        @CustomType.Setter
        public Builder dbNodeStorage(Integer dbNodeStorage) {
            if (dbNodeStorage == null) {
              throw new MissingRequiredPropertyException("GetDBClustersCluster", "dbNodeStorage");
            }
            this.dbNodeStorage = dbNodeStorage;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetDBClustersCluster", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder diskType(String diskType) {
            if (diskType == null) {
              throw new MissingRequiredPropertyException("GetDBClustersCluster", "diskType");
            }
            this.diskType = diskType;
            return this;
        }
        @CustomType.Setter
        public Builder dtsJobId(String dtsJobId) {
            if (dtsJobId == null) {
              throw new MissingRequiredPropertyException("GetDBClustersCluster", "dtsJobId");
            }
            this.dtsJobId = dtsJobId;
            return this;
        }
        @CustomType.Setter
        public Builder elasticIoResource(Integer elasticIoResource) {
            if (elasticIoResource == null) {
              throw new MissingRequiredPropertyException("GetDBClustersCluster", "elasticIoResource");
            }
            this.elasticIoResource = elasticIoResource;
            return this;
        }
        @CustomType.Setter
        public Builder engine(String engine) {
            if (engine == null) {
              throw new MissingRequiredPropertyException("GetDBClustersCluster", "engine");
            }
            this.engine = engine;
            return this;
        }
        @CustomType.Setter
        public Builder engineVersion(String engineVersion) {
            if (engineVersion == null) {
              throw new MissingRequiredPropertyException("GetDBClustersCluster", "engineVersion");
            }
            this.engineVersion = engineVersion;
            return this;
        }
        @CustomType.Setter
        public Builder executorCount(String executorCount) {
            if (executorCount == null) {
              throw new MissingRequiredPropertyException("GetDBClustersCluster", "executorCount");
            }
            this.executorCount = executorCount;
            return this;
        }
        @CustomType.Setter
        public Builder expireTime(String expireTime) {
            if (expireTime == null) {
              throw new MissingRequiredPropertyException("GetDBClustersCluster", "expireTime");
            }
            this.expireTime = expireTime;
            return this;
        }
        @CustomType.Setter
        public Builder expired(String expired) {
            if (expired == null) {
              throw new MissingRequiredPropertyException("GetDBClustersCluster", "expired");
            }
            this.expired = expired;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetDBClustersCluster", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder lockMode(String lockMode) {
            if (lockMode == null) {
              throw new MissingRequiredPropertyException("GetDBClustersCluster", "lockMode");
            }
            this.lockMode = lockMode;
            return this;
        }
        @CustomType.Setter
        public Builder lockReason(String lockReason) {
            if (lockReason == null) {
              throw new MissingRequiredPropertyException("GetDBClustersCluster", "lockReason");
            }
            this.lockReason = lockReason;
            return this;
        }
        @CustomType.Setter
        public Builder maintainTime(String maintainTime) {
            if (maintainTime == null) {
              throw new MissingRequiredPropertyException("GetDBClustersCluster", "maintainTime");
            }
            this.maintainTime = maintainTime;
            return this;
        }
        @CustomType.Setter
        public Builder mode(String mode) {
            if (mode == null) {
              throw new MissingRequiredPropertyException("GetDBClustersCluster", "mode");
            }
            this.mode = mode;
            return this;
        }
        @CustomType.Setter
        public Builder networkType(String networkType) {
            if (networkType == null) {
              throw new MissingRequiredPropertyException("GetDBClustersCluster", "networkType");
            }
            this.networkType = networkType;
            return this;
        }
        @CustomType.Setter
        public Builder paymentType(String paymentType) {
            if (paymentType == null) {
              throw new MissingRequiredPropertyException("GetDBClustersCluster", "paymentType");
            }
            this.paymentType = paymentType;
            return this;
        }
        @CustomType.Setter
        public Builder port(Integer port) {
            if (port == null) {
              throw new MissingRequiredPropertyException("GetDBClustersCluster", "port");
            }
            this.port = port;
            return this;
        }
        @CustomType.Setter
        public Builder rdsInstanceId(String rdsInstanceId) {
            if (rdsInstanceId == null) {
              throw new MissingRequiredPropertyException("GetDBClustersCluster", "rdsInstanceId");
            }
            this.rdsInstanceId = rdsInstanceId;
            return this;
        }
        @CustomType.Setter
        public Builder regionId(String regionId) {
            if (regionId == null) {
              throw new MissingRequiredPropertyException("GetDBClustersCluster", "regionId");
            }
            this.regionId = regionId;
            return this;
        }
        @CustomType.Setter
        public Builder renewalStatus(String renewalStatus) {
            if (renewalStatus == null) {
              throw new MissingRequiredPropertyException("GetDBClustersCluster", "renewalStatus");
            }
            this.renewalStatus = renewalStatus;
            return this;
        }
        @CustomType.Setter
        public Builder resourceGroupId(String resourceGroupId) {
            if (resourceGroupId == null) {
              throw new MissingRequiredPropertyException("GetDBClustersCluster", "resourceGroupId");
            }
            this.resourceGroupId = resourceGroupId;
            return this;
        }
        @CustomType.Setter
        public Builder securityIps(List<String> securityIps) {
            if (securityIps == null) {
              throw new MissingRequiredPropertyException("GetDBClustersCluster", "securityIps");
            }
            this.securityIps = securityIps;
            return this;
        }
        public Builder securityIps(String... securityIps) {
            return securityIps(List.of(securityIps));
        }
        @CustomType.Setter
        public Builder status(String status) {
            if (status == null) {
              throw new MissingRequiredPropertyException("GetDBClustersCluster", "status");
            }
            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder storageResource(String storageResource) {
            if (storageResource == null) {
              throw new MissingRequiredPropertyException("GetDBClustersCluster", "storageResource");
            }
            this.storageResource = storageResource;
            return this;
        }
        @CustomType.Setter
        public Builder tags(Map<String,Object> tags) {
            if (tags == null) {
              throw new MissingRequiredPropertyException("GetDBClustersCluster", "tags");
            }
            this.tags = tags;
            return this;
        }
        @CustomType.Setter
        public Builder vpcCloudInstanceId(String vpcCloudInstanceId) {
            if (vpcCloudInstanceId == null) {
              throw new MissingRequiredPropertyException("GetDBClustersCluster", "vpcCloudInstanceId");
            }
            this.vpcCloudInstanceId = vpcCloudInstanceId;
            return this;
        }
        @CustomType.Setter
        public Builder vpcId(String vpcId) {
            if (vpcId == null) {
              throw new MissingRequiredPropertyException("GetDBClustersCluster", "vpcId");
            }
            this.vpcId = vpcId;
            return this;
        }
        @CustomType.Setter
        public Builder vswitchId(String vswitchId) {
            if (vswitchId == null) {
              throw new MissingRequiredPropertyException("GetDBClustersCluster", "vswitchId");
            }
            this.vswitchId = vswitchId;
            return this;
        }
        @CustomType.Setter
        public Builder zoneId(String zoneId) {
            if (zoneId == null) {
              throw new MissingRequiredPropertyException("GetDBClustersCluster", "zoneId");
            }
            this.zoneId = zoneId;
            return this;
        }
        public GetDBClustersCluster build() {
            final var _resultValue = new GetDBClustersCluster();
            _resultValue.autoRenewPeriod = autoRenewPeriod;
            _resultValue.chargeType = chargeType;
            _resultValue.commodityCode = commodityCode;
            _resultValue.computeResource = computeResource;
            _resultValue.connectionString = connectionString;
            _resultValue.createTime = createTime;
            _resultValue.dbClusterCategory = dbClusterCategory;
            _resultValue.dbClusterId = dbClusterId;
            _resultValue.dbClusterNetworkType = dbClusterNetworkType;
            _resultValue.dbClusterType = dbClusterType;
            _resultValue.dbClusterVersion = dbClusterVersion;
            _resultValue.dbNodeClass = dbNodeClass;
            _resultValue.dbNodeCount = dbNodeCount;
            _resultValue.dbNodeStorage = dbNodeStorage;
            _resultValue.description = description;
            _resultValue.diskType = diskType;
            _resultValue.dtsJobId = dtsJobId;
            _resultValue.elasticIoResource = elasticIoResource;
            _resultValue.engine = engine;
            _resultValue.engineVersion = engineVersion;
            _resultValue.executorCount = executorCount;
            _resultValue.expireTime = expireTime;
            _resultValue.expired = expired;
            _resultValue.id = id;
            _resultValue.lockMode = lockMode;
            _resultValue.lockReason = lockReason;
            _resultValue.maintainTime = maintainTime;
            _resultValue.mode = mode;
            _resultValue.networkType = networkType;
            _resultValue.paymentType = paymentType;
            _resultValue.port = port;
            _resultValue.rdsInstanceId = rdsInstanceId;
            _resultValue.regionId = regionId;
            _resultValue.renewalStatus = renewalStatus;
            _resultValue.resourceGroupId = resourceGroupId;
            _resultValue.securityIps = securityIps;
            _resultValue.status = status;
            _resultValue.storageResource = storageResource;
            _resultValue.tags = tags;
            _resultValue.vpcCloudInstanceId = vpcCloudInstanceId;
            _resultValue.vpcId = vpcId;
            _resultValue.vswitchId = vswitchId;
            _resultValue.zoneId = zoneId;
            return _resultValue;
        }
    }
}
