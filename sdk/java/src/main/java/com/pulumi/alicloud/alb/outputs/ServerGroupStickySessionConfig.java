// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.alb.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ServerGroupStickySessionConfig {
    /**
     * @return the cookie that is configured on the server. **NOTE:** This parameter exists if the `StickySession`
     * parameter is set to `On` and the `StickySessionType` parameter is set to `server`.
     * 
     */
    private @Nullable String cookie;
    /**
     * @return The timeout period of a cookie. The timeout period of a cookie. Unit: seconds. Valid values: `1`
     * to `86400`. Default value: `1000`.
     * 
     */
    private @Nullable Integer cookieTimeout;
    /**
     * @return Indicates whether sticky session is enabled. Values: `true` and `false`. Default
     * value: `false`.  **NOTE:** This parameter exists if the `StickySession` parameter is set to `On`.
     * 
     */
    private @Nullable Boolean stickySessionEnabled;
    /**
     * @return The method that is used to handle a cookie. Values: `Server` and `Insert`.
     * 
     */
    private @Nullable String stickySessionType;

    private ServerGroupStickySessionConfig() {}
    /**
     * @return the cookie that is configured on the server. **NOTE:** This parameter exists if the `StickySession`
     * parameter is set to `On` and the `StickySessionType` parameter is set to `server`.
     * 
     */
    public Optional<String> cookie() {
        return Optional.ofNullable(this.cookie);
    }
    /**
     * @return The timeout period of a cookie. The timeout period of a cookie. Unit: seconds. Valid values: `1`
     * to `86400`. Default value: `1000`.
     * 
     */
    public Optional<Integer> cookieTimeout() {
        return Optional.ofNullable(this.cookieTimeout);
    }
    /**
     * @return Indicates whether sticky session is enabled. Values: `true` and `false`. Default
     * value: `false`.  **NOTE:** This parameter exists if the `StickySession` parameter is set to `On`.
     * 
     */
    public Optional<Boolean> stickySessionEnabled() {
        return Optional.ofNullable(this.stickySessionEnabled);
    }
    /**
     * @return The method that is used to handle a cookie. Values: `Server` and `Insert`.
     * 
     */
    public Optional<String> stickySessionType() {
        return Optional.ofNullable(this.stickySessionType);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ServerGroupStickySessionConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String cookie;
        private @Nullable Integer cookieTimeout;
        private @Nullable Boolean stickySessionEnabled;
        private @Nullable String stickySessionType;
        public Builder() {}
        public Builder(ServerGroupStickySessionConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.cookie = defaults.cookie;
    	      this.cookieTimeout = defaults.cookieTimeout;
    	      this.stickySessionEnabled = defaults.stickySessionEnabled;
    	      this.stickySessionType = defaults.stickySessionType;
        }

        @CustomType.Setter
        public Builder cookie(@Nullable String cookie) {
            this.cookie = cookie;
            return this;
        }
        @CustomType.Setter
        public Builder cookieTimeout(@Nullable Integer cookieTimeout) {
            this.cookieTimeout = cookieTimeout;
            return this;
        }
        @CustomType.Setter
        public Builder stickySessionEnabled(@Nullable Boolean stickySessionEnabled) {
            this.stickySessionEnabled = stickySessionEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder stickySessionType(@Nullable String stickySessionType) {
            this.stickySessionType = stickySessionType;
            return this;
        }
        public ServerGroupStickySessionConfig build() {
            final var o = new ServerGroupStickySessionConfig();
            o.cookie = cookie;
            o.cookieTimeout = cookieTimeout;
            o.stickySessionEnabled = stickySessionEnabled;
            o.stickySessionType = stickySessionType;
            return o;
        }
    }
}
