// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.esa;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RedirectRuleArgs extends com.pulumi.resources.ResourceArgs {

    public static final RedirectRuleArgs Empty = new RedirectRuleArgs();

    /**
     * Indicates whether the feature of retaining the query string is enabled. Valid values:
     * 
     * - on
     * - off
     * 
     */
    @Import(name="reserveQueryString", required=true)
    private Output<String> reserveQueryString;

    /**
     * @return Indicates whether the feature of retaining the query string is enabled. Valid values:
     * 
     * - on
     * - off
     * 
     */
    public Output<String> reserveQueryString() {
        return this.reserveQueryString;
    }

    /**
     * Rule content, using conditional expressions to match user requests. When adding global configuration, this parameter does not need to be set. There are two usage scenarios:
     * ● Match all incoming requests: value set to true
     * ● Match specified request: Set the value to a custom expression, for example: (http.host eq \&#34;video.example.com\&#34;)
     * 
     */
    @Import(name="rule")
    private @Nullable Output<String> rule;

    /**
     * @return Rule content, using conditional expressions to match user requests. When adding global configuration, this parameter does not need to be set. There are two usage scenarios:
     * ● Match all incoming requests: value set to true
     * ● Match specified request: Set the value to a custom expression, for example: (http.host eq \&#34;video.example.com\&#34;)
     * 
     */
    public Optional<Output<String>> rule() {
        return Optional.ofNullable(this.rule);
    }

    /**
     * Rule switch. When adding global configuration, this parameter does not need to be set. Value range:
     * 
     */
    @Import(name="ruleEnable")
    private @Nullable Output<String> ruleEnable;

    /**
     * @return Rule switch. When adding global configuration, this parameter does not need to be set. Value range:
     * 
     */
    public Optional<Output<String>> ruleEnable() {
        return Optional.ofNullable(this.ruleEnable);
    }

    /**
     * Rule name. When adding global configuration, this parameter does not need to be set.
     * 
     */
    @Import(name="ruleName")
    private @Nullable Output<String> ruleName;

    /**
     * @return Rule name. When adding global configuration, this parameter does not need to be set.
     * 
     */
    public Optional<Output<String>> ruleName() {
        return Optional.ofNullable(this.ruleName);
    }

    /**
     * The website ID, which can be obtained by calling the [ListSites](https://www.alibabacloud.com/help/en/doc-detail/2850189.html) operation.
     * 
     */
    @Import(name="siteId", required=true)
    private Output<Integer> siteId;

    /**
     * @return The website ID, which can be obtained by calling the [ListSites](https://www.alibabacloud.com/help/en/doc-detail/2850189.html) operation.
     * 
     */
    public Output<Integer> siteId() {
        return this.siteId;
    }

    /**
     * The version number of the site configuration. For sites that have enabled configuration version management, this parameter can be used to specify the effective version of the configuration site, which defaults to version 0.
     * 
     */
    @Import(name="siteVersion")
    private @Nullable Output<Integer> siteVersion;

    /**
     * @return The version number of the site configuration. For sites that have enabled configuration version management, this parameter can be used to specify the effective version of the configuration site, which defaults to version 0.
     * 
     */
    public Optional<Output<Integer>> siteVersion() {
        return Optional.ofNullable(this.siteVersion);
    }

    /**
     * The response code that you want to use to indicate URL redirection. Valid values:
     * 
     * - 301
     * - 302
     * - 303
     * - 307
     * - 308
     * 
     */
    @Import(name="statusCode", required=true)
    private Output<String> statusCode;

    /**
     * @return The response code that you want to use to indicate URL redirection. Valid values:
     * 
     * - 301
     * - 302
     * - 303
     * - 307
     * - 308
     * 
     */
    public Output<String> statusCode() {
        return this.statusCode;
    }

    /**
     * The destination URL to which requests are redirected.
     * 
     */
    @Import(name="targetUrl", required=true)
    private Output<String> targetUrl;

    /**
     * @return The destination URL to which requests are redirected.
     * 
     */
    public Output<String> targetUrl() {
        return this.targetUrl;
    }

    /**
     * The redirect type. Valid value:
     * 
     * - static
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return The redirect type. Valid value:
     * 
     * - static
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    private RedirectRuleArgs() {}

    private RedirectRuleArgs(RedirectRuleArgs $) {
        this.reserveQueryString = $.reserveQueryString;
        this.rule = $.rule;
        this.ruleEnable = $.ruleEnable;
        this.ruleName = $.ruleName;
        this.siteId = $.siteId;
        this.siteVersion = $.siteVersion;
        this.statusCode = $.statusCode;
        this.targetUrl = $.targetUrl;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RedirectRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RedirectRuleArgs $;

        public Builder() {
            $ = new RedirectRuleArgs();
        }

        public Builder(RedirectRuleArgs defaults) {
            $ = new RedirectRuleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param reserveQueryString Indicates whether the feature of retaining the query string is enabled. Valid values:
         * 
         * - on
         * - off
         * 
         * @return builder
         * 
         */
        public Builder reserveQueryString(Output<String> reserveQueryString) {
            $.reserveQueryString = reserveQueryString;
            return this;
        }

        /**
         * @param reserveQueryString Indicates whether the feature of retaining the query string is enabled. Valid values:
         * 
         * - on
         * - off
         * 
         * @return builder
         * 
         */
        public Builder reserveQueryString(String reserveQueryString) {
            return reserveQueryString(Output.of(reserveQueryString));
        }

        /**
         * @param rule Rule content, using conditional expressions to match user requests. When adding global configuration, this parameter does not need to be set. There are two usage scenarios:
         * ● Match all incoming requests: value set to true
         * ● Match specified request: Set the value to a custom expression, for example: (http.host eq \&#34;video.example.com\&#34;)
         * 
         * @return builder
         * 
         */
        public Builder rule(@Nullable Output<String> rule) {
            $.rule = rule;
            return this;
        }

        /**
         * @param rule Rule content, using conditional expressions to match user requests. When adding global configuration, this parameter does not need to be set. There are two usage scenarios:
         * ● Match all incoming requests: value set to true
         * ● Match specified request: Set the value to a custom expression, for example: (http.host eq \&#34;video.example.com\&#34;)
         * 
         * @return builder
         * 
         */
        public Builder rule(String rule) {
            return rule(Output.of(rule));
        }

        /**
         * @param ruleEnable Rule switch. When adding global configuration, this parameter does not need to be set. Value range:
         * 
         * @return builder
         * 
         */
        public Builder ruleEnable(@Nullable Output<String> ruleEnable) {
            $.ruleEnable = ruleEnable;
            return this;
        }

        /**
         * @param ruleEnable Rule switch. When adding global configuration, this parameter does not need to be set. Value range:
         * 
         * @return builder
         * 
         */
        public Builder ruleEnable(String ruleEnable) {
            return ruleEnable(Output.of(ruleEnable));
        }

        /**
         * @param ruleName Rule name. When adding global configuration, this parameter does not need to be set.
         * 
         * @return builder
         * 
         */
        public Builder ruleName(@Nullable Output<String> ruleName) {
            $.ruleName = ruleName;
            return this;
        }

        /**
         * @param ruleName Rule name. When adding global configuration, this parameter does not need to be set.
         * 
         * @return builder
         * 
         */
        public Builder ruleName(String ruleName) {
            return ruleName(Output.of(ruleName));
        }

        /**
         * @param siteId The website ID, which can be obtained by calling the [ListSites](https://www.alibabacloud.com/help/en/doc-detail/2850189.html) operation.
         * 
         * @return builder
         * 
         */
        public Builder siteId(Output<Integer> siteId) {
            $.siteId = siteId;
            return this;
        }

        /**
         * @param siteId The website ID, which can be obtained by calling the [ListSites](https://www.alibabacloud.com/help/en/doc-detail/2850189.html) operation.
         * 
         * @return builder
         * 
         */
        public Builder siteId(Integer siteId) {
            return siteId(Output.of(siteId));
        }

        /**
         * @param siteVersion The version number of the site configuration. For sites that have enabled configuration version management, this parameter can be used to specify the effective version of the configuration site, which defaults to version 0.
         * 
         * @return builder
         * 
         */
        public Builder siteVersion(@Nullable Output<Integer> siteVersion) {
            $.siteVersion = siteVersion;
            return this;
        }

        /**
         * @param siteVersion The version number of the site configuration. For sites that have enabled configuration version management, this parameter can be used to specify the effective version of the configuration site, which defaults to version 0.
         * 
         * @return builder
         * 
         */
        public Builder siteVersion(Integer siteVersion) {
            return siteVersion(Output.of(siteVersion));
        }

        /**
         * @param statusCode The response code that you want to use to indicate URL redirection. Valid values:
         * 
         * - 301
         * - 302
         * - 303
         * - 307
         * - 308
         * 
         * @return builder
         * 
         */
        public Builder statusCode(Output<String> statusCode) {
            $.statusCode = statusCode;
            return this;
        }

        /**
         * @param statusCode The response code that you want to use to indicate URL redirection. Valid values:
         * 
         * - 301
         * - 302
         * - 303
         * - 307
         * - 308
         * 
         * @return builder
         * 
         */
        public Builder statusCode(String statusCode) {
            return statusCode(Output.of(statusCode));
        }

        /**
         * @param targetUrl The destination URL to which requests are redirected.
         * 
         * @return builder
         * 
         */
        public Builder targetUrl(Output<String> targetUrl) {
            $.targetUrl = targetUrl;
            return this;
        }

        /**
         * @param targetUrl The destination URL to which requests are redirected.
         * 
         * @return builder
         * 
         */
        public Builder targetUrl(String targetUrl) {
            return targetUrl(Output.of(targetUrl));
        }

        /**
         * @param type The redirect type. Valid value:
         * 
         * - static
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type The redirect type. Valid value:
         * 
         * - static
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public RedirectRuleArgs build() {
            if ($.reserveQueryString == null) {
                throw new MissingRequiredPropertyException("RedirectRuleArgs", "reserveQueryString");
            }
            if ($.siteId == null) {
                throw new MissingRequiredPropertyException("RedirectRuleArgs", "siteId");
            }
            if ($.statusCode == null) {
                throw new MissingRequiredPropertyException("RedirectRuleArgs", "statusCode");
            }
            if ($.targetUrl == null) {
                throw new MissingRequiredPropertyException("RedirectRuleArgs", "targetUrl");
            }
            if ($.type == null) {
                throw new MissingRequiredPropertyException("RedirectRuleArgs", "type");
            }
            return $;
        }
    }

}
