// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.oos.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetTemplatesArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetTemplatesArgs Empty = new GetTemplatesArgs();

    /**
     * The category of template.
     * 
     */
    @Import(name="category")
    private @Nullable Output<String> category;

    /**
     * @return The category of template.
     * 
     */
    public Optional<Output<String>> category() {
        return Optional.ofNullable(this.category);
    }

    /**
     * The creator of the template.
     * 
     */
    @Import(name="createdBy")
    private @Nullable Output<String> createdBy;

    /**
     * @return The creator of the template.
     * 
     */
    public Optional<Output<String>> createdBy() {
        return Optional.ofNullable(this.createdBy);
    }

    /**
     * The template whose creation time is less than or equal to the specified time. The format is: YYYY-MM-DDThh:mm::ssZ.
     * 
     */
    @Import(name="createdDate")
    private @Nullable Output<String> createdDate;

    /**
     * @return The template whose creation time is less than or equal to the specified time. The format is: YYYY-MM-DDThh:mm::ssZ.
     * 
     */
    public Optional<Output<String>> createdDate() {
        return Optional.ofNullable(this.createdDate);
    }

    /**
     * Create a template whose time is greater than or equal to the specified time. The format is: YYYY-MM-DDThh:mm:ssZ.
     * 
     */
    @Import(name="createdDateAfter")
    private @Nullable Output<String> createdDateAfter;

    /**
     * @return Create a template whose time is greater than or equal to the specified time. The format is: YYYY-MM-DDThh:mm:ssZ.
     * 
     */
    public Optional<Output<String>> createdDateAfter() {
        return Optional.ofNullable(this.createdDateAfter);
    }

    /**
     * Is it triggered successfully.
     * 
     */
    @Import(name="hasTrigger")
    private @Nullable Output<Boolean> hasTrigger;

    /**
     * @return Is it triggered successfully.
     * 
     */
    public Optional<Output<Boolean>> hasTrigger() {
        return Optional.ofNullable(this.hasTrigger);
    }

    /**
     * A list of OOS Template ids. Each element in the list is same as template_name.
     * 
     */
    @Import(name="ids")
    private @Nullable Output<List<String>> ids;

    /**
     * @return A list of OOS Template ids. Each element in the list is same as template_name.
     * 
     */
    public Optional<Output<List<String>>> ids() {
        return Optional.ofNullable(this.ids);
    }

    /**
     * A regex string to filter the results by the template_name.
     * 
     */
    @Import(name="nameRegex")
    private @Nullable Output<String> nameRegex;

    /**
     * @return A regex string to filter the results by the template_name.
     * 
     */
    public Optional<Output<String>> nameRegex() {
        return Optional.ofNullable(this.nameRegex);
    }

    /**
     * File name where to save data source results (after running `pulumi preview`).
     * 
     */
    @Import(name="outputFile")
    private @Nullable Output<String> outputFile;

    /**
     * @return File name where to save data source results (after running `pulumi preview`).
     * 
     */
    public Optional<Output<String>> outputFile() {
        return Optional.ofNullable(this.outputFile);
    }

    /**
     * The sharing type of the template. Valid values: `Private`, `Public`.
     * 
     */
    @Import(name="shareType")
    private @Nullable Output<String> shareType;

    /**
     * @return The sharing type of the template. Valid values: `Private`, `Public`.
     * 
     */
    public Optional<Output<String>> shareType() {
        return Optional.ofNullable(this.shareType);
    }

    /**
     * Sort field. Valid values: `TotalExecutionCount`, `Popularity`, `TemplateName` and `CreatedDate`. Default to `TotalExecutionCount`.
     * 
     */
    @Import(name="sortField")
    private @Nullable Output<String> sortField;

    /**
     * @return Sort field. Valid values: `TotalExecutionCount`, `Popularity`, `TemplateName` and `CreatedDate`. Default to `TotalExecutionCount`.
     * 
     */
    public Optional<Output<String>> sortField() {
        return Optional.ofNullable(this.sortField);
    }

    /**
     * Sort order. Valid values: `Ascending`, `Descending`. Default to `Descending`
     * 
     */
    @Import(name="sortOrder")
    private @Nullable Output<String> sortOrder;

    /**
     * @return Sort order. Valid values: `Ascending`, `Descending`. Default to `Descending`
     * 
     */
    public Optional<Output<String>> sortOrder() {
        return Optional.ofNullable(this.sortOrder);
    }

    /**
     * A mapping of tags to assign to the resource.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return A mapping of tags to assign to the resource.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * The format of the template. Valid values: `JSON`, `YAML`.
     * 
     */
    @Import(name="templateFormat")
    private @Nullable Output<String> templateFormat;

    /**
     * @return The format of the template. Valid values: `JSON`, `YAML`.
     * 
     */
    public Optional<Output<String>> templateFormat() {
        return Optional.ofNullable(this.templateFormat);
    }

    /**
     * The type of OOS Template.
     * 
     */
    @Import(name="templateType")
    private @Nullable Output<String> templateType;

    /**
     * @return The type of OOS Template.
     * 
     */
    public Optional<Output<String>> templateType() {
        return Optional.ofNullable(this.templateType);
    }

    private GetTemplatesArgs() {}

    private GetTemplatesArgs(GetTemplatesArgs $) {
        this.category = $.category;
        this.createdBy = $.createdBy;
        this.createdDate = $.createdDate;
        this.createdDateAfter = $.createdDateAfter;
        this.hasTrigger = $.hasTrigger;
        this.ids = $.ids;
        this.nameRegex = $.nameRegex;
        this.outputFile = $.outputFile;
        this.shareType = $.shareType;
        this.sortField = $.sortField;
        this.sortOrder = $.sortOrder;
        this.tags = $.tags;
        this.templateFormat = $.templateFormat;
        this.templateType = $.templateType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetTemplatesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetTemplatesArgs $;

        public Builder() {
            $ = new GetTemplatesArgs();
        }

        public Builder(GetTemplatesArgs defaults) {
            $ = new GetTemplatesArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param category The category of template.
         * 
         * @return builder
         * 
         */
        public Builder category(@Nullable Output<String> category) {
            $.category = category;
            return this;
        }

        /**
         * @param category The category of template.
         * 
         * @return builder
         * 
         */
        public Builder category(String category) {
            return category(Output.of(category));
        }

        /**
         * @param createdBy The creator of the template.
         * 
         * @return builder
         * 
         */
        public Builder createdBy(@Nullable Output<String> createdBy) {
            $.createdBy = createdBy;
            return this;
        }

        /**
         * @param createdBy The creator of the template.
         * 
         * @return builder
         * 
         */
        public Builder createdBy(String createdBy) {
            return createdBy(Output.of(createdBy));
        }

        /**
         * @param createdDate The template whose creation time is less than or equal to the specified time. The format is: YYYY-MM-DDThh:mm::ssZ.
         * 
         * @return builder
         * 
         */
        public Builder createdDate(@Nullable Output<String> createdDate) {
            $.createdDate = createdDate;
            return this;
        }

        /**
         * @param createdDate The template whose creation time is less than or equal to the specified time. The format is: YYYY-MM-DDThh:mm::ssZ.
         * 
         * @return builder
         * 
         */
        public Builder createdDate(String createdDate) {
            return createdDate(Output.of(createdDate));
        }

        /**
         * @param createdDateAfter Create a template whose time is greater than or equal to the specified time. The format is: YYYY-MM-DDThh:mm:ssZ.
         * 
         * @return builder
         * 
         */
        public Builder createdDateAfter(@Nullable Output<String> createdDateAfter) {
            $.createdDateAfter = createdDateAfter;
            return this;
        }

        /**
         * @param createdDateAfter Create a template whose time is greater than or equal to the specified time. The format is: YYYY-MM-DDThh:mm:ssZ.
         * 
         * @return builder
         * 
         */
        public Builder createdDateAfter(String createdDateAfter) {
            return createdDateAfter(Output.of(createdDateAfter));
        }

        /**
         * @param hasTrigger Is it triggered successfully.
         * 
         * @return builder
         * 
         */
        public Builder hasTrigger(@Nullable Output<Boolean> hasTrigger) {
            $.hasTrigger = hasTrigger;
            return this;
        }

        /**
         * @param hasTrigger Is it triggered successfully.
         * 
         * @return builder
         * 
         */
        public Builder hasTrigger(Boolean hasTrigger) {
            return hasTrigger(Output.of(hasTrigger));
        }

        /**
         * @param ids A list of OOS Template ids. Each element in the list is same as template_name.
         * 
         * @return builder
         * 
         */
        public Builder ids(@Nullable Output<List<String>> ids) {
            $.ids = ids;
            return this;
        }

        /**
         * @param ids A list of OOS Template ids. Each element in the list is same as template_name.
         * 
         * @return builder
         * 
         */
        public Builder ids(List<String> ids) {
            return ids(Output.of(ids));
        }

        /**
         * @param ids A list of OOS Template ids. Each element in the list is same as template_name.
         * 
         * @return builder
         * 
         */
        public Builder ids(String... ids) {
            return ids(List.of(ids));
        }

        /**
         * @param nameRegex A regex string to filter the results by the template_name.
         * 
         * @return builder
         * 
         */
        public Builder nameRegex(@Nullable Output<String> nameRegex) {
            $.nameRegex = nameRegex;
            return this;
        }

        /**
         * @param nameRegex A regex string to filter the results by the template_name.
         * 
         * @return builder
         * 
         */
        public Builder nameRegex(String nameRegex) {
            return nameRegex(Output.of(nameRegex));
        }

        /**
         * @param outputFile File name where to save data source results (after running `pulumi preview`).
         * 
         * @return builder
         * 
         */
        public Builder outputFile(@Nullable Output<String> outputFile) {
            $.outputFile = outputFile;
            return this;
        }

        /**
         * @param outputFile File name where to save data source results (after running `pulumi preview`).
         * 
         * @return builder
         * 
         */
        public Builder outputFile(String outputFile) {
            return outputFile(Output.of(outputFile));
        }

        /**
         * @param shareType The sharing type of the template. Valid values: `Private`, `Public`.
         * 
         * @return builder
         * 
         */
        public Builder shareType(@Nullable Output<String> shareType) {
            $.shareType = shareType;
            return this;
        }

        /**
         * @param shareType The sharing type of the template. Valid values: `Private`, `Public`.
         * 
         * @return builder
         * 
         */
        public Builder shareType(String shareType) {
            return shareType(Output.of(shareType));
        }

        /**
         * @param sortField Sort field. Valid values: `TotalExecutionCount`, `Popularity`, `TemplateName` and `CreatedDate`. Default to `TotalExecutionCount`.
         * 
         * @return builder
         * 
         */
        public Builder sortField(@Nullable Output<String> sortField) {
            $.sortField = sortField;
            return this;
        }

        /**
         * @param sortField Sort field. Valid values: `TotalExecutionCount`, `Popularity`, `TemplateName` and `CreatedDate`. Default to `TotalExecutionCount`.
         * 
         * @return builder
         * 
         */
        public Builder sortField(String sortField) {
            return sortField(Output.of(sortField));
        }

        /**
         * @param sortOrder Sort order. Valid values: `Ascending`, `Descending`. Default to `Descending`
         * 
         * @return builder
         * 
         */
        public Builder sortOrder(@Nullable Output<String> sortOrder) {
            $.sortOrder = sortOrder;
            return this;
        }

        /**
         * @param sortOrder Sort order. Valid values: `Ascending`, `Descending`. Default to `Descending`
         * 
         * @return builder
         * 
         */
        public Builder sortOrder(String sortOrder) {
            return sortOrder(Output.of(sortOrder));
        }

        /**
         * @param tags A mapping of tags to assign to the resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags A mapping of tags to assign to the resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param templateFormat The format of the template. Valid values: `JSON`, `YAML`.
         * 
         * @return builder
         * 
         */
        public Builder templateFormat(@Nullable Output<String> templateFormat) {
            $.templateFormat = templateFormat;
            return this;
        }

        /**
         * @param templateFormat The format of the template. Valid values: `JSON`, `YAML`.
         * 
         * @return builder
         * 
         */
        public Builder templateFormat(String templateFormat) {
            return templateFormat(Output.of(templateFormat));
        }

        /**
         * @param templateType The type of OOS Template.
         * 
         * @return builder
         * 
         */
        public Builder templateType(@Nullable Output<String> templateType) {
            $.templateType = templateType;
            return this;
        }

        /**
         * @param templateType The type of OOS Template.
         * 
         * @return builder
         * 
         */
        public Builder templateType(String templateType) {
            return templateType(Output.of(templateType));
        }

        public GetTemplatesArgs build() {
            return $;
        }
    }

}
