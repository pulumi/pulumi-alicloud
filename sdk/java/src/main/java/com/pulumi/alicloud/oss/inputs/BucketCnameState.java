// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.oss.inputs;

import com.pulumi.alicloud.oss.inputs.BucketCnameCertificateArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class BucketCnameState extends com.pulumi.resources.ResourceArgs {

    public static final BucketCnameState Empty = new BucketCnameState();

    /**
     * The bucket to which the custom domain name belongs
     * 
     */
    @Import(name="bucket")
    private @Nullable Output<String> bucket;

    /**
     * @return The bucket to which the custom domain name belongs
     * 
     */
    public Optional<Output<String>> bucket() {
        return Optional.ofNullable(this.bucket);
    }

    /**
     * The container for the certificate configuration. See `certificate` below.
     * 
     */
    @Import(name="certificate")
    private @Nullable Output<BucketCnameCertificateArgs> certificate;

    /**
     * @return The container for the certificate configuration. See `certificate` below.
     * 
     */
    public Optional<Output<BucketCnameCertificateArgs>> certificate() {
        return Optional.ofNullable(this.certificate);
    }

    /**
     * Whether to delete the certificate.
     * 
     */
    @Import(name="deleteCertificate")
    private @Nullable Output<Boolean> deleteCertificate;

    /**
     * @return Whether to delete the certificate.
     * 
     */
    public Optional<Output<Boolean>> deleteCertificate() {
        return Optional.ofNullable(this.deleteCertificate);
    }

    /**
     * User-defined domain name
     * 
     */
    @Import(name="domain")
    private @Nullable Output<String> domain;

    /**
     * @return User-defined domain name
     * 
     */
    public Optional<Output<String>> domain() {
        return Optional.ofNullable(this.domain);
    }

    /**
     * Whether to force overwrite certificate.
     * 
     */
    @Import(name="force")
    private @Nullable Output<Boolean> force;

    /**
     * @return Whether to force overwrite certificate.
     * 
     */
    public Optional<Output<Boolean>> force() {
        return Optional.ofNullable(this.force);
    }

    /**
     * The current certificate ID. If the Force value is not true, the OSS Server checks whether the value matches the current certificate ID. If the value does not match, an error is reported.
     * 
     */
    @Import(name="previousCertId")
    private @Nullable Output<String> previousCertId;

    /**
     * @return The current certificate ID. If the Force value is not true, the OSS Server checks whether the value matches the current certificate ID. If the value does not match, an error is reported.
     * 
     */
    public Optional<Output<String>> previousCertId() {
        return Optional.ofNullable(this.previousCertId);
    }

    /**
     * Cname status
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return Cname status
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    private BucketCnameState() {}

    private BucketCnameState(BucketCnameState $) {
        this.bucket = $.bucket;
        this.certificate = $.certificate;
        this.deleteCertificate = $.deleteCertificate;
        this.domain = $.domain;
        this.force = $.force;
        this.previousCertId = $.previousCertId;
        this.status = $.status;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BucketCnameState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BucketCnameState $;

        public Builder() {
            $ = new BucketCnameState();
        }

        public Builder(BucketCnameState defaults) {
            $ = new BucketCnameState(Objects.requireNonNull(defaults));
        }

        /**
         * @param bucket The bucket to which the custom domain name belongs
         * 
         * @return builder
         * 
         */
        public Builder bucket(@Nullable Output<String> bucket) {
            $.bucket = bucket;
            return this;
        }

        /**
         * @param bucket The bucket to which the custom domain name belongs
         * 
         * @return builder
         * 
         */
        public Builder bucket(String bucket) {
            return bucket(Output.of(bucket));
        }

        /**
         * @param certificate The container for the certificate configuration. See `certificate` below.
         * 
         * @return builder
         * 
         */
        public Builder certificate(@Nullable Output<BucketCnameCertificateArgs> certificate) {
            $.certificate = certificate;
            return this;
        }

        /**
         * @param certificate The container for the certificate configuration. See `certificate` below.
         * 
         * @return builder
         * 
         */
        public Builder certificate(BucketCnameCertificateArgs certificate) {
            return certificate(Output.of(certificate));
        }

        /**
         * @param deleteCertificate Whether to delete the certificate.
         * 
         * @return builder
         * 
         */
        public Builder deleteCertificate(@Nullable Output<Boolean> deleteCertificate) {
            $.deleteCertificate = deleteCertificate;
            return this;
        }

        /**
         * @param deleteCertificate Whether to delete the certificate.
         * 
         * @return builder
         * 
         */
        public Builder deleteCertificate(Boolean deleteCertificate) {
            return deleteCertificate(Output.of(deleteCertificate));
        }

        /**
         * @param domain User-defined domain name
         * 
         * @return builder
         * 
         */
        public Builder domain(@Nullable Output<String> domain) {
            $.domain = domain;
            return this;
        }

        /**
         * @param domain User-defined domain name
         * 
         * @return builder
         * 
         */
        public Builder domain(String domain) {
            return domain(Output.of(domain));
        }

        /**
         * @param force Whether to force overwrite certificate.
         * 
         * @return builder
         * 
         */
        public Builder force(@Nullable Output<Boolean> force) {
            $.force = force;
            return this;
        }

        /**
         * @param force Whether to force overwrite certificate.
         * 
         * @return builder
         * 
         */
        public Builder force(Boolean force) {
            return force(Output.of(force));
        }

        /**
         * @param previousCertId The current certificate ID. If the Force value is not true, the OSS Server checks whether the value matches the current certificate ID. If the value does not match, an error is reported.
         * 
         * @return builder
         * 
         */
        public Builder previousCertId(@Nullable Output<String> previousCertId) {
            $.previousCertId = previousCertId;
            return this;
        }

        /**
         * @param previousCertId The current certificate ID. If the Force value is not true, the OSS Server checks whether the value matches the current certificate ID. If the value does not match, an error is reported.
         * 
         * @return builder
         * 
         */
        public Builder previousCertId(String previousCertId) {
            return previousCertId(Output.of(previousCertId));
        }

        /**
         * @param status Cname status
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status Cname status
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        public BucketCnameState build() {
            return $;
        }
    }

}
