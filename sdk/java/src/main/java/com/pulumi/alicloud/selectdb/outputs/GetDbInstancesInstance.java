// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.selectdb.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetDbInstancesInstance {
    /**
     * @return The sum of cache size for every `PayAsYouGo` clusters in DBInstance.
     * 
     */
    private Integer cacheSizePostpaid;
    /**
     * @return The sum of cache size for every `Subscription` clusters in DBInstance.
     * 
     */
    private Integer cacheSizePrepaid;
    /**
     * @return The sum of cluster counts for `PayAsYouGo` clusters in DBInstance.
     * 
     */
    private Integer clusterCountPostpaid;
    /**
     * @return The sum of cluster counts for `Subscription` clusters in DBInstance.
     * 
     */
    private Integer clusterCountPrepaid;
    /**
     * @return The sum of cpu resource amount for every `PayAsYouGo` clusters in DBInstance.
     * 
     */
    private Integer cpuPostpaid;
    /**
     * @return The sum of cpu resource amount for every `Subscription` clusters in DBInstance.
     * 
     */
    private Integer cpuPrepaid;
    /**
     * @return The DBInstance description.
     * 
     */
    private String dbInstanceDescription;
    /**
     * @return The instance ID.
     * 
     */
    private String dbInstanceId;
    /**
     * @return The Engine of the DBInstance.
     * 
     */
    private String engine;
    /**
     * @return The engine minor version of the DBInstance.
     * 
     */
    private String engineMinorVersion;
    /**
     * @return The engine version of the DBInstance.
     * 
     */
    private String engineVersion;
    /**
     * @return The time when DBInstance is created.
     * 
     */
    private String gmtCreated;
    /**
     * @return The time when DBInstance will be expired. Available on `Subscription` DBInstance.
     * 
     */
    private String gmtExpired;
    /**
     * @return The time when DBInstance is modified.
     * 
     */
    private String gmtModified;
    private String id;
    /**
     * @return The lock mode of the instance. Set the value to lock, which specifies that the instance is locked when it automatically expires or has an overdue payment.
     * 
     */
    private String lockMode;
    /**
     * @return The reason why the instance is locked.
     * 
     */
    private String lockReason;
    /**
     * @return The sum of memory resource amount offor every `PayAsYouGo` clusters in DBInstance.
     * 
     */
    private Integer memoryPostpaid;
    /**
     * @return The sum of memory resource amount offor every `Subscription` clusters in DBInstance.
     * 
     */
    private Integer memoryPrepaid;
    /**
     * @return The payment type of the resource. Valid values: `PayAsYouGo`,`Subscription`.
     * 
     */
    private String paymentType;
    /**
     * @return The ID of region for DBInstance.
     * 
     */
    private String regionId;
    /**
     * @return The status of the DBInstance. Valid values: `ACTIVATION`,`CREATING`,`DELETING`,`RESTARTING`,`ORDER_PREPARING`.
     * 
     */
    private String status;
    /**
     * @return The sub domain of DBInstance.
     * 
     */
    private String subDomain;
    /**
     * @return The ID of the VPC for DBInstance.
     * 
     */
    private String vpcId;
    /**
     * @return The ID of vswitch for DBInstance.
     * 
     */
    private String vswitchId;
    /**
     * @return The ID of zone for DBInstance.
     * 
     */
    private String zoneId;

    private GetDbInstancesInstance() {}
    /**
     * @return The sum of cache size for every `PayAsYouGo` clusters in DBInstance.
     * 
     */
    public Integer cacheSizePostpaid() {
        return this.cacheSizePostpaid;
    }
    /**
     * @return The sum of cache size for every `Subscription` clusters in DBInstance.
     * 
     */
    public Integer cacheSizePrepaid() {
        return this.cacheSizePrepaid;
    }
    /**
     * @return The sum of cluster counts for `PayAsYouGo` clusters in DBInstance.
     * 
     */
    public Integer clusterCountPostpaid() {
        return this.clusterCountPostpaid;
    }
    /**
     * @return The sum of cluster counts for `Subscription` clusters in DBInstance.
     * 
     */
    public Integer clusterCountPrepaid() {
        return this.clusterCountPrepaid;
    }
    /**
     * @return The sum of cpu resource amount for every `PayAsYouGo` clusters in DBInstance.
     * 
     */
    public Integer cpuPostpaid() {
        return this.cpuPostpaid;
    }
    /**
     * @return The sum of cpu resource amount for every `Subscription` clusters in DBInstance.
     * 
     */
    public Integer cpuPrepaid() {
        return this.cpuPrepaid;
    }
    /**
     * @return The DBInstance description.
     * 
     */
    public String dbInstanceDescription() {
        return this.dbInstanceDescription;
    }
    /**
     * @return The instance ID.
     * 
     */
    public String dbInstanceId() {
        return this.dbInstanceId;
    }
    /**
     * @return The Engine of the DBInstance.
     * 
     */
    public String engine() {
        return this.engine;
    }
    /**
     * @return The engine minor version of the DBInstance.
     * 
     */
    public String engineMinorVersion() {
        return this.engineMinorVersion;
    }
    /**
     * @return The engine version of the DBInstance.
     * 
     */
    public String engineVersion() {
        return this.engineVersion;
    }
    /**
     * @return The time when DBInstance is created.
     * 
     */
    public String gmtCreated() {
        return this.gmtCreated;
    }
    /**
     * @return The time when DBInstance will be expired. Available on `Subscription` DBInstance.
     * 
     */
    public String gmtExpired() {
        return this.gmtExpired;
    }
    /**
     * @return The time when DBInstance is modified.
     * 
     */
    public String gmtModified() {
        return this.gmtModified;
    }
    public String id() {
        return this.id;
    }
    /**
     * @return The lock mode of the instance. Set the value to lock, which specifies that the instance is locked when it automatically expires or has an overdue payment.
     * 
     */
    public String lockMode() {
        return this.lockMode;
    }
    /**
     * @return The reason why the instance is locked.
     * 
     */
    public String lockReason() {
        return this.lockReason;
    }
    /**
     * @return The sum of memory resource amount offor every `PayAsYouGo` clusters in DBInstance.
     * 
     */
    public Integer memoryPostpaid() {
        return this.memoryPostpaid;
    }
    /**
     * @return The sum of memory resource amount offor every `Subscription` clusters in DBInstance.
     * 
     */
    public Integer memoryPrepaid() {
        return this.memoryPrepaid;
    }
    /**
     * @return The payment type of the resource. Valid values: `PayAsYouGo`,`Subscription`.
     * 
     */
    public String paymentType() {
        return this.paymentType;
    }
    /**
     * @return The ID of region for DBInstance.
     * 
     */
    public String regionId() {
        return this.regionId;
    }
    /**
     * @return The status of the DBInstance. Valid values: `ACTIVATION`,`CREATING`,`DELETING`,`RESTARTING`,`ORDER_PREPARING`.
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return The sub domain of DBInstance.
     * 
     */
    public String subDomain() {
        return this.subDomain;
    }
    /**
     * @return The ID of the VPC for DBInstance.
     * 
     */
    public String vpcId() {
        return this.vpcId;
    }
    /**
     * @return The ID of vswitch for DBInstance.
     * 
     */
    public String vswitchId() {
        return this.vswitchId;
    }
    /**
     * @return The ID of zone for DBInstance.
     * 
     */
    public String zoneId() {
        return this.zoneId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDbInstancesInstance defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Integer cacheSizePostpaid;
        private Integer cacheSizePrepaid;
        private Integer clusterCountPostpaid;
        private Integer clusterCountPrepaid;
        private Integer cpuPostpaid;
        private Integer cpuPrepaid;
        private String dbInstanceDescription;
        private String dbInstanceId;
        private String engine;
        private String engineMinorVersion;
        private String engineVersion;
        private String gmtCreated;
        private String gmtExpired;
        private String gmtModified;
        private String id;
        private String lockMode;
        private String lockReason;
        private Integer memoryPostpaid;
        private Integer memoryPrepaid;
        private String paymentType;
        private String regionId;
        private String status;
        private String subDomain;
        private String vpcId;
        private String vswitchId;
        private String zoneId;
        public Builder() {}
        public Builder(GetDbInstancesInstance defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.cacheSizePostpaid = defaults.cacheSizePostpaid;
    	      this.cacheSizePrepaid = defaults.cacheSizePrepaid;
    	      this.clusterCountPostpaid = defaults.clusterCountPostpaid;
    	      this.clusterCountPrepaid = defaults.clusterCountPrepaid;
    	      this.cpuPostpaid = defaults.cpuPostpaid;
    	      this.cpuPrepaid = defaults.cpuPrepaid;
    	      this.dbInstanceDescription = defaults.dbInstanceDescription;
    	      this.dbInstanceId = defaults.dbInstanceId;
    	      this.engine = defaults.engine;
    	      this.engineMinorVersion = defaults.engineMinorVersion;
    	      this.engineVersion = defaults.engineVersion;
    	      this.gmtCreated = defaults.gmtCreated;
    	      this.gmtExpired = defaults.gmtExpired;
    	      this.gmtModified = defaults.gmtModified;
    	      this.id = defaults.id;
    	      this.lockMode = defaults.lockMode;
    	      this.lockReason = defaults.lockReason;
    	      this.memoryPostpaid = defaults.memoryPostpaid;
    	      this.memoryPrepaid = defaults.memoryPrepaid;
    	      this.paymentType = defaults.paymentType;
    	      this.regionId = defaults.regionId;
    	      this.status = defaults.status;
    	      this.subDomain = defaults.subDomain;
    	      this.vpcId = defaults.vpcId;
    	      this.vswitchId = defaults.vswitchId;
    	      this.zoneId = defaults.zoneId;
        }

        @CustomType.Setter
        public Builder cacheSizePostpaid(Integer cacheSizePostpaid) {
            if (cacheSizePostpaid == null) {
              throw new MissingRequiredPropertyException("GetDbInstancesInstance", "cacheSizePostpaid");
            }
            this.cacheSizePostpaid = cacheSizePostpaid;
            return this;
        }
        @CustomType.Setter
        public Builder cacheSizePrepaid(Integer cacheSizePrepaid) {
            if (cacheSizePrepaid == null) {
              throw new MissingRequiredPropertyException("GetDbInstancesInstance", "cacheSizePrepaid");
            }
            this.cacheSizePrepaid = cacheSizePrepaid;
            return this;
        }
        @CustomType.Setter
        public Builder clusterCountPostpaid(Integer clusterCountPostpaid) {
            if (clusterCountPostpaid == null) {
              throw new MissingRequiredPropertyException("GetDbInstancesInstance", "clusterCountPostpaid");
            }
            this.clusterCountPostpaid = clusterCountPostpaid;
            return this;
        }
        @CustomType.Setter
        public Builder clusterCountPrepaid(Integer clusterCountPrepaid) {
            if (clusterCountPrepaid == null) {
              throw new MissingRequiredPropertyException("GetDbInstancesInstance", "clusterCountPrepaid");
            }
            this.clusterCountPrepaid = clusterCountPrepaid;
            return this;
        }
        @CustomType.Setter
        public Builder cpuPostpaid(Integer cpuPostpaid) {
            if (cpuPostpaid == null) {
              throw new MissingRequiredPropertyException("GetDbInstancesInstance", "cpuPostpaid");
            }
            this.cpuPostpaid = cpuPostpaid;
            return this;
        }
        @CustomType.Setter
        public Builder cpuPrepaid(Integer cpuPrepaid) {
            if (cpuPrepaid == null) {
              throw new MissingRequiredPropertyException("GetDbInstancesInstance", "cpuPrepaid");
            }
            this.cpuPrepaid = cpuPrepaid;
            return this;
        }
        @CustomType.Setter
        public Builder dbInstanceDescription(String dbInstanceDescription) {
            if (dbInstanceDescription == null) {
              throw new MissingRequiredPropertyException("GetDbInstancesInstance", "dbInstanceDescription");
            }
            this.dbInstanceDescription = dbInstanceDescription;
            return this;
        }
        @CustomType.Setter
        public Builder dbInstanceId(String dbInstanceId) {
            if (dbInstanceId == null) {
              throw new MissingRequiredPropertyException("GetDbInstancesInstance", "dbInstanceId");
            }
            this.dbInstanceId = dbInstanceId;
            return this;
        }
        @CustomType.Setter
        public Builder engine(String engine) {
            if (engine == null) {
              throw new MissingRequiredPropertyException("GetDbInstancesInstance", "engine");
            }
            this.engine = engine;
            return this;
        }
        @CustomType.Setter
        public Builder engineMinorVersion(String engineMinorVersion) {
            if (engineMinorVersion == null) {
              throw new MissingRequiredPropertyException("GetDbInstancesInstance", "engineMinorVersion");
            }
            this.engineMinorVersion = engineMinorVersion;
            return this;
        }
        @CustomType.Setter
        public Builder engineVersion(String engineVersion) {
            if (engineVersion == null) {
              throw new MissingRequiredPropertyException("GetDbInstancesInstance", "engineVersion");
            }
            this.engineVersion = engineVersion;
            return this;
        }
        @CustomType.Setter
        public Builder gmtCreated(String gmtCreated) {
            if (gmtCreated == null) {
              throw new MissingRequiredPropertyException("GetDbInstancesInstance", "gmtCreated");
            }
            this.gmtCreated = gmtCreated;
            return this;
        }
        @CustomType.Setter
        public Builder gmtExpired(String gmtExpired) {
            if (gmtExpired == null) {
              throw new MissingRequiredPropertyException("GetDbInstancesInstance", "gmtExpired");
            }
            this.gmtExpired = gmtExpired;
            return this;
        }
        @CustomType.Setter
        public Builder gmtModified(String gmtModified) {
            if (gmtModified == null) {
              throw new MissingRequiredPropertyException("GetDbInstancesInstance", "gmtModified");
            }
            this.gmtModified = gmtModified;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetDbInstancesInstance", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder lockMode(String lockMode) {
            if (lockMode == null) {
              throw new MissingRequiredPropertyException("GetDbInstancesInstance", "lockMode");
            }
            this.lockMode = lockMode;
            return this;
        }
        @CustomType.Setter
        public Builder lockReason(String lockReason) {
            if (lockReason == null) {
              throw new MissingRequiredPropertyException("GetDbInstancesInstance", "lockReason");
            }
            this.lockReason = lockReason;
            return this;
        }
        @CustomType.Setter
        public Builder memoryPostpaid(Integer memoryPostpaid) {
            if (memoryPostpaid == null) {
              throw new MissingRequiredPropertyException("GetDbInstancesInstance", "memoryPostpaid");
            }
            this.memoryPostpaid = memoryPostpaid;
            return this;
        }
        @CustomType.Setter
        public Builder memoryPrepaid(Integer memoryPrepaid) {
            if (memoryPrepaid == null) {
              throw new MissingRequiredPropertyException("GetDbInstancesInstance", "memoryPrepaid");
            }
            this.memoryPrepaid = memoryPrepaid;
            return this;
        }
        @CustomType.Setter
        public Builder paymentType(String paymentType) {
            if (paymentType == null) {
              throw new MissingRequiredPropertyException("GetDbInstancesInstance", "paymentType");
            }
            this.paymentType = paymentType;
            return this;
        }
        @CustomType.Setter
        public Builder regionId(String regionId) {
            if (regionId == null) {
              throw new MissingRequiredPropertyException("GetDbInstancesInstance", "regionId");
            }
            this.regionId = regionId;
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            if (status == null) {
              throw new MissingRequiredPropertyException("GetDbInstancesInstance", "status");
            }
            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder subDomain(String subDomain) {
            if (subDomain == null) {
              throw new MissingRequiredPropertyException("GetDbInstancesInstance", "subDomain");
            }
            this.subDomain = subDomain;
            return this;
        }
        @CustomType.Setter
        public Builder vpcId(String vpcId) {
            if (vpcId == null) {
              throw new MissingRequiredPropertyException("GetDbInstancesInstance", "vpcId");
            }
            this.vpcId = vpcId;
            return this;
        }
        @CustomType.Setter
        public Builder vswitchId(String vswitchId) {
            if (vswitchId == null) {
              throw new MissingRequiredPropertyException("GetDbInstancesInstance", "vswitchId");
            }
            this.vswitchId = vswitchId;
            return this;
        }
        @CustomType.Setter
        public Builder zoneId(String zoneId) {
            if (zoneId == null) {
              throw new MissingRequiredPropertyException("GetDbInstancesInstance", "zoneId");
            }
            this.zoneId = zoneId;
            return this;
        }
        public GetDbInstancesInstance build() {
            final var _resultValue = new GetDbInstancesInstance();
            _resultValue.cacheSizePostpaid = cacheSizePostpaid;
            _resultValue.cacheSizePrepaid = cacheSizePrepaid;
            _resultValue.clusterCountPostpaid = clusterCountPostpaid;
            _resultValue.clusterCountPrepaid = clusterCountPrepaid;
            _resultValue.cpuPostpaid = cpuPostpaid;
            _resultValue.cpuPrepaid = cpuPrepaid;
            _resultValue.dbInstanceDescription = dbInstanceDescription;
            _resultValue.dbInstanceId = dbInstanceId;
            _resultValue.engine = engine;
            _resultValue.engineMinorVersion = engineMinorVersion;
            _resultValue.engineVersion = engineVersion;
            _resultValue.gmtCreated = gmtCreated;
            _resultValue.gmtExpired = gmtExpired;
            _resultValue.gmtModified = gmtModified;
            _resultValue.id = id;
            _resultValue.lockMode = lockMode;
            _resultValue.lockReason = lockReason;
            _resultValue.memoryPostpaid = memoryPostpaid;
            _resultValue.memoryPrepaid = memoryPrepaid;
            _resultValue.paymentType = paymentType;
            _resultValue.regionId = regionId;
            _resultValue.status = status;
            _resultValue.subDomain = subDomain;
            _resultValue.vpcId = vpcId;
            _resultValue.vswitchId = vswitchId;
            _resultValue.zoneId = zoneId;
            return _resultValue;
        }
    }
}
