// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.emr;

import com.pulumi.alicloud.Utilities;
import com.pulumi.alicloud.emr.inputs.GetClustersArgs;
import com.pulumi.alicloud.emr.inputs.GetClustersPlainArgs;
import com.pulumi.alicloud.emr.inputs.GetDiskTypesArgs;
import com.pulumi.alicloud.emr.inputs.GetDiskTypesPlainArgs;
import com.pulumi.alicloud.emr.inputs.GetInstanceTypesArgs;
import com.pulumi.alicloud.emr.inputs.GetInstanceTypesPlainArgs;
import com.pulumi.alicloud.emr.inputs.GetMainVersionsArgs;
import com.pulumi.alicloud.emr.inputs.GetMainVersionsPlainArgs;
import com.pulumi.alicloud.emr.outputs.GetClustersResult;
import com.pulumi.alicloud.emr.outputs.GetDiskTypesResult;
import com.pulumi.alicloud.emr.outputs.GetInstanceTypesResult;
import com.pulumi.alicloud.emr.outputs.GetMainVersionsResult;
import com.pulumi.core.Output;
import com.pulumi.core.TypeShape;
import com.pulumi.deployment.Deployment;
import com.pulumi.deployment.InvokeOptions;
import java.util.concurrent.CompletableFuture;

public final class EmrFunctions {
    /**
     * This data source provides the Emr Clusters of the current Alibaba Cloud user.
     * 
     * &gt; **DEPRECATED:**  This datasource has been deprecated from version `1.204.0`. Please use new datasource emrv2_clusters.
     * 
     * &gt; **NOTE:** Available in v1.146.0+.
     * 
     * ## Example Usage
     * 
     * Basic Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.alicloud.resourcemanager.ResourcemanagerFunctions;
     * import com.pulumi.alicloud.resourcemanager.inputs.GetResourceGroupsArgs;
     * import com.pulumi.alicloud.emr.EmrFunctions;
     * import com.pulumi.alicloud.emr.inputs.GetMainVersionsArgs;
     * import com.pulumi.alicloud.emr.inputs.GetInstanceTypesArgs;
     * import com.pulumi.alicloud.emr.inputs.GetDiskTypesArgs;
     * import com.pulumi.alicloud.vpc.VpcFunctions;
     * import com.pulumi.alicloud.vpc.inputs.GetNetworksArgs;
     * import com.pulumi.alicloud.ecs.SecurityGroup;
     * import com.pulumi.alicloud.ecs.SecurityGroupArgs;
     * import com.pulumi.alicloud.vpc.inputs.GetSwitchesArgs;
     * import com.pulumi.alicloud.ram.Role;
     * import com.pulumi.alicloud.ram.RoleArgs;
     * import com.pulumi.alicloud.emr.Cluster;
     * import com.pulumi.alicloud.emr.ClusterArgs;
     * import com.pulumi.alicloud.emr.inputs.ClusterHostGroupArgs;
     * import com.pulumi.alicloud.emr.inputs.GetClustersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var config = ctx.config();
     *         final var name = config.get(&#34;name&#34;).orElse(&#34;tf-testAccClusters&#34;);
     *         final var defaultResourceGroups = ResourcemanagerFunctions.getResourceGroups(GetResourceGroupsArgs.builder()
     *             .status(&#34;OK&#34;)
     *             .build());
     * 
     *         final var defaultMainVersions = EmrFunctions.getMainVersions();
     * 
     *         final var defaultInstanceTypes = EmrFunctions.getInstanceTypes(GetInstanceTypesArgs.builder()
     *             .destinationResource(&#34;InstanceType&#34;)
     *             .clusterType(defaultMainVersions.applyValue(getMainVersionsResult -&gt; getMainVersionsResult.mainVersions()[0].clusterTypes()[0]))
     *             .supportLocalStorage(false)
     *             .instanceChargeType(&#34;PostPaid&#34;)
     *             .supportNodeTypes(            
     *                 &#34;MASTER&#34;,
     *                 &#34;CORE&#34;,
     *                 &#34;TASK&#34;)
     *             .build());
     * 
     *         final var dataDisk = EmrFunctions.getDiskTypes(GetDiskTypesArgs.builder()
     *             .destinationResource(&#34;DataDisk&#34;)
     *             .clusterType(defaultMainVersions.applyValue(getMainVersionsResult -&gt; getMainVersionsResult.mainVersions()[0].clusterTypes()[0]))
     *             .instanceChargeType(&#34;PostPaid&#34;)
     *             .instanceType(defaultInstanceTypes.applyValue(getInstanceTypesResult -&gt; getInstanceTypesResult.types()[0].id()))
     *             .zoneId(defaultInstanceTypes.applyValue(getInstanceTypesResult -&gt; getInstanceTypesResult.types()[0].zoneId()))
     *             .build());
     * 
     *         final var systemDisk = EmrFunctions.getDiskTypes(GetDiskTypesArgs.builder()
     *             .destinationResource(&#34;SystemDisk&#34;)
     *             .clusterType(defaultMainVersions.applyValue(getMainVersionsResult -&gt; getMainVersionsResult.mainVersions()[0].clusterTypes()[0]))
     *             .instanceChargeType(&#34;PostPaid&#34;)
     *             .instanceType(defaultInstanceTypes.applyValue(getInstanceTypesResult -&gt; getInstanceTypesResult.types()[0].id()))
     *             .zoneId(defaultInstanceTypes.applyValue(getInstanceTypesResult -&gt; getInstanceTypesResult.types()[0].zoneId()))
     *             .build());
     * 
     *         final var defaultNetworks = VpcFunctions.getNetworks(GetNetworksArgs.builder()
     *             .nameRegex(&#34;default-NODELETING&#34;)
     *             .build());
     * 
     *         var defaultSecurityGroup = new SecurityGroup(&#34;defaultSecurityGroup&#34;, SecurityGroupArgs.builder()        
     *             .vpcId(defaultNetworks.applyValue(getNetworksResult -&gt; getNetworksResult.ids()[0]))
     *             .build());
     * 
     *         final var defaultSwitches = VpcFunctions.getSwitches(GetSwitchesArgs.builder()
     *             .vpcId(defaultNetworks.applyValue(getNetworksResult -&gt; getNetworksResult.ids()[0]))
     *             .zoneId(defaultInstanceTypes.applyValue(getInstanceTypesResult -&gt; getInstanceTypesResult.types()[0].zoneId()))
     *             .build());
     * 
     *         var defaultRole = new Role(&#34;defaultRole&#34;, RoleArgs.builder()        
     *             .document(&#34;&#34;&#34;
     *     {
     *         &#34;Statement&#34;: [
     *         {
     *             &#34;Action&#34;: &#34;sts:AssumeRole&#34;,
     *             &#34;Effect&#34;: &#34;Allow&#34;,
     *             &#34;Principal&#34;: {
     *             &#34;Service&#34;: [
     *                 &#34;emr.aliyuncs.com&#34;,
     *                 &#34;ecs.aliyuncs.com&#34;
     *             ]
     *             }
     *         }
     *         ],
     *         &#34;Version&#34;: &#34;1&#34;
     *     }
     *             &#34;&#34;&#34;)
     *             .description(&#34;this is a role test.&#34;)
     *             .force(true)
     *             .build());
     * 
     *         var defaultCluster = new Cluster(&#34;defaultCluster&#34;, ClusterArgs.builder()        
     *             .emrVer(defaultMainVersions.applyValue(getMainVersionsResult -&gt; getMainVersionsResult.mainVersions()[0].emrVersion()))
     *             .clusterType(defaultMainVersions.applyValue(getMainVersionsResult -&gt; getMainVersionsResult.mainVersions()[0].clusterTypes()[0]))
     *             .hostGroups(            
     *                 ClusterHostGroupArgs.builder()
     *                     .hostGroupName(&#34;master_group&#34;)
     *                     .hostGroupType(&#34;MASTER&#34;)
     *                     .nodeCount(&#34;2&#34;)
     *                     .instanceType(defaultInstanceTypes.applyValue(getInstanceTypesResult -&gt; getInstanceTypesResult.types()[0].id()))
     *                     .diskType(dataDisk.applyValue(getDiskTypesResult -&gt; getDiskTypesResult.types()[0].value()))
     *                     .diskCapacity(dataDisk.applyValue(getDiskTypesResult -&gt; getDiskTypesResult.types()[0].min()) &gt; 160 ? dataDisk.applyValue(getDiskTypesResult -&gt; getDiskTypesResult.types()[0].min()) : 160)
     *                     .diskCount(&#34;1&#34;)
     *                     .sysDiskType(systemDisk.applyValue(getDiskTypesResult -&gt; getDiskTypesResult.types()[0].value()))
     *                     .sysDiskCapacity(systemDisk.applyValue(getDiskTypesResult -&gt; getDiskTypesResult.types()[0].min()) &gt; 160 ? systemDisk.applyValue(getDiskTypesResult -&gt; getDiskTypesResult.types()[0].min()) : 160)
     *                     .build(),
     *                 ClusterHostGroupArgs.builder()
     *                     .hostGroupName(&#34;core_group&#34;)
     *                     .hostGroupType(&#34;CORE&#34;)
     *                     .nodeCount(&#34;3&#34;)
     *                     .instanceType(defaultInstanceTypes.applyValue(getInstanceTypesResult -&gt; getInstanceTypesResult.types()[0].id()))
     *                     .diskType(dataDisk.applyValue(getDiskTypesResult -&gt; getDiskTypesResult.types()[0].value()))
     *                     .diskCapacity(dataDisk.applyValue(getDiskTypesResult -&gt; getDiskTypesResult.types()[0].min()) &gt; 160 ? dataDisk.applyValue(getDiskTypesResult -&gt; getDiskTypesResult.types()[0].min()) : 160)
     *                     .diskCount(&#34;4&#34;)
     *                     .sysDiskType(systemDisk.applyValue(getDiskTypesResult -&gt; getDiskTypesResult.types()[0].value()))
     *                     .sysDiskCapacity(systemDisk.applyValue(getDiskTypesResult -&gt; getDiskTypesResult.types()[0].min()) &gt; 160 ? systemDisk.applyValue(getDiskTypesResult -&gt; getDiskTypesResult.types()[0].min()) : 160)
     *                     .build(),
     *                 ClusterHostGroupArgs.builder()
     *                     .hostGroupName(&#34;task_group&#34;)
     *                     .hostGroupType(&#34;TASK&#34;)
     *                     .nodeCount(&#34;2&#34;)
     *                     .instanceType(defaultInstanceTypes.applyValue(getInstanceTypesResult -&gt; getInstanceTypesResult.types()[0].id()))
     *                     .diskType(dataDisk.applyValue(getDiskTypesResult -&gt; getDiskTypesResult.types()[0].value()))
     *                     .diskCapacity(dataDisk.applyValue(getDiskTypesResult -&gt; getDiskTypesResult.types()[0].min()) &gt; 160 ? dataDisk.applyValue(getDiskTypesResult -&gt; getDiskTypesResult.types()[0].min()) : 160)
     *                     .diskCount(&#34;4&#34;)
     *                     .sysDiskType(systemDisk.applyValue(getDiskTypesResult -&gt; getDiskTypesResult.types()[0].value()))
     *                     .sysDiskCapacity(systemDisk.applyValue(getDiskTypesResult -&gt; getDiskTypesResult.types()[0].min()) &gt; 160 ? systemDisk.applyValue(getDiskTypesResult -&gt; getDiskTypesResult.types()[0].min()) : 160)
     *                     .build())
     *             .highAvailabilityEnable(true)
     *             .zoneId(defaultInstanceTypes.applyValue(getInstanceTypesResult -&gt; getInstanceTypesResult.types()[0].zoneId()))
     *             .securityGroupId(defaultSecurityGroup.id())
     *             .isOpenPublicIp(true)
     *             .chargeType(&#34;PostPaid&#34;)
     *             .vswitchId(defaultSwitches.applyValue(getSwitchesResult -&gt; getSwitchesResult.ids()[0]))
     *             .userDefinedEmrEcsRole(defaultRole.name())
     *             .sshEnable(true)
     *             .masterPwd(&#34;ABCtest1234!&#34;)
     *             .tags(Map.ofEntries(
     *                 Map.entry(&#34;Created&#34;, &#34;TF&#34;),
     *                 Map.entry(&#34;For&#34;, &#34;acceptance test&#34;)
     *             ))
     *             .build());
     * 
     *         final var ids = EmrFunctions.getClusters();
     * 
     *         ctx.export(&#34;emrClusterId1&#34;, ids.applyValue(getClustersResult -&gt; getClustersResult.clusters()[0].id()));
     *         final var nameRegex = EmrFunctions.getClusters(GetClustersArgs.builder()
     *             .nameRegex(defaultCluster.name())
     *             .build());
     * 
     *         ctx.export(&#34;emrClusterId2&#34;, nameRegex.applyValue(getClustersResult -&gt; getClustersResult).applyValue(nameRegex -&gt; nameRegex.applyValue(getClustersResult -&gt; getClustersResult.clusters()[0].id())));
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetClustersResult> getClusters() {
        return getClusters(GetClustersArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * This data source provides the Emr Clusters of the current Alibaba Cloud user.
     * 
     * &gt; **DEPRECATED:**  This datasource has been deprecated from version `1.204.0`. Please use new datasource emrv2_clusters.
     * 
     * &gt; **NOTE:** Available in v1.146.0+.
     * 
     * ## Example Usage
     * 
     * Basic Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.alicloud.resourcemanager.ResourcemanagerFunctions;
     * import com.pulumi.alicloud.resourcemanager.inputs.GetResourceGroupsArgs;
     * import com.pulumi.alicloud.emr.EmrFunctions;
     * import com.pulumi.alicloud.emr.inputs.GetMainVersionsArgs;
     * import com.pulumi.alicloud.emr.inputs.GetInstanceTypesArgs;
     * import com.pulumi.alicloud.emr.inputs.GetDiskTypesArgs;
     * import com.pulumi.alicloud.vpc.VpcFunctions;
     * import com.pulumi.alicloud.vpc.inputs.GetNetworksArgs;
     * import com.pulumi.alicloud.ecs.SecurityGroup;
     * import com.pulumi.alicloud.ecs.SecurityGroupArgs;
     * import com.pulumi.alicloud.vpc.inputs.GetSwitchesArgs;
     * import com.pulumi.alicloud.ram.Role;
     * import com.pulumi.alicloud.ram.RoleArgs;
     * import com.pulumi.alicloud.emr.Cluster;
     * import com.pulumi.alicloud.emr.ClusterArgs;
     * import com.pulumi.alicloud.emr.inputs.ClusterHostGroupArgs;
     * import com.pulumi.alicloud.emr.inputs.GetClustersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var config = ctx.config();
     *         final var name = config.get(&#34;name&#34;).orElse(&#34;tf-testAccClusters&#34;);
     *         final var defaultResourceGroups = ResourcemanagerFunctions.getResourceGroups(GetResourceGroupsArgs.builder()
     *             .status(&#34;OK&#34;)
     *             .build());
     * 
     *         final var defaultMainVersions = EmrFunctions.getMainVersions();
     * 
     *         final var defaultInstanceTypes = EmrFunctions.getInstanceTypes(GetInstanceTypesArgs.builder()
     *             .destinationResource(&#34;InstanceType&#34;)
     *             .clusterType(defaultMainVersions.applyValue(getMainVersionsResult -&gt; getMainVersionsResult.mainVersions()[0].clusterTypes()[0]))
     *             .supportLocalStorage(false)
     *             .instanceChargeType(&#34;PostPaid&#34;)
     *             .supportNodeTypes(            
     *                 &#34;MASTER&#34;,
     *                 &#34;CORE&#34;,
     *                 &#34;TASK&#34;)
     *             .build());
     * 
     *         final var dataDisk = EmrFunctions.getDiskTypes(GetDiskTypesArgs.builder()
     *             .destinationResource(&#34;DataDisk&#34;)
     *             .clusterType(defaultMainVersions.applyValue(getMainVersionsResult -&gt; getMainVersionsResult.mainVersions()[0].clusterTypes()[0]))
     *             .instanceChargeType(&#34;PostPaid&#34;)
     *             .instanceType(defaultInstanceTypes.applyValue(getInstanceTypesResult -&gt; getInstanceTypesResult.types()[0].id()))
     *             .zoneId(defaultInstanceTypes.applyValue(getInstanceTypesResult -&gt; getInstanceTypesResult.types()[0].zoneId()))
     *             .build());
     * 
     *         final var systemDisk = EmrFunctions.getDiskTypes(GetDiskTypesArgs.builder()
     *             .destinationResource(&#34;SystemDisk&#34;)
     *             .clusterType(defaultMainVersions.applyValue(getMainVersionsResult -&gt; getMainVersionsResult.mainVersions()[0].clusterTypes()[0]))
     *             .instanceChargeType(&#34;PostPaid&#34;)
     *             .instanceType(defaultInstanceTypes.applyValue(getInstanceTypesResult -&gt; getInstanceTypesResult.types()[0].id()))
     *             .zoneId(defaultInstanceTypes.applyValue(getInstanceTypesResult -&gt; getInstanceTypesResult.types()[0].zoneId()))
     *             .build());
     * 
     *         final var defaultNetworks = VpcFunctions.getNetworks(GetNetworksArgs.builder()
     *             .nameRegex(&#34;default-NODELETING&#34;)
     *             .build());
     * 
     *         var defaultSecurityGroup = new SecurityGroup(&#34;defaultSecurityGroup&#34;, SecurityGroupArgs.builder()        
     *             .vpcId(defaultNetworks.applyValue(getNetworksResult -&gt; getNetworksResult.ids()[0]))
     *             .build());
     * 
     *         final var defaultSwitches = VpcFunctions.getSwitches(GetSwitchesArgs.builder()
     *             .vpcId(defaultNetworks.applyValue(getNetworksResult -&gt; getNetworksResult.ids()[0]))
     *             .zoneId(defaultInstanceTypes.applyValue(getInstanceTypesResult -&gt; getInstanceTypesResult.types()[0].zoneId()))
     *             .build());
     * 
     *         var defaultRole = new Role(&#34;defaultRole&#34;, RoleArgs.builder()        
     *             .document(&#34;&#34;&#34;
     *     {
     *         &#34;Statement&#34;: [
     *         {
     *             &#34;Action&#34;: &#34;sts:AssumeRole&#34;,
     *             &#34;Effect&#34;: &#34;Allow&#34;,
     *             &#34;Principal&#34;: {
     *             &#34;Service&#34;: [
     *                 &#34;emr.aliyuncs.com&#34;,
     *                 &#34;ecs.aliyuncs.com&#34;
     *             ]
     *             }
     *         }
     *         ],
     *         &#34;Version&#34;: &#34;1&#34;
     *     }
     *             &#34;&#34;&#34;)
     *             .description(&#34;this is a role test.&#34;)
     *             .force(true)
     *             .build());
     * 
     *         var defaultCluster = new Cluster(&#34;defaultCluster&#34;, ClusterArgs.builder()        
     *             .emrVer(defaultMainVersions.applyValue(getMainVersionsResult -&gt; getMainVersionsResult.mainVersions()[0].emrVersion()))
     *             .clusterType(defaultMainVersions.applyValue(getMainVersionsResult -&gt; getMainVersionsResult.mainVersions()[0].clusterTypes()[0]))
     *             .hostGroups(            
     *                 ClusterHostGroupArgs.builder()
     *                     .hostGroupName(&#34;master_group&#34;)
     *                     .hostGroupType(&#34;MASTER&#34;)
     *                     .nodeCount(&#34;2&#34;)
     *                     .instanceType(defaultInstanceTypes.applyValue(getInstanceTypesResult -&gt; getInstanceTypesResult.types()[0].id()))
     *                     .diskType(dataDisk.applyValue(getDiskTypesResult -&gt; getDiskTypesResult.types()[0].value()))
     *                     .diskCapacity(dataDisk.applyValue(getDiskTypesResult -&gt; getDiskTypesResult.types()[0].min()) &gt; 160 ? dataDisk.applyValue(getDiskTypesResult -&gt; getDiskTypesResult.types()[0].min()) : 160)
     *                     .diskCount(&#34;1&#34;)
     *                     .sysDiskType(systemDisk.applyValue(getDiskTypesResult -&gt; getDiskTypesResult.types()[0].value()))
     *                     .sysDiskCapacity(systemDisk.applyValue(getDiskTypesResult -&gt; getDiskTypesResult.types()[0].min()) &gt; 160 ? systemDisk.applyValue(getDiskTypesResult -&gt; getDiskTypesResult.types()[0].min()) : 160)
     *                     .build(),
     *                 ClusterHostGroupArgs.builder()
     *                     .hostGroupName(&#34;core_group&#34;)
     *                     .hostGroupType(&#34;CORE&#34;)
     *                     .nodeCount(&#34;3&#34;)
     *                     .instanceType(defaultInstanceTypes.applyValue(getInstanceTypesResult -&gt; getInstanceTypesResult.types()[0].id()))
     *                     .diskType(dataDisk.applyValue(getDiskTypesResult -&gt; getDiskTypesResult.types()[0].value()))
     *                     .diskCapacity(dataDisk.applyValue(getDiskTypesResult -&gt; getDiskTypesResult.types()[0].min()) &gt; 160 ? dataDisk.applyValue(getDiskTypesResult -&gt; getDiskTypesResult.types()[0].min()) : 160)
     *                     .diskCount(&#34;4&#34;)
     *                     .sysDiskType(systemDisk.applyValue(getDiskTypesResult -&gt; getDiskTypesResult.types()[0].value()))
     *                     .sysDiskCapacity(systemDisk.applyValue(getDiskTypesResult -&gt; getDiskTypesResult.types()[0].min()) &gt; 160 ? systemDisk.applyValue(getDiskTypesResult -&gt; getDiskTypesResult.types()[0].min()) : 160)
     *                     .build(),
     *                 ClusterHostGroupArgs.builder()
     *                     .hostGroupName(&#34;task_group&#34;)
     *                     .hostGroupType(&#34;TASK&#34;)
     *                     .nodeCount(&#34;2&#34;)
     *                     .instanceType(defaultInstanceTypes.applyValue(getInstanceTypesResult -&gt; getInstanceTypesResult.types()[0].id()))
     *                     .diskType(dataDisk.applyValue(getDiskTypesResult -&gt; getDiskTypesResult.types()[0].value()))
     *                     .diskCapacity(dataDisk.applyValue(getDiskTypesResult -&gt; getDiskTypesResult.types()[0].min()) &gt; 160 ? dataDisk.applyValue(getDiskTypesResult -&gt; getDiskTypesResult.types()[0].min()) : 160)
     *                     .diskCount(&#34;4&#34;)
     *                     .sysDiskType(systemDisk.applyValue(getDiskTypesResult -&gt; getDiskTypesResult.types()[0].value()))
     *                     .sysDiskCapacity(systemDisk.applyValue(getDiskTypesResult -&gt; getDiskTypesResult.types()[0].min()) &gt; 160 ? systemDisk.applyValue(getDiskTypesResult -&gt; getDiskTypesResult.types()[0].min()) : 160)
     *                     .build())
     *             .highAvailabilityEnable(true)
     *             .zoneId(defaultInstanceTypes.applyValue(getInstanceTypesResult -&gt; getInstanceTypesResult.types()[0].zoneId()))
     *             .securityGroupId(defaultSecurityGroup.id())
     *             .isOpenPublicIp(true)
     *             .chargeType(&#34;PostPaid&#34;)
     *             .vswitchId(defaultSwitches.applyValue(getSwitchesResult -&gt; getSwitchesResult.ids()[0]))
     *             .userDefinedEmrEcsRole(defaultRole.name())
     *             .sshEnable(true)
     *             .masterPwd(&#34;ABCtest1234!&#34;)
     *             .tags(Map.ofEntries(
     *                 Map.entry(&#34;Created&#34;, &#34;TF&#34;),
     *                 Map.entry(&#34;For&#34;, &#34;acceptance test&#34;)
     *             ))
     *             .build());
     * 
     *         final var ids = EmrFunctions.getClusters();
     * 
     *         ctx.export(&#34;emrClusterId1&#34;, ids.applyValue(getClustersResult -&gt; getClustersResult.clusters()[0].id()));
     *         final var nameRegex = EmrFunctions.getClusters(GetClustersArgs.builder()
     *             .nameRegex(defaultCluster.name())
     *             .build());
     * 
     *         ctx.export(&#34;emrClusterId2&#34;, nameRegex.applyValue(getClustersResult -&gt; getClustersResult).applyValue(nameRegex -&gt; nameRegex.applyValue(getClustersResult -&gt; getClustersResult.clusters()[0].id())));
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetClustersResult> getClustersPlain() {
        return getClustersPlain(GetClustersPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * This data source provides the Emr Clusters of the current Alibaba Cloud user.
     * 
     * &gt; **DEPRECATED:**  This datasource has been deprecated from version `1.204.0`. Please use new datasource emrv2_clusters.
     * 
     * &gt; **NOTE:** Available in v1.146.0+.
     * 
     * ## Example Usage
     * 
     * Basic Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.alicloud.resourcemanager.ResourcemanagerFunctions;
     * import com.pulumi.alicloud.resourcemanager.inputs.GetResourceGroupsArgs;
     * import com.pulumi.alicloud.emr.EmrFunctions;
     * import com.pulumi.alicloud.emr.inputs.GetMainVersionsArgs;
     * import com.pulumi.alicloud.emr.inputs.GetInstanceTypesArgs;
     * import com.pulumi.alicloud.emr.inputs.GetDiskTypesArgs;
     * import com.pulumi.alicloud.vpc.VpcFunctions;
     * import com.pulumi.alicloud.vpc.inputs.GetNetworksArgs;
     * import com.pulumi.alicloud.ecs.SecurityGroup;
     * import com.pulumi.alicloud.ecs.SecurityGroupArgs;
     * import com.pulumi.alicloud.vpc.inputs.GetSwitchesArgs;
     * import com.pulumi.alicloud.ram.Role;
     * import com.pulumi.alicloud.ram.RoleArgs;
     * import com.pulumi.alicloud.emr.Cluster;
     * import com.pulumi.alicloud.emr.ClusterArgs;
     * import com.pulumi.alicloud.emr.inputs.ClusterHostGroupArgs;
     * import com.pulumi.alicloud.emr.inputs.GetClustersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var config = ctx.config();
     *         final var name = config.get(&#34;name&#34;).orElse(&#34;tf-testAccClusters&#34;);
     *         final var defaultResourceGroups = ResourcemanagerFunctions.getResourceGroups(GetResourceGroupsArgs.builder()
     *             .status(&#34;OK&#34;)
     *             .build());
     * 
     *         final var defaultMainVersions = EmrFunctions.getMainVersions();
     * 
     *         final var defaultInstanceTypes = EmrFunctions.getInstanceTypes(GetInstanceTypesArgs.builder()
     *             .destinationResource(&#34;InstanceType&#34;)
     *             .clusterType(defaultMainVersions.applyValue(getMainVersionsResult -&gt; getMainVersionsResult.mainVersions()[0].clusterTypes()[0]))
     *             .supportLocalStorage(false)
     *             .instanceChargeType(&#34;PostPaid&#34;)
     *             .supportNodeTypes(            
     *                 &#34;MASTER&#34;,
     *                 &#34;CORE&#34;,
     *                 &#34;TASK&#34;)
     *             .build());
     * 
     *         final var dataDisk = EmrFunctions.getDiskTypes(GetDiskTypesArgs.builder()
     *             .destinationResource(&#34;DataDisk&#34;)
     *             .clusterType(defaultMainVersions.applyValue(getMainVersionsResult -&gt; getMainVersionsResult.mainVersions()[0].clusterTypes()[0]))
     *             .instanceChargeType(&#34;PostPaid&#34;)
     *             .instanceType(defaultInstanceTypes.applyValue(getInstanceTypesResult -&gt; getInstanceTypesResult.types()[0].id()))
     *             .zoneId(defaultInstanceTypes.applyValue(getInstanceTypesResult -&gt; getInstanceTypesResult.types()[0].zoneId()))
     *             .build());
     * 
     *         final var systemDisk = EmrFunctions.getDiskTypes(GetDiskTypesArgs.builder()
     *             .destinationResource(&#34;SystemDisk&#34;)
     *             .clusterType(defaultMainVersions.applyValue(getMainVersionsResult -&gt; getMainVersionsResult.mainVersions()[0].clusterTypes()[0]))
     *             .instanceChargeType(&#34;PostPaid&#34;)
     *             .instanceType(defaultInstanceTypes.applyValue(getInstanceTypesResult -&gt; getInstanceTypesResult.types()[0].id()))
     *             .zoneId(defaultInstanceTypes.applyValue(getInstanceTypesResult -&gt; getInstanceTypesResult.types()[0].zoneId()))
     *             .build());
     * 
     *         final var defaultNetworks = VpcFunctions.getNetworks(GetNetworksArgs.builder()
     *             .nameRegex(&#34;default-NODELETING&#34;)
     *             .build());
     * 
     *         var defaultSecurityGroup = new SecurityGroup(&#34;defaultSecurityGroup&#34;, SecurityGroupArgs.builder()        
     *             .vpcId(defaultNetworks.applyValue(getNetworksResult -&gt; getNetworksResult.ids()[0]))
     *             .build());
     * 
     *         final var defaultSwitches = VpcFunctions.getSwitches(GetSwitchesArgs.builder()
     *             .vpcId(defaultNetworks.applyValue(getNetworksResult -&gt; getNetworksResult.ids()[0]))
     *             .zoneId(defaultInstanceTypes.applyValue(getInstanceTypesResult -&gt; getInstanceTypesResult.types()[0].zoneId()))
     *             .build());
     * 
     *         var defaultRole = new Role(&#34;defaultRole&#34;, RoleArgs.builder()        
     *             .document(&#34;&#34;&#34;
     *     {
     *         &#34;Statement&#34;: [
     *         {
     *             &#34;Action&#34;: &#34;sts:AssumeRole&#34;,
     *             &#34;Effect&#34;: &#34;Allow&#34;,
     *             &#34;Principal&#34;: {
     *             &#34;Service&#34;: [
     *                 &#34;emr.aliyuncs.com&#34;,
     *                 &#34;ecs.aliyuncs.com&#34;
     *             ]
     *             }
     *         }
     *         ],
     *         &#34;Version&#34;: &#34;1&#34;
     *     }
     *             &#34;&#34;&#34;)
     *             .description(&#34;this is a role test.&#34;)
     *             .force(true)
     *             .build());
     * 
     *         var defaultCluster = new Cluster(&#34;defaultCluster&#34;, ClusterArgs.builder()        
     *             .emrVer(defaultMainVersions.applyValue(getMainVersionsResult -&gt; getMainVersionsResult.mainVersions()[0].emrVersion()))
     *             .clusterType(defaultMainVersions.applyValue(getMainVersionsResult -&gt; getMainVersionsResult.mainVersions()[0].clusterTypes()[0]))
     *             .hostGroups(            
     *                 ClusterHostGroupArgs.builder()
     *                     .hostGroupName(&#34;master_group&#34;)
     *                     .hostGroupType(&#34;MASTER&#34;)
     *                     .nodeCount(&#34;2&#34;)
     *                     .instanceType(defaultInstanceTypes.applyValue(getInstanceTypesResult -&gt; getInstanceTypesResult.types()[0].id()))
     *                     .diskType(dataDisk.applyValue(getDiskTypesResult -&gt; getDiskTypesResult.types()[0].value()))
     *                     .diskCapacity(dataDisk.applyValue(getDiskTypesResult -&gt; getDiskTypesResult.types()[0].min()) &gt; 160 ? dataDisk.applyValue(getDiskTypesResult -&gt; getDiskTypesResult.types()[0].min()) : 160)
     *                     .diskCount(&#34;1&#34;)
     *                     .sysDiskType(systemDisk.applyValue(getDiskTypesResult -&gt; getDiskTypesResult.types()[0].value()))
     *                     .sysDiskCapacity(systemDisk.applyValue(getDiskTypesResult -&gt; getDiskTypesResult.types()[0].min()) &gt; 160 ? systemDisk.applyValue(getDiskTypesResult -&gt; getDiskTypesResult.types()[0].min()) : 160)
     *                     .build(),
     *                 ClusterHostGroupArgs.builder()
     *                     .hostGroupName(&#34;core_group&#34;)
     *                     .hostGroupType(&#34;CORE&#34;)
     *                     .nodeCount(&#34;3&#34;)
     *                     .instanceType(defaultInstanceTypes.applyValue(getInstanceTypesResult -&gt; getInstanceTypesResult.types()[0].id()))
     *                     .diskType(dataDisk.applyValue(getDiskTypesResult -&gt; getDiskTypesResult.types()[0].value()))
     *                     .diskCapacity(dataDisk.applyValue(getDiskTypesResult -&gt; getDiskTypesResult.types()[0].min()) &gt; 160 ? dataDisk.applyValue(getDiskTypesResult -&gt; getDiskTypesResult.types()[0].min()) : 160)
     *                     .diskCount(&#34;4&#34;)
     *                     .sysDiskType(systemDisk.applyValue(getDiskTypesResult -&gt; getDiskTypesResult.types()[0].value()))
     *                     .sysDiskCapacity(systemDisk.applyValue(getDiskTypesResult -&gt; getDiskTypesResult.types()[0].min()) &gt; 160 ? systemDisk.applyValue(getDiskTypesResult -&gt; getDiskTypesResult.types()[0].min()) : 160)
     *                     .build(),
     *                 ClusterHostGroupArgs.builder()
     *                     .hostGroupName(&#34;task_group&#34;)
     *                     .hostGroupType(&#34;TASK&#34;)
     *                     .nodeCount(&#34;2&#34;)
     *                     .instanceType(defaultInstanceTypes.applyValue(getInstanceTypesResult -&gt; getInstanceTypesResult.types()[0].id()))
     *                     .diskType(dataDisk.applyValue(getDiskTypesResult -&gt; getDiskTypesResult.types()[0].value()))
     *                     .diskCapacity(dataDisk.applyValue(getDiskTypesResult -&gt; getDiskTypesResult.types()[0].min()) &gt; 160 ? dataDisk.applyValue(getDiskTypesResult -&gt; getDiskTypesResult.types()[0].min()) : 160)
     *                     .diskCount(&#34;4&#34;)
     *                     .sysDiskType(systemDisk.applyValue(getDiskTypesResult -&gt; getDiskTypesResult.types()[0].value()))
     *                     .sysDiskCapacity(systemDisk.applyValue(getDiskTypesResult -&gt; getDiskTypesResult.types()[0].min()) &gt; 160 ? systemDisk.applyValue(getDiskTypesResult -&gt; getDiskTypesResult.types()[0].min()) : 160)
     *                     .build())
     *             .highAvailabilityEnable(true)
     *             .zoneId(defaultInstanceTypes.applyValue(getInstanceTypesResult -&gt; getInstanceTypesResult.types()[0].zoneId()))
     *             .securityGroupId(defaultSecurityGroup.id())
     *             .isOpenPublicIp(true)
     *             .chargeType(&#34;PostPaid&#34;)
     *             .vswitchId(defaultSwitches.applyValue(getSwitchesResult -&gt; getSwitchesResult.ids()[0]))
     *             .userDefinedEmrEcsRole(defaultRole.name())
     *             .sshEnable(true)
     *             .masterPwd(&#34;ABCtest1234!&#34;)
     *             .tags(Map.ofEntries(
     *                 Map.entry(&#34;Created&#34;, &#34;TF&#34;),
     *                 Map.entry(&#34;For&#34;, &#34;acceptance test&#34;)
     *             ))
     *             .build());
     * 
     *         final var ids = EmrFunctions.getClusters();
     * 
     *         ctx.export(&#34;emrClusterId1&#34;, ids.applyValue(getClustersResult -&gt; getClustersResult.clusters()[0].id()));
     *         final var nameRegex = EmrFunctions.getClusters(GetClustersArgs.builder()
     *             .nameRegex(defaultCluster.name())
     *             .build());
     * 
     *         ctx.export(&#34;emrClusterId2&#34;, nameRegex.applyValue(getClustersResult -&gt; getClustersResult).applyValue(nameRegex -&gt; nameRegex.applyValue(getClustersResult -&gt; getClustersResult.clusters()[0].id())));
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetClustersResult> getClusters(GetClustersArgs args) {
        return getClusters(args, InvokeOptions.Empty);
    }
    /**
     * This data source provides the Emr Clusters of the current Alibaba Cloud user.
     * 
     * &gt; **DEPRECATED:**  This datasource has been deprecated from version `1.204.0`. Please use new datasource emrv2_clusters.
     * 
     * &gt; **NOTE:** Available in v1.146.0+.
     * 
     * ## Example Usage
     * 
     * Basic Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.alicloud.resourcemanager.ResourcemanagerFunctions;
     * import com.pulumi.alicloud.resourcemanager.inputs.GetResourceGroupsArgs;
     * import com.pulumi.alicloud.emr.EmrFunctions;
     * import com.pulumi.alicloud.emr.inputs.GetMainVersionsArgs;
     * import com.pulumi.alicloud.emr.inputs.GetInstanceTypesArgs;
     * import com.pulumi.alicloud.emr.inputs.GetDiskTypesArgs;
     * import com.pulumi.alicloud.vpc.VpcFunctions;
     * import com.pulumi.alicloud.vpc.inputs.GetNetworksArgs;
     * import com.pulumi.alicloud.ecs.SecurityGroup;
     * import com.pulumi.alicloud.ecs.SecurityGroupArgs;
     * import com.pulumi.alicloud.vpc.inputs.GetSwitchesArgs;
     * import com.pulumi.alicloud.ram.Role;
     * import com.pulumi.alicloud.ram.RoleArgs;
     * import com.pulumi.alicloud.emr.Cluster;
     * import com.pulumi.alicloud.emr.ClusterArgs;
     * import com.pulumi.alicloud.emr.inputs.ClusterHostGroupArgs;
     * import com.pulumi.alicloud.emr.inputs.GetClustersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var config = ctx.config();
     *         final var name = config.get(&#34;name&#34;).orElse(&#34;tf-testAccClusters&#34;);
     *         final var defaultResourceGroups = ResourcemanagerFunctions.getResourceGroups(GetResourceGroupsArgs.builder()
     *             .status(&#34;OK&#34;)
     *             .build());
     * 
     *         final var defaultMainVersions = EmrFunctions.getMainVersions();
     * 
     *         final var defaultInstanceTypes = EmrFunctions.getInstanceTypes(GetInstanceTypesArgs.builder()
     *             .destinationResource(&#34;InstanceType&#34;)
     *             .clusterType(defaultMainVersions.applyValue(getMainVersionsResult -&gt; getMainVersionsResult.mainVersions()[0].clusterTypes()[0]))
     *             .supportLocalStorage(false)
     *             .instanceChargeType(&#34;PostPaid&#34;)
     *             .supportNodeTypes(            
     *                 &#34;MASTER&#34;,
     *                 &#34;CORE&#34;,
     *                 &#34;TASK&#34;)
     *             .build());
     * 
     *         final var dataDisk = EmrFunctions.getDiskTypes(GetDiskTypesArgs.builder()
     *             .destinationResource(&#34;DataDisk&#34;)
     *             .clusterType(defaultMainVersions.applyValue(getMainVersionsResult -&gt; getMainVersionsResult.mainVersions()[0].clusterTypes()[0]))
     *             .instanceChargeType(&#34;PostPaid&#34;)
     *             .instanceType(defaultInstanceTypes.applyValue(getInstanceTypesResult -&gt; getInstanceTypesResult.types()[0].id()))
     *             .zoneId(defaultInstanceTypes.applyValue(getInstanceTypesResult -&gt; getInstanceTypesResult.types()[0].zoneId()))
     *             .build());
     * 
     *         final var systemDisk = EmrFunctions.getDiskTypes(GetDiskTypesArgs.builder()
     *             .destinationResource(&#34;SystemDisk&#34;)
     *             .clusterType(defaultMainVersions.applyValue(getMainVersionsResult -&gt; getMainVersionsResult.mainVersions()[0].clusterTypes()[0]))
     *             .instanceChargeType(&#34;PostPaid&#34;)
     *             .instanceType(defaultInstanceTypes.applyValue(getInstanceTypesResult -&gt; getInstanceTypesResult.types()[0].id()))
     *             .zoneId(defaultInstanceTypes.applyValue(getInstanceTypesResult -&gt; getInstanceTypesResult.types()[0].zoneId()))
     *             .build());
     * 
     *         final var defaultNetworks = VpcFunctions.getNetworks(GetNetworksArgs.builder()
     *             .nameRegex(&#34;default-NODELETING&#34;)
     *             .build());
     * 
     *         var defaultSecurityGroup = new SecurityGroup(&#34;defaultSecurityGroup&#34;, SecurityGroupArgs.builder()        
     *             .vpcId(defaultNetworks.applyValue(getNetworksResult -&gt; getNetworksResult.ids()[0]))
     *             .build());
     * 
     *         final var defaultSwitches = VpcFunctions.getSwitches(GetSwitchesArgs.builder()
     *             .vpcId(defaultNetworks.applyValue(getNetworksResult -&gt; getNetworksResult.ids()[0]))
     *             .zoneId(defaultInstanceTypes.applyValue(getInstanceTypesResult -&gt; getInstanceTypesResult.types()[0].zoneId()))
     *             .build());
     * 
     *         var defaultRole = new Role(&#34;defaultRole&#34;, RoleArgs.builder()        
     *             .document(&#34;&#34;&#34;
     *     {
     *         &#34;Statement&#34;: [
     *         {
     *             &#34;Action&#34;: &#34;sts:AssumeRole&#34;,
     *             &#34;Effect&#34;: &#34;Allow&#34;,
     *             &#34;Principal&#34;: {
     *             &#34;Service&#34;: [
     *                 &#34;emr.aliyuncs.com&#34;,
     *                 &#34;ecs.aliyuncs.com&#34;
     *             ]
     *             }
     *         }
     *         ],
     *         &#34;Version&#34;: &#34;1&#34;
     *     }
     *             &#34;&#34;&#34;)
     *             .description(&#34;this is a role test.&#34;)
     *             .force(true)
     *             .build());
     * 
     *         var defaultCluster = new Cluster(&#34;defaultCluster&#34;, ClusterArgs.builder()        
     *             .emrVer(defaultMainVersions.applyValue(getMainVersionsResult -&gt; getMainVersionsResult.mainVersions()[0].emrVersion()))
     *             .clusterType(defaultMainVersions.applyValue(getMainVersionsResult -&gt; getMainVersionsResult.mainVersions()[0].clusterTypes()[0]))
     *             .hostGroups(            
     *                 ClusterHostGroupArgs.builder()
     *                     .hostGroupName(&#34;master_group&#34;)
     *                     .hostGroupType(&#34;MASTER&#34;)
     *                     .nodeCount(&#34;2&#34;)
     *                     .instanceType(defaultInstanceTypes.applyValue(getInstanceTypesResult -&gt; getInstanceTypesResult.types()[0].id()))
     *                     .diskType(dataDisk.applyValue(getDiskTypesResult -&gt; getDiskTypesResult.types()[0].value()))
     *                     .diskCapacity(dataDisk.applyValue(getDiskTypesResult -&gt; getDiskTypesResult.types()[0].min()) &gt; 160 ? dataDisk.applyValue(getDiskTypesResult -&gt; getDiskTypesResult.types()[0].min()) : 160)
     *                     .diskCount(&#34;1&#34;)
     *                     .sysDiskType(systemDisk.applyValue(getDiskTypesResult -&gt; getDiskTypesResult.types()[0].value()))
     *                     .sysDiskCapacity(systemDisk.applyValue(getDiskTypesResult -&gt; getDiskTypesResult.types()[0].min()) &gt; 160 ? systemDisk.applyValue(getDiskTypesResult -&gt; getDiskTypesResult.types()[0].min()) : 160)
     *                     .build(),
     *                 ClusterHostGroupArgs.builder()
     *                     .hostGroupName(&#34;core_group&#34;)
     *                     .hostGroupType(&#34;CORE&#34;)
     *                     .nodeCount(&#34;3&#34;)
     *                     .instanceType(defaultInstanceTypes.applyValue(getInstanceTypesResult -&gt; getInstanceTypesResult.types()[0].id()))
     *                     .diskType(dataDisk.applyValue(getDiskTypesResult -&gt; getDiskTypesResult.types()[0].value()))
     *                     .diskCapacity(dataDisk.applyValue(getDiskTypesResult -&gt; getDiskTypesResult.types()[0].min()) &gt; 160 ? dataDisk.applyValue(getDiskTypesResult -&gt; getDiskTypesResult.types()[0].min()) : 160)
     *                     .diskCount(&#34;4&#34;)
     *                     .sysDiskType(systemDisk.applyValue(getDiskTypesResult -&gt; getDiskTypesResult.types()[0].value()))
     *                     .sysDiskCapacity(systemDisk.applyValue(getDiskTypesResult -&gt; getDiskTypesResult.types()[0].min()) &gt; 160 ? systemDisk.applyValue(getDiskTypesResult -&gt; getDiskTypesResult.types()[0].min()) : 160)
     *                     .build(),
     *                 ClusterHostGroupArgs.builder()
     *                     .hostGroupName(&#34;task_group&#34;)
     *                     .hostGroupType(&#34;TASK&#34;)
     *                     .nodeCount(&#34;2&#34;)
     *                     .instanceType(defaultInstanceTypes.applyValue(getInstanceTypesResult -&gt; getInstanceTypesResult.types()[0].id()))
     *                     .diskType(dataDisk.applyValue(getDiskTypesResult -&gt; getDiskTypesResult.types()[0].value()))
     *                     .diskCapacity(dataDisk.applyValue(getDiskTypesResult -&gt; getDiskTypesResult.types()[0].min()) &gt; 160 ? dataDisk.applyValue(getDiskTypesResult -&gt; getDiskTypesResult.types()[0].min()) : 160)
     *                     .diskCount(&#34;4&#34;)
     *                     .sysDiskType(systemDisk.applyValue(getDiskTypesResult -&gt; getDiskTypesResult.types()[0].value()))
     *                     .sysDiskCapacity(systemDisk.applyValue(getDiskTypesResult -&gt; getDiskTypesResult.types()[0].min()) &gt; 160 ? systemDisk.applyValue(getDiskTypesResult -&gt; getDiskTypesResult.types()[0].min()) : 160)
     *                     .build())
     *             .highAvailabilityEnable(true)
     *             .zoneId(defaultInstanceTypes.applyValue(getInstanceTypesResult -&gt; getInstanceTypesResult.types()[0].zoneId()))
     *             .securityGroupId(defaultSecurityGroup.id())
     *             .isOpenPublicIp(true)
     *             .chargeType(&#34;PostPaid&#34;)
     *             .vswitchId(defaultSwitches.applyValue(getSwitchesResult -&gt; getSwitchesResult.ids()[0]))
     *             .userDefinedEmrEcsRole(defaultRole.name())
     *             .sshEnable(true)
     *             .masterPwd(&#34;ABCtest1234!&#34;)
     *             .tags(Map.ofEntries(
     *                 Map.entry(&#34;Created&#34;, &#34;TF&#34;),
     *                 Map.entry(&#34;For&#34;, &#34;acceptance test&#34;)
     *             ))
     *             .build());
     * 
     *         final var ids = EmrFunctions.getClusters();
     * 
     *         ctx.export(&#34;emrClusterId1&#34;, ids.applyValue(getClustersResult -&gt; getClustersResult.clusters()[0].id()));
     *         final var nameRegex = EmrFunctions.getClusters(GetClustersArgs.builder()
     *             .nameRegex(defaultCluster.name())
     *             .build());
     * 
     *         ctx.export(&#34;emrClusterId2&#34;, nameRegex.applyValue(getClustersResult -&gt; getClustersResult).applyValue(nameRegex -&gt; nameRegex.applyValue(getClustersResult -&gt; getClustersResult.clusters()[0].id())));
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetClustersResult> getClustersPlain(GetClustersPlainArgs args) {
        return getClustersPlain(args, InvokeOptions.Empty);
    }
    /**
     * This data source provides the Emr Clusters of the current Alibaba Cloud user.
     * 
     * &gt; **DEPRECATED:**  This datasource has been deprecated from version `1.204.0`. Please use new datasource emrv2_clusters.
     * 
     * &gt; **NOTE:** Available in v1.146.0+.
     * 
     * ## Example Usage
     * 
     * Basic Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.alicloud.resourcemanager.ResourcemanagerFunctions;
     * import com.pulumi.alicloud.resourcemanager.inputs.GetResourceGroupsArgs;
     * import com.pulumi.alicloud.emr.EmrFunctions;
     * import com.pulumi.alicloud.emr.inputs.GetMainVersionsArgs;
     * import com.pulumi.alicloud.emr.inputs.GetInstanceTypesArgs;
     * import com.pulumi.alicloud.emr.inputs.GetDiskTypesArgs;
     * import com.pulumi.alicloud.vpc.VpcFunctions;
     * import com.pulumi.alicloud.vpc.inputs.GetNetworksArgs;
     * import com.pulumi.alicloud.ecs.SecurityGroup;
     * import com.pulumi.alicloud.ecs.SecurityGroupArgs;
     * import com.pulumi.alicloud.vpc.inputs.GetSwitchesArgs;
     * import com.pulumi.alicloud.ram.Role;
     * import com.pulumi.alicloud.ram.RoleArgs;
     * import com.pulumi.alicloud.emr.Cluster;
     * import com.pulumi.alicloud.emr.ClusterArgs;
     * import com.pulumi.alicloud.emr.inputs.ClusterHostGroupArgs;
     * import com.pulumi.alicloud.emr.inputs.GetClustersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var config = ctx.config();
     *         final var name = config.get(&#34;name&#34;).orElse(&#34;tf-testAccClusters&#34;);
     *         final var defaultResourceGroups = ResourcemanagerFunctions.getResourceGroups(GetResourceGroupsArgs.builder()
     *             .status(&#34;OK&#34;)
     *             .build());
     * 
     *         final var defaultMainVersions = EmrFunctions.getMainVersions();
     * 
     *         final var defaultInstanceTypes = EmrFunctions.getInstanceTypes(GetInstanceTypesArgs.builder()
     *             .destinationResource(&#34;InstanceType&#34;)
     *             .clusterType(defaultMainVersions.applyValue(getMainVersionsResult -&gt; getMainVersionsResult.mainVersions()[0].clusterTypes()[0]))
     *             .supportLocalStorage(false)
     *             .instanceChargeType(&#34;PostPaid&#34;)
     *             .supportNodeTypes(            
     *                 &#34;MASTER&#34;,
     *                 &#34;CORE&#34;,
     *                 &#34;TASK&#34;)
     *             .build());
     * 
     *         final var dataDisk = EmrFunctions.getDiskTypes(GetDiskTypesArgs.builder()
     *             .destinationResource(&#34;DataDisk&#34;)
     *             .clusterType(defaultMainVersions.applyValue(getMainVersionsResult -&gt; getMainVersionsResult.mainVersions()[0].clusterTypes()[0]))
     *             .instanceChargeType(&#34;PostPaid&#34;)
     *             .instanceType(defaultInstanceTypes.applyValue(getInstanceTypesResult -&gt; getInstanceTypesResult.types()[0].id()))
     *             .zoneId(defaultInstanceTypes.applyValue(getInstanceTypesResult -&gt; getInstanceTypesResult.types()[0].zoneId()))
     *             .build());
     * 
     *         final var systemDisk = EmrFunctions.getDiskTypes(GetDiskTypesArgs.builder()
     *             .destinationResource(&#34;SystemDisk&#34;)
     *             .clusterType(defaultMainVersions.applyValue(getMainVersionsResult -&gt; getMainVersionsResult.mainVersions()[0].clusterTypes()[0]))
     *             .instanceChargeType(&#34;PostPaid&#34;)
     *             .instanceType(defaultInstanceTypes.applyValue(getInstanceTypesResult -&gt; getInstanceTypesResult.types()[0].id()))
     *             .zoneId(defaultInstanceTypes.applyValue(getInstanceTypesResult -&gt; getInstanceTypesResult.types()[0].zoneId()))
     *             .build());
     * 
     *         final var defaultNetworks = VpcFunctions.getNetworks(GetNetworksArgs.builder()
     *             .nameRegex(&#34;default-NODELETING&#34;)
     *             .build());
     * 
     *         var defaultSecurityGroup = new SecurityGroup(&#34;defaultSecurityGroup&#34;, SecurityGroupArgs.builder()        
     *             .vpcId(defaultNetworks.applyValue(getNetworksResult -&gt; getNetworksResult.ids()[0]))
     *             .build());
     * 
     *         final var defaultSwitches = VpcFunctions.getSwitches(GetSwitchesArgs.builder()
     *             .vpcId(defaultNetworks.applyValue(getNetworksResult -&gt; getNetworksResult.ids()[0]))
     *             .zoneId(defaultInstanceTypes.applyValue(getInstanceTypesResult -&gt; getInstanceTypesResult.types()[0].zoneId()))
     *             .build());
     * 
     *         var defaultRole = new Role(&#34;defaultRole&#34;, RoleArgs.builder()        
     *             .document(&#34;&#34;&#34;
     *     {
     *         &#34;Statement&#34;: [
     *         {
     *             &#34;Action&#34;: &#34;sts:AssumeRole&#34;,
     *             &#34;Effect&#34;: &#34;Allow&#34;,
     *             &#34;Principal&#34;: {
     *             &#34;Service&#34;: [
     *                 &#34;emr.aliyuncs.com&#34;,
     *                 &#34;ecs.aliyuncs.com&#34;
     *             ]
     *             }
     *         }
     *         ],
     *         &#34;Version&#34;: &#34;1&#34;
     *     }
     *             &#34;&#34;&#34;)
     *             .description(&#34;this is a role test.&#34;)
     *             .force(true)
     *             .build());
     * 
     *         var defaultCluster = new Cluster(&#34;defaultCluster&#34;, ClusterArgs.builder()        
     *             .emrVer(defaultMainVersions.applyValue(getMainVersionsResult -&gt; getMainVersionsResult.mainVersions()[0].emrVersion()))
     *             .clusterType(defaultMainVersions.applyValue(getMainVersionsResult -&gt; getMainVersionsResult.mainVersions()[0].clusterTypes()[0]))
     *             .hostGroups(            
     *                 ClusterHostGroupArgs.builder()
     *                     .hostGroupName(&#34;master_group&#34;)
     *                     .hostGroupType(&#34;MASTER&#34;)
     *                     .nodeCount(&#34;2&#34;)
     *                     .instanceType(defaultInstanceTypes.applyValue(getInstanceTypesResult -&gt; getInstanceTypesResult.types()[0].id()))
     *                     .diskType(dataDisk.applyValue(getDiskTypesResult -&gt; getDiskTypesResult.types()[0].value()))
     *                     .diskCapacity(dataDisk.applyValue(getDiskTypesResult -&gt; getDiskTypesResult.types()[0].min()) &gt; 160 ? dataDisk.applyValue(getDiskTypesResult -&gt; getDiskTypesResult.types()[0].min()) : 160)
     *                     .diskCount(&#34;1&#34;)
     *                     .sysDiskType(systemDisk.applyValue(getDiskTypesResult -&gt; getDiskTypesResult.types()[0].value()))
     *                     .sysDiskCapacity(systemDisk.applyValue(getDiskTypesResult -&gt; getDiskTypesResult.types()[0].min()) &gt; 160 ? systemDisk.applyValue(getDiskTypesResult -&gt; getDiskTypesResult.types()[0].min()) : 160)
     *                     .build(),
     *                 ClusterHostGroupArgs.builder()
     *                     .hostGroupName(&#34;core_group&#34;)
     *                     .hostGroupType(&#34;CORE&#34;)
     *                     .nodeCount(&#34;3&#34;)
     *                     .instanceType(defaultInstanceTypes.applyValue(getInstanceTypesResult -&gt; getInstanceTypesResult.types()[0].id()))
     *                     .diskType(dataDisk.applyValue(getDiskTypesResult -&gt; getDiskTypesResult.types()[0].value()))
     *                     .diskCapacity(dataDisk.applyValue(getDiskTypesResult -&gt; getDiskTypesResult.types()[0].min()) &gt; 160 ? dataDisk.applyValue(getDiskTypesResult -&gt; getDiskTypesResult.types()[0].min()) : 160)
     *                     .diskCount(&#34;4&#34;)
     *                     .sysDiskType(systemDisk.applyValue(getDiskTypesResult -&gt; getDiskTypesResult.types()[0].value()))
     *                     .sysDiskCapacity(systemDisk.applyValue(getDiskTypesResult -&gt; getDiskTypesResult.types()[0].min()) &gt; 160 ? systemDisk.applyValue(getDiskTypesResult -&gt; getDiskTypesResult.types()[0].min()) : 160)
     *                     .build(),
     *                 ClusterHostGroupArgs.builder()
     *                     .hostGroupName(&#34;task_group&#34;)
     *                     .hostGroupType(&#34;TASK&#34;)
     *                     .nodeCount(&#34;2&#34;)
     *                     .instanceType(defaultInstanceTypes.applyValue(getInstanceTypesResult -&gt; getInstanceTypesResult.types()[0].id()))
     *                     .diskType(dataDisk.applyValue(getDiskTypesResult -&gt; getDiskTypesResult.types()[0].value()))
     *                     .diskCapacity(dataDisk.applyValue(getDiskTypesResult -&gt; getDiskTypesResult.types()[0].min()) &gt; 160 ? dataDisk.applyValue(getDiskTypesResult -&gt; getDiskTypesResult.types()[0].min()) : 160)
     *                     .diskCount(&#34;4&#34;)
     *                     .sysDiskType(systemDisk.applyValue(getDiskTypesResult -&gt; getDiskTypesResult.types()[0].value()))
     *                     .sysDiskCapacity(systemDisk.applyValue(getDiskTypesResult -&gt; getDiskTypesResult.types()[0].min()) &gt; 160 ? systemDisk.applyValue(getDiskTypesResult -&gt; getDiskTypesResult.types()[0].min()) : 160)
     *                     .build())
     *             .highAvailabilityEnable(true)
     *             .zoneId(defaultInstanceTypes.applyValue(getInstanceTypesResult -&gt; getInstanceTypesResult.types()[0].zoneId()))
     *             .securityGroupId(defaultSecurityGroup.id())
     *             .isOpenPublicIp(true)
     *             .chargeType(&#34;PostPaid&#34;)
     *             .vswitchId(defaultSwitches.applyValue(getSwitchesResult -&gt; getSwitchesResult.ids()[0]))
     *             .userDefinedEmrEcsRole(defaultRole.name())
     *             .sshEnable(true)
     *             .masterPwd(&#34;ABCtest1234!&#34;)
     *             .tags(Map.ofEntries(
     *                 Map.entry(&#34;Created&#34;, &#34;TF&#34;),
     *                 Map.entry(&#34;For&#34;, &#34;acceptance test&#34;)
     *             ))
     *             .build());
     * 
     *         final var ids = EmrFunctions.getClusters();
     * 
     *         ctx.export(&#34;emrClusterId1&#34;, ids.applyValue(getClustersResult -&gt; getClustersResult.clusters()[0].id()));
     *         final var nameRegex = EmrFunctions.getClusters(GetClustersArgs.builder()
     *             .nameRegex(defaultCluster.name())
     *             .build());
     * 
     *         ctx.export(&#34;emrClusterId2&#34;, nameRegex.applyValue(getClustersResult -&gt; getClustersResult).applyValue(nameRegex -&gt; nameRegex.applyValue(getClustersResult -&gt; getClustersResult.clusters()[0].id())));
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetClustersResult> getClusters(GetClustersArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("alicloud:emr/getClusters:getClusters", TypeShape.of(GetClustersResult.class), args, Utilities.withVersion(options));
    }
    /**
     * This data source provides the Emr Clusters of the current Alibaba Cloud user.
     * 
     * &gt; **DEPRECATED:**  This datasource has been deprecated from version `1.204.0`. Please use new datasource emrv2_clusters.
     * 
     * &gt; **NOTE:** Available in v1.146.0+.
     * 
     * ## Example Usage
     * 
     * Basic Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.alicloud.resourcemanager.ResourcemanagerFunctions;
     * import com.pulumi.alicloud.resourcemanager.inputs.GetResourceGroupsArgs;
     * import com.pulumi.alicloud.emr.EmrFunctions;
     * import com.pulumi.alicloud.emr.inputs.GetMainVersionsArgs;
     * import com.pulumi.alicloud.emr.inputs.GetInstanceTypesArgs;
     * import com.pulumi.alicloud.emr.inputs.GetDiskTypesArgs;
     * import com.pulumi.alicloud.vpc.VpcFunctions;
     * import com.pulumi.alicloud.vpc.inputs.GetNetworksArgs;
     * import com.pulumi.alicloud.ecs.SecurityGroup;
     * import com.pulumi.alicloud.ecs.SecurityGroupArgs;
     * import com.pulumi.alicloud.vpc.inputs.GetSwitchesArgs;
     * import com.pulumi.alicloud.ram.Role;
     * import com.pulumi.alicloud.ram.RoleArgs;
     * import com.pulumi.alicloud.emr.Cluster;
     * import com.pulumi.alicloud.emr.ClusterArgs;
     * import com.pulumi.alicloud.emr.inputs.ClusterHostGroupArgs;
     * import com.pulumi.alicloud.emr.inputs.GetClustersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var config = ctx.config();
     *         final var name = config.get(&#34;name&#34;).orElse(&#34;tf-testAccClusters&#34;);
     *         final var defaultResourceGroups = ResourcemanagerFunctions.getResourceGroups(GetResourceGroupsArgs.builder()
     *             .status(&#34;OK&#34;)
     *             .build());
     * 
     *         final var defaultMainVersions = EmrFunctions.getMainVersions();
     * 
     *         final var defaultInstanceTypes = EmrFunctions.getInstanceTypes(GetInstanceTypesArgs.builder()
     *             .destinationResource(&#34;InstanceType&#34;)
     *             .clusterType(defaultMainVersions.applyValue(getMainVersionsResult -&gt; getMainVersionsResult.mainVersions()[0].clusterTypes()[0]))
     *             .supportLocalStorage(false)
     *             .instanceChargeType(&#34;PostPaid&#34;)
     *             .supportNodeTypes(            
     *                 &#34;MASTER&#34;,
     *                 &#34;CORE&#34;,
     *                 &#34;TASK&#34;)
     *             .build());
     * 
     *         final var dataDisk = EmrFunctions.getDiskTypes(GetDiskTypesArgs.builder()
     *             .destinationResource(&#34;DataDisk&#34;)
     *             .clusterType(defaultMainVersions.applyValue(getMainVersionsResult -&gt; getMainVersionsResult.mainVersions()[0].clusterTypes()[0]))
     *             .instanceChargeType(&#34;PostPaid&#34;)
     *             .instanceType(defaultInstanceTypes.applyValue(getInstanceTypesResult -&gt; getInstanceTypesResult.types()[0].id()))
     *             .zoneId(defaultInstanceTypes.applyValue(getInstanceTypesResult -&gt; getInstanceTypesResult.types()[0].zoneId()))
     *             .build());
     * 
     *         final var systemDisk = EmrFunctions.getDiskTypes(GetDiskTypesArgs.builder()
     *             .destinationResource(&#34;SystemDisk&#34;)
     *             .clusterType(defaultMainVersions.applyValue(getMainVersionsResult -&gt; getMainVersionsResult.mainVersions()[0].clusterTypes()[0]))
     *             .instanceChargeType(&#34;PostPaid&#34;)
     *             .instanceType(defaultInstanceTypes.applyValue(getInstanceTypesResult -&gt; getInstanceTypesResult.types()[0].id()))
     *             .zoneId(defaultInstanceTypes.applyValue(getInstanceTypesResult -&gt; getInstanceTypesResult.types()[0].zoneId()))
     *             .build());
     * 
     *         final var defaultNetworks = VpcFunctions.getNetworks(GetNetworksArgs.builder()
     *             .nameRegex(&#34;default-NODELETING&#34;)
     *             .build());
     * 
     *         var defaultSecurityGroup = new SecurityGroup(&#34;defaultSecurityGroup&#34;, SecurityGroupArgs.builder()        
     *             .vpcId(defaultNetworks.applyValue(getNetworksResult -&gt; getNetworksResult.ids()[0]))
     *             .build());
     * 
     *         final var defaultSwitches = VpcFunctions.getSwitches(GetSwitchesArgs.builder()
     *             .vpcId(defaultNetworks.applyValue(getNetworksResult -&gt; getNetworksResult.ids()[0]))
     *             .zoneId(defaultInstanceTypes.applyValue(getInstanceTypesResult -&gt; getInstanceTypesResult.types()[0].zoneId()))
     *             .build());
     * 
     *         var defaultRole = new Role(&#34;defaultRole&#34;, RoleArgs.builder()        
     *             .document(&#34;&#34;&#34;
     *     {
     *         &#34;Statement&#34;: [
     *         {
     *             &#34;Action&#34;: &#34;sts:AssumeRole&#34;,
     *             &#34;Effect&#34;: &#34;Allow&#34;,
     *             &#34;Principal&#34;: {
     *             &#34;Service&#34;: [
     *                 &#34;emr.aliyuncs.com&#34;,
     *                 &#34;ecs.aliyuncs.com&#34;
     *             ]
     *             }
     *         }
     *         ],
     *         &#34;Version&#34;: &#34;1&#34;
     *     }
     *             &#34;&#34;&#34;)
     *             .description(&#34;this is a role test.&#34;)
     *             .force(true)
     *             .build());
     * 
     *         var defaultCluster = new Cluster(&#34;defaultCluster&#34;, ClusterArgs.builder()        
     *             .emrVer(defaultMainVersions.applyValue(getMainVersionsResult -&gt; getMainVersionsResult.mainVersions()[0].emrVersion()))
     *             .clusterType(defaultMainVersions.applyValue(getMainVersionsResult -&gt; getMainVersionsResult.mainVersions()[0].clusterTypes()[0]))
     *             .hostGroups(            
     *                 ClusterHostGroupArgs.builder()
     *                     .hostGroupName(&#34;master_group&#34;)
     *                     .hostGroupType(&#34;MASTER&#34;)
     *                     .nodeCount(&#34;2&#34;)
     *                     .instanceType(defaultInstanceTypes.applyValue(getInstanceTypesResult -&gt; getInstanceTypesResult.types()[0].id()))
     *                     .diskType(dataDisk.applyValue(getDiskTypesResult -&gt; getDiskTypesResult.types()[0].value()))
     *                     .diskCapacity(dataDisk.applyValue(getDiskTypesResult -&gt; getDiskTypesResult.types()[0].min()) &gt; 160 ? dataDisk.applyValue(getDiskTypesResult -&gt; getDiskTypesResult.types()[0].min()) : 160)
     *                     .diskCount(&#34;1&#34;)
     *                     .sysDiskType(systemDisk.applyValue(getDiskTypesResult -&gt; getDiskTypesResult.types()[0].value()))
     *                     .sysDiskCapacity(systemDisk.applyValue(getDiskTypesResult -&gt; getDiskTypesResult.types()[0].min()) &gt; 160 ? systemDisk.applyValue(getDiskTypesResult -&gt; getDiskTypesResult.types()[0].min()) : 160)
     *                     .build(),
     *                 ClusterHostGroupArgs.builder()
     *                     .hostGroupName(&#34;core_group&#34;)
     *                     .hostGroupType(&#34;CORE&#34;)
     *                     .nodeCount(&#34;3&#34;)
     *                     .instanceType(defaultInstanceTypes.applyValue(getInstanceTypesResult -&gt; getInstanceTypesResult.types()[0].id()))
     *                     .diskType(dataDisk.applyValue(getDiskTypesResult -&gt; getDiskTypesResult.types()[0].value()))
     *                     .diskCapacity(dataDisk.applyValue(getDiskTypesResult -&gt; getDiskTypesResult.types()[0].min()) &gt; 160 ? dataDisk.applyValue(getDiskTypesResult -&gt; getDiskTypesResult.types()[0].min()) : 160)
     *                     .diskCount(&#34;4&#34;)
     *                     .sysDiskType(systemDisk.applyValue(getDiskTypesResult -&gt; getDiskTypesResult.types()[0].value()))
     *                     .sysDiskCapacity(systemDisk.applyValue(getDiskTypesResult -&gt; getDiskTypesResult.types()[0].min()) &gt; 160 ? systemDisk.applyValue(getDiskTypesResult -&gt; getDiskTypesResult.types()[0].min()) : 160)
     *                     .build(),
     *                 ClusterHostGroupArgs.builder()
     *                     .hostGroupName(&#34;task_group&#34;)
     *                     .hostGroupType(&#34;TASK&#34;)
     *                     .nodeCount(&#34;2&#34;)
     *                     .instanceType(defaultInstanceTypes.applyValue(getInstanceTypesResult -&gt; getInstanceTypesResult.types()[0].id()))
     *                     .diskType(dataDisk.applyValue(getDiskTypesResult -&gt; getDiskTypesResult.types()[0].value()))
     *                     .diskCapacity(dataDisk.applyValue(getDiskTypesResult -&gt; getDiskTypesResult.types()[0].min()) &gt; 160 ? dataDisk.applyValue(getDiskTypesResult -&gt; getDiskTypesResult.types()[0].min()) : 160)
     *                     .diskCount(&#34;4&#34;)
     *                     .sysDiskType(systemDisk.applyValue(getDiskTypesResult -&gt; getDiskTypesResult.types()[0].value()))
     *                     .sysDiskCapacity(systemDisk.applyValue(getDiskTypesResult -&gt; getDiskTypesResult.types()[0].min()) &gt; 160 ? systemDisk.applyValue(getDiskTypesResult -&gt; getDiskTypesResult.types()[0].min()) : 160)
     *                     .build())
     *             .highAvailabilityEnable(true)
     *             .zoneId(defaultInstanceTypes.applyValue(getInstanceTypesResult -&gt; getInstanceTypesResult.types()[0].zoneId()))
     *             .securityGroupId(defaultSecurityGroup.id())
     *             .isOpenPublicIp(true)
     *             .chargeType(&#34;PostPaid&#34;)
     *             .vswitchId(defaultSwitches.applyValue(getSwitchesResult -&gt; getSwitchesResult.ids()[0]))
     *             .userDefinedEmrEcsRole(defaultRole.name())
     *             .sshEnable(true)
     *             .masterPwd(&#34;ABCtest1234!&#34;)
     *             .tags(Map.ofEntries(
     *                 Map.entry(&#34;Created&#34;, &#34;TF&#34;),
     *                 Map.entry(&#34;For&#34;, &#34;acceptance test&#34;)
     *             ))
     *             .build());
     * 
     *         final var ids = EmrFunctions.getClusters();
     * 
     *         ctx.export(&#34;emrClusterId1&#34;, ids.applyValue(getClustersResult -&gt; getClustersResult.clusters()[0].id()));
     *         final var nameRegex = EmrFunctions.getClusters(GetClustersArgs.builder()
     *             .nameRegex(defaultCluster.name())
     *             .build());
     * 
     *         ctx.export(&#34;emrClusterId2&#34;, nameRegex.applyValue(getClustersResult -&gt; getClustersResult).applyValue(nameRegex -&gt; nameRegex.applyValue(getClustersResult -&gt; getClustersResult.clusters()[0].id())));
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetClustersResult> getClustersPlain(GetClustersPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("alicloud:emr/getClusters:getClusters", TypeShape.of(GetClustersResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `alicloud.emr.getDiskTypes` data source provides a collection of data disk and
     * system disk types available in Alibaba Cloud account when create a emr cluster.
     * 
     * &gt; **NOTE:** Available in 1.60.0+
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.alicloud.emr.EmrFunctions;
     * import com.pulumi.alicloud.emr.inputs.GetDiskTypesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var default = EmrFunctions.getDiskTypes(GetDiskTypesArgs.builder()
     *             .clusterType(&#34;HADOOP&#34;)
     *             .destinationResource(&#34;DataDisk&#34;)
     *             .instanceChargeType(&#34;PostPaid&#34;)
     *             .instanceType(&#34;ecs.g5.xlarge&#34;)
     *             .zoneId(&#34;cn-huhehaote-a&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;dataDiskType&#34;, default_.types()[0].value());
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetDiskTypesResult> getDiskTypes(GetDiskTypesArgs args) {
        return getDiskTypes(args, InvokeOptions.Empty);
    }
    /**
     * The `alicloud.emr.getDiskTypes` data source provides a collection of data disk and
     * system disk types available in Alibaba Cloud account when create a emr cluster.
     * 
     * &gt; **NOTE:** Available in 1.60.0+
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.alicloud.emr.EmrFunctions;
     * import com.pulumi.alicloud.emr.inputs.GetDiskTypesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var default = EmrFunctions.getDiskTypes(GetDiskTypesArgs.builder()
     *             .clusterType(&#34;HADOOP&#34;)
     *             .destinationResource(&#34;DataDisk&#34;)
     *             .instanceChargeType(&#34;PostPaid&#34;)
     *             .instanceType(&#34;ecs.g5.xlarge&#34;)
     *             .zoneId(&#34;cn-huhehaote-a&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;dataDiskType&#34;, default_.types()[0].value());
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetDiskTypesResult> getDiskTypesPlain(GetDiskTypesPlainArgs args) {
        return getDiskTypesPlain(args, InvokeOptions.Empty);
    }
    /**
     * The `alicloud.emr.getDiskTypes` data source provides a collection of data disk and
     * system disk types available in Alibaba Cloud account when create a emr cluster.
     * 
     * &gt; **NOTE:** Available in 1.60.0+
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.alicloud.emr.EmrFunctions;
     * import com.pulumi.alicloud.emr.inputs.GetDiskTypesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var default = EmrFunctions.getDiskTypes(GetDiskTypesArgs.builder()
     *             .clusterType(&#34;HADOOP&#34;)
     *             .destinationResource(&#34;DataDisk&#34;)
     *             .instanceChargeType(&#34;PostPaid&#34;)
     *             .instanceType(&#34;ecs.g5.xlarge&#34;)
     *             .zoneId(&#34;cn-huhehaote-a&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;dataDiskType&#34;, default_.types()[0].value());
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetDiskTypesResult> getDiskTypes(GetDiskTypesArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("alicloud:emr/getDiskTypes:getDiskTypes", TypeShape.of(GetDiskTypesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `alicloud.emr.getDiskTypes` data source provides a collection of data disk and
     * system disk types available in Alibaba Cloud account when create a emr cluster.
     * 
     * &gt; **NOTE:** Available in 1.60.0+
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.alicloud.emr.EmrFunctions;
     * import com.pulumi.alicloud.emr.inputs.GetDiskTypesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var default = EmrFunctions.getDiskTypes(GetDiskTypesArgs.builder()
     *             .clusterType(&#34;HADOOP&#34;)
     *             .destinationResource(&#34;DataDisk&#34;)
     *             .instanceChargeType(&#34;PostPaid&#34;)
     *             .instanceType(&#34;ecs.g5.xlarge&#34;)
     *             .zoneId(&#34;cn-huhehaote-a&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;dataDiskType&#34;, default_.types()[0].value());
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetDiskTypesResult> getDiskTypesPlain(GetDiskTypesPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("alicloud:emr/getDiskTypes:getDiskTypes", TypeShape.of(GetDiskTypesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `alicloud.emr.getInstanceTypes` data source provides a collection of ecs
     * instance types available in Alibaba Cloud account when create a emr cluster.
     * 
     * &gt; **NOTE:** Available in 1.59.0+
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.alicloud.emr.EmrFunctions;
     * import com.pulumi.alicloud.emr.inputs.GetInstanceTypesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var default = EmrFunctions.getInstanceTypes(GetInstanceTypesArgs.builder()
     *             .clusterType(&#34;HADOOP&#34;)
     *             .destinationResource(&#34;InstanceType&#34;)
     *             .instanceChargeType(&#34;PostPaid&#34;)
     *             .instanceType(&#34;ecs.g5.2xlarge&#34;)
     *             .supportLocalStorage(false)
     *             .supportNodeTypes(            
     *                 &#34;MASTER&#34;,
     *                 &#34;CORE&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;firstInstanceType&#34;, default_.types()[0].id());
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetInstanceTypesResult> getInstanceTypes(GetInstanceTypesArgs args) {
        return getInstanceTypes(args, InvokeOptions.Empty);
    }
    /**
     * The `alicloud.emr.getInstanceTypes` data source provides a collection of ecs
     * instance types available in Alibaba Cloud account when create a emr cluster.
     * 
     * &gt; **NOTE:** Available in 1.59.0+
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.alicloud.emr.EmrFunctions;
     * import com.pulumi.alicloud.emr.inputs.GetInstanceTypesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var default = EmrFunctions.getInstanceTypes(GetInstanceTypesArgs.builder()
     *             .clusterType(&#34;HADOOP&#34;)
     *             .destinationResource(&#34;InstanceType&#34;)
     *             .instanceChargeType(&#34;PostPaid&#34;)
     *             .instanceType(&#34;ecs.g5.2xlarge&#34;)
     *             .supportLocalStorage(false)
     *             .supportNodeTypes(            
     *                 &#34;MASTER&#34;,
     *                 &#34;CORE&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;firstInstanceType&#34;, default_.types()[0].id());
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetInstanceTypesResult> getInstanceTypesPlain(GetInstanceTypesPlainArgs args) {
        return getInstanceTypesPlain(args, InvokeOptions.Empty);
    }
    /**
     * The `alicloud.emr.getInstanceTypes` data source provides a collection of ecs
     * instance types available in Alibaba Cloud account when create a emr cluster.
     * 
     * &gt; **NOTE:** Available in 1.59.0+
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.alicloud.emr.EmrFunctions;
     * import com.pulumi.alicloud.emr.inputs.GetInstanceTypesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var default = EmrFunctions.getInstanceTypes(GetInstanceTypesArgs.builder()
     *             .clusterType(&#34;HADOOP&#34;)
     *             .destinationResource(&#34;InstanceType&#34;)
     *             .instanceChargeType(&#34;PostPaid&#34;)
     *             .instanceType(&#34;ecs.g5.2xlarge&#34;)
     *             .supportLocalStorage(false)
     *             .supportNodeTypes(            
     *                 &#34;MASTER&#34;,
     *                 &#34;CORE&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;firstInstanceType&#34;, default_.types()[0].id());
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetInstanceTypesResult> getInstanceTypes(GetInstanceTypesArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("alicloud:emr/getInstanceTypes:getInstanceTypes", TypeShape.of(GetInstanceTypesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `alicloud.emr.getInstanceTypes` data source provides a collection of ecs
     * instance types available in Alibaba Cloud account when create a emr cluster.
     * 
     * &gt; **NOTE:** Available in 1.59.0+
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.alicloud.emr.EmrFunctions;
     * import com.pulumi.alicloud.emr.inputs.GetInstanceTypesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var default = EmrFunctions.getInstanceTypes(GetInstanceTypesArgs.builder()
     *             .clusterType(&#34;HADOOP&#34;)
     *             .destinationResource(&#34;InstanceType&#34;)
     *             .instanceChargeType(&#34;PostPaid&#34;)
     *             .instanceType(&#34;ecs.g5.2xlarge&#34;)
     *             .supportLocalStorage(false)
     *             .supportNodeTypes(            
     *                 &#34;MASTER&#34;,
     *                 &#34;CORE&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;firstInstanceType&#34;, default_.types()[0].id());
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetInstanceTypesResult> getInstanceTypesPlain(GetInstanceTypesPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("alicloud:emr/getInstanceTypes:getInstanceTypes", TypeShape.of(GetInstanceTypesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `alicloud.emr.getMainVersions` data source provides a collection of emr
     * main versions available in Alibaba Cloud account when create a emr cluster.
     * 
     * &gt; **NOTE:** Available in 1.59.0+
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.alicloud.emr.EmrFunctions;
     * import com.pulumi.alicloud.emr.inputs.GetMainVersionsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var default = EmrFunctions.getMainVersions(GetMainVersionsArgs.builder()
     *             .clusterTypes(            
     *                 &#34;HADOOP&#34;,
     *                 &#34;ZOOKEEPER&#34;)
     *             .emrVersion(&#34;EMR-3.22.0&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;firstMainVersion&#34;, default_.mainVersions()[0].emrVersion());
     *         ctx.export(&#34;thisClusterTypes&#34;, default_.mainVersions()[0].clusterTypes());
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetMainVersionsResult> getMainVersions() {
        return getMainVersions(GetMainVersionsArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * The `alicloud.emr.getMainVersions` data source provides a collection of emr
     * main versions available in Alibaba Cloud account when create a emr cluster.
     * 
     * &gt; **NOTE:** Available in 1.59.0+
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.alicloud.emr.EmrFunctions;
     * import com.pulumi.alicloud.emr.inputs.GetMainVersionsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var default = EmrFunctions.getMainVersions(GetMainVersionsArgs.builder()
     *             .clusterTypes(            
     *                 &#34;HADOOP&#34;,
     *                 &#34;ZOOKEEPER&#34;)
     *             .emrVersion(&#34;EMR-3.22.0&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;firstMainVersion&#34;, default_.mainVersions()[0].emrVersion());
     *         ctx.export(&#34;thisClusterTypes&#34;, default_.mainVersions()[0].clusterTypes());
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetMainVersionsResult> getMainVersionsPlain() {
        return getMainVersionsPlain(GetMainVersionsPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * The `alicloud.emr.getMainVersions` data source provides a collection of emr
     * main versions available in Alibaba Cloud account when create a emr cluster.
     * 
     * &gt; **NOTE:** Available in 1.59.0+
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.alicloud.emr.EmrFunctions;
     * import com.pulumi.alicloud.emr.inputs.GetMainVersionsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var default = EmrFunctions.getMainVersions(GetMainVersionsArgs.builder()
     *             .clusterTypes(            
     *                 &#34;HADOOP&#34;,
     *                 &#34;ZOOKEEPER&#34;)
     *             .emrVersion(&#34;EMR-3.22.0&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;firstMainVersion&#34;, default_.mainVersions()[0].emrVersion());
     *         ctx.export(&#34;thisClusterTypes&#34;, default_.mainVersions()[0].clusterTypes());
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetMainVersionsResult> getMainVersions(GetMainVersionsArgs args) {
        return getMainVersions(args, InvokeOptions.Empty);
    }
    /**
     * The `alicloud.emr.getMainVersions` data source provides a collection of emr
     * main versions available in Alibaba Cloud account when create a emr cluster.
     * 
     * &gt; **NOTE:** Available in 1.59.0+
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.alicloud.emr.EmrFunctions;
     * import com.pulumi.alicloud.emr.inputs.GetMainVersionsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var default = EmrFunctions.getMainVersions(GetMainVersionsArgs.builder()
     *             .clusterTypes(            
     *                 &#34;HADOOP&#34;,
     *                 &#34;ZOOKEEPER&#34;)
     *             .emrVersion(&#34;EMR-3.22.0&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;firstMainVersion&#34;, default_.mainVersions()[0].emrVersion());
     *         ctx.export(&#34;thisClusterTypes&#34;, default_.mainVersions()[0].clusterTypes());
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetMainVersionsResult> getMainVersionsPlain(GetMainVersionsPlainArgs args) {
        return getMainVersionsPlain(args, InvokeOptions.Empty);
    }
    /**
     * The `alicloud.emr.getMainVersions` data source provides a collection of emr
     * main versions available in Alibaba Cloud account when create a emr cluster.
     * 
     * &gt; **NOTE:** Available in 1.59.0+
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.alicloud.emr.EmrFunctions;
     * import com.pulumi.alicloud.emr.inputs.GetMainVersionsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var default = EmrFunctions.getMainVersions(GetMainVersionsArgs.builder()
     *             .clusterTypes(            
     *                 &#34;HADOOP&#34;,
     *                 &#34;ZOOKEEPER&#34;)
     *             .emrVersion(&#34;EMR-3.22.0&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;firstMainVersion&#34;, default_.mainVersions()[0].emrVersion());
     *         ctx.export(&#34;thisClusterTypes&#34;, default_.mainVersions()[0].clusterTypes());
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetMainVersionsResult> getMainVersions(GetMainVersionsArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("alicloud:emr/getMainVersions:getMainVersions", TypeShape.of(GetMainVersionsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `alicloud.emr.getMainVersions` data source provides a collection of emr
     * main versions available in Alibaba Cloud account when create a emr cluster.
     * 
     * &gt; **NOTE:** Available in 1.59.0+
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.alicloud.emr.EmrFunctions;
     * import com.pulumi.alicloud.emr.inputs.GetMainVersionsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var default = EmrFunctions.getMainVersions(GetMainVersionsArgs.builder()
     *             .clusterTypes(            
     *                 &#34;HADOOP&#34;,
     *                 &#34;ZOOKEEPER&#34;)
     *             .emrVersion(&#34;EMR-3.22.0&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;firstMainVersion&#34;, default_.mainVersions()[0].emrVersion());
     *         ctx.export(&#34;thisClusterTypes&#34;, default_.mainVersions()[0].clusterTypes());
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetMainVersionsResult> getMainVersionsPlain(GetMainVersionsPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("alicloud:emr/getMainVersions:getMainVersions", TypeShape.of(GetMainVersionsResult.class), args, Utilities.withVersion(options));
    }
}
