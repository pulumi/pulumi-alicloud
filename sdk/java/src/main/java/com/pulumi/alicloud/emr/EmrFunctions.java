// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.emr;

import com.pulumi.alicloud.Utilities;
import com.pulumi.alicloud.emr.inputs.GetClustersArgs;
import com.pulumi.alicloud.emr.inputs.GetClustersPlainArgs;
import com.pulumi.alicloud.emr.inputs.GetDiskTypesArgs;
import com.pulumi.alicloud.emr.inputs.GetDiskTypesPlainArgs;
import com.pulumi.alicloud.emr.inputs.GetInstanceTypesArgs;
import com.pulumi.alicloud.emr.inputs.GetInstanceTypesPlainArgs;
import com.pulumi.alicloud.emr.inputs.GetMainVersionsArgs;
import com.pulumi.alicloud.emr.inputs.GetMainVersionsPlainArgs;
import com.pulumi.alicloud.emr.outputs.GetClustersResult;
import com.pulumi.alicloud.emr.outputs.GetDiskTypesResult;
import com.pulumi.alicloud.emr.outputs.GetInstanceTypesResult;
import com.pulumi.alicloud.emr.outputs.GetMainVersionsResult;
import com.pulumi.core.Output;
import com.pulumi.core.TypeShape;
import com.pulumi.deployment.Deployment;
import com.pulumi.deployment.InvokeOptions;
import com.pulumi.deployment.InvokeOutputOptions;
import java.util.concurrent.CompletableFuture;

public final class EmrFunctions {
    /**
     * This data source provides the Emr Clusters of the current Alibaba Cloud user.
     * 
     * &gt; **DEPRECATED:**  This datasource has been deprecated from version `1.204.0`. Please use new datasource emrv2_clusters.
     * 
     * &gt; **NOTE:** Available in v1.146.0+.
     * 
     * ## Example Usage
     * 
     * Basic Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.alicloud.resourcemanager.ResourcemanagerFunctions;
     * import com.pulumi.alicloud.resourcemanager.inputs.GetResourceGroupsArgs;
     * import com.pulumi.alicloud.emr.EmrFunctions;
     * import com.pulumi.alicloud.emr.inputs.GetMainVersionsArgs;
     * import com.pulumi.alicloud.emr.inputs.GetInstanceTypesArgs;
     * import com.pulumi.alicloud.emr.inputs.GetDiskTypesArgs;
     * import com.pulumi.alicloud.vpc.VpcFunctions;
     * import com.pulumi.alicloud.vpc.inputs.GetNetworksArgs;
     * import com.pulumi.alicloud.ecs.SecurityGroup;
     * import com.pulumi.alicloud.ecs.SecurityGroupArgs;
     * import com.pulumi.alicloud.vpc.inputs.GetSwitchesArgs;
     * import com.pulumi.alicloud.ram.Role;
     * import com.pulumi.alicloud.ram.RoleArgs;
     * import com.pulumi.alicloud.emr.Cluster;
     * import com.pulumi.alicloud.emr.ClusterArgs;
     * import com.pulumi.alicloud.emr.inputs.ClusterHostGroupArgs;
     * import com.pulumi.alicloud.emr.inputs.GetClustersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var config = ctx.config();
     *         final var name = config.get("name").orElse("tf-testAccClusters");
     *         final var default = ResourcemanagerFunctions.getResourceGroups(GetResourceGroupsArgs.builder()
     *             .status("OK")
     *             .build());
     * 
     *         final var defaultGetMainVersions = EmrFunctions.getMainVersions(GetMainVersionsArgs.builder()
     *             .build());
     * 
     *         final var defaultGetInstanceTypes = EmrFunctions.getInstanceTypes(GetInstanceTypesArgs.builder()
     *             .destinationResource("InstanceType")
     *             .clusterType(defaultGetMainVersions.mainVersions()[0].clusterTypes()[0])
     *             .supportLocalStorage(false)
     *             .instanceChargeType("PostPaid")
     *             .supportNodeTypes(            
     *                 "MASTER",
     *                 "CORE",
     *                 "TASK")
     *             .build());
     * 
     *         final var dataDisk = EmrFunctions.getDiskTypes(GetDiskTypesArgs.builder()
     *             .destinationResource("DataDisk")
     *             .clusterType(defaultGetMainVersions.mainVersions()[0].clusterTypes()[0])
     *             .instanceChargeType("PostPaid")
     *             .instanceType(defaultGetInstanceTypes.types()[0].id())
     *             .zoneId(defaultGetInstanceTypes.types()[0].zoneId())
     *             .build());
     * 
     *         final var systemDisk = EmrFunctions.getDiskTypes(GetDiskTypesArgs.builder()
     *             .destinationResource("SystemDisk")
     *             .clusterType(defaultGetMainVersions.mainVersions()[0].clusterTypes()[0])
     *             .instanceChargeType("PostPaid")
     *             .instanceType(defaultGetInstanceTypes.types()[0].id())
     *             .zoneId(defaultGetInstanceTypes.types()[0].zoneId())
     *             .build());
     * 
     *         final var defaultGetNetworks = VpcFunctions.getNetworks(GetNetworksArgs.builder()
     *             .nameRegex("default-NODELETING")
     *             .build());
     * 
     *         var defaultSecurityGroup = new SecurityGroup("defaultSecurityGroup", SecurityGroupArgs.builder()
     *             .name(name)
     *             .vpcId(defaultGetNetworks.ids()[0])
     *             .build());
     * 
     *         final var defaultGetSwitches = VpcFunctions.getSwitches(GetSwitchesArgs.builder()
     *             .vpcId(defaultGetNetworks.ids()[0])
     *             .zoneId(defaultGetInstanceTypes.types()[0].zoneId())
     *             .build());
     * 
     *         var defaultRole = new Role("defaultRole", RoleArgs.builder()
     *             .name(name)
     *             .document("""
     *     {
     *         \"Statement\": [
     *         {
     *             \"Action\": \"sts:AssumeRole\",
     *             \"Effect\": \"Allow\",
     *             \"Principal\": {
     *             \"Service\": [
     *                 \"emr.aliyuncs.com\",
     *                 \"ecs.aliyuncs.com\"
     *             ]
     *             }
     *         }
     *         ],
     *         \"Version\": \"1\"
     *     }
     *             """)
     *             .description("this is a role test.")
     *             .force(true)
     *             .build());
     * 
     *         var defaultCluster = new Cluster("defaultCluster", ClusterArgs.builder()
     *             .name(name)
     *             .emrVer(defaultGetMainVersions.mainVersions()[0].emrVersion())
     *             .clusterType(defaultGetMainVersions.mainVersions()[0].clusterTypes()[0])
     *             .hostGroups(            
     *                 ClusterHostGroupArgs.builder()
     *                     .hostGroupName("master_group")
     *                     .hostGroupType("MASTER")
     *                     .nodeCount("2")
     *                     .instanceType(defaultGetInstanceTypes.types()[0].id())
     *                     .diskType(dataDisk.types()[0].value())
     *                     .diskCapacity(dataDisk.types()[0].min() > 160 ? dataDisk.types()[0].min() : "160")
     *                     .diskCount("1")
     *                     .sysDiskType(systemDisk.types()[0].value())
     *                     .sysDiskCapacity(systemDisk.types()[0].min() > 160 ? systemDisk.types()[0].min() : "160")
     *                     .build(),
     *                 ClusterHostGroupArgs.builder()
     *                     .hostGroupName("core_group")
     *                     .hostGroupType("CORE")
     *                     .nodeCount("3")
     *                     .instanceType(defaultGetInstanceTypes.types()[0].id())
     *                     .diskType(dataDisk.types()[0].value())
     *                     .diskCapacity(dataDisk.types()[0].min() > 160 ? dataDisk.types()[0].min() : "160")
     *                     .diskCount("4")
     *                     .sysDiskType(systemDisk.types()[0].value())
     *                     .sysDiskCapacity(systemDisk.types()[0].min() > 160 ? systemDisk.types()[0].min() : "160")
     *                     .build(),
     *                 ClusterHostGroupArgs.builder()
     *                     .hostGroupName("task_group")
     *                     .hostGroupType("TASK")
     *                     .nodeCount("2")
     *                     .instanceType(defaultGetInstanceTypes.types()[0].id())
     *                     .diskType(dataDisk.types()[0].value())
     *                     .diskCapacity(dataDisk.types()[0].min() > 160 ? dataDisk.types()[0].min() : "160")
     *                     .diskCount("4")
     *                     .sysDiskType(systemDisk.types()[0].value())
     *                     .sysDiskCapacity(systemDisk.types()[0].min() > 160 ? systemDisk.types()[0].min() : "160")
     *                     .build())
     *             .highAvailabilityEnable(true)
     *             .zoneId(defaultGetInstanceTypes.types()[0].zoneId())
     *             .securityGroupId(defaultSecurityGroup.id())
     *             .isOpenPublicIp(true)
     *             .chargeType("PostPaid")
     *             .vswitchId(defaultGetSwitches.ids()[0])
     *             .userDefinedEmrEcsRole(defaultRole.name())
     *             .sshEnable(true)
     *             .masterPwd("ABCtest1234!")
     *             .tags(Map.ofEntries(
     *                 Map.entry("Created", "TF"),
     *                 Map.entry("For", "acceptance test")
     *             ))
     *             .build());
     * 
     *         final var ids = EmrFunctions.getClusters(GetClustersArgs.builder()
     *             .build());
     * 
     *         ctx.export("emrClusterId1", ids.clusters()[0].id());
     *         final var nameRegex = EmrFunctions.getClusters(GetClustersArgs.builder()
     *             .nameRegex(defaultCluster.name())
     *             .build());
     * 
     *         ctx.export("emrClusterId2", nameRegex.applyValue(_nameRegex -> _nameRegex.clusters()[0].id()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetClustersResult> getClusters() {
        return getClusters(GetClustersArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * This data source provides the Emr Clusters of the current Alibaba Cloud user.
     * 
     * &gt; **DEPRECATED:**  This datasource has been deprecated from version `1.204.0`. Please use new datasource emrv2_clusters.
     * 
     * &gt; **NOTE:** Available in v1.146.0+.
     * 
     * ## Example Usage
     * 
     * Basic Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.alicloud.resourcemanager.ResourcemanagerFunctions;
     * import com.pulumi.alicloud.resourcemanager.inputs.GetResourceGroupsArgs;
     * import com.pulumi.alicloud.emr.EmrFunctions;
     * import com.pulumi.alicloud.emr.inputs.GetMainVersionsArgs;
     * import com.pulumi.alicloud.emr.inputs.GetInstanceTypesArgs;
     * import com.pulumi.alicloud.emr.inputs.GetDiskTypesArgs;
     * import com.pulumi.alicloud.vpc.VpcFunctions;
     * import com.pulumi.alicloud.vpc.inputs.GetNetworksArgs;
     * import com.pulumi.alicloud.ecs.SecurityGroup;
     * import com.pulumi.alicloud.ecs.SecurityGroupArgs;
     * import com.pulumi.alicloud.vpc.inputs.GetSwitchesArgs;
     * import com.pulumi.alicloud.ram.Role;
     * import com.pulumi.alicloud.ram.RoleArgs;
     * import com.pulumi.alicloud.emr.Cluster;
     * import com.pulumi.alicloud.emr.ClusterArgs;
     * import com.pulumi.alicloud.emr.inputs.ClusterHostGroupArgs;
     * import com.pulumi.alicloud.emr.inputs.GetClustersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var config = ctx.config();
     *         final var name = config.get("name").orElse("tf-testAccClusters");
     *         final var default = ResourcemanagerFunctions.getResourceGroups(GetResourceGroupsArgs.builder()
     *             .status("OK")
     *             .build());
     * 
     *         final var defaultGetMainVersions = EmrFunctions.getMainVersions(GetMainVersionsArgs.builder()
     *             .build());
     * 
     *         final var defaultGetInstanceTypes = EmrFunctions.getInstanceTypes(GetInstanceTypesArgs.builder()
     *             .destinationResource("InstanceType")
     *             .clusterType(defaultGetMainVersions.mainVersions()[0].clusterTypes()[0])
     *             .supportLocalStorage(false)
     *             .instanceChargeType("PostPaid")
     *             .supportNodeTypes(            
     *                 "MASTER",
     *                 "CORE",
     *                 "TASK")
     *             .build());
     * 
     *         final var dataDisk = EmrFunctions.getDiskTypes(GetDiskTypesArgs.builder()
     *             .destinationResource("DataDisk")
     *             .clusterType(defaultGetMainVersions.mainVersions()[0].clusterTypes()[0])
     *             .instanceChargeType("PostPaid")
     *             .instanceType(defaultGetInstanceTypes.types()[0].id())
     *             .zoneId(defaultGetInstanceTypes.types()[0].zoneId())
     *             .build());
     * 
     *         final var systemDisk = EmrFunctions.getDiskTypes(GetDiskTypesArgs.builder()
     *             .destinationResource("SystemDisk")
     *             .clusterType(defaultGetMainVersions.mainVersions()[0].clusterTypes()[0])
     *             .instanceChargeType("PostPaid")
     *             .instanceType(defaultGetInstanceTypes.types()[0].id())
     *             .zoneId(defaultGetInstanceTypes.types()[0].zoneId())
     *             .build());
     * 
     *         final var defaultGetNetworks = VpcFunctions.getNetworks(GetNetworksArgs.builder()
     *             .nameRegex("default-NODELETING")
     *             .build());
     * 
     *         var defaultSecurityGroup = new SecurityGroup("defaultSecurityGroup", SecurityGroupArgs.builder()
     *             .name(name)
     *             .vpcId(defaultGetNetworks.ids()[0])
     *             .build());
     * 
     *         final var defaultGetSwitches = VpcFunctions.getSwitches(GetSwitchesArgs.builder()
     *             .vpcId(defaultGetNetworks.ids()[0])
     *             .zoneId(defaultGetInstanceTypes.types()[0].zoneId())
     *             .build());
     * 
     *         var defaultRole = new Role("defaultRole", RoleArgs.builder()
     *             .name(name)
     *             .document("""
     *     {
     *         \"Statement\": [
     *         {
     *             \"Action\": \"sts:AssumeRole\",
     *             \"Effect\": \"Allow\",
     *             \"Principal\": {
     *             \"Service\": [
     *                 \"emr.aliyuncs.com\",
     *                 \"ecs.aliyuncs.com\"
     *             ]
     *             }
     *         }
     *         ],
     *         \"Version\": \"1\"
     *     }
     *             """)
     *             .description("this is a role test.")
     *             .force(true)
     *             .build());
     * 
     *         var defaultCluster = new Cluster("defaultCluster", ClusterArgs.builder()
     *             .name(name)
     *             .emrVer(defaultGetMainVersions.mainVersions()[0].emrVersion())
     *             .clusterType(defaultGetMainVersions.mainVersions()[0].clusterTypes()[0])
     *             .hostGroups(            
     *                 ClusterHostGroupArgs.builder()
     *                     .hostGroupName("master_group")
     *                     .hostGroupType("MASTER")
     *                     .nodeCount("2")
     *                     .instanceType(defaultGetInstanceTypes.types()[0].id())
     *                     .diskType(dataDisk.types()[0].value())
     *                     .diskCapacity(dataDisk.types()[0].min() > 160 ? dataDisk.types()[0].min() : "160")
     *                     .diskCount("1")
     *                     .sysDiskType(systemDisk.types()[0].value())
     *                     .sysDiskCapacity(systemDisk.types()[0].min() > 160 ? systemDisk.types()[0].min() : "160")
     *                     .build(),
     *                 ClusterHostGroupArgs.builder()
     *                     .hostGroupName("core_group")
     *                     .hostGroupType("CORE")
     *                     .nodeCount("3")
     *                     .instanceType(defaultGetInstanceTypes.types()[0].id())
     *                     .diskType(dataDisk.types()[0].value())
     *                     .diskCapacity(dataDisk.types()[0].min() > 160 ? dataDisk.types()[0].min() : "160")
     *                     .diskCount("4")
     *                     .sysDiskType(systemDisk.types()[0].value())
     *                     .sysDiskCapacity(systemDisk.types()[0].min() > 160 ? systemDisk.types()[0].min() : "160")
     *                     .build(),
     *                 ClusterHostGroupArgs.builder()
     *                     .hostGroupName("task_group")
     *                     .hostGroupType("TASK")
     *                     .nodeCount("2")
     *                     .instanceType(defaultGetInstanceTypes.types()[0].id())
     *                     .diskType(dataDisk.types()[0].value())
     *                     .diskCapacity(dataDisk.types()[0].min() > 160 ? dataDisk.types()[0].min() : "160")
     *                     .diskCount("4")
     *                     .sysDiskType(systemDisk.types()[0].value())
     *                     .sysDiskCapacity(systemDisk.types()[0].min() > 160 ? systemDisk.types()[0].min() : "160")
     *                     .build())
     *             .highAvailabilityEnable(true)
     *             .zoneId(defaultGetInstanceTypes.types()[0].zoneId())
     *             .securityGroupId(defaultSecurityGroup.id())
     *             .isOpenPublicIp(true)
     *             .chargeType("PostPaid")
     *             .vswitchId(defaultGetSwitches.ids()[0])
     *             .userDefinedEmrEcsRole(defaultRole.name())
     *             .sshEnable(true)
     *             .masterPwd("ABCtest1234!")
     *             .tags(Map.ofEntries(
     *                 Map.entry("Created", "TF"),
     *                 Map.entry("For", "acceptance test")
     *             ))
     *             .build());
     * 
     *         final var ids = EmrFunctions.getClusters(GetClustersArgs.builder()
     *             .build());
     * 
     *         ctx.export("emrClusterId1", ids.clusters()[0].id());
     *         final var nameRegex = EmrFunctions.getClusters(GetClustersArgs.builder()
     *             .nameRegex(defaultCluster.name())
     *             .build());
     * 
     *         ctx.export("emrClusterId2", nameRegex.applyValue(_nameRegex -> _nameRegex.clusters()[0].id()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetClustersResult> getClustersPlain() {
        return getClustersPlain(GetClustersPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * This data source provides the Emr Clusters of the current Alibaba Cloud user.
     * 
     * &gt; **DEPRECATED:**  This datasource has been deprecated from version `1.204.0`. Please use new datasource emrv2_clusters.
     * 
     * &gt; **NOTE:** Available in v1.146.0+.
     * 
     * ## Example Usage
     * 
     * Basic Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.alicloud.resourcemanager.ResourcemanagerFunctions;
     * import com.pulumi.alicloud.resourcemanager.inputs.GetResourceGroupsArgs;
     * import com.pulumi.alicloud.emr.EmrFunctions;
     * import com.pulumi.alicloud.emr.inputs.GetMainVersionsArgs;
     * import com.pulumi.alicloud.emr.inputs.GetInstanceTypesArgs;
     * import com.pulumi.alicloud.emr.inputs.GetDiskTypesArgs;
     * import com.pulumi.alicloud.vpc.VpcFunctions;
     * import com.pulumi.alicloud.vpc.inputs.GetNetworksArgs;
     * import com.pulumi.alicloud.ecs.SecurityGroup;
     * import com.pulumi.alicloud.ecs.SecurityGroupArgs;
     * import com.pulumi.alicloud.vpc.inputs.GetSwitchesArgs;
     * import com.pulumi.alicloud.ram.Role;
     * import com.pulumi.alicloud.ram.RoleArgs;
     * import com.pulumi.alicloud.emr.Cluster;
     * import com.pulumi.alicloud.emr.ClusterArgs;
     * import com.pulumi.alicloud.emr.inputs.ClusterHostGroupArgs;
     * import com.pulumi.alicloud.emr.inputs.GetClustersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var config = ctx.config();
     *         final var name = config.get("name").orElse("tf-testAccClusters");
     *         final var default = ResourcemanagerFunctions.getResourceGroups(GetResourceGroupsArgs.builder()
     *             .status("OK")
     *             .build());
     * 
     *         final var defaultGetMainVersions = EmrFunctions.getMainVersions(GetMainVersionsArgs.builder()
     *             .build());
     * 
     *         final var defaultGetInstanceTypes = EmrFunctions.getInstanceTypes(GetInstanceTypesArgs.builder()
     *             .destinationResource("InstanceType")
     *             .clusterType(defaultGetMainVersions.mainVersions()[0].clusterTypes()[0])
     *             .supportLocalStorage(false)
     *             .instanceChargeType("PostPaid")
     *             .supportNodeTypes(            
     *                 "MASTER",
     *                 "CORE",
     *                 "TASK")
     *             .build());
     * 
     *         final var dataDisk = EmrFunctions.getDiskTypes(GetDiskTypesArgs.builder()
     *             .destinationResource("DataDisk")
     *             .clusterType(defaultGetMainVersions.mainVersions()[0].clusterTypes()[0])
     *             .instanceChargeType("PostPaid")
     *             .instanceType(defaultGetInstanceTypes.types()[0].id())
     *             .zoneId(defaultGetInstanceTypes.types()[0].zoneId())
     *             .build());
     * 
     *         final var systemDisk = EmrFunctions.getDiskTypes(GetDiskTypesArgs.builder()
     *             .destinationResource("SystemDisk")
     *             .clusterType(defaultGetMainVersions.mainVersions()[0].clusterTypes()[0])
     *             .instanceChargeType("PostPaid")
     *             .instanceType(defaultGetInstanceTypes.types()[0].id())
     *             .zoneId(defaultGetInstanceTypes.types()[0].zoneId())
     *             .build());
     * 
     *         final var defaultGetNetworks = VpcFunctions.getNetworks(GetNetworksArgs.builder()
     *             .nameRegex("default-NODELETING")
     *             .build());
     * 
     *         var defaultSecurityGroup = new SecurityGroup("defaultSecurityGroup", SecurityGroupArgs.builder()
     *             .name(name)
     *             .vpcId(defaultGetNetworks.ids()[0])
     *             .build());
     * 
     *         final var defaultGetSwitches = VpcFunctions.getSwitches(GetSwitchesArgs.builder()
     *             .vpcId(defaultGetNetworks.ids()[0])
     *             .zoneId(defaultGetInstanceTypes.types()[0].zoneId())
     *             .build());
     * 
     *         var defaultRole = new Role("defaultRole", RoleArgs.builder()
     *             .name(name)
     *             .document("""
     *     {
     *         \"Statement\": [
     *         {
     *             \"Action\": \"sts:AssumeRole\",
     *             \"Effect\": \"Allow\",
     *             \"Principal\": {
     *             \"Service\": [
     *                 \"emr.aliyuncs.com\",
     *                 \"ecs.aliyuncs.com\"
     *             ]
     *             }
     *         }
     *         ],
     *         \"Version\": \"1\"
     *     }
     *             """)
     *             .description("this is a role test.")
     *             .force(true)
     *             .build());
     * 
     *         var defaultCluster = new Cluster("defaultCluster", ClusterArgs.builder()
     *             .name(name)
     *             .emrVer(defaultGetMainVersions.mainVersions()[0].emrVersion())
     *             .clusterType(defaultGetMainVersions.mainVersions()[0].clusterTypes()[0])
     *             .hostGroups(            
     *                 ClusterHostGroupArgs.builder()
     *                     .hostGroupName("master_group")
     *                     .hostGroupType("MASTER")
     *                     .nodeCount("2")
     *                     .instanceType(defaultGetInstanceTypes.types()[0].id())
     *                     .diskType(dataDisk.types()[0].value())
     *                     .diskCapacity(dataDisk.types()[0].min() > 160 ? dataDisk.types()[0].min() : "160")
     *                     .diskCount("1")
     *                     .sysDiskType(systemDisk.types()[0].value())
     *                     .sysDiskCapacity(systemDisk.types()[0].min() > 160 ? systemDisk.types()[0].min() : "160")
     *                     .build(),
     *                 ClusterHostGroupArgs.builder()
     *                     .hostGroupName("core_group")
     *                     .hostGroupType("CORE")
     *                     .nodeCount("3")
     *                     .instanceType(defaultGetInstanceTypes.types()[0].id())
     *                     .diskType(dataDisk.types()[0].value())
     *                     .diskCapacity(dataDisk.types()[0].min() > 160 ? dataDisk.types()[0].min() : "160")
     *                     .diskCount("4")
     *                     .sysDiskType(systemDisk.types()[0].value())
     *                     .sysDiskCapacity(systemDisk.types()[0].min() > 160 ? systemDisk.types()[0].min() : "160")
     *                     .build(),
     *                 ClusterHostGroupArgs.builder()
     *                     .hostGroupName("task_group")
     *                     .hostGroupType("TASK")
     *                     .nodeCount("2")
     *                     .instanceType(defaultGetInstanceTypes.types()[0].id())
     *                     .diskType(dataDisk.types()[0].value())
     *                     .diskCapacity(dataDisk.types()[0].min() > 160 ? dataDisk.types()[0].min() : "160")
     *                     .diskCount("4")
     *                     .sysDiskType(systemDisk.types()[0].value())
     *                     .sysDiskCapacity(systemDisk.types()[0].min() > 160 ? systemDisk.types()[0].min() : "160")
     *                     .build())
     *             .highAvailabilityEnable(true)
     *             .zoneId(defaultGetInstanceTypes.types()[0].zoneId())
     *             .securityGroupId(defaultSecurityGroup.id())
     *             .isOpenPublicIp(true)
     *             .chargeType("PostPaid")
     *             .vswitchId(defaultGetSwitches.ids()[0])
     *             .userDefinedEmrEcsRole(defaultRole.name())
     *             .sshEnable(true)
     *             .masterPwd("ABCtest1234!")
     *             .tags(Map.ofEntries(
     *                 Map.entry("Created", "TF"),
     *                 Map.entry("For", "acceptance test")
     *             ))
     *             .build());
     * 
     *         final var ids = EmrFunctions.getClusters(GetClustersArgs.builder()
     *             .build());
     * 
     *         ctx.export("emrClusterId1", ids.clusters()[0].id());
     *         final var nameRegex = EmrFunctions.getClusters(GetClustersArgs.builder()
     *             .nameRegex(defaultCluster.name())
     *             .build());
     * 
     *         ctx.export("emrClusterId2", nameRegex.applyValue(_nameRegex -> _nameRegex.clusters()[0].id()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetClustersResult> getClusters(GetClustersArgs args) {
        return getClusters(args, InvokeOptions.Empty);
    }
    /**
     * This data source provides the Emr Clusters of the current Alibaba Cloud user.
     * 
     * &gt; **DEPRECATED:**  This datasource has been deprecated from version `1.204.0`. Please use new datasource emrv2_clusters.
     * 
     * &gt; **NOTE:** Available in v1.146.0+.
     * 
     * ## Example Usage
     * 
     * Basic Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.alicloud.resourcemanager.ResourcemanagerFunctions;
     * import com.pulumi.alicloud.resourcemanager.inputs.GetResourceGroupsArgs;
     * import com.pulumi.alicloud.emr.EmrFunctions;
     * import com.pulumi.alicloud.emr.inputs.GetMainVersionsArgs;
     * import com.pulumi.alicloud.emr.inputs.GetInstanceTypesArgs;
     * import com.pulumi.alicloud.emr.inputs.GetDiskTypesArgs;
     * import com.pulumi.alicloud.vpc.VpcFunctions;
     * import com.pulumi.alicloud.vpc.inputs.GetNetworksArgs;
     * import com.pulumi.alicloud.ecs.SecurityGroup;
     * import com.pulumi.alicloud.ecs.SecurityGroupArgs;
     * import com.pulumi.alicloud.vpc.inputs.GetSwitchesArgs;
     * import com.pulumi.alicloud.ram.Role;
     * import com.pulumi.alicloud.ram.RoleArgs;
     * import com.pulumi.alicloud.emr.Cluster;
     * import com.pulumi.alicloud.emr.ClusterArgs;
     * import com.pulumi.alicloud.emr.inputs.ClusterHostGroupArgs;
     * import com.pulumi.alicloud.emr.inputs.GetClustersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var config = ctx.config();
     *         final var name = config.get("name").orElse("tf-testAccClusters");
     *         final var default = ResourcemanagerFunctions.getResourceGroups(GetResourceGroupsArgs.builder()
     *             .status("OK")
     *             .build());
     * 
     *         final var defaultGetMainVersions = EmrFunctions.getMainVersions(GetMainVersionsArgs.builder()
     *             .build());
     * 
     *         final var defaultGetInstanceTypes = EmrFunctions.getInstanceTypes(GetInstanceTypesArgs.builder()
     *             .destinationResource("InstanceType")
     *             .clusterType(defaultGetMainVersions.mainVersions()[0].clusterTypes()[0])
     *             .supportLocalStorage(false)
     *             .instanceChargeType("PostPaid")
     *             .supportNodeTypes(            
     *                 "MASTER",
     *                 "CORE",
     *                 "TASK")
     *             .build());
     * 
     *         final var dataDisk = EmrFunctions.getDiskTypes(GetDiskTypesArgs.builder()
     *             .destinationResource("DataDisk")
     *             .clusterType(defaultGetMainVersions.mainVersions()[0].clusterTypes()[0])
     *             .instanceChargeType("PostPaid")
     *             .instanceType(defaultGetInstanceTypes.types()[0].id())
     *             .zoneId(defaultGetInstanceTypes.types()[0].zoneId())
     *             .build());
     * 
     *         final var systemDisk = EmrFunctions.getDiskTypes(GetDiskTypesArgs.builder()
     *             .destinationResource("SystemDisk")
     *             .clusterType(defaultGetMainVersions.mainVersions()[0].clusterTypes()[0])
     *             .instanceChargeType("PostPaid")
     *             .instanceType(defaultGetInstanceTypes.types()[0].id())
     *             .zoneId(defaultGetInstanceTypes.types()[0].zoneId())
     *             .build());
     * 
     *         final var defaultGetNetworks = VpcFunctions.getNetworks(GetNetworksArgs.builder()
     *             .nameRegex("default-NODELETING")
     *             .build());
     * 
     *         var defaultSecurityGroup = new SecurityGroup("defaultSecurityGroup", SecurityGroupArgs.builder()
     *             .name(name)
     *             .vpcId(defaultGetNetworks.ids()[0])
     *             .build());
     * 
     *         final var defaultGetSwitches = VpcFunctions.getSwitches(GetSwitchesArgs.builder()
     *             .vpcId(defaultGetNetworks.ids()[0])
     *             .zoneId(defaultGetInstanceTypes.types()[0].zoneId())
     *             .build());
     * 
     *         var defaultRole = new Role("defaultRole", RoleArgs.builder()
     *             .name(name)
     *             .document("""
     *     {
     *         \"Statement\": [
     *         {
     *             \"Action\": \"sts:AssumeRole\",
     *             \"Effect\": \"Allow\",
     *             \"Principal\": {
     *             \"Service\": [
     *                 \"emr.aliyuncs.com\",
     *                 \"ecs.aliyuncs.com\"
     *             ]
     *             }
     *         }
     *         ],
     *         \"Version\": \"1\"
     *     }
     *             """)
     *             .description("this is a role test.")
     *             .force(true)
     *             .build());
     * 
     *         var defaultCluster = new Cluster("defaultCluster", ClusterArgs.builder()
     *             .name(name)
     *             .emrVer(defaultGetMainVersions.mainVersions()[0].emrVersion())
     *             .clusterType(defaultGetMainVersions.mainVersions()[0].clusterTypes()[0])
     *             .hostGroups(            
     *                 ClusterHostGroupArgs.builder()
     *                     .hostGroupName("master_group")
     *                     .hostGroupType("MASTER")
     *                     .nodeCount("2")
     *                     .instanceType(defaultGetInstanceTypes.types()[0].id())
     *                     .diskType(dataDisk.types()[0].value())
     *                     .diskCapacity(dataDisk.types()[0].min() > 160 ? dataDisk.types()[0].min() : "160")
     *                     .diskCount("1")
     *                     .sysDiskType(systemDisk.types()[0].value())
     *                     .sysDiskCapacity(systemDisk.types()[0].min() > 160 ? systemDisk.types()[0].min() : "160")
     *                     .build(),
     *                 ClusterHostGroupArgs.builder()
     *                     .hostGroupName("core_group")
     *                     .hostGroupType("CORE")
     *                     .nodeCount("3")
     *                     .instanceType(defaultGetInstanceTypes.types()[0].id())
     *                     .diskType(dataDisk.types()[0].value())
     *                     .diskCapacity(dataDisk.types()[0].min() > 160 ? dataDisk.types()[0].min() : "160")
     *                     .diskCount("4")
     *                     .sysDiskType(systemDisk.types()[0].value())
     *                     .sysDiskCapacity(systemDisk.types()[0].min() > 160 ? systemDisk.types()[0].min() : "160")
     *                     .build(),
     *                 ClusterHostGroupArgs.builder()
     *                     .hostGroupName("task_group")
     *                     .hostGroupType("TASK")
     *                     .nodeCount("2")
     *                     .instanceType(defaultGetInstanceTypes.types()[0].id())
     *                     .diskType(dataDisk.types()[0].value())
     *                     .diskCapacity(dataDisk.types()[0].min() > 160 ? dataDisk.types()[0].min() : "160")
     *                     .diskCount("4")
     *                     .sysDiskType(systemDisk.types()[0].value())
     *                     .sysDiskCapacity(systemDisk.types()[0].min() > 160 ? systemDisk.types()[0].min() : "160")
     *                     .build())
     *             .highAvailabilityEnable(true)
     *             .zoneId(defaultGetInstanceTypes.types()[0].zoneId())
     *             .securityGroupId(defaultSecurityGroup.id())
     *             .isOpenPublicIp(true)
     *             .chargeType("PostPaid")
     *             .vswitchId(defaultGetSwitches.ids()[0])
     *             .userDefinedEmrEcsRole(defaultRole.name())
     *             .sshEnable(true)
     *             .masterPwd("ABCtest1234!")
     *             .tags(Map.ofEntries(
     *                 Map.entry("Created", "TF"),
     *                 Map.entry("For", "acceptance test")
     *             ))
     *             .build());
     * 
     *         final var ids = EmrFunctions.getClusters(GetClustersArgs.builder()
     *             .build());
     * 
     *         ctx.export("emrClusterId1", ids.clusters()[0].id());
     *         final var nameRegex = EmrFunctions.getClusters(GetClustersArgs.builder()
     *             .nameRegex(defaultCluster.name())
     *             .build());
     * 
     *         ctx.export("emrClusterId2", nameRegex.applyValue(_nameRegex -> _nameRegex.clusters()[0].id()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetClustersResult> getClustersPlain(GetClustersPlainArgs args) {
        return getClustersPlain(args, InvokeOptions.Empty);
    }
    /**
     * This data source provides the Emr Clusters of the current Alibaba Cloud user.
     * 
     * &gt; **DEPRECATED:**  This datasource has been deprecated from version `1.204.0`. Please use new datasource emrv2_clusters.
     * 
     * &gt; **NOTE:** Available in v1.146.0+.
     * 
     * ## Example Usage
     * 
     * Basic Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.alicloud.resourcemanager.ResourcemanagerFunctions;
     * import com.pulumi.alicloud.resourcemanager.inputs.GetResourceGroupsArgs;
     * import com.pulumi.alicloud.emr.EmrFunctions;
     * import com.pulumi.alicloud.emr.inputs.GetMainVersionsArgs;
     * import com.pulumi.alicloud.emr.inputs.GetInstanceTypesArgs;
     * import com.pulumi.alicloud.emr.inputs.GetDiskTypesArgs;
     * import com.pulumi.alicloud.vpc.VpcFunctions;
     * import com.pulumi.alicloud.vpc.inputs.GetNetworksArgs;
     * import com.pulumi.alicloud.ecs.SecurityGroup;
     * import com.pulumi.alicloud.ecs.SecurityGroupArgs;
     * import com.pulumi.alicloud.vpc.inputs.GetSwitchesArgs;
     * import com.pulumi.alicloud.ram.Role;
     * import com.pulumi.alicloud.ram.RoleArgs;
     * import com.pulumi.alicloud.emr.Cluster;
     * import com.pulumi.alicloud.emr.ClusterArgs;
     * import com.pulumi.alicloud.emr.inputs.ClusterHostGroupArgs;
     * import com.pulumi.alicloud.emr.inputs.GetClustersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var config = ctx.config();
     *         final var name = config.get("name").orElse("tf-testAccClusters");
     *         final var default = ResourcemanagerFunctions.getResourceGroups(GetResourceGroupsArgs.builder()
     *             .status("OK")
     *             .build());
     * 
     *         final var defaultGetMainVersions = EmrFunctions.getMainVersions(GetMainVersionsArgs.builder()
     *             .build());
     * 
     *         final var defaultGetInstanceTypes = EmrFunctions.getInstanceTypes(GetInstanceTypesArgs.builder()
     *             .destinationResource("InstanceType")
     *             .clusterType(defaultGetMainVersions.mainVersions()[0].clusterTypes()[0])
     *             .supportLocalStorage(false)
     *             .instanceChargeType("PostPaid")
     *             .supportNodeTypes(            
     *                 "MASTER",
     *                 "CORE",
     *                 "TASK")
     *             .build());
     * 
     *         final var dataDisk = EmrFunctions.getDiskTypes(GetDiskTypesArgs.builder()
     *             .destinationResource("DataDisk")
     *             .clusterType(defaultGetMainVersions.mainVersions()[0].clusterTypes()[0])
     *             .instanceChargeType("PostPaid")
     *             .instanceType(defaultGetInstanceTypes.types()[0].id())
     *             .zoneId(defaultGetInstanceTypes.types()[0].zoneId())
     *             .build());
     * 
     *         final var systemDisk = EmrFunctions.getDiskTypes(GetDiskTypesArgs.builder()
     *             .destinationResource("SystemDisk")
     *             .clusterType(defaultGetMainVersions.mainVersions()[0].clusterTypes()[0])
     *             .instanceChargeType("PostPaid")
     *             .instanceType(defaultGetInstanceTypes.types()[0].id())
     *             .zoneId(defaultGetInstanceTypes.types()[0].zoneId())
     *             .build());
     * 
     *         final var defaultGetNetworks = VpcFunctions.getNetworks(GetNetworksArgs.builder()
     *             .nameRegex("default-NODELETING")
     *             .build());
     * 
     *         var defaultSecurityGroup = new SecurityGroup("defaultSecurityGroup", SecurityGroupArgs.builder()
     *             .name(name)
     *             .vpcId(defaultGetNetworks.ids()[0])
     *             .build());
     * 
     *         final var defaultGetSwitches = VpcFunctions.getSwitches(GetSwitchesArgs.builder()
     *             .vpcId(defaultGetNetworks.ids()[0])
     *             .zoneId(defaultGetInstanceTypes.types()[0].zoneId())
     *             .build());
     * 
     *         var defaultRole = new Role("defaultRole", RoleArgs.builder()
     *             .name(name)
     *             .document("""
     *     {
     *         \"Statement\": [
     *         {
     *             \"Action\": \"sts:AssumeRole\",
     *             \"Effect\": \"Allow\",
     *             \"Principal\": {
     *             \"Service\": [
     *                 \"emr.aliyuncs.com\",
     *                 \"ecs.aliyuncs.com\"
     *             ]
     *             }
     *         }
     *         ],
     *         \"Version\": \"1\"
     *     }
     *             """)
     *             .description("this is a role test.")
     *             .force(true)
     *             .build());
     * 
     *         var defaultCluster = new Cluster("defaultCluster", ClusterArgs.builder()
     *             .name(name)
     *             .emrVer(defaultGetMainVersions.mainVersions()[0].emrVersion())
     *             .clusterType(defaultGetMainVersions.mainVersions()[0].clusterTypes()[0])
     *             .hostGroups(            
     *                 ClusterHostGroupArgs.builder()
     *                     .hostGroupName("master_group")
     *                     .hostGroupType("MASTER")
     *                     .nodeCount("2")
     *                     .instanceType(defaultGetInstanceTypes.types()[0].id())
     *                     .diskType(dataDisk.types()[0].value())
     *                     .diskCapacity(dataDisk.types()[0].min() > 160 ? dataDisk.types()[0].min() : "160")
     *                     .diskCount("1")
     *                     .sysDiskType(systemDisk.types()[0].value())
     *                     .sysDiskCapacity(systemDisk.types()[0].min() > 160 ? systemDisk.types()[0].min() : "160")
     *                     .build(),
     *                 ClusterHostGroupArgs.builder()
     *                     .hostGroupName("core_group")
     *                     .hostGroupType("CORE")
     *                     .nodeCount("3")
     *                     .instanceType(defaultGetInstanceTypes.types()[0].id())
     *                     .diskType(dataDisk.types()[0].value())
     *                     .diskCapacity(dataDisk.types()[0].min() > 160 ? dataDisk.types()[0].min() : "160")
     *                     .diskCount("4")
     *                     .sysDiskType(systemDisk.types()[0].value())
     *                     .sysDiskCapacity(systemDisk.types()[0].min() > 160 ? systemDisk.types()[0].min() : "160")
     *                     .build(),
     *                 ClusterHostGroupArgs.builder()
     *                     .hostGroupName("task_group")
     *                     .hostGroupType("TASK")
     *                     .nodeCount("2")
     *                     .instanceType(defaultGetInstanceTypes.types()[0].id())
     *                     .diskType(dataDisk.types()[0].value())
     *                     .diskCapacity(dataDisk.types()[0].min() > 160 ? dataDisk.types()[0].min() : "160")
     *                     .diskCount("4")
     *                     .sysDiskType(systemDisk.types()[0].value())
     *                     .sysDiskCapacity(systemDisk.types()[0].min() > 160 ? systemDisk.types()[0].min() : "160")
     *                     .build())
     *             .highAvailabilityEnable(true)
     *             .zoneId(defaultGetInstanceTypes.types()[0].zoneId())
     *             .securityGroupId(defaultSecurityGroup.id())
     *             .isOpenPublicIp(true)
     *             .chargeType("PostPaid")
     *             .vswitchId(defaultGetSwitches.ids()[0])
     *             .userDefinedEmrEcsRole(defaultRole.name())
     *             .sshEnable(true)
     *             .masterPwd("ABCtest1234!")
     *             .tags(Map.ofEntries(
     *                 Map.entry("Created", "TF"),
     *                 Map.entry("For", "acceptance test")
     *             ))
     *             .build());
     * 
     *         final var ids = EmrFunctions.getClusters(GetClustersArgs.builder()
     *             .build());
     * 
     *         ctx.export("emrClusterId1", ids.clusters()[0].id());
     *         final var nameRegex = EmrFunctions.getClusters(GetClustersArgs.builder()
     *             .nameRegex(defaultCluster.name())
     *             .build());
     * 
     *         ctx.export("emrClusterId2", nameRegex.applyValue(_nameRegex -> _nameRegex.clusters()[0].id()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetClustersResult> getClusters(GetClustersArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("alicloud:emr/getClusters:getClusters", TypeShape.of(GetClustersResult.class), args, Utilities.withVersion(options));
    }
    /**
     * This data source provides the Emr Clusters of the current Alibaba Cloud user.
     * 
     * &gt; **DEPRECATED:**  This datasource has been deprecated from version `1.204.0`. Please use new datasource emrv2_clusters.
     * 
     * &gt; **NOTE:** Available in v1.146.0+.
     * 
     * ## Example Usage
     * 
     * Basic Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.alicloud.resourcemanager.ResourcemanagerFunctions;
     * import com.pulumi.alicloud.resourcemanager.inputs.GetResourceGroupsArgs;
     * import com.pulumi.alicloud.emr.EmrFunctions;
     * import com.pulumi.alicloud.emr.inputs.GetMainVersionsArgs;
     * import com.pulumi.alicloud.emr.inputs.GetInstanceTypesArgs;
     * import com.pulumi.alicloud.emr.inputs.GetDiskTypesArgs;
     * import com.pulumi.alicloud.vpc.VpcFunctions;
     * import com.pulumi.alicloud.vpc.inputs.GetNetworksArgs;
     * import com.pulumi.alicloud.ecs.SecurityGroup;
     * import com.pulumi.alicloud.ecs.SecurityGroupArgs;
     * import com.pulumi.alicloud.vpc.inputs.GetSwitchesArgs;
     * import com.pulumi.alicloud.ram.Role;
     * import com.pulumi.alicloud.ram.RoleArgs;
     * import com.pulumi.alicloud.emr.Cluster;
     * import com.pulumi.alicloud.emr.ClusterArgs;
     * import com.pulumi.alicloud.emr.inputs.ClusterHostGroupArgs;
     * import com.pulumi.alicloud.emr.inputs.GetClustersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var config = ctx.config();
     *         final var name = config.get("name").orElse("tf-testAccClusters");
     *         final var default = ResourcemanagerFunctions.getResourceGroups(GetResourceGroupsArgs.builder()
     *             .status("OK")
     *             .build());
     * 
     *         final var defaultGetMainVersions = EmrFunctions.getMainVersions(GetMainVersionsArgs.builder()
     *             .build());
     * 
     *         final var defaultGetInstanceTypes = EmrFunctions.getInstanceTypes(GetInstanceTypesArgs.builder()
     *             .destinationResource("InstanceType")
     *             .clusterType(defaultGetMainVersions.mainVersions()[0].clusterTypes()[0])
     *             .supportLocalStorage(false)
     *             .instanceChargeType("PostPaid")
     *             .supportNodeTypes(            
     *                 "MASTER",
     *                 "CORE",
     *                 "TASK")
     *             .build());
     * 
     *         final var dataDisk = EmrFunctions.getDiskTypes(GetDiskTypesArgs.builder()
     *             .destinationResource("DataDisk")
     *             .clusterType(defaultGetMainVersions.mainVersions()[0].clusterTypes()[0])
     *             .instanceChargeType("PostPaid")
     *             .instanceType(defaultGetInstanceTypes.types()[0].id())
     *             .zoneId(defaultGetInstanceTypes.types()[0].zoneId())
     *             .build());
     * 
     *         final var systemDisk = EmrFunctions.getDiskTypes(GetDiskTypesArgs.builder()
     *             .destinationResource("SystemDisk")
     *             .clusterType(defaultGetMainVersions.mainVersions()[0].clusterTypes()[0])
     *             .instanceChargeType("PostPaid")
     *             .instanceType(defaultGetInstanceTypes.types()[0].id())
     *             .zoneId(defaultGetInstanceTypes.types()[0].zoneId())
     *             .build());
     * 
     *         final var defaultGetNetworks = VpcFunctions.getNetworks(GetNetworksArgs.builder()
     *             .nameRegex("default-NODELETING")
     *             .build());
     * 
     *         var defaultSecurityGroup = new SecurityGroup("defaultSecurityGroup", SecurityGroupArgs.builder()
     *             .name(name)
     *             .vpcId(defaultGetNetworks.ids()[0])
     *             .build());
     * 
     *         final var defaultGetSwitches = VpcFunctions.getSwitches(GetSwitchesArgs.builder()
     *             .vpcId(defaultGetNetworks.ids()[0])
     *             .zoneId(defaultGetInstanceTypes.types()[0].zoneId())
     *             .build());
     * 
     *         var defaultRole = new Role("defaultRole", RoleArgs.builder()
     *             .name(name)
     *             .document("""
     *     {
     *         \"Statement\": [
     *         {
     *             \"Action\": \"sts:AssumeRole\",
     *             \"Effect\": \"Allow\",
     *             \"Principal\": {
     *             \"Service\": [
     *                 \"emr.aliyuncs.com\",
     *                 \"ecs.aliyuncs.com\"
     *             ]
     *             }
     *         }
     *         ],
     *         \"Version\": \"1\"
     *     }
     *             """)
     *             .description("this is a role test.")
     *             .force(true)
     *             .build());
     * 
     *         var defaultCluster = new Cluster("defaultCluster", ClusterArgs.builder()
     *             .name(name)
     *             .emrVer(defaultGetMainVersions.mainVersions()[0].emrVersion())
     *             .clusterType(defaultGetMainVersions.mainVersions()[0].clusterTypes()[0])
     *             .hostGroups(            
     *                 ClusterHostGroupArgs.builder()
     *                     .hostGroupName("master_group")
     *                     .hostGroupType("MASTER")
     *                     .nodeCount("2")
     *                     .instanceType(defaultGetInstanceTypes.types()[0].id())
     *                     .diskType(dataDisk.types()[0].value())
     *                     .diskCapacity(dataDisk.types()[0].min() > 160 ? dataDisk.types()[0].min() : "160")
     *                     .diskCount("1")
     *                     .sysDiskType(systemDisk.types()[0].value())
     *                     .sysDiskCapacity(systemDisk.types()[0].min() > 160 ? systemDisk.types()[0].min() : "160")
     *                     .build(),
     *                 ClusterHostGroupArgs.builder()
     *                     .hostGroupName("core_group")
     *                     .hostGroupType("CORE")
     *                     .nodeCount("3")
     *                     .instanceType(defaultGetInstanceTypes.types()[0].id())
     *                     .diskType(dataDisk.types()[0].value())
     *                     .diskCapacity(dataDisk.types()[0].min() > 160 ? dataDisk.types()[0].min() : "160")
     *                     .diskCount("4")
     *                     .sysDiskType(systemDisk.types()[0].value())
     *                     .sysDiskCapacity(systemDisk.types()[0].min() > 160 ? systemDisk.types()[0].min() : "160")
     *                     .build(),
     *                 ClusterHostGroupArgs.builder()
     *                     .hostGroupName("task_group")
     *                     .hostGroupType("TASK")
     *                     .nodeCount("2")
     *                     .instanceType(defaultGetInstanceTypes.types()[0].id())
     *                     .diskType(dataDisk.types()[0].value())
     *                     .diskCapacity(dataDisk.types()[0].min() > 160 ? dataDisk.types()[0].min() : "160")
     *                     .diskCount("4")
     *                     .sysDiskType(systemDisk.types()[0].value())
     *                     .sysDiskCapacity(systemDisk.types()[0].min() > 160 ? systemDisk.types()[0].min() : "160")
     *                     .build())
     *             .highAvailabilityEnable(true)
     *             .zoneId(defaultGetInstanceTypes.types()[0].zoneId())
     *             .securityGroupId(defaultSecurityGroup.id())
     *             .isOpenPublicIp(true)
     *             .chargeType("PostPaid")
     *             .vswitchId(defaultGetSwitches.ids()[0])
     *             .userDefinedEmrEcsRole(defaultRole.name())
     *             .sshEnable(true)
     *             .masterPwd("ABCtest1234!")
     *             .tags(Map.ofEntries(
     *                 Map.entry("Created", "TF"),
     *                 Map.entry("For", "acceptance test")
     *             ))
     *             .build());
     * 
     *         final var ids = EmrFunctions.getClusters(GetClustersArgs.builder()
     *             .build());
     * 
     *         ctx.export("emrClusterId1", ids.clusters()[0].id());
     *         final var nameRegex = EmrFunctions.getClusters(GetClustersArgs.builder()
     *             .nameRegex(defaultCluster.name())
     *             .build());
     * 
     *         ctx.export("emrClusterId2", nameRegex.applyValue(_nameRegex -> _nameRegex.clusters()[0].id()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetClustersResult> getClusters(GetClustersArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("alicloud:emr/getClusters:getClusters", TypeShape.of(GetClustersResult.class), args, Utilities.withVersion(options));
    }
    /**
     * This data source provides the Emr Clusters of the current Alibaba Cloud user.
     * 
     * &gt; **DEPRECATED:**  This datasource has been deprecated from version `1.204.0`. Please use new datasource emrv2_clusters.
     * 
     * &gt; **NOTE:** Available in v1.146.0+.
     * 
     * ## Example Usage
     * 
     * Basic Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.alicloud.resourcemanager.ResourcemanagerFunctions;
     * import com.pulumi.alicloud.resourcemanager.inputs.GetResourceGroupsArgs;
     * import com.pulumi.alicloud.emr.EmrFunctions;
     * import com.pulumi.alicloud.emr.inputs.GetMainVersionsArgs;
     * import com.pulumi.alicloud.emr.inputs.GetInstanceTypesArgs;
     * import com.pulumi.alicloud.emr.inputs.GetDiskTypesArgs;
     * import com.pulumi.alicloud.vpc.VpcFunctions;
     * import com.pulumi.alicloud.vpc.inputs.GetNetworksArgs;
     * import com.pulumi.alicloud.ecs.SecurityGroup;
     * import com.pulumi.alicloud.ecs.SecurityGroupArgs;
     * import com.pulumi.alicloud.vpc.inputs.GetSwitchesArgs;
     * import com.pulumi.alicloud.ram.Role;
     * import com.pulumi.alicloud.ram.RoleArgs;
     * import com.pulumi.alicloud.emr.Cluster;
     * import com.pulumi.alicloud.emr.ClusterArgs;
     * import com.pulumi.alicloud.emr.inputs.ClusterHostGroupArgs;
     * import com.pulumi.alicloud.emr.inputs.GetClustersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var config = ctx.config();
     *         final var name = config.get("name").orElse("tf-testAccClusters");
     *         final var default = ResourcemanagerFunctions.getResourceGroups(GetResourceGroupsArgs.builder()
     *             .status("OK")
     *             .build());
     * 
     *         final var defaultGetMainVersions = EmrFunctions.getMainVersions(GetMainVersionsArgs.builder()
     *             .build());
     * 
     *         final var defaultGetInstanceTypes = EmrFunctions.getInstanceTypes(GetInstanceTypesArgs.builder()
     *             .destinationResource("InstanceType")
     *             .clusterType(defaultGetMainVersions.mainVersions()[0].clusterTypes()[0])
     *             .supportLocalStorage(false)
     *             .instanceChargeType("PostPaid")
     *             .supportNodeTypes(            
     *                 "MASTER",
     *                 "CORE",
     *                 "TASK")
     *             .build());
     * 
     *         final var dataDisk = EmrFunctions.getDiskTypes(GetDiskTypesArgs.builder()
     *             .destinationResource("DataDisk")
     *             .clusterType(defaultGetMainVersions.mainVersions()[0].clusterTypes()[0])
     *             .instanceChargeType("PostPaid")
     *             .instanceType(defaultGetInstanceTypes.types()[0].id())
     *             .zoneId(defaultGetInstanceTypes.types()[0].zoneId())
     *             .build());
     * 
     *         final var systemDisk = EmrFunctions.getDiskTypes(GetDiskTypesArgs.builder()
     *             .destinationResource("SystemDisk")
     *             .clusterType(defaultGetMainVersions.mainVersions()[0].clusterTypes()[0])
     *             .instanceChargeType("PostPaid")
     *             .instanceType(defaultGetInstanceTypes.types()[0].id())
     *             .zoneId(defaultGetInstanceTypes.types()[0].zoneId())
     *             .build());
     * 
     *         final var defaultGetNetworks = VpcFunctions.getNetworks(GetNetworksArgs.builder()
     *             .nameRegex("default-NODELETING")
     *             .build());
     * 
     *         var defaultSecurityGroup = new SecurityGroup("defaultSecurityGroup", SecurityGroupArgs.builder()
     *             .name(name)
     *             .vpcId(defaultGetNetworks.ids()[0])
     *             .build());
     * 
     *         final var defaultGetSwitches = VpcFunctions.getSwitches(GetSwitchesArgs.builder()
     *             .vpcId(defaultGetNetworks.ids()[0])
     *             .zoneId(defaultGetInstanceTypes.types()[0].zoneId())
     *             .build());
     * 
     *         var defaultRole = new Role("defaultRole", RoleArgs.builder()
     *             .name(name)
     *             .document("""
     *     {
     *         \"Statement\": [
     *         {
     *             \"Action\": \"sts:AssumeRole\",
     *             \"Effect\": \"Allow\",
     *             \"Principal\": {
     *             \"Service\": [
     *                 \"emr.aliyuncs.com\",
     *                 \"ecs.aliyuncs.com\"
     *             ]
     *             }
     *         }
     *         ],
     *         \"Version\": \"1\"
     *     }
     *             """)
     *             .description("this is a role test.")
     *             .force(true)
     *             .build());
     * 
     *         var defaultCluster = new Cluster("defaultCluster", ClusterArgs.builder()
     *             .name(name)
     *             .emrVer(defaultGetMainVersions.mainVersions()[0].emrVersion())
     *             .clusterType(defaultGetMainVersions.mainVersions()[0].clusterTypes()[0])
     *             .hostGroups(            
     *                 ClusterHostGroupArgs.builder()
     *                     .hostGroupName("master_group")
     *                     .hostGroupType("MASTER")
     *                     .nodeCount("2")
     *                     .instanceType(defaultGetInstanceTypes.types()[0].id())
     *                     .diskType(dataDisk.types()[0].value())
     *                     .diskCapacity(dataDisk.types()[0].min() > 160 ? dataDisk.types()[0].min() : "160")
     *                     .diskCount("1")
     *                     .sysDiskType(systemDisk.types()[0].value())
     *                     .sysDiskCapacity(systemDisk.types()[0].min() > 160 ? systemDisk.types()[0].min() : "160")
     *                     .build(),
     *                 ClusterHostGroupArgs.builder()
     *                     .hostGroupName("core_group")
     *                     .hostGroupType("CORE")
     *                     .nodeCount("3")
     *                     .instanceType(defaultGetInstanceTypes.types()[0].id())
     *                     .diskType(dataDisk.types()[0].value())
     *                     .diskCapacity(dataDisk.types()[0].min() > 160 ? dataDisk.types()[0].min() : "160")
     *                     .diskCount("4")
     *                     .sysDiskType(systemDisk.types()[0].value())
     *                     .sysDiskCapacity(systemDisk.types()[0].min() > 160 ? systemDisk.types()[0].min() : "160")
     *                     .build(),
     *                 ClusterHostGroupArgs.builder()
     *                     .hostGroupName("task_group")
     *                     .hostGroupType("TASK")
     *                     .nodeCount("2")
     *                     .instanceType(defaultGetInstanceTypes.types()[0].id())
     *                     .diskType(dataDisk.types()[0].value())
     *                     .diskCapacity(dataDisk.types()[0].min() > 160 ? dataDisk.types()[0].min() : "160")
     *                     .diskCount("4")
     *                     .sysDiskType(systemDisk.types()[0].value())
     *                     .sysDiskCapacity(systemDisk.types()[0].min() > 160 ? systemDisk.types()[0].min() : "160")
     *                     .build())
     *             .highAvailabilityEnable(true)
     *             .zoneId(defaultGetInstanceTypes.types()[0].zoneId())
     *             .securityGroupId(defaultSecurityGroup.id())
     *             .isOpenPublicIp(true)
     *             .chargeType("PostPaid")
     *             .vswitchId(defaultGetSwitches.ids()[0])
     *             .userDefinedEmrEcsRole(defaultRole.name())
     *             .sshEnable(true)
     *             .masterPwd("ABCtest1234!")
     *             .tags(Map.ofEntries(
     *                 Map.entry("Created", "TF"),
     *                 Map.entry("For", "acceptance test")
     *             ))
     *             .build());
     * 
     *         final var ids = EmrFunctions.getClusters(GetClustersArgs.builder()
     *             .build());
     * 
     *         ctx.export("emrClusterId1", ids.clusters()[0].id());
     *         final var nameRegex = EmrFunctions.getClusters(GetClustersArgs.builder()
     *             .nameRegex(defaultCluster.name())
     *             .build());
     * 
     *         ctx.export("emrClusterId2", nameRegex.applyValue(_nameRegex -> _nameRegex.clusters()[0].id()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetClustersResult> getClustersPlain(GetClustersPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("alicloud:emr/getClusters:getClusters", TypeShape.of(GetClustersResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `alicloud.emr.getDiskTypes` data source provides a collection of data disk and
     * system disk types available in Alibaba Cloud account when create a emr cluster.
     * 
     * &gt; **NOTE:** Available in 1.60.0+
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.alicloud.emr.EmrFunctions;
     * import com.pulumi.alicloud.emr.inputs.GetDiskTypesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var default = EmrFunctions.getDiskTypes(GetDiskTypesArgs.builder()
     *             .destinationResource("DataDisk")
     *             .instanceChargeType("PostPaid")
     *             .clusterType("HADOOP")
     *             .instanceType("ecs.g5.xlarge")
     *             .zoneId("cn-huhehaote-a")
     *             .build());
     * 
     *         ctx.export("dataDiskType", default_.types()[0].value());
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetDiskTypesResult> getDiskTypes(GetDiskTypesArgs args) {
        return getDiskTypes(args, InvokeOptions.Empty);
    }
    /**
     * The `alicloud.emr.getDiskTypes` data source provides a collection of data disk and
     * system disk types available in Alibaba Cloud account when create a emr cluster.
     * 
     * &gt; **NOTE:** Available in 1.60.0+
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.alicloud.emr.EmrFunctions;
     * import com.pulumi.alicloud.emr.inputs.GetDiskTypesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var default = EmrFunctions.getDiskTypes(GetDiskTypesArgs.builder()
     *             .destinationResource("DataDisk")
     *             .instanceChargeType("PostPaid")
     *             .clusterType("HADOOP")
     *             .instanceType("ecs.g5.xlarge")
     *             .zoneId("cn-huhehaote-a")
     *             .build());
     * 
     *         ctx.export("dataDiskType", default_.types()[0].value());
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetDiskTypesResult> getDiskTypesPlain(GetDiskTypesPlainArgs args) {
        return getDiskTypesPlain(args, InvokeOptions.Empty);
    }
    /**
     * The `alicloud.emr.getDiskTypes` data source provides a collection of data disk and
     * system disk types available in Alibaba Cloud account when create a emr cluster.
     * 
     * &gt; **NOTE:** Available in 1.60.0+
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.alicloud.emr.EmrFunctions;
     * import com.pulumi.alicloud.emr.inputs.GetDiskTypesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var default = EmrFunctions.getDiskTypes(GetDiskTypesArgs.builder()
     *             .destinationResource("DataDisk")
     *             .instanceChargeType("PostPaid")
     *             .clusterType("HADOOP")
     *             .instanceType("ecs.g5.xlarge")
     *             .zoneId("cn-huhehaote-a")
     *             .build());
     * 
     *         ctx.export("dataDiskType", default_.types()[0].value());
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetDiskTypesResult> getDiskTypes(GetDiskTypesArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("alicloud:emr/getDiskTypes:getDiskTypes", TypeShape.of(GetDiskTypesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `alicloud.emr.getDiskTypes` data source provides a collection of data disk and
     * system disk types available in Alibaba Cloud account when create a emr cluster.
     * 
     * &gt; **NOTE:** Available in 1.60.0+
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.alicloud.emr.EmrFunctions;
     * import com.pulumi.alicloud.emr.inputs.GetDiskTypesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var default = EmrFunctions.getDiskTypes(GetDiskTypesArgs.builder()
     *             .destinationResource("DataDisk")
     *             .instanceChargeType("PostPaid")
     *             .clusterType("HADOOP")
     *             .instanceType("ecs.g5.xlarge")
     *             .zoneId("cn-huhehaote-a")
     *             .build());
     * 
     *         ctx.export("dataDiskType", default_.types()[0].value());
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetDiskTypesResult> getDiskTypes(GetDiskTypesArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("alicloud:emr/getDiskTypes:getDiskTypes", TypeShape.of(GetDiskTypesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `alicloud.emr.getDiskTypes` data source provides a collection of data disk and
     * system disk types available in Alibaba Cloud account when create a emr cluster.
     * 
     * &gt; **NOTE:** Available in 1.60.0+
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.alicloud.emr.EmrFunctions;
     * import com.pulumi.alicloud.emr.inputs.GetDiskTypesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var default = EmrFunctions.getDiskTypes(GetDiskTypesArgs.builder()
     *             .destinationResource("DataDisk")
     *             .instanceChargeType("PostPaid")
     *             .clusterType("HADOOP")
     *             .instanceType("ecs.g5.xlarge")
     *             .zoneId("cn-huhehaote-a")
     *             .build());
     * 
     *         ctx.export("dataDiskType", default_.types()[0].value());
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetDiskTypesResult> getDiskTypesPlain(GetDiskTypesPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("alicloud:emr/getDiskTypes:getDiskTypes", TypeShape.of(GetDiskTypesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `alicloud.emr.getInstanceTypes` data source provides a collection of ecs
     * instance types available in Alibaba Cloud account when create a emr cluster.
     * 
     * &gt; **NOTE:** Available in 1.59.0+
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.alicloud.emr.EmrFunctions;
     * import com.pulumi.alicloud.emr.inputs.GetInstanceTypesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var default = EmrFunctions.getInstanceTypes(GetInstanceTypesArgs.builder()
     *             .destinationResource("InstanceType")
     *             .instanceChargeType("PostPaid")
     *             .supportLocalStorage(false)
     *             .clusterType("HADOOP")
     *             .instanceType("ecs.g5.2xlarge")
     *             .supportNodeTypes(            
     *                 "MASTER",
     *                 "CORE")
     *             .build());
     * 
     *         ctx.export("firstInstanceType", default_.types()[0].id());
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetInstanceTypesResult> getInstanceTypes(GetInstanceTypesArgs args) {
        return getInstanceTypes(args, InvokeOptions.Empty);
    }
    /**
     * The `alicloud.emr.getInstanceTypes` data source provides a collection of ecs
     * instance types available in Alibaba Cloud account when create a emr cluster.
     * 
     * &gt; **NOTE:** Available in 1.59.0+
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.alicloud.emr.EmrFunctions;
     * import com.pulumi.alicloud.emr.inputs.GetInstanceTypesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var default = EmrFunctions.getInstanceTypes(GetInstanceTypesArgs.builder()
     *             .destinationResource("InstanceType")
     *             .instanceChargeType("PostPaid")
     *             .supportLocalStorage(false)
     *             .clusterType("HADOOP")
     *             .instanceType("ecs.g5.2xlarge")
     *             .supportNodeTypes(            
     *                 "MASTER",
     *                 "CORE")
     *             .build());
     * 
     *         ctx.export("firstInstanceType", default_.types()[0].id());
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetInstanceTypesResult> getInstanceTypesPlain(GetInstanceTypesPlainArgs args) {
        return getInstanceTypesPlain(args, InvokeOptions.Empty);
    }
    /**
     * The `alicloud.emr.getInstanceTypes` data source provides a collection of ecs
     * instance types available in Alibaba Cloud account when create a emr cluster.
     * 
     * &gt; **NOTE:** Available in 1.59.0+
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.alicloud.emr.EmrFunctions;
     * import com.pulumi.alicloud.emr.inputs.GetInstanceTypesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var default = EmrFunctions.getInstanceTypes(GetInstanceTypesArgs.builder()
     *             .destinationResource("InstanceType")
     *             .instanceChargeType("PostPaid")
     *             .supportLocalStorage(false)
     *             .clusterType("HADOOP")
     *             .instanceType("ecs.g5.2xlarge")
     *             .supportNodeTypes(            
     *                 "MASTER",
     *                 "CORE")
     *             .build());
     * 
     *         ctx.export("firstInstanceType", default_.types()[0].id());
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetInstanceTypesResult> getInstanceTypes(GetInstanceTypesArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("alicloud:emr/getInstanceTypes:getInstanceTypes", TypeShape.of(GetInstanceTypesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `alicloud.emr.getInstanceTypes` data source provides a collection of ecs
     * instance types available in Alibaba Cloud account when create a emr cluster.
     * 
     * &gt; **NOTE:** Available in 1.59.0+
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.alicloud.emr.EmrFunctions;
     * import com.pulumi.alicloud.emr.inputs.GetInstanceTypesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var default = EmrFunctions.getInstanceTypes(GetInstanceTypesArgs.builder()
     *             .destinationResource("InstanceType")
     *             .instanceChargeType("PostPaid")
     *             .supportLocalStorage(false)
     *             .clusterType("HADOOP")
     *             .instanceType("ecs.g5.2xlarge")
     *             .supportNodeTypes(            
     *                 "MASTER",
     *                 "CORE")
     *             .build());
     * 
     *         ctx.export("firstInstanceType", default_.types()[0].id());
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetInstanceTypesResult> getInstanceTypes(GetInstanceTypesArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("alicloud:emr/getInstanceTypes:getInstanceTypes", TypeShape.of(GetInstanceTypesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `alicloud.emr.getInstanceTypes` data source provides a collection of ecs
     * instance types available in Alibaba Cloud account when create a emr cluster.
     * 
     * &gt; **NOTE:** Available in 1.59.0+
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.alicloud.emr.EmrFunctions;
     * import com.pulumi.alicloud.emr.inputs.GetInstanceTypesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var default = EmrFunctions.getInstanceTypes(GetInstanceTypesArgs.builder()
     *             .destinationResource("InstanceType")
     *             .instanceChargeType("PostPaid")
     *             .supportLocalStorage(false)
     *             .clusterType("HADOOP")
     *             .instanceType("ecs.g5.2xlarge")
     *             .supportNodeTypes(            
     *                 "MASTER",
     *                 "CORE")
     *             .build());
     * 
     *         ctx.export("firstInstanceType", default_.types()[0].id());
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetInstanceTypesResult> getInstanceTypesPlain(GetInstanceTypesPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("alicloud:emr/getInstanceTypes:getInstanceTypes", TypeShape.of(GetInstanceTypesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `alicloud.emr.getMainVersions` data source provides a collection of emr
     * main versions available in Alibaba Cloud account when create a emr cluster.
     * 
     * &gt; **NOTE:** Available in 1.59.0+
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.alicloud.emr.EmrFunctions;
     * import com.pulumi.alicloud.emr.inputs.GetMainVersionsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var default = EmrFunctions.getMainVersions(GetMainVersionsArgs.builder()
     *             .emrVersion("EMR-3.22.0")
     *             .clusterTypes(            
     *                 "HADOOP",
     *                 "ZOOKEEPER")
     *             .build());
     * 
     *         ctx.export("firstMainVersion", default_.mainVersions()[0].emrVersion());
     *         ctx.export("thisClusterTypes", default_.mainVersions()[0].clusterTypes());
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetMainVersionsResult> getMainVersions() {
        return getMainVersions(GetMainVersionsArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * The `alicloud.emr.getMainVersions` data source provides a collection of emr
     * main versions available in Alibaba Cloud account when create a emr cluster.
     * 
     * &gt; **NOTE:** Available in 1.59.0+
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.alicloud.emr.EmrFunctions;
     * import com.pulumi.alicloud.emr.inputs.GetMainVersionsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var default = EmrFunctions.getMainVersions(GetMainVersionsArgs.builder()
     *             .emrVersion("EMR-3.22.0")
     *             .clusterTypes(            
     *                 "HADOOP",
     *                 "ZOOKEEPER")
     *             .build());
     * 
     *         ctx.export("firstMainVersion", default_.mainVersions()[0].emrVersion());
     *         ctx.export("thisClusterTypes", default_.mainVersions()[0].clusterTypes());
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetMainVersionsResult> getMainVersionsPlain() {
        return getMainVersionsPlain(GetMainVersionsPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * The `alicloud.emr.getMainVersions` data source provides a collection of emr
     * main versions available in Alibaba Cloud account when create a emr cluster.
     * 
     * &gt; **NOTE:** Available in 1.59.0+
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.alicloud.emr.EmrFunctions;
     * import com.pulumi.alicloud.emr.inputs.GetMainVersionsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var default = EmrFunctions.getMainVersions(GetMainVersionsArgs.builder()
     *             .emrVersion("EMR-3.22.0")
     *             .clusterTypes(            
     *                 "HADOOP",
     *                 "ZOOKEEPER")
     *             .build());
     * 
     *         ctx.export("firstMainVersion", default_.mainVersions()[0].emrVersion());
     *         ctx.export("thisClusterTypes", default_.mainVersions()[0].clusterTypes());
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetMainVersionsResult> getMainVersions(GetMainVersionsArgs args) {
        return getMainVersions(args, InvokeOptions.Empty);
    }
    /**
     * The `alicloud.emr.getMainVersions` data source provides a collection of emr
     * main versions available in Alibaba Cloud account when create a emr cluster.
     * 
     * &gt; **NOTE:** Available in 1.59.0+
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.alicloud.emr.EmrFunctions;
     * import com.pulumi.alicloud.emr.inputs.GetMainVersionsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var default = EmrFunctions.getMainVersions(GetMainVersionsArgs.builder()
     *             .emrVersion("EMR-3.22.0")
     *             .clusterTypes(            
     *                 "HADOOP",
     *                 "ZOOKEEPER")
     *             .build());
     * 
     *         ctx.export("firstMainVersion", default_.mainVersions()[0].emrVersion());
     *         ctx.export("thisClusterTypes", default_.mainVersions()[0].clusterTypes());
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetMainVersionsResult> getMainVersionsPlain(GetMainVersionsPlainArgs args) {
        return getMainVersionsPlain(args, InvokeOptions.Empty);
    }
    /**
     * The `alicloud.emr.getMainVersions` data source provides a collection of emr
     * main versions available in Alibaba Cloud account when create a emr cluster.
     * 
     * &gt; **NOTE:** Available in 1.59.0+
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.alicloud.emr.EmrFunctions;
     * import com.pulumi.alicloud.emr.inputs.GetMainVersionsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var default = EmrFunctions.getMainVersions(GetMainVersionsArgs.builder()
     *             .emrVersion("EMR-3.22.0")
     *             .clusterTypes(            
     *                 "HADOOP",
     *                 "ZOOKEEPER")
     *             .build());
     * 
     *         ctx.export("firstMainVersion", default_.mainVersions()[0].emrVersion());
     *         ctx.export("thisClusterTypes", default_.mainVersions()[0].clusterTypes());
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetMainVersionsResult> getMainVersions(GetMainVersionsArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("alicloud:emr/getMainVersions:getMainVersions", TypeShape.of(GetMainVersionsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `alicloud.emr.getMainVersions` data source provides a collection of emr
     * main versions available in Alibaba Cloud account when create a emr cluster.
     * 
     * &gt; **NOTE:** Available in 1.59.0+
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.alicloud.emr.EmrFunctions;
     * import com.pulumi.alicloud.emr.inputs.GetMainVersionsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var default = EmrFunctions.getMainVersions(GetMainVersionsArgs.builder()
     *             .emrVersion("EMR-3.22.0")
     *             .clusterTypes(            
     *                 "HADOOP",
     *                 "ZOOKEEPER")
     *             .build());
     * 
     *         ctx.export("firstMainVersion", default_.mainVersions()[0].emrVersion());
     *         ctx.export("thisClusterTypes", default_.mainVersions()[0].clusterTypes());
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetMainVersionsResult> getMainVersions(GetMainVersionsArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("alicloud:emr/getMainVersions:getMainVersions", TypeShape.of(GetMainVersionsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `alicloud.emr.getMainVersions` data source provides a collection of emr
     * main versions available in Alibaba Cloud account when create a emr cluster.
     * 
     * &gt; **NOTE:** Available in 1.59.0+
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.alicloud.emr.EmrFunctions;
     * import com.pulumi.alicloud.emr.inputs.GetMainVersionsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var default = EmrFunctions.getMainVersions(GetMainVersionsArgs.builder()
     *             .emrVersion("EMR-3.22.0")
     *             .clusterTypes(            
     *                 "HADOOP",
     *                 "ZOOKEEPER")
     *             .build());
     * 
     *         ctx.export("firstMainVersion", default_.mainVersions()[0].emrVersion());
     *         ctx.export("thisClusterTypes", default_.mainVersions()[0].clusterTypes());
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetMainVersionsResult> getMainVersionsPlain(GetMainVersionsPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("alicloud:emr/getMainVersions:getMainVersions", TypeShape.of(GetMainVersionsResult.class), args, Utilities.withVersion(options));
    }
}
