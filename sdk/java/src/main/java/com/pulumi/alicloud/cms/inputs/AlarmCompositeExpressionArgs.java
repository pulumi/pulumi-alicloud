// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.cms.inputs;

import com.pulumi.alicloud.cms.inputs.AlarmCompositeExpressionExpressionListArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AlarmCompositeExpressionArgs extends com.pulumi.resources.ResourceArgs {

    public static final AlarmCompositeExpressionArgs Empty = new AlarmCompositeExpressionArgs();

    /**
     * The relationship between the trigger conditions for multiple metrics. Valid values: `&amp;&amp;`, `||`.
     * 
     */
    @Import(name="expressionListJoin")
    private @Nullable Output<String> expressionListJoin;

    /**
     * @return The relationship between the trigger conditions for multiple metrics. Valid values: `&amp;&amp;`, `||`.
     * 
     */
    public Optional<Output<String>> expressionListJoin() {
        return Optional.ofNullable(this.expressionListJoin);
    }

    /**
     * The trigger conditions that are created in standard mode. See `expression_list` below.
     * 
     */
    @Import(name="expressionLists")
    private @Nullable Output<List<AlarmCompositeExpressionExpressionListArgs>> expressionLists;

    /**
     * @return The trigger conditions that are created in standard mode. See `expression_list` below.
     * 
     */
    public Optional<Output<List<AlarmCompositeExpressionExpressionListArgs>>> expressionLists() {
        return Optional.ofNullable(this.expressionLists);
    }

    /**
     * The trigger conditions that are created by using expressions.
     * 
     */
    @Import(name="expressionRaw")
    private @Nullable Output<String> expressionRaw;

    /**
     * @return The trigger conditions that are created by using expressions.
     * 
     */
    public Optional<Output<String>> expressionRaw() {
        return Optional.ofNullable(this.expressionRaw);
    }

    /**
     * The level of the alert. Valid values: `CRITICAL`, `WARN`, `INFO`.
     * 
     */
    @Import(name="level")
    private @Nullable Output<String> level;

    /**
     * @return The level of the alert. Valid values: `CRITICAL`, `WARN`, `INFO`.
     * 
     */
    public Optional<Output<String>> level() {
        return Optional.ofNullable(this.level);
    }

    /**
     * The number of consecutive triggers.
     * 
     */
    @Import(name="times")
    private @Nullable Output<Integer> times;

    /**
     * @return The number of consecutive triggers.
     * 
     */
    public Optional<Output<Integer>> times() {
        return Optional.ofNullable(this.times);
    }

    private AlarmCompositeExpressionArgs() {}

    private AlarmCompositeExpressionArgs(AlarmCompositeExpressionArgs $) {
        this.expressionListJoin = $.expressionListJoin;
        this.expressionLists = $.expressionLists;
        this.expressionRaw = $.expressionRaw;
        this.level = $.level;
        this.times = $.times;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AlarmCompositeExpressionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AlarmCompositeExpressionArgs $;

        public Builder() {
            $ = new AlarmCompositeExpressionArgs();
        }

        public Builder(AlarmCompositeExpressionArgs defaults) {
            $ = new AlarmCompositeExpressionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param expressionListJoin The relationship between the trigger conditions for multiple metrics. Valid values: `&amp;&amp;`, `||`.
         * 
         * @return builder
         * 
         */
        public Builder expressionListJoin(@Nullable Output<String> expressionListJoin) {
            $.expressionListJoin = expressionListJoin;
            return this;
        }

        /**
         * @param expressionListJoin The relationship between the trigger conditions for multiple metrics. Valid values: `&amp;&amp;`, `||`.
         * 
         * @return builder
         * 
         */
        public Builder expressionListJoin(String expressionListJoin) {
            return expressionListJoin(Output.of(expressionListJoin));
        }

        /**
         * @param expressionLists The trigger conditions that are created in standard mode. See `expression_list` below.
         * 
         * @return builder
         * 
         */
        public Builder expressionLists(@Nullable Output<List<AlarmCompositeExpressionExpressionListArgs>> expressionLists) {
            $.expressionLists = expressionLists;
            return this;
        }

        /**
         * @param expressionLists The trigger conditions that are created in standard mode. See `expression_list` below.
         * 
         * @return builder
         * 
         */
        public Builder expressionLists(List<AlarmCompositeExpressionExpressionListArgs> expressionLists) {
            return expressionLists(Output.of(expressionLists));
        }

        /**
         * @param expressionLists The trigger conditions that are created in standard mode. See `expression_list` below.
         * 
         * @return builder
         * 
         */
        public Builder expressionLists(AlarmCompositeExpressionExpressionListArgs... expressionLists) {
            return expressionLists(List.of(expressionLists));
        }

        /**
         * @param expressionRaw The trigger conditions that are created by using expressions.
         * 
         * @return builder
         * 
         */
        public Builder expressionRaw(@Nullable Output<String> expressionRaw) {
            $.expressionRaw = expressionRaw;
            return this;
        }

        /**
         * @param expressionRaw The trigger conditions that are created by using expressions.
         * 
         * @return builder
         * 
         */
        public Builder expressionRaw(String expressionRaw) {
            return expressionRaw(Output.of(expressionRaw));
        }

        /**
         * @param level The level of the alert. Valid values: `CRITICAL`, `WARN`, `INFO`.
         * 
         * @return builder
         * 
         */
        public Builder level(@Nullable Output<String> level) {
            $.level = level;
            return this;
        }

        /**
         * @param level The level of the alert. Valid values: `CRITICAL`, `WARN`, `INFO`.
         * 
         * @return builder
         * 
         */
        public Builder level(String level) {
            return level(Output.of(level));
        }

        /**
         * @param times The number of consecutive triggers.
         * 
         * @return builder
         * 
         */
        public Builder times(@Nullable Output<Integer> times) {
            $.times = times;
            return this;
        }

        /**
         * @param times The number of consecutive triggers.
         * 
         * @return builder
         * 
         */
        public Builder times(Integer times) {
            return times(Output.of(times));
        }

        public AlarmCompositeExpressionArgs build() {
            return $;
        }
    }

}
