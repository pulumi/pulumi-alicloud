// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.esa;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class KvArgs extends com.pulumi.resources.ResourceArgs {

    public static final KvArgs Empty = new KvArgs();

    /**
     * The content of the key, which can be up to 2 MB (2 × 1000 × 1000). If the content is larger than 2 MB, call [PutKvWithHighCapacity](https://www.alibabacloud.com/help/en/doc-detail/2850486.html).
     * 
     */
    @Import(name="expiration")
    private @Nullable Output<Integer> expiration;

    /**
     * @return The content of the key, which can be up to 2 MB (2 × 1000 × 1000). If the content is larger than 2 MB, call [PutKvWithHighCapacity](https://www.alibabacloud.com/help/en/doc-detail/2850486.html).
     * 
     */
    public Optional<Output<Integer>> expiration() {
        return Optional.ofNullable(this.expiration);
    }

    /**
     * The time when the key-value pair expires, which cannot be earlier than the current time. The value is a timestamp in seconds. If you specify both Expiration and ExpirationTtl, only ExpirationTtl takes effect.
     * 
     */
    @Import(name="expirationTtl")
    private @Nullable Output<Integer> expirationTtl;

    /**
     * @return The time when the key-value pair expires, which cannot be earlier than the current time. The value is a timestamp in seconds. If you specify both Expiration and ExpirationTtl, only ExpirationTtl takes effect.
     * 
     */
    public Optional<Output<Integer>> expirationTtl() {
        return Optional.ofNullable(this.expirationTtl);
    }

    /**
     * The relative expiration time. Unit: seconds. If you specify both Expiration and ExpirationTtl, only ExpirationTtl takes effect.
     * 
     */
    @Import(name="isbase")
    private @Nullable Output<Boolean> isbase;

    /**
     * @return The relative expiration time. Unit: seconds. If you specify both Expiration and ExpirationTtl, only ExpirationTtl takes effect.
     * 
     */
    public Optional<Output<Boolean>> isbase() {
        return Optional.ofNullable(this.isbase);
    }

    /**
     * kv
     * 
     */
    @Import(name="key", required=true)
    private Output<String> key;

    /**
     * @return kv
     * 
     */
    public Output<String> key() {
        return this.key;
    }

    /**
     * The name specified when calling [CreatevNamespace](https://help.aliyun.com/document_detail/2850317.html).
     * 
     */
    @Import(name="namespace", required=true)
    private Output<String> namespace;

    /**
     * @return The name specified when calling [CreatevNamespace](https://help.aliyun.com/document_detail/2850317.html).
     * 
     */
    public Output<String> namespace() {
        return this.namespace;
    }

    /**
     * The key name. The name can be up to 512 characters in length and cannot contain spaces or backslashes (\\).
     * 
     */
    @Import(name="url")
    private @Nullable Output<String> url;

    /**
     * @return The key name. The name can be up to 512 characters in length and cannot contain spaces or backslashes (\\).
     * 
     */
    public Optional<Output<String>> url() {
        return Optional.ofNullable(this.url);
    }

    /**
     * The content of the key. If the content has more than 256 characters in length, the system displays the first 100 and the last 100 characters, and omits the middle part.
     * 
     */
    @Import(name="value")
    private @Nullable Output<String> value;

    /**
     * @return The content of the key. If the content has more than 256 characters in length, the system displays the first 100 and the last 100 characters, and omits the middle part.
     * 
     */
    public Optional<Output<String>> value() {
        return Optional.ofNullable(this.value);
    }

    private KvArgs() {}

    private KvArgs(KvArgs $) {
        this.expiration = $.expiration;
        this.expirationTtl = $.expirationTtl;
        this.isbase = $.isbase;
        this.key = $.key;
        this.namespace = $.namespace;
        this.url = $.url;
        this.value = $.value;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(KvArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private KvArgs $;

        public Builder() {
            $ = new KvArgs();
        }

        public Builder(KvArgs defaults) {
            $ = new KvArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param expiration The content of the key, which can be up to 2 MB (2 × 1000 × 1000). If the content is larger than 2 MB, call [PutKvWithHighCapacity](https://www.alibabacloud.com/help/en/doc-detail/2850486.html).
         * 
         * @return builder
         * 
         */
        public Builder expiration(@Nullable Output<Integer> expiration) {
            $.expiration = expiration;
            return this;
        }

        /**
         * @param expiration The content of the key, which can be up to 2 MB (2 × 1000 × 1000). If the content is larger than 2 MB, call [PutKvWithHighCapacity](https://www.alibabacloud.com/help/en/doc-detail/2850486.html).
         * 
         * @return builder
         * 
         */
        public Builder expiration(Integer expiration) {
            return expiration(Output.of(expiration));
        }

        /**
         * @param expirationTtl The time when the key-value pair expires, which cannot be earlier than the current time. The value is a timestamp in seconds. If you specify both Expiration and ExpirationTtl, only ExpirationTtl takes effect.
         * 
         * @return builder
         * 
         */
        public Builder expirationTtl(@Nullable Output<Integer> expirationTtl) {
            $.expirationTtl = expirationTtl;
            return this;
        }

        /**
         * @param expirationTtl The time when the key-value pair expires, which cannot be earlier than the current time. The value is a timestamp in seconds. If you specify both Expiration and ExpirationTtl, only ExpirationTtl takes effect.
         * 
         * @return builder
         * 
         */
        public Builder expirationTtl(Integer expirationTtl) {
            return expirationTtl(Output.of(expirationTtl));
        }

        /**
         * @param isbase The relative expiration time. Unit: seconds. If you specify both Expiration and ExpirationTtl, only ExpirationTtl takes effect.
         * 
         * @return builder
         * 
         */
        public Builder isbase(@Nullable Output<Boolean> isbase) {
            $.isbase = isbase;
            return this;
        }

        /**
         * @param isbase The relative expiration time. Unit: seconds. If you specify both Expiration and ExpirationTtl, only ExpirationTtl takes effect.
         * 
         * @return builder
         * 
         */
        public Builder isbase(Boolean isbase) {
            return isbase(Output.of(isbase));
        }

        /**
         * @param key kv
         * 
         * @return builder
         * 
         */
        public Builder key(Output<String> key) {
            $.key = key;
            return this;
        }

        /**
         * @param key kv
         * 
         * @return builder
         * 
         */
        public Builder key(String key) {
            return key(Output.of(key));
        }

        /**
         * @param namespace The name specified when calling [CreatevNamespace](https://help.aliyun.com/document_detail/2850317.html).
         * 
         * @return builder
         * 
         */
        public Builder namespace(Output<String> namespace) {
            $.namespace = namespace;
            return this;
        }

        /**
         * @param namespace The name specified when calling [CreatevNamespace](https://help.aliyun.com/document_detail/2850317.html).
         * 
         * @return builder
         * 
         */
        public Builder namespace(String namespace) {
            return namespace(Output.of(namespace));
        }

        /**
         * @param url The key name. The name can be up to 512 characters in length and cannot contain spaces or backslashes (\\).
         * 
         * @return builder
         * 
         */
        public Builder url(@Nullable Output<String> url) {
            $.url = url;
            return this;
        }

        /**
         * @param url The key name. The name can be up to 512 characters in length and cannot contain spaces or backslashes (\\).
         * 
         * @return builder
         * 
         */
        public Builder url(String url) {
            return url(Output.of(url));
        }

        /**
         * @param value The content of the key. If the content has more than 256 characters in length, the system displays the first 100 and the last 100 characters, and omits the middle part.
         * 
         * @return builder
         * 
         */
        public Builder value(@Nullable Output<String> value) {
            $.value = value;
            return this;
        }

        /**
         * @param value The content of the key. If the content has more than 256 characters in length, the system displays the first 100 and the last 100 characters, and omits the middle part.
         * 
         * @return builder
         * 
         */
        public Builder value(String value) {
            return value(Output.of(value));
        }

        public KvArgs build() {
            if ($.key == null) {
                throw new MissingRequiredPropertyException("KvArgs", "key");
            }
            if ($.namespace == null) {
                throw new MissingRequiredPropertyException("KvArgs", "namespace");
            }
            return $;
        }
    }

}
