// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.arms.outputs;

import com.pulumi.alicloud.arms.outputs.DispatchRuleNotifyRuleNotifyObject;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class DispatchRuleNotifyRule {
    /**
     * @return The notification method. Valid values: dingTalk, sms, webhook, email, and wechat.
     * 
     */
    private List<String> notifyChannels;
    /**
     * @return End time of notification.
     * 
     */
    private String notifyEndTime;
    /**
     * @return Sets the notification object. See `notify_objects` below.
     * 
     */
    private List<DispatchRuleNotifyRuleNotifyObject> notifyObjects;
    /**
     * @return Start time of notification.
     * 
     */
    private String notifyStartTime;

    private DispatchRuleNotifyRule() {}
    /**
     * @return The notification method. Valid values: dingTalk, sms, webhook, email, and wechat.
     * 
     */
    public List<String> notifyChannels() {
        return this.notifyChannels;
    }
    /**
     * @return End time of notification.
     * 
     */
    public String notifyEndTime() {
        return this.notifyEndTime;
    }
    /**
     * @return Sets the notification object. See `notify_objects` below.
     * 
     */
    public List<DispatchRuleNotifyRuleNotifyObject> notifyObjects() {
        return this.notifyObjects;
    }
    /**
     * @return Start time of notification.
     * 
     */
    public String notifyStartTime() {
        return this.notifyStartTime;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DispatchRuleNotifyRule defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<String> notifyChannels;
        private String notifyEndTime;
        private List<DispatchRuleNotifyRuleNotifyObject> notifyObjects;
        private String notifyStartTime;
        public Builder() {}
        public Builder(DispatchRuleNotifyRule defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.notifyChannels = defaults.notifyChannels;
    	      this.notifyEndTime = defaults.notifyEndTime;
    	      this.notifyObjects = defaults.notifyObjects;
    	      this.notifyStartTime = defaults.notifyStartTime;
        }

        @CustomType.Setter
        public Builder notifyChannels(List<String> notifyChannels) {
            if (notifyChannels == null) {
              throw new MissingRequiredPropertyException("DispatchRuleNotifyRule", "notifyChannels");
            }
            this.notifyChannels = notifyChannels;
            return this;
        }
        public Builder notifyChannels(String... notifyChannels) {
            return notifyChannels(List.of(notifyChannels));
        }
        @CustomType.Setter
        public Builder notifyEndTime(String notifyEndTime) {
            if (notifyEndTime == null) {
              throw new MissingRequiredPropertyException("DispatchRuleNotifyRule", "notifyEndTime");
            }
            this.notifyEndTime = notifyEndTime;
            return this;
        }
        @CustomType.Setter
        public Builder notifyObjects(List<DispatchRuleNotifyRuleNotifyObject> notifyObjects) {
            if (notifyObjects == null) {
              throw new MissingRequiredPropertyException("DispatchRuleNotifyRule", "notifyObjects");
            }
            this.notifyObjects = notifyObjects;
            return this;
        }
        public Builder notifyObjects(DispatchRuleNotifyRuleNotifyObject... notifyObjects) {
            return notifyObjects(List.of(notifyObjects));
        }
        @CustomType.Setter
        public Builder notifyStartTime(String notifyStartTime) {
            if (notifyStartTime == null) {
              throw new MissingRequiredPropertyException("DispatchRuleNotifyRule", "notifyStartTime");
            }
            this.notifyStartTime = notifyStartTime;
            return this;
        }
        public DispatchRuleNotifyRule build() {
            final var _resultValue = new DispatchRuleNotifyRule();
            _resultValue.notifyChannels = notifyChannels;
            _resultValue.notifyEndTime = notifyEndTime;
            _resultValue.notifyObjects = notifyObjects;
            _resultValue.notifyStartTime = notifyStartTime;
            return _resultValue;
        }
    }
}
