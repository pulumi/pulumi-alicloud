// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.sls.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetAlertsAlertConfigurationJoinConfiguration {
    /**
     * @return Data matching expression.When the data content does not need to be determined, set it to an empty string.In other cases, it needs to be set as an expression, for example, errCnt&gt; 10.
     * 
     */
    private String condition;
    /**
     * @return Check the frequency type. Log Service checks the query and analysis results according to the frequency you configured. The values are as follows:Fixedate: checks query and analysis results at regular intervals.Cron: specifies the time interval by using the Cron expression, and checks the query and analysis results at the specified time interval.
     * 
     */
    private String type;

    private GetAlertsAlertConfigurationJoinConfiguration() {}
    /**
     * @return Data matching expression.When the data content does not need to be determined, set it to an empty string.In other cases, it needs to be set as an expression, for example, errCnt&gt; 10.
     * 
     */
    public String condition() {
        return this.condition;
    }
    /**
     * @return Check the frequency type. Log Service checks the query and analysis results according to the frequency you configured. The values are as follows:Fixedate: checks query and analysis results at regular intervals.Cron: specifies the time interval by using the Cron expression, and checks the query and analysis results at the specified time interval.
     * 
     */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetAlertsAlertConfigurationJoinConfiguration defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String condition;
        private String type;
        public Builder() {}
        public Builder(GetAlertsAlertConfigurationJoinConfiguration defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.condition = defaults.condition;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder condition(String condition) {
            if (condition == null) {
              throw new MissingRequiredPropertyException("GetAlertsAlertConfigurationJoinConfiguration", "condition");
            }
            this.condition = condition;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("GetAlertsAlertConfigurationJoinConfiguration", "type");
            }
            this.type = type;
            return this;
        }
        public GetAlertsAlertConfigurationJoinConfiguration build() {
            final var _resultValue = new GetAlertsAlertConfigurationJoinConfiguration();
            _resultValue.condition = condition;
            _resultValue.type = type;
            return _resultValue;
        }
    }
}
