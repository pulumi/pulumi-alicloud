// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.eflo.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ResourceMachineTypes {
    /**
     * @return This property specifies the number of network bindings, which relates to the number of physical or virtual network cards connected to the network through the network interface card (NIC). Multiple network bindings can increase bandwidth and redundancy and improve network reliability.
     * 
     */
    private @Nullable Integer bondNum;
    /**
     * @return Provides CPU details, including the number of cores, number of threads, clock frequency, and architecture type. This information helps to evaluate the processing power and identify whether it can meet the performance requirements of a particular application.
     * 
     */
    private String cpuInfo;
    /**
     * @return Displays information about the storage device, including the disk type (such as SSD or HDD), capacity, and I/O performance. Storage performance is critical in data-intensive applications such as big data processing and databases.
     * 
     */
    private @Nullable String diskInfo;
    /**
     * @return Provides detailed information about the GPU, including the number, model, memory size, and computing capability. This information is particularly important for tasks such as deep learning, scientific computing, and graph processing, helping users understand the graph processing capabilities of nodes.
     * 
     */
    private String gpuInfo;
    /**
     * @return This property provides memory details, including total memory, available memory, and usage. This helps users understand the memory processing capabilities of compute nodes, especially when running heavy-duty applications.
     * 
     */
    private @Nullable String memoryInfo;
    /**
     * @return Specification Name.
     * 
     */
    private @Nullable String name;
    /**
     * @return Contains detailed information about the network interface, such as network bandwidth, latency, protocol types supported by the network, IP addresses, and network topology. Optimizing network information is essential to ensure efficient data transmission and low latency.
     * 
     */
    private @Nullable String networkInfo;
    /**
     * @return Specifies the network mode, such as bridge mode, NAT mode, or direct connection mode. Different network modes affect the network configuration and data transmission performance of nodes, and affect the network access methods of computing instances.
     * 
     */
    private @Nullable String networkMode;
    /**
     * @return Specifies the total number of compute nodes. This property is particularly important in distributed computing and cluster environments, because the number of nodes often directly affects the computing power and the ability to parallel processing.
     * 
     */
    private @Nullable Integer nodeCount;
    /**
     * @return Usually refers to a specific resource type (such as virtual machine, physical server, container, etc.), which is used to distinguish different computing units or resource categories.
     * 
     */
    private @Nullable String type;

    private ResourceMachineTypes() {}
    /**
     * @return This property specifies the number of network bindings, which relates to the number of physical or virtual network cards connected to the network through the network interface card (NIC). Multiple network bindings can increase bandwidth and redundancy and improve network reliability.
     * 
     */
    public Optional<Integer> bondNum() {
        return Optional.ofNullable(this.bondNum);
    }
    /**
     * @return Provides CPU details, including the number of cores, number of threads, clock frequency, and architecture type. This information helps to evaluate the processing power and identify whether it can meet the performance requirements of a particular application.
     * 
     */
    public String cpuInfo() {
        return this.cpuInfo;
    }
    /**
     * @return Displays information about the storage device, including the disk type (such as SSD or HDD), capacity, and I/O performance. Storage performance is critical in data-intensive applications such as big data processing and databases.
     * 
     */
    public Optional<String> diskInfo() {
        return Optional.ofNullable(this.diskInfo);
    }
    /**
     * @return Provides detailed information about the GPU, including the number, model, memory size, and computing capability. This information is particularly important for tasks such as deep learning, scientific computing, and graph processing, helping users understand the graph processing capabilities of nodes.
     * 
     */
    public String gpuInfo() {
        return this.gpuInfo;
    }
    /**
     * @return This property provides memory details, including total memory, available memory, and usage. This helps users understand the memory processing capabilities of compute nodes, especially when running heavy-duty applications.
     * 
     */
    public Optional<String> memoryInfo() {
        return Optional.ofNullable(this.memoryInfo);
    }
    /**
     * @return Specification Name.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    /**
     * @return Contains detailed information about the network interface, such as network bandwidth, latency, protocol types supported by the network, IP addresses, and network topology. Optimizing network information is essential to ensure efficient data transmission and low latency.
     * 
     */
    public Optional<String> networkInfo() {
        return Optional.ofNullable(this.networkInfo);
    }
    /**
     * @return Specifies the network mode, such as bridge mode, NAT mode, or direct connection mode. Different network modes affect the network configuration and data transmission performance of nodes, and affect the network access methods of computing instances.
     * 
     */
    public Optional<String> networkMode() {
        return Optional.ofNullable(this.networkMode);
    }
    /**
     * @return Specifies the total number of compute nodes. This property is particularly important in distributed computing and cluster environments, because the number of nodes often directly affects the computing power and the ability to parallel processing.
     * 
     */
    public Optional<Integer> nodeCount() {
        return Optional.ofNullable(this.nodeCount);
    }
    /**
     * @return Usually refers to a specific resource type (such as virtual machine, physical server, container, etc.), which is used to distinguish different computing units or resource categories.
     * 
     */
    public Optional<String> type() {
        return Optional.ofNullable(this.type);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ResourceMachineTypes defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Integer bondNum;
        private String cpuInfo;
        private @Nullable String diskInfo;
        private String gpuInfo;
        private @Nullable String memoryInfo;
        private @Nullable String name;
        private @Nullable String networkInfo;
        private @Nullable String networkMode;
        private @Nullable Integer nodeCount;
        private @Nullable String type;
        public Builder() {}
        public Builder(ResourceMachineTypes defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.bondNum = defaults.bondNum;
    	      this.cpuInfo = defaults.cpuInfo;
    	      this.diskInfo = defaults.diskInfo;
    	      this.gpuInfo = defaults.gpuInfo;
    	      this.memoryInfo = defaults.memoryInfo;
    	      this.name = defaults.name;
    	      this.networkInfo = defaults.networkInfo;
    	      this.networkMode = defaults.networkMode;
    	      this.nodeCount = defaults.nodeCount;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder bondNum(@Nullable Integer bondNum) {

            this.bondNum = bondNum;
            return this;
        }
        @CustomType.Setter
        public Builder cpuInfo(String cpuInfo) {
            if (cpuInfo == null) {
              throw new MissingRequiredPropertyException("ResourceMachineTypes", "cpuInfo");
            }
            this.cpuInfo = cpuInfo;
            return this;
        }
        @CustomType.Setter
        public Builder diskInfo(@Nullable String diskInfo) {

            this.diskInfo = diskInfo;
            return this;
        }
        @CustomType.Setter
        public Builder gpuInfo(String gpuInfo) {
            if (gpuInfo == null) {
              throw new MissingRequiredPropertyException("ResourceMachineTypes", "gpuInfo");
            }
            this.gpuInfo = gpuInfo;
            return this;
        }
        @CustomType.Setter
        public Builder memoryInfo(@Nullable String memoryInfo) {

            this.memoryInfo = memoryInfo;
            return this;
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {

            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder networkInfo(@Nullable String networkInfo) {

            this.networkInfo = networkInfo;
            return this;
        }
        @CustomType.Setter
        public Builder networkMode(@Nullable String networkMode) {

            this.networkMode = networkMode;
            return this;
        }
        @CustomType.Setter
        public Builder nodeCount(@Nullable Integer nodeCount) {

            this.nodeCount = nodeCount;
            return this;
        }
        @CustomType.Setter
        public Builder type(@Nullable String type) {

            this.type = type;
            return this;
        }
        public ResourceMachineTypes build() {
            final var _resultValue = new ResourceMachineTypes();
            _resultValue.bondNum = bondNum;
            _resultValue.cpuInfo = cpuInfo;
            _resultValue.diskInfo = diskInfo;
            _resultValue.gpuInfo = gpuInfo;
            _resultValue.memoryInfo = memoryInfo;
            _resultValue.name = name;
            _resultValue.networkInfo = networkInfo;
            _resultValue.networkMode = networkMode;
            _resultValue.nodeCount = nodeCount;
            _resultValue.type = type;
            return _resultValue;
        }
    }
}
