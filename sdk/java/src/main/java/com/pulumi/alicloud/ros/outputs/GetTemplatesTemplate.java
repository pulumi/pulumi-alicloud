// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.ros.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Object;
import java.lang.String;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetTemplatesTemplate {
    /**
     * @return The ID of the change set.
     * 
     */
    private String changeSetId;
    /**
     * @return The description of the template. The description can be up to 256 characters in length.
     * 
     */
    private String description;
    /**
     * @return The ID of the Template.
     * 
     */
    private String id;
    /**
     * @return Share Type.
     * 
     */
    private String shareType;
    /**
     * @return The name of the stack group. The name must be unique in a region.  The name can be up to 255 characters in length and can contain digits, letters, hyphens (-), and underscores (_). It must start with a digit or letter.
     * 
     */
    private String stackGroupName;
    /**
     * @return The ID of the stack.
     * 
     */
    private String stackId;
    /**
     * @return Tags.
     * 
     */
    private Map<String,Object> tags;
    /**
     * @return The structure that contains the template body. The template body must be 1 to 524,288 bytes in length.  If the length of the template body is longer than required, we recommend that you add parameters to the HTTP POST request body to avoid request failures due to excessive length of URLs.  You must specify one of the TemplateBody and TemplateURL parameters, but you cannot specify both of them.
     * 
     */
    private String templateBody;
    /**
     * @return The ID of the template.
     * 
     */
    private String templateId;
    /**
     * @return The name of the template.  The name can be up to 255 characters in length and can contain digits, letters, hyphens (-), and underscores (_). It must start with a digit or letter.
     * 
     */
    private String templateName;
    /**
     * @return Template Version.
     * 
     */
    private String templateVersion;

    private GetTemplatesTemplate() {}
    /**
     * @return The ID of the change set.
     * 
     */
    public String changeSetId() {
        return this.changeSetId;
    }
    /**
     * @return The description of the template. The description can be up to 256 characters in length.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return The ID of the Template.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Share Type.
     * 
     */
    public String shareType() {
        return this.shareType;
    }
    /**
     * @return The name of the stack group. The name must be unique in a region.  The name can be up to 255 characters in length and can contain digits, letters, hyphens (-), and underscores (_). It must start with a digit or letter.
     * 
     */
    public String stackGroupName() {
        return this.stackGroupName;
    }
    /**
     * @return The ID of the stack.
     * 
     */
    public String stackId() {
        return this.stackId;
    }
    /**
     * @return Tags.
     * 
     */
    public Map<String,Object> tags() {
        return this.tags;
    }
    /**
     * @return The structure that contains the template body. The template body must be 1 to 524,288 bytes in length.  If the length of the template body is longer than required, we recommend that you add parameters to the HTTP POST request body to avoid request failures due to excessive length of URLs.  You must specify one of the TemplateBody and TemplateURL parameters, but you cannot specify both of them.
     * 
     */
    public String templateBody() {
        return this.templateBody;
    }
    /**
     * @return The ID of the template.
     * 
     */
    public String templateId() {
        return this.templateId;
    }
    /**
     * @return The name of the template.  The name can be up to 255 characters in length and can contain digits, letters, hyphens (-), and underscores (_). It must start with a digit or letter.
     * 
     */
    public String templateName() {
        return this.templateName;
    }
    /**
     * @return Template Version.
     * 
     */
    public String templateVersion() {
        return this.templateVersion;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetTemplatesTemplate defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String changeSetId;
        private String description;
        private String id;
        private String shareType;
        private String stackGroupName;
        private String stackId;
        private Map<String,Object> tags;
        private String templateBody;
        private String templateId;
        private String templateName;
        private String templateVersion;
        public Builder() {}
        public Builder(GetTemplatesTemplate defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.changeSetId = defaults.changeSetId;
    	      this.description = defaults.description;
    	      this.id = defaults.id;
    	      this.shareType = defaults.shareType;
    	      this.stackGroupName = defaults.stackGroupName;
    	      this.stackId = defaults.stackId;
    	      this.tags = defaults.tags;
    	      this.templateBody = defaults.templateBody;
    	      this.templateId = defaults.templateId;
    	      this.templateName = defaults.templateName;
    	      this.templateVersion = defaults.templateVersion;
        }

        @CustomType.Setter
        public Builder changeSetId(String changeSetId) {
            if (changeSetId == null) {
              throw new MissingRequiredPropertyException("GetTemplatesTemplate", "changeSetId");
            }
            this.changeSetId = changeSetId;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetTemplatesTemplate", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetTemplatesTemplate", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder shareType(String shareType) {
            if (shareType == null) {
              throw new MissingRequiredPropertyException("GetTemplatesTemplate", "shareType");
            }
            this.shareType = shareType;
            return this;
        }
        @CustomType.Setter
        public Builder stackGroupName(String stackGroupName) {
            if (stackGroupName == null) {
              throw new MissingRequiredPropertyException("GetTemplatesTemplate", "stackGroupName");
            }
            this.stackGroupName = stackGroupName;
            return this;
        }
        @CustomType.Setter
        public Builder stackId(String stackId) {
            if (stackId == null) {
              throw new MissingRequiredPropertyException("GetTemplatesTemplate", "stackId");
            }
            this.stackId = stackId;
            return this;
        }
        @CustomType.Setter
        public Builder tags(Map<String,Object> tags) {
            if (tags == null) {
              throw new MissingRequiredPropertyException("GetTemplatesTemplate", "tags");
            }
            this.tags = tags;
            return this;
        }
        @CustomType.Setter
        public Builder templateBody(String templateBody) {
            if (templateBody == null) {
              throw new MissingRequiredPropertyException("GetTemplatesTemplate", "templateBody");
            }
            this.templateBody = templateBody;
            return this;
        }
        @CustomType.Setter
        public Builder templateId(String templateId) {
            if (templateId == null) {
              throw new MissingRequiredPropertyException("GetTemplatesTemplate", "templateId");
            }
            this.templateId = templateId;
            return this;
        }
        @CustomType.Setter
        public Builder templateName(String templateName) {
            if (templateName == null) {
              throw new MissingRequiredPropertyException("GetTemplatesTemplate", "templateName");
            }
            this.templateName = templateName;
            return this;
        }
        @CustomType.Setter
        public Builder templateVersion(String templateVersion) {
            if (templateVersion == null) {
              throw new MissingRequiredPropertyException("GetTemplatesTemplate", "templateVersion");
            }
            this.templateVersion = templateVersion;
            return this;
        }
        public GetTemplatesTemplate build() {
            final var _resultValue = new GetTemplatesTemplate();
            _resultValue.changeSetId = changeSetId;
            _resultValue.description = description;
            _resultValue.id = id;
            _resultValue.shareType = shareType;
            _resultValue.stackGroupName = stackGroupName;
            _resultValue.stackId = stackId;
            _resultValue.tags = tags;
            _resultValue.templateBody = templateBody;
            _resultValue.templateId = templateId;
            _resultValue.templateName = templateName;
            _resultValue.templateVersion = templateVersion;
            return _resultValue;
        }
    }
}
