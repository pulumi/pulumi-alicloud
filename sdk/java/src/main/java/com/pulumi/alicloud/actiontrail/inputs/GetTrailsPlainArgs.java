// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.actiontrail.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetTrailsPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetTrailsPlainArgs Empty = new GetTrailsPlainArgs();

    /**
     * A list of ActionTrail Trail IDs. It is the same as trail name.
     * 
     */
    @Import(name="ids")
    private @Nullable List<String> ids;

    /**
     * @return A list of ActionTrail Trail IDs. It is the same as trail name.
     * 
     */
    public Optional<List<String>> ids() {
        return Optional.ofNullable(this.ids);
    }

    /**
     * Whether to show organization tracking. Default to `false`.
     * 
     */
    @Import(name="includeOrganizationTrail")
    private @Nullable Boolean includeOrganizationTrail;

    /**
     * @return Whether to show organization tracking. Default to `false`.
     * 
     */
    public Optional<Boolean> includeOrganizationTrail() {
        return Optional.ofNullable(this.includeOrganizationTrail);
    }

    /**
     * Whether to show shadow tracking. Default to `false`.
     * 
     */
    @Import(name="includeShadowTrails")
    private @Nullable Boolean includeShadowTrails;

    /**
     * @return Whether to show shadow tracking. Default to `false`.
     * 
     */
    public Optional<Boolean> includeShadowTrails() {
        return Optional.ofNullable(this.includeShadowTrails);
    }

    /**
     * A regex string to filter results by trail name.
     * 
     */
    @Import(name="nameRegex")
    private @Nullable String nameRegex;

    /**
     * @return A regex string to filter results by trail name.
     * 
     */
    public Optional<String> nameRegex() {
        return Optional.ofNullable(this.nameRegex);
    }

    /**
     * File name where to save data source results (after running `pulumi preview`).
     * 
     */
    @Import(name="outputFile")
    private @Nullable String outputFile;

    /**
     * @return File name where to save data source results (after running `pulumi preview`).
     * 
     */
    public Optional<String> outputFile() {
        return Optional.ofNullable(this.outputFile);
    }

    /**
     * Filter the results by status of the ActionTrail Trail. Valid values: `Disable`, `Enable`, `Fresh`.
     * 
     */
    @Import(name="status")
    private @Nullable String status;

    /**
     * @return Filter the results by status of the ActionTrail Trail. Valid values: `Disable`, `Enable`, `Fresh`.
     * 
     */
    public Optional<String> status() {
        return Optional.ofNullable(this.status);
    }

    private GetTrailsPlainArgs() {}

    private GetTrailsPlainArgs(GetTrailsPlainArgs $) {
        this.ids = $.ids;
        this.includeOrganizationTrail = $.includeOrganizationTrail;
        this.includeShadowTrails = $.includeShadowTrails;
        this.nameRegex = $.nameRegex;
        this.outputFile = $.outputFile;
        this.status = $.status;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetTrailsPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetTrailsPlainArgs $;

        public Builder() {
            $ = new GetTrailsPlainArgs();
        }

        public Builder(GetTrailsPlainArgs defaults) {
            $ = new GetTrailsPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param ids A list of ActionTrail Trail IDs. It is the same as trail name.
         * 
         * @return builder
         * 
         */
        public Builder ids(@Nullable List<String> ids) {
            $.ids = ids;
            return this;
        }

        /**
         * @param ids A list of ActionTrail Trail IDs. It is the same as trail name.
         * 
         * @return builder
         * 
         */
        public Builder ids(String... ids) {
            return ids(List.of(ids));
        }

        /**
         * @param includeOrganizationTrail Whether to show organization tracking. Default to `false`.
         * 
         * @return builder
         * 
         */
        public Builder includeOrganizationTrail(@Nullable Boolean includeOrganizationTrail) {
            $.includeOrganizationTrail = includeOrganizationTrail;
            return this;
        }

        /**
         * @param includeShadowTrails Whether to show shadow tracking. Default to `false`.
         * 
         * @return builder
         * 
         */
        public Builder includeShadowTrails(@Nullable Boolean includeShadowTrails) {
            $.includeShadowTrails = includeShadowTrails;
            return this;
        }

        /**
         * @param nameRegex A regex string to filter results by trail name.
         * 
         * @return builder
         * 
         */
        public Builder nameRegex(@Nullable String nameRegex) {
            $.nameRegex = nameRegex;
            return this;
        }

        /**
         * @param outputFile File name where to save data source results (after running `pulumi preview`).
         * 
         * @return builder
         * 
         */
        public Builder outputFile(@Nullable String outputFile) {
            $.outputFile = outputFile;
            return this;
        }

        /**
         * @param status Filter the results by status of the ActionTrail Trail. Valid values: `Disable`, `Enable`, `Fresh`.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable String status) {
            $.status = status;
            return this;
        }

        public GetTrailsPlainArgs build() {
            return $;
        }
    }

}
