// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.dms.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetEnterpriseUsersUser {
    /**
     * @return The Alibaba Cloud unique ID (UID) of the user.
     * 
     */
    private String id;
    /**
     * @return The DingTalk number or mobile number of the user.
     * 
     */
    private String mobile;
    /**
     * @return The nickname of the user.
     * 
     */
    private String nickName;
    /**
     * @return The Alibaba Cloud unique ID (UID) of the parent account if the user corresponds to a Resource Access Management (RAM) user.
     * 
     */
    private Integer parentUid;
    /**
     * @return The list ids of the role that the user plays.
     * 
     */
    private List<Integer> roleIds;
    /**
     * @return The list names of the role that he user plays.
     * 
     */
    private List<String> roleNames;
    /**
     * @return The status of the user.
     * 
     */
    private String status;
    private String uid;
    /**
     * @return The ID of the user.
     * 
     */
    private String userId;
    /**
     * @return The nickname of the user.
     * 
     */
    private String userName;

    private GetEnterpriseUsersUser() {}
    /**
     * @return The Alibaba Cloud unique ID (UID) of the user.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The DingTalk number or mobile number of the user.
     * 
     */
    public String mobile() {
        return this.mobile;
    }
    /**
     * @return The nickname of the user.
     * 
     */
    public String nickName() {
        return this.nickName;
    }
    /**
     * @return The Alibaba Cloud unique ID (UID) of the parent account if the user corresponds to a Resource Access Management (RAM) user.
     * 
     */
    public Integer parentUid() {
        return this.parentUid;
    }
    /**
     * @return The list ids of the role that the user plays.
     * 
     */
    public List<Integer> roleIds() {
        return this.roleIds;
    }
    /**
     * @return The list names of the role that he user plays.
     * 
     */
    public List<String> roleNames() {
        return this.roleNames;
    }
    /**
     * @return The status of the user.
     * 
     */
    public String status() {
        return this.status;
    }
    public String uid() {
        return this.uid;
    }
    /**
     * @return The ID of the user.
     * 
     */
    public String userId() {
        return this.userId;
    }
    /**
     * @return The nickname of the user.
     * 
     */
    public String userName() {
        return this.userName;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetEnterpriseUsersUser defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String id;
        private String mobile;
        private String nickName;
        private Integer parentUid;
        private List<Integer> roleIds;
        private List<String> roleNames;
        private String status;
        private String uid;
        private String userId;
        private String userName;
        public Builder() {}
        public Builder(GetEnterpriseUsersUser defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.id = defaults.id;
    	      this.mobile = defaults.mobile;
    	      this.nickName = defaults.nickName;
    	      this.parentUid = defaults.parentUid;
    	      this.roleIds = defaults.roleIds;
    	      this.roleNames = defaults.roleNames;
    	      this.status = defaults.status;
    	      this.uid = defaults.uid;
    	      this.userId = defaults.userId;
    	      this.userName = defaults.userName;
        }

        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetEnterpriseUsersUser", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder mobile(String mobile) {
            if (mobile == null) {
              throw new MissingRequiredPropertyException("GetEnterpriseUsersUser", "mobile");
            }
            this.mobile = mobile;
            return this;
        }
        @CustomType.Setter
        public Builder nickName(String nickName) {
            if (nickName == null) {
              throw new MissingRequiredPropertyException("GetEnterpriseUsersUser", "nickName");
            }
            this.nickName = nickName;
            return this;
        }
        @CustomType.Setter
        public Builder parentUid(Integer parentUid) {
            if (parentUid == null) {
              throw new MissingRequiredPropertyException("GetEnterpriseUsersUser", "parentUid");
            }
            this.parentUid = parentUid;
            return this;
        }
        @CustomType.Setter
        public Builder roleIds(List<Integer> roleIds) {
            if (roleIds == null) {
              throw new MissingRequiredPropertyException("GetEnterpriseUsersUser", "roleIds");
            }
            this.roleIds = roleIds;
            return this;
        }
        public Builder roleIds(Integer... roleIds) {
            return roleIds(List.of(roleIds));
        }
        @CustomType.Setter
        public Builder roleNames(List<String> roleNames) {
            if (roleNames == null) {
              throw new MissingRequiredPropertyException("GetEnterpriseUsersUser", "roleNames");
            }
            this.roleNames = roleNames;
            return this;
        }
        public Builder roleNames(String... roleNames) {
            return roleNames(List.of(roleNames));
        }
        @CustomType.Setter
        public Builder status(String status) {
            if (status == null) {
              throw new MissingRequiredPropertyException("GetEnterpriseUsersUser", "status");
            }
            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder uid(String uid) {
            if (uid == null) {
              throw new MissingRequiredPropertyException("GetEnterpriseUsersUser", "uid");
            }
            this.uid = uid;
            return this;
        }
        @CustomType.Setter
        public Builder userId(String userId) {
            if (userId == null) {
              throw new MissingRequiredPropertyException("GetEnterpriseUsersUser", "userId");
            }
            this.userId = userId;
            return this;
        }
        @CustomType.Setter
        public Builder userName(String userName) {
            if (userName == null) {
              throw new MissingRequiredPropertyException("GetEnterpriseUsersUser", "userName");
            }
            this.userName = userName;
            return this;
        }
        public GetEnterpriseUsersUser build() {
            final var _resultValue = new GetEnterpriseUsersUser();
            _resultValue.id = id;
            _resultValue.mobile = mobile;
            _resultValue.nickName = nickName;
            _resultValue.parentUid = parentUid;
            _resultValue.roleIds = roleIds;
            _resultValue.roleNames = roleNames;
            _resultValue.status = status;
            _resultValue.uid = uid;
            _resultValue.userId = userId;
            _resultValue.userName = userName;
            return _resultValue;
        }
    }
}
