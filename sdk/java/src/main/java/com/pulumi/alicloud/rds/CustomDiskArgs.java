// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.rds;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CustomDiskArgs extends com.pulumi.resources.ResourceArgs {

    public static final CustomDiskArgs Empty = new CustomDiskArgs();

    /**
     * Whether to pay automatically. Value range:
     * 
     */
    @Import(name="autoPay")
    private @Nullable Output<Boolean> autoPay;

    /**
     * @return Whether to pay automatically. Value range:
     * 
     */
    public Optional<Output<Boolean>> autoPay() {
        return Optional.ofNullable(this.autoPay);
    }

    /**
     * Whether to automatically renew. This parameter is passed in only when you create a data disk. Valid values:
     * 
     */
    @Import(name="autoRenew")
    private @Nullable Output<Boolean> autoRenew;

    /**
     * @return Whether to automatically renew. This parameter is passed in only when you create a data disk. Valid values:
     * 
     */
    public Optional<Output<Boolean>> autoRenew() {
        return Optional.ofNullable(this.autoRenew);
    }

    /**
     * The disk description. It must be 2 to 256 characters in length and cannot start with &#39;http:// &#39;or &#39;https.
     * Default value: empty.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The disk description. It must be 2 to 256 characters in length and cannot start with &#39;http:// &#39;or &#39;https.
     * Default value: empty.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The type of the data disk. Value range:
     * 
     */
    @Import(name="diskCategory", required=true)
    private Output<String> diskCategory;

    /**
     * @return The type of the data disk. Value range:
     * 
     */
    public Output<String> diskCategory() {
        return this.diskCategory;
    }

    /**
     * The disk name. It can be 2 to 128 characters in length. It supports letters in Unicode (including English, Chinese, and numbers). Can contain a colon (:), an underscore (_), a period (.), or a dash (-).
     * Default value: empty.
     * 
     */
    @Import(name="diskName")
    private @Nullable Output<String> diskName;

    /**
     * @return The disk name. It can be 2 to 128 characters in length. It supports letters in Unicode (including English, Chinese, and numbers). Can contain a colon (:), an underscore (_), a period (.), or a dash (-).
     * Default value: empty.
     * 
     */
    public Optional<Output<String>> diskName() {
        return Optional.ofNullable(this.diskName);
    }

    /**
     * Whether to pre-check the instance creation operation. Valid values:
     * 
     */
    @Import(name="dryRun")
    private @Nullable Output<Boolean> dryRun;

    /**
     * @return Whether to pre-check the instance creation operation. Valid values:
     * 
     */
    public Optional<Output<Boolean>> dryRun() {
        return Optional.ofNullable(this.dryRun);
    }

    /**
     * The Payment type. Only `Postpaid`: Pay-As-You-Go is supported.
     * 
     */
    @Import(name="instanceChargeType")
    private @Nullable Output<String> instanceChargeType;

    /**
     * @return The Payment type. Only `Postpaid`: Pay-As-You-Go is supported.
     * 
     */
    public Optional<Output<String>> instanceChargeType() {
        return Optional.ofNullable(this.instanceChargeType);
    }

    /**
     * When creating an ESSD cloud disk, set the performance level of the disk. Value range:
     * - `PL0`: The maximum random read/write IOPS 10000 for a single disk.
     * - `PL1` (default): The maximum number of random read/write IOPS 50000 for a single disk.
     * - `PL2`: maximum random read/write IOPS 100000 for a single disk.
     * - `PL3`: The maximum random read/write IOPS 1 million for a single disk.
     * 
     * For more information about how to select an ESSD performance level, see ESSD cloud disk.
     * 
     */
    @Import(name="performanceLevel")
    private @Nullable Output<String> performanceLevel;

    /**
     * @return When creating an ESSD cloud disk, set the performance level of the disk. Value range:
     * - `PL0`: The maximum random read/write IOPS 10000 for a single disk.
     * - `PL1` (default): The maximum number of random read/write IOPS 50000 for a single disk.
     * - `PL2`: maximum random read/write IOPS 100000 for a single disk.
     * - `PL3`: The maximum random read/write IOPS 1 million for a single disk.
     * 
     * For more information about how to select an ESSD performance level, see ESSD cloud disk.
     * 
     */
    public Optional<Output<String>> performanceLevel() {
        return Optional.ofNullable(this.performanceLevel);
    }

    /**
     * Reserved parameters, no need to fill in.
     * 
     */
    @Import(name="period")
    private @Nullable Output<Integer> period;

    /**
     * @return Reserved parameters, no need to fill in.
     * 
     */
    public Optional<Output<Integer>> period() {
        return Optional.ofNullable(this.period);
    }

    /**
     * Reserved parameters, no need to fill in.
     * 
     */
    @Import(name="periodUnit")
    private @Nullable Output<String> periodUnit;

    /**
     * @return Reserved parameters, no need to fill in.
     * 
     */
    public Optional<Output<String>> periodUnit() {
        return Optional.ofNullable(this.periodUnit);
    }

    /**
     * Capacity size. Unit: GiB. You must pass in a parameter value for this parameter. Value range:
     * 
     */
    @Import(name="size", required=true)
    private Output<Integer> size;

    /**
     * @return Capacity size. Unit: GiB. You must pass in a parameter value for this parameter. Value range:
     * 
     */
    public Output<Integer> size() {
        return this.size;
    }

    /**
     * The snapshot used to create the cloud disk. Snapshots made on or before July 15, 2013 cannot be used to create cloud disks. The &#39;SnapshotId&#39; parameter and the &#39;Size&#39; parameter have the following limitations:
     * - If the snapshot capacity corresponding to the &#39;SnapshotId&#39; parameter is greater than the set &#39;Size&#39; parameter value, the actual size of the cloud disk created is the size of the specified snapshot.
     * - If the snapshot capacity corresponding to the &#39;SnapshotId&#39; parameter is less than the set &#39;Size&#39; parameter value, the size of the cloud disk created is the specified &#39;Size&#39; parameter value.
     * - Snapshots are not supported for creating elastic temporary disks.
     * 
     */
    @Import(name="snapshotId")
    private @Nullable Output<String> snapshotId;

    /**
     * @return The snapshot used to create the cloud disk. Snapshots made on or before July 15, 2013 cannot be used to create cloud disks. The &#39;SnapshotId&#39; parameter and the &#39;Size&#39; parameter have the following limitations:
     * - If the snapshot capacity corresponding to the &#39;SnapshotId&#39; parameter is greater than the set &#39;Size&#39; parameter value, the actual size of the cloud disk created is the size of the specified snapshot.
     * - If the snapshot capacity corresponding to the &#39;SnapshotId&#39; parameter is less than the set &#39;Size&#39; parameter value, the size of the cloud disk created is the specified &#39;Size&#39; parameter value.
     * - Snapshots are not supported for creating elastic temporary disks.
     * 
     */
    public Optional<Output<String>> snapshotId() {
        return Optional.ofNullable(this.snapshotId);
    }

    /**
     * The method of expanding the disk. Value range:
     * offline (default): offline expansion. After the expansion, the instance must be restarted to take effect.
     * online: online expansion, which can be completed without restarting the instance.
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return The method of expanding the disk. Value range:
     * offline (default): offline expansion. After the expansion, the instance must be restarted to take effect.
     * online: online expansion, which can be completed without restarting the instance.
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    /**
     * The zone ID.
     * 
     */
    @Import(name="zoneId", required=true)
    private Output<String> zoneId;

    /**
     * @return The zone ID.
     * 
     */
    public Output<String> zoneId() {
        return this.zoneId;
    }

    private CustomDiskArgs() {}

    private CustomDiskArgs(CustomDiskArgs $) {
        this.autoPay = $.autoPay;
        this.autoRenew = $.autoRenew;
        this.description = $.description;
        this.diskCategory = $.diskCategory;
        this.diskName = $.diskName;
        this.dryRun = $.dryRun;
        this.instanceChargeType = $.instanceChargeType;
        this.performanceLevel = $.performanceLevel;
        this.period = $.period;
        this.periodUnit = $.periodUnit;
        this.size = $.size;
        this.snapshotId = $.snapshotId;
        this.type = $.type;
        this.zoneId = $.zoneId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CustomDiskArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CustomDiskArgs $;

        public Builder() {
            $ = new CustomDiskArgs();
        }

        public Builder(CustomDiskArgs defaults) {
            $ = new CustomDiskArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param autoPay Whether to pay automatically. Value range:
         * 
         * @return builder
         * 
         */
        public Builder autoPay(@Nullable Output<Boolean> autoPay) {
            $.autoPay = autoPay;
            return this;
        }

        /**
         * @param autoPay Whether to pay automatically. Value range:
         * 
         * @return builder
         * 
         */
        public Builder autoPay(Boolean autoPay) {
            return autoPay(Output.of(autoPay));
        }

        /**
         * @param autoRenew Whether to automatically renew. This parameter is passed in only when you create a data disk. Valid values:
         * 
         * @return builder
         * 
         */
        public Builder autoRenew(@Nullable Output<Boolean> autoRenew) {
            $.autoRenew = autoRenew;
            return this;
        }

        /**
         * @param autoRenew Whether to automatically renew. This parameter is passed in only when you create a data disk. Valid values:
         * 
         * @return builder
         * 
         */
        public Builder autoRenew(Boolean autoRenew) {
            return autoRenew(Output.of(autoRenew));
        }

        /**
         * @param description The disk description. It must be 2 to 256 characters in length and cannot start with &#39;http:// &#39;or &#39;https.
         * Default value: empty.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The disk description. It must be 2 to 256 characters in length and cannot start with &#39;http:// &#39;or &#39;https.
         * Default value: empty.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param diskCategory The type of the data disk. Value range:
         * 
         * @return builder
         * 
         */
        public Builder diskCategory(Output<String> diskCategory) {
            $.diskCategory = diskCategory;
            return this;
        }

        /**
         * @param diskCategory The type of the data disk. Value range:
         * 
         * @return builder
         * 
         */
        public Builder diskCategory(String diskCategory) {
            return diskCategory(Output.of(diskCategory));
        }

        /**
         * @param diskName The disk name. It can be 2 to 128 characters in length. It supports letters in Unicode (including English, Chinese, and numbers). Can contain a colon (:), an underscore (_), a period (.), or a dash (-).
         * Default value: empty.
         * 
         * @return builder
         * 
         */
        public Builder diskName(@Nullable Output<String> diskName) {
            $.diskName = diskName;
            return this;
        }

        /**
         * @param diskName The disk name. It can be 2 to 128 characters in length. It supports letters in Unicode (including English, Chinese, and numbers). Can contain a colon (:), an underscore (_), a period (.), or a dash (-).
         * Default value: empty.
         * 
         * @return builder
         * 
         */
        public Builder diskName(String diskName) {
            return diskName(Output.of(diskName));
        }

        /**
         * @param dryRun Whether to pre-check the instance creation operation. Valid values:
         * 
         * @return builder
         * 
         */
        public Builder dryRun(@Nullable Output<Boolean> dryRun) {
            $.dryRun = dryRun;
            return this;
        }

        /**
         * @param dryRun Whether to pre-check the instance creation operation. Valid values:
         * 
         * @return builder
         * 
         */
        public Builder dryRun(Boolean dryRun) {
            return dryRun(Output.of(dryRun));
        }

        /**
         * @param instanceChargeType The Payment type. Only `Postpaid`: Pay-As-You-Go is supported.
         * 
         * @return builder
         * 
         */
        public Builder instanceChargeType(@Nullable Output<String> instanceChargeType) {
            $.instanceChargeType = instanceChargeType;
            return this;
        }

        /**
         * @param instanceChargeType The Payment type. Only `Postpaid`: Pay-As-You-Go is supported.
         * 
         * @return builder
         * 
         */
        public Builder instanceChargeType(String instanceChargeType) {
            return instanceChargeType(Output.of(instanceChargeType));
        }

        /**
         * @param performanceLevel When creating an ESSD cloud disk, set the performance level of the disk. Value range:
         * - `PL0`: The maximum random read/write IOPS 10000 for a single disk.
         * - `PL1` (default): The maximum number of random read/write IOPS 50000 for a single disk.
         * - `PL2`: maximum random read/write IOPS 100000 for a single disk.
         * - `PL3`: The maximum random read/write IOPS 1 million for a single disk.
         * 
         * For more information about how to select an ESSD performance level, see ESSD cloud disk.
         * 
         * @return builder
         * 
         */
        public Builder performanceLevel(@Nullable Output<String> performanceLevel) {
            $.performanceLevel = performanceLevel;
            return this;
        }

        /**
         * @param performanceLevel When creating an ESSD cloud disk, set the performance level of the disk. Value range:
         * - `PL0`: The maximum random read/write IOPS 10000 for a single disk.
         * - `PL1` (default): The maximum number of random read/write IOPS 50000 for a single disk.
         * - `PL2`: maximum random read/write IOPS 100000 for a single disk.
         * - `PL3`: The maximum random read/write IOPS 1 million for a single disk.
         * 
         * For more information about how to select an ESSD performance level, see ESSD cloud disk.
         * 
         * @return builder
         * 
         */
        public Builder performanceLevel(String performanceLevel) {
            return performanceLevel(Output.of(performanceLevel));
        }

        /**
         * @param period Reserved parameters, no need to fill in.
         * 
         * @return builder
         * 
         */
        public Builder period(@Nullable Output<Integer> period) {
            $.period = period;
            return this;
        }

        /**
         * @param period Reserved parameters, no need to fill in.
         * 
         * @return builder
         * 
         */
        public Builder period(Integer period) {
            return period(Output.of(period));
        }

        /**
         * @param periodUnit Reserved parameters, no need to fill in.
         * 
         * @return builder
         * 
         */
        public Builder periodUnit(@Nullable Output<String> periodUnit) {
            $.periodUnit = periodUnit;
            return this;
        }

        /**
         * @param periodUnit Reserved parameters, no need to fill in.
         * 
         * @return builder
         * 
         */
        public Builder periodUnit(String periodUnit) {
            return periodUnit(Output.of(periodUnit));
        }

        /**
         * @param size Capacity size. Unit: GiB. You must pass in a parameter value for this parameter. Value range:
         * 
         * @return builder
         * 
         */
        public Builder size(Output<Integer> size) {
            $.size = size;
            return this;
        }

        /**
         * @param size Capacity size. Unit: GiB. You must pass in a parameter value for this parameter. Value range:
         * 
         * @return builder
         * 
         */
        public Builder size(Integer size) {
            return size(Output.of(size));
        }

        /**
         * @param snapshotId The snapshot used to create the cloud disk. Snapshots made on or before July 15, 2013 cannot be used to create cloud disks. The &#39;SnapshotId&#39; parameter and the &#39;Size&#39; parameter have the following limitations:
         * - If the snapshot capacity corresponding to the &#39;SnapshotId&#39; parameter is greater than the set &#39;Size&#39; parameter value, the actual size of the cloud disk created is the size of the specified snapshot.
         * - If the snapshot capacity corresponding to the &#39;SnapshotId&#39; parameter is less than the set &#39;Size&#39; parameter value, the size of the cloud disk created is the specified &#39;Size&#39; parameter value.
         * - Snapshots are not supported for creating elastic temporary disks.
         * 
         * @return builder
         * 
         */
        public Builder snapshotId(@Nullable Output<String> snapshotId) {
            $.snapshotId = snapshotId;
            return this;
        }

        /**
         * @param snapshotId The snapshot used to create the cloud disk. Snapshots made on or before July 15, 2013 cannot be used to create cloud disks. The &#39;SnapshotId&#39; parameter and the &#39;Size&#39; parameter have the following limitations:
         * - If the snapshot capacity corresponding to the &#39;SnapshotId&#39; parameter is greater than the set &#39;Size&#39; parameter value, the actual size of the cloud disk created is the size of the specified snapshot.
         * - If the snapshot capacity corresponding to the &#39;SnapshotId&#39; parameter is less than the set &#39;Size&#39; parameter value, the size of the cloud disk created is the specified &#39;Size&#39; parameter value.
         * - Snapshots are not supported for creating elastic temporary disks.
         * 
         * @return builder
         * 
         */
        public Builder snapshotId(String snapshotId) {
            return snapshotId(Output.of(snapshotId));
        }

        /**
         * @param type The method of expanding the disk. Value range:
         * offline (default): offline expansion. After the expansion, the instance must be restarted to take effect.
         * online: online expansion, which can be completed without restarting the instance.
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type The method of expanding the disk. Value range:
         * offline (default): offline expansion. After the expansion, the instance must be restarted to take effect.
         * online: online expansion, which can be completed without restarting the instance.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param zoneId The zone ID.
         * 
         * @return builder
         * 
         */
        public Builder zoneId(Output<String> zoneId) {
            $.zoneId = zoneId;
            return this;
        }

        /**
         * @param zoneId The zone ID.
         * 
         * @return builder
         * 
         */
        public Builder zoneId(String zoneId) {
            return zoneId(Output.of(zoneId));
        }

        public CustomDiskArgs build() {
            if ($.diskCategory == null) {
                throw new MissingRequiredPropertyException("CustomDiskArgs", "diskCategory");
            }
            if ($.size == null) {
                throw new MissingRequiredPropertyException("CustomDiskArgs", "size");
            }
            if ($.zoneId == null) {
                throw new MissingRequiredPropertyException("CustomDiskArgs", "zoneId");
            }
            return $;
        }
    }

}
