// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.cs.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class NodePoolDataDiskArgs extends com.pulumi.resources.ResourceArgs {

    public static final NodePoolDataDiskArgs Empty = new NodePoolDataDiskArgs();

    /**
     * Whether to automatically mount the data disk. Valid values: true and false.
     * 
     */
    @Import(name="autoFormat")
    private @Nullable Output<String> autoFormat;

    /**
     * @return Whether to automatically mount the data disk. Valid values: true and false.
     * 
     */
    public Optional<Output<String>> autoFormat() {
        return Optional.ofNullable(this.autoFormat);
    }

    /**
     * The ID of the automatic snapshot policy that you want to apply to the system disk.
     * 
     */
    @Import(name="autoSnapshotPolicyId")
    private @Nullable Output<String> autoSnapshotPolicyId;

    /**
     * @return The ID of the automatic snapshot policy that you want to apply to the system disk.
     * 
     */
    public Optional<Output<String>> autoSnapshotPolicyId() {
        return Optional.ofNullable(this.autoSnapshotPolicyId);
    }

    /**
     * Whether the data disk is enabled with Burst (performance Burst). This is configured when the disk type is cloud_auto.
     * 
     */
    @Import(name="burstingEnabled")
    private @Nullable Output<Boolean> burstingEnabled;

    /**
     * @return Whether the data disk is enabled with Burst (performance Burst). This is configured when the disk type is cloud_auto.
     * 
     */
    public Optional<Output<Boolean>> burstingEnabled() {
        return Optional.ofNullable(this.burstingEnabled);
    }

    /**
     * The type of data disk. Default value: `cloudEfficiency`. Valid values:
     * 
     */
    @Import(name="category")
    private @Nullable Output<String> category;

    /**
     * @return The type of data disk. Default value: `cloudEfficiency`. Valid values:
     * 
     */
    public Optional<Output<String>> category() {
        return Optional.ofNullable(this.category);
    }

    /**
     * The mount target of data disk N. Valid values of N: 1 to 16. If you do not specify this parameter, the system automatically assigns a mount target when Auto Scaling creates ECS instances. The name of the mount target ranges from /dev/xvdb to /dev/xvdz.
     * 
     */
    @Import(name="device")
    private @Nullable Output<String> device;

    /**
     * @return The mount target of data disk N. Valid values of N: 1 to 16. If you do not specify this parameter, the system automatically assigns a mount target when Auto Scaling creates ECS instances. The name of the mount target ranges from /dev/xvdb to /dev/xvdz.
     * 
     */
    public Optional<Output<String>> device() {
        return Optional.ofNullable(this.device);
    }

    /**
     * Specifies whether to encrypt data disks. Valid values: true and false. Default to `false`.
     * 
     */
    @Import(name="encrypted")
    private @Nullable Output<String> encrypted;

    /**
     * @return Specifies whether to encrypt data disks. Valid values: true and false. Default to `false`.
     * 
     */
    public Optional<Output<String>> encrypted() {
        return Optional.ofNullable(this.encrypted);
    }

    /**
     * The type of the mounted file system. Works when autoFormat is true. Optional value: `ext4`, `xfs`.
     * 
     */
    @Import(name="fileSystem")
    private @Nullable Output<String> fileSystem;

    /**
     * @return The type of the mounted file system. Works when autoFormat is true. Optional value: `ext4`, `xfs`.
     * 
     */
    public Optional<Output<String>> fileSystem() {
        return Optional.ofNullable(this.fileSystem);
    }

    /**
     * The kms key id used to encrypt the data disk. It takes effect when `encrypted` is true.
     * 
     */
    @Import(name="kmsKeyId")
    private @Nullable Output<String> kmsKeyId;

    /**
     * @return The kms key id used to encrypt the data disk. It takes effect when `encrypted` is true.
     * 
     */
    public Optional<Output<String>> kmsKeyId() {
        return Optional.ofNullable(this.kmsKeyId);
    }

    /**
     * The Mount path. Works when autoFormat is true.
     * 
     */
    @Import(name="mountTarget")
    private @Nullable Output<String> mountTarget;

    /**
     * @return The Mount path. Works when autoFormat is true.
     * 
     */
    public Optional<Output<String>> mountTarget() {
        return Optional.ofNullable(this.mountTarget);
    }

    /**
     * The length is 2~128 English or Chinese characters. It must start with an uppercase or lowr letter or a Chinese character and cannot start with http:// or https. Can contain numbers, colons (:), underscores (_), or dashes (-). It will be overwritten if autoFormat is set.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The length is 2~128 English or Chinese characters. It must start with an uppercase or lowr letter or a Chinese character and cannot start with http:// or https. Can contain numbers, colons (:), underscores (_), or dashes (-). It will be overwritten if autoFormat is set.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Worker node data disk performance level, when `category` values `cloudEssd`, the optional values are `PL0`, `PL1`, `PL2` or `PL3`, but the specific performance level is related to the disk capacity. For more information, see [Enhanced SSDs](https://www.alibabacloud.com/help/doc-detail/122389.htm). Default is `PL1`.
     * 
     */
    @Import(name="performanceLevel")
    private @Nullable Output<String> performanceLevel;

    /**
     * @return Worker node data disk performance level, when `category` values `cloudEssd`, the optional values are `PL0`, `PL1`, `PL2` or `PL3`, but the specific performance level is related to the disk capacity. For more information, see [Enhanced SSDs](https://www.alibabacloud.com/help/doc-detail/122389.htm). Default is `PL1`.
     * 
     */
    public Optional<Output<String>> performanceLevel() {
        return Optional.ofNullable(this.performanceLevel);
    }

    /**
     * The read/write IOPS preconfigured for the data disk, which is configured when the disk type is cloud_auto.
     * 
     */
    @Import(name="provisionedIops")
    private @Nullable Output<Integer> provisionedIops;

    /**
     * @return The read/write IOPS preconfigured for the data disk, which is configured when the disk type is cloud_auto.
     * 
     */
    public Optional<Output<Integer>> provisionedIops() {
        return Optional.ofNullable(this.provisionedIops);
    }

    /**
     * The size of a data disk, Its valid value range [40~32768] in GB. Default to `40`.
     * 
     */
    @Import(name="size")
    private @Nullable Output<Integer> size;

    /**
     * @return The size of a data disk, Its valid value range [40~32768] in GB. Default to `40`.
     * 
     */
    public Optional<Output<Integer>> size() {
        return Optional.ofNullable(this.size);
    }

    /**
     * The ID of the snapshot that you want to use to create data disk N. Valid values of N: 1 to 16. If you specify this parameter, DataDisk.N.Size is ignored. The size of the disk is the same as the size of the specified snapshot. If you specify a snapshot that is created on or before July 15, 2013, the operation fails and InvalidSnapshot.TooOld is returned.
     * 
     */
    @Import(name="snapshotId")
    private @Nullable Output<String> snapshotId;

    /**
     * @return The ID of the snapshot that you want to use to create data disk N. Valid values of N: 1 to 16. If you specify this parameter, DataDisk.N.Size is ignored. The size of the disk is the same as the size of the specified snapshot. If you specify a snapshot that is created on or before July 15, 2013, the operation fails and InvalidSnapshot.TooOld is returned.
     * 
     */
    public Optional<Output<String>> snapshotId() {
        return Optional.ofNullable(this.snapshotId);
    }

    private NodePoolDataDiskArgs() {}

    private NodePoolDataDiskArgs(NodePoolDataDiskArgs $) {
        this.autoFormat = $.autoFormat;
        this.autoSnapshotPolicyId = $.autoSnapshotPolicyId;
        this.burstingEnabled = $.burstingEnabled;
        this.category = $.category;
        this.device = $.device;
        this.encrypted = $.encrypted;
        this.fileSystem = $.fileSystem;
        this.kmsKeyId = $.kmsKeyId;
        this.mountTarget = $.mountTarget;
        this.name = $.name;
        this.performanceLevel = $.performanceLevel;
        this.provisionedIops = $.provisionedIops;
        this.size = $.size;
        this.snapshotId = $.snapshotId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NodePoolDataDiskArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NodePoolDataDiskArgs $;

        public Builder() {
            $ = new NodePoolDataDiskArgs();
        }

        public Builder(NodePoolDataDiskArgs defaults) {
            $ = new NodePoolDataDiskArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param autoFormat Whether to automatically mount the data disk. Valid values: true and false.
         * 
         * @return builder
         * 
         */
        public Builder autoFormat(@Nullable Output<String> autoFormat) {
            $.autoFormat = autoFormat;
            return this;
        }

        /**
         * @param autoFormat Whether to automatically mount the data disk. Valid values: true and false.
         * 
         * @return builder
         * 
         */
        public Builder autoFormat(String autoFormat) {
            return autoFormat(Output.of(autoFormat));
        }

        /**
         * @param autoSnapshotPolicyId The ID of the automatic snapshot policy that you want to apply to the system disk.
         * 
         * @return builder
         * 
         */
        public Builder autoSnapshotPolicyId(@Nullable Output<String> autoSnapshotPolicyId) {
            $.autoSnapshotPolicyId = autoSnapshotPolicyId;
            return this;
        }

        /**
         * @param autoSnapshotPolicyId The ID of the automatic snapshot policy that you want to apply to the system disk.
         * 
         * @return builder
         * 
         */
        public Builder autoSnapshotPolicyId(String autoSnapshotPolicyId) {
            return autoSnapshotPolicyId(Output.of(autoSnapshotPolicyId));
        }

        /**
         * @param burstingEnabled Whether the data disk is enabled with Burst (performance Burst). This is configured when the disk type is cloud_auto.
         * 
         * @return builder
         * 
         */
        public Builder burstingEnabled(@Nullable Output<Boolean> burstingEnabled) {
            $.burstingEnabled = burstingEnabled;
            return this;
        }

        /**
         * @param burstingEnabled Whether the data disk is enabled with Burst (performance Burst). This is configured when the disk type is cloud_auto.
         * 
         * @return builder
         * 
         */
        public Builder burstingEnabled(Boolean burstingEnabled) {
            return burstingEnabled(Output.of(burstingEnabled));
        }

        /**
         * @param category The type of data disk. Default value: `cloudEfficiency`. Valid values:
         * 
         * @return builder
         * 
         */
        public Builder category(@Nullable Output<String> category) {
            $.category = category;
            return this;
        }

        /**
         * @param category The type of data disk. Default value: `cloudEfficiency`. Valid values:
         * 
         * @return builder
         * 
         */
        public Builder category(String category) {
            return category(Output.of(category));
        }

        /**
         * @param device The mount target of data disk N. Valid values of N: 1 to 16. If you do not specify this parameter, the system automatically assigns a mount target when Auto Scaling creates ECS instances. The name of the mount target ranges from /dev/xvdb to /dev/xvdz.
         * 
         * @return builder
         * 
         */
        public Builder device(@Nullable Output<String> device) {
            $.device = device;
            return this;
        }

        /**
         * @param device The mount target of data disk N. Valid values of N: 1 to 16. If you do not specify this parameter, the system automatically assigns a mount target when Auto Scaling creates ECS instances. The name of the mount target ranges from /dev/xvdb to /dev/xvdz.
         * 
         * @return builder
         * 
         */
        public Builder device(String device) {
            return device(Output.of(device));
        }

        /**
         * @param encrypted Specifies whether to encrypt data disks. Valid values: true and false. Default to `false`.
         * 
         * @return builder
         * 
         */
        public Builder encrypted(@Nullable Output<String> encrypted) {
            $.encrypted = encrypted;
            return this;
        }

        /**
         * @param encrypted Specifies whether to encrypt data disks. Valid values: true and false. Default to `false`.
         * 
         * @return builder
         * 
         */
        public Builder encrypted(String encrypted) {
            return encrypted(Output.of(encrypted));
        }

        /**
         * @param fileSystem The type of the mounted file system. Works when autoFormat is true. Optional value: `ext4`, `xfs`.
         * 
         * @return builder
         * 
         */
        public Builder fileSystem(@Nullable Output<String> fileSystem) {
            $.fileSystem = fileSystem;
            return this;
        }

        /**
         * @param fileSystem The type of the mounted file system. Works when autoFormat is true. Optional value: `ext4`, `xfs`.
         * 
         * @return builder
         * 
         */
        public Builder fileSystem(String fileSystem) {
            return fileSystem(Output.of(fileSystem));
        }

        /**
         * @param kmsKeyId The kms key id used to encrypt the data disk. It takes effect when `encrypted` is true.
         * 
         * @return builder
         * 
         */
        public Builder kmsKeyId(@Nullable Output<String> kmsKeyId) {
            $.kmsKeyId = kmsKeyId;
            return this;
        }

        /**
         * @param kmsKeyId The kms key id used to encrypt the data disk. It takes effect when `encrypted` is true.
         * 
         * @return builder
         * 
         */
        public Builder kmsKeyId(String kmsKeyId) {
            return kmsKeyId(Output.of(kmsKeyId));
        }

        /**
         * @param mountTarget The Mount path. Works when autoFormat is true.
         * 
         * @return builder
         * 
         */
        public Builder mountTarget(@Nullable Output<String> mountTarget) {
            $.mountTarget = mountTarget;
            return this;
        }

        /**
         * @param mountTarget The Mount path. Works when autoFormat is true.
         * 
         * @return builder
         * 
         */
        public Builder mountTarget(String mountTarget) {
            return mountTarget(Output.of(mountTarget));
        }

        /**
         * @param name The length is 2~128 English or Chinese characters. It must start with an uppercase or lowr letter or a Chinese character and cannot start with http:// or https. Can contain numbers, colons (:), underscores (_), or dashes (-). It will be overwritten if autoFormat is set.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The length is 2~128 English or Chinese characters. It must start with an uppercase or lowr letter or a Chinese character and cannot start with http:// or https. Can contain numbers, colons (:), underscores (_), or dashes (-). It will be overwritten if autoFormat is set.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param performanceLevel Worker node data disk performance level, when `category` values `cloudEssd`, the optional values are `PL0`, `PL1`, `PL2` or `PL3`, but the specific performance level is related to the disk capacity. For more information, see [Enhanced SSDs](https://www.alibabacloud.com/help/doc-detail/122389.htm). Default is `PL1`.
         * 
         * @return builder
         * 
         */
        public Builder performanceLevel(@Nullable Output<String> performanceLevel) {
            $.performanceLevel = performanceLevel;
            return this;
        }

        /**
         * @param performanceLevel Worker node data disk performance level, when `category` values `cloudEssd`, the optional values are `PL0`, `PL1`, `PL2` or `PL3`, but the specific performance level is related to the disk capacity. For more information, see [Enhanced SSDs](https://www.alibabacloud.com/help/doc-detail/122389.htm). Default is `PL1`.
         * 
         * @return builder
         * 
         */
        public Builder performanceLevel(String performanceLevel) {
            return performanceLevel(Output.of(performanceLevel));
        }

        /**
         * @param provisionedIops The read/write IOPS preconfigured for the data disk, which is configured when the disk type is cloud_auto.
         * 
         * @return builder
         * 
         */
        public Builder provisionedIops(@Nullable Output<Integer> provisionedIops) {
            $.provisionedIops = provisionedIops;
            return this;
        }

        /**
         * @param provisionedIops The read/write IOPS preconfigured for the data disk, which is configured when the disk type is cloud_auto.
         * 
         * @return builder
         * 
         */
        public Builder provisionedIops(Integer provisionedIops) {
            return provisionedIops(Output.of(provisionedIops));
        }

        /**
         * @param size The size of a data disk, Its valid value range [40~32768] in GB. Default to `40`.
         * 
         * @return builder
         * 
         */
        public Builder size(@Nullable Output<Integer> size) {
            $.size = size;
            return this;
        }

        /**
         * @param size The size of a data disk, Its valid value range [40~32768] in GB. Default to `40`.
         * 
         * @return builder
         * 
         */
        public Builder size(Integer size) {
            return size(Output.of(size));
        }

        /**
         * @param snapshotId The ID of the snapshot that you want to use to create data disk N. Valid values of N: 1 to 16. If you specify this parameter, DataDisk.N.Size is ignored. The size of the disk is the same as the size of the specified snapshot. If you specify a snapshot that is created on or before July 15, 2013, the operation fails and InvalidSnapshot.TooOld is returned.
         * 
         * @return builder
         * 
         */
        public Builder snapshotId(@Nullable Output<String> snapshotId) {
            $.snapshotId = snapshotId;
            return this;
        }

        /**
         * @param snapshotId The ID of the snapshot that you want to use to create data disk N. Valid values of N: 1 to 16. If you specify this parameter, DataDisk.N.Size is ignored. The size of the disk is the same as the size of the specified snapshot. If you specify a snapshot that is created on or before July 15, 2013, the operation fails and InvalidSnapshot.TooOld is returned.
         * 
         * @return builder
         * 
         */
        public Builder snapshotId(String snapshotId) {
            return snapshotId(Output.of(snapshotId));
        }

        public NodePoolDataDiskArgs build() {
            return $;
        }
    }

}
