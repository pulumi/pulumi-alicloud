// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.gpdb;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AccountArgs extends com.pulumi.resources.ResourceArgs {

    public static final AccountArgs Empty = new AccountArgs();

    /**
     * The description of the account.
     * * Starts with a letter.
     * * Does not start with `http://` or `https://`.
     * * Contains letters, underscores (_), hyphens (-), or digits.
     * * Be 2 to 256 characters in length.
     * 
     */
    @Import(name="accountDescription")
    private @Nullable Output<String> accountDescription;

    /**
     * @return The description of the account.
     * * Starts with a letter.
     * * Does not start with `http://` or `https://`.
     * * Contains letters, underscores (_), hyphens (-), or digits.
     * * Be 2 to 256 characters in length.
     * 
     */
    public Optional<Output<String>> accountDescription() {
        return Optional.ofNullable(this.accountDescription);
    }

    /**
     * The name of the account. The account name must be unique and meet the following requirements:
     * * Starts with a letter.
     * * Contains only lowercase letters, digits, or underscores (_).
     * * Be up to 16 characters in length.
     * * Contains no reserved keywords.
     * 
     */
    @Import(name="accountName", required=true)
    private Output<String> accountName;

    /**
     * @return The name of the account. The account name must be unique and meet the following requirements:
     * * Starts with a letter.
     * * Contains only lowercase letters, digits, or underscores (_).
     * * Be up to 16 characters in length.
     * * Contains no reserved keywords.
     * 
     */
    public Output<String> accountName() {
        return this.accountName;
    }

    /**
     * The password of the account. The password must be 8 to 32 characters in length and contain at least three of the following character types: uppercase letters, lowercase letters, digits, and special characters. Special characters include `! @ # $ % ^ &amp; * ( ) _ + - =`.
     * 
     */
    @Import(name="accountPassword", required=true)
    private Output<String> accountPassword;

    /**
     * @return The password of the account. The password must be 8 to 32 characters in length and contain at least three of the following character types: uppercase letters, lowercase letters, digits, and special characters. Special characters include `! @ # $ % ^ &amp; * ( ) _ + - =`.
     * 
     */
    public Output<String> accountPassword() {
        return this.accountPassword;
    }

    /**
     * The ID of the instance.
     * 
     */
    @Import(name="dbInstanceId", required=true)
    private Output<String> dbInstanceId;

    /**
     * @return The ID of the instance.
     * 
     */
    public Output<String> dbInstanceId() {
        return this.dbInstanceId;
    }

    private AccountArgs() {}

    private AccountArgs(AccountArgs $) {
        this.accountDescription = $.accountDescription;
        this.accountName = $.accountName;
        this.accountPassword = $.accountPassword;
        this.dbInstanceId = $.dbInstanceId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AccountArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AccountArgs $;

        public Builder() {
            $ = new AccountArgs();
        }

        public Builder(AccountArgs defaults) {
            $ = new AccountArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accountDescription The description of the account.
         * * Starts with a letter.
         * * Does not start with `http://` or `https://`.
         * * Contains letters, underscores (_), hyphens (-), or digits.
         * * Be 2 to 256 characters in length.
         * 
         * @return builder
         * 
         */
        public Builder accountDescription(@Nullable Output<String> accountDescription) {
            $.accountDescription = accountDescription;
            return this;
        }

        /**
         * @param accountDescription The description of the account.
         * * Starts with a letter.
         * * Does not start with `http://` or `https://`.
         * * Contains letters, underscores (_), hyphens (-), or digits.
         * * Be 2 to 256 characters in length.
         * 
         * @return builder
         * 
         */
        public Builder accountDescription(String accountDescription) {
            return accountDescription(Output.of(accountDescription));
        }

        /**
         * @param accountName The name of the account. The account name must be unique and meet the following requirements:
         * * Starts with a letter.
         * * Contains only lowercase letters, digits, or underscores (_).
         * * Be up to 16 characters in length.
         * * Contains no reserved keywords.
         * 
         * @return builder
         * 
         */
        public Builder accountName(Output<String> accountName) {
            $.accountName = accountName;
            return this;
        }

        /**
         * @param accountName The name of the account. The account name must be unique and meet the following requirements:
         * * Starts with a letter.
         * * Contains only lowercase letters, digits, or underscores (_).
         * * Be up to 16 characters in length.
         * * Contains no reserved keywords.
         * 
         * @return builder
         * 
         */
        public Builder accountName(String accountName) {
            return accountName(Output.of(accountName));
        }

        /**
         * @param accountPassword The password of the account. The password must be 8 to 32 characters in length and contain at least three of the following character types: uppercase letters, lowercase letters, digits, and special characters. Special characters include `! @ # $ % ^ &amp; * ( ) _ + - =`.
         * 
         * @return builder
         * 
         */
        public Builder accountPassword(Output<String> accountPassword) {
            $.accountPassword = accountPassword;
            return this;
        }

        /**
         * @param accountPassword The password of the account. The password must be 8 to 32 characters in length and contain at least three of the following character types: uppercase letters, lowercase letters, digits, and special characters. Special characters include `! @ # $ % ^ &amp; * ( ) _ + - =`.
         * 
         * @return builder
         * 
         */
        public Builder accountPassword(String accountPassword) {
            return accountPassword(Output.of(accountPassword));
        }

        /**
         * @param dbInstanceId The ID of the instance.
         * 
         * @return builder
         * 
         */
        public Builder dbInstanceId(Output<String> dbInstanceId) {
            $.dbInstanceId = dbInstanceId;
            return this;
        }

        /**
         * @param dbInstanceId The ID of the instance.
         * 
         * @return builder
         * 
         */
        public Builder dbInstanceId(String dbInstanceId) {
            return dbInstanceId(Output.of(dbInstanceId));
        }

        public AccountArgs build() {
            if ($.accountName == null) {
                throw new MissingRequiredPropertyException("AccountArgs", "accountName");
            }
            if ($.accountPassword == null) {
                throw new MissingRequiredPropertyException("AccountArgs", "accountPassword");
            }
            if ($.dbInstanceId == null) {
                throw new MissingRequiredPropertyException("AccountArgs", "dbInstanceId");
            }
            return $;
        }
    }

}
