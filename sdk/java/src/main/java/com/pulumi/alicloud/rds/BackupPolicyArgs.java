// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.rds;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class BackupPolicyArgs extends com.pulumi.resources.ResourceArgs {

    public static final BackupPolicyArgs Empty = new BackupPolicyArgs();

    /**
     * Instance archive backup keep count. Valid when the `enable_backup_log` is `true` and instance is mysql local disk. When `archive_backup_keep_policy` is `ByMonth` Valid values: [1-31]. When `archive_backup_keep_policy` is `ByWeek` Valid values: [1-7].
     * 
     */
    @Import(name="archiveBackupKeepCount")
    private @Nullable Output<Integer> archiveBackupKeepCount;

    /**
     * @return Instance archive backup keep count. Valid when the `enable_backup_log` is `true` and instance is mysql local disk. When `archive_backup_keep_policy` is `ByMonth` Valid values: [1-31]. When `archive_backup_keep_policy` is `ByWeek` Valid values: [1-7].
     * 
     */
    public Optional<Output<Integer>> archiveBackupKeepCount() {
        return Optional.ofNullable(this.archiveBackupKeepCount);
    }

    /**
     * Instance archive backup keep policy. Valid when the `enable_backup_log` is `true` and instance is mysql local disk. Valid values are `ByMonth`, `ByWeek`, `KeepAll`.
     * 
     */
    @Import(name="archiveBackupKeepPolicy")
    private @Nullable Output<String> archiveBackupKeepPolicy;

    /**
     * @return Instance archive backup keep policy. Valid when the `enable_backup_log` is `true` and instance is mysql local disk. Valid values are `ByMonth`, `ByWeek`, `KeepAll`.
     * 
     */
    public Optional<Output<String>> archiveBackupKeepPolicy() {
        return Optional.ofNullable(this.archiveBackupKeepPolicy);
    }

    /**
     * Instance archive backup retention days. Valid when the `enable_backup_log` is `true` and instance is mysql local disk. Valid values: [30-1095], and `archive_backup_retention_period` must larger than `backup_retention_period` 730.
     * 
     */
    @Import(name="archiveBackupRetentionPeriod")
    private @Nullable Output<Integer> archiveBackupRetentionPeriod;

    /**
     * @return Instance archive backup retention days. Valid when the `enable_backup_log` is `true` and instance is mysql local disk. Valid values: [30-1095], and `archive_backup_retention_period` must larger than `backup_retention_period` 730.
     * 
     */
    public Optional<Output<Integer>> archiveBackupRetentionPeriod() {
        return Optional.ofNullable(this.archiveBackupRetentionPeriod);
    }

    /**
     * The frequency at which you want to perform a snapshot backup on the instance. Valid values:
     * - -1: No backup frequencies are specified.
     * - 30: A snapshot backup is performed once every 30 minutes.
     * - 60: A snapshot backup is performed once every 60 minutes.
     * - 120: A snapshot backup is performed once every 120 minutes.
     * - 240: A snapshot backup is performed once every 240 minutes.
     * - 360: A snapshot backup is performed once every 360 minutes.
     * - 480: A snapshot backup is performed once every 480 minutes.
     * - 720: A snapshot backup is performed once every 720 minutes.
     * 
     * &gt; **NOTE:** Currently, the SQLServer instance does not support to modify `log_backup_retention_period`.
     * 
     */
    @Import(name="backupInterval")
    private @Nullable Output<String> backupInterval;

    /**
     * @return The frequency at which you want to perform a snapshot backup on the instance. Valid values:
     * - -1: No backup frequencies are specified.
     * - 30: A snapshot backup is performed once every 30 minutes.
     * - 60: A snapshot backup is performed once every 60 minutes.
     * - 120: A snapshot backup is performed once every 120 minutes.
     * - 240: A snapshot backup is performed once every 240 minutes.
     * - 360: A snapshot backup is performed once every 360 minutes.
     * - 480: A snapshot backup is performed once every 480 minutes.
     * - 720: A snapshot backup is performed once every 720 minutes.
     * 
     * &gt; **NOTE:** Currently, the SQLServer instance does not support to modify `log_backup_retention_period`.
     * 
     */
    public Optional<Output<String>> backupInterval() {
        return Optional.ofNullable(this.backupInterval);
    }

    /**
     * It has been deprecated from version 1.69.0, and use field &#39;preferred_backup_period&#39; instead.
     * 
     * @deprecated
     * Attribute &#39;backup_period&#39; has been deprecated from version 1.69.0. Use `preferred_backup_period` instead
     * 
     */
    @Deprecated /* Attribute 'backup_period' has been deprecated from version 1.69.0. Use `preferred_backup_period` instead */
    @Import(name="backupPeriods")
    private @Nullable Output<List<String>> backupPeriods;

    /**
     * @return It has been deprecated from version 1.69.0, and use field &#39;preferred_backup_period&#39; instead.
     * 
     * @deprecated
     * Attribute &#39;backup_period&#39; has been deprecated from version 1.69.0. Use `preferred_backup_period` instead
     * 
     */
    @Deprecated /* Attribute 'backup_period' has been deprecated from version 1.69.0. Use `preferred_backup_period` instead */
    public Optional<Output<List<String>>> backupPeriods() {
        return Optional.ofNullable(this.backupPeriods);
    }

    /**
     * Instance backup retention days. Valid values: [7-730]. Default to 7. But mysql local disk is unlimited.
     * 
     */
    @Import(name="backupRetentionPeriod")
    private @Nullable Output<Integer> backupRetentionPeriod;

    /**
     * @return Instance backup retention days. Valid values: [7-730]. Default to 7. But mysql local disk is unlimited.
     * 
     */
    public Optional<Output<Integer>> backupRetentionPeriod() {
        return Optional.ofNullable(this.backupRetentionPeriod);
    }

    /**
     * It has been deprecated from version 1.69.0, and use field &#39;preferred_backup_time&#39; instead.
     * 
     * @deprecated
     * Attribute &#39;backup_time&#39; has been deprecated from version 1.69.0. Use `preferred_backup_time` instead
     * 
     */
    @Deprecated /* Attribute 'backup_time' has been deprecated from version 1.69.0. Use `preferred_backup_time` instead */
    @Import(name="backupTime")
    private @Nullable Output<String> backupTime;

    /**
     * @return It has been deprecated from version 1.69.0, and use field &#39;preferred_backup_time&#39; instead.
     * 
     * @deprecated
     * Attribute &#39;backup_time&#39; has been deprecated from version 1.69.0. Use `preferred_backup_time` instead
     * 
     */
    @Deprecated /* Attribute 'backup_time' has been deprecated from version 1.69.0. Use `preferred_backup_time` instead */
    public Optional<Output<String>> backupTime() {
        return Optional.ofNullable(this.backupTime);
    }

    /**
     * Whether to enable second level backup.Valid values are `Flash`, `Standard`, Note:It only takes effect when the BackupPolicyMode parameter is DataBackupPolicy.
     * &gt; **NOTE:** You can configure a backup policy by using this parameter and the PreferredBackupPeriod parameter. For example, if you set the PreferredBackupPeriod parameter to Saturday,Sunday and the BackupInterval parameter to -1, a snapshot backup is performed on every Saturday and Sunday.If the instance runs PostgreSQL, the BackupInterval parameter is supported only when the instance is equipped with standard SSDs or enhanced SSDs (ESSDs).This parameter takes effect only when you set the BackupPolicyMode parameter to DataBackupPolicy.
     * 
     */
    @Import(name="category")
    private @Nullable Output<String> category;

    /**
     * @return Whether to enable second level backup.Valid values are `Flash`, `Standard`, Note:It only takes effect when the BackupPolicyMode parameter is DataBackupPolicy.
     * &gt; **NOTE:** You can configure a backup policy by using this parameter and the PreferredBackupPeriod parameter. For example, if you set the PreferredBackupPeriod parameter to Saturday,Sunday and the BackupInterval parameter to -1, a snapshot backup is performed on every Saturday and Sunday.If the instance runs PostgreSQL, the BackupInterval parameter is supported only when the instance is equipped with standard SSDs or enhanced SSDs (ESSDs).This parameter takes effect only when you set the BackupPolicyMode parameter to DataBackupPolicy.
     * 
     */
    public Optional<Output<String>> category() {
        return Optional.ofNullable(this.category);
    }

    /**
     * The compress type of instance policy. Valid values are `1`, `4`, `8`.
     * 
     */
    @Import(name="compressType")
    private @Nullable Output<String> compressType;

    /**
     * @return The compress type of instance policy. Valid values are `1`, `4`, `8`.
     * 
     */
    public Optional<Output<String>> compressType() {
        return Optional.ofNullable(this.compressType);
    }

    /**
     * Whether to backup instance log. Valid values are `true`, `false`, Default to `true`. Note: The &#39;Basic Edition&#39; category Rds instance does not support setting log backup. [What is Basic Edition](https://www.alibabacloud.com/help/doc-detail/48980.htm).
     * 
     */
    @Import(name="enableBackupLog")
    private @Nullable Output<Boolean> enableBackupLog;

    /**
     * @return Whether to backup instance log. Valid values are `true`, `false`, Default to `true`. Note: The &#39;Basic Edition&#39; category Rds instance does not support setting log backup. [What is Basic Edition](https://www.alibabacloud.com/help/doc-detail/48980.htm).
     * 
     */
    public Optional<Output<Boolean>> enableBackupLog() {
        return Optional.ofNullable(this.enableBackupLog);
    }

    /**
     * Instance high space usage protection policy. Valid when the `enable_backup_log` is `true`. Valid values are `Enable`, `Disable`.
     * 
     */
    @Import(name="highSpaceUsageProtection")
    private @Nullable Output<String> highSpaceUsageProtection;

    /**
     * @return Instance high space usage protection policy. Valid when the `enable_backup_log` is `true`. Valid values are `Enable`, `Disable`.
     * 
     */
    public Optional<Output<String>> highSpaceUsageProtection() {
        return Optional.ofNullable(this.highSpaceUsageProtection);
    }

    /**
     * The Id of instance that can run database.
     * 
     */
    @Import(name="instanceId", required=true)
    private Output<String> instanceId;

    /**
     * @return The Id of instance that can run database.
     * 
     */
    public Output<String> instanceId() {
        return this.instanceId;
    }

    /**
     * Instance log backup local retention hours. Valid when the `enable_backup_log` is `true`. Valid values: [0-7*24].
     * 
     */
    @Import(name="localLogRetentionHours")
    private @Nullable Output<Integer> localLogRetentionHours;

    /**
     * @return Instance log backup local retention hours. Valid when the `enable_backup_log` is `true`. Valid values: [0-7*24].
     * 
     */
    public Optional<Output<Integer>> localLogRetentionHours() {
        return Optional.ofNullable(this.localLogRetentionHours);
    }

    /**
     * Instance log backup local retention space. Valid when the `enable_backup_log` is `true`. Valid values: [0-50].
     * 
     */
    @Import(name="localLogRetentionSpace")
    private @Nullable Output<Integer> localLogRetentionSpace;

    /**
     * @return Instance log backup local retention space. Valid when the `enable_backup_log` is `true`. Valid values: [0-50].
     * 
     */
    public Optional<Output<Integer>> localLogRetentionSpace() {
        return Optional.ofNullable(this.localLogRetentionSpace);
    }

    /**
     * It has been deprecated from version 1.68.0, and use field &#39;enable_backup_log&#39; instead.
     * 
     * @deprecated
     * Attribute &#39;log_backup&#39; has been deprecated from version 1.68.0. Use `enable_backup_log` instead
     * 
     */
    @Deprecated /* Attribute 'log_backup' has been deprecated from version 1.68.0. Use `enable_backup_log` instead */
    @Import(name="logBackup")
    private @Nullable Output<Boolean> logBackup;

    /**
     * @return It has been deprecated from version 1.68.0, and use field &#39;enable_backup_log&#39; instead.
     * 
     * @deprecated
     * Attribute &#39;log_backup&#39; has been deprecated from version 1.68.0. Use `enable_backup_log` instead
     * 
     */
    @Deprecated /* Attribute 'log_backup' has been deprecated from version 1.68.0. Use `enable_backup_log` instead */
    public Optional<Output<Boolean>> logBackup() {
        return Optional.ofNullable(this.logBackup);
    }

    /**
     * Instance log backup frequency. Valid when the instance engine is `SQLServer`. Valid values are `LogInterval`.
     * 
     */
    @Import(name="logBackupFrequency")
    private @Nullable Output<String> logBackupFrequency;

    /**
     * @return Instance log backup frequency. Valid when the instance engine is `SQLServer`. Valid values are `LogInterval`.
     * 
     */
    public Optional<Output<String>> logBackupFrequency() {
        return Optional.ofNullable(this.logBackupFrequency);
    }

    /**
     * Instance log backup retention days. Valid when the `enable_backup_log` is `1`. Valid values: [7-730]. Default to 7. It cannot be larger than `backup_retention_period`.
     * 
     */
    @Import(name="logBackupRetentionPeriod")
    private @Nullable Output<Integer> logBackupRetentionPeriod;

    /**
     * @return Instance log backup retention days. Valid when the `enable_backup_log` is `1`. Valid values: [7-730]. Default to 7. It cannot be larger than `backup_retention_period`.
     * 
     */
    public Optional<Output<Integer>> logBackupRetentionPeriod() {
        return Optional.ofNullable(this.logBackupRetentionPeriod);
    }

    /**
     * It has been deprecated from version 1.69.0, and use field &#39;log_backup_retention_period&#39; instead.
     * 
     * @deprecated
     * Attribute &#39;log_retention_period&#39; has been deprecated from version 1.69.0. Use `log_backup_retention_period` instead
     * 
     */
    @Deprecated /* Attribute 'log_retention_period' has been deprecated from version 1.69.0. Use `log_backup_retention_period` instead */
    @Import(name="logRetentionPeriod")
    private @Nullable Output<Integer> logRetentionPeriod;

    /**
     * @return It has been deprecated from version 1.69.0, and use field &#39;log_backup_retention_period&#39; instead.
     * 
     * @deprecated
     * Attribute &#39;log_retention_period&#39; has been deprecated from version 1.69.0. Use `log_backup_retention_period` instead
     * 
     */
    @Deprecated /* Attribute 'log_retention_period' has been deprecated from version 1.69.0. Use `log_backup_retention_period` instead */
    public Optional<Output<Integer>> logRetentionPeriod() {
        return Optional.ofNullable(this.logRetentionPeriod);
    }

    /**
     * DB Instance backup period. Please set at least two days to ensure backing up at least twice a week. Valid values: [Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday].
     * 
     */
    @Import(name="preferredBackupPeriods")
    private @Nullable Output<List<String>> preferredBackupPeriods;

    /**
     * @return DB Instance backup period. Please set at least two days to ensure backing up at least twice a week. Valid values: [Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday].
     * 
     */
    public Optional<Output<List<String>>> preferredBackupPeriods() {
        return Optional.ofNullable(this.preferredBackupPeriods);
    }

    /**
     * DB instance backup time, in the format of HH:mmZ- HH:mmZ. Time setting interval is one hour. Default to &#34;02:00Z-03:00Z&#34;. China time is 8 hours behind it.
     * 
     */
    @Import(name="preferredBackupTime")
    private @Nullable Output<String> preferredBackupTime;

    /**
     * @return DB instance backup time, in the format of HH:mmZ- HH:mmZ. Time setting interval is one hour. Default to &#34;02:00Z-03:00Z&#34;. China time is 8 hours behind it.
     * 
     */
    public Optional<Output<String>> preferredBackupTime() {
        return Optional.ofNullable(this.preferredBackupTime);
    }

    /**
     * The policy based on which ApsaraDB RDS retains archived backup files if the instance is released. Default value: None. Valid values:
     * * **None**: No archived backup files are retained.
     * * **Lastest**: Only the most recent archived backup file is retained.
     * * **All**: All archived backup files are retained.
     * 
     */
    @Import(name="releasedKeepPolicy")
    private @Nullable Output<String> releasedKeepPolicy;

    /**
     * @return The policy based on which ApsaraDB RDS retains archived backup files if the instance is released. Default value: None. Valid values:
     * * **None**: No archived backup files are retained.
     * * **Lastest**: Only the most recent archived backup file is retained.
     * * **All**: All archived backup files are retained.
     * 
     */
    public Optional<Output<String>> releasedKeepPolicy() {
        return Optional.ofNullable(this.releasedKeepPolicy);
    }

    /**
     * It has been deprecated from version 1.69.0, and use field &#39;backup_retention_period&#39; instead.
     * 
     * @deprecated
     * Attribute &#39;retention_period&#39; has been deprecated from version 1.69.0. Use `backup_retention_period` instead
     * 
     */
    @Deprecated /* Attribute 'retention_period' has been deprecated from version 1.69.0. Use `backup_retention_period` instead */
    @Import(name="retentionPeriod")
    private @Nullable Output<Integer> retentionPeriod;

    /**
     * @return It has been deprecated from version 1.69.0, and use field &#39;backup_retention_period&#39; instead.
     * 
     * @deprecated
     * Attribute &#39;retention_period&#39; has been deprecated from version 1.69.0. Use `backup_retention_period` instead
     * 
     */
    @Deprecated /* Attribute 'retention_period' has been deprecated from version 1.69.0. Use `backup_retention_period` instead */
    public Optional<Output<Integer>> retentionPeriod() {
        return Optional.ofNullable(this.retentionPeriod);
    }

    private BackupPolicyArgs() {}

    private BackupPolicyArgs(BackupPolicyArgs $) {
        this.archiveBackupKeepCount = $.archiveBackupKeepCount;
        this.archiveBackupKeepPolicy = $.archiveBackupKeepPolicy;
        this.archiveBackupRetentionPeriod = $.archiveBackupRetentionPeriod;
        this.backupInterval = $.backupInterval;
        this.backupPeriods = $.backupPeriods;
        this.backupRetentionPeriod = $.backupRetentionPeriod;
        this.backupTime = $.backupTime;
        this.category = $.category;
        this.compressType = $.compressType;
        this.enableBackupLog = $.enableBackupLog;
        this.highSpaceUsageProtection = $.highSpaceUsageProtection;
        this.instanceId = $.instanceId;
        this.localLogRetentionHours = $.localLogRetentionHours;
        this.localLogRetentionSpace = $.localLogRetentionSpace;
        this.logBackup = $.logBackup;
        this.logBackupFrequency = $.logBackupFrequency;
        this.logBackupRetentionPeriod = $.logBackupRetentionPeriod;
        this.logRetentionPeriod = $.logRetentionPeriod;
        this.preferredBackupPeriods = $.preferredBackupPeriods;
        this.preferredBackupTime = $.preferredBackupTime;
        this.releasedKeepPolicy = $.releasedKeepPolicy;
        this.retentionPeriod = $.retentionPeriod;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BackupPolicyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BackupPolicyArgs $;

        public Builder() {
            $ = new BackupPolicyArgs();
        }

        public Builder(BackupPolicyArgs defaults) {
            $ = new BackupPolicyArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param archiveBackupKeepCount Instance archive backup keep count. Valid when the `enable_backup_log` is `true` and instance is mysql local disk. When `archive_backup_keep_policy` is `ByMonth` Valid values: [1-31]. When `archive_backup_keep_policy` is `ByWeek` Valid values: [1-7].
         * 
         * @return builder
         * 
         */
        public Builder archiveBackupKeepCount(@Nullable Output<Integer> archiveBackupKeepCount) {
            $.archiveBackupKeepCount = archiveBackupKeepCount;
            return this;
        }

        /**
         * @param archiveBackupKeepCount Instance archive backup keep count. Valid when the `enable_backup_log` is `true` and instance is mysql local disk. When `archive_backup_keep_policy` is `ByMonth` Valid values: [1-31]. When `archive_backup_keep_policy` is `ByWeek` Valid values: [1-7].
         * 
         * @return builder
         * 
         */
        public Builder archiveBackupKeepCount(Integer archiveBackupKeepCount) {
            return archiveBackupKeepCount(Output.of(archiveBackupKeepCount));
        }

        /**
         * @param archiveBackupKeepPolicy Instance archive backup keep policy. Valid when the `enable_backup_log` is `true` and instance is mysql local disk. Valid values are `ByMonth`, `ByWeek`, `KeepAll`.
         * 
         * @return builder
         * 
         */
        public Builder archiveBackupKeepPolicy(@Nullable Output<String> archiveBackupKeepPolicy) {
            $.archiveBackupKeepPolicy = archiveBackupKeepPolicy;
            return this;
        }

        /**
         * @param archiveBackupKeepPolicy Instance archive backup keep policy. Valid when the `enable_backup_log` is `true` and instance is mysql local disk. Valid values are `ByMonth`, `ByWeek`, `KeepAll`.
         * 
         * @return builder
         * 
         */
        public Builder archiveBackupKeepPolicy(String archiveBackupKeepPolicy) {
            return archiveBackupKeepPolicy(Output.of(archiveBackupKeepPolicy));
        }

        /**
         * @param archiveBackupRetentionPeriod Instance archive backup retention days. Valid when the `enable_backup_log` is `true` and instance is mysql local disk. Valid values: [30-1095], and `archive_backup_retention_period` must larger than `backup_retention_period` 730.
         * 
         * @return builder
         * 
         */
        public Builder archiveBackupRetentionPeriod(@Nullable Output<Integer> archiveBackupRetentionPeriod) {
            $.archiveBackupRetentionPeriod = archiveBackupRetentionPeriod;
            return this;
        }

        /**
         * @param archiveBackupRetentionPeriod Instance archive backup retention days. Valid when the `enable_backup_log` is `true` and instance is mysql local disk. Valid values: [30-1095], and `archive_backup_retention_period` must larger than `backup_retention_period` 730.
         * 
         * @return builder
         * 
         */
        public Builder archiveBackupRetentionPeriod(Integer archiveBackupRetentionPeriod) {
            return archiveBackupRetentionPeriod(Output.of(archiveBackupRetentionPeriod));
        }

        /**
         * @param backupInterval The frequency at which you want to perform a snapshot backup on the instance. Valid values:
         * - -1: No backup frequencies are specified.
         * - 30: A snapshot backup is performed once every 30 minutes.
         * - 60: A snapshot backup is performed once every 60 minutes.
         * - 120: A snapshot backup is performed once every 120 minutes.
         * - 240: A snapshot backup is performed once every 240 minutes.
         * - 360: A snapshot backup is performed once every 360 minutes.
         * - 480: A snapshot backup is performed once every 480 minutes.
         * - 720: A snapshot backup is performed once every 720 minutes.
         * 
         * &gt; **NOTE:** Currently, the SQLServer instance does not support to modify `log_backup_retention_period`.
         * 
         * @return builder
         * 
         */
        public Builder backupInterval(@Nullable Output<String> backupInterval) {
            $.backupInterval = backupInterval;
            return this;
        }

        /**
         * @param backupInterval The frequency at which you want to perform a snapshot backup on the instance. Valid values:
         * - -1: No backup frequencies are specified.
         * - 30: A snapshot backup is performed once every 30 minutes.
         * - 60: A snapshot backup is performed once every 60 minutes.
         * - 120: A snapshot backup is performed once every 120 minutes.
         * - 240: A snapshot backup is performed once every 240 minutes.
         * - 360: A snapshot backup is performed once every 360 minutes.
         * - 480: A snapshot backup is performed once every 480 minutes.
         * - 720: A snapshot backup is performed once every 720 minutes.
         * 
         * &gt; **NOTE:** Currently, the SQLServer instance does not support to modify `log_backup_retention_period`.
         * 
         * @return builder
         * 
         */
        public Builder backupInterval(String backupInterval) {
            return backupInterval(Output.of(backupInterval));
        }

        /**
         * @param backupPeriods It has been deprecated from version 1.69.0, and use field &#39;preferred_backup_period&#39; instead.
         * 
         * @return builder
         * 
         * @deprecated
         * Attribute &#39;backup_period&#39; has been deprecated from version 1.69.0. Use `preferred_backup_period` instead
         * 
         */
        @Deprecated /* Attribute 'backup_period' has been deprecated from version 1.69.0. Use `preferred_backup_period` instead */
        public Builder backupPeriods(@Nullable Output<List<String>> backupPeriods) {
            $.backupPeriods = backupPeriods;
            return this;
        }

        /**
         * @param backupPeriods It has been deprecated from version 1.69.0, and use field &#39;preferred_backup_period&#39; instead.
         * 
         * @return builder
         * 
         * @deprecated
         * Attribute &#39;backup_period&#39; has been deprecated from version 1.69.0. Use `preferred_backup_period` instead
         * 
         */
        @Deprecated /* Attribute 'backup_period' has been deprecated from version 1.69.0. Use `preferred_backup_period` instead */
        public Builder backupPeriods(List<String> backupPeriods) {
            return backupPeriods(Output.of(backupPeriods));
        }

        /**
         * @param backupPeriods It has been deprecated from version 1.69.0, and use field &#39;preferred_backup_period&#39; instead.
         * 
         * @return builder
         * 
         * @deprecated
         * Attribute &#39;backup_period&#39; has been deprecated from version 1.69.0. Use `preferred_backup_period` instead
         * 
         */
        @Deprecated /* Attribute 'backup_period' has been deprecated from version 1.69.0. Use `preferred_backup_period` instead */
        public Builder backupPeriods(String... backupPeriods) {
            return backupPeriods(List.of(backupPeriods));
        }

        /**
         * @param backupRetentionPeriod Instance backup retention days. Valid values: [7-730]. Default to 7. But mysql local disk is unlimited.
         * 
         * @return builder
         * 
         */
        public Builder backupRetentionPeriod(@Nullable Output<Integer> backupRetentionPeriod) {
            $.backupRetentionPeriod = backupRetentionPeriod;
            return this;
        }

        /**
         * @param backupRetentionPeriod Instance backup retention days. Valid values: [7-730]. Default to 7. But mysql local disk is unlimited.
         * 
         * @return builder
         * 
         */
        public Builder backupRetentionPeriod(Integer backupRetentionPeriod) {
            return backupRetentionPeriod(Output.of(backupRetentionPeriod));
        }

        /**
         * @param backupTime It has been deprecated from version 1.69.0, and use field &#39;preferred_backup_time&#39; instead.
         * 
         * @return builder
         * 
         * @deprecated
         * Attribute &#39;backup_time&#39; has been deprecated from version 1.69.0. Use `preferred_backup_time` instead
         * 
         */
        @Deprecated /* Attribute 'backup_time' has been deprecated from version 1.69.0. Use `preferred_backup_time` instead */
        public Builder backupTime(@Nullable Output<String> backupTime) {
            $.backupTime = backupTime;
            return this;
        }

        /**
         * @param backupTime It has been deprecated from version 1.69.0, and use field &#39;preferred_backup_time&#39; instead.
         * 
         * @return builder
         * 
         * @deprecated
         * Attribute &#39;backup_time&#39; has been deprecated from version 1.69.0. Use `preferred_backup_time` instead
         * 
         */
        @Deprecated /* Attribute 'backup_time' has been deprecated from version 1.69.0. Use `preferred_backup_time` instead */
        public Builder backupTime(String backupTime) {
            return backupTime(Output.of(backupTime));
        }

        /**
         * @param category Whether to enable second level backup.Valid values are `Flash`, `Standard`, Note:It only takes effect when the BackupPolicyMode parameter is DataBackupPolicy.
         * &gt; **NOTE:** You can configure a backup policy by using this parameter and the PreferredBackupPeriod parameter. For example, if you set the PreferredBackupPeriod parameter to Saturday,Sunday and the BackupInterval parameter to -1, a snapshot backup is performed on every Saturday and Sunday.If the instance runs PostgreSQL, the BackupInterval parameter is supported only when the instance is equipped with standard SSDs or enhanced SSDs (ESSDs).This parameter takes effect only when you set the BackupPolicyMode parameter to DataBackupPolicy.
         * 
         * @return builder
         * 
         */
        public Builder category(@Nullable Output<String> category) {
            $.category = category;
            return this;
        }

        /**
         * @param category Whether to enable second level backup.Valid values are `Flash`, `Standard`, Note:It only takes effect when the BackupPolicyMode parameter is DataBackupPolicy.
         * &gt; **NOTE:** You can configure a backup policy by using this parameter and the PreferredBackupPeriod parameter. For example, if you set the PreferredBackupPeriod parameter to Saturday,Sunday and the BackupInterval parameter to -1, a snapshot backup is performed on every Saturday and Sunday.If the instance runs PostgreSQL, the BackupInterval parameter is supported only when the instance is equipped with standard SSDs or enhanced SSDs (ESSDs).This parameter takes effect only when you set the BackupPolicyMode parameter to DataBackupPolicy.
         * 
         * @return builder
         * 
         */
        public Builder category(String category) {
            return category(Output.of(category));
        }

        /**
         * @param compressType The compress type of instance policy. Valid values are `1`, `4`, `8`.
         * 
         * @return builder
         * 
         */
        public Builder compressType(@Nullable Output<String> compressType) {
            $.compressType = compressType;
            return this;
        }

        /**
         * @param compressType The compress type of instance policy. Valid values are `1`, `4`, `8`.
         * 
         * @return builder
         * 
         */
        public Builder compressType(String compressType) {
            return compressType(Output.of(compressType));
        }

        /**
         * @param enableBackupLog Whether to backup instance log. Valid values are `true`, `false`, Default to `true`. Note: The &#39;Basic Edition&#39; category Rds instance does not support setting log backup. [What is Basic Edition](https://www.alibabacloud.com/help/doc-detail/48980.htm).
         * 
         * @return builder
         * 
         */
        public Builder enableBackupLog(@Nullable Output<Boolean> enableBackupLog) {
            $.enableBackupLog = enableBackupLog;
            return this;
        }

        /**
         * @param enableBackupLog Whether to backup instance log. Valid values are `true`, `false`, Default to `true`. Note: The &#39;Basic Edition&#39; category Rds instance does not support setting log backup. [What is Basic Edition](https://www.alibabacloud.com/help/doc-detail/48980.htm).
         * 
         * @return builder
         * 
         */
        public Builder enableBackupLog(Boolean enableBackupLog) {
            return enableBackupLog(Output.of(enableBackupLog));
        }

        /**
         * @param highSpaceUsageProtection Instance high space usage protection policy. Valid when the `enable_backup_log` is `true`. Valid values are `Enable`, `Disable`.
         * 
         * @return builder
         * 
         */
        public Builder highSpaceUsageProtection(@Nullable Output<String> highSpaceUsageProtection) {
            $.highSpaceUsageProtection = highSpaceUsageProtection;
            return this;
        }

        /**
         * @param highSpaceUsageProtection Instance high space usage protection policy. Valid when the `enable_backup_log` is `true`. Valid values are `Enable`, `Disable`.
         * 
         * @return builder
         * 
         */
        public Builder highSpaceUsageProtection(String highSpaceUsageProtection) {
            return highSpaceUsageProtection(Output.of(highSpaceUsageProtection));
        }

        /**
         * @param instanceId The Id of instance that can run database.
         * 
         * @return builder
         * 
         */
        public Builder instanceId(Output<String> instanceId) {
            $.instanceId = instanceId;
            return this;
        }

        /**
         * @param instanceId The Id of instance that can run database.
         * 
         * @return builder
         * 
         */
        public Builder instanceId(String instanceId) {
            return instanceId(Output.of(instanceId));
        }

        /**
         * @param localLogRetentionHours Instance log backup local retention hours. Valid when the `enable_backup_log` is `true`. Valid values: [0-7*24].
         * 
         * @return builder
         * 
         */
        public Builder localLogRetentionHours(@Nullable Output<Integer> localLogRetentionHours) {
            $.localLogRetentionHours = localLogRetentionHours;
            return this;
        }

        /**
         * @param localLogRetentionHours Instance log backup local retention hours. Valid when the `enable_backup_log` is `true`. Valid values: [0-7*24].
         * 
         * @return builder
         * 
         */
        public Builder localLogRetentionHours(Integer localLogRetentionHours) {
            return localLogRetentionHours(Output.of(localLogRetentionHours));
        }

        /**
         * @param localLogRetentionSpace Instance log backup local retention space. Valid when the `enable_backup_log` is `true`. Valid values: [0-50].
         * 
         * @return builder
         * 
         */
        public Builder localLogRetentionSpace(@Nullable Output<Integer> localLogRetentionSpace) {
            $.localLogRetentionSpace = localLogRetentionSpace;
            return this;
        }

        /**
         * @param localLogRetentionSpace Instance log backup local retention space. Valid when the `enable_backup_log` is `true`. Valid values: [0-50].
         * 
         * @return builder
         * 
         */
        public Builder localLogRetentionSpace(Integer localLogRetentionSpace) {
            return localLogRetentionSpace(Output.of(localLogRetentionSpace));
        }

        /**
         * @param logBackup It has been deprecated from version 1.68.0, and use field &#39;enable_backup_log&#39; instead.
         * 
         * @return builder
         * 
         * @deprecated
         * Attribute &#39;log_backup&#39; has been deprecated from version 1.68.0. Use `enable_backup_log` instead
         * 
         */
        @Deprecated /* Attribute 'log_backup' has been deprecated from version 1.68.0. Use `enable_backup_log` instead */
        public Builder logBackup(@Nullable Output<Boolean> logBackup) {
            $.logBackup = logBackup;
            return this;
        }

        /**
         * @param logBackup It has been deprecated from version 1.68.0, and use field &#39;enable_backup_log&#39; instead.
         * 
         * @return builder
         * 
         * @deprecated
         * Attribute &#39;log_backup&#39; has been deprecated from version 1.68.0. Use `enable_backup_log` instead
         * 
         */
        @Deprecated /* Attribute 'log_backup' has been deprecated from version 1.68.0. Use `enable_backup_log` instead */
        public Builder logBackup(Boolean logBackup) {
            return logBackup(Output.of(logBackup));
        }

        /**
         * @param logBackupFrequency Instance log backup frequency. Valid when the instance engine is `SQLServer`. Valid values are `LogInterval`.
         * 
         * @return builder
         * 
         */
        public Builder logBackupFrequency(@Nullable Output<String> logBackupFrequency) {
            $.logBackupFrequency = logBackupFrequency;
            return this;
        }

        /**
         * @param logBackupFrequency Instance log backup frequency. Valid when the instance engine is `SQLServer`. Valid values are `LogInterval`.
         * 
         * @return builder
         * 
         */
        public Builder logBackupFrequency(String logBackupFrequency) {
            return logBackupFrequency(Output.of(logBackupFrequency));
        }

        /**
         * @param logBackupRetentionPeriod Instance log backup retention days. Valid when the `enable_backup_log` is `1`. Valid values: [7-730]. Default to 7. It cannot be larger than `backup_retention_period`.
         * 
         * @return builder
         * 
         */
        public Builder logBackupRetentionPeriod(@Nullable Output<Integer> logBackupRetentionPeriod) {
            $.logBackupRetentionPeriod = logBackupRetentionPeriod;
            return this;
        }

        /**
         * @param logBackupRetentionPeriod Instance log backup retention days. Valid when the `enable_backup_log` is `1`. Valid values: [7-730]. Default to 7. It cannot be larger than `backup_retention_period`.
         * 
         * @return builder
         * 
         */
        public Builder logBackupRetentionPeriod(Integer logBackupRetentionPeriod) {
            return logBackupRetentionPeriod(Output.of(logBackupRetentionPeriod));
        }

        /**
         * @param logRetentionPeriod It has been deprecated from version 1.69.0, and use field &#39;log_backup_retention_period&#39; instead.
         * 
         * @return builder
         * 
         * @deprecated
         * Attribute &#39;log_retention_period&#39; has been deprecated from version 1.69.0. Use `log_backup_retention_period` instead
         * 
         */
        @Deprecated /* Attribute 'log_retention_period' has been deprecated from version 1.69.0. Use `log_backup_retention_period` instead */
        public Builder logRetentionPeriod(@Nullable Output<Integer> logRetentionPeriod) {
            $.logRetentionPeriod = logRetentionPeriod;
            return this;
        }

        /**
         * @param logRetentionPeriod It has been deprecated from version 1.69.0, and use field &#39;log_backup_retention_period&#39; instead.
         * 
         * @return builder
         * 
         * @deprecated
         * Attribute &#39;log_retention_period&#39; has been deprecated from version 1.69.0. Use `log_backup_retention_period` instead
         * 
         */
        @Deprecated /* Attribute 'log_retention_period' has been deprecated from version 1.69.0. Use `log_backup_retention_period` instead */
        public Builder logRetentionPeriod(Integer logRetentionPeriod) {
            return logRetentionPeriod(Output.of(logRetentionPeriod));
        }

        /**
         * @param preferredBackupPeriods DB Instance backup period. Please set at least two days to ensure backing up at least twice a week. Valid values: [Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday].
         * 
         * @return builder
         * 
         */
        public Builder preferredBackupPeriods(@Nullable Output<List<String>> preferredBackupPeriods) {
            $.preferredBackupPeriods = preferredBackupPeriods;
            return this;
        }

        /**
         * @param preferredBackupPeriods DB Instance backup period. Please set at least two days to ensure backing up at least twice a week. Valid values: [Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday].
         * 
         * @return builder
         * 
         */
        public Builder preferredBackupPeriods(List<String> preferredBackupPeriods) {
            return preferredBackupPeriods(Output.of(preferredBackupPeriods));
        }

        /**
         * @param preferredBackupPeriods DB Instance backup period. Please set at least two days to ensure backing up at least twice a week. Valid values: [Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday].
         * 
         * @return builder
         * 
         */
        public Builder preferredBackupPeriods(String... preferredBackupPeriods) {
            return preferredBackupPeriods(List.of(preferredBackupPeriods));
        }

        /**
         * @param preferredBackupTime DB instance backup time, in the format of HH:mmZ- HH:mmZ. Time setting interval is one hour. Default to &#34;02:00Z-03:00Z&#34;. China time is 8 hours behind it.
         * 
         * @return builder
         * 
         */
        public Builder preferredBackupTime(@Nullable Output<String> preferredBackupTime) {
            $.preferredBackupTime = preferredBackupTime;
            return this;
        }

        /**
         * @param preferredBackupTime DB instance backup time, in the format of HH:mmZ- HH:mmZ. Time setting interval is one hour. Default to &#34;02:00Z-03:00Z&#34;. China time is 8 hours behind it.
         * 
         * @return builder
         * 
         */
        public Builder preferredBackupTime(String preferredBackupTime) {
            return preferredBackupTime(Output.of(preferredBackupTime));
        }

        /**
         * @param releasedKeepPolicy The policy based on which ApsaraDB RDS retains archived backup files if the instance is released. Default value: None. Valid values:
         * * **None**: No archived backup files are retained.
         * * **Lastest**: Only the most recent archived backup file is retained.
         * * **All**: All archived backup files are retained.
         * 
         * @return builder
         * 
         */
        public Builder releasedKeepPolicy(@Nullable Output<String> releasedKeepPolicy) {
            $.releasedKeepPolicy = releasedKeepPolicy;
            return this;
        }

        /**
         * @param releasedKeepPolicy The policy based on which ApsaraDB RDS retains archived backup files if the instance is released. Default value: None. Valid values:
         * * **None**: No archived backup files are retained.
         * * **Lastest**: Only the most recent archived backup file is retained.
         * * **All**: All archived backup files are retained.
         * 
         * @return builder
         * 
         */
        public Builder releasedKeepPolicy(String releasedKeepPolicy) {
            return releasedKeepPolicy(Output.of(releasedKeepPolicy));
        }

        /**
         * @param retentionPeriod It has been deprecated from version 1.69.0, and use field &#39;backup_retention_period&#39; instead.
         * 
         * @return builder
         * 
         * @deprecated
         * Attribute &#39;retention_period&#39; has been deprecated from version 1.69.0. Use `backup_retention_period` instead
         * 
         */
        @Deprecated /* Attribute 'retention_period' has been deprecated from version 1.69.0. Use `backup_retention_period` instead */
        public Builder retentionPeriod(@Nullable Output<Integer> retentionPeriod) {
            $.retentionPeriod = retentionPeriod;
            return this;
        }

        /**
         * @param retentionPeriod It has been deprecated from version 1.69.0, and use field &#39;backup_retention_period&#39; instead.
         * 
         * @return builder
         * 
         * @deprecated
         * Attribute &#39;retention_period&#39; has been deprecated from version 1.69.0. Use `backup_retention_period` instead
         * 
         */
        @Deprecated /* Attribute 'retention_period' has been deprecated from version 1.69.0. Use `backup_retention_period` instead */
        public Builder retentionPeriod(Integer retentionPeriod) {
            return retentionPeriod(Output.of(retentionPeriod));
        }

        public BackupPolicyArgs build() {
            if ($.instanceId == null) {
                throw new MissingRequiredPropertyException("BackupPolicyArgs", "instanceId");
            }
            return $;
        }
    }

}
