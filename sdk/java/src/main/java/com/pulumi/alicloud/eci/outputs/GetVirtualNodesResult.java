// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.eci.outputs;

import com.pulumi.alicloud.eci.outputs.GetVirtualNodesNode;
import com.pulumi.core.annotations.CustomType;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetVirtualNodesResult {
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private List<String> ids;
    private @Nullable String nameRegex;
    private List<String> names;
    private List<GetVirtualNodesNode> nodes;
    private @Nullable String outputFile;
    private @Nullable String resourceGroupId;
    private @Nullable String securityGroupId;
    private @Nullable String status;
    private @Nullable Map<String,Object> tags;
    private @Nullable String virtualNodeName;
    private @Nullable String vswitchId;

    private GetVirtualNodesResult() {}
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public List<String> ids() {
        return this.ids;
    }
    public Optional<String> nameRegex() {
        return Optional.ofNullable(this.nameRegex);
    }
    public List<String> names() {
        return this.names;
    }
    public List<GetVirtualNodesNode> nodes() {
        return this.nodes;
    }
    public Optional<String> outputFile() {
        return Optional.ofNullable(this.outputFile);
    }
    public Optional<String> resourceGroupId() {
        return Optional.ofNullable(this.resourceGroupId);
    }
    public Optional<String> securityGroupId() {
        return Optional.ofNullable(this.securityGroupId);
    }
    public Optional<String> status() {
        return Optional.ofNullable(this.status);
    }
    public Map<String,Object> tags() {
        return this.tags == null ? Map.of() : this.tags;
    }
    public Optional<String> virtualNodeName() {
        return Optional.ofNullable(this.virtualNodeName);
    }
    public Optional<String> vswitchId() {
        return Optional.ofNullable(this.vswitchId);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetVirtualNodesResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String id;
        private List<String> ids;
        private @Nullable String nameRegex;
        private List<String> names;
        private List<GetVirtualNodesNode> nodes;
        private @Nullable String outputFile;
        private @Nullable String resourceGroupId;
        private @Nullable String securityGroupId;
        private @Nullable String status;
        private @Nullable Map<String,Object> tags;
        private @Nullable String virtualNodeName;
        private @Nullable String vswitchId;
        public Builder() {}
        public Builder(GetVirtualNodesResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.id = defaults.id;
    	      this.ids = defaults.ids;
    	      this.nameRegex = defaults.nameRegex;
    	      this.names = defaults.names;
    	      this.nodes = defaults.nodes;
    	      this.outputFile = defaults.outputFile;
    	      this.resourceGroupId = defaults.resourceGroupId;
    	      this.securityGroupId = defaults.securityGroupId;
    	      this.status = defaults.status;
    	      this.tags = defaults.tags;
    	      this.virtualNodeName = defaults.virtualNodeName;
    	      this.vswitchId = defaults.vswitchId;
        }

        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder ids(List<String> ids) {
            this.ids = Objects.requireNonNull(ids);
            return this;
        }
        public Builder ids(String... ids) {
            return ids(List.of(ids));
        }
        @CustomType.Setter
        public Builder nameRegex(@Nullable String nameRegex) {
            this.nameRegex = nameRegex;
            return this;
        }
        @CustomType.Setter
        public Builder names(List<String> names) {
            this.names = Objects.requireNonNull(names);
            return this;
        }
        public Builder names(String... names) {
            return names(List.of(names));
        }
        @CustomType.Setter
        public Builder nodes(List<GetVirtualNodesNode> nodes) {
            this.nodes = Objects.requireNonNull(nodes);
            return this;
        }
        public Builder nodes(GetVirtualNodesNode... nodes) {
            return nodes(List.of(nodes));
        }
        @CustomType.Setter
        public Builder outputFile(@Nullable String outputFile) {
            this.outputFile = outputFile;
            return this;
        }
        @CustomType.Setter
        public Builder resourceGroupId(@Nullable String resourceGroupId) {
            this.resourceGroupId = resourceGroupId;
            return this;
        }
        @CustomType.Setter
        public Builder securityGroupId(@Nullable String securityGroupId) {
            this.securityGroupId = securityGroupId;
            return this;
        }
        @CustomType.Setter
        public Builder status(@Nullable String status) {
            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder tags(@Nullable Map<String,Object> tags) {
            this.tags = tags;
            return this;
        }
        @CustomType.Setter
        public Builder virtualNodeName(@Nullable String virtualNodeName) {
            this.virtualNodeName = virtualNodeName;
            return this;
        }
        @CustomType.Setter
        public Builder vswitchId(@Nullable String vswitchId) {
            this.vswitchId = vswitchId;
            return this;
        }
        public GetVirtualNodesResult build() {
            final var o = new GetVirtualNodesResult();
            o.id = id;
            o.ids = ids;
            o.nameRegex = nameRegex;
            o.names = names;
            o.nodes = nodes;
            o.outputFile = outputFile;
            o.resourceGroupId = resourceGroupId;
            o.securityGroupId = securityGroupId;
            o.status = status;
            o.tags = tags;
            o.virtualNodeName = virtualNodeName;
            o.vswitchId = vswitchId;
            return o;
        }
    }
}
