// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.pai;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class WorkspaceCodeSourceArgs extends com.pulumi.resources.ResourceArgs {

    public static final WorkspaceCodeSourceArgs Empty = new WorkspaceCodeSourceArgs();

    /**
     * Visibility of the code configuration, possible values:
     * - PRIVATE: In this workspace, it is only visible to you and the administrator.
     * - PUBLIC: In this workspace, it is visible to everyone.
     * 
     */
    @Import(name="accessibility", required=true)
    private Output<String> accessibility;

    /**
     * @return Visibility of the code configuration, possible values:
     * - PRIVATE: In this workspace, it is only visible to you and the administrator.
     * - PUBLIC: In this workspace, it is visible to everyone.
     * 
     */
    public Output<String> accessibility() {
        return this.accessibility;
    }

    /**
     * Code repository branch.
     * 
     */
    @Import(name="codeBranch")
    private @Nullable Output<String> codeBranch;

    /**
     * @return Code repository branch.
     * 
     */
    public Optional<Output<String>> codeBranch() {
        return Optional.ofNullable(this.codeBranch);
    }

    /**
     * The code CommitId.
     * 
     */
    @Import(name="codeCommit")
    private @Nullable Output<String> codeCommit;

    /**
     * @return The code CommitId.
     * 
     */
    public Optional<Output<String>> codeCommit() {
        return Optional.ofNullable(this.codeCommit);
    }

    /**
     * Code repository address.
     * 
     */
    @Import(name="codeRepo", required=true)
    private Output<String> codeRepo;

    /**
     * @return Code repository address.
     * 
     */
    public Output<String> codeRepo() {
        return this.codeRepo;
    }

    /**
     * The Token used to access the code repository.
     * 
     */
    @Import(name="codeRepoAccessToken")
    private @Nullable Output<String> codeRepoAccessToken;

    /**
     * @return The Token used to access the code repository.
     * 
     */
    public Optional<Output<String>> codeRepoAccessToken() {
        return Optional.ofNullable(this.codeRepoAccessToken);
    }

    /**
     * The user name of the code repository.
     * 
     */
    @Import(name="codeRepoUserName")
    private @Nullable Output<String> codeRepoUserName;

    /**
     * @return The user name of the code repository.
     * 
     */
    public Optional<Output<String>> codeRepoUserName() {
        return Optional.ofNullable(this.codeRepoUserName);
    }

    /**
     * A detailed description of the code configuration.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return A detailed description of the code configuration.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Code source configuration name.
     * 
     */
    @Import(name="displayName", required=true)
    private Output<String> displayName;

    /**
     * @return Code source configuration name.
     * 
     */
    public Output<String> displayName() {
        return this.displayName;
    }

    /**
     * The local Mount Directory of the code.
     * 
     */
    @Import(name="mountPath", required=true)
    private Output<String> mountPath;

    /**
     * @return The local Mount Directory of the code.
     * 
     */
    public Output<String> mountPath() {
        return this.mountPath;
    }

    /**
     * The ID of the workspace.
     * 
     */
    @Import(name="workspaceId", required=true)
    private Output<String> workspaceId;

    /**
     * @return The ID of the workspace.
     * 
     */
    public Output<String> workspaceId() {
        return this.workspaceId;
    }

    private WorkspaceCodeSourceArgs() {}

    private WorkspaceCodeSourceArgs(WorkspaceCodeSourceArgs $) {
        this.accessibility = $.accessibility;
        this.codeBranch = $.codeBranch;
        this.codeCommit = $.codeCommit;
        this.codeRepo = $.codeRepo;
        this.codeRepoAccessToken = $.codeRepoAccessToken;
        this.codeRepoUserName = $.codeRepoUserName;
        this.description = $.description;
        this.displayName = $.displayName;
        this.mountPath = $.mountPath;
        this.workspaceId = $.workspaceId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(WorkspaceCodeSourceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private WorkspaceCodeSourceArgs $;

        public Builder() {
            $ = new WorkspaceCodeSourceArgs();
        }

        public Builder(WorkspaceCodeSourceArgs defaults) {
            $ = new WorkspaceCodeSourceArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accessibility Visibility of the code configuration, possible values:
         * - PRIVATE: In this workspace, it is only visible to you and the administrator.
         * - PUBLIC: In this workspace, it is visible to everyone.
         * 
         * @return builder
         * 
         */
        public Builder accessibility(Output<String> accessibility) {
            $.accessibility = accessibility;
            return this;
        }

        /**
         * @param accessibility Visibility of the code configuration, possible values:
         * - PRIVATE: In this workspace, it is only visible to you and the administrator.
         * - PUBLIC: In this workspace, it is visible to everyone.
         * 
         * @return builder
         * 
         */
        public Builder accessibility(String accessibility) {
            return accessibility(Output.of(accessibility));
        }

        /**
         * @param codeBranch Code repository branch.
         * 
         * @return builder
         * 
         */
        public Builder codeBranch(@Nullable Output<String> codeBranch) {
            $.codeBranch = codeBranch;
            return this;
        }

        /**
         * @param codeBranch Code repository branch.
         * 
         * @return builder
         * 
         */
        public Builder codeBranch(String codeBranch) {
            return codeBranch(Output.of(codeBranch));
        }

        /**
         * @param codeCommit The code CommitId.
         * 
         * @return builder
         * 
         */
        public Builder codeCommit(@Nullable Output<String> codeCommit) {
            $.codeCommit = codeCommit;
            return this;
        }

        /**
         * @param codeCommit The code CommitId.
         * 
         * @return builder
         * 
         */
        public Builder codeCommit(String codeCommit) {
            return codeCommit(Output.of(codeCommit));
        }

        /**
         * @param codeRepo Code repository address.
         * 
         * @return builder
         * 
         */
        public Builder codeRepo(Output<String> codeRepo) {
            $.codeRepo = codeRepo;
            return this;
        }

        /**
         * @param codeRepo Code repository address.
         * 
         * @return builder
         * 
         */
        public Builder codeRepo(String codeRepo) {
            return codeRepo(Output.of(codeRepo));
        }

        /**
         * @param codeRepoAccessToken The Token used to access the code repository.
         * 
         * @return builder
         * 
         */
        public Builder codeRepoAccessToken(@Nullable Output<String> codeRepoAccessToken) {
            $.codeRepoAccessToken = codeRepoAccessToken;
            return this;
        }

        /**
         * @param codeRepoAccessToken The Token used to access the code repository.
         * 
         * @return builder
         * 
         */
        public Builder codeRepoAccessToken(String codeRepoAccessToken) {
            return codeRepoAccessToken(Output.of(codeRepoAccessToken));
        }

        /**
         * @param codeRepoUserName The user name of the code repository.
         * 
         * @return builder
         * 
         */
        public Builder codeRepoUserName(@Nullable Output<String> codeRepoUserName) {
            $.codeRepoUserName = codeRepoUserName;
            return this;
        }

        /**
         * @param codeRepoUserName The user name of the code repository.
         * 
         * @return builder
         * 
         */
        public Builder codeRepoUserName(String codeRepoUserName) {
            return codeRepoUserName(Output.of(codeRepoUserName));
        }

        /**
         * @param description A detailed description of the code configuration.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description A detailed description of the code configuration.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param displayName Code source configuration name.
         * 
         * @return builder
         * 
         */
        public Builder displayName(Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName Code source configuration name.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param mountPath The local Mount Directory of the code.
         * 
         * @return builder
         * 
         */
        public Builder mountPath(Output<String> mountPath) {
            $.mountPath = mountPath;
            return this;
        }

        /**
         * @param mountPath The local Mount Directory of the code.
         * 
         * @return builder
         * 
         */
        public Builder mountPath(String mountPath) {
            return mountPath(Output.of(mountPath));
        }

        /**
         * @param workspaceId The ID of the workspace.
         * 
         * @return builder
         * 
         */
        public Builder workspaceId(Output<String> workspaceId) {
            $.workspaceId = workspaceId;
            return this;
        }

        /**
         * @param workspaceId The ID of the workspace.
         * 
         * @return builder
         * 
         */
        public Builder workspaceId(String workspaceId) {
            return workspaceId(Output.of(workspaceId));
        }

        public WorkspaceCodeSourceArgs build() {
            if ($.accessibility == null) {
                throw new MissingRequiredPropertyException("WorkspaceCodeSourceArgs", "accessibility");
            }
            if ($.codeRepo == null) {
                throw new MissingRequiredPropertyException("WorkspaceCodeSourceArgs", "codeRepo");
            }
            if ($.displayName == null) {
                throw new MissingRequiredPropertyException("WorkspaceCodeSourceArgs", "displayName");
            }
            if ($.mountPath == null) {
                throw new MissingRequiredPropertyException("WorkspaceCodeSourceArgs", "mountPath");
            }
            if ($.workspaceId == null) {
                throw new MissingRequiredPropertyException("WorkspaceCodeSourceArgs", "workspaceId");
            }
            return $;
        }
    }

}
