// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.vpn.outputs;

import com.pulumi.alicloud.vpn.outputs.GetGatewayVpnAttachmentsAttachmentTunnelOptionsSpecificationTunnelBgpConfig;
import com.pulumi.alicloud.vpn.outputs.GetGatewayVpnAttachmentsAttachmentTunnelOptionsSpecificationTunnelIkeConfig;
import com.pulumi.alicloud.vpn.outputs.GetGatewayVpnAttachmentsAttachmentTunnelOptionsSpecificationTunnelIpsecConfig;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetGatewayVpnAttachmentsAttachmentTunnelOptionsSpecification {
    /**
     * @return The ID of the user gateway associated with the tunnel.&gt; This parameter is required when creating a dual-tunnel mode IPsec-VPN connection.
     * 
     */
    private String customerGatewayId;
    /**
     * @return Whether the DPD (peer alive detection) function is enabled for the tunnel. Value:-**true** (default): enable the DPD function. IPsec initiator will send DPD message to check whether the peer device is alive. If the peer device does not receive a correct response within the set time, it is considered that the peer has been disconnected. IPsec will delete ISAKMP SA and the corresponding IPsec SA, and the security tunnel will also be deleted.-**false**: If the DPD function is disabled, the IPsec initiator does not send DPD detection packets.
     * 
     */
    private Boolean enableDpd;
    /**
     * @return Whether the NAT crossing function is enabled for the tunnel. Value:-**true** (default): Enables the NAT Traversal function. When enabled, the IKE negotiation process deletes the verification process of the UDP port number and realizes the discovery function of the NAT gateway device in the tunnel.-**false**: does not enable the NAT Traversal function.
     * 
     */
    private Boolean enableNatTraversal;
    /**
     * @return The local internet IP in Tunnel.
     * 
     */
    private String internetIp;
    /**
     * @return The role of Tunnel.
     * 
     */
    private String role;
    /**
     * @return The state of Tunnel.
     * 
     */
    private String state;
    /**
     * @return The status of the resource. Valid values: `init`, `active`, `attaching`, `attached`, `detaching`, `financialLocked`, `provisioning`, `updating`, `upgrading`, `deleted`.
     * 
     */
    private String status;
    /**
     * @return Add the BGP configuration for the tunnel.&gt; After you enable the BGP function for IPsec connections (that is, specify **EnableTunnelsBgp** as **true**), you must configure this parameter.
     * 
     */
    private GetGatewayVpnAttachmentsAttachmentTunnelOptionsSpecificationTunnelBgpConfig tunnelBgpConfig;
    /**
     * @return The tunnel ID of IPsec-VPN connection.
     * 
     */
    private String tunnelId;
    /**
     * @return Configuration information for the first phase negotiation.
     * 
     */
    private GetGatewayVpnAttachmentsAttachmentTunnelOptionsSpecificationTunnelIkeConfig tunnelIkeConfig;
    /**
     * @return The order in which the tunnel was created.-**1**: First tunnel.-**2**: The second tunnel.
     * 
     */
    private Integer tunnelIndex;
    /**
     * @return Configuration information for the second-stage negotiation.
     * 
     */
    private GetGatewayVpnAttachmentsAttachmentTunnelOptionsSpecificationTunnelIpsecConfig tunnelIpsecConfig;
    /**
     * @return The zoneNo of tunnel.
     * 
     */
    private String zoneNo;

    private GetGatewayVpnAttachmentsAttachmentTunnelOptionsSpecification() {}
    /**
     * @return The ID of the user gateway associated with the tunnel.&gt; This parameter is required when creating a dual-tunnel mode IPsec-VPN connection.
     * 
     */
    public String customerGatewayId() {
        return this.customerGatewayId;
    }
    /**
     * @return Whether the DPD (peer alive detection) function is enabled for the tunnel. Value:-**true** (default): enable the DPD function. IPsec initiator will send DPD message to check whether the peer device is alive. If the peer device does not receive a correct response within the set time, it is considered that the peer has been disconnected. IPsec will delete ISAKMP SA and the corresponding IPsec SA, and the security tunnel will also be deleted.-**false**: If the DPD function is disabled, the IPsec initiator does not send DPD detection packets.
     * 
     */
    public Boolean enableDpd() {
        return this.enableDpd;
    }
    /**
     * @return Whether the NAT crossing function is enabled for the tunnel. Value:-**true** (default): Enables the NAT Traversal function. When enabled, the IKE negotiation process deletes the verification process of the UDP port number and realizes the discovery function of the NAT gateway device in the tunnel.-**false**: does not enable the NAT Traversal function.
     * 
     */
    public Boolean enableNatTraversal() {
        return this.enableNatTraversal;
    }
    /**
     * @return The local internet IP in Tunnel.
     * 
     */
    public String internetIp() {
        return this.internetIp;
    }
    /**
     * @return The role of Tunnel.
     * 
     */
    public String role() {
        return this.role;
    }
    /**
     * @return The state of Tunnel.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return The status of the resource. Valid values: `init`, `active`, `attaching`, `attached`, `detaching`, `financialLocked`, `provisioning`, `updating`, `upgrading`, `deleted`.
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return Add the BGP configuration for the tunnel.&gt; After you enable the BGP function for IPsec connections (that is, specify **EnableTunnelsBgp** as **true**), you must configure this parameter.
     * 
     */
    public GetGatewayVpnAttachmentsAttachmentTunnelOptionsSpecificationTunnelBgpConfig tunnelBgpConfig() {
        return this.tunnelBgpConfig;
    }
    /**
     * @return The tunnel ID of IPsec-VPN connection.
     * 
     */
    public String tunnelId() {
        return this.tunnelId;
    }
    /**
     * @return Configuration information for the first phase negotiation.
     * 
     */
    public GetGatewayVpnAttachmentsAttachmentTunnelOptionsSpecificationTunnelIkeConfig tunnelIkeConfig() {
        return this.tunnelIkeConfig;
    }
    /**
     * @return The order in which the tunnel was created.-**1**: First tunnel.-**2**: The second tunnel.
     * 
     */
    public Integer tunnelIndex() {
        return this.tunnelIndex;
    }
    /**
     * @return Configuration information for the second-stage negotiation.
     * 
     */
    public GetGatewayVpnAttachmentsAttachmentTunnelOptionsSpecificationTunnelIpsecConfig tunnelIpsecConfig() {
        return this.tunnelIpsecConfig;
    }
    /**
     * @return The zoneNo of tunnel.
     * 
     */
    public String zoneNo() {
        return this.zoneNo;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetGatewayVpnAttachmentsAttachmentTunnelOptionsSpecification defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String customerGatewayId;
        private Boolean enableDpd;
        private Boolean enableNatTraversal;
        private String internetIp;
        private String role;
        private String state;
        private String status;
        private GetGatewayVpnAttachmentsAttachmentTunnelOptionsSpecificationTunnelBgpConfig tunnelBgpConfig;
        private String tunnelId;
        private GetGatewayVpnAttachmentsAttachmentTunnelOptionsSpecificationTunnelIkeConfig tunnelIkeConfig;
        private Integer tunnelIndex;
        private GetGatewayVpnAttachmentsAttachmentTunnelOptionsSpecificationTunnelIpsecConfig tunnelIpsecConfig;
        private String zoneNo;
        public Builder() {}
        public Builder(GetGatewayVpnAttachmentsAttachmentTunnelOptionsSpecification defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.customerGatewayId = defaults.customerGatewayId;
    	      this.enableDpd = defaults.enableDpd;
    	      this.enableNatTraversal = defaults.enableNatTraversal;
    	      this.internetIp = defaults.internetIp;
    	      this.role = defaults.role;
    	      this.state = defaults.state;
    	      this.status = defaults.status;
    	      this.tunnelBgpConfig = defaults.tunnelBgpConfig;
    	      this.tunnelId = defaults.tunnelId;
    	      this.tunnelIkeConfig = defaults.tunnelIkeConfig;
    	      this.tunnelIndex = defaults.tunnelIndex;
    	      this.tunnelIpsecConfig = defaults.tunnelIpsecConfig;
    	      this.zoneNo = defaults.zoneNo;
        }

        @CustomType.Setter
        public Builder customerGatewayId(String customerGatewayId) {
            if (customerGatewayId == null) {
              throw new MissingRequiredPropertyException("GetGatewayVpnAttachmentsAttachmentTunnelOptionsSpecification", "customerGatewayId");
            }
            this.customerGatewayId = customerGatewayId;
            return this;
        }
        @CustomType.Setter
        public Builder enableDpd(Boolean enableDpd) {
            if (enableDpd == null) {
              throw new MissingRequiredPropertyException("GetGatewayVpnAttachmentsAttachmentTunnelOptionsSpecification", "enableDpd");
            }
            this.enableDpd = enableDpd;
            return this;
        }
        @CustomType.Setter
        public Builder enableNatTraversal(Boolean enableNatTraversal) {
            if (enableNatTraversal == null) {
              throw new MissingRequiredPropertyException("GetGatewayVpnAttachmentsAttachmentTunnelOptionsSpecification", "enableNatTraversal");
            }
            this.enableNatTraversal = enableNatTraversal;
            return this;
        }
        @CustomType.Setter
        public Builder internetIp(String internetIp) {
            if (internetIp == null) {
              throw new MissingRequiredPropertyException("GetGatewayVpnAttachmentsAttachmentTunnelOptionsSpecification", "internetIp");
            }
            this.internetIp = internetIp;
            return this;
        }
        @CustomType.Setter
        public Builder role(String role) {
            if (role == null) {
              throw new MissingRequiredPropertyException("GetGatewayVpnAttachmentsAttachmentTunnelOptionsSpecification", "role");
            }
            this.role = role;
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetGatewayVpnAttachmentsAttachmentTunnelOptionsSpecification", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            if (status == null) {
              throw new MissingRequiredPropertyException("GetGatewayVpnAttachmentsAttachmentTunnelOptionsSpecification", "status");
            }
            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelBgpConfig(GetGatewayVpnAttachmentsAttachmentTunnelOptionsSpecificationTunnelBgpConfig tunnelBgpConfig) {
            if (tunnelBgpConfig == null) {
              throw new MissingRequiredPropertyException("GetGatewayVpnAttachmentsAttachmentTunnelOptionsSpecification", "tunnelBgpConfig");
            }
            this.tunnelBgpConfig = tunnelBgpConfig;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelId(String tunnelId) {
            if (tunnelId == null) {
              throw new MissingRequiredPropertyException("GetGatewayVpnAttachmentsAttachmentTunnelOptionsSpecification", "tunnelId");
            }
            this.tunnelId = tunnelId;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelIkeConfig(GetGatewayVpnAttachmentsAttachmentTunnelOptionsSpecificationTunnelIkeConfig tunnelIkeConfig) {
            if (tunnelIkeConfig == null) {
              throw new MissingRequiredPropertyException("GetGatewayVpnAttachmentsAttachmentTunnelOptionsSpecification", "tunnelIkeConfig");
            }
            this.tunnelIkeConfig = tunnelIkeConfig;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelIndex(Integer tunnelIndex) {
            if (tunnelIndex == null) {
              throw new MissingRequiredPropertyException("GetGatewayVpnAttachmentsAttachmentTunnelOptionsSpecification", "tunnelIndex");
            }
            this.tunnelIndex = tunnelIndex;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelIpsecConfig(GetGatewayVpnAttachmentsAttachmentTunnelOptionsSpecificationTunnelIpsecConfig tunnelIpsecConfig) {
            if (tunnelIpsecConfig == null) {
              throw new MissingRequiredPropertyException("GetGatewayVpnAttachmentsAttachmentTunnelOptionsSpecification", "tunnelIpsecConfig");
            }
            this.tunnelIpsecConfig = tunnelIpsecConfig;
            return this;
        }
        @CustomType.Setter
        public Builder zoneNo(String zoneNo) {
            if (zoneNo == null) {
              throw new MissingRequiredPropertyException("GetGatewayVpnAttachmentsAttachmentTunnelOptionsSpecification", "zoneNo");
            }
            this.zoneNo = zoneNo;
            return this;
        }
        public GetGatewayVpnAttachmentsAttachmentTunnelOptionsSpecification build() {
            final var _resultValue = new GetGatewayVpnAttachmentsAttachmentTunnelOptionsSpecification();
            _resultValue.customerGatewayId = customerGatewayId;
            _resultValue.enableDpd = enableDpd;
            _resultValue.enableNatTraversal = enableNatTraversal;
            _resultValue.internetIp = internetIp;
            _resultValue.role = role;
            _resultValue.state = state;
            _resultValue.status = status;
            _resultValue.tunnelBgpConfig = tunnelBgpConfig;
            _resultValue.tunnelId = tunnelId;
            _resultValue.tunnelIkeConfig = tunnelIkeConfig;
            _resultValue.tunnelIndex = tunnelIndex;
            _resultValue.tunnelIpsecConfig = tunnelIpsecConfig;
            _resultValue.zoneNo = zoneNo;
            return _resultValue;
        }
    }
}
