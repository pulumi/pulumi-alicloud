// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.edas;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ApplicationScaleArgs extends com.pulumi.resources.ResourceArgs {

    public static final ApplicationScaleArgs Empty = new ApplicationScaleArgs();

    /**
     * The ID of the application that you want to deploy.
     * 
     */
    @Import(name="appId", required=true)
    private Output<String> appId;

    /**
     * @return The ID of the application that you want to deploy.
     * 
     */
    public Output<String> appId() {
        return this.appId;
    }

    /**
     * The ID of the instance group to which you want to add ECS instances to scale out the application.
     * 
     */
    @Import(name="deployGroup", required=true)
    private Output<String> deployGroup;

    /**
     * @return The ID of the instance group to which you want to add ECS instances to scale out the application.
     * 
     */
    public Output<String> deployGroup() {
        return this.deployGroup;
    }

    /**
     * The IDs of the Elastic Compute Unit (ECU) where you want to deploy the application. Type: List.
     * 
     */
    @Import(name="ecuInfos", required=true)
    private Output<List<String>> ecuInfos;

    /**
     * @return The IDs of the Elastic Compute Unit (ECU) where you want to deploy the application. Type: List.
     * 
     */
    public Output<List<String>> ecuInfos() {
        return this.ecuInfos;
    }

    /**
     * This parameter specifies whether to forcibly remove an ECS instance where the application is deployed. It is set as true only after the ECS instance expires. In normal cases, this parameter do not need to be specified.
     * 
     */
    @Import(name="forceStatus")
    private @Nullable Output<Boolean> forceStatus;

    /**
     * @return This parameter specifies whether to forcibly remove an ECS instance where the application is deployed. It is set as true only after the ECS instance expires. In normal cases, this parameter do not need to be specified.
     * 
     */
    public Optional<Output<Boolean>> forceStatus() {
        return Optional.ofNullable(this.forceStatus);
    }

    private ApplicationScaleArgs() {}

    private ApplicationScaleArgs(ApplicationScaleArgs $) {
        this.appId = $.appId;
        this.deployGroup = $.deployGroup;
        this.ecuInfos = $.ecuInfos;
        this.forceStatus = $.forceStatus;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ApplicationScaleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ApplicationScaleArgs $;

        public Builder() {
            $ = new ApplicationScaleArgs();
        }

        public Builder(ApplicationScaleArgs defaults) {
            $ = new ApplicationScaleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param appId The ID of the application that you want to deploy.
         * 
         * @return builder
         * 
         */
        public Builder appId(Output<String> appId) {
            $.appId = appId;
            return this;
        }

        /**
         * @param appId The ID of the application that you want to deploy.
         * 
         * @return builder
         * 
         */
        public Builder appId(String appId) {
            return appId(Output.of(appId));
        }

        /**
         * @param deployGroup The ID of the instance group to which you want to add ECS instances to scale out the application.
         * 
         * @return builder
         * 
         */
        public Builder deployGroup(Output<String> deployGroup) {
            $.deployGroup = deployGroup;
            return this;
        }

        /**
         * @param deployGroup The ID of the instance group to which you want to add ECS instances to scale out the application.
         * 
         * @return builder
         * 
         */
        public Builder deployGroup(String deployGroup) {
            return deployGroup(Output.of(deployGroup));
        }

        /**
         * @param ecuInfos The IDs of the Elastic Compute Unit (ECU) where you want to deploy the application. Type: List.
         * 
         * @return builder
         * 
         */
        public Builder ecuInfos(Output<List<String>> ecuInfos) {
            $.ecuInfos = ecuInfos;
            return this;
        }

        /**
         * @param ecuInfos The IDs of the Elastic Compute Unit (ECU) where you want to deploy the application. Type: List.
         * 
         * @return builder
         * 
         */
        public Builder ecuInfos(List<String> ecuInfos) {
            return ecuInfos(Output.of(ecuInfos));
        }

        /**
         * @param ecuInfos The IDs of the Elastic Compute Unit (ECU) where you want to deploy the application. Type: List.
         * 
         * @return builder
         * 
         */
        public Builder ecuInfos(String... ecuInfos) {
            return ecuInfos(List.of(ecuInfos));
        }

        /**
         * @param forceStatus This parameter specifies whether to forcibly remove an ECS instance where the application is deployed. It is set as true only after the ECS instance expires. In normal cases, this parameter do not need to be specified.
         * 
         * @return builder
         * 
         */
        public Builder forceStatus(@Nullable Output<Boolean> forceStatus) {
            $.forceStatus = forceStatus;
            return this;
        }

        /**
         * @param forceStatus This parameter specifies whether to forcibly remove an ECS instance where the application is deployed. It is set as true only after the ECS instance expires. In normal cases, this parameter do not need to be specified.
         * 
         * @return builder
         * 
         */
        public Builder forceStatus(Boolean forceStatus) {
            return forceStatus(Output.of(forceStatus));
        }

        public ApplicationScaleArgs build() {
            if ($.appId == null) {
                throw new MissingRequiredPropertyException("ApplicationScaleArgs", "appId");
            }
            if ($.deployGroup == null) {
                throw new MissingRequiredPropertyException("ApplicationScaleArgs", "deployGroup");
            }
            if ($.ecuInfos == null) {
                throw new MissingRequiredPropertyException("ApplicationScaleArgs", "ecuInfos");
            }
            return $;
        }
    }

}
