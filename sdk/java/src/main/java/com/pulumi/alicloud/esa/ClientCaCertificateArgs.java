// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.esa;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ClientCaCertificateArgs extends com.pulumi.resources.ResourceArgs {

    public static final ClientCaCertificateArgs Empty = new ClientCaCertificateArgs();

    /**
     * Certificate content.
     * 
     */
    @Import(name="certificate", required=true)
    private Output<String> certificate;

    /**
     * @return Certificate content.
     * 
     */
    public Output<String> certificate() {
        return this.certificate;
    }

    /**
     * The certificate name.
     * 
     */
    @Import(name="clientCaCertName")
    private @Nullable Output<String> clientCaCertName;

    /**
     * @return The certificate name.
     * 
     */
    public Optional<Output<String>> clientCaCertName() {
        return Optional.ofNullable(this.clientCaCertName);
    }

    /**
     * Site Id
     * 
     */
    @Import(name="siteId", required=true)
    private Output<Integer> siteId;

    /**
     * @return Site Id
     * 
     */
    public Output<Integer> siteId() {
        return this.siteId;
    }

    private ClientCaCertificateArgs() {}

    private ClientCaCertificateArgs(ClientCaCertificateArgs $) {
        this.certificate = $.certificate;
        this.clientCaCertName = $.clientCaCertName;
        this.siteId = $.siteId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ClientCaCertificateArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ClientCaCertificateArgs $;

        public Builder() {
            $ = new ClientCaCertificateArgs();
        }

        public Builder(ClientCaCertificateArgs defaults) {
            $ = new ClientCaCertificateArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param certificate Certificate content.
         * 
         * @return builder
         * 
         */
        public Builder certificate(Output<String> certificate) {
            $.certificate = certificate;
            return this;
        }

        /**
         * @param certificate Certificate content.
         * 
         * @return builder
         * 
         */
        public Builder certificate(String certificate) {
            return certificate(Output.of(certificate));
        }

        /**
         * @param clientCaCertName The certificate name.
         * 
         * @return builder
         * 
         */
        public Builder clientCaCertName(@Nullable Output<String> clientCaCertName) {
            $.clientCaCertName = clientCaCertName;
            return this;
        }

        /**
         * @param clientCaCertName The certificate name.
         * 
         * @return builder
         * 
         */
        public Builder clientCaCertName(String clientCaCertName) {
            return clientCaCertName(Output.of(clientCaCertName));
        }

        /**
         * @param siteId Site Id
         * 
         * @return builder
         * 
         */
        public Builder siteId(Output<Integer> siteId) {
            $.siteId = siteId;
            return this;
        }

        /**
         * @param siteId Site Id
         * 
         * @return builder
         * 
         */
        public Builder siteId(Integer siteId) {
            return siteId(Output.of(siteId));
        }

        public ClientCaCertificateArgs build() {
            if ($.certificate == null) {
                throw new MissingRequiredPropertyException("ClientCaCertificateArgs", "certificate");
            }
            if ($.siteId == null) {
                throw new MissingRequiredPropertyException("ClientCaCertificateArgs", "siteId");
            }
            return $;
        }
    }

}
