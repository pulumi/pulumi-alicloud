// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.sls.inputs;

import com.pulumi.alicloud.sls.inputs.EtlConfigurationSinkArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class EtlConfigurationArgs extends com.pulumi.resources.ResourceArgs {

    public static final EtlConfigurationArgs Empty = new EtlConfigurationArgs();

    /**
     * The beginning of the time range for transformation.
     * 
     */
    @Import(name="fromTime", required=true)
    private Output<Integer> fromTime;

    /**
     * @return The beginning of the time range for transformation.
     * 
     */
    public Output<Integer> fromTime() {
        return this.fromTime;
    }

    /**
     * Data processing syntax type.
     * 
     */
    @Import(name="lang", required=true)
    private Output<String> lang;

    /**
     * @return Data processing syntax type.
     * 
     */
    public Output<String> lang() {
        return this.lang;
    }

    /**
     * Destination Logstore Name.
     * 
     */
    @Import(name="logstore", required=true)
    private Output<String> logstore;

    /**
     * @return Destination Logstore Name.
     * 
     */
    public Output<String> logstore() {
        return this.logstore;
    }

    /**
     * Advanced parameter configuration.
     * 
     */
    @Import(name="parameters")
    private @Nullable Output<Map<String,String>> parameters;

    /**
     * @return Advanced parameter configuration.
     * 
     */
    public Optional<Output<Map<String,String>>> parameters() {
        return Optional.ofNullable(this.parameters);
    }

    /**
     * The ARN role that authorizes writing to the target Logstore.
     * 
     */
    @Import(name="roleArn", required=true)
    private Output<String> roleArn;

    /**
     * @return The ARN role that authorizes writing to the target Logstore.
     * 
     */
    public Output<String> roleArn() {
        return this.roleArn;
    }

    /**
     * Processing script.
     * 
     */
    @Import(name="script", required=true)
    private Output<String> script;

    /**
     * @return Processing script.
     * 
     */
    public Output<String> script() {
        return this.script;
    }

    /**
     * Processing result output target list See `sink` below.
     * 
     */
    @Import(name="sinks", required=true)
    private Output<List<EtlConfigurationSinkArgs>> sinks;

    /**
     * @return Processing result output target list See `sink` below.
     * 
     */
    public Output<List<EtlConfigurationSinkArgs>> sinks() {
        return this.sinks;
    }

    /**
     * The end of the time range for transformation.
     * 
     */
    @Import(name="toTime", required=true)
    private Output<Integer> toTime;

    /**
     * @return The end of the time range for transformation.
     * 
     */
    public Output<Integer> toTime() {
        return this.toTime;
    }

    private EtlConfigurationArgs() {}

    private EtlConfigurationArgs(EtlConfigurationArgs $) {
        this.fromTime = $.fromTime;
        this.lang = $.lang;
        this.logstore = $.logstore;
        this.parameters = $.parameters;
        this.roleArn = $.roleArn;
        this.script = $.script;
        this.sinks = $.sinks;
        this.toTime = $.toTime;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(EtlConfigurationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private EtlConfigurationArgs $;

        public Builder() {
            $ = new EtlConfigurationArgs();
        }

        public Builder(EtlConfigurationArgs defaults) {
            $ = new EtlConfigurationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param fromTime The beginning of the time range for transformation.
         * 
         * @return builder
         * 
         */
        public Builder fromTime(Output<Integer> fromTime) {
            $.fromTime = fromTime;
            return this;
        }

        /**
         * @param fromTime The beginning of the time range for transformation.
         * 
         * @return builder
         * 
         */
        public Builder fromTime(Integer fromTime) {
            return fromTime(Output.of(fromTime));
        }

        /**
         * @param lang Data processing syntax type.
         * 
         * @return builder
         * 
         */
        public Builder lang(Output<String> lang) {
            $.lang = lang;
            return this;
        }

        /**
         * @param lang Data processing syntax type.
         * 
         * @return builder
         * 
         */
        public Builder lang(String lang) {
            return lang(Output.of(lang));
        }

        /**
         * @param logstore Destination Logstore Name.
         * 
         * @return builder
         * 
         */
        public Builder logstore(Output<String> logstore) {
            $.logstore = logstore;
            return this;
        }

        /**
         * @param logstore Destination Logstore Name.
         * 
         * @return builder
         * 
         */
        public Builder logstore(String logstore) {
            return logstore(Output.of(logstore));
        }

        /**
         * @param parameters Advanced parameter configuration.
         * 
         * @return builder
         * 
         */
        public Builder parameters(@Nullable Output<Map<String,String>> parameters) {
            $.parameters = parameters;
            return this;
        }

        /**
         * @param parameters Advanced parameter configuration.
         * 
         * @return builder
         * 
         */
        public Builder parameters(Map<String,String> parameters) {
            return parameters(Output.of(parameters));
        }

        /**
         * @param roleArn The ARN role that authorizes writing to the target Logstore.
         * 
         * @return builder
         * 
         */
        public Builder roleArn(Output<String> roleArn) {
            $.roleArn = roleArn;
            return this;
        }

        /**
         * @param roleArn The ARN role that authorizes writing to the target Logstore.
         * 
         * @return builder
         * 
         */
        public Builder roleArn(String roleArn) {
            return roleArn(Output.of(roleArn));
        }

        /**
         * @param script Processing script.
         * 
         * @return builder
         * 
         */
        public Builder script(Output<String> script) {
            $.script = script;
            return this;
        }

        /**
         * @param script Processing script.
         * 
         * @return builder
         * 
         */
        public Builder script(String script) {
            return script(Output.of(script));
        }

        /**
         * @param sinks Processing result output target list See `sink` below.
         * 
         * @return builder
         * 
         */
        public Builder sinks(Output<List<EtlConfigurationSinkArgs>> sinks) {
            $.sinks = sinks;
            return this;
        }

        /**
         * @param sinks Processing result output target list See `sink` below.
         * 
         * @return builder
         * 
         */
        public Builder sinks(List<EtlConfigurationSinkArgs> sinks) {
            return sinks(Output.of(sinks));
        }

        /**
         * @param sinks Processing result output target list See `sink` below.
         * 
         * @return builder
         * 
         */
        public Builder sinks(EtlConfigurationSinkArgs... sinks) {
            return sinks(List.of(sinks));
        }

        /**
         * @param toTime The end of the time range for transformation.
         * 
         * @return builder
         * 
         */
        public Builder toTime(Output<Integer> toTime) {
            $.toTime = toTime;
            return this;
        }

        /**
         * @param toTime The end of the time range for transformation.
         * 
         * @return builder
         * 
         */
        public Builder toTime(Integer toTime) {
            return toTime(Output.of(toTime));
        }

        public EtlConfigurationArgs build() {
            if ($.fromTime == null) {
                throw new MissingRequiredPropertyException("EtlConfigurationArgs", "fromTime");
            }
            if ($.lang == null) {
                throw new MissingRequiredPropertyException("EtlConfigurationArgs", "lang");
            }
            if ($.logstore == null) {
                throw new MissingRequiredPropertyException("EtlConfigurationArgs", "logstore");
            }
            if ($.roleArn == null) {
                throw new MissingRequiredPropertyException("EtlConfigurationArgs", "roleArn");
            }
            if ($.script == null) {
                throw new MissingRequiredPropertyException("EtlConfigurationArgs", "script");
            }
            if ($.sinks == null) {
                throw new MissingRequiredPropertyException("EtlConfigurationArgs", "sinks");
            }
            if ($.toTime == null) {
                throw new MissingRequiredPropertyException("EtlConfigurationArgs", "toTime");
            }
            return $;
        }
    }

}
