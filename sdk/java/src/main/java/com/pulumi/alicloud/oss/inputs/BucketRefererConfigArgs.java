// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.oss.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class BucketRefererConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final BucketRefererConfigArgs Empty = new BucketRefererConfigArgs();

    /**
     * Allows referer to be empty. Defaults false.
     * 
     */
    @Import(name="allowEmpty")
    private @Nullable Output<Boolean> allowEmpty;

    /**
     * @return Allows referer to be empty. Defaults false.
     * 
     */
    public Optional<Output<Boolean>> allowEmpty() {
        return Optional.ofNullable(this.allowEmpty);
    }

    /**
     * The list of referer.
     * 
     */
    @Import(name="referers", required=true)
    private Output<List<String>> referers;

    /**
     * @return The list of referer.
     * 
     */
    public Output<List<String>> referers() {
        return this.referers;
    }

    private BucketRefererConfigArgs() {}

    private BucketRefererConfigArgs(BucketRefererConfigArgs $) {
        this.allowEmpty = $.allowEmpty;
        this.referers = $.referers;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BucketRefererConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BucketRefererConfigArgs $;

        public Builder() {
            $ = new BucketRefererConfigArgs();
        }

        public Builder(BucketRefererConfigArgs defaults) {
            $ = new BucketRefererConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param allowEmpty Allows referer to be empty. Defaults false.
         * 
         * @return builder
         * 
         */
        public Builder allowEmpty(@Nullable Output<Boolean> allowEmpty) {
            $.allowEmpty = allowEmpty;
            return this;
        }

        /**
         * @param allowEmpty Allows referer to be empty. Defaults false.
         * 
         * @return builder
         * 
         */
        public Builder allowEmpty(Boolean allowEmpty) {
            return allowEmpty(Output.of(allowEmpty));
        }

        /**
         * @param referers The list of referer.
         * 
         * @return builder
         * 
         */
        public Builder referers(Output<List<String>> referers) {
            $.referers = referers;
            return this;
        }

        /**
         * @param referers The list of referer.
         * 
         * @return builder
         * 
         */
        public Builder referers(List<String> referers) {
            return referers(Output.of(referers));
        }

        /**
         * @param referers The list of referer.
         * 
         * @return builder
         * 
         */
        public Builder referers(String... referers) {
            return referers(List.of(referers));
        }

        public BucketRefererConfigArgs build() {
            if ($.referers == null) {
                throw new MissingRequiredPropertyException("BucketRefererConfigArgs", "referers");
            }
            return $;
        }
    }

}
