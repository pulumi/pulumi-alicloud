// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.alb.outputs;

import com.pulumi.alicloud.alb.outputs.RuleRuleConditionCookieConfig;
import com.pulumi.alicloud.alb.outputs.RuleRuleConditionHeaderConfig;
import com.pulumi.alicloud.alb.outputs.RuleRuleConditionHostConfig;
import com.pulumi.alicloud.alb.outputs.RuleRuleConditionMethodConfig;
import com.pulumi.alicloud.alb.outputs.RuleRuleConditionPathConfig;
import com.pulumi.alicloud.alb.outputs.RuleRuleConditionQueryStringConfig;
import com.pulumi.alicloud.alb.outputs.RuleRuleConditionResponseHeaderConfig;
import com.pulumi.alicloud.alb.outputs.RuleRuleConditionResponseStatusCodeConfig;
import com.pulumi.alicloud.alb.outputs.RuleRuleConditionSourceIpConfig;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class RuleRuleCondition {
    /**
     * @return The configuration of the cookie. See See `cookie_config` below.
     * 
     */
    private @Nullable RuleRuleConditionCookieConfig cookieConfig;
    /**
     * @return The configuration of the header field. See `header_config` below.
     * 
     */
    private @Nullable RuleRuleConditionHeaderConfig headerConfig;
    /**
     * @return The configuration of the host field. See `host_config` below.
     * 
     */
    private @Nullable RuleRuleConditionHostConfig hostConfig;
    /**
     * @return The configuration of the request method. See `method_config` below.
     * 
     */
    private @Nullable RuleRuleConditionMethodConfig methodConfig;
    /**
     * @return The configuration of the path for the request to be forwarded. See `path_config` below.
     * 
     */
    private @Nullable RuleRuleConditionPathConfig pathConfig;
    /**
     * @return The configuration of the query string. See `query_string_config` below.
     * 
     */
    private @Nullable RuleRuleConditionQueryStringConfig queryStringConfig;
    /**
     * @return The configuration of the header field. See `response_header_config` below.
     * 
     */
    private @Nullable RuleRuleConditionResponseHeaderConfig responseHeaderConfig;
    /**
     * @return The configuration of the header field. See `response_status_code_config` below.
     * 
     */
    private @Nullable RuleRuleConditionResponseStatusCodeConfig responseStatusCodeConfig;
    /**
     * @return The Based on source IP traffic matching. Required and valid when Type is SourceIP. See `source_ip_config` below.
     * 
     */
    private @Nullable RuleRuleConditionSourceIpConfig sourceIpConfig;
    /**
     * @return The type of the forwarding rule. Valid values:
     * 
     */
    private String type;

    private RuleRuleCondition() {}
    /**
     * @return The configuration of the cookie. See See `cookie_config` below.
     * 
     */
    public Optional<RuleRuleConditionCookieConfig> cookieConfig() {
        return Optional.ofNullable(this.cookieConfig);
    }
    /**
     * @return The configuration of the header field. See `header_config` below.
     * 
     */
    public Optional<RuleRuleConditionHeaderConfig> headerConfig() {
        return Optional.ofNullable(this.headerConfig);
    }
    /**
     * @return The configuration of the host field. See `host_config` below.
     * 
     */
    public Optional<RuleRuleConditionHostConfig> hostConfig() {
        return Optional.ofNullable(this.hostConfig);
    }
    /**
     * @return The configuration of the request method. See `method_config` below.
     * 
     */
    public Optional<RuleRuleConditionMethodConfig> methodConfig() {
        return Optional.ofNullable(this.methodConfig);
    }
    /**
     * @return The configuration of the path for the request to be forwarded. See `path_config` below.
     * 
     */
    public Optional<RuleRuleConditionPathConfig> pathConfig() {
        return Optional.ofNullable(this.pathConfig);
    }
    /**
     * @return The configuration of the query string. See `query_string_config` below.
     * 
     */
    public Optional<RuleRuleConditionQueryStringConfig> queryStringConfig() {
        return Optional.ofNullable(this.queryStringConfig);
    }
    /**
     * @return The configuration of the header field. See `response_header_config` below.
     * 
     */
    public Optional<RuleRuleConditionResponseHeaderConfig> responseHeaderConfig() {
        return Optional.ofNullable(this.responseHeaderConfig);
    }
    /**
     * @return The configuration of the header field. See `response_status_code_config` below.
     * 
     */
    public Optional<RuleRuleConditionResponseStatusCodeConfig> responseStatusCodeConfig() {
        return Optional.ofNullable(this.responseStatusCodeConfig);
    }
    /**
     * @return The Based on source IP traffic matching. Required and valid when Type is SourceIP. See `source_ip_config` below.
     * 
     */
    public Optional<RuleRuleConditionSourceIpConfig> sourceIpConfig() {
        return Optional.ofNullable(this.sourceIpConfig);
    }
    /**
     * @return The type of the forwarding rule. Valid values:
     * 
     */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RuleRuleCondition defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable RuleRuleConditionCookieConfig cookieConfig;
        private @Nullable RuleRuleConditionHeaderConfig headerConfig;
        private @Nullable RuleRuleConditionHostConfig hostConfig;
        private @Nullable RuleRuleConditionMethodConfig methodConfig;
        private @Nullable RuleRuleConditionPathConfig pathConfig;
        private @Nullable RuleRuleConditionQueryStringConfig queryStringConfig;
        private @Nullable RuleRuleConditionResponseHeaderConfig responseHeaderConfig;
        private @Nullable RuleRuleConditionResponseStatusCodeConfig responseStatusCodeConfig;
        private @Nullable RuleRuleConditionSourceIpConfig sourceIpConfig;
        private String type;
        public Builder() {}
        public Builder(RuleRuleCondition defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.cookieConfig = defaults.cookieConfig;
    	      this.headerConfig = defaults.headerConfig;
    	      this.hostConfig = defaults.hostConfig;
    	      this.methodConfig = defaults.methodConfig;
    	      this.pathConfig = defaults.pathConfig;
    	      this.queryStringConfig = defaults.queryStringConfig;
    	      this.responseHeaderConfig = defaults.responseHeaderConfig;
    	      this.responseStatusCodeConfig = defaults.responseStatusCodeConfig;
    	      this.sourceIpConfig = defaults.sourceIpConfig;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder cookieConfig(@Nullable RuleRuleConditionCookieConfig cookieConfig) {

            this.cookieConfig = cookieConfig;
            return this;
        }
        @CustomType.Setter
        public Builder headerConfig(@Nullable RuleRuleConditionHeaderConfig headerConfig) {

            this.headerConfig = headerConfig;
            return this;
        }
        @CustomType.Setter
        public Builder hostConfig(@Nullable RuleRuleConditionHostConfig hostConfig) {

            this.hostConfig = hostConfig;
            return this;
        }
        @CustomType.Setter
        public Builder methodConfig(@Nullable RuleRuleConditionMethodConfig methodConfig) {

            this.methodConfig = methodConfig;
            return this;
        }
        @CustomType.Setter
        public Builder pathConfig(@Nullable RuleRuleConditionPathConfig pathConfig) {

            this.pathConfig = pathConfig;
            return this;
        }
        @CustomType.Setter
        public Builder queryStringConfig(@Nullable RuleRuleConditionQueryStringConfig queryStringConfig) {

            this.queryStringConfig = queryStringConfig;
            return this;
        }
        @CustomType.Setter
        public Builder responseHeaderConfig(@Nullable RuleRuleConditionResponseHeaderConfig responseHeaderConfig) {

            this.responseHeaderConfig = responseHeaderConfig;
            return this;
        }
        @CustomType.Setter
        public Builder responseStatusCodeConfig(@Nullable RuleRuleConditionResponseStatusCodeConfig responseStatusCodeConfig) {

            this.responseStatusCodeConfig = responseStatusCodeConfig;
            return this;
        }
        @CustomType.Setter
        public Builder sourceIpConfig(@Nullable RuleRuleConditionSourceIpConfig sourceIpConfig) {

            this.sourceIpConfig = sourceIpConfig;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("RuleRuleCondition", "type");
            }
            this.type = type;
            return this;
        }
        public RuleRuleCondition build() {
            final var _resultValue = new RuleRuleCondition();
            _resultValue.cookieConfig = cookieConfig;
            _resultValue.headerConfig = headerConfig;
            _resultValue.hostConfig = hostConfig;
            _resultValue.methodConfig = methodConfig;
            _resultValue.pathConfig = pathConfig;
            _resultValue.queryStringConfig = queryStringConfig;
            _resultValue.responseHeaderConfig = responseHeaderConfig;
            _resultValue.responseStatusCodeConfig = responseStatusCodeConfig;
            _resultValue.sourceIpConfig = sourceIpConfig;
            _resultValue.type = type;
            return _resultValue;
        }
    }
}
