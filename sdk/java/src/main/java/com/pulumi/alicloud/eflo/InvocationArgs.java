// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.eflo;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class InvocationArgs extends com.pulumi.resources.ResourceArgs {

    public static final InvocationArgs Empty = new InvocationArgs();

    /**
     * The command content. You need to pay attention:
     * - Specify the parameter &#39;EnableParameter = true&#39; to enable the custom parameter feature in the command content.
     * - Define custom parameters in the form of {{}} inclusion, and spaces and line breaks before and after the parameter name in &#39;{{}}&#39; are ignored.
     * - The number of custom parameters cannot exceed 20.
     * - Custom parameter names can a-zA-Z0-9 a combination of-_. Other characters are not supported. Parameter names are not case-sensitive.
     * - A single custom parameter name cannot exceed 64 bytes.
     * 
     */
    @Import(name="commandContent")
    private @Nullable Output<String> commandContent;

    /**
     * @return The command content. You need to pay attention:
     * - Specify the parameter &#39;EnableParameter = true&#39; to enable the custom parameter feature in the command content.
     * - Define custom parameters in the form of {{}} inclusion, and spaces and line breaks before and after the parameter name in &#39;{{}}&#39; are ignored.
     * - The number of custom parameters cannot exceed 20.
     * - Custom parameter names can a-zA-Z0-9 a combination of-_. Other characters are not supported. Parameter names are not case-sensitive.
     * - A single custom parameter name cannot exceed 64 bytes.
     * 
     */
    public Optional<Output<String>> commandContent() {
        return Optional.ofNullable(this.commandContent);
    }

    /**
     * Command ID
     * 
     */
    @Import(name="commandId")
    private @Nullable Output<String> commandId;

    /**
     * @return Command ID
     * 
     */
    public Optional<Output<String>> commandId() {
        return Optional.ofNullable(this.commandId);
    }

    /**
     * The encoding of the script content. Value range:
     * - PlainText: no encoding, using PlainText transmission.
     * - Base64:Base64 encoding.
     * 
     * Default value: PlainText. If you fill it randomly or wrongly, the value will be treated as a PlainText.
     * 
     */
    @Import(name="contentEncoding")
    private @Nullable Output<String> contentEncoding;

    /**
     * @return The encoding of the script content. Value range:
     * - PlainText: no encoding, using PlainText transmission.
     * - Base64:Base64 encoding.
     * 
     * Default value: PlainText. If you fill it randomly or wrongly, the value will be treated as a PlainText.
     * 
     */
    public Optional<Output<String>> contentEncoding() {
        return Optional.ofNullable(this.contentEncoding);
    }

    /**
     * The command description.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The command description.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Whether custom parameters are included in the command.
     * Default value: false.
     * 
     */
    @Import(name="enableParameter")
    private @Nullable Output<Boolean> enableParameter;

    /**
     * @return Whether custom parameters are included in the command.
     * Default value: false.
     * 
     */
    public Optional<Output<Boolean>> enableParameter() {
        return Optional.ofNullable(this.enableParameter);
    }

    /**
     * The execution time of the scheduled execution command. Currently, three scheduled execution methods are supported: fixed interval execution (based on Rate expression), only once at a specified time, and timed execution based on clock (based on Cron expression).
     * - Fixed time interval execution: Based on the Rate expression, the command is executed at the set time interval. Time intervals can be selected by seconds (s), minutes (m), hours (h), and days (d), which is suitable for scenarios where tasks are executed at fixed time intervals. The format is rate( ). If the execution is performed every 5 minutes, the format is rate(5m). Executing with a fixed time interval has the following limitations:
     * - The set time interval is no more than 7 days and no less than 60 seconds, and must be greater than the timeout period of the scheduled task.
     * - The execution interval is based only on a fixed frequency, independent of the time the task actually takes to execute. For example, if the command is executed every 5 minutes and the task takes 2 minutes to complete, the next round will be executed 3 minutes after the task is completed.
     * - The task is not executed immediately when it is created. For example, if a command is executed every 5 minutes, the command is not executed immediately when a task is created, but is executed 5 minutes after the task is created.
     * - Execute only once at the specified time: Execute the command once according to the set time zone and execution time point. The format is at(yyyy-MM-dd HH:mm:ss ), that is, at (year-month-day time: minute: Second ). If you do not specify a time zone, the default is the UTC time zone. Time zones can be in the following three formats: the full name of the time zone, such as Asia/Shanghai (China/Shanghai time), America/los_angles (United States/Los Angeles time), and so on. The offset of the time zone relative to Greenwich Mean Time: E.G. GMT +8:00 (East Zone 8), GMT-7 (West Zone 7), etc. When using the GMT format, the hour bit does not support adding leading zeros. Time zone abbreviation: Only UTC (Coordinated Universal Time) is supported.
     *   If it is specified to be executed once 13:15:30 June 06, 2022, China/Shanghai time, the format is at (Asia/Shanghai, 2022-06-06 13:15:30); If it is specified to be executed once 13:15:30 June 06, 2022, the format is at(2022-06-06 13:15:30 GMT-7:00).
     * - Timing based on clock (based on Cron expression): Based on Cron expression, commands are executed according to the set timing task. The format is        , that is,  . In the specified time zone, calculate the execution time of the scheduled task based on the Cron expression and execute it. If no time zone is specified, the default time zone is the internal time zone of the scheduled task instance. For more information about Cron expressions, see Cron Expressions. Time zones support the following three forms:
     * - Full time zone name: such as Asia/Shanghai (China/Shanghai time), America/los_angles (US/Los Angeles time), etc.
     * - The offset of the time zone relative to Greenwich Mean Time: E.G. GMT +8:00 (East Zone 8), GMT-7 (West Zone 7), etc. When using the GMT format, the hour bit does not support adding leading zeros.
     * - Time zone abbreviation: Only UTC (Coordinated Universal Time) is supported.
     * 
     * For example, in China/Shanghai time, the command will be executed once every day at 10:15 am in 2022 in the format 0 15 10? * * 2022 Asia/Shanghai; In the eastern 8th District time, it will be executed every half hour from 10:00 a.m. to 11:30 a.m. every day in 2022, in the format of 0 0/30 10-11 * *? 2022 GMT +8:00; In UTC time, starting from 2022, it will be executed every 5 minutes from 14:00 P.M. to 14:55 p. M. Every two years in October, in the format of 0 0/5 14*10? 2022/2 UTC.
     * 
     */
    @Import(name="frequency")
    private @Nullable Output<String> frequency;

    /**
     * @return The execution time of the scheduled execution command. Currently, three scheduled execution methods are supported: fixed interval execution (based on Rate expression), only once at a specified time, and timed execution based on clock (based on Cron expression).
     * - Fixed time interval execution: Based on the Rate expression, the command is executed at the set time interval. Time intervals can be selected by seconds (s), minutes (m), hours (h), and days (d), which is suitable for scenarios where tasks are executed at fixed time intervals. The format is rate( ). If the execution is performed every 5 minutes, the format is rate(5m). Executing with a fixed time interval has the following limitations:
     * - The set time interval is no more than 7 days and no less than 60 seconds, and must be greater than the timeout period of the scheduled task.
     * - The execution interval is based only on a fixed frequency, independent of the time the task actually takes to execute. For example, if the command is executed every 5 minutes and the task takes 2 minutes to complete, the next round will be executed 3 minutes after the task is completed.
     * - The task is not executed immediately when it is created. For example, if a command is executed every 5 minutes, the command is not executed immediately when a task is created, but is executed 5 minutes after the task is created.
     * - Execute only once at the specified time: Execute the command once according to the set time zone and execution time point. The format is at(yyyy-MM-dd HH:mm:ss ), that is, at (year-month-day time: minute: Second ). If you do not specify a time zone, the default is the UTC time zone. Time zones can be in the following three formats: the full name of the time zone, such as Asia/Shanghai (China/Shanghai time), America/los_angles (United States/Los Angeles time), and so on. The offset of the time zone relative to Greenwich Mean Time: E.G. GMT +8:00 (East Zone 8), GMT-7 (West Zone 7), etc. When using the GMT format, the hour bit does not support adding leading zeros. Time zone abbreviation: Only UTC (Coordinated Universal Time) is supported.
     *   If it is specified to be executed once 13:15:30 June 06, 2022, China/Shanghai time, the format is at (Asia/Shanghai, 2022-06-06 13:15:30); If it is specified to be executed once 13:15:30 June 06, 2022, the format is at(2022-06-06 13:15:30 GMT-7:00).
     * - Timing based on clock (based on Cron expression): Based on Cron expression, commands are executed according to the set timing task. The format is        , that is,  . In the specified time zone, calculate the execution time of the scheduled task based on the Cron expression and execute it. If no time zone is specified, the default time zone is the internal time zone of the scheduled task instance. For more information about Cron expressions, see Cron Expressions. Time zones support the following three forms:
     * - Full time zone name: such as Asia/Shanghai (China/Shanghai time), America/los_angles (US/Los Angeles time), etc.
     * - The offset of the time zone relative to Greenwich Mean Time: E.G. GMT +8:00 (East Zone 8), GMT-7 (West Zone 7), etc. When using the GMT format, the hour bit does not support adding leading zeros.
     * - Time zone abbreviation: Only UTC (Coordinated Universal Time) is supported.
     * 
     * For example, in China/Shanghai time, the command will be executed once every day at 10:15 am in 2022 in the format 0 15 10? * * 2022 Asia/Shanghai; In the eastern 8th District time, it will be executed every half hour from 10:00 a.m. to 11:30 a.m. every day in 2022, in the format of 0 0/30 10-11 * *? 2022 GMT +8:00; In UTC time, starting from 2022, it will be executed every 5 minutes from 14:00 P.M. to 14:55 p. M. Every two years in October, in the format of 0 0/5 14*10? 2022/2 UTC.
     * 
     */
    public Optional<Output<String>> frequency() {
        return Optional.ofNullable(this.frequency);
    }

    /**
     * The bootstrapper for script execution. The length cannot exceed 1KB.
     * 
     */
    @Import(name="launcher")
    private @Nullable Output<String> launcher;

    /**
     * @return The bootstrapper for script execution. The length cannot exceed 1KB.
     * 
     */
    public Optional<Output<String>> launcher() {
        return Optional.ofNullable(this.launcher);
    }

    /**
     * The command name.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The command name.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * A list of nodes.
     * 
     */
    @Import(name="nodeIdLists")
    private @Nullable Output<List<String>> nodeIdLists;

    /**
     * @return A list of nodes.
     * 
     */
    public Optional<Output<List<String>>> nodeIdLists() {
        return Optional.ofNullable(this.nodeIdLists);
    }

    /**
     * When the command contains custom parameters, the key-value pair of the custom parameters passed in when the command is executed. For example, if the command content is &#39;echo {{name}}&#39;, the key-value pair&#39;{&#34;name&#34;:&#34;Jack&#34;}&#39;can be passed through the &#39;Parameter&#39; parameter&#39;. The custom parameter will automatically replace the variable value &#39;name&#39; to get a new command that actually executes &#39;echo Jack &#39;.
     * 
     * The number of custom parameters ranges from 0 to 10, and you need to pay attention:
     * - The key is not allowed to be an empty string and supports a maximum of 64 characters.
     * - The value is allowed to be an empty string.
     * - After the custom parameters and the original command content are encoded in Base64, if the command is saved, the size of the command content after Base64 encoding cannot exceed 18KB. If the command is not saved, the size of the command content after Base64 encoding cannot exceed 24KB. You can set whether to keep the command through &#39;KeepCommand.
     * - The set of custom parameter names must be a subset of the parameter set defined when the command is created. For parameters that are not passed in, you can use an empty string instead.
     * 
     * The default value is empty, which means that the parameter is unset and the custom parameter is disabled.
     * 
     */
    @Import(name="parameters")
    private @Nullable Output<Map<String,String>> parameters;

    /**
     * @return When the command contains custom parameters, the key-value pair of the custom parameters passed in when the command is executed. For example, if the command content is &#39;echo {{name}}&#39;, the key-value pair&#39;{&#34;name&#34;:&#34;Jack&#34;}&#39;can be passed through the &#39;Parameter&#39; parameter&#39;. The custom parameter will automatically replace the variable value &#39;name&#39; to get a new command that actually executes &#39;echo Jack &#39;.
     * 
     * The number of custom parameters ranges from 0 to 10, and you need to pay attention:
     * - The key is not allowed to be an empty string and supports a maximum of 64 characters.
     * - The value is allowed to be an empty string.
     * - After the custom parameters and the original command content are encoded in Base64, if the command is saved, the size of the command content after Base64 encoding cannot exceed 18KB. If the command is not saved, the size of the command content after Base64 encoding cannot exceed 24KB. You can set whether to keep the command through &#39;KeepCommand.
     * - The set of custom parameter names must be a subset of the parameter set defined when the command is created. For parameters that are not passed in, you can use an empty string instead.
     * 
     * The default value is empty, which means that the parameter is unset and the custom parameter is disabled.
     * 
     */
    public Optional<Output<Map<String,String>>> parameters() {
        return Optional.ofNullable(this.parameters);
    }

    /**
     * Sets the way the command is executed. Value range:
     * - Once: Execute the command immediately.
     * - Period: executes the command regularly. When the value of this parameter is &#39;Period&#39;, the &#39;Frequency&#39; parameter must also be specified.
     * - NextRebootOnly: Automatically execute the command when the instance is next started.
     * - EveryReboot: The command is automatically executed every time the instance is started.
     * 
     * Default:
     * - When the&#39;frequency&#39; parameter is not specified, the default value is&#39;once &#39;.
     * - When the&#39;frequency&#39; parameter is specified, regardless of whether the parameter value has been set or not, it will be processed according to&#39;period.
     * 
     */
    @Import(name="repeatMode")
    private @Nullable Output<String> repeatMode;

    /**
     * @return Sets the way the command is executed. Value range:
     * - Once: Execute the command immediately.
     * - Period: executes the command regularly. When the value of this parameter is &#39;Period&#39;, the &#39;Frequency&#39; parameter must also be specified.
     * - NextRebootOnly: Automatically execute the command when the instance is next started.
     * - EveryReboot: The command is automatically executed every time the instance is started.
     * 
     * Default:
     * - When the&#39;frequency&#39; parameter is not specified, the default value is&#39;once &#39;.
     * - When the&#39;frequency&#39; parameter is specified, regardless of whether the parameter value has been set or not, it will be processed according to&#39;period.
     * 
     */
    public Optional<Output<String>> repeatMode() {
        return Optional.ofNullable(this.repeatMode);
    }

    /**
     * The mode when the task is stopped (manually stopped or execution time-out interrupted). Possible values:
     * Process: Stops the current script Process.
     * ProcessTree: Stops the current process tree (the script process and the collection of all child processes it created)
     * 
     */
    @Import(name="terminationMode")
    private @Nullable Output<String> terminationMode;

    /**
     * @return The mode when the task is stopped (manually stopped or execution time-out interrupted). Possible values:
     * Process: Stops the current script Process.
     * ProcessTree: Stops the current process tree (the script process and the collection of all child processes it created)
     * 
     */
    public Optional<Output<String>> terminationMode() {
        return Optional.ofNullable(this.terminationMode);
    }

    /**
     * The timeout period for command execution. Unit: seconds. A timeout occurs when a command cannot be run due to a process, a missing module, or a missing cloud assistant Agent. After the timeout, the command process is forcibly terminated. Default value: 60.
     * 
     */
    @Import(name="timeout")
    private @Nullable Output<Integer> timeout;

    /**
     * @return The timeout period for command execution. Unit: seconds. A timeout occurs when a command cannot be run due to a process, a missing module, or a missing cloud assistant Agent. After the timeout, the command process is forcibly terminated. Default value: 60.
     * 
     */
    public Optional<Output<Integer>> timeout() {
        return Optional.ofNullable(this.timeout);
    }

    /**
     * The name of the user who executed the command in the instance. The length must not exceed 255 characters.
     * The instance of the Linux system. By default, the root user runs commands.
     * 
     */
    @Import(name="username")
    private @Nullable Output<String> username;

    /**
     * @return The name of the user who executed the command in the instance. The length must not exceed 255 characters.
     * The instance of the Linux system. By default, the root user runs commands.
     * 
     */
    public Optional<Output<String>> username() {
        return Optional.ofNullable(this.username);
    }

    /**
     * You can customize the command execution path. The default path is as follows:
     * Linux instance: the execution path is in the/home directory of the root user by default.
     * 
     */
    @Import(name="workingDir")
    private @Nullable Output<String> workingDir;

    /**
     * @return You can customize the command execution path. The default path is as follows:
     * Linux instance: the execution path is in the/home directory of the root user by default.
     * 
     */
    public Optional<Output<String>> workingDir() {
        return Optional.ofNullable(this.workingDir);
    }

    private InvocationArgs() {}

    private InvocationArgs(InvocationArgs $) {
        this.commandContent = $.commandContent;
        this.commandId = $.commandId;
        this.contentEncoding = $.contentEncoding;
        this.description = $.description;
        this.enableParameter = $.enableParameter;
        this.frequency = $.frequency;
        this.launcher = $.launcher;
        this.name = $.name;
        this.nodeIdLists = $.nodeIdLists;
        this.parameters = $.parameters;
        this.repeatMode = $.repeatMode;
        this.terminationMode = $.terminationMode;
        this.timeout = $.timeout;
        this.username = $.username;
        this.workingDir = $.workingDir;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(InvocationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private InvocationArgs $;

        public Builder() {
            $ = new InvocationArgs();
        }

        public Builder(InvocationArgs defaults) {
            $ = new InvocationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param commandContent The command content. You need to pay attention:
         * - Specify the parameter &#39;EnableParameter = true&#39; to enable the custom parameter feature in the command content.
         * - Define custom parameters in the form of {{}} inclusion, and spaces and line breaks before and after the parameter name in &#39;{{}}&#39; are ignored.
         * - The number of custom parameters cannot exceed 20.
         * - Custom parameter names can a-zA-Z0-9 a combination of-_. Other characters are not supported. Parameter names are not case-sensitive.
         * - A single custom parameter name cannot exceed 64 bytes.
         * 
         * @return builder
         * 
         */
        public Builder commandContent(@Nullable Output<String> commandContent) {
            $.commandContent = commandContent;
            return this;
        }

        /**
         * @param commandContent The command content. You need to pay attention:
         * - Specify the parameter &#39;EnableParameter = true&#39; to enable the custom parameter feature in the command content.
         * - Define custom parameters in the form of {{}} inclusion, and spaces and line breaks before and after the parameter name in &#39;{{}}&#39; are ignored.
         * - The number of custom parameters cannot exceed 20.
         * - Custom parameter names can a-zA-Z0-9 a combination of-_. Other characters are not supported. Parameter names are not case-sensitive.
         * - A single custom parameter name cannot exceed 64 bytes.
         * 
         * @return builder
         * 
         */
        public Builder commandContent(String commandContent) {
            return commandContent(Output.of(commandContent));
        }

        /**
         * @param commandId Command ID
         * 
         * @return builder
         * 
         */
        public Builder commandId(@Nullable Output<String> commandId) {
            $.commandId = commandId;
            return this;
        }

        /**
         * @param commandId Command ID
         * 
         * @return builder
         * 
         */
        public Builder commandId(String commandId) {
            return commandId(Output.of(commandId));
        }

        /**
         * @param contentEncoding The encoding of the script content. Value range:
         * - PlainText: no encoding, using PlainText transmission.
         * - Base64:Base64 encoding.
         * 
         * Default value: PlainText. If you fill it randomly or wrongly, the value will be treated as a PlainText.
         * 
         * @return builder
         * 
         */
        public Builder contentEncoding(@Nullable Output<String> contentEncoding) {
            $.contentEncoding = contentEncoding;
            return this;
        }

        /**
         * @param contentEncoding The encoding of the script content. Value range:
         * - PlainText: no encoding, using PlainText transmission.
         * - Base64:Base64 encoding.
         * 
         * Default value: PlainText. If you fill it randomly or wrongly, the value will be treated as a PlainText.
         * 
         * @return builder
         * 
         */
        public Builder contentEncoding(String contentEncoding) {
            return contentEncoding(Output.of(contentEncoding));
        }

        /**
         * @param description The command description.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The command description.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param enableParameter Whether custom parameters are included in the command.
         * Default value: false.
         * 
         * @return builder
         * 
         */
        public Builder enableParameter(@Nullable Output<Boolean> enableParameter) {
            $.enableParameter = enableParameter;
            return this;
        }

        /**
         * @param enableParameter Whether custom parameters are included in the command.
         * Default value: false.
         * 
         * @return builder
         * 
         */
        public Builder enableParameter(Boolean enableParameter) {
            return enableParameter(Output.of(enableParameter));
        }

        /**
         * @param frequency The execution time of the scheduled execution command. Currently, three scheduled execution methods are supported: fixed interval execution (based on Rate expression), only once at a specified time, and timed execution based on clock (based on Cron expression).
         * - Fixed time interval execution: Based on the Rate expression, the command is executed at the set time interval. Time intervals can be selected by seconds (s), minutes (m), hours (h), and days (d), which is suitable for scenarios where tasks are executed at fixed time intervals. The format is rate( ). If the execution is performed every 5 minutes, the format is rate(5m). Executing with a fixed time interval has the following limitations:
         * - The set time interval is no more than 7 days and no less than 60 seconds, and must be greater than the timeout period of the scheduled task.
         * - The execution interval is based only on a fixed frequency, independent of the time the task actually takes to execute. For example, if the command is executed every 5 minutes and the task takes 2 minutes to complete, the next round will be executed 3 minutes after the task is completed.
         * - The task is not executed immediately when it is created. For example, if a command is executed every 5 minutes, the command is not executed immediately when a task is created, but is executed 5 minutes after the task is created.
         * - Execute only once at the specified time: Execute the command once according to the set time zone and execution time point. The format is at(yyyy-MM-dd HH:mm:ss ), that is, at (year-month-day time: minute: Second ). If you do not specify a time zone, the default is the UTC time zone. Time zones can be in the following three formats: the full name of the time zone, such as Asia/Shanghai (China/Shanghai time), America/los_angles (United States/Los Angeles time), and so on. The offset of the time zone relative to Greenwich Mean Time: E.G. GMT +8:00 (East Zone 8), GMT-7 (West Zone 7), etc. When using the GMT format, the hour bit does not support adding leading zeros. Time zone abbreviation: Only UTC (Coordinated Universal Time) is supported.
         *   If it is specified to be executed once 13:15:30 June 06, 2022, China/Shanghai time, the format is at (Asia/Shanghai, 2022-06-06 13:15:30); If it is specified to be executed once 13:15:30 June 06, 2022, the format is at(2022-06-06 13:15:30 GMT-7:00).
         * - Timing based on clock (based on Cron expression): Based on Cron expression, commands are executed according to the set timing task. The format is        , that is,  . In the specified time zone, calculate the execution time of the scheduled task based on the Cron expression and execute it. If no time zone is specified, the default time zone is the internal time zone of the scheduled task instance. For more information about Cron expressions, see Cron Expressions. Time zones support the following three forms:
         * - Full time zone name: such as Asia/Shanghai (China/Shanghai time), America/los_angles (US/Los Angeles time), etc.
         * - The offset of the time zone relative to Greenwich Mean Time: E.G. GMT +8:00 (East Zone 8), GMT-7 (West Zone 7), etc. When using the GMT format, the hour bit does not support adding leading zeros.
         * - Time zone abbreviation: Only UTC (Coordinated Universal Time) is supported.
         * 
         * For example, in China/Shanghai time, the command will be executed once every day at 10:15 am in 2022 in the format 0 15 10? * * 2022 Asia/Shanghai; In the eastern 8th District time, it will be executed every half hour from 10:00 a.m. to 11:30 a.m. every day in 2022, in the format of 0 0/30 10-11 * *? 2022 GMT +8:00; In UTC time, starting from 2022, it will be executed every 5 minutes from 14:00 P.M. to 14:55 p. M. Every two years in October, in the format of 0 0/5 14*10? 2022/2 UTC.
         * 
         * @return builder
         * 
         */
        public Builder frequency(@Nullable Output<String> frequency) {
            $.frequency = frequency;
            return this;
        }

        /**
         * @param frequency The execution time of the scheduled execution command. Currently, three scheduled execution methods are supported: fixed interval execution (based on Rate expression), only once at a specified time, and timed execution based on clock (based on Cron expression).
         * - Fixed time interval execution: Based on the Rate expression, the command is executed at the set time interval. Time intervals can be selected by seconds (s), minutes (m), hours (h), and days (d), which is suitable for scenarios where tasks are executed at fixed time intervals. The format is rate( ). If the execution is performed every 5 minutes, the format is rate(5m). Executing with a fixed time interval has the following limitations:
         * - The set time interval is no more than 7 days and no less than 60 seconds, and must be greater than the timeout period of the scheduled task.
         * - The execution interval is based only on a fixed frequency, independent of the time the task actually takes to execute. For example, if the command is executed every 5 minutes and the task takes 2 minutes to complete, the next round will be executed 3 minutes after the task is completed.
         * - The task is not executed immediately when it is created. For example, if a command is executed every 5 minutes, the command is not executed immediately when a task is created, but is executed 5 minutes after the task is created.
         * - Execute only once at the specified time: Execute the command once according to the set time zone and execution time point. The format is at(yyyy-MM-dd HH:mm:ss ), that is, at (year-month-day time: minute: Second ). If you do not specify a time zone, the default is the UTC time zone. Time zones can be in the following three formats: the full name of the time zone, such as Asia/Shanghai (China/Shanghai time), America/los_angles (United States/Los Angeles time), and so on. The offset of the time zone relative to Greenwich Mean Time: E.G. GMT +8:00 (East Zone 8), GMT-7 (West Zone 7), etc. When using the GMT format, the hour bit does not support adding leading zeros. Time zone abbreviation: Only UTC (Coordinated Universal Time) is supported.
         *   If it is specified to be executed once 13:15:30 June 06, 2022, China/Shanghai time, the format is at (Asia/Shanghai, 2022-06-06 13:15:30); If it is specified to be executed once 13:15:30 June 06, 2022, the format is at(2022-06-06 13:15:30 GMT-7:00).
         * - Timing based on clock (based on Cron expression): Based on Cron expression, commands are executed according to the set timing task. The format is        , that is,  . In the specified time zone, calculate the execution time of the scheduled task based on the Cron expression and execute it. If no time zone is specified, the default time zone is the internal time zone of the scheduled task instance. For more information about Cron expressions, see Cron Expressions. Time zones support the following three forms:
         * - Full time zone name: such as Asia/Shanghai (China/Shanghai time), America/los_angles (US/Los Angeles time), etc.
         * - The offset of the time zone relative to Greenwich Mean Time: E.G. GMT +8:00 (East Zone 8), GMT-7 (West Zone 7), etc. When using the GMT format, the hour bit does not support adding leading zeros.
         * - Time zone abbreviation: Only UTC (Coordinated Universal Time) is supported.
         * 
         * For example, in China/Shanghai time, the command will be executed once every day at 10:15 am in 2022 in the format 0 15 10? * * 2022 Asia/Shanghai; In the eastern 8th District time, it will be executed every half hour from 10:00 a.m. to 11:30 a.m. every day in 2022, in the format of 0 0/30 10-11 * *? 2022 GMT +8:00; In UTC time, starting from 2022, it will be executed every 5 minutes from 14:00 P.M. to 14:55 p. M. Every two years in October, in the format of 0 0/5 14*10? 2022/2 UTC.
         * 
         * @return builder
         * 
         */
        public Builder frequency(String frequency) {
            return frequency(Output.of(frequency));
        }

        /**
         * @param launcher The bootstrapper for script execution. The length cannot exceed 1KB.
         * 
         * @return builder
         * 
         */
        public Builder launcher(@Nullable Output<String> launcher) {
            $.launcher = launcher;
            return this;
        }

        /**
         * @param launcher The bootstrapper for script execution. The length cannot exceed 1KB.
         * 
         * @return builder
         * 
         */
        public Builder launcher(String launcher) {
            return launcher(Output.of(launcher));
        }

        /**
         * @param name The command name.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The command name.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param nodeIdLists A list of nodes.
         * 
         * @return builder
         * 
         */
        public Builder nodeIdLists(@Nullable Output<List<String>> nodeIdLists) {
            $.nodeIdLists = nodeIdLists;
            return this;
        }

        /**
         * @param nodeIdLists A list of nodes.
         * 
         * @return builder
         * 
         */
        public Builder nodeIdLists(List<String> nodeIdLists) {
            return nodeIdLists(Output.of(nodeIdLists));
        }

        /**
         * @param nodeIdLists A list of nodes.
         * 
         * @return builder
         * 
         */
        public Builder nodeIdLists(String... nodeIdLists) {
            return nodeIdLists(List.of(nodeIdLists));
        }

        /**
         * @param parameters When the command contains custom parameters, the key-value pair of the custom parameters passed in when the command is executed. For example, if the command content is &#39;echo {{name}}&#39;, the key-value pair&#39;{&#34;name&#34;:&#34;Jack&#34;}&#39;can be passed through the &#39;Parameter&#39; parameter&#39;. The custom parameter will automatically replace the variable value &#39;name&#39; to get a new command that actually executes &#39;echo Jack &#39;.
         * 
         * The number of custom parameters ranges from 0 to 10, and you need to pay attention:
         * - The key is not allowed to be an empty string and supports a maximum of 64 characters.
         * - The value is allowed to be an empty string.
         * - After the custom parameters and the original command content are encoded in Base64, if the command is saved, the size of the command content after Base64 encoding cannot exceed 18KB. If the command is not saved, the size of the command content after Base64 encoding cannot exceed 24KB. You can set whether to keep the command through &#39;KeepCommand.
         * - The set of custom parameter names must be a subset of the parameter set defined when the command is created. For parameters that are not passed in, you can use an empty string instead.
         * 
         * The default value is empty, which means that the parameter is unset and the custom parameter is disabled.
         * 
         * @return builder
         * 
         */
        public Builder parameters(@Nullable Output<Map<String,String>> parameters) {
            $.parameters = parameters;
            return this;
        }

        /**
         * @param parameters When the command contains custom parameters, the key-value pair of the custom parameters passed in when the command is executed. For example, if the command content is &#39;echo {{name}}&#39;, the key-value pair&#39;{&#34;name&#34;:&#34;Jack&#34;}&#39;can be passed through the &#39;Parameter&#39; parameter&#39;. The custom parameter will automatically replace the variable value &#39;name&#39; to get a new command that actually executes &#39;echo Jack &#39;.
         * 
         * The number of custom parameters ranges from 0 to 10, and you need to pay attention:
         * - The key is not allowed to be an empty string and supports a maximum of 64 characters.
         * - The value is allowed to be an empty string.
         * - After the custom parameters and the original command content are encoded in Base64, if the command is saved, the size of the command content after Base64 encoding cannot exceed 18KB. If the command is not saved, the size of the command content after Base64 encoding cannot exceed 24KB. You can set whether to keep the command through &#39;KeepCommand.
         * - The set of custom parameter names must be a subset of the parameter set defined when the command is created. For parameters that are not passed in, you can use an empty string instead.
         * 
         * The default value is empty, which means that the parameter is unset and the custom parameter is disabled.
         * 
         * @return builder
         * 
         */
        public Builder parameters(Map<String,String> parameters) {
            return parameters(Output.of(parameters));
        }

        /**
         * @param repeatMode Sets the way the command is executed. Value range:
         * - Once: Execute the command immediately.
         * - Period: executes the command regularly. When the value of this parameter is &#39;Period&#39;, the &#39;Frequency&#39; parameter must also be specified.
         * - NextRebootOnly: Automatically execute the command when the instance is next started.
         * - EveryReboot: The command is automatically executed every time the instance is started.
         * 
         * Default:
         * - When the&#39;frequency&#39; parameter is not specified, the default value is&#39;once &#39;.
         * - When the&#39;frequency&#39; parameter is specified, regardless of whether the parameter value has been set or not, it will be processed according to&#39;period.
         * 
         * @return builder
         * 
         */
        public Builder repeatMode(@Nullable Output<String> repeatMode) {
            $.repeatMode = repeatMode;
            return this;
        }

        /**
         * @param repeatMode Sets the way the command is executed. Value range:
         * - Once: Execute the command immediately.
         * - Period: executes the command regularly. When the value of this parameter is &#39;Period&#39;, the &#39;Frequency&#39; parameter must also be specified.
         * - NextRebootOnly: Automatically execute the command when the instance is next started.
         * - EveryReboot: The command is automatically executed every time the instance is started.
         * 
         * Default:
         * - When the&#39;frequency&#39; parameter is not specified, the default value is&#39;once &#39;.
         * - When the&#39;frequency&#39; parameter is specified, regardless of whether the parameter value has been set or not, it will be processed according to&#39;period.
         * 
         * @return builder
         * 
         */
        public Builder repeatMode(String repeatMode) {
            return repeatMode(Output.of(repeatMode));
        }

        /**
         * @param terminationMode The mode when the task is stopped (manually stopped or execution time-out interrupted). Possible values:
         * Process: Stops the current script Process.
         * ProcessTree: Stops the current process tree (the script process and the collection of all child processes it created)
         * 
         * @return builder
         * 
         */
        public Builder terminationMode(@Nullable Output<String> terminationMode) {
            $.terminationMode = terminationMode;
            return this;
        }

        /**
         * @param terminationMode The mode when the task is stopped (manually stopped or execution time-out interrupted). Possible values:
         * Process: Stops the current script Process.
         * ProcessTree: Stops the current process tree (the script process and the collection of all child processes it created)
         * 
         * @return builder
         * 
         */
        public Builder terminationMode(String terminationMode) {
            return terminationMode(Output.of(terminationMode));
        }

        /**
         * @param timeout The timeout period for command execution. Unit: seconds. A timeout occurs when a command cannot be run due to a process, a missing module, or a missing cloud assistant Agent. After the timeout, the command process is forcibly terminated. Default value: 60.
         * 
         * @return builder
         * 
         */
        public Builder timeout(@Nullable Output<Integer> timeout) {
            $.timeout = timeout;
            return this;
        }

        /**
         * @param timeout The timeout period for command execution. Unit: seconds. A timeout occurs when a command cannot be run due to a process, a missing module, or a missing cloud assistant Agent. After the timeout, the command process is forcibly terminated. Default value: 60.
         * 
         * @return builder
         * 
         */
        public Builder timeout(Integer timeout) {
            return timeout(Output.of(timeout));
        }

        /**
         * @param username The name of the user who executed the command in the instance. The length must not exceed 255 characters.
         * The instance of the Linux system. By default, the root user runs commands.
         * 
         * @return builder
         * 
         */
        public Builder username(@Nullable Output<String> username) {
            $.username = username;
            return this;
        }

        /**
         * @param username The name of the user who executed the command in the instance. The length must not exceed 255 characters.
         * The instance of the Linux system. By default, the root user runs commands.
         * 
         * @return builder
         * 
         */
        public Builder username(String username) {
            return username(Output.of(username));
        }

        /**
         * @param workingDir You can customize the command execution path. The default path is as follows:
         * Linux instance: the execution path is in the/home directory of the root user by default.
         * 
         * @return builder
         * 
         */
        public Builder workingDir(@Nullable Output<String> workingDir) {
            $.workingDir = workingDir;
            return this;
        }

        /**
         * @param workingDir You can customize the command execution path. The default path is as follows:
         * Linux instance: the execution path is in the/home directory of the root user by default.
         * 
         * @return builder
         * 
         */
        public Builder workingDir(String workingDir) {
            return workingDir(Output.of(workingDir));
        }

        public InvocationArgs build() {
            return $;
        }
    }

}
