// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.cloudmonitor.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ServiceMonitoringAgentProcessState extends com.pulumi.resources.ResourceArgs {

    public static final ServiceMonitoringAgentProcessState Empty = new ServiceMonitoringAgentProcessState();

    /**
     * The ID of the instance.
     * 
     */
    @Import(name="instanceId")
    private @Nullable Output<String> instanceId;

    /**
     * @return The ID of the instance.
     * 
     */
    public Optional<Output<String>> instanceId() {
        return Optional.ofNullable(this.instanceId);
    }

    /**
     * The ID of the process.
     * 
     */
    @Import(name="processId")
    private @Nullable Output<String> processId;

    /**
     * @return The ID of the process.
     * 
     */
    public Optional<Output<String>> processId() {
        return Optional.ofNullable(this.processId);
    }

    /**
     * The name of the process.
     * 
     */
    @Import(name="processName")
    private @Nullable Output<String> processName;

    /**
     * @return The name of the process.
     * 
     */
    public Optional<Output<String>> processName() {
        return Optional.ofNullable(this.processName);
    }

    /**
     * The user who launches the process.
     * 
     */
    @Import(name="processUser")
    private @Nullable Output<String> processUser;

    /**
     * @return The user who launches the process.
     * 
     */
    public Optional<Output<String>> processUser() {
        return Optional.ofNullable(this.processUser);
    }

    private ServiceMonitoringAgentProcessState() {}

    private ServiceMonitoringAgentProcessState(ServiceMonitoringAgentProcessState $) {
        this.instanceId = $.instanceId;
        this.processId = $.processId;
        this.processName = $.processName;
        this.processUser = $.processUser;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServiceMonitoringAgentProcessState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServiceMonitoringAgentProcessState $;

        public Builder() {
            $ = new ServiceMonitoringAgentProcessState();
        }

        public Builder(ServiceMonitoringAgentProcessState defaults) {
            $ = new ServiceMonitoringAgentProcessState(Objects.requireNonNull(defaults));
        }

        /**
         * @param instanceId The ID of the instance.
         * 
         * @return builder
         * 
         */
        public Builder instanceId(@Nullable Output<String> instanceId) {
            $.instanceId = instanceId;
            return this;
        }

        /**
         * @param instanceId The ID of the instance.
         * 
         * @return builder
         * 
         */
        public Builder instanceId(String instanceId) {
            return instanceId(Output.of(instanceId));
        }

        /**
         * @param processId The ID of the process.
         * 
         * @return builder
         * 
         */
        public Builder processId(@Nullable Output<String> processId) {
            $.processId = processId;
            return this;
        }

        /**
         * @param processId The ID of the process.
         * 
         * @return builder
         * 
         */
        public Builder processId(String processId) {
            return processId(Output.of(processId));
        }

        /**
         * @param processName The name of the process.
         * 
         * @return builder
         * 
         */
        public Builder processName(@Nullable Output<String> processName) {
            $.processName = processName;
            return this;
        }

        /**
         * @param processName The name of the process.
         * 
         * @return builder
         * 
         */
        public Builder processName(String processName) {
            return processName(Output.of(processName));
        }

        /**
         * @param processUser The user who launches the process.
         * 
         * @return builder
         * 
         */
        public Builder processUser(@Nullable Output<String> processUser) {
            $.processUser = processUser;
            return this;
        }

        /**
         * @param processUser The user who launches the process.
         * 
         * @return builder
         * 
         */
        public Builder processUser(String processUser) {
            return processUser(Output.of(processUser));
        }

        public ServiceMonitoringAgentProcessState build() {
            return $;
        }
    }

}
