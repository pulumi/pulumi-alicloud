// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.oos.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ApplicationGroupState extends com.pulumi.resources.ResourceArgs {

    public static final ApplicationGroupState Empty = new ApplicationGroupState();

    /**
     * The name of the Application group.
     * 
     */
    @Import(name="applicationGroupName")
    private @Nullable Output<String> applicationGroupName;

    /**
     * @return The name of the Application group.
     * 
     */
    public Optional<Output<String>> applicationGroupName() {
        return Optional.ofNullable(this.applicationGroupName);
    }

    /**
     * The name of the Application.
     * 
     */
    @Import(name="applicationName")
    private @Nullable Output<String> applicationName;

    /**
     * @return The name of the Application.
     * 
     */
    public Optional<Output<String>> applicationName() {
        return Optional.ofNullable(this.applicationName);
    }

    /**
     * The region ID of the deployment.
     * 
     */
    @Import(name="deployRegionId")
    private @Nullable Output<String> deployRegionId;

    /**
     * @return The region ID of the deployment.
     * 
     */
    public Optional<Output<String>> deployRegionId() {
        return Optional.ofNullable(this.deployRegionId);
    }

    /**
     * Application group description information.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Application group description information.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The tag key must be passed in at the same time as the tag value (import_tag_value) or none, not just one. If both `importTagKey` and `importTagValue` are left empty, the default is app-{ApplicationName} (application name).
     * 
     */
    @Import(name="importTagKey")
    private @Nullable Output<String> importTagKey;

    /**
     * @return The tag key must be passed in at the same time as the tag value (import_tag_value) or none, not just one. If both `importTagKey` and `importTagValue` are left empty, the default is app-{ApplicationName} (application name).
     * 
     */
    public Optional<Output<String>> importTagKey() {
        return Optional.ofNullable(this.importTagKey);
    }

    /**
     * The tag value must be passed in at the same time as the tag key (import_tag_key) or none, not just one. If both `importTagKey` and `importTagValue` are left empty, the default is application group name.
     * .
     * 
     */
    @Import(name="importTagValue")
    private @Nullable Output<String> importTagValue;

    /**
     * @return The tag value must be passed in at the same time as the tag key (import_tag_key) or none, not just one. If both `importTagKey` and `importTagValue` are left empty, the default is application group name.
     * .
     * 
     */
    public Optional<Output<String>> importTagValue() {
        return Optional.ofNullable(this.importTagValue);
    }

    private ApplicationGroupState() {}

    private ApplicationGroupState(ApplicationGroupState $) {
        this.applicationGroupName = $.applicationGroupName;
        this.applicationName = $.applicationName;
        this.deployRegionId = $.deployRegionId;
        this.description = $.description;
        this.importTagKey = $.importTagKey;
        this.importTagValue = $.importTagValue;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ApplicationGroupState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ApplicationGroupState $;

        public Builder() {
            $ = new ApplicationGroupState();
        }

        public Builder(ApplicationGroupState defaults) {
            $ = new ApplicationGroupState(Objects.requireNonNull(defaults));
        }

        /**
         * @param applicationGroupName The name of the Application group.
         * 
         * @return builder
         * 
         */
        public Builder applicationGroupName(@Nullable Output<String> applicationGroupName) {
            $.applicationGroupName = applicationGroupName;
            return this;
        }

        /**
         * @param applicationGroupName The name of the Application group.
         * 
         * @return builder
         * 
         */
        public Builder applicationGroupName(String applicationGroupName) {
            return applicationGroupName(Output.of(applicationGroupName));
        }

        /**
         * @param applicationName The name of the Application.
         * 
         * @return builder
         * 
         */
        public Builder applicationName(@Nullable Output<String> applicationName) {
            $.applicationName = applicationName;
            return this;
        }

        /**
         * @param applicationName The name of the Application.
         * 
         * @return builder
         * 
         */
        public Builder applicationName(String applicationName) {
            return applicationName(Output.of(applicationName));
        }

        /**
         * @param deployRegionId The region ID of the deployment.
         * 
         * @return builder
         * 
         */
        public Builder deployRegionId(@Nullable Output<String> deployRegionId) {
            $.deployRegionId = deployRegionId;
            return this;
        }

        /**
         * @param deployRegionId The region ID of the deployment.
         * 
         * @return builder
         * 
         */
        public Builder deployRegionId(String deployRegionId) {
            return deployRegionId(Output.of(deployRegionId));
        }

        /**
         * @param description Application group description information.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Application group description information.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param importTagKey The tag key must be passed in at the same time as the tag value (import_tag_value) or none, not just one. If both `importTagKey` and `importTagValue` are left empty, the default is app-{ApplicationName} (application name).
         * 
         * @return builder
         * 
         */
        public Builder importTagKey(@Nullable Output<String> importTagKey) {
            $.importTagKey = importTagKey;
            return this;
        }

        /**
         * @param importTagKey The tag key must be passed in at the same time as the tag value (import_tag_value) or none, not just one. If both `importTagKey` and `importTagValue` are left empty, the default is app-{ApplicationName} (application name).
         * 
         * @return builder
         * 
         */
        public Builder importTagKey(String importTagKey) {
            return importTagKey(Output.of(importTagKey));
        }

        /**
         * @param importTagValue The tag value must be passed in at the same time as the tag key (import_tag_key) or none, not just one. If both `importTagKey` and `importTagValue` are left empty, the default is application group name.
         * .
         * 
         * @return builder
         * 
         */
        public Builder importTagValue(@Nullable Output<String> importTagValue) {
            $.importTagValue = importTagValue;
            return this;
        }

        /**
         * @param importTagValue The tag value must be passed in at the same time as the tag key (import_tag_key) or none, not just one. If both `importTagKey` and `importTagValue` are left empty, the default is application group name.
         * .
         * 
         * @return builder
         * 
         */
        public Builder importTagValue(String importTagValue) {
            return importTagValue(Output.of(importTagValue));
        }

        public ApplicationGroupState build() {
            return $;
        }
    }

}
