// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.cfg.outputs;

import com.pulumi.alicloud.cfg.outputs.GetAggregatorsAggregatorAggregatorAccount;
import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetAggregatorsAggregator {
    /**
     * @return Aggregator account uid.
     * 
     */
    private String accountId;
    /**
     * @return Account information in aggregator.
     * 
     */
    private List<GetAggregatorsAggregatorAggregatorAccount> aggregatorAccounts;
    /**
     * @return The id of aggregator.
     * 
     */
    private String aggregatorId;
    /**
     * @return The name of aggregator.
     * 
     */
    private String aggregatorName;
    /**
     * @return The type of aggregator.
     * 
     */
    private String aggregatorType;
    /**
     * @return The description of aggregator.
     * 
     */
    private String description;
    /**
     * @return The id of the aggregator.
     * 
     */
    private String id;
    /**
     * @return The status of the resource. Valid Values:  `0`: creating `1`: normal `2`: deleting.
     * 
     */
    private String status;

    private GetAggregatorsAggregator() {}
    /**
     * @return Aggregator account uid.
     * 
     */
    public String accountId() {
        return this.accountId;
    }
    /**
     * @return Account information in aggregator.
     * 
     */
    public List<GetAggregatorsAggregatorAggregatorAccount> aggregatorAccounts() {
        return this.aggregatorAccounts;
    }
    /**
     * @return The id of aggregator.
     * 
     */
    public String aggregatorId() {
        return this.aggregatorId;
    }
    /**
     * @return The name of aggregator.
     * 
     */
    public String aggregatorName() {
        return this.aggregatorName;
    }
    /**
     * @return The type of aggregator.
     * 
     */
    public String aggregatorType() {
        return this.aggregatorType;
    }
    /**
     * @return The description of aggregator.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return The id of the aggregator.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The status of the resource. Valid Values:  `0`: creating `1`: normal `2`: deleting.
     * 
     */
    public String status() {
        return this.status;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetAggregatorsAggregator defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String accountId;
        private List<GetAggregatorsAggregatorAggregatorAccount> aggregatorAccounts;
        private String aggregatorId;
        private String aggregatorName;
        private String aggregatorType;
        private String description;
        private String id;
        private String status;
        public Builder() {}
        public Builder(GetAggregatorsAggregator defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accountId = defaults.accountId;
    	      this.aggregatorAccounts = defaults.aggregatorAccounts;
    	      this.aggregatorId = defaults.aggregatorId;
    	      this.aggregatorName = defaults.aggregatorName;
    	      this.aggregatorType = defaults.aggregatorType;
    	      this.description = defaults.description;
    	      this.id = defaults.id;
    	      this.status = defaults.status;
        }

        @CustomType.Setter
        public Builder accountId(String accountId) {
            this.accountId = Objects.requireNonNull(accountId);
            return this;
        }
        @CustomType.Setter
        public Builder aggregatorAccounts(List<GetAggregatorsAggregatorAggregatorAccount> aggregatorAccounts) {
            this.aggregatorAccounts = Objects.requireNonNull(aggregatorAccounts);
            return this;
        }
        public Builder aggregatorAccounts(GetAggregatorsAggregatorAggregatorAccount... aggregatorAccounts) {
            return aggregatorAccounts(List.of(aggregatorAccounts));
        }
        @CustomType.Setter
        public Builder aggregatorId(String aggregatorId) {
            this.aggregatorId = Objects.requireNonNull(aggregatorId);
            return this;
        }
        @CustomType.Setter
        public Builder aggregatorName(String aggregatorName) {
            this.aggregatorName = Objects.requireNonNull(aggregatorName);
            return this;
        }
        @CustomType.Setter
        public Builder aggregatorType(String aggregatorType) {
            this.aggregatorType = Objects.requireNonNull(aggregatorType);
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            this.status = Objects.requireNonNull(status);
            return this;
        }
        public GetAggregatorsAggregator build() {
            final var o = new GetAggregatorsAggregator();
            o.accountId = accountId;
            o.aggregatorAccounts = aggregatorAccounts;
            o.aggregatorId = aggregatorId;
            o.aggregatorName = aggregatorName;
            o.aggregatorType = aggregatorType;
            o.description = description;
            o.id = id;
            o.status = status;
            return o;
        }
    }
}
