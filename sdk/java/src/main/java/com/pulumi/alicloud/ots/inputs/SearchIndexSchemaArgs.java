// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.ots.inputs;

import com.pulumi.alicloud.ots.inputs.SearchIndexSchemaFieldSchemaArgs;
import com.pulumi.alicloud.ots.inputs.SearchIndexSchemaIndexSettingArgs;
import com.pulumi.alicloud.ots.inputs.SearchIndexSchemaIndexSortArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SearchIndexSchemaArgs extends com.pulumi.resources.ResourceArgs {

    public static final SearchIndexSchemaArgs Empty = new SearchIndexSchemaArgs();

    /**
     * A list of field schemas. See `field_schema` below.
     * 
     */
    @Import(name="fieldSchemas", required=true)
    private Output<List<SearchIndexSchemaFieldSchemaArgs>> fieldSchemas;

    /**
     * @return A list of field schemas. See `field_schema` below.
     * 
     */
    public Output<List<SearchIndexSchemaFieldSchemaArgs>> fieldSchemas() {
        return this.fieldSchemas;
    }

    /**
     * The settings of the search index, including routingFields. See `index_setting` below.
     * 
     */
    @Import(name="indexSettings")
    private @Nullable Output<List<SearchIndexSchemaIndexSettingArgs>> indexSettings;

    /**
     * @return The settings of the search index, including routingFields. See `index_setting` below.
     * 
     */
    public Optional<Output<List<SearchIndexSchemaIndexSettingArgs>>> indexSettings() {
        return Optional.ofNullable(this.indexSettings);
    }

    /**
     * The presorting settings of the search index, including sorters. If no value is specified for the indexSort parameter, field values are sorted by primary key by default. See `index_sort` below.
     * 
     */
    @Import(name="indexSorts")
    private @Nullable Output<List<SearchIndexSchemaIndexSortArgs>> indexSorts;

    /**
     * @return The presorting settings of the search index, including sorters. If no value is specified for the indexSort parameter, field values are sorted by primary key by default. See `index_sort` below.
     * 
     */
    public Optional<Output<List<SearchIndexSchemaIndexSortArgs>>> indexSorts() {
        return Optional.ofNullable(this.indexSorts);
    }

    private SearchIndexSchemaArgs() {}

    private SearchIndexSchemaArgs(SearchIndexSchemaArgs $) {
        this.fieldSchemas = $.fieldSchemas;
        this.indexSettings = $.indexSettings;
        this.indexSorts = $.indexSorts;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SearchIndexSchemaArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SearchIndexSchemaArgs $;

        public Builder() {
            $ = new SearchIndexSchemaArgs();
        }

        public Builder(SearchIndexSchemaArgs defaults) {
            $ = new SearchIndexSchemaArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param fieldSchemas A list of field schemas. See `field_schema` below.
         * 
         * @return builder
         * 
         */
        public Builder fieldSchemas(Output<List<SearchIndexSchemaFieldSchemaArgs>> fieldSchemas) {
            $.fieldSchemas = fieldSchemas;
            return this;
        }

        /**
         * @param fieldSchemas A list of field schemas. See `field_schema` below.
         * 
         * @return builder
         * 
         */
        public Builder fieldSchemas(List<SearchIndexSchemaFieldSchemaArgs> fieldSchemas) {
            return fieldSchemas(Output.of(fieldSchemas));
        }

        /**
         * @param fieldSchemas A list of field schemas. See `field_schema` below.
         * 
         * @return builder
         * 
         */
        public Builder fieldSchemas(SearchIndexSchemaFieldSchemaArgs... fieldSchemas) {
            return fieldSchemas(List.of(fieldSchemas));
        }

        /**
         * @param indexSettings The settings of the search index, including routingFields. See `index_setting` below.
         * 
         * @return builder
         * 
         */
        public Builder indexSettings(@Nullable Output<List<SearchIndexSchemaIndexSettingArgs>> indexSettings) {
            $.indexSettings = indexSettings;
            return this;
        }

        /**
         * @param indexSettings The settings of the search index, including routingFields. See `index_setting` below.
         * 
         * @return builder
         * 
         */
        public Builder indexSettings(List<SearchIndexSchemaIndexSettingArgs> indexSettings) {
            return indexSettings(Output.of(indexSettings));
        }

        /**
         * @param indexSettings The settings of the search index, including routingFields. See `index_setting` below.
         * 
         * @return builder
         * 
         */
        public Builder indexSettings(SearchIndexSchemaIndexSettingArgs... indexSettings) {
            return indexSettings(List.of(indexSettings));
        }

        /**
         * @param indexSorts The presorting settings of the search index, including sorters. If no value is specified for the indexSort parameter, field values are sorted by primary key by default. See `index_sort` below.
         * 
         * @return builder
         * 
         */
        public Builder indexSorts(@Nullable Output<List<SearchIndexSchemaIndexSortArgs>> indexSorts) {
            $.indexSorts = indexSorts;
            return this;
        }

        /**
         * @param indexSorts The presorting settings of the search index, including sorters. If no value is specified for the indexSort parameter, field values are sorted by primary key by default. See `index_sort` below.
         * 
         * @return builder
         * 
         */
        public Builder indexSorts(List<SearchIndexSchemaIndexSortArgs> indexSorts) {
            return indexSorts(Output.of(indexSorts));
        }

        /**
         * @param indexSorts The presorting settings of the search index, including sorters. If no value is specified for the indexSort parameter, field values are sorted by primary key by default. See `index_sort` below.
         * 
         * @return builder
         * 
         */
        public Builder indexSorts(SearchIndexSchemaIndexSortArgs... indexSorts) {
            return indexSorts(List.of(indexSorts));
        }

        public SearchIndexSchemaArgs build() {
            $.fieldSchemas = Objects.requireNonNull($.fieldSchemas, "expected parameter 'fieldSchemas' to be non-null");
            return $;
        }
    }

}
