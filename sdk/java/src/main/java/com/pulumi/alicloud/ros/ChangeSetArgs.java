// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.ros;

import com.pulumi.alicloud.ros.inputs.ChangeSetParameterArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ChangeSetArgs extends com.pulumi.resources.ResourceArgs {

    public static final ChangeSetArgs Empty = new ChangeSetArgs();

    /**
     * The name of the change set.  The name can be up to 255 characters in length and can contain digits, letters, hyphens (-), and underscores (_). It must start with a digit or letter.
     * 
     */
    @Import(name="changeSetName", required=true)
    private Output<String> changeSetName;

    /**
     * @return The name of the change set.  The name can be up to 255 characters in length and can contain digits, letters, hyphens (-), and underscores (_). It must start with a digit or letter.
     * 
     */
    public Output<String> changeSetName() {
        return this.changeSetName;
    }

    /**
     * The type of the change set. Valid values:  CREATE: creates a change set for a new stack. UPDATE: creates a change set for an existing stack. IMPORT: creates a change set for a new stack or an existing stack to import non-ROS-managed resources. If you create a change set for a new stack, ROS creates a stack that has a unique stack ID. The stack is in the REVIEW_IN_PROGRESS state until you execute the change set.  You cannot use the UPDATE type to create a change set for a new stack or the CREATE type to create a change set for an existing stack.
     * 
     */
    @Import(name="changeSetType")
    private @Nullable Output<String> changeSetType;

    /**
     * @return The type of the change set. Valid values:  CREATE: creates a change set for a new stack. UPDATE: creates a change set for an existing stack. IMPORT: creates a change set for a new stack or an existing stack to import non-ROS-managed resources. If you create a change set for a new stack, ROS creates a stack that has a unique stack ID. The stack is in the REVIEW_IN_PROGRESS state until you execute the change set.  You cannot use the UPDATE type to create a change set for a new stack or the CREATE type to create a change set for an existing stack.
     * 
     */
    public Optional<Output<String>> changeSetType() {
        return Optional.ofNullable(this.changeSetType);
    }

    /**
     * The description of the change set. The description can be up to 1,024 bytes in length.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The description of the change set. The description can be up to 1,024 bytes in length.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Specifies whether to disable rollback on stack creation failure. Default value: false.  Valid values:  true: disables rollback on stack creation failure. false: enables rollback on stack creation failure. Note This parameter takes effect only when ChangeSetType is set to CREATE or IMPORT.
     * 
     */
    @Import(name="disableRollback")
    private @Nullable Output<Boolean> disableRollback;

    /**
     * @return Specifies whether to disable rollback on stack creation failure. Default value: false.  Valid values:  true: disables rollback on stack creation failure. false: enables rollback on stack creation failure. Note This parameter takes effect only when ChangeSetType is set to CREATE or IMPORT.
     * 
     */
    public Optional<Output<Boolean>> disableRollback() {
        return Optional.ofNullable(this.disableRollback);
    }

    /**
     * The notification urls.
     * 
     */
    @Import(name="notificationUrls")
    private @Nullable Output<List<String>> notificationUrls;

    /**
     * @return The notification urls.
     * 
     */
    public Optional<Output<List<String>>> notificationUrls() {
        return Optional.ofNullable(this.notificationUrls);
    }

    /**
     * Parameters.
     * 
     */
    @Import(name="parameters")
    private @Nullable Output<List<ChangeSetParameterArgs>> parameters;

    /**
     * @return Parameters.
     * 
     */
    public Optional<Output<List<ChangeSetParameterArgs>>> parameters() {
        return Optional.ofNullable(this.parameters);
    }

    /**
     * The ram role name.
     * 
     */
    @Import(name="ramRoleName")
    private @Nullable Output<String> ramRoleName;

    /**
     * @return The ram role name.
     * 
     */
    public Optional<Output<String>> ramRoleName() {
        return Optional.ofNullable(this.ramRoleName);
    }

    /**
     * The replacement option.
     * 
     */
    @Import(name="replacementOption")
    private @Nullable Output<String> replacementOption;

    /**
     * @return The replacement option.
     * 
     */
    public Optional<Output<String>> replacementOption() {
        return Optional.ofNullable(this.replacementOption);
    }

    /**
     * The ID of the stack for which you want to create the change set. ROS generates the change set by comparing the stack information with the information that you submit, such as a modified template or different inputs.
     * 
     */
    @Import(name="stackId")
    private @Nullable Output<String> stackId;

    /**
     * @return The ID of the stack for which you want to create the change set. ROS generates the change set by comparing the stack information with the information that you submit, such as a modified template or different inputs.
     * 
     */
    public Optional<Output<String>> stackId() {
        return Optional.ofNullable(this.stackId);
    }

    /**
     * The name of the stack for which you want to create the change set.  The name can be up to 255 characters in length and can contain digits, letters, hyphens (-), and underscores (_). It must start with a digit or letter.  Note This parameter takes effect only when ChangeSetType is set to CREATE or IMPORT.
     * 
     */
    @Import(name="stackName")
    private @Nullable Output<String> stackName;

    /**
     * @return The name of the stack for which you want to create the change set.  The name can be up to 255 characters in length and can contain digits, letters, hyphens (-), and underscores (_). It must start with a digit or letter.  Note This parameter takes effect only when ChangeSetType is set to CREATE or IMPORT.
     * 
     */
    public Optional<Output<String>> stackName() {
        return Optional.ofNullable(this.stackName);
    }

    /**
     * The stack policy body.
     * 
     */
    @Import(name="stackPolicyBody")
    private @Nullable Output<String> stackPolicyBody;

    /**
     * @return The stack policy body.
     * 
     */
    public Optional<Output<String>> stackPolicyBody() {
        return Optional.ofNullable(this.stackPolicyBody);
    }

    /**
     * The stack policy during update body.
     * 
     */
    @Import(name="stackPolicyDuringUpdateBody")
    private @Nullable Output<String> stackPolicyDuringUpdateBody;

    /**
     * @return The stack policy during update body.
     * 
     */
    public Optional<Output<String>> stackPolicyDuringUpdateBody() {
        return Optional.ofNullable(this.stackPolicyDuringUpdateBody);
    }

    /**
     * The stack policy during update url.
     * 
     */
    @Import(name="stackPolicyDuringUpdateUrl")
    private @Nullable Output<String> stackPolicyDuringUpdateUrl;

    /**
     * @return The stack policy during update url.
     * 
     */
    public Optional<Output<String>> stackPolicyDuringUpdateUrl() {
        return Optional.ofNullable(this.stackPolicyDuringUpdateUrl);
    }

    /**
     * The stack policy url.
     * 
     */
    @Import(name="stackPolicyUrl")
    private @Nullable Output<String> stackPolicyUrl;

    /**
     * @return The stack policy url.
     * 
     */
    public Optional<Output<String>> stackPolicyUrl() {
        return Optional.ofNullable(this.stackPolicyUrl);
    }

    /**
     * The structure that contains the template body. The template body must be 1 to 524,288 bytes in length.  If the length of the template body is longer than required, we recommend that you add parameters to the HTTP POST request body to avoid request failures due to excessive length of URLs.  You can specify one of TemplateBody or TemplateURL parameters, but you cannot specify both of them.
     * 
     */
    @Import(name="templateBody")
    private @Nullable Output<String> templateBody;

    /**
     * @return The structure that contains the template body. The template body must be 1 to 524,288 bytes in length.  If the length of the template body is longer than required, we recommend that you add parameters to the HTTP POST request body to avoid request failures due to excessive length of URLs.  You can specify one of TemplateBody or TemplateURL parameters, but you cannot specify both of them.
     * 
     */
    public Optional<Output<String>> templateBody() {
        return Optional.ofNullable(this.templateBody);
    }

    /**
     * The template url.
     * 
     */
    @Import(name="templateUrl")
    private @Nullable Output<String> templateUrl;

    /**
     * @return The template url.
     * 
     */
    public Optional<Output<String>> templateUrl() {
        return Optional.ofNullable(this.templateUrl);
    }

    /**
     * Timeout In Minutes.
     * 
     */
    @Import(name="timeoutInMinutes")
    private @Nullable Output<Integer> timeoutInMinutes;

    /**
     * @return Timeout In Minutes.
     * 
     */
    public Optional<Output<Integer>> timeoutInMinutes() {
        return Optional.ofNullable(this.timeoutInMinutes);
    }

    /**
     * The use previous parameters.
     * 
     */
    @Import(name="usePreviousParameters")
    private @Nullable Output<Boolean> usePreviousParameters;

    /**
     * @return The use previous parameters.
     * 
     */
    public Optional<Output<Boolean>> usePreviousParameters() {
        return Optional.ofNullable(this.usePreviousParameters);
    }

    private ChangeSetArgs() {}

    private ChangeSetArgs(ChangeSetArgs $) {
        this.changeSetName = $.changeSetName;
        this.changeSetType = $.changeSetType;
        this.description = $.description;
        this.disableRollback = $.disableRollback;
        this.notificationUrls = $.notificationUrls;
        this.parameters = $.parameters;
        this.ramRoleName = $.ramRoleName;
        this.replacementOption = $.replacementOption;
        this.stackId = $.stackId;
        this.stackName = $.stackName;
        this.stackPolicyBody = $.stackPolicyBody;
        this.stackPolicyDuringUpdateBody = $.stackPolicyDuringUpdateBody;
        this.stackPolicyDuringUpdateUrl = $.stackPolicyDuringUpdateUrl;
        this.stackPolicyUrl = $.stackPolicyUrl;
        this.templateBody = $.templateBody;
        this.templateUrl = $.templateUrl;
        this.timeoutInMinutes = $.timeoutInMinutes;
        this.usePreviousParameters = $.usePreviousParameters;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ChangeSetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ChangeSetArgs $;

        public Builder() {
            $ = new ChangeSetArgs();
        }

        public Builder(ChangeSetArgs defaults) {
            $ = new ChangeSetArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param changeSetName The name of the change set.  The name can be up to 255 characters in length and can contain digits, letters, hyphens (-), and underscores (_). It must start with a digit or letter.
         * 
         * @return builder
         * 
         */
        public Builder changeSetName(Output<String> changeSetName) {
            $.changeSetName = changeSetName;
            return this;
        }

        /**
         * @param changeSetName The name of the change set.  The name can be up to 255 characters in length and can contain digits, letters, hyphens (-), and underscores (_). It must start with a digit or letter.
         * 
         * @return builder
         * 
         */
        public Builder changeSetName(String changeSetName) {
            return changeSetName(Output.of(changeSetName));
        }

        /**
         * @param changeSetType The type of the change set. Valid values:  CREATE: creates a change set for a new stack. UPDATE: creates a change set for an existing stack. IMPORT: creates a change set for a new stack or an existing stack to import non-ROS-managed resources. If you create a change set for a new stack, ROS creates a stack that has a unique stack ID. The stack is in the REVIEW_IN_PROGRESS state until you execute the change set.  You cannot use the UPDATE type to create a change set for a new stack or the CREATE type to create a change set for an existing stack.
         * 
         * @return builder
         * 
         */
        public Builder changeSetType(@Nullable Output<String> changeSetType) {
            $.changeSetType = changeSetType;
            return this;
        }

        /**
         * @param changeSetType The type of the change set. Valid values:  CREATE: creates a change set for a new stack. UPDATE: creates a change set for an existing stack. IMPORT: creates a change set for a new stack or an existing stack to import non-ROS-managed resources. If you create a change set for a new stack, ROS creates a stack that has a unique stack ID. The stack is in the REVIEW_IN_PROGRESS state until you execute the change set.  You cannot use the UPDATE type to create a change set for a new stack or the CREATE type to create a change set for an existing stack.
         * 
         * @return builder
         * 
         */
        public Builder changeSetType(String changeSetType) {
            return changeSetType(Output.of(changeSetType));
        }

        /**
         * @param description The description of the change set. The description can be up to 1,024 bytes in length.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The description of the change set. The description can be up to 1,024 bytes in length.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param disableRollback Specifies whether to disable rollback on stack creation failure. Default value: false.  Valid values:  true: disables rollback on stack creation failure. false: enables rollback on stack creation failure. Note This parameter takes effect only when ChangeSetType is set to CREATE or IMPORT.
         * 
         * @return builder
         * 
         */
        public Builder disableRollback(@Nullable Output<Boolean> disableRollback) {
            $.disableRollback = disableRollback;
            return this;
        }

        /**
         * @param disableRollback Specifies whether to disable rollback on stack creation failure. Default value: false.  Valid values:  true: disables rollback on stack creation failure. false: enables rollback on stack creation failure. Note This parameter takes effect only when ChangeSetType is set to CREATE or IMPORT.
         * 
         * @return builder
         * 
         */
        public Builder disableRollback(Boolean disableRollback) {
            return disableRollback(Output.of(disableRollback));
        }

        /**
         * @param notificationUrls The notification urls.
         * 
         * @return builder
         * 
         */
        public Builder notificationUrls(@Nullable Output<List<String>> notificationUrls) {
            $.notificationUrls = notificationUrls;
            return this;
        }

        /**
         * @param notificationUrls The notification urls.
         * 
         * @return builder
         * 
         */
        public Builder notificationUrls(List<String> notificationUrls) {
            return notificationUrls(Output.of(notificationUrls));
        }

        /**
         * @param notificationUrls The notification urls.
         * 
         * @return builder
         * 
         */
        public Builder notificationUrls(String... notificationUrls) {
            return notificationUrls(List.of(notificationUrls));
        }

        /**
         * @param parameters Parameters.
         * 
         * @return builder
         * 
         */
        public Builder parameters(@Nullable Output<List<ChangeSetParameterArgs>> parameters) {
            $.parameters = parameters;
            return this;
        }

        /**
         * @param parameters Parameters.
         * 
         * @return builder
         * 
         */
        public Builder parameters(List<ChangeSetParameterArgs> parameters) {
            return parameters(Output.of(parameters));
        }

        /**
         * @param parameters Parameters.
         * 
         * @return builder
         * 
         */
        public Builder parameters(ChangeSetParameterArgs... parameters) {
            return parameters(List.of(parameters));
        }

        /**
         * @param ramRoleName The ram role name.
         * 
         * @return builder
         * 
         */
        public Builder ramRoleName(@Nullable Output<String> ramRoleName) {
            $.ramRoleName = ramRoleName;
            return this;
        }

        /**
         * @param ramRoleName The ram role name.
         * 
         * @return builder
         * 
         */
        public Builder ramRoleName(String ramRoleName) {
            return ramRoleName(Output.of(ramRoleName));
        }

        /**
         * @param replacementOption The replacement option.
         * 
         * @return builder
         * 
         */
        public Builder replacementOption(@Nullable Output<String> replacementOption) {
            $.replacementOption = replacementOption;
            return this;
        }

        /**
         * @param replacementOption The replacement option.
         * 
         * @return builder
         * 
         */
        public Builder replacementOption(String replacementOption) {
            return replacementOption(Output.of(replacementOption));
        }

        /**
         * @param stackId The ID of the stack for which you want to create the change set. ROS generates the change set by comparing the stack information with the information that you submit, such as a modified template or different inputs.
         * 
         * @return builder
         * 
         */
        public Builder stackId(@Nullable Output<String> stackId) {
            $.stackId = stackId;
            return this;
        }

        /**
         * @param stackId The ID of the stack for which you want to create the change set. ROS generates the change set by comparing the stack information with the information that you submit, such as a modified template or different inputs.
         * 
         * @return builder
         * 
         */
        public Builder stackId(String stackId) {
            return stackId(Output.of(stackId));
        }

        /**
         * @param stackName The name of the stack for which you want to create the change set.  The name can be up to 255 characters in length and can contain digits, letters, hyphens (-), and underscores (_). It must start with a digit or letter.  Note This parameter takes effect only when ChangeSetType is set to CREATE or IMPORT.
         * 
         * @return builder
         * 
         */
        public Builder stackName(@Nullable Output<String> stackName) {
            $.stackName = stackName;
            return this;
        }

        /**
         * @param stackName The name of the stack for which you want to create the change set.  The name can be up to 255 characters in length and can contain digits, letters, hyphens (-), and underscores (_). It must start with a digit or letter.  Note This parameter takes effect only when ChangeSetType is set to CREATE or IMPORT.
         * 
         * @return builder
         * 
         */
        public Builder stackName(String stackName) {
            return stackName(Output.of(stackName));
        }

        /**
         * @param stackPolicyBody The stack policy body.
         * 
         * @return builder
         * 
         */
        public Builder stackPolicyBody(@Nullable Output<String> stackPolicyBody) {
            $.stackPolicyBody = stackPolicyBody;
            return this;
        }

        /**
         * @param stackPolicyBody The stack policy body.
         * 
         * @return builder
         * 
         */
        public Builder stackPolicyBody(String stackPolicyBody) {
            return stackPolicyBody(Output.of(stackPolicyBody));
        }

        /**
         * @param stackPolicyDuringUpdateBody The stack policy during update body.
         * 
         * @return builder
         * 
         */
        public Builder stackPolicyDuringUpdateBody(@Nullable Output<String> stackPolicyDuringUpdateBody) {
            $.stackPolicyDuringUpdateBody = stackPolicyDuringUpdateBody;
            return this;
        }

        /**
         * @param stackPolicyDuringUpdateBody The stack policy during update body.
         * 
         * @return builder
         * 
         */
        public Builder stackPolicyDuringUpdateBody(String stackPolicyDuringUpdateBody) {
            return stackPolicyDuringUpdateBody(Output.of(stackPolicyDuringUpdateBody));
        }

        /**
         * @param stackPolicyDuringUpdateUrl The stack policy during update url.
         * 
         * @return builder
         * 
         */
        public Builder stackPolicyDuringUpdateUrl(@Nullable Output<String> stackPolicyDuringUpdateUrl) {
            $.stackPolicyDuringUpdateUrl = stackPolicyDuringUpdateUrl;
            return this;
        }

        /**
         * @param stackPolicyDuringUpdateUrl The stack policy during update url.
         * 
         * @return builder
         * 
         */
        public Builder stackPolicyDuringUpdateUrl(String stackPolicyDuringUpdateUrl) {
            return stackPolicyDuringUpdateUrl(Output.of(stackPolicyDuringUpdateUrl));
        }

        /**
         * @param stackPolicyUrl The stack policy url.
         * 
         * @return builder
         * 
         */
        public Builder stackPolicyUrl(@Nullable Output<String> stackPolicyUrl) {
            $.stackPolicyUrl = stackPolicyUrl;
            return this;
        }

        /**
         * @param stackPolicyUrl The stack policy url.
         * 
         * @return builder
         * 
         */
        public Builder stackPolicyUrl(String stackPolicyUrl) {
            return stackPolicyUrl(Output.of(stackPolicyUrl));
        }

        /**
         * @param templateBody The structure that contains the template body. The template body must be 1 to 524,288 bytes in length.  If the length of the template body is longer than required, we recommend that you add parameters to the HTTP POST request body to avoid request failures due to excessive length of URLs.  You can specify one of TemplateBody or TemplateURL parameters, but you cannot specify both of them.
         * 
         * @return builder
         * 
         */
        public Builder templateBody(@Nullable Output<String> templateBody) {
            $.templateBody = templateBody;
            return this;
        }

        /**
         * @param templateBody The structure that contains the template body. The template body must be 1 to 524,288 bytes in length.  If the length of the template body is longer than required, we recommend that you add parameters to the HTTP POST request body to avoid request failures due to excessive length of URLs.  You can specify one of TemplateBody or TemplateURL parameters, but you cannot specify both of them.
         * 
         * @return builder
         * 
         */
        public Builder templateBody(String templateBody) {
            return templateBody(Output.of(templateBody));
        }

        /**
         * @param templateUrl The template url.
         * 
         * @return builder
         * 
         */
        public Builder templateUrl(@Nullable Output<String> templateUrl) {
            $.templateUrl = templateUrl;
            return this;
        }

        /**
         * @param templateUrl The template url.
         * 
         * @return builder
         * 
         */
        public Builder templateUrl(String templateUrl) {
            return templateUrl(Output.of(templateUrl));
        }

        /**
         * @param timeoutInMinutes Timeout In Minutes.
         * 
         * @return builder
         * 
         */
        public Builder timeoutInMinutes(@Nullable Output<Integer> timeoutInMinutes) {
            $.timeoutInMinutes = timeoutInMinutes;
            return this;
        }

        /**
         * @param timeoutInMinutes Timeout In Minutes.
         * 
         * @return builder
         * 
         */
        public Builder timeoutInMinutes(Integer timeoutInMinutes) {
            return timeoutInMinutes(Output.of(timeoutInMinutes));
        }

        /**
         * @param usePreviousParameters The use previous parameters.
         * 
         * @return builder
         * 
         */
        public Builder usePreviousParameters(@Nullable Output<Boolean> usePreviousParameters) {
            $.usePreviousParameters = usePreviousParameters;
            return this;
        }

        /**
         * @param usePreviousParameters The use previous parameters.
         * 
         * @return builder
         * 
         */
        public Builder usePreviousParameters(Boolean usePreviousParameters) {
            return usePreviousParameters(Output.of(usePreviousParameters));
        }

        public ChangeSetArgs build() {
            if ($.changeSetName == null) {
                throw new MissingRequiredPropertyException("ChangeSetArgs", "changeSetName");
            }
            return $;
        }
    }

}
