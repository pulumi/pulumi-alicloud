// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.cddc.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Object;
import java.lang.String;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetDedicatedHostsHost {
    /**
     * @return Specifies whether instances can be created on the host. Valid values: `1` or `0`. `1`: Instances can be created on the host. `0`: Instances cannot be created on the host.
     * 
     */
    private String allocationStatus;
    /**
     * @return The ID of the bastion host with which the host is associated.
     * 
     */
    private String bastionInstanceId;
    /**
     * @return The numeric value of the CPU over commit ratio of the dedicated cluster.
     * 
     */
    private String cpuAllocationRatio;
    /**
     * @return The number of CPU cores used by the host.
     * 
     */
    private String cpuUsed;
    /**
     * @return The time when the host was created. The time follows the ISO 8601 standard in the `yyyy-MM-ddTHH:mm:ssZ` format. The time is displayed in UTC.
     * 
     */
    private String createTime;
    /**
     * @return The ID of the dedicated cluster in which the host is created.
     * 
     */
    private String dedicatedHostGroupId;
    /**
     * @return The ID of the host.
     * 
     */
    private String dedicatedHostId;
    /**
     * @return The disk usage in percentage.
     * 
     */
    private String diskAllocationRatio;
    /**
     * @return The Elastic Compute Service (ECS) instance type.
     * 
     */
    private String ecsClassCode;
    /**
     * @return The time when the host expires. The time follows the ISO 8601 standard in the `yyyy-MM-ddTHH:mm:ssZ` format. The time is displayed in UTC.
     * 
     */
    private String endTime;
    /**
     * @return The type of the database engine that is used by the host.
     * 
     */
    private String engine;
    /**
     * @return The time when the host expires. The time follows the ISO 8601 standard in the `yyyy-MM-ddTHH:mm:ssZ` format. The time is displayed in UTC.
     * 
     */
    private String expiredTime;
    /**
     * @return The instance type of the host.
     * 
     */
    private String hostClass;
    /**
     * @return The number of CPU cores specified for the host. Unit: `core`.
     * 
     */
    private String hostCpu;
    /**
     * @return The memory of the host. Unit: `GB`.
     * 
     */
    private String hostMem;
    /**
     * @return The name of the host.
     * 
     */
    private String hostName;
    /**
     * @return The total storage capacity of the host. Unit: `GB`.
     * 
     */
    private String hostStorage;
    /**
     * @return The storage type of the host.
     * 
     */
    private String hostType;
    /**
     * @return The ID of the Dedicated Host. The value formats as `&lt;dedicated_host_group_id&gt;:&lt;dedicated_host_id&gt;`.
     * 
     */
    private String id;
    /**
     * @return The image type of the host.
     * 
     */
    private String imageCategory;
    /**
     * @return The IP address of the host.
     * 
     */
    private String ipAddress;
    /**
     * @return The memory usage in percentage.
     * 
     */
    private String memAllocationRatio;
    /**
     * @return The amount of memory used by the host. Unit: `GB`.
     * 
     */
    private String memoryUsed;
    /**
     * @return Indicates whether you have the OS permissions on the host. Valid values: `0`: You do not have the OS permissions on the host. `1`: You have the OS permissions on the host.
     * 
     */
    private String openPermission;
    /**
     * @return The state of the host.
     * 
     */
    private String status;
    /**
     * @return The storage usage of the host. Unit: `GB`.
     * 
     */
    private String storageUsed;
    /**
     * @return The tag of the resource.
     * 
     */
    private Map<String,Object> tags;
    /**
     * @return The ID of the virtual private cloud (VPC) to which the host is connected.
     * 
     */
    private String vpcId;
    /**
     * @return The ID of the vSwitch.
     * 
     */
    private String vswitchId;
    /**
     * @return The zone ID of the host.
     * 
     */
    private String zoneId;

    private GetDedicatedHostsHost() {}
    /**
     * @return Specifies whether instances can be created on the host. Valid values: `1` or `0`. `1`: Instances can be created on the host. `0`: Instances cannot be created on the host.
     * 
     */
    public String allocationStatus() {
        return this.allocationStatus;
    }
    /**
     * @return The ID of the bastion host with which the host is associated.
     * 
     */
    public String bastionInstanceId() {
        return this.bastionInstanceId;
    }
    /**
     * @return The numeric value of the CPU over commit ratio of the dedicated cluster.
     * 
     */
    public String cpuAllocationRatio() {
        return this.cpuAllocationRatio;
    }
    /**
     * @return The number of CPU cores used by the host.
     * 
     */
    public String cpuUsed() {
        return this.cpuUsed;
    }
    /**
     * @return The time when the host was created. The time follows the ISO 8601 standard in the `yyyy-MM-ddTHH:mm:ssZ` format. The time is displayed in UTC.
     * 
     */
    public String createTime() {
        return this.createTime;
    }
    /**
     * @return The ID of the dedicated cluster in which the host is created.
     * 
     */
    public String dedicatedHostGroupId() {
        return this.dedicatedHostGroupId;
    }
    /**
     * @return The ID of the host.
     * 
     */
    public String dedicatedHostId() {
        return this.dedicatedHostId;
    }
    /**
     * @return The disk usage in percentage.
     * 
     */
    public String diskAllocationRatio() {
        return this.diskAllocationRatio;
    }
    /**
     * @return The Elastic Compute Service (ECS) instance type.
     * 
     */
    public String ecsClassCode() {
        return this.ecsClassCode;
    }
    /**
     * @return The time when the host expires. The time follows the ISO 8601 standard in the `yyyy-MM-ddTHH:mm:ssZ` format. The time is displayed in UTC.
     * 
     */
    public String endTime() {
        return this.endTime;
    }
    /**
     * @return The type of the database engine that is used by the host.
     * 
     */
    public String engine() {
        return this.engine;
    }
    /**
     * @return The time when the host expires. The time follows the ISO 8601 standard in the `yyyy-MM-ddTHH:mm:ssZ` format. The time is displayed in UTC.
     * 
     */
    public String expiredTime() {
        return this.expiredTime;
    }
    /**
     * @return The instance type of the host.
     * 
     */
    public String hostClass() {
        return this.hostClass;
    }
    /**
     * @return The number of CPU cores specified for the host. Unit: `core`.
     * 
     */
    public String hostCpu() {
        return this.hostCpu;
    }
    /**
     * @return The memory of the host. Unit: `GB`.
     * 
     */
    public String hostMem() {
        return this.hostMem;
    }
    /**
     * @return The name of the host.
     * 
     */
    public String hostName() {
        return this.hostName;
    }
    /**
     * @return The total storage capacity of the host. Unit: `GB`.
     * 
     */
    public String hostStorage() {
        return this.hostStorage;
    }
    /**
     * @return The storage type of the host.
     * 
     */
    public String hostType() {
        return this.hostType;
    }
    /**
     * @return The ID of the Dedicated Host. The value formats as `&lt;dedicated_host_group_id&gt;:&lt;dedicated_host_id&gt;`.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The image type of the host.
     * 
     */
    public String imageCategory() {
        return this.imageCategory;
    }
    /**
     * @return The IP address of the host.
     * 
     */
    public String ipAddress() {
        return this.ipAddress;
    }
    /**
     * @return The memory usage in percentage.
     * 
     */
    public String memAllocationRatio() {
        return this.memAllocationRatio;
    }
    /**
     * @return The amount of memory used by the host. Unit: `GB`.
     * 
     */
    public String memoryUsed() {
        return this.memoryUsed;
    }
    /**
     * @return Indicates whether you have the OS permissions on the host. Valid values: `0`: You do not have the OS permissions on the host. `1`: You have the OS permissions on the host.
     * 
     */
    public String openPermission() {
        return this.openPermission;
    }
    /**
     * @return The state of the host.
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return The storage usage of the host. Unit: `GB`.
     * 
     */
    public String storageUsed() {
        return this.storageUsed;
    }
    /**
     * @return The tag of the resource.
     * 
     */
    public Map<String,Object> tags() {
        return this.tags;
    }
    /**
     * @return The ID of the virtual private cloud (VPC) to which the host is connected.
     * 
     */
    public String vpcId() {
        return this.vpcId;
    }
    /**
     * @return The ID of the vSwitch.
     * 
     */
    public String vswitchId() {
        return this.vswitchId;
    }
    /**
     * @return The zone ID of the host.
     * 
     */
    public String zoneId() {
        return this.zoneId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDedicatedHostsHost defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String allocationStatus;
        private String bastionInstanceId;
        private String cpuAllocationRatio;
        private String cpuUsed;
        private String createTime;
        private String dedicatedHostGroupId;
        private String dedicatedHostId;
        private String diskAllocationRatio;
        private String ecsClassCode;
        private String endTime;
        private String engine;
        private String expiredTime;
        private String hostClass;
        private String hostCpu;
        private String hostMem;
        private String hostName;
        private String hostStorage;
        private String hostType;
        private String id;
        private String imageCategory;
        private String ipAddress;
        private String memAllocationRatio;
        private String memoryUsed;
        private String openPermission;
        private String status;
        private String storageUsed;
        private Map<String,Object> tags;
        private String vpcId;
        private String vswitchId;
        private String zoneId;
        public Builder() {}
        public Builder(GetDedicatedHostsHost defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allocationStatus = defaults.allocationStatus;
    	      this.bastionInstanceId = defaults.bastionInstanceId;
    	      this.cpuAllocationRatio = defaults.cpuAllocationRatio;
    	      this.cpuUsed = defaults.cpuUsed;
    	      this.createTime = defaults.createTime;
    	      this.dedicatedHostGroupId = defaults.dedicatedHostGroupId;
    	      this.dedicatedHostId = defaults.dedicatedHostId;
    	      this.diskAllocationRatio = defaults.diskAllocationRatio;
    	      this.ecsClassCode = defaults.ecsClassCode;
    	      this.endTime = defaults.endTime;
    	      this.engine = defaults.engine;
    	      this.expiredTime = defaults.expiredTime;
    	      this.hostClass = defaults.hostClass;
    	      this.hostCpu = defaults.hostCpu;
    	      this.hostMem = defaults.hostMem;
    	      this.hostName = defaults.hostName;
    	      this.hostStorage = defaults.hostStorage;
    	      this.hostType = defaults.hostType;
    	      this.id = defaults.id;
    	      this.imageCategory = defaults.imageCategory;
    	      this.ipAddress = defaults.ipAddress;
    	      this.memAllocationRatio = defaults.memAllocationRatio;
    	      this.memoryUsed = defaults.memoryUsed;
    	      this.openPermission = defaults.openPermission;
    	      this.status = defaults.status;
    	      this.storageUsed = defaults.storageUsed;
    	      this.tags = defaults.tags;
    	      this.vpcId = defaults.vpcId;
    	      this.vswitchId = defaults.vswitchId;
    	      this.zoneId = defaults.zoneId;
        }

        @CustomType.Setter
        public Builder allocationStatus(String allocationStatus) {
            if (allocationStatus == null) {
              throw new MissingRequiredPropertyException("GetDedicatedHostsHost", "allocationStatus");
            }
            this.allocationStatus = allocationStatus;
            return this;
        }
        @CustomType.Setter
        public Builder bastionInstanceId(String bastionInstanceId) {
            if (bastionInstanceId == null) {
              throw new MissingRequiredPropertyException("GetDedicatedHostsHost", "bastionInstanceId");
            }
            this.bastionInstanceId = bastionInstanceId;
            return this;
        }
        @CustomType.Setter
        public Builder cpuAllocationRatio(String cpuAllocationRatio) {
            if (cpuAllocationRatio == null) {
              throw new MissingRequiredPropertyException("GetDedicatedHostsHost", "cpuAllocationRatio");
            }
            this.cpuAllocationRatio = cpuAllocationRatio;
            return this;
        }
        @CustomType.Setter
        public Builder cpuUsed(String cpuUsed) {
            if (cpuUsed == null) {
              throw new MissingRequiredPropertyException("GetDedicatedHostsHost", "cpuUsed");
            }
            this.cpuUsed = cpuUsed;
            return this;
        }
        @CustomType.Setter
        public Builder createTime(String createTime) {
            if (createTime == null) {
              throw new MissingRequiredPropertyException("GetDedicatedHostsHost", "createTime");
            }
            this.createTime = createTime;
            return this;
        }
        @CustomType.Setter
        public Builder dedicatedHostGroupId(String dedicatedHostGroupId) {
            if (dedicatedHostGroupId == null) {
              throw new MissingRequiredPropertyException("GetDedicatedHostsHost", "dedicatedHostGroupId");
            }
            this.dedicatedHostGroupId = dedicatedHostGroupId;
            return this;
        }
        @CustomType.Setter
        public Builder dedicatedHostId(String dedicatedHostId) {
            if (dedicatedHostId == null) {
              throw new MissingRequiredPropertyException("GetDedicatedHostsHost", "dedicatedHostId");
            }
            this.dedicatedHostId = dedicatedHostId;
            return this;
        }
        @CustomType.Setter
        public Builder diskAllocationRatio(String diskAllocationRatio) {
            if (diskAllocationRatio == null) {
              throw new MissingRequiredPropertyException("GetDedicatedHostsHost", "diskAllocationRatio");
            }
            this.diskAllocationRatio = diskAllocationRatio;
            return this;
        }
        @CustomType.Setter
        public Builder ecsClassCode(String ecsClassCode) {
            if (ecsClassCode == null) {
              throw new MissingRequiredPropertyException("GetDedicatedHostsHost", "ecsClassCode");
            }
            this.ecsClassCode = ecsClassCode;
            return this;
        }
        @CustomType.Setter
        public Builder endTime(String endTime) {
            if (endTime == null) {
              throw new MissingRequiredPropertyException("GetDedicatedHostsHost", "endTime");
            }
            this.endTime = endTime;
            return this;
        }
        @CustomType.Setter
        public Builder engine(String engine) {
            if (engine == null) {
              throw new MissingRequiredPropertyException("GetDedicatedHostsHost", "engine");
            }
            this.engine = engine;
            return this;
        }
        @CustomType.Setter
        public Builder expiredTime(String expiredTime) {
            if (expiredTime == null) {
              throw new MissingRequiredPropertyException("GetDedicatedHostsHost", "expiredTime");
            }
            this.expiredTime = expiredTime;
            return this;
        }
        @CustomType.Setter
        public Builder hostClass(String hostClass) {
            if (hostClass == null) {
              throw new MissingRequiredPropertyException("GetDedicatedHostsHost", "hostClass");
            }
            this.hostClass = hostClass;
            return this;
        }
        @CustomType.Setter
        public Builder hostCpu(String hostCpu) {
            if (hostCpu == null) {
              throw new MissingRequiredPropertyException("GetDedicatedHostsHost", "hostCpu");
            }
            this.hostCpu = hostCpu;
            return this;
        }
        @CustomType.Setter
        public Builder hostMem(String hostMem) {
            if (hostMem == null) {
              throw new MissingRequiredPropertyException("GetDedicatedHostsHost", "hostMem");
            }
            this.hostMem = hostMem;
            return this;
        }
        @CustomType.Setter
        public Builder hostName(String hostName) {
            if (hostName == null) {
              throw new MissingRequiredPropertyException("GetDedicatedHostsHost", "hostName");
            }
            this.hostName = hostName;
            return this;
        }
        @CustomType.Setter
        public Builder hostStorage(String hostStorage) {
            if (hostStorage == null) {
              throw new MissingRequiredPropertyException("GetDedicatedHostsHost", "hostStorage");
            }
            this.hostStorage = hostStorage;
            return this;
        }
        @CustomType.Setter
        public Builder hostType(String hostType) {
            if (hostType == null) {
              throw new MissingRequiredPropertyException("GetDedicatedHostsHost", "hostType");
            }
            this.hostType = hostType;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetDedicatedHostsHost", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder imageCategory(String imageCategory) {
            if (imageCategory == null) {
              throw new MissingRequiredPropertyException("GetDedicatedHostsHost", "imageCategory");
            }
            this.imageCategory = imageCategory;
            return this;
        }
        @CustomType.Setter
        public Builder ipAddress(String ipAddress) {
            if (ipAddress == null) {
              throw new MissingRequiredPropertyException("GetDedicatedHostsHost", "ipAddress");
            }
            this.ipAddress = ipAddress;
            return this;
        }
        @CustomType.Setter
        public Builder memAllocationRatio(String memAllocationRatio) {
            if (memAllocationRatio == null) {
              throw new MissingRequiredPropertyException("GetDedicatedHostsHost", "memAllocationRatio");
            }
            this.memAllocationRatio = memAllocationRatio;
            return this;
        }
        @CustomType.Setter
        public Builder memoryUsed(String memoryUsed) {
            if (memoryUsed == null) {
              throw new MissingRequiredPropertyException("GetDedicatedHostsHost", "memoryUsed");
            }
            this.memoryUsed = memoryUsed;
            return this;
        }
        @CustomType.Setter
        public Builder openPermission(String openPermission) {
            if (openPermission == null) {
              throw new MissingRequiredPropertyException("GetDedicatedHostsHost", "openPermission");
            }
            this.openPermission = openPermission;
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            if (status == null) {
              throw new MissingRequiredPropertyException("GetDedicatedHostsHost", "status");
            }
            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder storageUsed(String storageUsed) {
            if (storageUsed == null) {
              throw new MissingRequiredPropertyException("GetDedicatedHostsHost", "storageUsed");
            }
            this.storageUsed = storageUsed;
            return this;
        }
        @CustomType.Setter
        public Builder tags(Map<String,Object> tags) {
            if (tags == null) {
              throw new MissingRequiredPropertyException("GetDedicatedHostsHost", "tags");
            }
            this.tags = tags;
            return this;
        }
        @CustomType.Setter
        public Builder vpcId(String vpcId) {
            if (vpcId == null) {
              throw new MissingRequiredPropertyException("GetDedicatedHostsHost", "vpcId");
            }
            this.vpcId = vpcId;
            return this;
        }
        @CustomType.Setter
        public Builder vswitchId(String vswitchId) {
            if (vswitchId == null) {
              throw new MissingRequiredPropertyException("GetDedicatedHostsHost", "vswitchId");
            }
            this.vswitchId = vswitchId;
            return this;
        }
        @CustomType.Setter
        public Builder zoneId(String zoneId) {
            if (zoneId == null) {
              throw new MissingRequiredPropertyException("GetDedicatedHostsHost", "zoneId");
            }
            this.zoneId = zoneId;
            return this;
        }
        public GetDedicatedHostsHost build() {
            final var _resultValue = new GetDedicatedHostsHost();
            _resultValue.allocationStatus = allocationStatus;
            _resultValue.bastionInstanceId = bastionInstanceId;
            _resultValue.cpuAllocationRatio = cpuAllocationRatio;
            _resultValue.cpuUsed = cpuUsed;
            _resultValue.createTime = createTime;
            _resultValue.dedicatedHostGroupId = dedicatedHostGroupId;
            _resultValue.dedicatedHostId = dedicatedHostId;
            _resultValue.diskAllocationRatio = diskAllocationRatio;
            _resultValue.ecsClassCode = ecsClassCode;
            _resultValue.endTime = endTime;
            _resultValue.engine = engine;
            _resultValue.expiredTime = expiredTime;
            _resultValue.hostClass = hostClass;
            _resultValue.hostCpu = hostCpu;
            _resultValue.hostMem = hostMem;
            _resultValue.hostName = hostName;
            _resultValue.hostStorage = hostStorage;
            _resultValue.hostType = hostType;
            _resultValue.id = id;
            _resultValue.imageCategory = imageCategory;
            _resultValue.ipAddress = ipAddress;
            _resultValue.memAllocationRatio = memAllocationRatio;
            _resultValue.memoryUsed = memoryUsed;
            _resultValue.openPermission = openPermission;
            _resultValue.status = status;
            _resultValue.storageUsed = storageUsed;
            _resultValue.tags = tags;
            _resultValue.vpcId = vpcId;
            _resultValue.vswitchId = vswitchId;
            _resultValue.zoneId = zoneId;
            return _resultValue;
        }
    }
}
