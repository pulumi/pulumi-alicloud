// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.cddc.inputs;

import com.pulumi.alicloud.cddc.inputs.DedicatedPropreHostEcsClassListArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DedicatedPropreHostState extends com.pulumi.resources.ResourceArgs {

    public static final DedicatedPropreHostState Empty = new DedicatedPropreHostState();

    /**
     * Whether to enable automatic renewal. Valid values:
     * - **true**: On
     * - **false** (default): Off
     * 
     */
    @Import(name="autoRenew")
    private @Nullable Output<String> autoRenew;

    /**
     * @return Whether to enable automatic renewal. Valid values:
     * - **true**: On
     * - **false** (default): Off
     * 
     */
    public Optional<Output<String>> autoRenew() {
        return Optional.ofNullable(this.autoRenew);
    }

    /**
     * You have a dedicated cluster ID.
     * 
     */
    @Import(name="dedicatedHostGroupId")
    private @Nullable Output<String> dedicatedHostGroupId;

    /**
     * @return You have a dedicated cluster ID.
     * 
     */
    public Optional<Output<String>> dedicatedHostGroupId() {
        return Optional.ofNullable(this.dedicatedHostGroupId);
    }

    /**
     * ECS specifications. See `ecs_class_list` below.
     * 
     */
    @Import(name="ecsClassLists")
    private @Nullable Output<List<DedicatedPropreHostEcsClassListArgs>> ecsClassLists;

    /**
     * @return ECS specifications. See `ecs_class_list` below.
     * 
     */
    public Optional<Output<List<DedicatedPropreHostEcsClassListArgs>>> ecsClassLists() {
        return Optional.ofNullable(this.ecsClassLists);
    }

    /**
     * The ID of the cloud server deployment set.
     * 
     */
    @Import(name="ecsDeploymentSetId")
    private @Nullable Output<String> ecsDeploymentSetId;

    /**
     * @return The ID of the cloud server deployment set.
     * 
     */
    public Optional<Output<String>> ecsDeploymentSetId() {
        return Optional.ofNullable(this.ecsDeploymentSetId);
    }

    /**
     * Windows system: length of 2 to 15 characters, allowing the use of upper and lower case letters, numbers. You cannot use only numbers.Other operating systems (such as Linux): the length of 2 to 64 characters, allowing the use of dot (.) to separate characters into multiple segments, each segment allows the use of upper and lower case letters, numbers, but can not use continuous dot (.). Cannot start or end with a dot (.).
     * 
     */
    @Import(name="ecsHostName")
    private @Nullable Output<String> ecsHostName;

    /**
     * @return Windows system: length of 2 to 15 characters, allowing the use of upper and lower case letters, numbers. You cannot use only numbers.Other operating systems (such as Linux): the length of 2 to 64 characters, allowing the use of dot (.) to separate characters into multiple segments, each segment allows the use of upper and lower case letters, numbers, but can not use continuous dot (.). Cannot start or end with a dot (.).
     * 
     */
    public Optional<Output<String>> ecsHostName() {
        return Optional.ofNullable(this.ecsHostName);
    }

    /**
     * ECS instance ID.
     * 
     */
    @Import(name="ecsInstanceId")
    private @Nullable Output<String> ecsInstanceId;

    /**
     * @return ECS instance ID.
     * 
     */
    public Optional<Output<String>> ecsInstanceId() {
        return Optional.ofNullable(this.ecsInstanceId);
    }

    /**
     * The instance name. It must be 2 to 128 characters in length and must start with an uppercase or lowercase letter or a Chinese character. It cannot start with http:// or https. Can contain Chinese, English, numbers, half-width colons (:), underscores (_), half-width periods (.), or dashes (-). The default value is the InstanceId of the instance.
     * 
     */
    @Import(name="ecsInstanceName")
    private @Nullable Output<String> ecsInstanceName;

    /**
     * @return The instance name. It must be 2 to 128 characters in length and must start with an uppercase or lowercase letter or a Chinese character. It cannot start with http:// or https. Can contain Chinese, English, numbers, half-width colons (:), underscores (_), half-width periods (.), or dashes (-). The default value is the InstanceId of the instance.
     * 
     */
    public Optional<Output<String>> ecsInstanceName() {
        return Optional.ofNullable(this.ecsInstanceName);
    }

    /**
     * Whether to automatically add an ordered suffix for HostName and InstanceName when creating multiple instances. The ordered suffix starts from 001 and cannot exceed 999. Value Description:
     * - **true**: added.
     * - **false** (default): Do not add.
     *   When the HostName or InstanceName is set according to the specified sorting format, and the naming suffix name_suffix is not set, that is, when the naming format is name_prefix[begin_number,bits], the UniqueSuffix does not take effect, and the names are only sorted according to the specified order.
     * 
     */
    @Import(name="ecsUniqueSuffix")
    private @Nullable Output<String> ecsUniqueSuffix;

    /**
     * @return Whether to automatically add an ordered suffix for HostName and InstanceName when creating multiple instances. The ordered suffix starts from 001 and cannot exceed 999. Value Description:
     * - **true**: added.
     * - **false** (default): Do not add.
     *   When the HostName or InstanceName is set according to the specified sorting format, and the naming suffix name_suffix is not set, that is, when the naming format is name_prefix[begin_number,bits], the UniqueSuffix does not take effect, and the names are only sorted according to the specified order.
     * 
     */
    public Optional<Output<String>> ecsUniqueSuffix() {
        return Optional.ofNullable(this.ecsUniqueSuffix);
    }

    /**
     * The ID of the zone.
     * 
     */
    @Import(name="ecsZoneId")
    private @Nullable Output<String> ecsZoneId;

    /**
     * @return The ID of the zone.
     * 
     */
    public Optional<Output<String>> ecsZoneId() {
        return Optional.ofNullable(this.ecsZoneId);
    }

    /**
     * Database type, value:
     * - **alisql**
     * - **tair**
     * - **mssql**
     *   Must be consistent with the parent resource cluster engine attributes.
     * 
     */
    @Import(name="engine")
    private @Nullable Output<String> engine;

    /**
     * @return Database type, value:
     * - **alisql**
     * - **tair**
     * - **mssql**
     *   Must be consistent with the parent resource cluster engine attributes.
     * 
     */
    public Optional<Output<String>> engine() {
        return Optional.ofNullable(this.engine);
    }

    /**
     * The ID of the custom image.
     * &gt; **NOTE:**  If you need to use the default image, you do not need to fill it in.
     * 
     */
    @Import(name="imageId")
    private @Nullable Output<String> imageId;

    /**
     * @return The ID of the custom image.
     * &gt; **NOTE:**  If you need to use the default image, you do not need to fill it in.
     * 
     */
    public Optional<Output<String>> imageId() {
        return Optional.ofNullable(this.imageId);
    }

    /**
     * The key pair name.
     * 
     */
    @Import(name="keyPairName")
    private @Nullable Output<String> keyPairName;

    /**
     * @return The key pair name.
     * 
     */
    public Optional<Output<String>> keyPairName() {
        return Optional.ofNullable(this.keyPairName);
    }

    /**
     * Host login password, which can be set later. The password must meet the following requirements:
     * - Length is 8~30 characters.
     * - Must contain at least three items: uppercase letters, lowercase letters, numbers, and special characters.
     * - Special symbol &#39;()\&#39; ~! @#$%^&amp; *-_+ =|{}[]:;&#39;,.? /&#39;
     * &gt; **NOTE:** - If you need to set the host login password later, fill in an empty string for this parameter. If you need to set a host login password, we recommend that you use the HTTPS protocol to send requests to avoid password leakage.
     * 
     */
    @Import(name="osPassword")
    private @Nullable Output<String> osPassword;

    /**
     * @return Host login password, which can be set later. The password must meet the following requirements:
     * - Length is 8~30 characters.
     * - Must contain at least three items: uppercase letters, lowercase letters, numbers, and special characters.
     * - Special symbol &#39;()\&#39; ~! @#$%^&amp; *-_+ =|{}[]:;&#39;,.? /&#39;
     * &gt; **NOTE:** - If you need to set the host login password later, fill in an empty string for this parameter. If you need to set a host login password, we recommend that you use the HTTPS protocol to send requests to avoid password leakage.
     * 
     */
    public Optional<Output<String>> osPassword() {
        return Optional.ofNullable(this.osPassword);
    }

    /**
     * Whether to use the default password of the image.
     * - **false**: (default)Do not use
     * - **true**: Use
     * &gt; **NOTE:**  If the default password of the image is used, the **OSPassword** parameter is not required.
     * 
     */
    @Import(name="passwordInherit")
    private @Nullable Output<String> passwordInherit;

    /**
     * @return Whether to use the default password of the image.
     * - **false**: (default)Do not use
     * - **true**: Use
     * &gt; **NOTE:**  If the default password of the image is used, the **OSPassword** parameter is not required.
     * 
     */
    public Optional<Output<String>> passwordInherit() {
        return Optional.ofNullable(this.passwordInherit);
    }

    /**
     * The Payment type. Currently, only **Subscription** is supported.
     * 
     */
    @Import(name="paymentType")
    private @Nullable Output<String> paymentType;

    /**
     * @return The Payment type. Currently, only **Subscription** is supported.
     * 
     */
    public Optional<Output<String>> paymentType() {
        return Optional.ofNullable(this.paymentType);
    }

    /**
     * Duration of purchase.
     * 
     */
    @Import(name="period")
    private @Nullable Output<String> period;

    /**
     * @return Duration of purchase.
     * 
     */
    public Optional<Output<String>> period() {
        return Optional.ofNullable(this.period);
    }

    /**
     * The subscription type. Currently, only **Monthly** (subscription) is supported.
     * 
     */
    @Import(name="periodType")
    private @Nullable Output<String> periodType;

    /**
     * @return The subscription type. Currently, only **Monthly** (subscription) is supported.
     * 
     */
    public Optional<Output<String>> periodType() {
        return Optional.ofNullable(this.periodType);
    }

    /**
     * The ID of the security group.
     * 
     */
    @Import(name="securityGroupId")
    private @Nullable Output<String> securityGroupId;

    /**
     * @return The ID of the security group.
     * 
     */
    public Optional<Output<String>> securityGroupId() {
        return Optional.ofNullable(this.securityGroupId);
    }

    /**
     * VPCID of the VPC.
     * 
     */
    @Import(name="vpcId")
    private @Nullable Output<String> vpcId;

    /**
     * @return VPCID of the VPC.
     * 
     */
    public Optional<Output<String>> vpcId() {
        return Optional.ofNullable(this.vpcId);
    }

    /**
     * The ID of the virtual switch.
     * 
     */
    @Import(name="vswitchId")
    private @Nullable Output<String> vswitchId;

    /**
     * @return The ID of the virtual switch.
     * 
     */
    public Optional<Output<String>> vswitchId() {
        return Optional.ofNullable(this.vswitchId);
    }

    private DedicatedPropreHostState() {}

    private DedicatedPropreHostState(DedicatedPropreHostState $) {
        this.autoRenew = $.autoRenew;
        this.dedicatedHostGroupId = $.dedicatedHostGroupId;
        this.ecsClassLists = $.ecsClassLists;
        this.ecsDeploymentSetId = $.ecsDeploymentSetId;
        this.ecsHostName = $.ecsHostName;
        this.ecsInstanceId = $.ecsInstanceId;
        this.ecsInstanceName = $.ecsInstanceName;
        this.ecsUniqueSuffix = $.ecsUniqueSuffix;
        this.ecsZoneId = $.ecsZoneId;
        this.engine = $.engine;
        this.imageId = $.imageId;
        this.keyPairName = $.keyPairName;
        this.osPassword = $.osPassword;
        this.passwordInherit = $.passwordInherit;
        this.paymentType = $.paymentType;
        this.period = $.period;
        this.periodType = $.periodType;
        this.securityGroupId = $.securityGroupId;
        this.vpcId = $.vpcId;
        this.vswitchId = $.vswitchId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DedicatedPropreHostState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DedicatedPropreHostState $;

        public Builder() {
            $ = new DedicatedPropreHostState();
        }

        public Builder(DedicatedPropreHostState defaults) {
            $ = new DedicatedPropreHostState(Objects.requireNonNull(defaults));
        }

        /**
         * @param autoRenew Whether to enable automatic renewal. Valid values:
         * - **true**: On
         * - **false** (default): Off
         * 
         * @return builder
         * 
         */
        public Builder autoRenew(@Nullable Output<String> autoRenew) {
            $.autoRenew = autoRenew;
            return this;
        }

        /**
         * @param autoRenew Whether to enable automatic renewal. Valid values:
         * - **true**: On
         * - **false** (default): Off
         * 
         * @return builder
         * 
         */
        public Builder autoRenew(String autoRenew) {
            return autoRenew(Output.of(autoRenew));
        }

        /**
         * @param dedicatedHostGroupId You have a dedicated cluster ID.
         * 
         * @return builder
         * 
         */
        public Builder dedicatedHostGroupId(@Nullable Output<String> dedicatedHostGroupId) {
            $.dedicatedHostGroupId = dedicatedHostGroupId;
            return this;
        }

        /**
         * @param dedicatedHostGroupId You have a dedicated cluster ID.
         * 
         * @return builder
         * 
         */
        public Builder dedicatedHostGroupId(String dedicatedHostGroupId) {
            return dedicatedHostGroupId(Output.of(dedicatedHostGroupId));
        }

        /**
         * @param ecsClassLists ECS specifications. See `ecs_class_list` below.
         * 
         * @return builder
         * 
         */
        public Builder ecsClassLists(@Nullable Output<List<DedicatedPropreHostEcsClassListArgs>> ecsClassLists) {
            $.ecsClassLists = ecsClassLists;
            return this;
        }

        /**
         * @param ecsClassLists ECS specifications. See `ecs_class_list` below.
         * 
         * @return builder
         * 
         */
        public Builder ecsClassLists(List<DedicatedPropreHostEcsClassListArgs> ecsClassLists) {
            return ecsClassLists(Output.of(ecsClassLists));
        }

        /**
         * @param ecsClassLists ECS specifications. See `ecs_class_list` below.
         * 
         * @return builder
         * 
         */
        public Builder ecsClassLists(DedicatedPropreHostEcsClassListArgs... ecsClassLists) {
            return ecsClassLists(List.of(ecsClassLists));
        }

        /**
         * @param ecsDeploymentSetId The ID of the cloud server deployment set.
         * 
         * @return builder
         * 
         */
        public Builder ecsDeploymentSetId(@Nullable Output<String> ecsDeploymentSetId) {
            $.ecsDeploymentSetId = ecsDeploymentSetId;
            return this;
        }

        /**
         * @param ecsDeploymentSetId The ID of the cloud server deployment set.
         * 
         * @return builder
         * 
         */
        public Builder ecsDeploymentSetId(String ecsDeploymentSetId) {
            return ecsDeploymentSetId(Output.of(ecsDeploymentSetId));
        }

        /**
         * @param ecsHostName Windows system: length of 2 to 15 characters, allowing the use of upper and lower case letters, numbers. You cannot use only numbers.Other operating systems (such as Linux): the length of 2 to 64 characters, allowing the use of dot (.) to separate characters into multiple segments, each segment allows the use of upper and lower case letters, numbers, but can not use continuous dot (.). Cannot start or end with a dot (.).
         * 
         * @return builder
         * 
         */
        public Builder ecsHostName(@Nullable Output<String> ecsHostName) {
            $.ecsHostName = ecsHostName;
            return this;
        }

        /**
         * @param ecsHostName Windows system: length of 2 to 15 characters, allowing the use of upper and lower case letters, numbers. You cannot use only numbers.Other operating systems (such as Linux): the length of 2 to 64 characters, allowing the use of dot (.) to separate characters into multiple segments, each segment allows the use of upper and lower case letters, numbers, but can not use continuous dot (.). Cannot start or end with a dot (.).
         * 
         * @return builder
         * 
         */
        public Builder ecsHostName(String ecsHostName) {
            return ecsHostName(Output.of(ecsHostName));
        }

        /**
         * @param ecsInstanceId ECS instance ID.
         * 
         * @return builder
         * 
         */
        public Builder ecsInstanceId(@Nullable Output<String> ecsInstanceId) {
            $.ecsInstanceId = ecsInstanceId;
            return this;
        }

        /**
         * @param ecsInstanceId ECS instance ID.
         * 
         * @return builder
         * 
         */
        public Builder ecsInstanceId(String ecsInstanceId) {
            return ecsInstanceId(Output.of(ecsInstanceId));
        }

        /**
         * @param ecsInstanceName The instance name. It must be 2 to 128 characters in length and must start with an uppercase or lowercase letter or a Chinese character. It cannot start with http:// or https. Can contain Chinese, English, numbers, half-width colons (:), underscores (_), half-width periods (.), or dashes (-). The default value is the InstanceId of the instance.
         * 
         * @return builder
         * 
         */
        public Builder ecsInstanceName(@Nullable Output<String> ecsInstanceName) {
            $.ecsInstanceName = ecsInstanceName;
            return this;
        }

        /**
         * @param ecsInstanceName The instance name. It must be 2 to 128 characters in length and must start with an uppercase or lowercase letter or a Chinese character. It cannot start with http:// or https. Can contain Chinese, English, numbers, half-width colons (:), underscores (_), half-width periods (.), or dashes (-). The default value is the InstanceId of the instance.
         * 
         * @return builder
         * 
         */
        public Builder ecsInstanceName(String ecsInstanceName) {
            return ecsInstanceName(Output.of(ecsInstanceName));
        }

        /**
         * @param ecsUniqueSuffix Whether to automatically add an ordered suffix for HostName and InstanceName when creating multiple instances. The ordered suffix starts from 001 and cannot exceed 999. Value Description:
         * - **true**: added.
         * - **false** (default): Do not add.
         *   When the HostName or InstanceName is set according to the specified sorting format, and the naming suffix name_suffix is not set, that is, when the naming format is name_prefix[begin_number,bits], the UniqueSuffix does not take effect, and the names are only sorted according to the specified order.
         * 
         * @return builder
         * 
         */
        public Builder ecsUniqueSuffix(@Nullable Output<String> ecsUniqueSuffix) {
            $.ecsUniqueSuffix = ecsUniqueSuffix;
            return this;
        }

        /**
         * @param ecsUniqueSuffix Whether to automatically add an ordered suffix for HostName and InstanceName when creating multiple instances. The ordered suffix starts from 001 and cannot exceed 999. Value Description:
         * - **true**: added.
         * - **false** (default): Do not add.
         *   When the HostName or InstanceName is set according to the specified sorting format, and the naming suffix name_suffix is not set, that is, when the naming format is name_prefix[begin_number,bits], the UniqueSuffix does not take effect, and the names are only sorted according to the specified order.
         * 
         * @return builder
         * 
         */
        public Builder ecsUniqueSuffix(String ecsUniqueSuffix) {
            return ecsUniqueSuffix(Output.of(ecsUniqueSuffix));
        }

        /**
         * @param ecsZoneId The ID of the zone.
         * 
         * @return builder
         * 
         */
        public Builder ecsZoneId(@Nullable Output<String> ecsZoneId) {
            $.ecsZoneId = ecsZoneId;
            return this;
        }

        /**
         * @param ecsZoneId The ID of the zone.
         * 
         * @return builder
         * 
         */
        public Builder ecsZoneId(String ecsZoneId) {
            return ecsZoneId(Output.of(ecsZoneId));
        }

        /**
         * @param engine Database type, value:
         * - **alisql**
         * - **tair**
         * - **mssql**
         *   Must be consistent with the parent resource cluster engine attributes.
         * 
         * @return builder
         * 
         */
        public Builder engine(@Nullable Output<String> engine) {
            $.engine = engine;
            return this;
        }

        /**
         * @param engine Database type, value:
         * - **alisql**
         * - **tair**
         * - **mssql**
         *   Must be consistent with the parent resource cluster engine attributes.
         * 
         * @return builder
         * 
         */
        public Builder engine(String engine) {
            return engine(Output.of(engine));
        }

        /**
         * @param imageId The ID of the custom image.
         * &gt; **NOTE:**  If you need to use the default image, you do not need to fill it in.
         * 
         * @return builder
         * 
         */
        public Builder imageId(@Nullable Output<String> imageId) {
            $.imageId = imageId;
            return this;
        }

        /**
         * @param imageId The ID of the custom image.
         * &gt; **NOTE:**  If you need to use the default image, you do not need to fill it in.
         * 
         * @return builder
         * 
         */
        public Builder imageId(String imageId) {
            return imageId(Output.of(imageId));
        }

        /**
         * @param keyPairName The key pair name.
         * 
         * @return builder
         * 
         */
        public Builder keyPairName(@Nullable Output<String> keyPairName) {
            $.keyPairName = keyPairName;
            return this;
        }

        /**
         * @param keyPairName The key pair name.
         * 
         * @return builder
         * 
         */
        public Builder keyPairName(String keyPairName) {
            return keyPairName(Output.of(keyPairName));
        }

        /**
         * @param osPassword Host login password, which can be set later. The password must meet the following requirements:
         * - Length is 8~30 characters.
         * - Must contain at least three items: uppercase letters, lowercase letters, numbers, and special characters.
         * - Special symbol &#39;()\&#39; ~! @#$%^&amp; *-_+ =|{}[]:;&#39;,.? /&#39;
         * &gt; **NOTE:** - If you need to set the host login password later, fill in an empty string for this parameter. If you need to set a host login password, we recommend that you use the HTTPS protocol to send requests to avoid password leakage.
         * 
         * @return builder
         * 
         */
        public Builder osPassword(@Nullable Output<String> osPassword) {
            $.osPassword = osPassword;
            return this;
        }

        /**
         * @param osPassword Host login password, which can be set later. The password must meet the following requirements:
         * - Length is 8~30 characters.
         * - Must contain at least three items: uppercase letters, lowercase letters, numbers, and special characters.
         * - Special symbol &#39;()\&#39; ~! @#$%^&amp; *-_+ =|{}[]:;&#39;,.? /&#39;
         * &gt; **NOTE:** - If you need to set the host login password later, fill in an empty string for this parameter. If you need to set a host login password, we recommend that you use the HTTPS protocol to send requests to avoid password leakage.
         * 
         * @return builder
         * 
         */
        public Builder osPassword(String osPassword) {
            return osPassword(Output.of(osPassword));
        }

        /**
         * @param passwordInherit Whether to use the default password of the image.
         * - **false**: (default)Do not use
         * - **true**: Use
         * &gt; **NOTE:**  If the default password of the image is used, the **OSPassword** parameter is not required.
         * 
         * @return builder
         * 
         */
        public Builder passwordInherit(@Nullable Output<String> passwordInherit) {
            $.passwordInherit = passwordInherit;
            return this;
        }

        /**
         * @param passwordInherit Whether to use the default password of the image.
         * - **false**: (default)Do not use
         * - **true**: Use
         * &gt; **NOTE:**  If the default password of the image is used, the **OSPassword** parameter is not required.
         * 
         * @return builder
         * 
         */
        public Builder passwordInherit(String passwordInherit) {
            return passwordInherit(Output.of(passwordInherit));
        }

        /**
         * @param paymentType The Payment type. Currently, only **Subscription** is supported.
         * 
         * @return builder
         * 
         */
        public Builder paymentType(@Nullable Output<String> paymentType) {
            $.paymentType = paymentType;
            return this;
        }

        /**
         * @param paymentType The Payment type. Currently, only **Subscription** is supported.
         * 
         * @return builder
         * 
         */
        public Builder paymentType(String paymentType) {
            return paymentType(Output.of(paymentType));
        }

        /**
         * @param period Duration of purchase.
         * 
         * @return builder
         * 
         */
        public Builder period(@Nullable Output<String> period) {
            $.period = period;
            return this;
        }

        /**
         * @param period Duration of purchase.
         * 
         * @return builder
         * 
         */
        public Builder period(String period) {
            return period(Output.of(period));
        }

        /**
         * @param periodType The subscription type. Currently, only **Monthly** (subscription) is supported.
         * 
         * @return builder
         * 
         */
        public Builder periodType(@Nullable Output<String> periodType) {
            $.periodType = periodType;
            return this;
        }

        /**
         * @param periodType The subscription type. Currently, only **Monthly** (subscription) is supported.
         * 
         * @return builder
         * 
         */
        public Builder periodType(String periodType) {
            return periodType(Output.of(periodType));
        }

        /**
         * @param securityGroupId The ID of the security group.
         * 
         * @return builder
         * 
         */
        public Builder securityGroupId(@Nullable Output<String> securityGroupId) {
            $.securityGroupId = securityGroupId;
            return this;
        }

        /**
         * @param securityGroupId The ID of the security group.
         * 
         * @return builder
         * 
         */
        public Builder securityGroupId(String securityGroupId) {
            return securityGroupId(Output.of(securityGroupId));
        }

        /**
         * @param vpcId VPCID of the VPC.
         * 
         * @return builder
         * 
         */
        public Builder vpcId(@Nullable Output<String> vpcId) {
            $.vpcId = vpcId;
            return this;
        }

        /**
         * @param vpcId VPCID of the VPC.
         * 
         * @return builder
         * 
         */
        public Builder vpcId(String vpcId) {
            return vpcId(Output.of(vpcId));
        }

        /**
         * @param vswitchId The ID of the virtual switch.
         * 
         * @return builder
         * 
         */
        public Builder vswitchId(@Nullable Output<String> vswitchId) {
            $.vswitchId = vswitchId;
            return this;
        }

        /**
         * @param vswitchId The ID of the virtual switch.
         * 
         * @return builder
         * 
         */
        public Builder vswitchId(String vswitchId) {
            return vswitchId(Output.of(vswitchId));
        }

        public DedicatedPropreHostState build() {
            return $;
        }
    }

}
