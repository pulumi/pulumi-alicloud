// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.nlb.outputs;

import com.pulumi.alicloud.nlb.outputs.GetServerGroupsGroupHealthCheck;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetServerGroupsGroup {
    /**
     * @return The protocol version.
     * 
     */
    private String addressIpVersion;
    /**
     * @return Indicates whether connection draining is enabled.
     * 
     */
    private Boolean connectionDrain;
    /**
     * @return The timeout period of connection draining. Unit: seconds.
     * 
     */
    private Integer connectionDrainTimeout;
    /**
     * @return The configurations of health checks.
     * 
     */
    private List<GetServerGroupsGroupHealthCheck> healthChecks;
    /**
     * @return The ID of the Server Group.
     * 
     */
    private String id;
    /**
     * @return Indicates whether client address retention is enabled.
     * 
     */
    private Boolean preserveClientIpEnabled;
    /**
     * @return The protocol used to forward requests to the backend servers.
     * 
     */
    private String protocol;
    /**
     * @return The NLB instance.
     * 
     */
    private List<String> relatedLoadBalancerIds;
    /**
     * @return The ID of the resource group to which the security group belongs.
     * 
     */
    private String resourceGroupId;
    /**
     * @return The routing algorithm.
     * 
     */
    private String scheduler;
    /**
     * @return The number of server groups associated with the NLB instance.
     * 
     */
    private Integer serverCount;
    /**
     * @return The name of the server group.
     * 
     */
    private String serverGroupName;
    /**
     * @return The type of the server group.
     * 
     */
    private String serverGroupType;
    /**
     * @return The status of the server group.
     * 
     */
    private String status;
    /**
     * @return A mapping of tags to assign to the resource.
     * 
     */
    private Map<String,Object> tags;
    /**
     * @return The ID of the VPC to which the server group belongs.
     * 
     */
    private String vpcId;

    private GetServerGroupsGroup() {}
    /**
     * @return The protocol version.
     * 
     */
    public String addressIpVersion() {
        return this.addressIpVersion;
    }
    /**
     * @return Indicates whether connection draining is enabled.
     * 
     */
    public Boolean connectionDrain() {
        return this.connectionDrain;
    }
    /**
     * @return The timeout period of connection draining. Unit: seconds.
     * 
     */
    public Integer connectionDrainTimeout() {
        return this.connectionDrainTimeout;
    }
    /**
     * @return The configurations of health checks.
     * 
     */
    public List<GetServerGroupsGroupHealthCheck> healthChecks() {
        return this.healthChecks;
    }
    /**
     * @return The ID of the Server Group.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Indicates whether client address retention is enabled.
     * 
     */
    public Boolean preserveClientIpEnabled() {
        return this.preserveClientIpEnabled;
    }
    /**
     * @return The protocol used to forward requests to the backend servers.
     * 
     */
    public String protocol() {
        return this.protocol;
    }
    /**
     * @return The NLB instance.
     * 
     */
    public List<String> relatedLoadBalancerIds() {
        return this.relatedLoadBalancerIds;
    }
    /**
     * @return The ID of the resource group to which the security group belongs.
     * 
     */
    public String resourceGroupId() {
        return this.resourceGroupId;
    }
    /**
     * @return The routing algorithm.
     * 
     */
    public String scheduler() {
        return this.scheduler;
    }
    /**
     * @return The number of server groups associated with the NLB instance.
     * 
     */
    public Integer serverCount() {
        return this.serverCount;
    }
    /**
     * @return The name of the server group.
     * 
     */
    public String serverGroupName() {
        return this.serverGroupName;
    }
    /**
     * @return The type of the server group.
     * 
     */
    public String serverGroupType() {
        return this.serverGroupType;
    }
    /**
     * @return The status of the server group.
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return A mapping of tags to assign to the resource.
     * 
     */
    public Map<String,Object> tags() {
        return this.tags;
    }
    /**
     * @return The ID of the VPC to which the server group belongs.
     * 
     */
    public String vpcId() {
        return this.vpcId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetServerGroupsGroup defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String addressIpVersion;
        private Boolean connectionDrain;
        private Integer connectionDrainTimeout;
        private List<GetServerGroupsGroupHealthCheck> healthChecks;
        private String id;
        private Boolean preserveClientIpEnabled;
        private String protocol;
        private List<String> relatedLoadBalancerIds;
        private String resourceGroupId;
        private String scheduler;
        private Integer serverCount;
        private String serverGroupName;
        private String serverGroupType;
        private String status;
        private Map<String,Object> tags;
        private String vpcId;
        public Builder() {}
        public Builder(GetServerGroupsGroup defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.addressIpVersion = defaults.addressIpVersion;
    	      this.connectionDrain = defaults.connectionDrain;
    	      this.connectionDrainTimeout = defaults.connectionDrainTimeout;
    	      this.healthChecks = defaults.healthChecks;
    	      this.id = defaults.id;
    	      this.preserveClientIpEnabled = defaults.preserveClientIpEnabled;
    	      this.protocol = defaults.protocol;
    	      this.relatedLoadBalancerIds = defaults.relatedLoadBalancerIds;
    	      this.resourceGroupId = defaults.resourceGroupId;
    	      this.scheduler = defaults.scheduler;
    	      this.serverCount = defaults.serverCount;
    	      this.serverGroupName = defaults.serverGroupName;
    	      this.serverGroupType = defaults.serverGroupType;
    	      this.status = defaults.status;
    	      this.tags = defaults.tags;
    	      this.vpcId = defaults.vpcId;
        }

        @CustomType.Setter
        public Builder addressIpVersion(String addressIpVersion) {
            this.addressIpVersion = Objects.requireNonNull(addressIpVersion);
            return this;
        }
        @CustomType.Setter
        public Builder connectionDrain(Boolean connectionDrain) {
            this.connectionDrain = Objects.requireNonNull(connectionDrain);
            return this;
        }
        @CustomType.Setter
        public Builder connectionDrainTimeout(Integer connectionDrainTimeout) {
            this.connectionDrainTimeout = Objects.requireNonNull(connectionDrainTimeout);
            return this;
        }
        @CustomType.Setter
        public Builder healthChecks(List<GetServerGroupsGroupHealthCheck> healthChecks) {
            this.healthChecks = Objects.requireNonNull(healthChecks);
            return this;
        }
        public Builder healthChecks(GetServerGroupsGroupHealthCheck... healthChecks) {
            return healthChecks(List.of(healthChecks));
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder preserveClientIpEnabled(Boolean preserveClientIpEnabled) {
            this.preserveClientIpEnabled = Objects.requireNonNull(preserveClientIpEnabled);
            return this;
        }
        @CustomType.Setter
        public Builder protocol(String protocol) {
            this.protocol = Objects.requireNonNull(protocol);
            return this;
        }
        @CustomType.Setter
        public Builder relatedLoadBalancerIds(List<String> relatedLoadBalancerIds) {
            this.relatedLoadBalancerIds = Objects.requireNonNull(relatedLoadBalancerIds);
            return this;
        }
        public Builder relatedLoadBalancerIds(String... relatedLoadBalancerIds) {
            return relatedLoadBalancerIds(List.of(relatedLoadBalancerIds));
        }
        @CustomType.Setter
        public Builder resourceGroupId(String resourceGroupId) {
            this.resourceGroupId = Objects.requireNonNull(resourceGroupId);
            return this;
        }
        @CustomType.Setter
        public Builder scheduler(String scheduler) {
            this.scheduler = Objects.requireNonNull(scheduler);
            return this;
        }
        @CustomType.Setter
        public Builder serverCount(Integer serverCount) {
            this.serverCount = Objects.requireNonNull(serverCount);
            return this;
        }
        @CustomType.Setter
        public Builder serverGroupName(String serverGroupName) {
            this.serverGroupName = Objects.requireNonNull(serverGroupName);
            return this;
        }
        @CustomType.Setter
        public Builder serverGroupType(String serverGroupType) {
            this.serverGroupType = Objects.requireNonNull(serverGroupType);
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            this.status = Objects.requireNonNull(status);
            return this;
        }
        @CustomType.Setter
        public Builder tags(Map<String,Object> tags) {
            this.tags = Objects.requireNonNull(tags);
            return this;
        }
        @CustomType.Setter
        public Builder vpcId(String vpcId) {
            this.vpcId = Objects.requireNonNull(vpcId);
            return this;
        }
        public GetServerGroupsGroup build() {
            final var _resultValue = new GetServerGroupsGroup();
            _resultValue.addressIpVersion = addressIpVersion;
            _resultValue.connectionDrain = connectionDrain;
            _resultValue.connectionDrainTimeout = connectionDrainTimeout;
            _resultValue.healthChecks = healthChecks;
            _resultValue.id = id;
            _resultValue.preserveClientIpEnabled = preserveClientIpEnabled;
            _resultValue.protocol = protocol;
            _resultValue.relatedLoadBalancerIds = relatedLoadBalancerIds;
            _resultValue.resourceGroupId = resourceGroupId;
            _resultValue.scheduler = scheduler;
            _resultValue.serverCount = serverCount;
            _resultValue.serverGroupName = serverGroupName;
            _resultValue.serverGroupType = serverGroupType;
            _resultValue.status = status;
            _resultValue.tags = tags;
            _resultValue.vpcId = vpcId;
            return _resultValue;
        }
    }
}
