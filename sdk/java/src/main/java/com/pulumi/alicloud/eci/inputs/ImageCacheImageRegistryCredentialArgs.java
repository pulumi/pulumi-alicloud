// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.eci.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ImageCacheImageRegistryCredentialArgs extends com.pulumi.resources.ResourceArgs {

    public static final ImageCacheImageRegistryCredentialArgs Empty = new ImageCacheImageRegistryCredentialArgs();

    /**
     * The password of the Image Registry.
     * 
     */
    @Import(name="password")
    private @Nullable Output<String> password;

    /**
     * @return The password of the Image Registry.
     * 
     */
    public Optional<Output<String>> password() {
        return Optional.ofNullable(this.password);
    }

    /**
     * The address of Image Registry without `http://` or `https://`.
     * 
     */
    @Import(name="server")
    private @Nullable Output<String> server;

    /**
     * @return The address of Image Registry without `http://` or `https://`.
     * 
     */
    public Optional<Output<String>> server() {
        return Optional.ofNullable(this.server);
    }

    /**
     * The user name of Image Registry.
     * 
     */
    @Import(name="userName")
    private @Nullable Output<String> userName;

    /**
     * @return The user name of Image Registry.
     * 
     */
    public Optional<Output<String>> userName() {
        return Optional.ofNullable(this.userName);
    }

    private ImageCacheImageRegistryCredentialArgs() {}

    private ImageCacheImageRegistryCredentialArgs(ImageCacheImageRegistryCredentialArgs $) {
        this.password = $.password;
        this.server = $.server;
        this.userName = $.userName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ImageCacheImageRegistryCredentialArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ImageCacheImageRegistryCredentialArgs $;

        public Builder() {
            $ = new ImageCacheImageRegistryCredentialArgs();
        }

        public Builder(ImageCacheImageRegistryCredentialArgs defaults) {
            $ = new ImageCacheImageRegistryCredentialArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param password The password of the Image Registry.
         * 
         * @return builder
         * 
         */
        public Builder password(@Nullable Output<String> password) {
            $.password = password;
            return this;
        }

        /**
         * @param password The password of the Image Registry.
         * 
         * @return builder
         * 
         */
        public Builder password(String password) {
            return password(Output.of(password));
        }

        /**
         * @param server The address of Image Registry without `http://` or `https://`.
         * 
         * @return builder
         * 
         */
        public Builder server(@Nullable Output<String> server) {
            $.server = server;
            return this;
        }

        /**
         * @param server The address of Image Registry without `http://` or `https://`.
         * 
         * @return builder
         * 
         */
        public Builder server(String server) {
            return server(Output.of(server));
        }

        /**
         * @param userName The user name of Image Registry.
         * 
         * @return builder
         * 
         */
        public Builder userName(@Nullable Output<String> userName) {
            $.userName = userName;
            return this;
        }

        /**
         * @param userName The user name of Image Registry.
         * 
         * @return builder
         * 
         */
        public Builder userName(String userName) {
            return userName(Output.of(userName));
        }

        public ImageCacheImageRegistryCredentialArgs build() {
            return $;
        }
    }

}
