// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.sls.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ScheduledSqlScheduledSqlConfigurationArgs extends com.pulumi.resources.ResourceArgs {

    public static final ScheduledSqlScheduledSqlConfigurationArgs Empty = new ScheduledSqlScheduledSqlConfigurationArgs();

    /**
     * Write Mode.
     * 
     */
    @Import(name="dataFormat")
    private @Nullable Output<String> dataFormat;

    /**
     * @return Write Mode.
     * 
     */
    public Optional<Output<String>> dataFormat() {
        return Optional.ofNullable(this.dataFormat);
    }

    /**
     * Target Endpoint.
     * 
     */
    @Import(name="destEndpoint")
    private @Nullable Output<String> destEndpoint;

    /**
     * @return Target Endpoint.
     * 
     */
    public Optional<Output<String>> destEndpoint() {
        return Optional.ofNullable(this.destEndpoint);
    }

    /**
     * Target Logstore.
     * 
     */
    @Import(name="destLogstore")
    private @Nullable Output<String> destLogstore;

    /**
     * @return Target Logstore.
     * 
     */
    public Optional<Output<String>> destLogstore() {
        return Optional.ofNullable(this.destLogstore);
    }

    /**
     * Target Project.
     * 
     */
    @Import(name="destProject")
    private @Nullable Output<String> destProject;

    /**
     * @return Target Project.
     * 
     */
    public Optional<Output<String>> destProject() {
        return Optional.ofNullable(this.destProject);
    }

    /**
     * Write target role ARN.
     * 
     */
    @Import(name="destRoleArn")
    private @Nullable Output<String> destRoleArn;

    /**
     * @return Write target role ARN.
     * 
     */
    public Optional<Output<String>> destRoleArn() {
        return Optional.ofNullable(this.destRoleArn);
    }

    /**
     * Schedule Start Time.
     * 
     */
    @Import(name="fromTime")
    private @Nullable Output<Integer> fromTime;

    /**
     * @return Schedule Start Time.
     * 
     */
    public Optional<Output<Integer>> fromTime() {
        return Optional.ofNullable(this.fromTime);
    }

    /**
     * SQL time window-start.
     * 
     */
    @Import(name="fromTimeExpr")
    private @Nullable Output<String> fromTimeExpr;

    /**
     * @return SQL time window-start.
     * 
     */
    public Optional<Output<String>> fromTimeExpr() {
        return Optional.ofNullable(this.fromTimeExpr);
    }

    /**
     * Maximum retries.
     * 
     */
    @Import(name="maxRetries")
    private @Nullable Output<Integer> maxRetries;

    /**
     * @return Maximum retries.
     * 
     */
    public Optional<Output<Integer>> maxRetries() {
        return Optional.ofNullable(this.maxRetries);
    }

    /**
     * SQL timeout.
     * 
     */
    @Import(name="maxRunTimeInSeconds")
    private @Nullable Output<Integer> maxRunTimeInSeconds;

    /**
     * @return SQL timeout.
     * 
     */
    public Optional<Output<Integer>> maxRunTimeInSeconds() {
        return Optional.ofNullable(this.maxRunTimeInSeconds);
    }

    /**
     * Parameter configuration.
     * 
     */
    @Import(name="parameters")
    private @Nullable Output<Map<String,String>> parameters;

    /**
     * @return Parameter configuration.
     * 
     */
    public Optional<Output<Map<String,String>>> parameters() {
        return Optional.ofNullable(this.parameters);
    }

    /**
     * Resource Pool.
     * 
     */
    @Import(name="resourcePool")
    private @Nullable Output<String> resourcePool;

    /**
     * @return Resource Pool.
     * 
     */
    public Optional<Output<String>> resourcePool() {
        return Optional.ofNullable(this.resourcePool);
    }

    /**
     * Read role ARN.
     * 
     */
    @Import(name="roleArn")
    private @Nullable Output<String> roleArn;

    /**
     * @return Read role ARN.
     * 
     */
    public Optional<Output<String>> roleArn() {
        return Optional.ofNullable(this.roleArn);
    }

    /**
     * SQL statement.
     * 
     */
    @Import(name="script")
    private @Nullable Output<String> script;

    /**
     * @return SQL statement.
     * 
     */
    public Optional<Output<String>> script() {
        return Optional.ofNullable(this.script);
    }

    /**
     * Source Logstore.
     * 
     */
    @Import(name="sourceLogstore")
    private @Nullable Output<String> sourceLogstore;

    /**
     * @return Source Logstore.
     * 
     */
    public Optional<Output<String>> sourceLogstore() {
        return Optional.ofNullable(this.sourceLogstore);
    }

    /**
     * SQL type.
     * 
     */
    @Import(name="sqlType")
    private @Nullable Output<String> sqlType;

    /**
     * @return SQL type.
     * 
     */
    public Optional<Output<String>> sqlType() {
        return Optional.ofNullable(this.sqlType);
    }

    /**
     * Time at end of schedule.
     * 
     */
    @Import(name="toTime")
    private @Nullable Output<Integer> toTime;

    /**
     * @return Time at end of schedule.
     * 
     */
    public Optional<Output<Integer>> toTime() {
        return Optional.ofNullable(this.toTime);
    }

    /**
     * SQL time window-end.
     * 
     */
    @Import(name="toTimeExpr")
    private @Nullable Output<String> toTimeExpr;

    /**
     * @return SQL time window-end.
     * 
     */
    public Optional<Output<String>> toTimeExpr() {
        return Optional.ofNullable(this.toTimeExpr);
    }

    private ScheduledSqlScheduledSqlConfigurationArgs() {}

    private ScheduledSqlScheduledSqlConfigurationArgs(ScheduledSqlScheduledSqlConfigurationArgs $) {
        this.dataFormat = $.dataFormat;
        this.destEndpoint = $.destEndpoint;
        this.destLogstore = $.destLogstore;
        this.destProject = $.destProject;
        this.destRoleArn = $.destRoleArn;
        this.fromTime = $.fromTime;
        this.fromTimeExpr = $.fromTimeExpr;
        this.maxRetries = $.maxRetries;
        this.maxRunTimeInSeconds = $.maxRunTimeInSeconds;
        this.parameters = $.parameters;
        this.resourcePool = $.resourcePool;
        this.roleArn = $.roleArn;
        this.script = $.script;
        this.sourceLogstore = $.sourceLogstore;
        this.sqlType = $.sqlType;
        this.toTime = $.toTime;
        this.toTimeExpr = $.toTimeExpr;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ScheduledSqlScheduledSqlConfigurationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ScheduledSqlScheduledSqlConfigurationArgs $;

        public Builder() {
            $ = new ScheduledSqlScheduledSqlConfigurationArgs();
        }

        public Builder(ScheduledSqlScheduledSqlConfigurationArgs defaults) {
            $ = new ScheduledSqlScheduledSqlConfigurationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param dataFormat Write Mode.
         * 
         * @return builder
         * 
         */
        public Builder dataFormat(@Nullable Output<String> dataFormat) {
            $.dataFormat = dataFormat;
            return this;
        }

        /**
         * @param dataFormat Write Mode.
         * 
         * @return builder
         * 
         */
        public Builder dataFormat(String dataFormat) {
            return dataFormat(Output.of(dataFormat));
        }

        /**
         * @param destEndpoint Target Endpoint.
         * 
         * @return builder
         * 
         */
        public Builder destEndpoint(@Nullable Output<String> destEndpoint) {
            $.destEndpoint = destEndpoint;
            return this;
        }

        /**
         * @param destEndpoint Target Endpoint.
         * 
         * @return builder
         * 
         */
        public Builder destEndpoint(String destEndpoint) {
            return destEndpoint(Output.of(destEndpoint));
        }

        /**
         * @param destLogstore Target Logstore.
         * 
         * @return builder
         * 
         */
        public Builder destLogstore(@Nullable Output<String> destLogstore) {
            $.destLogstore = destLogstore;
            return this;
        }

        /**
         * @param destLogstore Target Logstore.
         * 
         * @return builder
         * 
         */
        public Builder destLogstore(String destLogstore) {
            return destLogstore(Output.of(destLogstore));
        }

        /**
         * @param destProject Target Project.
         * 
         * @return builder
         * 
         */
        public Builder destProject(@Nullable Output<String> destProject) {
            $.destProject = destProject;
            return this;
        }

        /**
         * @param destProject Target Project.
         * 
         * @return builder
         * 
         */
        public Builder destProject(String destProject) {
            return destProject(Output.of(destProject));
        }

        /**
         * @param destRoleArn Write target role ARN.
         * 
         * @return builder
         * 
         */
        public Builder destRoleArn(@Nullable Output<String> destRoleArn) {
            $.destRoleArn = destRoleArn;
            return this;
        }

        /**
         * @param destRoleArn Write target role ARN.
         * 
         * @return builder
         * 
         */
        public Builder destRoleArn(String destRoleArn) {
            return destRoleArn(Output.of(destRoleArn));
        }

        /**
         * @param fromTime Schedule Start Time.
         * 
         * @return builder
         * 
         */
        public Builder fromTime(@Nullable Output<Integer> fromTime) {
            $.fromTime = fromTime;
            return this;
        }

        /**
         * @param fromTime Schedule Start Time.
         * 
         * @return builder
         * 
         */
        public Builder fromTime(Integer fromTime) {
            return fromTime(Output.of(fromTime));
        }

        /**
         * @param fromTimeExpr SQL time window-start.
         * 
         * @return builder
         * 
         */
        public Builder fromTimeExpr(@Nullable Output<String> fromTimeExpr) {
            $.fromTimeExpr = fromTimeExpr;
            return this;
        }

        /**
         * @param fromTimeExpr SQL time window-start.
         * 
         * @return builder
         * 
         */
        public Builder fromTimeExpr(String fromTimeExpr) {
            return fromTimeExpr(Output.of(fromTimeExpr));
        }

        /**
         * @param maxRetries Maximum retries.
         * 
         * @return builder
         * 
         */
        public Builder maxRetries(@Nullable Output<Integer> maxRetries) {
            $.maxRetries = maxRetries;
            return this;
        }

        /**
         * @param maxRetries Maximum retries.
         * 
         * @return builder
         * 
         */
        public Builder maxRetries(Integer maxRetries) {
            return maxRetries(Output.of(maxRetries));
        }

        /**
         * @param maxRunTimeInSeconds SQL timeout.
         * 
         * @return builder
         * 
         */
        public Builder maxRunTimeInSeconds(@Nullable Output<Integer> maxRunTimeInSeconds) {
            $.maxRunTimeInSeconds = maxRunTimeInSeconds;
            return this;
        }

        /**
         * @param maxRunTimeInSeconds SQL timeout.
         * 
         * @return builder
         * 
         */
        public Builder maxRunTimeInSeconds(Integer maxRunTimeInSeconds) {
            return maxRunTimeInSeconds(Output.of(maxRunTimeInSeconds));
        }

        /**
         * @param parameters Parameter configuration.
         * 
         * @return builder
         * 
         */
        public Builder parameters(@Nullable Output<Map<String,String>> parameters) {
            $.parameters = parameters;
            return this;
        }

        /**
         * @param parameters Parameter configuration.
         * 
         * @return builder
         * 
         */
        public Builder parameters(Map<String,String> parameters) {
            return parameters(Output.of(parameters));
        }

        /**
         * @param resourcePool Resource Pool.
         * 
         * @return builder
         * 
         */
        public Builder resourcePool(@Nullable Output<String> resourcePool) {
            $.resourcePool = resourcePool;
            return this;
        }

        /**
         * @param resourcePool Resource Pool.
         * 
         * @return builder
         * 
         */
        public Builder resourcePool(String resourcePool) {
            return resourcePool(Output.of(resourcePool));
        }

        /**
         * @param roleArn Read role ARN.
         * 
         * @return builder
         * 
         */
        public Builder roleArn(@Nullable Output<String> roleArn) {
            $.roleArn = roleArn;
            return this;
        }

        /**
         * @param roleArn Read role ARN.
         * 
         * @return builder
         * 
         */
        public Builder roleArn(String roleArn) {
            return roleArn(Output.of(roleArn));
        }

        /**
         * @param script SQL statement.
         * 
         * @return builder
         * 
         */
        public Builder script(@Nullable Output<String> script) {
            $.script = script;
            return this;
        }

        /**
         * @param script SQL statement.
         * 
         * @return builder
         * 
         */
        public Builder script(String script) {
            return script(Output.of(script));
        }

        /**
         * @param sourceLogstore Source Logstore.
         * 
         * @return builder
         * 
         */
        public Builder sourceLogstore(@Nullable Output<String> sourceLogstore) {
            $.sourceLogstore = sourceLogstore;
            return this;
        }

        /**
         * @param sourceLogstore Source Logstore.
         * 
         * @return builder
         * 
         */
        public Builder sourceLogstore(String sourceLogstore) {
            return sourceLogstore(Output.of(sourceLogstore));
        }

        /**
         * @param sqlType SQL type.
         * 
         * @return builder
         * 
         */
        public Builder sqlType(@Nullable Output<String> sqlType) {
            $.sqlType = sqlType;
            return this;
        }

        /**
         * @param sqlType SQL type.
         * 
         * @return builder
         * 
         */
        public Builder sqlType(String sqlType) {
            return sqlType(Output.of(sqlType));
        }

        /**
         * @param toTime Time at end of schedule.
         * 
         * @return builder
         * 
         */
        public Builder toTime(@Nullable Output<Integer> toTime) {
            $.toTime = toTime;
            return this;
        }

        /**
         * @param toTime Time at end of schedule.
         * 
         * @return builder
         * 
         */
        public Builder toTime(Integer toTime) {
            return toTime(Output.of(toTime));
        }

        /**
         * @param toTimeExpr SQL time window-end.
         * 
         * @return builder
         * 
         */
        public Builder toTimeExpr(@Nullable Output<String> toTimeExpr) {
            $.toTimeExpr = toTimeExpr;
            return this;
        }

        /**
         * @param toTimeExpr SQL time window-end.
         * 
         * @return builder
         * 
         */
        public Builder toTimeExpr(String toTimeExpr) {
            return toTimeExpr(Output.of(toTimeExpr));
        }

        public ScheduledSqlScheduledSqlConfigurationArgs build() {
            return $;
        }
    }

}
