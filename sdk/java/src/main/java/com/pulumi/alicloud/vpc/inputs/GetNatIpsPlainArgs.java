// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.vpc.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetNatIpsPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetNatIpsPlainArgs Empty = new GetNatIpsPlainArgs();

    /**
     * A list of Nat Ip IDs.
     * 
     */
    @Import(name="ids")
    private @Nullable List<String> ids;

    /**
     * @return A list of Nat Ip IDs.
     * 
     */
    public Optional<List<String>> ids() {
        return Optional.ofNullable(this.ids);
    }

    /**
     * A regex string to filter results by Nat Ip name.
     * 
     */
    @Import(name="nameRegex")
    private @Nullable String nameRegex;

    /**
     * @return A regex string to filter results by Nat Ip name.
     * 
     */
    public Optional<String> nameRegex() {
        return Optional.ofNullable(this.nameRegex);
    }

    /**
     * The ID of the Virtual Private Cloud (VPC) NAT gateway to which the NAT IP address belongs.
     * 
     */
    @Import(name="natGatewayId", required=true)
    private String natGatewayId;

    /**
     * @return The ID of the Virtual Private Cloud (VPC) NAT gateway to which the NAT IP address belongs.
     * 
     */
    public String natGatewayId() {
        return this.natGatewayId;
    }

    /**
     * The CIDR block to which the NAT IP address belongs.
     * 
     */
    @Import(name="natIpCidr")
    private @Nullable String natIpCidr;

    /**
     * @return The CIDR block to which the NAT IP address belongs.
     * 
     */
    public Optional<String> natIpCidr() {
        return Optional.ofNullable(this.natIpCidr);
    }

    @Import(name="natIpIds")
    private @Nullable List<String> natIpIds;

    public Optional<List<String>> natIpIds() {
        return Optional.ofNullable(this.natIpIds);
    }

    /**
     * The name of the NAT IP address.
     * 
     */
    @Import(name="natIpNames")
    private @Nullable List<String> natIpNames;

    /**
     * @return The name of the NAT IP address.
     * 
     */
    public Optional<List<String>> natIpNames() {
        return Optional.ofNullable(this.natIpNames);
    }

    /**
     * File name where to save data source results (after running `pulumi preview`).
     * 
     */
    @Import(name="outputFile")
    private @Nullable String outputFile;

    /**
     * @return File name where to save data source results (after running `pulumi preview`).
     * 
     */
    public Optional<String> outputFile() {
        return Optional.ofNullable(this.outputFile);
    }

    /**
     * The status of the NAT IP address. Valid values: `Available`, `Deleting` and `Creating`.
     * 
     */
    @Import(name="status")
    private @Nullable String status;

    /**
     * @return The status of the NAT IP address. Valid values: `Available`, `Deleting` and `Creating`.
     * 
     */
    public Optional<String> status() {
        return Optional.ofNullable(this.status);
    }

    private GetNatIpsPlainArgs() {}

    private GetNatIpsPlainArgs(GetNatIpsPlainArgs $) {
        this.ids = $.ids;
        this.nameRegex = $.nameRegex;
        this.natGatewayId = $.natGatewayId;
        this.natIpCidr = $.natIpCidr;
        this.natIpIds = $.natIpIds;
        this.natIpNames = $.natIpNames;
        this.outputFile = $.outputFile;
        this.status = $.status;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetNatIpsPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetNatIpsPlainArgs $;

        public Builder() {
            $ = new GetNatIpsPlainArgs();
        }

        public Builder(GetNatIpsPlainArgs defaults) {
            $ = new GetNatIpsPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param ids A list of Nat Ip IDs.
         * 
         * @return builder
         * 
         */
        public Builder ids(@Nullable List<String> ids) {
            $.ids = ids;
            return this;
        }

        /**
         * @param ids A list of Nat Ip IDs.
         * 
         * @return builder
         * 
         */
        public Builder ids(String... ids) {
            return ids(List.of(ids));
        }

        /**
         * @param nameRegex A regex string to filter results by Nat Ip name.
         * 
         * @return builder
         * 
         */
        public Builder nameRegex(@Nullable String nameRegex) {
            $.nameRegex = nameRegex;
            return this;
        }

        /**
         * @param natGatewayId The ID of the Virtual Private Cloud (VPC) NAT gateway to which the NAT IP address belongs.
         * 
         * @return builder
         * 
         */
        public Builder natGatewayId(String natGatewayId) {
            $.natGatewayId = natGatewayId;
            return this;
        }

        /**
         * @param natIpCidr The CIDR block to which the NAT IP address belongs.
         * 
         * @return builder
         * 
         */
        public Builder natIpCidr(@Nullable String natIpCidr) {
            $.natIpCidr = natIpCidr;
            return this;
        }

        public Builder natIpIds(@Nullable List<String> natIpIds) {
            $.natIpIds = natIpIds;
            return this;
        }

        public Builder natIpIds(String... natIpIds) {
            return natIpIds(List.of(natIpIds));
        }

        /**
         * @param natIpNames The name of the NAT IP address.
         * 
         * @return builder
         * 
         */
        public Builder natIpNames(@Nullable List<String> natIpNames) {
            $.natIpNames = natIpNames;
            return this;
        }

        /**
         * @param natIpNames The name of the NAT IP address.
         * 
         * @return builder
         * 
         */
        public Builder natIpNames(String... natIpNames) {
            return natIpNames(List.of(natIpNames));
        }

        /**
         * @param outputFile File name where to save data source results (after running `pulumi preview`).
         * 
         * @return builder
         * 
         */
        public Builder outputFile(@Nullable String outputFile) {
            $.outputFile = outputFile;
            return this;
        }

        /**
         * @param status The status of the NAT IP address. Valid values: `Available`, `Deleting` and `Creating`.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable String status) {
            $.status = status;
            return this;
        }

        public GetNatIpsPlainArgs build() {
            if ($.natGatewayId == null) {
                throw new MissingRequiredPropertyException("GetNatIpsPlainArgs", "natGatewayId");
            }
            return $;
        }
    }

}
