// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.drds.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PolardbxInstanceState extends com.pulumi.resources.ResourceArgs {

    public static final PolardbxInstanceState Empty = new PolardbxInstanceState();

    /**
     * Compute node specifications.
     * 
     */
    @Import(name="cnClass")
    private @Nullable Output<String> cnClass;

    /**
     * @return Compute node specifications.
     * 
     */
    public Optional<Output<String>> cnClass() {
        return Optional.ofNullable(this.cnClass);
    }

    /**
     * Number of computing nodes.
     * 
     */
    @Import(name="cnNodeCount")
    private @Nullable Output<Integer> cnNodeCount;

    /**
     * @return Number of computing nodes.
     * 
     */
    public Optional<Output<Integer>> cnNodeCount() {
        return Optional.ofNullable(this.cnNodeCount);
    }

    /**
     * The creation time of the resource.
     * 
     */
    @Import(name="createTime")
    private @Nullable Output<String> createTime;

    /**
     * @return The creation time of the resource.
     * 
     */
    public Optional<Output<String>> createTime() {
        return Optional.ofNullable(this.createTime);
    }

    /**
     * Storage node specifications.
     * 
     */
    @Import(name="dnClass")
    private @Nullable Output<String> dnClass;

    /**
     * @return Storage node specifications.
     * 
     */
    public Optional<Output<String>> dnClass() {
        return Optional.ofNullable(this.dnClass);
    }

    /**
     * The number of storage nodes.
     * 
     */
    @Import(name="dnNodeCount")
    private @Nullable Output<Integer> dnNodeCount;

    /**
     * @return The number of storage nodes.
     * 
     */
    public Optional<Output<Integer>> dnNodeCount() {
        return Optional.ofNullable(this.dnNodeCount);
    }

    /**
     * Primary Availability Zone.
     * 
     */
    @Import(name="primaryZone")
    private @Nullable Output<String> primaryZone;

    /**
     * @return Primary Availability Zone.
     * 
     */
    public Optional<Output<String>> primaryZone() {
        return Optional.ofNullable(this.primaryZone);
    }

    /**
     * The resource group ID can be empty. This parameter is not supported for the time being.
     * 
     */
    @Import(name="resourceGroupId")
    private @Nullable Output<String> resourceGroupId;

    /**
     * @return The resource group ID can be empty. This parameter is not supported for the time being.
     * 
     */
    public Optional<Output<String>> resourceGroupId() {
        return Optional.ofNullable(this.resourceGroupId);
    }

    /**
     * Secondary availability zone.
     * 
     */
    @Import(name="secondaryZone")
    private @Nullable Output<String> secondaryZone;

    /**
     * @return Secondary availability zone.
     * 
     */
    public Optional<Output<String>> secondaryZone() {
        return Optional.ofNullable(this.secondaryZone);
    }

    /**
     * The status of the resource.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return The status of the resource.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * Third Availability Zone.
     * 
     */
    @Import(name="tertiaryZone")
    private @Nullable Output<String> tertiaryZone;

    /**
     * @return Third Availability Zone.
     * 
     */
    public Optional<Output<String>> tertiaryZone() {
        return Optional.ofNullable(this.tertiaryZone);
    }

    /**
     * Topology type:
     * - **3azones**: three available areas;
     * - **1azone**: Single zone.
     * 
     */
    @Import(name="topologyType")
    private @Nullable Output<String> topologyType;

    /**
     * @return Topology type:
     * - **3azones**: three available areas;
     * - **1azone**: Single zone.
     * 
     */
    public Optional<Output<String>> topologyType() {
        return Optional.ofNullable(this.topologyType);
    }

    /**
     * The VPC ID.
     * 
     */
    @Import(name="vpcId")
    private @Nullable Output<String> vpcId;

    /**
     * @return The VPC ID.
     * 
     */
    public Optional<Output<String>> vpcId() {
        return Optional.ofNullable(this.vpcId);
    }

    /**
     * The ID of the virtual switch.
     * 
     */
    @Import(name="vswitchId")
    private @Nullable Output<String> vswitchId;

    /**
     * @return The ID of the virtual switch.
     * 
     */
    public Optional<Output<String>> vswitchId() {
        return Optional.ofNullable(this.vswitchId);
    }

    private PolardbxInstanceState() {}

    private PolardbxInstanceState(PolardbxInstanceState $) {
        this.cnClass = $.cnClass;
        this.cnNodeCount = $.cnNodeCount;
        this.createTime = $.createTime;
        this.dnClass = $.dnClass;
        this.dnNodeCount = $.dnNodeCount;
        this.primaryZone = $.primaryZone;
        this.resourceGroupId = $.resourceGroupId;
        this.secondaryZone = $.secondaryZone;
        this.status = $.status;
        this.tertiaryZone = $.tertiaryZone;
        this.topologyType = $.topologyType;
        this.vpcId = $.vpcId;
        this.vswitchId = $.vswitchId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PolardbxInstanceState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PolardbxInstanceState $;

        public Builder() {
            $ = new PolardbxInstanceState();
        }

        public Builder(PolardbxInstanceState defaults) {
            $ = new PolardbxInstanceState(Objects.requireNonNull(defaults));
        }

        /**
         * @param cnClass Compute node specifications.
         * 
         * @return builder
         * 
         */
        public Builder cnClass(@Nullable Output<String> cnClass) {
            $.cnClass = cnClass;
            return this;
        }

        /**
         * @param cnClass Compute node specifications.
         * 
         * @return builder
         * 
         */
        public Builder cnClass(String cnClass) {
            return cnClass(Output.of(cnClass));
        }

        /**
         * @param cnNodeCount Number of computing nodes.
         * 
         * @return builder
         * 
         */
        public Builder cnNodeCount(@Nullable Output<Integer> cnNodeCount) {
            $.cnNodeCount = cnNodeCount;
            return this;
        }

        /**
         * @param cnNodeCount Number of computing nodes.
         * 
         * @return builder
         * 
         */
        public Builder cnNodeCount(Integer cnNodeCount) {
            return cnNodeCount(Output.of(cnNodeCount));
        }

        /**
         * @param createTime The creation time of the resource.
         * 
         * @return builder
         * 
         */
        public Builder createTime(@Nullable Output<String> createTime) {
            $.createTime = createTime;
            return this;
        }

        /**
         * @param createTime The creation time of the resource.
         * 
         * @return builder
         * 
         */
        public Builder createTime(String createTime) {
            return createTime(Output.of(createTime));
        }

        /**
         * @param dnClass Storage node specifications.
         * 
         * @return builder
         * 
         */
        public Builder dnClass(@Nullable Output<String> dnClass) {
            $.dnClass = dnClass;
            return this;
        }

        /**
         * @param dnClass Storage node specifications.
         * 
         * @return builder
         * 
         */
        public Builder dnClass(String dnClass) {
            return dnClass(Output.of(dnClass));
        }

        /**
         * @param dnNodeCount The number of storage nodes.
         * 
         * @return builder
         * 
         */
        public Builder dnNodeCount(@Nullable Output<Integer> dnNodeCount) {
            $.dnNodeCount = dnNodeCount;
            return this;
        }

        /**
         * @param dnNodeCount The number of storage nodes.
         * 
         * @return builder
         * 
         */
        public Builder dnNodeCount(Integer dnNodeCount) {
            return dnNodeCount(Output.of(dnNodeCount));
        }

        /**
         * @param primaryZone Primary Availability Zone.
         * 
         * @return builder
         * 
         */
        public Builder primaryZone(@Nullable Output<String> primaryZone) {
            $.primaryZone = primaryZone;
            return this;
        }

        /**
         * @param primaryZone Primary Availability Zone.
         * 
         * @return builder
         * 
         */
        public Builder primaryZone(String primaryZone) {
            return primaryZone(Output.of(primaryZone));
        }

        /**
         * @param resourceGroupId The resource group ID can be empty. This parameter is not supported for the time being.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupId(@Nullable Output<String> resourceGroupId) {
            $.resourceGroupId = resourceGroupId;
            return this;
        }

        /**
         * @param resourceGroupId The resource group ID can be empty. This parameter is not supported for the time being.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupId(String resourceGroupId) {
            return resourceGroupId(Output.of(resourceGroupId));
        }

        /**
         * @param secondaryZone Secondary availability zone.
         * 
         * @return builder
         * 
         */
        public Builder secondaryZone(@Nullable Output<String> secondaryZone) {
            $.secondaryZone = secondaryZone;
            return this;
        }

        /**
         * @param secondaryZone Secondary availability zone.
         * 
         * @return builder
         * 
         */
        public Builder secondaryZone(String secondaryZone) {
            return secondaryZone(Output.of(secondaryZone));
        }

        /**
         * @param status The status of the resource.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status The status of the resource.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param tertiaryZone Third Availability Zone.
         * 
         * @return builder
         * 
         */
        public Builder tertiaryZone(@Nullable Output<String> tertiaryZone) {
            $.tertiaryZone = tertiaryZone;
            return this;
        }

        /**
         * @param tertiaryZone Third Availability Zone.
         * 
         * @return builder
         * 
         */
        public Builder tertiaryZone(String tertiaryZone) {
            return tertiaryZone(Output.of(tertiaryZone));
        }

        /**
         * @param topologyType Topology type:
         * - **3azones**: three available areas;
         * - **1azone**: Single zone.
         * 
         * @return builder
         * 
         */
        public Builder topologyType(@Nullable Output<String> topologyType) {
            $.topologyType = topologyType;
            return this;
        }

        /**
         * @param topologyType Topology type:
         * - **3azones**: three available areas;
         * - **1azone**: Single zone.
         * 
         * @return builder
         * 
         */
        public Builder topologyType(String topologyType) {
            return topologyType(Output.of(topologyType));
        }

        /**
         * @param vpcId The VPC ID.
         * 
         * @return builder
         * 
         */
        public Builder vpcId(@Nullable Output<String> vpcId) {
            $.vpcId = vpcId;
            return this;
        }

        /**
         * @param vpcId The VPC ID.
         * 
         * @return builder
         * 
         */
        public Builder vpcId(String vpcId) {
            return vpcId(Output.of(vpcId));
        }

        /**
         * @param vswitchId The ID of the virtual switch.
         * 
         * @return builder
         * 
         */
        public Builder vswitchId(@Nullable Output<String> vswitchId) {
            $.vswitchId = vswitchId;
            return this;
        }

        /**
         * @param vswitchId The ID of the virtual switch.
         * 
         * @return builder
         * 
         */
        public Builder vswitchId(String vswitchId) {
            return vswitchId(Output.of(vswitchId));
        }

        public PolardbxInstanceState build() {
            return $;
        }
    }

}
