// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.cms.inputs;

import com.pulumi.alicloud.cms.inputs.SiteMonitorOptionJsonAssertionArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SiteMonitorOptionJsonArgs extends com.pulumi.resources.ResourceArgs {

    public static final SiteMonitorOptionJsonArgs Empty = new SiteMonitorOptionJsonArgs();

    /**
     * Assertion configuration group. See `assertions` below.
     * 
     */
    @Import(name="assertions")
    private @Nullable Output<List<SiteMonitorOptionJsonAssertionArgs>> assertions;

    /**
     * @return Assertion configuration group. See `assertions` below.
     * 
     */
    public Optional<Output<List<SiteMonitorOptionJsonAssertionArgs>>> assertions() {
        return Optional.ofNullable(this.assertions);
    }

    /**
     * Number of retries after DNS failed.
     * 
     */
    @Import(name="attempts")
    private @Nullable Output<Integer> attempts;

    /**
     * @return Number of retries after DNS failed.
     * 
     */
    public Optional<Output<Integer>> attempts() {
        return Optional.ofNullable(this.attempts);
    }

    /**
     * The Cookie that sends the HTTP request.
     * 
     */
    @Import(name="cookie")
    private @Nullable Output<String> cookie;

    /**
     * @return The Cookie that sends the HTTP request.
     * 
     */
    public Optional<Output<String>> cookie() {
        return Optional.ofNullable(this.cookie);
    }

    /**
     * Whether to enable automatic MTR network diagnosis after a task failure. Value:
     * - false: does not enable automatic MTR network diagnosis.
     * - true to turn on automatic MTR network diagnostics.
     * 
     */
    @Import(name="diagnosisMtr")
    private @Nullable Output<Boolean> diagnosisMtr;

    /**
     * @return Whether to enable automatic MTR network diagnosis after a task failure. Value:
     * - false: does not enable automatic MTR network diagnosis.
     * - true to turn on automatic MTR network diagnostics.
     * 
     */
    public Optional<Output<Boolean>> diagnosisMtr() {
        return Optional.ofNullable(this.diagnosisMtr);
    }

    /**
     * Whether to enable the automatic PING network delay detection after the task fails. Value:
     * - false: does not enable automatic PING network delay detection.
     * - true: Enable automatic PING network delay detection.
     * 
     */
    @Import(name="diagnosisPing")
    private @Nullable Output<Boolean> diagnosisPing;

    /**
     * @return Whether to enable the automatic PING network delay detection after the task fails. Value:
     * - false: does not enable automatic PING network delay detection.
     * - true: Enable automatic PING network delay detection.
     * 
     */
    public Optional<Output<Boolean>> diagnosisPing() {
        return Optional.ofNullable(this.diagnosisPing);
    }

    /**
     * List of DNS hijacking configurations.
     * 
     */
    @Import(name="dnsHijackWhitelist")
    private @Nullable Output<String> dnsHijackWhitelist;

    /**
     * @return List of DNS hijacking configurations.
     * 
     */
    public Optional<Output<String>> dnsHijackWhitelist() {
        return Optional.ofNullable(this.dnsHijackWhitelist);
    }

    /**
     * Matching Rules for DNS. Value:
     * - IN_DNS: The alias or IP address that is expected to be resolved is in the DNS response.
     * - DNS_IN: All DNS responses appear in the alias or IP address that is expected to be resolved.
     * - EQUAL: the DNS response is exactly the same as the alias or IP address that is expected to be resolved.
     * - ANY:DNS response and the alias or IP address expected to be resolved have an intersection.
     * 
     */
    @Import(name="dnsMatchRule")
    private @Nullable Output<String> dnsMatchRule;

    /**
     * @return Matching Rules for DNS. Value:
     * - IN_DNS: The alias or IP address that is expected to be resolved is in the DNS response.
     * - DNS_IN: All DNS responses appear in the alias or IP address that is expected to be resolved.
     * - EQUAL: the DNS response is exactly the same as the alias or IP address that is expected to be resolved.
     * - ANY:DNS response and the alias or IP address expected to be resolved have an intersection.
     * 
     */
    public Optional<Output<String>> dnsMatchRule() {
        return Optional.ofNullable(this.dnsMatchRule);
    }

    /**
     * The IP address of the DNS server.
     * 
     * &gt; **NOTE:**  only applicable to DNS probe types.
     * 
     */
    @Import(name="dnsServer")
    private @Nullable Output<String> dnsServer;

    /**
     * @return The IP address of the DNS server.
     * 
     * &gt; **NOTE:**  only applicable to DNS probe types.
     * 
     */
    public Optional<Output<String>> dnsServer() {
        return Optional.ofNullable(this.dnsServer);
    }

    /**
     * DNS resolution type. Only applicable to DNS probe types. Value:
     * - A (default): specifies the IP address corresponding to the host name or domain name.
     * - CNAME: maps multiple domain names to another domain name.
     * - NS: specifies that the domain name is resolved by a DNS server.
     * - MX: point domain name to a mail server address.
     * - TXT: Description of host name or domain name. The text length is limited to 512 bytes, which is usually used as SPF(Sender Policy Framework) record, that is, anti-spam.
     * 
     */
    @Import(name="dnsType")
    private @Nullable Output<String> dnsType;

    /**
     * @return DNS resolution type. Only applicable to DNS probe types. Value:
     * - A (default): specifies the IP address corresponding to the host name or domain name.
     * - CNAME: maps multiple domain names to another domain name.
     * - NS: specifies that the domain name is resolved by a DNS server.
     * - MX: point domain name to a mail server address.
     * - TXT: Description of host name or domain name. The text length is limited to 512 bytes, which is usually used as SPF(Sender Policy Framework) record, that is, anti-spam.
     * 
     */
    public Optional<Output<String>> dnsType() {
        return Optional.ofNullable(this.dnsType);
    }

    /**
     * The alias or address to be resolved.
     * 
     * &gt; **NOTE:**  This parameter applies only to DNS probe types.
     * 
     */
    @Import(name="expectValue")
    private @Nullable Output<String> expectValue;

    /**
     * @return The alias or address to be resolved.
     * 
     * &gt; **NOTE:**  This parameter applies only to DNS probe types.
     * 
     */
    public Optional<Output<String>> expectValue() {
        return Optional.ofNullable(this.expectValue);
    }

    /**
     * Packet loss rate.
     * 
     * &gt; **NOTE:**  This parameter only applies to PING probe types.
     * 
     */
    @Import(name="failureRate")
    private @Nullable Output<String> failureRate;

    /**
     * @return Packet loss rate.
     * 
     * &gt; **NOTE:**  This parameter only applies to PING probe types.
     * 
     */
    public Optional<Output<String>> failureRate() {
        return Optional.ofNullable(this.failureRate);
    }

    /**
     * HTTP request header.
     * 
     */
    @Import(name="header")
    private @Nullable Output<String> header;

    /**
     * @return HTTP request header.
     * 
     */
    public Optional<Output<String>> header() {
        return Optional.ofNullable(this.header);
    }

    /**
     * HTTP request method. Value:
     * - get
     * - post
     * - head
     * 
     */
    @Import(name="httpMethod")
    private @Nullable Output<String> httpMethod;

    /**
     * @return HTTP request method. Value:
     * - get
     * - post
     * - head
     * 
     */
    public Optional<Output<String>> httpMethod() {
        return Optional.ofNullable(this.httpMethod);
    }

    /**
     * Whether the parameter&#39; Password&#39; is Base64 encoded.
     * - true: Yes.
     * - false: No.
     * 
     */
    @Import(name="isBaseEncode")
    private @Nullable Output<Boolean> isBaseEncode;

    /**
     * @return Whether the parameter&#39; Password&#39; is Base64 encoded.
     * - true: Yes.
     * - false: No.
     * 
     */
    public Optional<Output<Boolean>> isBaseEncode() {
        return Optional.ofNullable(this.isBaseEncode);
    }

    /**
     * Whether alarm rules are included. Value:
     * - 0: Yes.
     * - 1: No.
     * 
     */
    @Import(name="matchRule")
    private @Nullable Output<Integer> matchRule;

    /**
     * @return Whether alarm rules are included. Value:
     * - 0: Yes.
     * - 1: No.
     * 
     */
    public Optional<Output<Integer>> matchRule() {
        return Optional.ofNullable(this.matchRule);
    }

    /**
     * Minimum TLS version. By default, TLS1.2 and later versions are supported. TLS1.0 and 1.1 have been disabled. If they still need to be supported, the configuration can be changed.
     * 
     */
    @Import(name="minTlsVersion")
    private @Nullable Output<String> minTlsVersion;

    /**
     * @return Minimum TLS version. By default, TLS1.2 and later versions are supported. TLS1.0 and 1.1 have been disabled. If they still need to be supported, the configuration can be changed.
     * 
     */
    public Optional<Output<String>> minTlsVersion() {
        return Optional.ofNullable(this.minTlsVersion);
    }

    /**
     * The password of the SMTP, POP3, or FTP probe type.
     * 
     */
    @Import(name="password")
    private @Nullable Output<String> password;

    /**
     * @return The password of the SMTP, POP3, or FTP probe type.
     * 
     */
    public Optional<Output<String>> password() {
        return Optional.ofNullable(this.password);
    }

    /**
     * The heartbeat of the PING probe type.
     * 
     */
    @Import(name="pingNum")
    private @Nullable Output<Integer> pingNum;

    /**
     * @return The heartbeat of the PING probe type.
     * 
     */
    public Optional<Output<Integer>> pingNum() {
        return Optional.ofNullable(this.pingNum);
    }

    /**
     * PING the port. Applies to TCP PING.
     * 
     */
    @Import(name="pingPort")
    private @Nullable Output<Integer> pingPort;

    /**
     * @return PING the port. Applies to TCP PING.
     * 
     */
    public Optional<Output<Integer>> pingPort() {
        return Optional.ofNullable(this.pingPort);
    }

    /**
     * The PING protocol type. Value:
     * - icmp
     * - tcp
     * - udp
     * 
     */
    @Import(name="pingType")
    private @Nullable Output<String> pingType;

    /**
     * @return The PING protocol type. Value:
     * - icmp
     * - tcp
     * - udp
     * 
     */
    public Optional<Output<String>> pingType() {
        return Optional.ofNullable(this.pingType);
    }

    /**
     * Ports of TCP, UDP, SMTP, and POP3 probe types.
     * 
     */
    @Import(name="port")
    private @Nullable Output<Integer> port;

    /**
     * @return Ports of TCP, UDP, SMTP, and POP3 probe types.
     * 
     */
    public Optional<Output<Integer>> port() {
        return Optional.ofNullable(this.port);
    }

    /**
     * The request content of the HTTP probe type.
     * 
     */
    @Import(name="requestContent")
    private @Nullable Output<String> requestContent;

    /**
     * @return The request content of the HTTP probe type.
     * 
     */
    public Optional<Output<String>> requestContent() {
        return Optional.ofNullable(this.requestContent);
    }

    /**
     * HTTP request content format. Value:
     * - hex: hexadecimal format.
     * - text: text format.
     * 
     */
    @Import(name="requestFormat")
    private @Nullable Output<String> requestFormat;

    /**
     * @return HTTP request content format. Value:
     * - hex: hexadecimal format.
     * - text: text format.
     * 
     */
    public Optional<Output<String>> requestFormat() {
        return Optional.ofNullable(this.requestFormat);
    }

    /**
     * Match the response content.
     * 
     */
    @Import(name="responseContent")
    private @Nullable Output<String> responseContent;

    /**
     * @return Match the response content.
     * 
     */
    public Optional<Output<String>> responseContent() {
        return Optional.ofNullable(this.responseContent);
    }

    /**
     * HTTP response content format. Value:
     * - hex: hexadecimal format.
     * - text: text format.
     * 
     */
    @Import(name="responseFormat")
    private @Nullable Output<String> responseFormat;

    /**
     * @return HTTP response content format. Value:
     * - hex: hexadecimal format.
     * - text: text format.
     * 
     */
    public Optional<Output<String>> responseFormat() {
        return Optional.ofNullable(this.responseFormat);
    }

    /**
     * Timeout time. Unit: milliseconds.
     * 
     */
    @Import(name="timeout")
    private @Nullable Output<Integer> timeout;

    /**
     * @return Timeout time. Unit: milliseconds.
     * 
     */
    public Optional<Output<Integer>> timeout() {
        return Optional.ofNullable(this.timeout);
    }

    /**
     * The username of FTP, SMTP, or pop3.
     * 
     */
    @Import(name="userName")
    private @Nullable Output<String> userName;

    /**
     * @return The username of FTP, SMTP, or pop3.
     * 
     */
    public Optional<Output<String>> userName() {
        return Optional.ofNullable(this.userName);
    }

    private SiteMonitorOptionJsonArgs() {}

    private SiteMonitorOptionJsonArgs(SiteMonitorOptionJsonArgs $) {
        this.assertions = $.assertions;
        this.attempts = $.attempts;
        this.cookie = $.cookie;
        this.diagnosisMtr = $.diagnosisMtr;
        this.diagnosisPing = $.diagnosisPing;
        this.dnsHijackWhitelist = $.dnsHijackWhitelist;
        this.dnsMatchRule = $.dnsMatchRule;
        this.dnsServer = $.dnsServer;
        this.dnsType = $.dnsType;
        this.expectValue = $.expectValue;
        this.failureRate = $.failureRate;
        this.header = $.header;
        this.httpMethod = $.httpMethod;
        this.isBaseEncode = $.isBaseEncode;
        this.matchRule = $.matchRule;
        this.minTlsVersion = $.minTlsVersion;
        this.password = $.password;
        this.pingNum = $.pingNum;
        this.pingPort = $.pingPort;
        this.pingType = $.pingType;
        this.port = $.port;
        this.requestContent = $.requestContent;
        this.requestFormat = $.requestFormat;
        this.responseContent = $.responseContent;
        this.responseFormat = $.responseFormat;
        this.timeout = $.timeout;
        this.userName = $.userName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SiteMonitorOptionJsonArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SiteMonitorOptionJsonArgs $;

        public Builder() {
            $ = new SiteMonitorOptionJsonArgs();
        }

        public Builder(SiteMonitorOptionJsonArgs defaults) {
            $ = new SiteMonitorOptionJsonArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param assertions Assertion configuration group. See `assertions` below.
         * 
         * @return builder
         * 
         */
        public Builder assertions(@Nullable Output<List<SiteMonitorOptionJsonAssertionArgs>> assertions) {
            $.assertions = assertions;
            return this;
        }

        /**
         * @param assertions Assertion configuration group. See `assertions` below.
         * 
         * @return builder
         * 
         */
        public Builder assertions(List<SiteMonitorOptionJsonAssertionArgs> assertions) {
            return assertions(Output.of(assertions));
        }

        /**
         * @param assertions Assertion configuration group. See `assertions` below.
         * 
         * @return builder
         * 
         */
        public Builder assertions(SiteMonitorOptionJsonAssertionArgs... assertions) {
            return assertions(List.of(assertions));
        }

        /**
         * @param attempts Number of retries after DNS failed.
         * 
         * @return builder
         * 
         */
        public Builder attempts(@Nullable Output<Integer> attempts) {
            $.attempts = attempts;
            return this;
        }

        /**
         * @param attempts Number of retries after DNS failed.
         * 
         * @return builder
         * 
         */
        public Builder attempts(Integer attempts) {
            return attempts(Output.of(attempts));
        }

        /**
         * @param cookie The Cookie that sends the HTTP request.
         * 
         * @return builder
         * 
         */
        public Builder cookie(@Nullable Output<String> cookie) {
            $.cookie = cookie;
            return this;
        }

        /**
         * @param cookie The Cookie that sends the HTTP request.
         * 
         * @return builder
         * 
         */
        public Builder cookie(String cookie) {
            return cookie(Output.of(cookie));
        }

        /**
         * @param diagnosisMtr Whether to enable automatic MTR network diagnosis after a task failure. Value:
         * - false: does not enable automatic MTR network diagnosis.
         * - true to turn on automatic MTR network diagnostics.
         * 
         * @return builder
         * 
         */
        public Builder diagnosisMtr(@Nullable Output<Boolean> diagnosisMtr) {
            $.diagnosisMtr = diagnosisMtr;
            return this;
        }

        /**
         * @param diagnosisMtr Whether to enable automatic MTR network diagnosis after a task failure. Value:
         * - false: does not enable automatic MTR network diagnosis.
         * - true to turn on automatic MTR network diagnostics.
         * 
         * @return builder
         * 
         */
        public Builder diagnosisMtr(Boolean diagnosisMtr) {
            return diagnosisMtr(Output.of(diagnosisMtr));
        }

        /**
         * @param diagnosisPing Whether to enable the automatic PING network delay detection after the task fails. Value:
         * - false: does not enable automatic PING network delay detection.
         * - true: Enable automatic PING network delay detection.
         * 
         * @return builder
         * 
         */
        public Builder diagnosisPing(@Nullable Output<Boolean> diagnosisPing) {
            $.diagnosisPing = diagnosisPing;
            return this;
        }

        /**
         * @param diagnosisPing Whether to enable the automatic PING network delay detection after the task fails. Value:
         * - false: does not enable automatic PING network delay detection.
         * - true: Enable automatic PING network delay detection.
         * 
         * @return builder
         * 
         */
        public Builder diagnosisPing(Boolean diagnosisPing) {
            return diagnosisPing(Output.of(diagnosisPing));
        }

        /**
         * @param dnsHijackWhitelist List of DNS hijacking configurations.
         * 
         * @return builder
         * 
         */
        public Builder dnsHijackWhitelist(@Nullable Output<String> dnsHijackWhitelist) {
            $.dnsHijackWhitelist = dnsHijackWhitelist;
            return this;
        }

        /**
         * @param dnsHijackWhitelist List of DNS hijacking configurations.
         * 
         * @return builder
         * 
         */
        public Builder dnsHijackWhitelist(String dnsHijackWhitelist) {
            return dnsHijackWhitelist(Output.of(dnsHijackWhitelist));
        }

        /**
         * @param dnsMatchRule Matching Rules for DNS. Value:
         * - IN_DNS: The alias or IP address that is expected to be resolved is in the DNS response.
         * - DNS_IN: All DNS responses appear in the alias or IP address that is expected to be resolved.
         * - EQUAL: the DNS response is exactly the same as the alias or IP address that is expected to be resolved.
         * - ANY:DNS response and the alias or IP address expected to be resolved have an intersection.
         * 
         * @return builder
         * 
         */
        public Builder dnsMatchRule(@Nullable Output<String> dnsMatchRule) {
            $.dnsMatchRule = dnsMatchRule;
            return this;
        }

        /**
         * @param dnsMatchRule Matching Rules for DNS. Value:
         * - IN_DNS: The alias or IP address that is expected to be resolved is in the DNS response.
         * - DNS_IN: All DNS responses appear in the alias or IP address that is expected to be resolved.
         * - EQUAL: the DNS response is exactly the same as the alias or IP address that is expected to be resolved.
         * - ANY:DNS response and the alias or IP address expected to be resolved have an intersection.
         * 
         * @return builder
         * 
         */
        public Builder dnsMatchRule(String dnsMatchRule) {
            return dnsMatchRule(Output.of(dnsMatchRule));
        }

        /**
         * @param dnsServer The IP address of the DNS server.
         * 
         * &gt; **NOTE:**  only applicable to DNS probe types.
         * 
         * @return builder
         * 
         */
        public Builder dnsServer(@Nullable Output<String> dnsServer) {
            $.dnsServer = dnsServer;
            return this;
        }

        /**
         * @param dnsServer The IP address of the DNS server.
         * 
         * &gt; **NOTE:**  only applicable to DNS probe types.
         * 
         * @return builder
         * 
         */
        public Builder dnsServer(String dnsServer) {
            return dnsServer(Output.of(dnsServer));
        }

        /**
         * @param dnsType DNS resolution type. Only applicable to DNS probe types. Value:
         * - A (default): specifies the IP address corresponding to the host name or domain name.
         * - CNAME: maps multiple domain names to another domain name.
         * - NS: specifies that the domain name is resolved by a DNS server.
         * - MX: point domain name to a mail server address.
         * - TXT: Description of host name or domain name. The text length is limited to 512 bytes, which is usually used as SPF(Sender Policy Framework) record, that is, anti-spam.
         * 
         * @return builder
         * 
         */
        public Builder dnsType(@Nullable Output<String> dnsType) {
            $.dnsType = dnsType;
            return this;
        }

        /**
         * @param dnsType DNS resolution type. Only applicable to DNS probe types. Value:
         * - A (default): specifies the IP address corresponding to the host name or domain name.
         * - CNAME: maps multiple domain names to another domain name.
         * - NS: specifies that the domain name is resolved by a DNS server.
         * - MX: point domain name to a mail server address.
         * - TXT: Description of host name or domain name. The text length is limited to 512 bytes, which is usually used as SPF(Sender Policy Framework) record, that is, anti-spam.
         * 
         * @return builder
         * 
         */
        public Builder dnsType(String dnsType) {
            return dnsType(Output.of(dnsType));
        }

        /**
         * @param expectValue The alias or address to be resolved.
         * 
         * &gt; **NOTE:**  This parameter applies only to DNS probe types.
         * 
         * @return builder
         * 
         */
        public Builder expectValue(@Nullable Output<String> expectValue) {
            $.expectValue = expectValue;
            return this;
        }

        /**
         * @param expectValue The alias or address to be resolved.
         * 
         * &gt; **NOTE:**  This parameter applies only to DNS probe types.
         * 
         * @return builder
         * 
         */
        public Builder expectValue(String expectValue) {
            return expectValue(Output.of(expectValue));
        }

        /**
         * @param failureRate Packet loss rate.
         * 
         * &gt; **NOTE:**  This parameter only applies to PING probe types.
         * 
         * @return builder
         * 
         */
        public Builder failureRate(@Nullable Output<String> failureRate) {
            $.failureRate = failureRate;
            return this;
        }

        /**
         * @param failureRate Packet loss rate.
         * 
         * &gt; **NOTE:**  This parameter only applies to PING probe types.
         * 
         * @return builder
         * 
         */
        public Builder failureRate(String failureRate) {
            return failureRate(Output.of(failureRate));
        }

        /**
         * @param header HTTP request header.
         * 
         * @return builder
         * 
         */
        public Builder header(@Nullable Output<String> header) {
            $.header = header;
            return this;
        }

        /**
         * @param header HTTP request header.
         * 
         * @return builder
         * 
         */
        public Builder header(String header) {
            return header(Output.of(header));
        }

        /**
         * @param httpMethod HTTP request method. Value:
         * - get
         * - post
         * - head
         * 
         * @return builder
         * 
         */
        public Builder httpMethod(@Nullable Output<String> httpMethod) {
            $.httpMethod = httpMethod;
            return this;
        }

        /**
         * @param httpMethod HTTP request method. Value:
         * - get
         * - post
         * - head
         * 
         * @return builder
         * 
         */
        public Builder httpMethod(String httpMethod) {
            return httpMethod(Output.of(httpMethod));
        }

        /**
         * @param isBaseEncode Whether the parameter&#39; Password&#39; is Base64 encoded.
         * - true: Yes.
         * - false: No.
         * 
         * @return builder
         * 
         */
        public Builder isBaseEncode(@Nullable Output<Boolean> isBaseEncode) {
            $.isBaseEncode = isBaseEncode;
            return this;
        }

        /**
         * @param isBaseEncode Whether the parameter&#39; Password&#39; is Base64 encoded.
         * - true: Yes.
         * - false: No.
         * 
         * @return builder
         * 
         */
        public Builder isBaseEncode(Boolean isBaseEncode) {
            return isBaseEncode(Output.of(isBaseEncode));
        }

        /**
         * @param matchRule Whether alarm rules are included. Value:
         * - 0: Yes.
         * - 1: No.
         * 
         * @return builder
         * 
         */
        public Builder matchRule(@Nullable Output<Integer> matchRule) {
            $.matchRule = matchRule;
            return this;
        }

        /**
         * @param matchRule Whether alarm rules are included. Value:
         * - 0: Yes.
         * - 1: No.
         * 
         * @return builder
         * 
         */
        public Builder matchRule(Integer matchRule) {
            return matchRule(Output.of(matchRule));
        }

        /**
         * @param minTlsVersion Minimum TLS version. By default, TLS1.2 and later versions are supported. TLS1.0 and 1.1 have been disabled. If they still need to be supported, the configuration can be changed.
         * 
         * @return builder
         * 
         */
        public Builder minTlsVersion(@Nullable Output<String> minTlsVersion) {
            $.minTlsVersion = minTlsVersion;
            return this;
        }

        /**
         * @param minTlsVersion Minimum TLS version. By default, TLS1.2 and later versions are supported. TLS1.0 and 1.1 have been disabled. If they still need to be supported, the configuration can be changed.
         * 
         * @return builder
         * 
         */
        public Builder minTlsVersion(String minTlsVersion) {
            return minTlsVersion(Output.of(minTlsVersion));
        }

        /**
         * @param password The password of the SMTP, POP3, or FTP probe type.
         * 
         * @return builder
         * 
         */
        public Builder password(@Nullable Output<String> password) {
            $.password = password;
            return this;
        }

        /**
         * @param password The password of the SMTP, POP3, or FTP probe type.
         * 
         * @return builder
         * 
         */
        public Builder password(String password) {
            return password(Output.of(password));
        }

        /**
         * @param pingNum The heartbeat of the PING probe type.
         * 
         * @return builder
         * 
         */
        public Builder pingNum(@Nullable Output<Integer> pingNum) {
            $.pingNum = pingNum;
            return this;
        }

        /**
         * @param pingNum The heartbeat of the PING probe type.
         * 
         * @return builder
         * 
         */
        public Builder pingNum(Integer pingNum) {
            return pingNum(Output.of(pingNum));
        }

        /**
         * @param pingPort PING the port. Applies to TCP PING.
         * 
         * @return builder
         * 
         */
        public Builder pingPort(@Nullable Output<Integer> pingPort) {
            $.pingPort = pingPort;
            return this;
        }

        /**
         * @param pingPort PING the port. Applies to TCP PING.
         * 
         * @return builder
         * 
         */
        public Builder pingPort(Integer pingPort) {
            return pingPort(Output.of(pingPort));
        }

        /**
         * @param pingType The PING protocol type. Value:
         * - icmp
         * - tcp
         * - udp
         * 
         * @return builder
         * 
         */
        public Builder pingType(@Nullable Output<String> pingType) {
            $.pingType = pingType;
            return this;
        }

        /**
         * @param pingType The PING protocol type. Value:
         * - icmp
         * - tcp
         * - udp
         * 
         * @return builder
         * 
         */
        public Builder pingType(String pingType) {
            return pingType(Output.of(pingType));
        }

        /**
         * @param port Ports of TCP, UDP, SMTP, and POP3 probe types.
         * 
         * @return builder
         * 
         */
        public Builder port(@Nullable Output<Integer> port) {
            $.port = port;
            return this;
        }

        /**
         * @param port Ports of TCP, UDP, SMTP, and POP3 probe types.
         * 
         * @return builder
         * 
         */
        public Builder port(Integer port) {
            return port(Output.of(port));
        }

        /**
         * @param requestContent The request content of the HTTP probe type.
         * 
         * @return builder
         * 
         */
        public Builder requestContent(@Nullable Output<String> requestContent) {
            $.requestContent = requestContent;
            return this;
        }

        /**
         * @param requestContent The request content of the HTTP probe type.
         * 
         * @return builder
         * 
         */
        public Builder requestContent(String requestContent) {
            return requestContent(Output.of(requestContent));
        }

        /**
         * @param requestFormat HTTP request content format. Value:
         * - hex: hexadecimal format.
         * - text: text format.
         * 
         * @return builder
         * 
         */
        public Builder requestFormat(@Nullable Output<String> requestFormat) {
            $.requestFormat = requestFormat;
            return this;
        }

        /**
         * @param requestFormat HTTP request content format. Value:
         * - hex: hexadecimal format.
         * - text: text format.
         * 
         * @return builder
         * 
         */
        public Builder requestFormat(String requestFormat) {
            return requestFormat(Output.of(requestFormat));
        }

        /**
         * @param responseContent Match the response content.
         * 
         * @return builder
         * 
         */
        public Builder responseContent(@Nullable Output<String> responseContent) {
            $.responseContent = responseContent;
            return this;
        }

        /**
         * @param responseContent Match the response content.
         * 
         * @return builder
         * 
         */
        public Builder responseContent(String responseContent) {
            return responseContent(Output.of(responseContent));
        }

        /**
         * @param responseFormat HTTP response content format. Value:
         * - hex: hexadecimal format.
         * - text: text format.
         * 
         * @return builder
         * 
         */
        public Builder responseFormat(@Nullable Output<String> responseFormat) {
            $.responseFormat = responseFormat;
            return this;
        }

        /**
         * @param responseFormat HTTP response content format. Value:
         * - hex: hexadecimal format.
         * - text: text format.
         * 
         * @return builder
         * 
         */
        public Builder responseFormat(String responseFormat) {
            return responseFormat(Output.of(responseFormat));
        }

        /**
         * @param timeout Timeout time. Unit: milliseconds.
         * 
         * @return builder
         * 
         */
        public Builder timeout(@Nullable Output<Integer> timeout) {
            $.timeout = timeout;
            return this;
        }

        /**
         * @param timeout Timeout time. Unit: milliseconds.
         * 
         * @return builder
         * 
         */
        public Builder timeout(Integer timeout) {
            return timeout(Output.of(timeout));
        }

        /**
         * @param userName The username of FTP, SMTP, or pop3.
         * 
         * @return builder
         * 
         */
        public Builder userName(@Nullable Output<String> userName) {
            $.userName = userName;
            return this;
        }

        /**
         * @param userName The username of FTP, SMTP, or pop3.
         * 
         * @return builder
         * 
         */
        public Builder userName(String userName) {
            return userName(Output.of(userName));
        }

        public SiteMonitorOptionJsonArgs build() {
            return $;
        }
    }

}
