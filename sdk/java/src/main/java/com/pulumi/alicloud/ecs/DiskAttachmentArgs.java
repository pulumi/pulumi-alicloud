// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.ecs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DiskAttachmentArgs extends com.pulumi.resources.ResourceArgs {

    public static final DiskAttachmentArgs Empty = new DiskAttachmentArgs();

    @Import(name="bootable")
    private @Nullable Output<Boolean> bootable;

    public Optional<Output<Boolean>> bootable() {
        return Optional.ofNullable(this.bootable);
    }

    @Import(name="deleteWithInstance")
    private @Nullable Output<Boolean> deleteWithInstance;

    public Optional<Output<Boolean>> deleteWithInstance() {
        return Optional.ofNullable(this.deleteWithInstance);
    }

    /**
     * ID of the Disk to be attached.
     * 
     */
    @Import(name="diskId", required=true)
    private Output<String> diskId;

    /**
     * @return ID of the Disk to be attached.
     * 
     */
    public Output<String> diskId() {
        return this.diskId;
    }

    /**
     * ID of the Instance to attach to.
     * 
     */
    @Import(name="instanceId", required=true)
    private Output<String> instanceId;

    /**
     * @return ID of the Instance to attach to.
     * 
     */
    public Output<String> instanceId() {
        return this.instanceId;
    }

    @Import(name="keyPairName")
    private @Nullable Output<String> keyPairName;

    public Optional<Output<String>> keyPairName() {
        return Optional.ofNullable(this.keyPairName);
    }

    @Import(name="password")
    private @Nullable Output<String> password;

    public Optional<Output<String>> password() {
        return Optional.ofNullable(this.password);
    }

    private DiskAttachmentArgs() {}

    private DiskAttachmentArgs(DiskAttachmentArgs $) {
        this.bootable = $.bootable;
        this.deleteWithInstance = $.deleteWithInstance;
        this.diskId = $.diskId;
        this.instanceId = $.instanceId;
        this.keyPairName = $.keyPairName;
        this.password = $.password;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DiskAttachmentArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DiskAttachmentArgs $;

        public Builder() {
            $ = new DiskAttachmentArgs();
        }

        public Builder(DiskAttachmentArgs defaults) {
            $ = new DiskAttachmentArgs(Objects.requireNonNull(defaults));
        }

        public Builder bootable(@Nullable Output<Boolean> bootable) {
            $.bootable = bootable;
            return this;
        }

        public Builder bootable(Boolean bootable) {
            return bootable(Output.of(bootable));
        }

        public Builder deleteWithInstance(@Nullable Output<Boolean> deleteWithInstance) {
            $.deleteWithInstance = deleteWithInstance;
            return this;
        }

        public Builder deleteWithInstance(Boolean deleteWithInstance) {
            return deleteWithInstance(Output.of(deleteWithInstance));
        }

        /**
         * @param diskId ID of the Disk to be attached.
         * 
         * @return builder
         * 
         */
        public Builder diskId(Output<String> diskId) {
            $.diskId = diskId;
            return this;
        }

        /**
         * @param diskId ID of the Disk to be attached.
         * 
         * @return builder
         * 
         */
        public Builder diskId(String diskId) {
            return diskId(Output.of(diskId));
        }

        /**
         * @param instanceId ID of the Instance to attach to.
         * 
         * @return builder
         * 
         */
        public Builder instanceId(Output<String> instanceId) {
            $.instanceId = instanceId;
            return this;
        }

        /**
         * @param instanceId ID of the Instance to attach to.
         * 
         * @return builder
         * 
         */
        public Builder instanceId(String instanceId) {
            return instanceId(Output.of(instanceId));
        }

        public Builder keyPairName(@Nullable Output<String> keyPairName) {
            $.keyPairName = keyPairName;
            return this;
        }

        public Builder keyPairName(String keyPairName) {
            return keyPairName(Output.of(keyPairName));
        }

        public Builder password(@Nullable Output<String> password) {
            $.password = password;
            return this;
        }

        public Builder password(String password) {
            return password(Output.of(password));
        }

        public DiskAttachmentArgs build() {
            if ($.diskId == null) {
                throw new MissingRequiredPropertyException("DiskAttachmentArgs", "diskId");
            }
            if ($.instanceId == null) {
                throw new MissingRequiredPropertyException("DiskAttachmentArgs", "instanceId");
            }
            return $;
        }
    }

}
