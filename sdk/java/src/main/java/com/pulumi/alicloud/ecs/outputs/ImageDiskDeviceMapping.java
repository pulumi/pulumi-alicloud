// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.ecs.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ImageDiskDeviceMapping {
    /**
     * @return The device name of disk N in the custom image. Valid values:
     * - For disks other than basic disks, such as standard SSDs, ultra disks, and enhanced SSDs (ESSDs), the valid values range from /dev/vda to /dev/vdz in alphabetical order.
     * - For basic disks, the valid values range from /dev/xvda to /dev/xvdz in alphabetical order.
     * 
     */
    private @Nullable String device;
    /**
     * @return The type of disk N in the custom image. You can specify this parameter to create the system disk of the custom image from a data disk snapshot. If you do not specify this parameter, the disk type is determined by the corresponding snapshot. Valid values:
     * - system: system disk. You can specify only one snapshot to use to create the system disk in the custom image.
     * - data: data disk. You can specify up to 16 snapshots to use to create data disks in the custom image.
     * 
     */
    private @Nullable String diskType;
    /**
     * @return Image format.
     * 
     */
    private @Nullable String format;
    /**
     * @return Import the bucket of the OSS to which the image belongs.
     * 
     */
    private @Nullable String importOssBucket;
    /**
     * @return Import the object of the OSS to which the image file belongs.
     * 
     */
    private @Nullable String importOssObject;
    /**
     * @return Copy the progress of the task.
     * 
     */
    private @Nullable String progress;
    /**
     * @return For an image being replicated, return the remaining time of the replication task, in seconds.
     * 
     */
    private @Nullable Integer remainTime;
    /**
     * @return The size of disk N in the custom image. Unit: GiB. The valid values and default value of DiskDeviceMapping.N.Size vary based on the value of DiskDeviceMapping.N.SnapshotId.
     * - If no corresponding snapshot IDs are specified in the value of DiskDeviceMapping.N.SnapshotId, DiskDeviceMapping.N.Size has the following valid values and default values:
     * *   For basic disks, the valid values range from 5 to 2000, and the default value is 5.
     * *   For other disks, the valid values range from 20 to 32768, and the default value is 20.
     * - If a corresponding snapshot ID is specified in the value of DiskDeviceMapping.N.SnapshotId, the value of DiskDeviceMapping.N.Size must be greater than or equal to the size of the specified snapshot. The default value of DiskDeviceMapping.N.Size is the size of the specified snapshot.
     * 
     */
    private @Nullable Integer size;
    /**
     * @return The ID of snapshot N to use to create the custom image. .
     * 
     */
    private @Nullable String snapshotId;

    private ImageDiskDeviceMapping() {}
    /**
     * @return The device name of disk N in the custom image. Valid values:
     * - For disks other than basic disks, such as standard SSDs, ultra disks, and enhanced SSDs (ESSDs), the valid values range from /dev/vda to /dev/vdz in alphabetical order.
     * - For basic disks, the valid values range from /dev/xvda to /dev/xvdz in alphabetical order.
     * 
     */
    public Optional<String> device() {
        return Optional.ofNullable(this.device);
    }
    /**
     * @return The type of disk N in the custom image. You can specify this parameter to create the system disk of the custom image from a data disk snapshot. If you do not specify this parameter, the disk type is determined by the corresponding snapshot. Valid values:
     * - system: system disk. You can specify only one snapshot to use to create the system disk in the custom image.
     * - data: data disk. You can specify up to 16 snapshots to use to create data disks in the custom image.
     * 
     */
    public Optional<String> diskType() {
        return Optional.ofNullable(this.diskType);
    }
    /**
     * @return Image format.
     * 
     */
    public Optional<String> format() {
        return Optional.ofNullable(this.format);
    }
    /**
     * @return Import the bucket of the OSS to which the image belongs.
     * 
     */
    public Optional<String> importOssBucket() {
        return Optional.ofNullable(this.importOssBucket);
    }
    /**
     * @return Import the object of the OSS to which the image file belongs.
     * 
     */
    public Optional<String> importOssObject() {
        return Optional.ofNullable(this.importOssObject);
    }
    /**
     * @return Copy the progress of the task.
     * 
     */
    public Optional<String> progress() {
        return Optional.ofNullable(this.progress);
    }
    /**
     * @return For an image being replicated, return the remaining time of the replication task, in seconds.
     * 
     */
    public Optional<Integer> remainTime() {
        return Optional.ofNullable(this.remainTime);
    }
    /**
     * @return The size of disk N in the custom image. Unit: GiB. The valid values and default value of DiskDeviceMapping.N.Size vary based on the value of DiskDeviceMapping.N.SnapshotId.
     * - If no corresponding snapshot IDs are specified in the value of DiskDeviceMapping.N.SnapshotId, DiskDeviceMapping.N.Size has the following valid values and default values:
     * *   For basic disks, the valid values range from 5 to 2000, and the default value is 5.
     * *   For other disks, the valid values range from 20 to 32768, and the default value is 20.
     * - If a corresponding snapshot ID is specified in the value of DiskDeviceMapping.N.SnapshotId, the value of DiskDeviceMapping.N.Size must be greater than or equal to the size of the specified snapshot. The default value of DiskDeviceMapping.N.Size is the size of the specified snapshot.
     * 
     */
    public Optional<Integer> size() {
        return Optional.ofNullable(this.size);
    }
    /**
     * @return The ID of snapshot N to use to create the custom image. .
     * 
     */
    public Optional<String> snapshotId() {
        return Optional.ofNullable(this.snapshotId);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ImageDiskDeviceMapping defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String device;
        private @Nullable String diskType;
        private @Nullable String format;
        private @Nullable String importOssBucket;
        private @Nullable String importOssObject;
        private @Nullable String progress;
        private @Nullable Integer remainTime;
        private @Nullable Integer size;
        private @Nullable String snapshotId;
        public Builder() {}
        public Builder(ImageDiskDeviceMapping defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.device = defaults.device;
    	      this.diskType = defaults.diskType;
    	      this.format = defaults.format;
    	      this.importOssBucket = defaults.importOssBucket;
    	      this.importOssObject = defaults.importOssObject;
    	      this.progress = defaults.progress;
    	      this.remainTime = defaults.remainTime;
    	      this.size = defaults.size;
    	      this.snapshotId = defaults.snapshotId;
        }

        @CustomType.Setter
        public Builder device(@Nullable String device) {

            this.device = device;
            return this;
        }
        @CustomType.Setter
        public Builder diskType(@Nullable String diskType) {

            this.diskType = diskType;
            return this;
        }
        @CustomType.Setter
        public Builder format(@Nullable String format) {

            this.format = format;
            return this;
        }
        @CustomType.Setter
        public Builder importOssBucket(@Nullable String importOssBucket) {

            this.importOssBucket = importOssBucket;
            return this;
        }
        @CustomType.Setter
        public Builder importOssObject(@Nullable String importOssObject) {

            this.importOssObject = importOssObject;
            return this;
        }
        @CustomType.Setter
        public Builder progress(@Nullable String progress) {

            this.progress = progress;
            return this;
        }
        @CustomType.Setter
        public Builder remainTime(@Nullable Integer remainTime) {

            this.remainTime = remainTime;
            return this;
        }
        @CustomType.Setter
        public Builder size(@Nullable Integer size) {

            this.size = size;
            return this;
        }
        @CustomType.Setter
        public Builder snapshotId(@Nullable String snapshotId) {

            this.snapshotId = snapshotId;
            return this;
        }
        public ImageDiskDeviceMapping build() {
            final var _resultValue = new ImageDiskDeviceMapping();
            _resultValue.device = device;
            _resultValue.diskType = diskType;
            _resultValue.format = format;
            _resultValue.importOssBucket = importOssBucket;
            _resultValue.importOssObject = importOssObject;
            _resultValue.progress = progress;
            _resultValue.remainTime = remainTime;
            _resultValue.size = size;
            _resultValue.snapshotId = snapshotId;
            return _resultValue;
        }
    }
}
