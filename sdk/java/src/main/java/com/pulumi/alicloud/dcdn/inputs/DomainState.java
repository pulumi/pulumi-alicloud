// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.dcdn.inputs;

import com.pulumi.alicloud.dcdn.inputs.DomainSourceArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DomainState extends com.pulumi.resources.ResourceArgs {

    public static final DomainState Empty = new DomainState();

    /**
     * Indicates the name of the certificate if the HTTPS protocol is enabled.
     * 
     */
    @Import(name="certName")
    private @Nullable Output<String> certName;

    /**
     * @return Indicates the name of the certificate if the HTTPS protocol is enabled.
     * 
     */
    public Optional<Output<String>> certName() {
        return Optional.ofNullable(this.certName);
    }

    /**
     * The type of the certificate. Valid values:
     * `free`: a free certificate.
     * `cas`: a certificate purchased from Alibaba Cloud SSL Certificates Service.
     * `upload`: a user uploaded certificate.
     * 
     */
    @Import(name="certType")
    private @Nullable Output<String> certType;

    /**
     * @return The type of the certificate. Valid values:
     * `free`: a free certificate.
     * `cas`: a certificate purchased from Alibaba Cloud SSL Certificates Service.
     * `upload`: a user uploaded certificate.
     * 
     */
    public Optional<Output<String>> certType() {
        return Optional.ofNullable(this.certType);
    }

    /**
     * The URL that is used to test the accessibility of the origin.
     * 
     */
    @Import(name="checkUrl")
    private @Nullable Output<String> checkUrl;

    /**
     * @return The URL that is used to test the accessibility of the origin.
     * 
     */
    public Optional<Output<String>> checkUrl() {
        return Optional.ofNullable(this.checkUrl);
    }

    /**
     * (Available in 1.198.0+)- The canonical name (CNAME) of the accelerated domain.
     * 
     */
    @Import(name="cname")
    private @Nullable Output<String> cname;

    /**
     * @return (Available in 1.198.0+)- The canonical name (CNAME) of the accelerated domain.
     * 
     */
    public Optional<Output<String>> cname() {
        return Optional.ofNullable(this.cname);
    }

    /**
     * The name of the accelerated domain.
     * 
     */
    @Import(name="domainName")
    private @Nullable Output<String> domainName;

    /**
     * @return The name of the accelerated domain.
     * 
     */
    public Optional<Output<String>> domainName() {
        return Optional.ofNullable(this.domainName);
    }

    /**
     * Specifies whether to check the certificate name for duplicates. If you set the value to 1, the system does not perform the check and overwrites the information of the existing certificate with the same name.
     * 
     */
    @Import(name="forceSet")
    private @Nullable Output<String> forceSet;

    /**
     * @return Specifies whether to check the certificate name for duplicates. If you set the value to 1, the system does not perform the check and overwrites the information of the existing certificate with the same name.
     * 
     */
    public Optional<Output<String>> forceSet() {
        return Optional.ofNullable(this.forceSet);
    }

    /**
     * The ID of the resource group.
     * 
     */
    @Import(name="resourceGroupId")
    private @Nullable Output<String> resourceGroupId;

    /**
     * @return The ID of the resource group.
     * 
     */
    public Optional<Output<String>> resourceGroupId() {
        return Optional.ofNullable(this.resourceGroupId);
    }

    /**
     * The acceleration region.
     * 
     */
    @Import(name="scope")
    private @Nullable Output<String> scope;

    /**
     * @return The acceleration region.
     * 
     */
    public Optional<Output<String>> scope() {
        return Optional.ofNullable(this.scope);
    }

    /**
     * The top-level domain name.
     * 
     */
    @Import(name="securityToken")
    private @Nullable Output<String> securityToken;

    /**
     * @return The top-level domain name.
     * 
     */
    public Optional<Output<String>> securityToken() {
        return Optional.ofNullable(this.securityToken);
    }

    /**
     * The origin information. See `sources` below.
     * 
     */
    @Import(name="sources")
    private @Nullable Output<List<DomainSourceArgs>> sources;

    /**
     * @return The origin information. See `sources` below.
     * 
     */
    public Optional<Output<List<DomainSourceArgs>>> sources() {
        return Optional.ofNullable(this.sources);
    }

    /**
     * The private key. Specify this parameter only if you enable the SSL certificate.
     * 
     */
    @Import(name="sslPri")
    private @Nullable Output<String> sslPri;

    /**
     * @return The private key. Specify this parameter only if you enable the SSL certificate.
     * 
     */
    public Optional<Output<String>> sslPri() {
        return Optional.ofNullable(this.sslPri);
    }

    /**
     * Indicates whether the SSL certificate is enabled. Valid values: `on` enabled, `off` disabled.
     * 
     */
    @Import(name="sslProtocol")
    private @Nullable Output<String> sslProtocol;

    /**
     * @return Indicates whether the SSL certificate is enabled. Valid values: `on` enabled, `off` disabled.
     * 
     */
    public Optional<Output<String>> sslProtocol() {
        return Optional.ofNullable(this.sslProtocol);
    }

    /**
     * Indicates the public key of the certificate if the HTTPS protocol is enabled.
     * 
     */
    @Import(name="sslPub")
    private @Nullable Output<String> sslPub;

    /**
     * @return Indicates the public key of the certificate if the HTTPS protocol is enabled.
     * 
     */
    public Optional<Output<String>> sslPub() {
        return Optional.ofNullable(this.sslPub);
    }

    /**
     * The status of DCDN Domain. Valid values: `online`, `offline`. Default to `online`.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return The status of DCDN Domain. Valid values: `online`, `offline`. Default to `online`.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * A mapping of tags to assign to the resource.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,Object>> tags;

    /**
     * @return A mapping of tags to assign to the resource.
     * 
     */
    public Optional<Output<Map<String,Object>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * The top-level domain name.
     * 
     */
    @Import(name="topLevelDomain")
    private @Nullable Output<String> topLevelDomain;

    /**
     * @return The top-level domain name.
     * 
     */
    public Optional<Output<String>> topLevelDomain() {
        return Optional.ofNullable(this.topLevelDomain);
    }

    private DomainState() {}

    private DomainState(DomainState $) {
        this.certName = $.certName;
        this.certType = $.certType;
        this.checkUrl = $.checkUrl;
        this.cname = $.cname;
        this.domainName = $.domainName;
        this.forceSet = $.forceSet;
        this.resourceGroupId = $.resourceGroupId;
        this.scope = $.scope;
        this.securityToken = $.securityToken;
        this.sources = $.sources;
        this.sslPri = $.sslPri;
        this.sslProtocol = $.sslProtocol;
        this.sslPub = $.sslPub;
        this.status = $.status;
        this.tags = $.tags;
        this.topLevelDomain = $.topLevelDomain;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DomainState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DomainState $;

        public Builder() {
            $ = new DomainState();
        }

        public Builder(DomainState defaults) {
            $ = new DomainState(Objects.requireNonNull(defaults));
        }

        /**
         * @param certName Indicates the name of the certificate if the HTTPS protocol is enabled.
         * 
         * @return builder
         * 
         */
        public Builder certName(@Nullable Output<String> certName) {
            $.certName = certName;
            return this;
        }

        /**
         * @param certName Indicates the name of the certificate if the HTTPS protocol is enabled.
         * 
         * @return builder
         * 
         */
        public Builder certName(String certName) {
            return certName(Output.of(certName));
        }

        /**
         * @param certType The type of the certificate. Valid values:
         * `free`: a free certificate.
         * `cas`: a certificate purchased from Alibaba Cloud SSL Certificates Service.
         * `upload`: a user uploaded certificate.
         * 
         * @return builder
         * 
         */
        public Builder certType(@Nullable Output<String> certType) {
            $.certType = certType;
            return this;
        }

        /**
         * @param certType The type of the certificate. Valid values:
         * `free`: a free certificate.
         * `cas`: a certificate purchased from Alibaba Cloud SSL Certificates Service.
         * `upload`: a user uploaded certificate.
         * 
         * @return builder
         * 
         */
        public Builder certType(String certType) {
            return certType(Output.of(certType));
        }

        /**
         * @param checkUrl The URL that is used to test the accessibility of the origin.
         * 
         * @return builder
         * 
         */
        public Builder checkUrl(@Nullable Output<String> checkUrl) {
            $.checkUrl = checkUrl;
            return this;
        }

        /**
         * @param checkUrl The URL that is used to test the accessibility of the origin.
         * 
         * @return builder
         * 
         */
        public Builder checkUrl(String checkUrl) {
            return checkUrl(Output.of(checkUrl));
        }

        /**
         * @param cname (Available in 1.198.0+)- The canonical name (CNAME) of the accelerated domain.
         * 
         * @return builder
         * 
         */
        public Builder cname(@Nullable Output<String> cname) {
            $.cname = cname;
            return this;
        }

        /**
         * @param cname (Available in 1.198.0+)- The canonical name (CNAME) of the accelerated domain.
         * 
         * @return builder
         * 
         */
        public Builder cname(String cname) {
            return cname(Output.of(cname));
        }

        /**
         * @param domainName The name of the accelerated domain.
         * 
         * @return builder
         * 
         */
        public Builder domainName(@Nullable Output<String> domainName) {
            $.domainName = domainName;
            return this;
        }

        /**
         * @param domainName The name of the accelerated domain.
         * 
         * @return builder
         * 
         */
        public Builder domainName(String domainName) {
            return domainName(Output.of(domainName));
        }

        /**
         * @param forceSet Specifies whether to check the certificate name for duplicates. If you set the value to 1, the system does not perform the check and overwrites the information of the existing certificate with the same name.
         * 
         * @return builder
         * 
         */
        public Builder forceSet(@Nullable Output<String> forceSet) {
            $.forceSet = forceSet;
            return this;
        }

        /**
         * @param forceSet Specifies whether to check the certificate name for duplicates. If you set the value to 1, the system does not perform the check and overwrites the information of the existing certificate with the same name.
         * 
         * @return builder
         * 
         */
        public Builder forceSet(String forceSet) {
            return forceSet(Output.of(forceSet));
        }

        /**
         * @param resourceGroupId The ID of the resource group.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupId(@Nullable Output<String> resourceGroupId) {
            $.resourceGroupId = resourceGroupId;
            return this;
        }

        /**
         * @param resourceGroupId The ID of the resource group.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupId(String resourceGroupId) {
            return resourceGroupId(Output.of(resourceGroupId));
        }

        /**
         * @param scope The acceleration region.
         * 
         * @return builder
         * 
         */
        public Builder scope(@Nullable Output<String> scope) {
            $.scope = scope;
            return this;
        }

        /**
         * @param scope The acceleration region.
         * 
         * @return builder
         * 
         */
        public Builder scope(String scope) {
            return scope(Output.of(scope));
        }

        /**
         * @param securityToken The top-level domain name.
         * 
         * @return builder
         * 
         */
        public Builder securityToken(@Nullable Output<String> securityToken) {
            $.securityToken = securityToken;
            return this;
        }

        /**
         * @param securityToken The top-level domain name.
         * 
         * @return builder
         * 
         */
        public Builder securityToken(String securityToken) {
            return securityToken(Output.of(securityToken));
        }

        /**
         * @param sources The origin information. See `sources` below.
         * 
         * @return builder
         * 
         */
        public Builder sources(@Nullable Output<List<DomainSourceArgs>> sources) {
            $.sources = sources;
            return this;
        }

        /**
         * @param sources The origin information. See `sources` below.
         * 
         * @return builder
         * 
         */
        public Builder sources(List<DomainSourceArgs> sources) {
            return sources(Output.of(sources));
        }

        /**
         * @param sources The origin information. See `sources` below.
         * 
         * @return builder
         * 
         */
        public Builder sources(DomainSourceArgs... sources) {
            return sources(List.of(sources));
        }

        /**
         * @param sslPri The private key. Specify this parameter only if you enable the SSL certificate.
         * 
         * @return builder
         * 
         */
        public Builder sslPri(@Nullable Output<String> sslPri) {
            $.sslPri = sslPri;
            return this;
        }

        /**
         * @param sslPri The private key. Specify this parameter only if you enable the SSL certificate.
         * 
         * @return builder
         * 
         */
        public Builder sslPri(String sslPri) {
            return sslPri(Output.of(sslPri));
        }

        /**
         * @param sslProtocol Indicates whether the SSL certificate is enabled. Valid values: `on` enabled, `off` disabled.
         * 
         * @return builder
         * 
         */
        public Builder sslProtocol(@Nullable Output<String> sslProtocol) {
            $.sslProtocol = sslProtocol;
            return this;
        }

        /**
         * @param sslProtocol Indicates whether the SSL certificate is enabled. Valid values: `on` enabled, `off` disabled.
         * 
         * @return builder
         * 
         */
        public Builder sslProtocol(String sslProtocol) {
            return sslProtocol(Output.of(sslProtocol));
        }

        /**
         * @param sslPub Indicates the public key of the certificate if the HTTPS protocol is enabled.
         * 
         * @return builder
         * 
         */
        public Builder sslPub(@Nullable Output<String> sslPub) {
            $.sslPub = sslPub;
            return this;
        }

        /**
         * @param sslPub Indicates the public key of the certificate if the HTTPS protocol is enabled.
         * 
         * @return builder
         * 
         */
        public Builder sslPub(String sslPub) {
            return sslPub(Output.of(sslPub));
        }

        /**
         * @param status The status of DCDN Domain. Valid values: `online`, `offline`. Default to `online`.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status The status of DCDN Domain. Valid values: `online`, `offline`. Default to `online`.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param tags A mapping of tags to assign to the resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,Object>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags A mapping of tags to assign to the resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,Object> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param topLevelDomain The top-level domain name.
         * 
         * @return builder
         * 
         */
        public Builder topLevelDomain(@Nullable Output<String> topLevelDomain) {
            $.topLevelDomain = topLevelDomain;
            return this;
        }

        /**
         * @param topLevelDomain The top-level domain name.
         * 
         * @return builder
         * 
         */
        public Builder topLevelDomain(String topLevelDomain) {
            return topLevelDomain(Output.of(topLevelDomain));
        }

        public DomainState build() {
            return $;
        }
    }

}
