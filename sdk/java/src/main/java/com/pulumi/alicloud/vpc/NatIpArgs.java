// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.vpc;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class NatIpArgs extends com.pulumi.resources.ResourceArgs {

    public static final NatIpArgs Empty = new NatIpArgs();

    /**
     * Specifies whether to check the validity of the request without actually making the request.
     * 
     */
    @Import(name="dryRun")
    private @Nullable Output<Boolean> dryRun;

    /**
     * @return Specifies whether to check the validity of the request without actually making the request.
     * 
     */
    public Optional<Output<Boolean>> dryRun() {
        return Optional.ofNullable(this.dryRun);
    }

    /**
     * The ID of the Virtual Private Cloud (VPC) NAT gateway for which you want to create the NAT IP address.
     * 
     */
    @Import(name="natGatewayId", required=true)
    private Output<String> natGatewayId;

    /**
     * @return The ID of the Virtual Private Cloud (VPC) NAT gateway for which you want to create the NAT IP address.
     * 
     */
    public Output<String> natGatewayId() {
        return this.natGatewayId;
    }

    /**
     * The NAT IP address that you want to create. If you do not specify an IP address, the system selects a random IP address from the specified CIDR block.
     * 
     */
    @Import(name="natIp")
    private @Nullable Output<String> natIp;

    /**
     * @return The NAT IP address that you want to create. If you do not specify an IP address, the system selects a random IP address from the specified CIDR block.
     * 
     */
    public Optional<Output<String>> natIp() {
        return Optional.ofNullable(this.natIp);
    }

    /**
     * NAT IP ADDRESS of the address segment.
     * 
     */
    @Import(name="natIpCidr")
    private @Nullable Output<String> natIpCidr;

    /**
     * @return NAT IP ADDRESS of the address segment.
     * 
     */
    public Optional<Output<String>> natIpCidr() {
        return Optional.ofNullable(this.natIpCidr);
    }

    /**
     * The ID of the CIDR block to which the NAT IP address belongs.
     * 
     */
    @Import(name="natIpCidrId")
    private @Nullable Output<String> natIpCidrId;

    /**
     * @return The ID of the CIDR block to which the NAT IP address belongs.
     * 
     */
    public Optional<Output<String>> natIpCidrId() {
        return Optional.ofNullable(this.natIpCidrId);
    }

    /**
     * NAT IP ADDRESS description of information. Length is from `2` to `256` characters, must start with a letter or the Chinese at the beginning, but not at the`  http:// ` Or `https://` at the beginning.
     * 
     */
    @Import(name="natIpDescription")
    private @Nullable Output<String> natIpDescription;

    /**
     * @return NAT IP ADDRESS description of information. Length is from `2` to `256` characters, must start with a letter or the Chinese at the beginning, but not at the`  http:// ` Or `https://` at the beginning.
     * 
     */
    public Optional<Output<String>> natIpDescription() {
        return Optional.ofNullable(this.natIpDescription);
    }

    /**
     * NAT IP ADDRESS the name of the root directory. Length is from `2` to `128` characters, must start with a letter or the Chinese at the beginning can contain numbers, half a period (.), underscore (_) and dash (-). But do not start with `http://` or `https://` at the beginning.
     * 
     */
    @Import(name="natIpName")
    private @Nullable Output<String> natIpName;

    /**
     * @return NAT IP ADDRESS the name of the root directory. Length is from `2` to `128` characters, must start with a letter or the Chinese at the beginning can contain numbers, half a period (.), underscore (_) and dash (-). But do not start with `http://` or `https://` at the beginning.
     * 
     */
    public Optional<Output<String>> natIpName() {
        return Optional.ofNullable(this.natIpName);
    }

    private NatIpArgs() {}

    private NatIpArgs(NatIpArgs $) {
        this.dryRun = $.dryRun;
        this.natGatewayId = $.natGatewayId;
        this.natIp = $.natIp;
        this.natIpCidr = $.natIpCidr;
        this.natIpCidrId = $.natIpCidrId;
        this.natIpDescription = $.natIpDescription;
        this.natIpName = $.natIpName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NatIpArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NatIpArgs $;

        public Builder() {
            $ = new NatIpArgs();
        }

        public Builder(NatIpArgs defaults) {
            $ = new NatIpArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param dryRun Specifies whether to check the validity of the request without actually making the request.
         * 
         * @return builder
         * 
         */
        public Builder dryRun(@Nullable Output<Boolean> dryRun) {
            $.dryRun = dryRun;
            return this;
        }

        /**
         * @param dryRun Specifies whether to check the validity of the request without actually making the request.
         * 
         * @return builder
         * 
         */
        public Builder dryRun(Boolean dryRun) {
            return dryRun(Output.of(dryRun));
        }

        /**
         * @param natGatewayId The ID of the Virtual Private Cloud (VPC) NAT gateway for which you want to create the NAT IP address.
         * 
         * @return builder
         * 
         */
        public Builder natGatewayId(Output<String> natGatewayId) {
            $.natGatewayId = natGatewayId;
            return this;
        }

        /**
         * @param natGatewayId The ID of the Virtual Private Cloud (VPC) NAT gateway for which you want to create the NAT IP address.
         * 
         * @return builder
         * 
         */
        public Builder natGatewayId(String natGatewayId) {
            return natGatewayId(Output.of(natGatewayId));
        }

        /**
         * @param natIp The NAT IP address that you want to create. If you do not specify an IP address, the system selects a random IP address from the specified CIDR block.
         * 
         * @return builder
         * 
         */
        public Builder natIp(@Nullable Output<String> natIp) {
            $.natIp = natIp;
            return this;
        }

        /**
         * @param natIp The NAT IP address that you want to create. If you do not specify an IP address, the system selects a random IP address from the specified CIDR block.
         * 
         * @return builder
         * 
         */
        public Builder natIp(String natIp) {
            return natIp(Output.of(natIp));
        }

        /**
         * @param natIpCidr NAT IP ADDRESS of the address segment.
         * 
         * @return builder
         * 
         */
        public Builder natIpCidr(@Nullable Output<String> natIpCidr) {
            $.natIpCidr = natIpCidr;
            return this;
        }

        /**
         * @param natIpCidr NAT IP ADDRESS of the address segment.
         * 
         * @return builder
         * 
         */
        public Builder natIpCidr(String natIpCidr) {
            return natIpCidr(Output.of(natIpCidr));
        }

        /**
         * @param natIpCidrId The ID of the CIDR block to which the NAT IP address belongs.
         * 
         * @return builder
         * 
         */
        public Builder natIpCidrId(@Nullable Output<String> natIpCidrId) {
            $.natIpCidrId = natIpCidrId;
            return this;
        }

        /**
         * @param natIpCidrId The ID of the CIDR block to which the NAT IP address belongs.
         * 
         * @return builder
         * 
         */
        public Builder natIpCidrId(String natIpCidrId) {
            return natIpCidrId(Output.of(natIpCidrId));
        }

        /**
         * @param natIpDescription NAT IP ADDRESS description of information. Length is from `2` to `256` characters, must start with a letter or the Chinese at the beginning, but not at the`  http:// ` Or `https://` at the beginning.
         * 
         * @return builder
         * 
         */
        public Builder natIpDescription(@Nullable Output<String> natIpDescription) {
            $.natIpDescription = natIpDescription;
            return this;
        }

        /**
         * @param natIpDescription NAT IP ADDRESS description of information. Length is from `2` to `256` characters, must start with a letter or the Chinese at the beginning, but not at the`  http:// ` Or `https://` at the beginning.
         * 
         * @return builder
         * 
         */
        public Builder natIpDescription(String natIpDescription) {
            return natIpDescription(Output.of(natIpDescription));
        }

        /**
         * @param natIpName NAT IP ADDRESS the name of the root directory. Length is from `2` to `128` characters, must start with a letter or the Chinese at the beginning can contain numbers, half a period (.), underscore (_) and dash (-). But do not start with `http://` or `https://` at the beginning.
         * 
         * @return builder
         * 
         */
        public Builder natIpName(@Nullable Output<String> natIpName) {
            $.natIpName = natIpName;
            return this;
        }

        /**
         * @param natIpName NAT IP ADDRESS the name of the root directory. Length is from `2` to `128` characters, must start with a letter or the Chinese at the beginning can contain numbers, half a period (.), underscore (_) and dash (-). But do not start with `http://` or `https://` at the beginning.
         * 
         * @return builder
         * 
         */
        public Builder natIpName(String natIpName) {
            return natIpName(Output.of(natIpName));
        }

        public NatIpArgs build() {
            if ($.natGatewayId == null) {
                throw new MissingRequiredPropertyException("NatIpArgs", "natGatewayId");
            }
            return $;
        }
    }

}
