// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.ebs.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class EnterpriseSnapshotPolicyRetainRuleArgs extends com.pulumi.resources.ResourceArgs {

    public static final EnterpriseSnapshotPolicyRetainRuleArgs Empty = new EnterpriseSnapshotPolicyRetainRuleArgs();

    /**
     * Retention based on counting method.
     * 
     */
    @Import(name="number")
    private @Nullable Output<Integer> number;

    /**
     * @return Retention based on counting method.
     * 
     */
    public Optional<Output<Integer>> number() {
        return Optional.ofNullable(this.number);
    }

    /**
     * Time unit.
     * 
     */
    @Import(name="timeInterval")
    private @Nullable Output<Integer> timeInterval;

    /**
     * @return Time unit.
     * 
     */
    public Optional<Output<Integer>> timeInterval() {
        return Optional.ofNullable(this.timeInterval);
    }

    /**
     * Time-based retention.
     * 
     */
    @Import(name="timeUnit")
    private @Nullable Output<String> timeUnit;

    /**
     * @return Time-based retention.
     * 
     */
    public Optional<Output<String>> timeUnit() {
        return Optional.ofNullable(this.timeUnit);
    }

    private EnterpriseSnapshotPolicyRetainRuleArgs() {}

    private EnterpriseSnapshotPolicyRetainRuleArgs(EnterpriseSnapshotPolicyRetainRuleArgs $) {
        this.number = $.number;
        this.timeInterval = $.timeInterval;
        this.timeUnit = $.timeUnit;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(EnterpriseSnapshotPolicyRetainRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private EnterpriseSnapshotPolicyRetainRuleArgs $;

        public Builder() {
            $ = new EnterpriseSnapshotPolicyRetainRuleArgs();
        }

        public Builder(EnterpriseSnapshotPolicyRetainRuleArgs defaults) {
            $ = new EnterpriseSnapshotPolicyRetainRuleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param number Retention based on counting method.
         * 
         * @return builder
         * 
         */
        public Builder number(@Nullable Output<Integer> number) {
            $.number = number;
            return this;
        }

        /**
         * @param number Retention based on counting method.
         * 
         * @return builder
         * 
         */
        public Builder number(Integer number) {
            return number(Output.of(number));
        }

        /**
         * @param timeInterval Time unit.
         * 
         * @return builder
         * 
         */
        public Builder timeInterval(@Nullable Output<Integer> timeInterval) {
            $.timeInterval = timeInterval;
            return this;
        }

        /**
         * @param timeInterval Time unit.
         * 
         * @return builder
         * 
         */
        public Builder timeInterval(Integer timeInterval) {
            return timeInterval(Output.of(timeInterval));
        }

        /**
         * @param timeUnit Time-based retention.
         * 
         * @return builder
         * 
         */
        public Builder timeUnit(@Nullable Output<String> timeUnit) {
            $.timeUnit = timeUnit;
            return this;
        }

        /**
         * @param timeUnit Time-based retention.
         * 
         * @return builder
         * 
         */
        public Builder timeUnit(String timeUnit) {
            return timeUnit(Output.of(timeUnit));
        }

        public EnterpriseSnapshotPolicyRetainRuleArgs build() {
            return $;
        }
    }

}
