// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.lindorm.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetInstancesInstance {
    /**
     * @return AutoRenew.
     * 
     */
    private String autoRenew;
    /**
     * @return The cold storage capacity of the instance. Unit: GB.
     * 
     */
    private Integer coldStorage;
    /**
     * @return The creation date of Instance.
     * 
     */
    private String createTime;
    /**
     * @return The deletion protection of instance.
     * 
     */
    private Boolean deletionProection;
    /**
     * @return The disk type of instance. Valid values: `capacity_cloud_storage`, `cloud_efficiency`, `cloud_essd`, `cloud_ssd`.
     * 
     */
    private String diskCategory;
    /**
     * @return The usage of disk.
     * 
     */
    private String diskUsage;
    /**
     * @return The threshold of disk.
     * 
     */
    private String diskWarningThreshold;
    /**
     * @return The type of Instance engine .
     * 
     */
    private Integer engineType;
    /**
     * @return The expiration time of Instance.
     * 
     */
    private String expiredTime;
    /**
     * @return The count of file engine.
     * 
     */
    private Integer fileEngineNodeCount;
    /**
     * @return The specification of file engine. Valid values: `lindorm.c.xlarge`.
     * 
     */
    private String fileEngineSpecification;
    /**
     * @return The ID of the Instance.
     * 
     */
    private String id;
    /**
     * @return The ID of the instance.
     * 
     */
    private String instanceId;
    /**
     * @return The name of the instance.
     * 
     */
    private String instanceName;
    /**
     * @return The storage capacity of the instance. Unit: GB. For example, the value 50 indicates 50 GB.
     * 
     */
    private String instanceStorage;
    /**
     * @return The ip white list of instance.
     * 
     */
    private List<String> ipWhiteLists;
    /**
     * @return The count of lindorm tunnel service.
     * 
     */
    private Integer ltsNodeCount;
    /**
     * @return The specification of lindorm tunnel service. Valid values: `lindorm.g.2xlarge`, `lindorm.g.xlarge`.
     * 
     */
    private String ltsNodeSpecification;
    /**
     * @return Instance network type, enumerative.VPC.
     * 
     */
    private String networkType;
    /**
     * @return The billing method. Valid values: `PayAsYouGo` and `Subscription`.
     * 
     */
    private String paymentType;
    /**
     * @return The count of phoenix.
     * 
     */
    private Integer phoenixNodeCount;
    /**
     * @return The specification of phoenix. Valid values: `lindorm.c.2xlarge`, `lindorm.c.4xlarge`, `lindorm.c.8xlarge`, `lindorm.c.xlarge`, `lindorm.g.2xlarge`, `lindorm.g.4xlarge`, `lindorm.g.8xlarge`, `lindorm.g.xlarge`.
     * 
     */
    private String phoenixNodeSpecification;
    /**
     * @return The owner id of resource.
     * 
     */
    private String resourceOwnerId;
    /**
     * @return The count of search engine.
     * 
     */
    private Integer searchEngineNodeCount;
    /**
     * @return The specification of search engine. Valid values: `lindorm.g.2xlarge`, `lindorm.g.4xlarge`, `lindorm.g.8xlarge`, `lindorm.g.xlarge`.
     * 
     */
    private String searchEngineSpecification;
    /**
     * @return The service type of Instance, Valid values:  `lindorm`, `serverless_lindorm`, `lindorm_standalone`.
     * 
     */
    private String serviceType;
    /**
     * @return The status of Instance, enumerative: Valid values: `ACTIVATION`, `DELETED`, `CREATING`, `CLASS_CHANGING`, `LOCKED`, `INSTANCE_LEVEL_MODIFY`, `NET_MODIFYING`, `RESIZING`, `RESTARTING`, `MINOR_VERSION_TRANSING`.
     * 
     */
    private String status;
    /**
     * @return The count of table engine.
     * 
     */
    private Integer tableEngineNodeCount;
    /**
     * @return The specification of  table engine. Valid values: `lindorm.c.2xlarge`, `lindorm.c.4xlarge`, `lindorm.c.8xlarge`, `lindorm.c.xlarge`, `lindorm.g.2xlarge`, `lindorm.g.4xlarge`, `lindorm.g.8xlarge`, `lindorm.g.xlarge`.
     * 
     */
    private String tableEngineSpecification;
    /**
     * @return The count of time series engine.
     * 
     */
    private Integer timeSeriesEngineNodeCount;
    /**
     * @return The specification of time series engine. Valid values: `lindorm.g.2xlarge`, `lindorm.g.4xlarge`, `lindorm.g.8xlarge`, `lindorm.g.xlarge`.
     * 
     */
    private String timeSeriresEngineSpecification;
    /**
     * @return The ID of the virtual private cloud (VPC) that is connected to the instance.
     * 
     */
    private String vpcId;
    /**
     * @return The vswitch id.
     * 
     */
    private String vswitchId;
    /**
     * @return The zone ID of the instance.
     * 
     */
    private String zoneId;

    private GetInstancesInstance() {}
    /**
     * @return AutoRenew.
     * 
     */
    public String autoRenew() {
        return this.autoRenew;
    }
    /**
     * @return The cold storage capacity of the instance. Unit: GB.
     * 
     */
    public Integer coldStorage() {
        return this.coldStorage;
    }
    /**
     * @return The creation date of Instance.
     * 
     */
    public String createTime() {
        return this.createTime;
    }
    /**
     * @return The deletion protection of instance.
     * 
     */
    public Boolean deletionProection() {
        return this.deletionProection;
    }
    /**
     * @return The disk type of instance. Valid values: `capacity_cloud_storage`, `cloud_efficiency`, `cloud_essd`, `cloud_ssd`.
     * 
     */
    public String diskCategory() {
        return this.diskCategory;
    }
    /**
     * @return The usage of disk.
     * 
     */
    public String diskUsage() {
        return this.diskUsage;
    }
    /**
     * @return The threshold of disk.
     * 
     */
    public String diskWarningThreshold() {
        return this.diskWarningThreshold;
    }
    /**
     * @return The type of Instance engine .
     * 
     */
    public Integer engineType() {
        return this.engineType;
    }
    /**
     * @return The expiration time of Instance.
     * 
     */
    public String expiredTime() {
        return this.expiredTime;
    }
    /**
     * @return The count of file engine.
     * 
     */
    public Integer fileEngineNodeCount() {
        return this.fileEngineNodeCount;
    }
    /**
     * @return The specification of file engine. Valid values: `lindorm.c.xlarge`.
     * 
     */
    public String fileEngineSpecification() {
        return this.fileEngineSpecification;
    }
    /**
     * @return The ID of the Instance.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The ID of the instance.
     * 
     */
    public String instanceId() {
        return this.instanceId;
    }
    /**
     * @return The name of the instance.
     * 
     */
    public String instanceName() {
        return this.instanceName;
    }
    /**
     * @return The storage capacity of the instance. Unit: GB. For example, the value 50 indicates 50 GB.
     * 
     */
    public String instanceStorage() {
        return this.instanceStorage;
    }
    /**
     * @return The ip white list of instance.
     * 
     */
    public List<String> ipWhiteLists() {
        return this.ipWhiteLists;
    }
    /**
     * @return The count of lindorm tunnel service.
     * 
     */
    public Integer ltsNodeCount() {
        return this.ltsNodeCount;
    }
    /**
     * @return The specification of lindorm tunnel service. Valid values: `lindorm.g.2xlarge`, `lindorm.g.xlarge`.
     * 
     */
    public String ltsNodeSpecification() {
        return this.ltsNodeSpecification;
    }
    /**
     * @return Instance network type, enumerative.VPC.
     * 
     */
    public String networkType() {
        return this.networkType;
    }
    /**
     * @return The billing method. Valid values: `PayAsYouGo` and `Subscription`.
     * 
     */
    public String paymentType() {
        return this.paymentType;
    }
    /**
     * @return The count of phoenix.
     * 
     */
    public Integer phoenixNodeCount() {
        return this.phoenixNodeCount;
    }
    /**
     * @return The specification of phoenix. Valid values: `lindorm.c.2xlarge`, `lindorm.c.4xlarge`, `lindorm.c.8xlarge`, `lindorm.c.xlarge`, `lindorm.g.2xlarge`, `lindorm.g.4xlarge`, `lindorm.g.8xlarge`, `lindorm.g.xlarge`.
     * 
     */
    public String phoenixNodeSpecification() {
        return this.phoenixNodeSpecification;
    }
    /**
     * @return The owner id of resource.
     * 
     */
    public String resourceOwnerId() {
        return this.resourceOwnerId;
    }
    /**
     * @return The count of search engine.
     * 
     */
    public Integer searchEngineNodeCount() {
        return this.searchEngineNodeCount;
    }
    /**
     * @return The specification of search engine. Valid values: `lindorm.g.2xlarge`, `lindorm.g.4xlarge`, `lindorm.g.8xlarge`, `lindorm.g.xlarge`.
     * 
     */
    public String searchEngineSpecification() {
        return this.searchEngineSpecification;
    }
    /**
     * @return The service type of Instance, Valid values:  `lindorm`, `serverless_lindorm`, `lindorm_standalone`.
     * 
     */
    public String serviceType() {
        return this.serviceType;
    }
    /**
     * @return The status of Instance, enumerative: Valid values: `ACTIVATION`, `DELETED`, `CREATING`, `CLASS_CHANGING`, `LOCKED`, `INSTANCE_LEVEL_MODIFY`, `NET_MODIFYING`, `RESIZING`, `RESTARTING`, `MINOR_VERSION_TRANSING`.
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return The count of table engine.
     * 
     */
    public Integer tableEngineNodeCount() {
        return this.tableEngineNodeCount;
    }
    /**
     * @return The specification of  table engine. Valid values: `lindorm.c.2xlarge`, `lindorm.c.4xlarge`, `lindorm.c.8xlarge`, `lindorm.c.xlarge`, `lindorm.g.2xlarge`, `lindorm.g.4xlarge`, `lindorm.g.8xlarge`, `lindorm.g.xlarge`.
     * 
     */
    public String tableEngineSpecification() {
        return this.tableEngineSpecification;
    }
    /**
     * @return The count of time series engine.
     * 
     */
    public Integer timeSeriesEngineNodeCount() {
        return this.timeSeriesEngineNodeCount;
    }
    /**
     * @return The specification of time series engine. Valid values: `lindorm.g.2xlarge`, `lindorm.g.4xlarge`, `lindorm.g.8xlarge`, `lindorm.g.xlarge`.
     * 
     */
    public String timeSeriresEngineSpecification() {
        return this.timeSeriresEngineSpecification;
    }
    /**
     * @return The ID of the virtual private cloud (VPC) that is connected to the instance.
     * 
     */
    public String vpcId() {
        return this.vpcId;
    }
    /**
     * @return The vswitch id.
     * 
     */
    public String vswitchId() {
        return this.vswitchId;
    }
    /**
     * @return The zone ID of the instance.
     * 
     */
    public String zoneId() {
        return this.zoneId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetInstancesInstance defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String autoRenew;
        private Integer coldStorage;
        private String createTime;
        private Boolean deletionProection;
        private String diskCategory;
        private String diskUsage;
        private String diskWarningThreshold;
        private Integer engineType;
        private String expiredTime;
        private Integer fileEngineNodeCount;
        private String fileEngineSpecification;
        private String id;
        private String instanceId;
        private String instanceName;
        private String instanceStorage;
        private List<String> ipWhiteLists;
        private Integer ltsNodeCount;
        private String ltsNodeSpecification;
        private String networkType;
        private String paymentType;
        private Integer phoenixNodeCount;
        private String phoenixNodeSpecification;
        private String resourceOwnerId;
        private Integer searchEngineNodeCount;
        private String searchEngineSpecification;
        private String serviceType;
        private String status;
        private Integer tableEngineNodeCount;
        private String tableEngineSpecification;
        private Integer timeSeriesEngineNodeCount;
        private String timeSeriresEngineSpecification;
        private String vpcId;
        private String vswitchId;
        private String zoneId;
        public Builder() {}
        public Builder(GetInstancesInstance defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.autoRenew = defaults.autoRenew;
    	      this.coldStorage = defaults.coldStorage;
    	      this.createTime = defaults.createTime;
    	      this.deletionProection = defaults.deletionProection;
    	      this.diskCategory = defaults.diskCategory;
    	      this.diskUsage = defaults.diskUsage;
    	      this.diskWarningThreshold = defaults.diskWarningThreshold;
    	      this.engineType = defaults.engineType;
    	      this.expiredTime = defaults.expiredTime;
    	      this.fileEngineNodeCount = defaults.fileEngineNodeCount;
    	      this.fileEngineSpecification = defaults.fileEngineSpecification;
    	      this.id = defaults.id;
    	      this.instanceId = defaults.instanceId;
    	      this.instanceName = defaults.instanceName;
    	      this.instanceStorage = defaults.instanceStorage;
    	      this.ipWhiteLists = defaults.ipWhiteLists;
    	      this.ltsNodeCount = defaults.ltsNodeCount;
    	      this.ltsNodeSpecification = defaults.ltsNodeSpecification;
    	      this.networkType = defaults.networkType;
    	      this.paymentType = defaults.paymentType;
    	      this.phoenixNodeCount = defaults.phoenixNodeCount;
    	      this.phoenixNodeSpecification = defaults.phoenixNodeSpecification;
    	      this.resourceOwnerId = defaults.resourceOwnerId;
    	      this.searchEngineNodeCount = defaults.searchEngineNodeCount;
    	      this.searchEngineSpecification = defaults.searchEngineSpecification;
    	      this.serviceType = defaults.serviceType;
    	      this.status = defaults.status;
    	      this.tableEngineNodeCount = defaults.tableEngineNodeCount;
    	      this.tableEngineSpecification = defaults.tableEngineSpecification;
    	      this.timeSeriesEngineNodeCount = defaults.timeSeriesEngineNodeCount;
    	      this.timeSeriresEngineSpecification = defaults.timeSeriresEngineSpecification;
    	      this.vpcId = defaults.vpcId;
    	      this.vswitchId = defaults.vswitchId;
    	      this.zoneId = defaults.zoneId;
        }

        @CustomType.Setter
        public Builder autoRenew(String autoRenew) {
            if (autoRenew == null) {
              throw new MissingRequiredPropertyException("GetInstancesInstance", "autoRenew");
            }
            this.autoRenew = autoRenew;
            return this;
        }
        @CustomType.Setter
        public Builder coldStorage(Integer coldStorage) {
            if (coldStorage == null) {
              throw new MissingRequiredPropertyException("GetInstancesInstance", "coldStorage");
            }
            this.coldStorage = coldStorage;
            return this;
        }
        @CustomType.Setter
        public Builder createTime(String createTime) {
            if (createTime == null) {
              throw new MissingRequiredPropertyException("GetInstancesInstance", "createTime");
            }
            this.createTime = createTime;
            return this;
        }
        @CustomType.Setter
        public Builder deletionProection(Boolean deletionProection) {
            if (deletionProection == null) {
              throw new MissingRequiredPropertyException("GetInstancesInstance", "deletionProection");
            }
            this.deletionProection = deletionProection;
            return this;
        }
        @CustomType.Setter
        public Builder diskCategory(String diskCategory) {
            if (diskCategory == null) {
              throw new MissingRequiredPropertyException("GetInstancesInstance", "diskCategory");
            }
            this.diskCategory = diskCategory;
            return this;
        }
        @CustomType.Setter
        public Builder diskUsage(String diskUsage) {
            if (diskUsage == null) {
              throw new MissingRequiredPropertyException("GetInstancesInstance", "diskUsage");
            }
            this.diskUsage = diskUsage;
            return this;
        }
        @CustomType.Setter
        public Builder diskWarningThreshold(String diskWarningThreshold) {
            if (diskWarningThreshold == null) {
              throw new MissingRequiredPropertyException("GetInstancesInstance", "diskWarningThreshold");
            }
            this.diskWarningThreshold = diskWarningThreshold;
            return this;
        }
        @CustomType.Setter
        public Builder engineType(Integer engineType) {
            if (engineType == null) {
              throw new MissingRequiredPropertyException("GetInstancesInstance", "engineType");
            }
            this.engineType = engineType;
            return this;
        }
        @CustomType.Setter
        public Builder expiredTime(String expiredTime) {
            if (expiredTime == null) {
              throw new MissingRequiredPropertyException("GetInstancesInstance", "expiredTime");
            }
            this.expiredTime = expiredTime;
            return this;
        }
        @CustomType.Setter
        public Builder fileEngineNodeCount(Integer fileEngineNodeCount) {
            if (fileEngineNodeCount == null) {
              throw new MissingRequiredPropertyException("GetInstancesInstance", "fileEngineNodeCount");
            }
            this.fileEngineNodeCount = fileEngineNodeCount;
            return this;
        }
        @CustomType.Setter
        public Builder fileEngineSpecification(String fileEngineSpecification) {
            if (fileEngineSpecification == null) {
              throw new MissingRequiredPropertyException("GetInstancesInstance", "fileEngineSpecification");
            }
            this.fileEngineSpecification = fileEngineSpecification;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetInstancesInstance", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder instanceId(String instanceId) {
            if (instanceId == null) {
              throw new MissingRequiredPropertyException("GetInstancesInstance", "instanceId");
            }
            this.instanceId = instanceId;
            return this;
        }
        @CustomType.Setter
        public Builder instanceName(String instanceName) {
            if (instanceName == null) {
              throw new MissingRequiredPropertyException("GetInstancesInstance", "instanceName");
            }
            this.instanceName = instanceName;
            return this;
        }
        @CustomType.Setter
        public Builder instanceStorage(String instanceStorage) {
            if (instanceStorage == null) {
              throw new MissingRequiredPropertyException("GetInstancesInstance", "instanceStorage");
            }
            this.instanceStorage = instanceStorage;
            return this;
        }
        @CustomType.Setter
        public Builder ipWhiteLists(List<String> ipWhiteLists) {
            if (ipWhiteLists == null) {
              throw new MissingRequiredPropertyException("GetInstancesInstance", "ipWhiteLists");
            }
            this.ipWhiteLists = ipWhiteLists;
            return this;
        }
        public Builder ipWhiteLists(String... ipWhiteLists) {
            return ipWhiteLists(List.of(ipWhiteLists));
        }
        @CustomType.Setter
        public Builder ltsNodeCount(Integer ltsNodeCount) {
            if (ltsNodeCount == null) {
              throw new MissingRequiredPropertyException("GetInstancesInstance", "ltsNodeCount");
            }
            this.ltsNodeCount = ltsNodeCount;
            return this;
        }
        @CustomType.Setter
        public Builder ltsNodeSpecification(String ltsNodeSpecification) {
            if (ltsNodeSpecification == null) {
              throw new MissingRequiredPropertyException("GetInstancesInstance", "ltsNodeSpecification");
            }
            this.ltsNodeSpecification = ltsNodeSpecification;
            return this;
        }
        @CustomType.Setter
        public Builder networkType(String networkType) {
            if (networkType == null) {
              throw new MissingRequiredPropertyException("GetInstancesInstance", "networkType");
            }
            this.networkType = networkType;
            return this;
        }
        @CustomType.Setter
        public Builder paymentType(String paymentType) {
            if (paymentType == null) {
              throw new MissingRequiredPropertyException("GetInstancesInstance", "paymentType");
            }
            this.paymentType = paymentType;
            return this;
        }
        @CustomType.Setter
        public Builder phoenixNodeCount(Integer phoenixNodeCount) {
            if (phoenixNodeCount == null) {
              throw new MissingRequiredPropertyException("GetInstancesInstance", "phoenixNodeCount");
            }
            this.phoenixNodeCount = phoenixNodeCount;
            return this;
        }
        @CustomType.Setter
        public Builder phoenixNodeSpecification(String phoenixNodeSpecification) {
            if (phoenixNodeSpecification == null) {
              throw new MissingRequiredPropertyException("GetInstancesInstance", "phoenixNodeSpecification");
            }
            this.phoenixNodeSpecification = phoenixNodeSpecification;
            return this;
        }
        @CustomType.Setter
        public Builder resourceOwnerId(String resourceOwnerId) {
            if (resourceOwnerId == null) {
              throw new MissingRequiredPropertyException("GetInstancesInstance", "resourceOwnerId");
            }
            this.resourceOwnerId = resourceOwnerId;
            return this;
        }
        @CustomType.Setter
        public Builder searchEngineNodeCount(Integer searchEngineNodeCount) {
            if (searchEngineNodeCount == null) {
              throw new MissingRequiredPropertyException("GetInstancesInstance", "searchEngineNodeCount");
            }
            this.searchEngineNodeCount = searchEngineNodeCount;
            return this;
        }
        @CustomType.Setter
        public Builder searchEngineSpecification(String searchEngineSpecification) {
            if (searchEngineSpecification == null) {
              throw new MissingRequiredPropertyException("GetInstancesInstance", "searchEngineSpecification");
            }
            this.searchEngineSpecification = searchEngineSpecification;
            return this;
        }
        @CustomType.Setter
        public Builder serviceType(String serviceType) {
            if (serviceType == null) {
              throw new MissingRequiredPropertyException("GetInstancesInstance", "serviceType");
            }
            this.serviceType = serviceType;
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            if (status == null) {
              throw new MissingRequiredPropertyException("GetInstancesInstance", "status");
            }
            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder tableEngineNodeCount(Integer tableEngineNodeCount) {
            if (tableEngineNodeCount == null) {
              throw new MissingRequiredPropertyException("GetInstancesInstance", "tableEngineNodeCount");
            }
            this.tableEngineNodeCount = tableEngineNodeCount;
            return this;
        }
        @CustomType.Setter
        public Builder tableEngineSpecification(String tableEngineSpecification) {
            if (tableEngineSpecification == null) {
              throw new MissingRequiredPropertyException("GetInstancesInstance", "tableEngineSpecification");
            }
            this.tableEngineSpecification = tableEngineSpecification;
            return this;
        }
        @CustomType.Setter
        public Builder timeSeriesEngineNodeCount(Integer timeSeriesEngineNodeCount) {
            if (timeSeriesEngineNodeCount == null) {
              throw new MissingRequiredPropertyException("GetInstancesInstance", "timeSeriesEngineNodeCount");
            }
            this.timeSeriesEngineNodeCount = timeSeriesEngineNodeCount;
            return this;
        }
        @CustomType.Setter
        public Builder timeSeriresEngineSpecification(String timeSeriresEngineSpecification) {
            if (timeSeriresEngineSpecification == null) {
              throw new MissingRequiredPropertyException("GetInstancesInstance", "timeSeriresEngineSpecification");
            }
            this.timeSeriresEngineSpecification = timeSeriresEngineSpecification;
            return this;
        }
        @CustomType.Setter
        public Builder vpcId(String vpcId) {
            if (vpcId == null) {
              throw new MissingRequiredPropertyException("GetInstancesInstance", "vpcId");
            }
            this.vpcId = vpcId;
            return this;
        }
        @CustomType.Setter
        public Builder vswitchId(String vswitchId) {
            if (vswitchId == null) {
              throw new MissingRequiredPropertyException("GetInstancesInstance", "vswitchId");
            }
            this.vswitchId = vswitchId;
            return this;
        }
        @CustomType.Setter
        public Builder zoneId(String zoneId) {
            if (zoneId == null) {
              throw new MissingRequiredPropertyException("GetInstancesInstance", "zoneId");
            }
            this.zoneId = zoneId;
            return this;
        }
        public GetInstancesInstance build() {
            final var _resultValue = new GetInstancesInstance();
            _resultValue.autoRenew = autoRenew;
            _resultValue.coldStorage = coldStorage;
            _resultValue.createTime = createTime;
            _resultValue.deletionProection = deletionProection;
            _resultValue.diskCategory = diskCategory;
            _resultValue.diskUsage = diskUsage;
            _resultValue.diskWarningThreshold = diskWarningThreshold;
            _resultValue.engineType = engineType;
            _resultValue.expiredTime = expiredTime;
            _resultValue.fileEngineNodeCount = fileEngineNodeCount;
            _resultValue.fileEngineSpecification = fileEngineSpecification;
            _resultValue.id = id;
            _resultValue.instanceId = instanceId;
            _resultValue.instanceName = instanceName;
            _resultValue.instanceStorage = instanceStorage;
            _resultValue.ipWhiteLists = ipWhiteLists;
            _resultValue.ltsNodeCount = ltsNodeCount;
            _resultValue.ltsNodeSpecification = ltsNodeSpecification;
            _resultValue.networkType = networkType;
            _resultValue.paymentType = paymentType;
            _resultValue.phoenixNodeCount = phoenixNodeCount;
            _resultValue.phoenixNodeSpecification = phoenixNodeSpecification;
            _resultValue.resourceOwnerId = resourceOwnerId;
            _resultValue.searchEngineNodeCount = searchEngineNodeCount;
            _resultValue.searchEngineSpecification = searchEngineSpecification;
            _resultValue.serviceType = serviceType;
            _resultValue.status = status;
            _resultValue.tableEngineNodeCount = tableEngineNodeCount;
            _resultValue.tableEngineSpecification = tableEngineSpecification;
            _resultValue.timeSeriesEngineNodeCount = timeSeriesEngineNodeCount;
            _resultValue.timeSeriresEngineSpecification = timeSeriresEngineSpecification;
            _resultValue.vpcId = vpcId;
            _resultValue.vswitchId = vswitchId;
            _resultValue.zoneId = zoneId;
            return _resultValue;
        }
    }
}
