// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.mse.outputs;

import com.pulumi.alicloud.mse.outputs.GetNacosConfigsConfig;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetNacosConfigsResult {
    private @Nullable String acceptLanguage;
    /**
     * @return The name of the application.
     * 
     */
    private @Nullable String appName;
    /**
     * @return A list of Mse Nacos Configs. Each element contains the following attributes:
     * 
     */
    private List<GetNacosConfigsConfig> configs;
    /**
     * @return The ID of the data.
     * 
     */
    private @Nullable String dataId;
    private @Nullable Boolean enableDetails;
    /**
     * @return The ID of the group.
     * 
     */
    private @Nullable String group;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private List<String> ids;
    private String instanceId;
    private @Nullable String namespaceId;
    private @Nullable String outputFile;
    private @Nullable String requestPars;
    /**
     * @return The tags of the configuration.
     * 
     */
    private @Nullable String tags;

    private GetNacosConfigsResult() {}
    public Optional<String> acceptLanguage() {
        return Optional.ofNullable(this.acceptLanguage);
    }
    /**
     * @return The name of the application.
     * 
     */
    public Optional<String> appName() {
        return Optional.ofNullable(this.appName);
    }
    /**
     * @return A list of Mse Nacos Configs. Each element contains the following attributes:
     * 
     */
    public List<GetNacosConfigsConfig> configs() {
        return this.configs;
    }
    /**
     * @return The ID of the data.
     * 
     */
    public Optional<String> dataId() {
        return Optional.ofNullable(this.dataId);
    }
    public Optional<Boolean> enableDetails() {
        return Optional.ofNullable(this.enableDetails);
    }
    /**
     * @return The ID of the group.
     * 
     */
    public Optional<String> group() {
        return Optional.ofNullable(this.group);
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public List<String> ids() {
        return this.ids;
    }
    public String instanceId() {
        return this.instanceId;
    }
    public Optional<String> namespaceId() {
        return Optional.ofNullable(this.namespaceId);
    }
    public Optional<String> outputFile() {
        return Optional.ofNullable(this.outputFile);
    }
    public Optional<String> requestPars() {
        return Optional.ofNullable(this.requestPars);
    }
    /**
     * @return The tags of the configuration.
     * 
     */
    public Optional<String> tags() {
        return Optional.ofNullable(this.tags);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetNacosConfigsResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String acceptLanguage;
        private @Nullable String appName;
        private List<GetNacosConfigsConfig> configs;
        private @Nullable String dataId;
        private @Nullable Boolean enableDetails;
        private @Nullable String group;
        private String id;
        private List<String> ids;
        private String instanceId;
        private @Nullable String namespaceId;
        private @Nullable String outputFile;
        private @Nullable String requestPars;
        private @Nullable String tags;
        public Builder() {}
        public Builder(GetNacosConfigsResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.acceptLanguage = defaults.acceptLanguage;
    	      this.appName = defaults.appName;
    	      this.configs = defaults.configs;
    	      this.dataId = defaults.dataId;
    	      this.enableDetails = defaults.enableDetails;
    	      this.group = defaults.group;
    	      this.id = defaults.id;
    	      this.ids = defaults.ids;
    	      this.instanceId = defaults.instanceId;
    	      this.namespaceId = defaults.namespaceId;
    	      this.outputFile = defaults.outputFile;
    	      this.requestPars = defaults.requestPars;
    	      this.tags = defaults.tags;
        }

        @CustomType.Setter
        public Builder acceptLanguage(@Nullable String acceptLanguage) {

            this.acceptLanguage = acceptLanguage;
            return this;
        }
        @CustomType.Setter
        public Builder appName(@Nullable String appName) {

            this.appName = appName;
            return this;
        }
        @CustomType.Setter
        public Builder configs(List<GetNacosConfigsConfig> configs) {
            if (configs == null) {
              throw new MissingRequiredPropertyException("GetNacosConfigsResult", "configs");
            }
            this.configs = configs;
            return this;
        }
        public Builder configs(GetNacosConfigsConfig... configs) {
            return configs(List.of(configs));
        }
        @CustomType.Setter
        public Builder dataId(@Nullable String dataId) {

            this.dataId = dataId;
            return this;
        }
        @CustomType.Setter
        public Builder enableDetails(@Nullable Boolean enableDetails) {

            this.enableDetails = enableDetails;
            return this;
        }
        @CustomType.Setter
        public Builder group(@Nullable String group) {

            this.group = group;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetNacosConfigsResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder ids(List<String> ids) {
            if (ids == null) {
              throw new MissingRequiredPropertyException("GetNacosConfigsResult", "ids");
            }
            this.ids = ids;
            return this;
        }
        public Builder ids(String... ids) {
            return ids(List.of(ids));
        }
        @CustomType.Setter
        public Builder instanceId(String instanceId) {
            if (instanceId == null) {
              throw new MissingRequiredPropertyException("GetNacosConfigsResult", "instanceId");
            }
            this.instanceId = instanceId;
            return this;
        }
        @CustomType.Setter
        public Builder namespaceId(@Nullable String namespaceId) {

            this.namespaceId = namespaceId;
            return this;
        }
        @CustomType.Setter
        public Builder outputFile(@Nullable String outputFile) {

            this.outputFile = outputFile;
            return this;
        }
        @CustomType.Setter
        public Builder requestPars(@Nullable String requestPars) {

            this.requestPars = requestPars;
            return this;
        }
        @CustomType.Setter
        public Builder tags(@Nullable String tags) {

            this.tags = tags;
            return this;
        }
        public GetNacosConfigsResult build() {
            final var _resultValue = new GetNacosConfigsResult();
            _resultValue.acceptLanguage = acceptLanguage;
            _resultValue.appName = appName;
            _resultValue.configs = configs;
            _resultValue.dataId = dataId;
            _resultValue.enableDetails = enableDetails;
            _resultValue.group = group;
            _resultValue.id = id;
            _resultValue.ids = ids;
            _resultValue.instanceId = instanceId;
            _resultValue.namespaceId = namespaceId;
            _resultValue.outputFile = outputFile;
            _resultValue.requestPars = requestPars;
            _resultValue.tags = tags;
            return _resultValue;
        }
    }
}
