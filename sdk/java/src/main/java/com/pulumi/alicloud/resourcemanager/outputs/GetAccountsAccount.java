// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.resourcemanager.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetAccountsAccount {
    /**
     * @return The ID of the account.
     * 
     */
    private String accountId;
    /**
     * @return (Available in v1.125.0+) The Alibaba Cloud account name of the member account.
     * 
     */
    private String accountName;
    /**
     * @return The name of the member account.
     * 
     */
    private String displayName;
    /**
     * @return The ID of the folder.
     * 
     */
    private String folderId;
    /**
     * @return The ID of the resource.
     * 
     */
    private String id;
    /**
     * @return The way in which the member account joined the resource directory.
     * 
     */
    private String joinMethod;
    /**
     * @return The time when the member account joined the resource directory.
     * 
     */
    private String joinTime;
    /**
     * @return The time when the member account was modified.
     * 
     */
    private String modifyTime;
    /**
     * @return (Available in v1.124.3+) Settlement account ID. If the value is empty, the current account will be used for settlement.
     * 
     */
    private String payerAccountId;
    /**
     * @return The ID of the resource directory.
     * 
     */
    private String resourceDirectoryId;
    /**
     * @return The status of account, valid values: `CreateCancelled`, `CreateExpired`, `CreateFailed`, `CreateSuccess`, `CreateVerifying`, `InviteSuccess`, `PromoteCancelled`, `PromoteExpired`, `PromoteFailed`, `PromoteSuccess`, and `PromoteVerifying`.
     * 
     */
    private String status;
    /**
     * @return The type of the member account.
     * 
     */
    private String type;

    private GetAccountsAccount() {}
    /**
     * @return The ID of the account.
     * 
     */
    public String accountId() {
        return this.accountId;
    }
    /**
     * @return (Available in v1.125.0+) The Alibaba Cloud account name of the member account.
     * 
     */
    public String accountName() {
        return this.accountName;
    }
    /**
     * @return The name of the member account.
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return The ID of the folder.
     * 
     */
    public String folderId() {
        return this.folderId;
    }
    /**
     * @return The ID of the resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The way in which the member account joined the resource directory.
     * 
     */
    public String joinMethod() {
        return this.joinMethod;
    }
    /**
     * @return The time when the member account joined the resource directory.
     * 
     */
    public String joinTime() {
        return this.joinTime;
    }
    /**
     * @return The time when the member account was modified.
     * 
     */
    public String modifyTime() {
        return this.modifyTime;
    }
    /**
     * @return (Available in v1.124.3+) Settlement account ID. If the value is empty, the current account will be used for settlement.
     * 
     */
    public String payerAccountId() {
        return this.payerAccountId;
    }
    /**
     * @return The ID of the resource directory.
     * 
     */
    public String resourceDirectoryId() {
        return this.resourceDirectoryId;
    }
    /**
     * @return The status of account, valid values: `CreateCancelled`, `CreateExpired`, `CreateFailed`, `CreateSuccess`, `CreateVerifying`, `InviteSuccess`, `PromoteCancelled`, `PromoteExpired`, `PromoteFailed`, `PromoteSuccess`, and `PromoteVerifying`.
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return The type of the member account.
     * 
     */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetAccountsAccount defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String accountId;
        private String accountName;
        private String displayName;
        private String folderId;
        private String id;
        private String joinMethod;
        private String joinTime;
        private String modifyTime;
        private String payerAccountId;
        private String resourceDirectoryId;
        private String status;
        private String type;
        public Builder() {}
        public Builder(GetAccountsAccount defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accountId = defaults.accountId;
    	      this.accountName = defaults.accountName;
    	      this.displayName = defaults.displayName;
    	      this.folderId = defaults.folderId;
    	      this.id = defaults.id;
    	      this.joinMethod = defaults.joinMethod;
    	      this.joinTime = defaults.joinTime;
    	      this.modifyTime = defaults.modifyTime;
    	      this.payerAccountId = defaults.payerAccountId;
    	      this.resourceDirectoryId = defaults.resourceDirectoryId;
    	      this.status = defaults.status;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder accountId(String accountId) {
            if (accountId == null) {
              throw new MissingRequiredPropertyException("GetAccountsAccount", "accountId");
            }
            this.accountId = accountId;
            return this;
        }
        @CustomType.Setter
        public Builder accountName(String accountName) {
            if (accountName == null) {
              throw new MissingRequiredPropertyException("GetAccountsAccount", "accountName");
            }
            this.accountName = accountName;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            if (displayName == null) {
              throw new MissingRequiredPropertyException("GetAccountsAccount", "displayName");
            }
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder folderId(String folderId) {
            if (folderId == null) {
              throw new MissingRequiredPropertyException("GetAccountsAccount", "folderId");
            }
            this.folderId = folderId;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetAccountsAccount", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder joinMethod(String joinMethod) {
            if (joinMethod == null) {
              throw new MissingRequiredPropertyException("GetAccountsAccount", "joinMethod");
            }
            this.joinMethod = joinMethod;
            return this;
        }
        @CustomType.Setter
        public Builder joinTime(String joinTime) {
            if (joinTime == null) {
              throw new MissingRequiredPropertyException("GetAccountsAccount", "joinTime");
            }
            this.joinTime = joinTime;
            return this;
        }
        @CustomType.Setter
        public Builder modifyTime(String modifyTime) {
            if (modifyTime == null) {
              throw new MissingRequiredPropertyException("GetAccountsAccount", "modifyTime");
            }
            this.modifyTime = modifyTime;
            return this;
        }
        @CustomType.Setter
        public Builder payerAccountId(String payerAccountId) {
            if (payerAccountId == null) {
              throw new MissingRequiredPropertyException("GetAccountsAccount", "payerAccountId");
            }
            this.payerAccountId = payerAccountId;
            return this;
        }
        @CustomType.Setter
        public Builder resourceDirectoryId(String resourceDirectoryId) {
            if (resourceDirectoryId == null) {
              throw new MissingRequiredPropertyException("GetAccountsAccount", "resourceDirectoryId");
            }
            this.resourceDirectoryId = resourceDirectoryId;
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            if (status == null) {
              throw new MissingRequiredPropertyException("GetAccountsAccount", "status");
            }
            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("GetAccountsAccount", "type");
            }
            this.type = type;
            return this;
        }
        public GetAccountsAccount build() {
            final var _resultValue = new GetAccountsAccount();
            _resultValue.accountId = accountId;
            _resultValue.accountName = accountName;
            _resultValue.displayName = displayName;
            _resultValue.folderId = folderId;
            _resultValue.id = id;
            _resultValue.joinMethod = joinMethod;
            _resultValue.joinTime = joinTime;
            _resultValue.modifyTime = modifyTime;
            _resultValue.payerAccountId = payerAccountId;
            _resultValue.resourceDirectoryId = resourceDirectoryId;
            _resultValue.status = status;
            _resultValue.type = type;
            return _resultValue;
        }
    }
}
