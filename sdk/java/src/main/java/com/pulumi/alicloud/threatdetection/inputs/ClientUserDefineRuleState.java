// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.threatdetection.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ClientUserDefineRuleState extends com.pulumi.resources.ResourceArgs {

    public static final ClientUserDefineRuleState Empty = new ClientUserDefineRuleState();

    /**
     * The operation type. Value:
     * - **0**: plus White
     * - **1**: Plus Black.
     * 
     */
    @Import(name="actionType")
    private @Nullable Output<Integer> actionType;

    /**
     * @return The operation type. Value:
     * - **0**: plus White
     * - **1**: Plus Black.
     * 
     */
    public Optional<Output<Integer>> actionType() {
        return Optional.ofNullable(this.actionType);
    }

    /**
     * The custom rule name.
     * 
     */
    @Import(name="clientUserDefineRuleName")
    private @Nullable Output<String> clientUserDefineRuleName;

    /**
     * @return The custom rule name.
     * 
     */
    public Optional<Output<String>> clientUserDefineRuleName() {
        return Optional.ofNullable(this.clientUserDefineRuleName);
    }

    /**
     * Command line. When the value of the Type attribute is 2, 3, 4, 5, 6, or 7, the command line field is required.
     * 
     */
    @Import(name="cmdline")
    private @Nullable Output<String> cmdline;

    /**
     * @return Command line. When the value of the Type attribute is 2, 3, 4, 5, 6, or 7, the command line field is required.
     * 
     */
    public Optional<Output<String>> cmdline() {
        return Optional.ofNullable(this.cmdline);
    }

    /**
     * The creation time of the resource.
     * 
     */
    @Import(name="createTime")
    private @Nullable Output<Integer> createTime;

    /**
     * @return The creation time of the resource.
     * 
     */
    public Optional<Output<Integer>> createTime() {
        return Optional.ofNullable(this.createTime);
    }

    /**
     * The file path. When the value of the Type attribute is 4 or 6, 7, the FilePath field is required.
     * 
     */
    @Import(name="filePath")
    private @Nullable Output<String> filePath;

    /**
     * @return The file path. When the value of the Type attribute is 4 or 6, 7, the FilePath field is required.
     * 
     */
    public Optional<Output<String>> filePath() {
        return Optional.ofNullable(this.filePath);
    }

    /**
     * Process hash list. When the value of the Type attribute is 1, the Hash attribute is required.
     * 
     */
    @Import(name="hash")
    private @Nullable Output<String> hash;

    /**
     * @return Process hash list. When the value of the Type attribute is 1, the Hash attribute is required.
     * 
     */
    public Optional<Output<String>> hash() {
        return Optional.ofNullable(this.hash);
    }

    /**
     * IP address. When the value of the Type attribute is 3, the Ip attribute is required.
     * 
     */
    @Import(name="ip")
    private @Nullable Output<String> ip;

    /**
     * @return IP address. When the value of the Type attribute is 3, the Ip attribute is required.
     * 
     */
    public Optional<Output<String>> ip() {
        return Optional.ofNullable(this.ip);
    }

    /**
     * The new file path to rename the file. When the value of the Type attribute is 7, the NewFilePath attribute is required.
     * 
     */
    @Import(name="newFilePath")
    private @Nullable Output<String> newFilePath;

    /**
     * @return The new file path to rename the file. When the value of the Type attribute is 7, the NewFilePath attribute is required.
     * 
     */
    public Optional<Output<String>> newFilePath() {
        return Optional.ofNullable(this.newFilePath);
    }

    /**
     * The parent command line.
     * 
     */
    @Import(name="parentCmdline")
    private @Nullable Output<String> parentCmdline;

    /**
     * @return The parent command line.
     * 
     */
    public Optional<Output<String>> parentCmdline() {
        return Optional.ofNullable(this.parentCmdline);
    }

    /**
     * Parent process path.
     * 
     */
    @Import(name="parentProcPath")
    private @Nullable Output<String> parentProcPath;

    /**
     * @return Parent process path.
     * 
     */
    public Optional<Output<String>> parentProcPath() {
        return Optional.ofNullable(this.parentProcPath);
    }

    /**
     * The operating system type. Value:
     * - **windows**:widows
     * - **linux**:linux
     * - **all**: all.
     * 
     */
    @Import(name="platform")
    private @Nullable Output<String> platform;

    /**
     * @return The operating system type. Value:
     * - **windows**:widows
     * - **linux**:linux
     * - **all**: all.
     * 
     */
    public Optional<Output<String>> platform() {
        return Optional.ofNullable(this.platform);
    }

    /**
     * The port number. When the value of the Type attribute is 3, the PortStr attribute is required. Value range: **1-65535**.
     * 
     */
    @Import(name="portStr")
    private @Nullable Output<String> portStr;

    /**
     * @return The port number. When the value of the Type attribute is 3, the PortStr attribute is required. Value range: **1-65535**.
     * 
     */
    public Optional<Output<String>> portStr() {
        return Optional.ofNullable(this.portStr);
    }

    /**
     * The process path. When the Type attribute is set to 2, 3, 4, 5, 6, or 7, the ProcPath attribute is required.
     * 
     */
    @Import(name="procPath")
    private @Nullable Output<String> procPath;

    /**
     * @return The process path. When the Type attribute is set to 2, 3, 4, 5, 6, or 7, the ProcPath attribute is required.
     * 
     */
    public Optional<Output<String>> procPath() {
        return Optional.ofNullable(this.procPath);
    }

    /**
     * The registry value. When the value of the Type attribute is 5, the RegistryKey attribute is required.
     * 
     */
    @Import(name="registryContent")
    private @Nullable Output<String> registryContent;

    /**
     * @return The registry value. When the value of the Type attribute is 5, the RegistryKey attribute is required.
     * 
     */
    public Optional<Output<String>> registryContent() {
        return Optional.ofNullable(this.registryContent);
    }

    /**
     * The registry key. When the value of the Type attribute is 5, the RegistryKey attribute is required.
     * 
     */
    @Import(name="registryKey")
    private @Nullable Output<String> registryKey;

    /**
     * @return The registry key. When the value of the Type attribute is 5, the RegistryKey attribute is required.
     * 
     */
    public Optional<Output<String>> registryKey() {
        return Optional.ofNullable(this.registryKey);
    }

    /**
     * The rule type. Value:
     * - **1**: Process hash
     * - **2**: command line
     * - **3**: Process network
     * - **4**: File reading and writing
     * - **5**: Operate the registry
     * - **6**: Load Dynamic Link Library
     * - **7**: File Rename.
     * 
     */
    @Import(name="type")
    private @Nullable Output<Integer> type;

    /**
     * @return The rule type. Value:
     * - **1**: Process hash
     * - **2**: command line
     * - **3**: Process network
     * - **4**: File reading and writing
     * - **5**: Operate the registry
     * - **6**: Load Dynamic Link Library
     * - **7**: File Rename.
     * 
     */
    public Optional<Output<Integer>> type() {
        return Optional.ofNullable(this.type);
    }

    private ClientUserDefineRuleState() {}

    private ClientUserDefineRuleState(ClientUserDefineRuleState $) {
        this.actionType = $.actionType;
        this.clientUserDefineRuleName = $.clientUserDefineRuleName;
        this.cmdline = $.cmdline;
        this.createTime = $.createTime;
        this.filePath = $.filePath;
        this.hash = $.hash;
        this.ip = $.ip;
        this.newFilePath = $.newFilePath;
        this.parentCmdline = $.parentCmdline;
        this.parentProcPath = $.parentProcPath;
        this.platform = $.platform;
        this.portStr = $.portStr;
        this.procPath = $.procPath;
        this.registryContent = $.registryContent;
        this.registryKey = $.registryKey;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ClientUserDefineRuleState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ClientUserDefineRuleState $;

        public Builder() {
            $ = new ClientUserDefineRuleState();
        }

        public Builder(ClientUserDefineRuleState defaults) {
            $ = new ClientUserDefineRuleState(Objects.requireNonNull(defaults));
        }

        /**
         * @param actionType The operation type. Value:
         * - **0**: plus White
         * - **1**: Plus Black.
         * 
         * @return builder
         * 
         */
        public Builder actionType(@Nullable Output<Integer> actionType) {
            $.actionType = actionType;
            return this;
        }

        /**
         * @param actionType The operation type. Value:
         * - **0**: plus White
         * - **1**: Plus Black.
         * 
         * @return builder
         * 
         */
        public Builder actionType(Integer actionType) {
            return actionType(Output.of(actionType));
        }

        /**
         * @param clientUserDefineRuleName The custom rule name.
         * 
         * @return builder
         * 
         */
        public Builder clientUserDefineRuleName(@Nullable Output<String> clientUserDefineRuleName) {
            $.clientUserDefineRuleName = clientUserDefineRuleName;
            return this;
        }

        /**
         * @param clientUserDefineRuleName The custom rule name.
         * 
         * @return builder
         * 
         */
        public Builder clientUserDefineRuleName(String clientUserDefineRuleName) {
            return clientUserDefineRuleName(Output.of(clientUserDefineRuleName));
        }

        /**
         * @param cmdline Command line. When the value of the Type attribute is 2, 3, 4, 5, 6, or 7, the command line field is required.
         * 
         * @return builder
         * 
         */
        public Builder cmdline(@Nullable Output<String> cmdline) {
            $.cmdline = cmdline;
            return this;
        }

        /**
         * @param cmdline Command line. When the value of the Type attribute is 2, 3, 4, 5, 6, or 7, the command line field is required.
         * 
         * @return builder
         * 
         */
        public Builder cmdline(String cmdline) {
            return cmdline(Output.of(cmdline));
        }

        /**
         * @param createTime The creation time of the resource.
         * 
         * @return builder
         * 
         */
        public Builder createTime(@Nullable Output<Integer> createTime) {
            $.createTime = createTime;
            return this;
        }

        /**
         * @param createTime The creation time of the resource.
         * 
         * @return builder
         * 
         */
        public Builder createTime(Integer createTime) {
            return createTime(Output.of(createTime));
        }

        /**
         * @param filePath The file path. When the value of the Type attribute is 4 or 6, 7, the FilePath field is required.
         * 
         * @return builder
         * 
         */
        public Builder filePath(@Nullable Output<String> filePath) {
            $.filePath = filePath;
            return this;
        }

        /**
         * @param filePath The file path. When the value of the Type attribute is 4 or 6, 7, the FilePath field is required.
         * 
         * @return builder
         * 
         */
        public Builder filePath(String filePath) {
            return filePath(Output.of(filePath));
        }

        /**
         * @param hash Process hash list. When the value of the Type attribute is 1, the Hash attribute is required.
         * 
         * @return builder
         * 
         */
        public Builder hash(@Nullable Output<String> hash) {
            $.hash = hash;
            return this;
        }

        /**
         * @param hash Process hash list. When the value of the Type attribute is 1, the Hash attribute is required.
         * 
         * @return builder
         * 
         */
        public Builder hash(String hash) {
            return hash(Output.of(hash));
        }

        /**
         * @param ip IP address. When the value of the Type attribute is 3, the Ip attribute is required.
         * 
         * @return builder
         * 
         */
        public Builder ip(@Nullable Output<String> ip) {
            $.ip = ip;
            return this;
        }

        /**
         * @param ip IP address. When the value of the Type attribute is 3, the Ip attribute is required.
         * 
         * @return builder
         * 
         */
        public Builder ip(String ip) {
            return ip(Output.of(ip));
        }

        /**
         * @param newFilePath The new file path to rename the file. When the value of the Type attribute is 7, the NewFilePath attribute is required.
         * 
         * @return builder
         * 
         */
        public Builder newFilePath(@Nullable Output<String> newFilePath) {
            $.newFilePath = newFilePath;
            return this;
        }

        /**
         * @param newFilePath The new file path to rename the file. When the value of the Type attribute is 7, the NewFilePath attribute is required.
         * 
         * @return builder
         * 
         */
        public Builder newFilePath(String newFilePath) {
            return newFilePath(Output.of(newFilePath));
        }

        /**
         * @param parentCmdline The parent command line.
         * 
         * @return builder
         * 
         */
        public Builder parentCmdline(@Nullable Output<String> parentCmdline) {
            $.parentCmdline = parentCmdline;
            return this;
        }

        /**
         * @param parentCmdline The parent command line.
         * 
         * @return builder
         * 
         */
        public Builder parentCmdline(String parentCmdline) {
            return parentCmdline(Output.of(parentCmdline));
        }

        /**
         * @param parentProcPath Parent process path.
         * 
         * @return builder
         * 
         */
        public Builder parentProcPath(@Nullable Output<String> parentProcPath) {
            $.parentProcPath = parentProcPath;
            return this;
        }

        /**
         * @param parentProcPath Parent process path.
         * 
         * @return builder
         * 
         */
        public Builder parentProcPath(String parentProcPath) {
            return parentProcPath(Output.of(parentProcPath));
        }

        /**
         * @param platform The operating system type. Value:
         * - **windows**:widows
         * - **linux**:linux
         * - **all**: all.
         * 
         * @return builder
         * 
         */
        public Builder platform(@Nullable Output<String> platform) {
            $.platform = platform;
            return this;
        }

        /**
         * @param platform The operating system type. Value:
         * - **windows**:widows
         * - **linux**:linux
         * - **all**: all.
         * 
         * @return builder
         * 
         */
        public Builder platform(String platform) {
            return platform(Output.of(platform));
        }

        /**
         * @param portStr The port number. When the value of the Type attribute is 3, the PortStr attribute is required. Value range: **1-65535**.
         * 
         * @return builder
         * 
         */
        public Builder portStr(@Nullable Output<String> portStr) {
            $.portStr = portStr;
            return this;
        }

        /**
         * @param portStr The port number. When the value of the Type attribute is 3, the PortStr attribute is required. Value range: **1-65535**.
         * 
         * @return builder
         * 
         */
        public Builder portStr(String portStr) {
            return portStr(Output.of(portStr));
        }

        /**
         * @param procPath The process path. When the Type attribute is set to 2, 3, 4, 5, 6, or 7, the ProcPath attribute is required.
         * 
         * @return builder
         * 
         */
        public Builder procPath(@Nullable Output<String> procPath) {
            $.procPath = procPath;
            return this;
        }

        /**
         * @param procPath The process path. When the Type attribute is set to 2, 3, 4, 5, 6, or 7, the ProcPath attribute is required.
         * 
         * @return builder
         * 
         */
        public Builder procPath(String procPath) {
            return procPath(Output.of(procPath));
        }

        /**
         * @param registryContent The registry value. When the value of the Type attribute is 5, the RegistryKey attribute is required.
         * 
         * @return builder
         * 
         */
        public Builder registryContent(@Nullable Output<String> registryContent) {
            $.registryContent = registryContent;
            return this;
        }

        /**
         * @param registryContent The registry value. When the value of the Type attribute is 5, the RegistryKey attribute is required.
         * 
         * @return builder
         * 
         */
        public Builder registryContent(String registryContent) {
            return registryContent(Output.of(registryContent));
        }

        /**
         * @param registryKey The registry key. When the value of the Type attribute is 5, the RegistryKey attribute is required.
         * 
         * @return builder
         * 
         */
        public Builder registryKey(@Nullable Output<String> registryKey) {
            $.registryKey = registryKey;
            return this;
        }

        /**
         * @param registryKey The registry key. When the value of the Type attribute is 5, the RegistryKey attribute is required.
         * 
         * @return builder
         * 
         */
        public Builder registryKey(String registryKey) {
            return registryKey(Output.of(registryKey));
        }

        /**
         * @param type The rule type. Value:
         * - **1**: Process hash
         * - **2**: command line
         * - **3**: Process network
         * - **4**: File reading and writing
         * - **5**: Operate the registry
         * - **6**: Load Dynamic Link Library
         * - **7**: File Rename.
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<Integer> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type The rule type. Value:
         * - **1**: Process hash
         * - **2**: command line
         * - **3**: Process network
         * - **4**: File reading and writing
         * - **5**: Operate the registry
         * - **6**: Load Dynamic Link Library
         * - **7**: File Rename.
         * 
         * @return builder
         * 
         */
        public Builder type(Integer type) {
            return type(Output.of(type));
        }

        public ClientUserDefineRuleState build() {
            return $;
        }
    }

}
