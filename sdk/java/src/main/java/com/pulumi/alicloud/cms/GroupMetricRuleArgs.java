// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.cms;

import com.pulumi.alicloud.cms.inputs.GroupMetricRuleEscalationsArgs;
import com.pulumi.alicloud.cms.inputs.GroupMetricRuleTargetArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GroupMetricRuleArgs extends com.pulumi.resources.ResourceArgs {

    public static final GroupMetricRuleArgs Empty = new GroupMetricRuleArgs();

    /**
     * The abbreviation of the service name.
     * 
     */
    @Import(name="category")
    private @Nullable Output<String> category;

    /**
     * @return The abbreviation of the service name.
     * 
     */
    public Optional<Output<String>> category() {
        return Optional.ofNullable(this.category);
    }

    /**
     * Alarm contact group.
     * 
     */
    @Import(name="contactGroups")
    private @Nullable Output<String> contactGroups;

    /**
     * @return Alarm contact group.
     * 
     */
    public Optional<Output<String>> contactGroups() {
        return Optional.ofNullable(this.contactGroups);
    }

    /**
     * The dimensions that specify the resources to be associated with the alert rule.
     * 
     */
    @Import(name="dimensions")
    private @Nullable Output<String> dimensions;

    /**
     * @return The dimensions that specify the resources to be associated with the alert rule.
     * 
     */
    public Optional<Output<String>> dimensions() {
        return Optional.ofNullable(this.dimensions);
    }

    /**
     * The time period during which the alert rule is effective.
     * 
     */
    @Import(name="effectiveInterval")
    private @Nullable Output<String> effectiveInterval;

    /**
     * @return The time period during which the alert rule is effective.
     * 
     */
    public Optional<Output<String>> effectiveInterval() {
        return Optional.ofNullable(this.effectiveInterval);
    }

    /**
     * The subject of the alert notification email.
     * 
     */
    @Import(name="emailSubject")
    private @Nullable Output<String> emailSubject;

    /**
     * @return The subject of the alert notification email.
     * 
     */
    public Optional<Output<String>> emailSubject() {
        return Optional.ofNullable(this.emailSubject);
    }

    /**
     * Alarm level. See `escalations` below.
     * 
     */
    @Import(name="escalations", required=true)
    private Output<GroupMetricRuleEscalationsArgs> escalations;

    /**
     * @return Alarm level. See `escalations` below.
     * 
     */
    public Output<GroupMetricRuleEscalationsArgs> escalations() {
        return this.escalations;
    }

    /**
     * The ID of the application group.
     * 
     */
    @Import(name="groupId", required=true)
    private Output<String> groupId;

    /**
     * @return The ID of the application group.
     * 
     */
    public Output<String> groupId() {
        return this.groupId;
    }

    /**
     * The name of the alert rule.
     * 
     */
    @Import(name="groupMetricRuleName", required=true)
    private Output<String> groupMetricRuleName;

    /**
     * @return The name of the alert rule.
     * 
     */
    public Output<String> groupMetricRuleName() {
        return this.groupMetricRuleName;
    }

    /**
     * The interval at which Cloud Monitor checks whether the alert rule is triggered. Unit: seconds.
     * 
     */
    @Import(name="interval")
    private @Nullable Output<String> interval;

    /**
     * @return The interval at which Cloud Monitor checks whether the alert rule is triggered. Unit: seconds.
     * 
     */
    public Optional<Output<String>> interval() {
        return Optional.ofNullable(this.interval);
    }

    /**
     * The name of the metric.
     * 
     */
    @Import(name="metricName", required=true)
    private Output<String> metricName;

    /**
     * @return The name of the metric.
     * 
     */
    public Output<String> metricName() {
        return this.metricName;
    }

    /**
     * The namespace of the service.
     * 
     */
    @Import(name="namespace", required=true)
    private Output<String> namespace;

    /**
     * @return The namespace of the service.
     * 
     */
    public Output<String> namespace() {
        return this.namespace;
    }

    /**
     * The time period during which the alert rule is ineffective.
     * 
     */
    @Import(name="noEffectiveInterval")
    private @Nullable Output<String> noEffectiveInterval;

    /**
     * @return The time period during which the alert rule is ineffective.
     * 
     */
    public Optional<Output<String>> noEffectiveInterval() {
        return Optional.ofNullable(this.noEffectiveInterval);
    }

    /**
     * The aggregation period of the monitoring data. Unit: seconds. The value is an integral multiple of 60. Default value: `300`.
     * 
     */
    @Import(name="period")
    private @Nullable Output<Integer> period;

    /**
     * @return The aggregation period of the monitoring data. Unit: seconds. The value is an integral multiple of 60. Default value: `300`.
     * 
     */
    public Optional<Output<Integer>> period() {
        return Optional.ofNullable(this.period);
    }

    /**
     * The ID of the alert rule.
     * 
     */
    @Import(name="ruleId", required=true)
    private Output<String> ruleId;

    /**
     * @return The ID of the alert rule.
     * 
     */
    public Output<String> ruleId() {
        return this.ruleId;
    }

    /**
     * The mute period during which new alerts are not reported even if the alert trigger conditions are met. Unit: seconds. Default value: `86400`, which is equivalent to one day.
     * 
     */
    @Import(name="silenceTime")
    private @Nullable Output<Integer> silenceTime;

    /**
     * @return The mute period during which new alerts are not reported even if the alert trigger conditions are met. Unit: seconds. Default value: `86400`, which is equivalent to one day.
     * 
     */
    public Optional<Output<Integer>> silenceTime() {
        return Optional.ofNullable(this.silenceTime);
    }

    /**
     * The information about the resource for which alerts are triggered. See `targets` below.
     * 
     */
    @Import(name="targets")
    private @Nullable Output<List<GroupMetricRuleTargetArgs>> targets;

    /**
     * @return The information about the resource for which alerts are triggered. See `targets` below.
     * 
     */
    public Optional<Output<List<GroupMetricRuleTargetArgs>>> targets() {
        return Optional.ofNullable(this.targets);
    }

    /**
     * The callback URL.
     * 
     */
    @Import(name="webhook")
    private @Nullable Output<String> webhook;

    /**
     * @return The callback URL.
     * 
     */
    public Optional<Output<String>> webhook() {
        return Optional.ofNullable(this.webhook);
    }

    private GroupMetricRuleArgs() {}

    private GroupMetricRuleArgs(GroupMetricRuleArgs $) {
        this.category = $.category;
        this.contactGroups = $.contactGroups;
        this.dimensions = $.dimensions;
        this.effectiveInterval = $.effectiveInterval;
        this.emailSubject = $.emailSubject;
        this.escalations = $.escalations;
        this.groupId = $.groupId;
        this.groupMetricRuleName = $.groupMetricRuleName;
        this.interval = $.interval;
        this.metricName = $.metricName;
        this.namespace = $.namespace;
        this.noEffectiveInterval = $.noEffectiveInterval;
        this.period = $.period;
        this.ruleId = $.ruleId;
        this.silenceTime = $.silenceTime;
        this.targets = $.targets;
        this.webhook = $.webhook;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GroupMetricRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GroupMetricRuleArgs $;

        public Builder() {
            $ = new GroupMetricRuleArgs();
        }

        public Builder(GroupMetricRuleArgs defaults) {
            $ = new GroupMetricRuleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param category The abbreviation of the service name.
         * 
         * @return builder
         * 
         */
        public Builder category(@Nullable Output<String> category) {
            $.category = category;
            return this;
        }

        /**
         * @param category The abbreviation of the service name.
         * 
         * @return builder
         * 
         */
        public Builder category(String category) {
            return category(Output.of(category));
        }

        /**
         * @param contactGroups Alarm contact group.
         * 
         * @return builder
         * 
         */
        public Builder contactGroups(@Nullable Output<String> contactGroups) {
            $.contactGroups = contactGroups;
            return this;
        }

        /**
         * @param contactGroups Alarm contact group.
         * 
         * @return builder
         * 
         */
        public Builder contactGroups(String contactGroups) {
            return contactGroups(Output.of(contactGroups));
        }

        /**
         * @param dimensions The dimensions that specify the resources to be associated with the alert rule.
         * 
         * @return builder
         * 
         */
        public Builder dimensions(@Nullable Output<String> dimensions) {
            $.dimensions = dimensions;
            return this;
        }

        /**
         * @param dimensions The dimensions that specify the resources to be associated with the alert rule.
         * 
         * @return builder
         * 
         */
        public Builder dimensions(String dimensions) {
            return dimensions(Output.of(dimensions));
        }

        /**
         * @param effectiveInterval The time period during which the alert rule is effective.
         * 
         * @return builder
         * 
         */
        public Builder effectiveInterval(@Nullable Output<String> effectiveInterval) {
            $.effectiveInterval = effectiveInterval;
            return this;
        }

        /**
         * @param effectiveInterval The time period during which the alert rule is effective.
         * 
         * @return builder
         * 
         */
        public Builder effectiveInterval(String effectiveInterval) {
            return effectiveInterval(Output.of(effectiveInterval));
        }

        /**
         * @param emailSubject The subject of the alert notification email.
         * 
         * @return builder
         * 
         */
        public Builder emailSubject(@Nullable Output<String> emailSubject) {
            $.emailSubject = emailSubject;
            return this;
        }

        /**
         * @param emailSubject The subject of the alert notification email.
         * 
         * @return builder
         * 
         */
        public Builder emailSubject(String emailSubject) {
            return emailSubject(Output.of(emailSubject));
        }

        /**
         * @param escalations Alarm level. See `escalations` below.
         * 
         * @return builder
         * 
         */
        public Builder escalations(Output<GroupMetricRuleEscalationsArgs> escalations) {
            $.escalations = escalations;
            return this;
        }

        /**
         * @param escalations Alarm level. See `escalations` below.
         * 
         * @return builder
         * 
         */
        public Builder escalations(GroupMetricRuleEscalationsArgs escalations) {
            return escalations(Output.of(escalations));
        }

        /**
         * @param groupId The ID of the application group.
         * 
         * @return builder
         * 
         */
        public Builder groupId(Output<String> groupId) {
            $.groupId = groupId;
            return this;
        }

        /**
         * @param groupId The ID of the application group.
         * 
         * @return builder
         * 
         */
        public Builder groupId(String groupId) {
            return groupId(Output.of(groupId));
        }

        /**
         * @param groupMetricRuleName The name of the alert rule.
         * 
         * @return builder
         * 
         */
        public Builder groupMetricRuleName(Output<String> groupMetricRuleName) {
            $.groupMetricRuleName = groupMetricRuleName;
            return this;
        }

        /**
         * @param groupMetricRuleName The name of the alert rule.
         * 
         * @return builder
         * 
         */
        public Builder groupMetricRuleName(String groupMetricRuleName) {
            return groupMetricRuleName(Output.of(groupMetricRuleName));
        }

        /**
         * @param interval The interval at which Cloud Monitor checks whether the alert rule is triggered. Unit: seconds.
         * 
         * @return builder
         * 
         */
        public Builder interval(@Nullable Output<String> interval) {
            $.interval = interval;
            return this;
        }

        /**
         * @param interval The interval at which Cloud Monitor checks whether the alert rule is triggered. Unit: seconds.
         * 
         * @return builder
         * 
         */
        public Builder interval(String interval) {
            return interval(Output.of(interval));
        }

        /**
         * @param metricName The name of the metric.
         * 
         * @return builder
         * 
         */
        public Builder metricName(Output<String> metricName) {
            $.metricName = metricName;
            return this;
        }

        /**
         * @param metricName The name of the metric.
         * 
         * @return builder
         * 
         */
        public Builder metricName(String metricName) {
            return metricName(Output.of(metricName));
        }

        /**
         * @param namespace The namespace of the service.
         * 
         * @return builder
         * 
         */
        public Builder namespace(Output<String> namespace) {
            $.namespace = namespace;
            return this;
        }

        /**
         * @param namespace The namespace of the service.
         * 
         * @return builder
         * 
         */
        public Builder namespace(String namespace) {
            return namespace(Output.of(namespace));
        }

        /**
         * @param noEffectiveInterval The time period during which the alert rule is ineffective.
         * 
         * @return builder
         * 
         */
        public Builder noEffectiveInterval(@Nullable Output<String> noEffectiveInterval) {
            $.noEffectiveInterval = noEffectiveInterval;
            return this;
        }

        /**
         * @param noEffectiveInterval The time period during which the alert rule is ineffective.
         * 
         * @return builder
         * 
         */
        public Builder noEffectiveInterval(String noEffectiveInterval) {
            return noEffectiveInterval(Output.of(noEffectiveInterval));
        }

        /**
         * @param period The aggregation period of the monitoring data. Unit: seconds. The value is an integral multiple of 60. Default value: `300`.
         * 
         * @return builder
         * 
         */
        public Builder period(@Nullable Output<Integer> period) {
            $.period = period;
            return this;
        }

        /**
         * @param period The aggregation period of the monitoring data. Unit: seconds. The value is an integral multiple of 60. Default value: `300`.
         * 
         * @return builder
         * 
         */
        public Builder period(Integer period) {
            return period(Output.of(period));
        }

        /**
         * @param ruleId The ID of the alert rule.
         * 
         * @return builder
         * 
         */
        public Builder ruleId(Output<String> ruleId) {
            $.ruleId = ruleId;
            return this;
        }

        /**
         * @param ruleId The ID of the alert rule.
         * 
         * @return builder
         * 
         */
        public Builder ruleId(String ruleId) {
            return ruleId(Output.of(ruleId));
        }

        /**
         * @param silenceTime The mute period during which new alerts are not reported even if the alert trigger conditions are met. Unit: seconds. Default value: `86400`, which is equivalent to one day.
         * 
         * @return builder
         * 
         */
        public Builder silenceTime(@Nullable Output<Integer> silenceTime) {
            $.silenceTime = silenceTime;
            return this;
        }

        /**
         * @param silenceTime The mute period during which new alerts are not reported even if the alert trigger conditions are met. Unit: seconds. Default value: `86400`, which is equivalent to one day.
         * 
         * @return builder
         * 
         */
        public Builder silenceTime(Integer silenceTime) {
            return silenceTime(Output.of(silenceTime));
        }

        /**
         * @param targets The information about the resource for which alerts are triggered. See `targets` below.
         * 
         * @return builder
         * 
         */
        public Builder targets(@Nullable Output<List<GroupMetricRuleTargetArgs>> targets) {
            $.targets = targets;
            return this;
        }

        /**
         * @param targets The information about the resource for which alerts are triggered. See `targets` below.
         * 
         * @return builder
         * 
         */
        public Builder targets(List<GroupMetricRuleTargetArgs> targets) {
            return targets(Output.of(targets));
        }

        /**
         * @param targets The information about the resource for which alerts are triggered. See `targets` below.
         * 
         * @return builder
         * 
         */
        public Builder targets(GroupMetricRuleTargetArgs... targets) {
            return targets(List.of(targets));
        }

        /**
         * @param webhook The callback URL.
         * 
         * @return builder
         * 
         */
        public Builder webhook(@Nullable Output<String> webhook) {
            $.webhook = webhook;
            return this;
        }

        /**
         * @param webhook The callback URL.
         * 
         * @return builder
         * 
         */
        public Builder webhook(String webhook) {
            return webhook(Output.of(webhook));
        }

        public GroupMetricRuleArgs build() {
            if ($.escalations == null) {
                throw new MissingRequiredPropertyException("GroupMetricRuleArgs", "escalations");
            }
            if ($.groupId == null) {
                throw new MissingRequiredPropertyException("GroupMetricRuleArgs", "groupId");
            }
            if ($.groupMetricRuleName == null) {
                throw new MissingRequiredPropertyException("GroupMetricRuleArgs", "groupMetricRuleName");
            }
            if ($.metricName == null) {
                throw new MissingRequiredPropertyException("GroupMetricRuleArgs", "metricName");
            }
            if ($.namespace == null) {
                throw new MissingRequiredPropertyException("GroupMetricRuleArgs", "namespace");
            }
            if ($.ruleId == null) {
                throw new MissingRequiredPropertyException("GroupMetricRuleArgs", "ruleId");
            }
            return $;
        }
    }

}
