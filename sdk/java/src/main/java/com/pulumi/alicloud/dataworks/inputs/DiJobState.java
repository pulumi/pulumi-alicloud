// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.dataworks.inputs;

import com.pulumi.alicloud.dataworks.inputs.DiJobDestinationDataSourceSettingArgs;
import com.pulumi.alicloud.dataworks.inputs.DiJobJobSettingsArgs;
import com.pulumi.alicloud.dataworks.inputs.DiJobResourceSettingsArgs;
import com.pulumi.alicloud.dataworks.inputs.DiJobSourceDataSourceSettingArgs;
import com.pulumi.alicloud.dataworks.inputs.DiJobTableMappingArgs;
import com.pulumi.alicloud.dataworks.inputs.DiJobTransformationRuleArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DiJobState extends com.pulumi.resources.ResourceArgs {

    public static final DiJobState Empty = new DiJobState();

    /**
     * Description of the integration task
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Description of the integration task
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Destination data source See `destination_data_source_settings` below.
     * 
     */
    @Import(name="destinationDataSourceSettings")
    private @Nullable Output<List<DiJobDestinationDataSourceSettingArgs>> destinationDataSourceSettings;

    /**
     * @return Destination data source See `destination_data_source_settings` below.
     * 
     */
    public Optional<Output<List<DiJobDestinationDataSourceSettingArgs>>> destinationDataSourceSettings() {
        return Optional.ofNullable(this.destinationDataSourceSettings);
    }

    /**
     * The type of the target data source. Enumerated values: Hologres and Hive.
     * 
     */
    @Import(name="destinationDataSourceType")
    private @Nullable Output<String> destinationDataSourceType;

    /**
     * @return The type of the target data source. Enumerated values: Hologres and Hive.
     * 
     */
    public Optional<Output<String>> destinationDataSourceType() {
        return Optional.ofNullable(this.destinationDataSourceType);
    }

    /**
     * Integration Task Id
     * 
     */
    @Import(name="diJobId")
    private @Nullable Output<Integer> diJobId;

    /**
     * @return Integration Task Id
     * 
     */
    public Optional<Output<Integer>> diJobId() {
        return Optional.ofNullable(this.diJobId);
    }

    /**
     * Task Name.
     * 
     */
    @Import(name="jobName")
    private @Nullable Output<String> jobName;

    /**
     * @return Task Name.
     * 
     */
    public Optional<Output<String>> jobName() {
        return Optional.ofNullable(this.jobName);
    }

    /**
     * The dimension settings of the synchronization task, including the DDL processing policy, the source and destination column data type mapping policy, and the task runtime parameters. See `job_settings` below.
     * 
     */
    @Import(name="jobSettings")
    private @Nullable Output<DiJobJobSettingsArgs> jobSettings;

    /**
     * @return The dimension settings of the synchronization task, including the DDL processing policy, the source and destination column data type mapping policy, and the task runtime parameters. See `job_settings` below.
     * 
     */
    public Optional<Output<DiJobJobSettingsArgs>> jobSettings() {
        return Optional.ofNullable(this.jobSettings);
    }

    /**
     * Synchronization type, optional enumeration values are:
     * 
     * Fulllandrealtimeincremental (full and real-time incremental)
     * 
     * RealtimeIncremental
     * 
     * Full
     * 
     * Offflineincremental
     * 
     * FullAndOfflineIncremental (full amount + offline increment)
     * 
     */
    @Import(name="migrationType")
    private @Nullable Output<String> migrationType;

    /**
     * @return Synchronization type, optional enumeration values are:
     * 
     * Fulllandrealtimeincremental (full and real-time incremental)
     * 
     * RealtimeIncremental
     * 
     * Full
     * 
     * Offflineincremental
     * 
     * FullAndOfflineIncremental (full amount + offline increment)
     * 
     */
    public Optional<Output<String>> migrationType() {
        return Optional.ofNullable(this.migrationType);
    }

    /**
     * Project Id
     * 
     */
    @Import(name="projectId")
    private @Nullable Output<Integer> projectId;

    /**
     * @return Project Id
     * 
     */
    public Optional<Output<Integer>> projectId() {
        return Optional.ofNullable(this.projectId);
    }

    /**
     * Resource Group Properties See `resource_settings` below.
     * 
     */
    @Import(name="resourceSettings")
    private @Nullable Output<DiJobResourceSettingsArgs> resourceSettings;

    /**
     * @return Resource Group Properties See `resource_settings` below.
     * 
     */
    public Optional<Output<DiJobResourceSettingsArgs>> resourceSettings() {
        return Optional.ofNullable(this.resourceSettings);
    }

    /**
     * Source data source setting List See `source_data_source_settings` below.
     * 
     */
    @Import(name="sourceDataSourceSettings")
    private @Nullable Output<List<DiJobSourceDataSourceSettingArgs>> sourceDataSourceSettings;

    /**
     * @return Source data source setting List See `source_data_source_settings` below.
     * 
     */
    public Optional<Output<List<DiJobSourceDataSourceSettingArgs>>> sourceDataSourceSettings() {
        return Optional.ofNullable(this.sourceDataSourceSettings);
    }

    /**
     * The type of the source data source. The enumerated value is MySQL.
     * 
     */
    @Import(name="sourceDataSourceType")
    private @Nullable Output<String> sourceDataSourceType;

    /**
     * @return The type of the source data source. The enumerated value is MySQL.
     * 
     */
    public Optional<Output<String>> sourceDataSourceType() {
        return Optional.ofNullable(this.sourceDataSourceType);
    }

    /**
     * Synchronize object transformation mapping list See `table_mappings` below.
     * 
     */
    @Import(name="tableMappings")
    private @Nullable Output<List<DiJobTableMappingArgs>> tableMappings;

    /**
     * @return Synchronize object transformation mapping list See `table_mappings` below.
     * 
     */
    public Optional<Output<List<DiJobTableMappingArgs>>> tableMappings() {
        return Optional.ofNullable(this.tableMappings);
    }

    /**
     * Definition list of synchronization object conversion rules See `transformation_rules` below.
     * 
     */
    @Import(name="transformationRules")
    private @Nullable Output<List<DiJobTransformationRuleArgs>> transformationRules;

    /**
     * @return Definition list of synchronization object conversion rules See `transformation_rules` below.
     * 
     */
    public Optional<Output<List<DiJobTransformationRuleArgs>>> transformationRules() {
        return Optional.ofNullable(this.transformationRules);
    }

    private DiJobState() {}

    private DiJobState(DiJobState $) {
        this.description = $.description;
        this.destinationDataSourceSettings = $.destinationDataSourceSettings;
        this.destinationDataSourceType = $.destinationDataSourceType;
        this.diJobId = $.diJobId;
        this.jobName = $.jobName;
        this.jobSettings = $.jobSettings;
        this.migrationType = $.migrationType;
        this.projectId = $.projectId;
        this.resourceSettings = $.resourceSettings;
        this.sourceDataSourceSettings = $.sourceDataSourceSettings;
        this.sourceDataSourceType = $.sourceDataSourceType;
        this.tableMappings = $.tableMappings;
        this.transformationRules = $.transformationRules;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DiJobState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DiJobState $;

        public Builder() {
            $ = new DiJobState();
        }

        public Builder(DiJobState defaults) {
            $ = new DiJobState(Objects.requireNonNull(defaults));
        }

        /**
         * @param description Description of the integration task
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Description of the integration task
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param destinationDataSourceSettings Destination data source See `destination_data_source_settings` below.
         * 
         * @return builder
         * 
         */
        public Builder destinationDataSourceSettings(@Nullable Output<List<DiJobDestinationDataSourceSettingArgs>> destinationDataSourceSettings) {
            $.destinationDataSourceSettings = destinationDataSourceSettings;
            return this;
        }

        /**
         * @param destinationDataSourceSettings Destination data source See `destination_data_source_settings` below.
         * 
         * @return builder
         * 
         */
        public Builder destinationDataSourceSettings(List<DiJobDestinationDataSourceSettingArgs> destinationDataSourceSettings) {
            return destinationDataSourceSettings(Output.of(destinationDataSourceSettings));
        }

        /**
         * @param destinationDataSourceSettings Destination data source See `destination_data_source_settings` below.
         * 
         * @return builder
         * 
         */
        public Builder destinationDataSourceSettings(DiJobDestinationDataSourceSettingArgs... destinationDataSourceSettings) {
            return destinationDataSourceSettings(List.of(destinationDataSourceSettings));
        }

        /**
         * @param destinationDataSourceType The type of the target data source. Enumerated values: Hologres and Hive.
         * 
         * @return builder
         * 
         */
        public Builder destinationDataSourceType(@Nullable Output<String> destinationDataSourceType) {
            $.destinationDataSourceType = destinationDataSourceType;
            return this;
        }

        /**
         * @param destinationDataSourceType The type of the target data source. Enumerated values: Hologres and Hive.
         * 
         * @return builder
         * 
         */
        public Builder destinationDataSourceType(String destinationDataSourceType) {
            return destinationDataSourceType(Output.of(destinationDataSourceType));
        }

        /**
         * @param diJobId Integration Task Id
         * 
         * @return builder
         * 
         */
        public Builder diJobId(@Nullable Output<Integer> diJobId) {
            $.diJobId = diJobId;
            return this;
        }

        /**
         * @param diJobId Integration Task Id
         * 
         * @return builder
         * 
         */
        public Builder diJobId(Integer diJobId) {
            return diJobId(Output.of(diJobId));
        }

        /**
         * @param jobName Task Name.
         * 
         * @return builder
         * 
         */
        public Builder jobName(@Nullable Output<String> jobName) {
            $.jobName = jobName;
            return this;
        }

        /**
         * @param jobName Task Name.
         * 
         * @return builder
         * 
         */
        public Builder jobName(String jobName) {
            return jobName(Output.of(jobName));
        }

        /**
         * @param jobSettings The dimension settings of the synchronization task, including the DDL processing policy, the source and destination column data type mapping policy, and the task runtime parameters. See `job_settings` below.
         * 
         * @return builder
         * 
         */
        public Builder jobSettings(@Nullable Output<DiJobJobSettingsArgs> jobSettings) {
            $.jobSettings = jobSettings;
            return this;
        }

        /**
         * @param jobSettings The dimension settings of the synchronization task, including the DDL processing policy, the source and destination column data type mapping policy, and the task runtime parameters. See `job_settings` below.
         * 
         * @return builder
         * 
         */
        public Builder jobSettings(DiJobJobSettingsArgs jobSettings) {
            return jobSettings(Output.of(jobSettings));
        }

        /**
         * @param migrationType Synchronization type, optional enumeration values are:
         * 
         * Fulllandrealtimeincremental (full and real-time incremental)
         * 
         * RealtimeIncremental
         * 
         * Full
         * 
         * Offflineincremental
         * 
         * FullAndOfflineIncremental (full amount + offline increment)
         * 
         * @return builder
         * 
         */
        public Builder migrationType(@Nullable Output<String> migrationType) {
            $.migrationType = migrationType;
            return this;
        }

        /**
         * @param migrationType Synchronization type, optional enumeration values are:
         * 
         * Fulllandrealtimeincremental (full and real-time incremental)
         * 
         * RealtimeIncremental
         * 
         * Full
         * 
         * Offflineincremental
         * 
         * FullAndOfflineIncremental (full amount + offline increment)
         * 
         * @return builder
         * 
         */
        public Builder migrationType(String migrationType) {
            return migrationType(Output.of(migrationType));
        }

        /**
         * @param projectId Project Id
         * 
         * @return builder
         * 
         */
        public Builder projectId(@Nullable Output<Integer> projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param projectId Project Id
         * 
         * @return builder
         * 
         */
        public Builder projectId(Integer projectId) {
            return projectId(Output.of(projectId));
        }

        /**
         * @param resourceSettings Resource Group Properties See `resource_settings` below.
         * 
         * @return builder
         * 
         */
        public Builder resourceSettings(@Nullable Output<DiJobResourceSettingsArgs> resourceSettings) {
            $.resourceSettings = resourceSettings;
            return this;
        }

        /**
         * @param resourceSettings Resource Group Properties See `resource_settings` below.
         * 
         * @return builder
         * 
         */
        public Builder resourceSettings(DiJobResourceSettingsArgs resourceSettings) {
            return resourceSettings(Output.of(resourceSettings));
        }

        /**
         * @param sourceDataSourceSettings Source data source setting List See `source_data_source_settings` below.
         * 
         * @return builder
         * 
         */
        public Builder sourceDataSourceSettings(@Nullable Output<List<DiJobSourceDataSourceSettingArgs>> sourceDataSourceSettings) {
            $.sourceDataSourceSettings = sourceDataSourceSettings;
            return this;
        }

        /**
         * @param sourceDataSourceSettings Source data source setting List See `source_data_source_settings` below.
         * 
         * @return builder
         * 
         */
        public Builder sourceDataSourceSettings(List<DiJobSourceDataSourceSettingArgs> sourceDataSourceSettings) {
            return sourceDataSourceSettings(Output.of(sourceDataSourceSettings));
        }

        /**
         * @param sourceDataSourceSettings Source data source setting List See `source_data_source_settings` below.
         * 
         * @return builder
         * 
         */
        public Builder sourceDataSourceSettings(DiJobSourceDataSourceSettingArgs... sourceDataSourceSettings) {
            return sourceDataSourceSettings(List.of(sourceDataSourceSettings));
        }

        /**
         * @param sourceDataSourceType The type of the source data source. The enumerated value is MySQL.
         * 
         * @return builder
         * 
         */
        public Builder sourceDataSourceType(@Nullable Output<String> sourceDataSourceType) {
            $.sourceDataSourceType = sourceDataSourceType;
            return this;
        }

        /**
         * @param sourceDataSourceType The type of the source data source. The enumerated value is MySQL.
         * 
         * @return builder
         * 
         */
        public Builder sourceDataSourceType(String sourceDataSourceType) {
            return sourceDataSourceType(Output.of(sourceDataSourceType));
        }

        /**
         * @param tableMappings Synchronize object transformation mapping list See `table_mappings` below.
         * 
         * @return builder
         * 
         */
        public Builder tableMappings(@Nullable Output<List<DiJobTableMappingArgs>> tableMappings) {
            $.tableMappings = tableMappings;
            return this;
        }

        /**
         * @param tableMappings Synchronize object transformation mapping list See `table_mappings` below.
         * 
         * @return builder
         * 
         */
        public Builder tableMappings(List<DiJobTableMappingArgs> tableMappings) {
            return tableMappings(Output.of(tableMappings));
        }

        /**
         * @param tableMappings Synchronize object transformation mapping list See `table_mappings` below.
         * 
         * @return builder
         * 
         */
        public Builder tableMappings(DiJobTableMappingArgs... tableMappings) {
            return tableMappings(List.of(tableMappings));
        }

        /**
         * @param transformationRules Definition list of synchronization object conversion rules See `transformation_rules` below.
         * 
         * @return builder
         * 
         */
        public Builder transformationRules(@Nullable Output<List<DiJobTransformationRuleArgs>> transformationRules) {
            $.transformationRules = transformationRules;
            return this;
        }

        /**
         * @param transformationRules Definition list of synchronization object conversion rules See `transformation_rules` below.
         * 
         * @return builder
         * 
         */
        public Builder transformationRules(List<DiJobTransformationRuleArgs> transformationRules) {
            return transformationRules(Output.of(transformationRules));
        }

        /**
         * @param transformationRules Definition list of synchronization object conversion rules See `transformation_rules` below.
         * 
         * @return builder
         * 
         */
        public Builder transformationRules(DiJobTransformationRuleArgs... transformationRules) {
            return transformationRules(List.of(transformationRules));
        }

        public DiJobState build() {
            return $;
        }
    }

}
