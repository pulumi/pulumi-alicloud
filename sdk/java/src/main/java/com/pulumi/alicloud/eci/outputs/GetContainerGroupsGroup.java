// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.eci.outputs;

import com.pulumi.alicloud.eci.outputs.GetContainerGroupsGroupContainer;
import com.pulumi.alicloud.eci.outputs.GetContainerGroupsGroupDnsConfig;
import com.pulumi.alicloud.eci.outputs.GetContainerGroupsGroupEciSecurityContext;
import com.pulumi.alicloud.eci.outputs.GetContainerGroupsGroupEvent;
import com.pulumi.alicloud.eci.outputs.GetContainerGroupsGroupHostAlias;
import com.pulumi.alicloud.eci.outputs.GetContainerGroupsGroupInitContainer;
import com.pulumi.alicloud.eci.outputs.GetContainerGroupsGroupVolume;
import com.pulumi.core.annotations.CustomType;
import java.lang.Double;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetContainerGroupsGroup {
    /**
     * @return The id if ContainerGroup.
     * 
     */
    private String containerGroupId;
    /**
     * @return The name of ContainerGroup.
     * 
     */
    private String containerGroupName;
    /**
     * @return A list of containers. Each element contains the following attributes:
     * 
     */
    private List<GetContainerGroupsGroupContainer> containers;
    /**
     * @return The amount of CPU resources allocated to the container.
     * 
     */
    private Double cpu;
    private Integer discount;
    /**
     * @return The DNS settings.
     * 
     */
    private List<GetContainerGroupsGroupDnsConfig> dnsConfigs;
    /**
     * @return The security context of the container group.
     * 
     */
    private List<GetContainerGroupsGroupEciSecurityContext> eciSecurityContexts;
    /**
     * @return The ID of the ENI instance.
     * 
     */
    private String eniInstanceId;
    /**
     * @return The events of the container group. Maximum: `50`.
     * 
     */
    private List<GetContainerGroupsGroupEvent> events;
    /**
     * @return The time when the container group failed to run due to overdue payments. The timestamp follows the UTC and RFC3339 formats.
     * 
     */
    private String expiredTime;
    /**
     * @return The time when the container failed to run tasks. The timestamp follows the UTC and RFC3339 formats.
     * 
     */
    private String failedTime;
    /**
     * @return The mapping between host names and IP addresses for a container in the container group.
     * 
     */
    private List<GetContainerGroupsGroupHostAlias> hostAliases;
    /**
     * @return The ID of the Container Group.
     * 
     */
    private String id;
    /**
     * @return A list of init containers. Each element contains the following attributes:
     * 
     */
    private List<GetContainerGroupsGroupInitContainer> initContainers;
    /**
     * @return The type of the ECS instance.
     * 
     */
    private String instanceType;
    /**
     * @return The public IP address of the container group.
     * 
     */
    private String internetIp;
    /**
     * @return The internal IP address of the container group.
     * 
     */
    private String intranetIp;
    /**
     * @return The IPv6 address.
     * 
     */
    private String ipv6Address;
    /**
     * @return The amount of memory resources allocated to the container group.
     * 
     */
    private Double memory;
    /**
     * @return The RAM role that the container group assumes. ECI and ECS share the same RAM role.
     * 
     */
    private String ramRoleName;
    /**
     * @return The ID of the resource group to which the container group belongs. If you have not specified a resource group for the container group, it is added to the default resource group.
     * 
     */
    private String resourceGroupId;
    /**
     * @return The restart policy of the container group.
     * 
     */
    private String restartPolicy;
    /**
     * @return The ID of the security group.
     * 
     */
    private String securityGroupId;
    /**
     * @return The status of container.
     * 
     */
    private String status;
    /**
     * @return The time when all containers in the container group completed running the specified tasks. The timestamp follows the UTC and RFC 3339 formats. For example, 2018-08-02T15:00:00Z.
     * 
     */
    private String succeededTime;
    /**
     * @return The tags attached to the container group. Each tag is a key-value pair. You can attach up to 20 tags to a container group.
     * 
     */
    private Map<String,Object> tags;
    /**
     * @return The information about the mounted volume. You can mount up to 20 volumes.
     * 
     */
    private List<GetContainerGroupsGroupVolume> volumes;
    /**
     * @return The if of vpc.
     * 
     */
    private String vpcId;
    /**
     * @return The vswitch id.
     * 
     */
    private String vswitchId;
    /**
     * @return The IDs of the zones where the container groups are deployed. If this parameter is not set, the system automatically selects the zones. By default, no value is specified.
     * 
     */
    private String zoneId;

    private GetContainerGroupsGroup() {}
    /**
     * @return The id if ContainerGroup.
     * 
     */
    public String containerGroupId() {
        return this.containerGroupId;
    }
    /**
     * @return The name of ContainerGroup.
     * 
     */
    public String containerGroupName() {
        return this.containerGroupName;
    }
    /**
     * @return A list of containers. Each element contains the following attributes:
     * 
     */
    public List<GetContainerGroupsGroupContainer> containers() {
        return this.containers;
    }
    /**
     * @return The amount of CPU resources allocated to the container.
     * 
     */
    public Double cpu() {
        return this.cpu;
    }
    public Integer discount() {
        return this.discount;
    }
    /**
     * @return The DNS settings.
     * 
     */
    public List<GetContainerGroupsGroupDnsConfig> dnsConfigs() {
        return this.dnsConfigs;
    }
    /**
     * @return The security context of the container group.
     * 
     */
    public List<GetContainerGroupsGroupEciSecurityContext> eciSecurityContexts() {
        return this.eciSecurityContexts;
    }
    /**
     * @return The ID of the ENI instance.
     * 
     */
    public String eniInstanceId() {
        return this.eniInstanceId;
    }
    /**
     * @return The events of the container group. Maximum: `50`.
     * 
     */
    public List<GetContainerGroupsGroupEvent> events() {
        return this.events;
    }
    /**
     * @return The time when the container group failed to run due to overdue payments. The timestamp follows the UTC and RFC3339 formats.
     * 
     */
    public String expiredTime() {
        return this.expiredTime;
    }
    /**
     * @return The time when the container failed to run tasks. The timestamp follows the UTC and RFC3339 formats.
     * 
     */
    public String failedTime() {
        return this.failedTime;
    }
    /**
     * @return The mapping between host names and IP addresses for a container in the container group.
     * 
     */
    public List<GetContainerGroupsGroupHostAlias> hostAliases() {
        return this.hostAliases;
    }
    /**
     * @return The ID of the Container Group.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return A list of init containers. Each element contains the following attributes:
     * 
     */
    public List<GetContainerGroupsGroupInitContainer> initContainers() {
        return this.initContainers;
    }
    /**
     * @return The type of the ECS instance.
     * 
     */
    public String instanceType() {
        return this.instanceType;
    }
    /**
     * @return The public IP address of the container group.
     * 
     */
    public String internetIp() {
        return this.internetIp;
    }
    /**
     * @return The internal IP address of the container group.
     * 
     */
    public String intranetIp() {
        return this.intranetIp;
    }
    /**
     * @return The IPv6 address.
     * 
     */
    public String ipv6Address() {
        return this.ipv6Address;
    }
    /**
     * @return The amount of memory resources allocated to the container group.
     * 
     */
    public Double memory() {
        return this.memory;
    }
    /**
     * @return The RAM role that the container group assumes. ECI and ECS share the same RAM role.
     * 
     */
    public String ramRoleName() {
        return this.ramRoleName;
    }
    /**
     * @return The ID of the resource group to which the container group belongs. If you have not specified a resource group for the container group, it is added to the default resource group.
     * 
     */
    public String resourceGroupId() {
        return this.resourceGroupId;
    }
    /**
     * @return The restart policy of the container group.
     * 
     */
    public String restartPolicy() {
        return this.restartPolicy;
    }
    /**
     * @return The ID of the security group.
     * 
     */
    public String securityGroupId() {
        return this.securityGroupId;
    }
    /**
     * @return The status of container.
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return The time when all containers in the container group completed running the specified tasks. The timestamp follows the UTC and RFC 3339 formats. For example, 2018-08-02T15:00:00Z.
     * 
     */
    public String succeededTime() {
        return this.succeededTime;
    }
    /**
     * @return The tags attached to the container group. Each tag is a key-value pair. You can attach up to 20 tags to a container group.
     * 
     */
    public Map<String,Object> tags() {
        return this.tags;
    }
    /**
     * @return The information about the mounted volume. You can mount up to 20 volumes.
     * 
     */
    public List<GetContainerGroupsGroupVolume> volumes() {
        return this.volumes;
    }
    /**
     * @return The if of vpc.
     * 
     */
    public String vpcId() {
        return this.vpcId;
    }
    /**
     * @return The vswitch id.
     * 
     */
    public String vswitchId() {
        return this.vswitchId;
    }
    /**
     * @return The IDs of the zones where the container groups are deployed. If this parameter is not set, the system automatically selects the zones. By default, no value is specified.
     * 
     */
    public String zoneId() {
        return this.zoneId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetContainerGroupsGroup defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String containerGroupId;
        private String containerGroupName;
        private List<GetContainerGroupsGroupContainer> containers;
        private Double cpu;
        private Integer discount;
        private List<GetContainerGroupsGroupDnsConfig> dnsConfigs;
        private List<GetContainerGroupsGroupEciSecurityContext> eciSecurityContexts;
        private String eniInstanceId;
        private List<GetContainerGroupsGroupEvent> events;
        private String expiredTime;
        private String failedTime;
        private List<GetContainerGroupsGroupHostAlias> hostAliases;
        private String id;
        private List<GetContainerGroupsGroupInitContainer> initContainers;
        private String instanceType;
        private String internetIp;
        private String intranetIp;
        private String ipv6Address;
        private Double memory;
        private String ramRoleName;
        private String resourceGroupId;
        private String restartPolicy;
        private String securityGroupId;
        private String status;
        private String succeededTime;
        private Map<String,Object> tags;
        private List<GetContainerGroupsGroupVolume> volumes;
        private String vpcId;
        private String vswitchId;
        private String zoneId;
        public Builder() {}
        public Builder(GetContainerGroupsGroup defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.containerGroupId = defaults.containerGroupId;
    	      this.containerGroupName = defaults.containerGroupName;
    	      this.containers = defaults.containers;
    	      this.cpu = defaults.cpu;
    	      this.discount = defaults.discount;
    	      this.dnsConfigs = defaults.dnsConfigs;
    	      this.eciSecurityContexts = defaults.eciSecurityContexts;
    	      this.eniInstanceId = defaults.eniInstanceId;
    	      this.events = defaults.events;
    	      this.expiredTime = defaults.expiredTime;
    	      this.failedTime = defaults.failedTime;
    	      this.hostAliases = defaults.hostAliases;
    	      this.id = defaults.id;
    	      this.initContainers = defaults.initContainers;
    	      this.instanceType = defaults.instanceType;
    	      this.internetIp = defaults.internetIp;
    	      this.intranetIp = defaults.intranetIp;
    	      this.ipv6Address = defaults.ipv6Address;
    	      this.memory = defaults.memory;
    	      this.ramRoleName = defaults.ramRoleName;
    	      this.resourceGroupId = defaults.resourceGroupId;
    	      this.restartPolicy = defaults.restartPolicy;
    	      this.securityGroupId = defaults.securityGroupId;
    	      this.status = defaults.status;
    	      this.succeededTime = defaults.succeededTime;
    	      this.tags = defaults.tags;
    	      this.volumes = defaults.volumes;
    	      this.vpcId = defaults.vpcId;
    	      this.vswitchId = defaults.vswitchId;
    	      this.zoneId = defaults.zoneId;
        }

        @CustomType.Setter
        public Builder containerGroupId(String containerGroupId) {
            this.containerGroupId = Objects.requireNonNull(containerGroupId);
            return this;
        }
        @CustomType.Setter
        public Builder containerGroupName(String containerGroupName) {
            this.containerGroupName = Objects.requireNonNull(containerGroupName);
            return this;
        }
        @CustomType.Setter
        public Builder containers(List<GetContainerGroupsGroupContainer> containers) {
            this.containers = Objects.requireNonNull(containers);
            return this;
        }
        public Builder containers(GetContainerGroupsGroupContainer... containers) {
            return containers(List.of(containers));
        }
        @CustomType.Setter
        public Builder cpu(Double cpu) {
            this.cpu = Objects.requireNonNull(cpu);
            return this;
        }
        @CustomType.Setter
        public Builder discount(Integer discount) {
            this.discount = Objects.requireNonNull(discount);
            return this;
        }
        @CustomType.Setter
        public Builder dnsConfigs(List<GetContainerGroupsGroupDnsConfig> dnsConfigs) {
            this.dnsConfigs = Objects.requireNonNull(dnsConfigs);
            return this;
        }
        public Builder dnsConfigs(GetContainerGroupsGroupDnsConfig... dnsConfigs) {
            return dnsConfigs(List.of(dnsConfigs));
        }
        @CustomType.Setter
        public Builder eciSecurityContexts(List<GetContainerGroupsGroupEciSecurityContext> eciSecurityContexts) {
            this.eciSecurityContexts = Objects.requireNonNull(eciSecurityContexts);
            return this;
        }
        public Builder eciSecurityContexts(GetContainerGroupsGroupEciSecurityContext... eciSecurityContexts) {
            return eciSecurityContexts(List.of(eciSecurityContexts));
        }
        @CustomType.Setter
        public Builder eniInstanceId(String eniInstanceId) {
            this.eniInstanceId = Objects.requireNonNull(eniInstanceId);
            return this;
        }
        @CustomType.Setter
        public Builder events(List<GetContainerGroupsGroupEvent> events) {
            this.events = Objects.requireNonNull(events);
            return this;
        }
        public Builder events(GetContainerGroupsGroupEvent... events) {
            return events(List.of(events));
        }
        @CustomType.Setter
        public Builder expiredTime(String expiredTime) {
            this.expiredTime = Objects.requireNonNull(expiredTime);
            return this;
        }
        @CustomType.Setter
        public Builder failedTime(String failedTime) {
            this.failedTime = Objects.requireNonNull(failedTime);
            return this;
        }
        @CustomType.Setter
        public Builder hostAliases(List<GetContainerGroupsGroupHostAlias> hostAliases) {
            this.hostAliases = Objects.requireNonNull(hostAliases);
            return this;
        }
        public Builder hostAliases(GetContainerGroupsGroupHostAlias... hostAliases) {
            return hostAliases(List.of(hostAliases));
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder initContainers(List<GetContainerGroupsGroupInitContainer> initContainers) {
            this.initContainers = Objects.requireNonNull(initContainers);
            return this;
        }
        public Builder initContainers(GetContainerGroupsGroupInitContainer... initContainers) {
            return initContainers(List.of(initContainers));
        }
        @CustomType.Setter
        public Builder instanceType(String instanceType) {
            this.instanceType = Objects.requireNonNull(instanceType);
            return this;
        }
        @CustomType.Setter
        public Builder internetIp(String internetIp) {
            this.internetIp = Objects.requireNonNull(internetIp);
            return this;
        }
        @CustomType.Setter
        public Builder intranetIp(String intranetIp) {
            this.intranetIp = Objects.requireNonNull(intranetIp);
            return this;
        }
        @CustomType.Setter
        public Builder ipv6Address(String ipv6Address) {
            this.ipv6Address = Objects.requireNonNull(ipv6Address);
            return this;
        }
        @CustomType.Setter
        public Builder memory(Double memory) {
            this.memory = Objects.requireNonNull(memory);
            return this;
        }
        @CustomType.Setter
        public Builder ramRoleName(String ramRoleName) {
            this.ramRoleName = Objects.requireNonNull(ramRoleName);
            return this;
        }
        @CustomType.Setter
        public Builder resourceGroupId(String resourceGroupId) {
            this.resourceGroupId = Objects.requireNonNull(resourceGroupId);
            return this;
        }
        @CustomType.Setter
        public Builder restartPolicy(String restartPolicy) {
            this.restartPolicy = Objects.requireNonNull(restartPolicy);
            return this;
        }
        @CustomType.Setter
        public Builder securityGroupId(String securityGroupId) {
            this.securityGroupId = Objects.requireNonNull(securityGroupId);
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            this.status = Objects.requireNonNull(status);
            return this;
        }
        @CustomType.Setter
        public Builder succeededTime(String succeededTime) {
            this.succeededTime = Objects.requireNonNull(succeededTime);
            return this;
        }
        @CustomType.Setter
        public Builder tags(Map<String,Object> tags) {
            this.tags = Objects.requireNonNull(tags);
            return this;
        }
        @CustomType.Setter
        public Builder volumes(List<GetContainerGroupsGroupVolume> volumes) {
            this.volumes = Objects.requireNonNull(volumes);
            return this;
        }
        public Builder volumes(GetContainerGroupsGroupVolume... volumes) {
            return volumes(List.of(volumes));
        }
        @CustomType.Setter
        public Builder vpcId(String vpcId) {
            this.vpcId = Objects.requireNonNull(vpcId);
            return this;
        }
        @CustomType.Setter
        public Builder vswitchId(String vswitchId) {
            this.vswitchId = Objects.requireNonNull(vswitchId);
            return this;
        }
        @CustomType.Setter
        public Builder zoneId(String zoneId) {
            this.zoneId = Objects.requireNonNull(zoneId);
            return this;
        }
        public GetContainerGroupsGroup build() {
            final var o = new GetContainerGroupsGroup();
            o.containerGroupId = containerGroupId;
            o.containerGroupName = containerGroupName;
            o.containers = containers;
            o.cpu = cpu;
            o.discount = discount;
            o.dnsConfigs = dnsConfigs;
            o.eciSecurityContexts = eciSecurityContexts;
            o.eniInstanceId = eniInstanceId;
            o.events = events;
            o.expiredTime = expiredTime;
            o.failedTime = failedTime;
            o.hostAliases = hostAliases;
            o.id = id;
            o.initContainers = initContainers;
            o.instanceType = instanceType;
            o.internetIp = internetIp;
            o.intranetIp = intranetIp;
            o.ipv6Address = ipv6Address;
            o.memory = memory;
            o.ramRoleName = ramRoleName;
            o.resourceGroupId = resourceGroupId;
            o.restartPolicy = restartPolicy;
            o.securityGroupId = securityGroupId;
            o.status = status;
            o.succeededTime = succeededTime;
            o.tags = tags;
            o.volumes = volumes;
            o.vpcId = vpcId;
            o.vswitchId = vswitchId;
            o.zoneId = zoneId;
            return o;
        }
    }
}
