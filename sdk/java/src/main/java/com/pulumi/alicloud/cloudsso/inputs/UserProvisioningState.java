// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.cloudsso.inputs;

import com.pulumi.alicloud.cloudsso.inputs.UserProvisioningUserProvisioningStatisticArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class UserProvisioningState extends com.pulumi.resources.ResourceArgs {

    public static final UserProvisioningState Empty = new UserProvisioningState();

    /**
     * The creation time of the synchronization
     * 
     */
    @Import(name="createTime")
    private @Nullable Output<String> createTime;

    /**
     * @return The creation time of the synchronization
     * 
     */
    public Optional<Output<String>> createTime() {
        return Optional.ofNullable(this.createTime);
    }

    /**
     * The processing policy for users who have been synchronized when deleting synchronization
     * 
     */
    @Import(name="deletionStrategy")
    private @Nullable Output<String> deletionStrategy;

    /**
     * @return The processing policy for users who have been synchronized when deleting synchronization
     * 
     */
    public Optional<Output<String>> deletionStrategy() {
        return Optional.ofNullable(this.deletionStrategy);
    }

    /**
     * Description of User Synchronization
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Description of User Synchronization
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The ID of the directory to which the synchronization belongs
     * 
     */
    @Import(name="directoryId")
    private @Nullable Output<String> directoryId;

    /**
     * @return The ID of the directory to which the synchronization belongs
     * 
     */
    public Optional<Output<String>> directoryId() {
        return Optional.ofNullable(this.directoryId);
    }

    /**
     * Processing Policy for Synchronization Conflicts
     * 
     */
    @Import(name="duplicationStrategy")
    private @Nullable Output<String> duplicationStrategy;

    /**
     * @return Processing Policy for Synchronization Conflicts
     * 
     */
    public Optional<Output<String>> duplicationStrategy() {
        return Optional.ofNullable(this.duplicationStrategy);
    }

    /**
     * The ID of the CloudSSO user/group associated with the synchronization.
     * 
     */
    @Import(name="principalId")
    private @Nullable Output<String> principalId;

    /**
     * @return The ID of the CloudSSO user/group associated with the synchronization.
     * 
     */
    public Optional<Output<String>> principalId() {
        return Optional.ofNullable(this.principalId);
    }

    /**
     * The ID of the CloudSSO user/group associated with the synchronization.
     * 
     */
    @Import(name="principalType")
    private @Nullable Output<String> principalType;

    /**
     * @return The ID of the CloudSSO user/group associated with the synchronization.
     * 
     */
    public Optional<Output<String>> principalType() {
        return Optional.ofNullable(this.principalType);
    }

    /**
     * The status of the resource
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return The status of the resource
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * The ID of the destination associated with the synchronization.
     * 
     */
    @Import(name="targetId")
    private @Nullable Output<String> targetId;

    /**
     * @return The ID of the destination associated with the synchronization.
     * 
     */
    public Optional<Output<String>> targetId() {
        return Optional.ofNullable(this.targetId);
    }

    /**
     * The target type associated with the synchronization
     * 
     */
    @Import(name="targetType")
    private @Nullable Output<String> targetType;

    /**
     * @return The target type associated with the synchronization
     * 
     */
    public Optional<Output<String>> targetType() {
        return Optional.ofNullable(this.targetType);
    }

    /**
     * The first ID of the resource
     * 
     */
    @Import(name="userProvisioningId")
    private @Nullable Output<String> userProvisioningId;

    /**
     * @return The first ID of the resource
     * 
     */
    public Optional<Output<String>> userProvisioningId() {
        return Optional.ofNullable(this.userProvisioningId);
    }

    /**
     * User Provisioning statistics
     * 
     */
    @Import(name="userProvisioningStatistics")
    private @Nullable Output<List<UserProvisioningUserProvisioningStatisticArgs>> userProvisioningStatistics;

    /**
     * @return User Provisioning statistics
     * 
     */
    public Optional<Output<List<UserProvisioningUserProvisioningStatisticArgs>>> userProvisioningStatistics() {
        return Optional.ofNullable(this.userProvisioningStatistics);
    }

    private UserProvisioningState() {}

    private UserProvisioningState(UserProvisioningState $) {
        this.createTime = $.createTime;
        this.deletionStrategy = $.deletionStrategy;
        this.description = $.description;
        this.directoryId = $.directoryId;
        this.duplicationStrategy = $.duplicationStrategy;
        this.principalId = $.principalId;
        this.principalType = $.principalType;
        this.status = $.status;
        this.targetId = $.targetId;
        this.targetType = $.targetType;
        this.userProvisioningId = $.userProvisioningId;
        this.userProvisioningStatistics = $.userProvisioningStatistics;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(UserProvisioningState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private UserProvisioningState $;

        public Builder() {
            $ = new UserProvisioningState();
        }

        public Builder(UserProvisioningState defaults) {
            $ = new UserProvisioningState(Objects.requireNonNull(defaults));
        }

        /**
         * @param createTime The creation time of the synchronization
         * 
         * @return builder
         * 
         */
        public Builder createTime(@Nullable Output<String> createTime) {
            $.createTime = createTime;
            return this;
        }

        /**
         * @param createTime The creation time of the synchronization
         * 
         * @return builder
         * 
         */
        public Builder createTime(String createTime) {
            return createTime(Output.of(createTime));
        }

        /**
         * @param deletionStrategy The processing policy for users who have been synchronized when deleting synchronization
         * 
         * @return builder
         * 
         */
        public Builder deletionStrategy(@Nullable Output<String> deletionStrategy) {
            $.deletionStrategy = deletionStrategy;
            return this;
        }

        /**
         * @param deletionStrategy The processing policy for users who have been synchronized when deleting synchronization
         * 
         * @return builder
         * 
         */
        public Builder deletionStrategy(String deletionStrategy) {
            return deletionStrategy(Output.of(deletionStrategy));
        }

        /**
         * @param description Description of User Synchronization
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Description of User Synchronization
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param directoryId The ID of the directory to which the synchronization belongs
         * 
         * @return builder
         * 
         */
        public Builder directoryId(@Nullable Output<String> directoryId) {
            $.directoryId = directoryId;
            return this;
        }

        /**
         * @param directoryId The ID of the directory to which the synchronization belongs
         * 
         * @return builder
         * 
         */
        public Builder directoryId(String directoryId) {
            return directoryId(Output.of(directoryId));
        }

        /**
         * @param duplicationStrategy Processing Policy for Synchronization Conflicts
         * 
         * @return builder
         * 
         */
        public Builder duplicationStrategy(@Nullable Output<String> duplicationStrategy) {
            $.duplicationStrategy = duplicationStrategy;
            return this;
        }

        /**
         * @param duplicationStrategy Processing Policy for Synchronization Conflicts
         * 
         * @return builder
         * 
         */
        public Builder duplicationStrategy(String duplicationStrategy) {
            return duplicationStrategy(Output.of(duplicationStrategy));
        }

        /**
         * @param principalId The ID of the CloudSSO user/group associated with the synchronization.
         * 
         * @return builder
         * 
         */
        public Builder principalId(@Nullable Output<String> principalId) {
            $.principalId = principalId;
            return this;
        }

        /**
         * @param principalId The ID of the CloudSSO user/group associated with the synchronization.
         * 
         * @return builder
         * 
         */
        public Builder principalId(String principalId) {
            return principalId(Output.of(principalId));
        }

        /**
         * @param principalType The ID of the CloudSSO user/group associated with the synchronization.
         * 
         * @return builder
         * 
         */
        public Builder principalType(@Nullable Output<String> principalType) {
            $.principalType = principalType;
            return this;
        }

        /**
         * @param principalType The ID of the CloudSSO user/group associated with the synchronization.
         * 
         * @return builder
         * 
         */
        public Builder principalType(String principalType) {
            return principalType(Output.of(principalType));
        }

        /**
         * @param status The status of the resource
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status The status of the resource
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param targetId The ID of the destination associated with the synchronization.
         * 
         * @return builder
         * 
         */
        public Builder targetId(@Nullable Output<String> targetId) {
            $.targetId = targetId;
            return this;
        }

        /**
         * @param targetId The ID of the destination associated with the synchronization.
         * 
         * @return builder
         * 
         */
        public Builder targetId(String targetId) {
            return targetId(Output.of(targetId));
        }

        /**
         * @param targetType The target type associated with the synchronization
         * 
         * @return builder
         * 
         */
        public Builder targetType(@Nullable Output<String> targetType) {
            $.targetType = targetType;
            return this;
        }

        /**
         * @param targetType The target type associated with the synchronization
         * 
         * @return builder
         * 
         */
        public Builder targetType(String targetType) {
            return targetType(Output.of(targetType));
        }

        /**
         * @param userProvisioningId The first ID of the resource
         * 
         * @return builder
         * 
         */
        public Builder userProvisioningId(@Nullable Output<String> userProvisioningId) {
            $.userProvisioningId = userProvisioningId;
            return this;
        }

        /**
         * @param userProvisioningId The first ID of the resource
         * 
         * @return builder
         * 
         */
        public Builder userProvisioningId(String userProvisioningId) {
            return userProvisioningId(Output.of(userProvisioningId));
        }

        /**
         * @param userProvisioningStatistics User Provisioning statistics
         * 
         * @return builder
         * 
         */
        public Builder userProvisioningStatistics(@Nullable Output<List<UserProvisioningUserProvisioningStatisticArgs>> userProvisioningStatistics) {
            $.userProvisioningStatistics = userProvisioningStatistics;
            return this;
        }

        /**
         * @param userProvisioningStatistics User Provisioning statistics
         * 
         * @return builder
         * 
         */
        public Builder userProvisioningStatistics(List<UserProvisioningUserProvisioningStatisticArgs> userProvisioningStatistics) {
            return userProvisioningStatistics(Output.of(userProvisioningStatistics));
        }

        /**
         * @param userProvisioningStatistics User Provisioning statistics
         * 
         * @return builder
         * 
         */
        public Builder userProvisioningStatistics(UserProvisioningUserProvisioningStatisticArgs... userProvisioningStatistics) {
            return userProvisioningStatistics(List.of(userProvisioningStatistics));
        }

        public UserProvisioningState build() {
            return $;
        }
    }

}
