// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.cms.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class MetricRuleTemplateAlertTemplateEscalationsInfoArgs extends com.pulumi.resources.ResourceArgs {

    public static final MetricRuleTemplateAlertTemplateEscalationsInfoArgs Empty = new MetricRuleTemplateAlertTemplateEscalationsInfoArgs();

    @Import(name="comparisonOperator")
    private @Nullable Output<String> comparisonOperator;

    public Optional<Output<String>> comparisonOperator() {
        return Optional.ofNullable(this.comparisonOperator);
    }

    @Import(name="statistics")
    private @Nullable Output<String> statistics;

    public Optional<Output<String>> statistics() {
        return Optional.ofNullable(this.statistics);
    }

    @Import(name="threshold")
    private @Nullable Output<String> threshold;

    public Optional<Output<String>> threshold() {
        return Optional.ofNullable(this.threshold);
    }

    @Import(name="times")
    private @Nullable Output<String> times;

    public Optional<Output<String>> times() {
        return Optional.ofNullable(this.times);
    }

    private MetricRuleTemplateAlertTemplateEscalationsInfoArgs() {}

    private MetricRuleTemplateAlertTemplateEscalationsInfoArgs(MetricRuleTemplateAlertTemplateEscalationsInfoArgs $) {
        this.comparisonOperator = $.comparisonOperator;
        this.statistics = $.statistics;
        this.threshold = $.threshold;
        this.times = $.times;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MetricRuleTemplateAlertTemplateEscalationsInfoArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MetricRuleTemplateAlertTemplateEscalationsInfoArgs $;

        public Builder() {
            $ = new MetricRuleTemplateAlertTemplateEscalationsInfoArgs();
        }

        public Builder(MetricRuleTemplateAlertTemplateEscalationsInfoArgs defaults) {
            $ = new MetricRuleTemplateAlertTemplateEscalationsInfoArgs(Objects.requireNonNull(defaults));
        }

        public Builder comparisonOperator(@Nullable Output<String> comparisonOperator) {
            $.comparisonOperator = comparisonOperator;
            return this;
        }

        public Builder comparisonOperator(String comparisonOperator) {
            return comparisonOperator(Output.of(comparisonOperator));
        }

        public Builder statistics(@Nullable Output<String> statistics) {
            $.statistics = statistics;
            return this;
        }

        public Builder statistics(String statistics) {
            return statistics(Output.of(statistics));
        }

        public Builder threshold(@Nullable Output<String> threshold) {
            $.threshold = threshold;
            return this;
        }

        public Builder threshold(String threshold) {
            return threshold(Output.of(threshold));
        }

        public Builder times(@Nullable Output<String> times) {
            $.times = times;
            return this;
        }

        public Builder times(String times) {
            return times(Output.of(times));
        }

        public MetricRuleTemplateAlertTemplateEscalationsInfoArgs build() {
            return $;
        }
    }

}
