// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.hbr.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class HanaBackupPlanState extends com.pulumi.resources.ResourceArgs {

    public static final HanaBackupPlanState Empty = new HanaBackupPlanState();

    /**
     * The backup prefix.
     * 
     */
    @Import(name="backupPrefix")
    private @Nullable Output<String> backupPrefix;

    /**
     * @return The backup prefix.
     * 
     */
    public Optional<Output<String>> backupPrefix() {
        return Optional.ofNullable(this.backupPrefix);
    }

    /**
     * The backup type. Valid values:
     * - `COMPLETE`: full backup.
     * - `INCREMENTAL`: incremental backup.
     * - `DIFFERENTIAL`: differential backup.
     * 
     */
    @Import(name="backupType")
    private @Nullable Output<String> backupType;

    /**
     * @return The backup type. Valid values:
     * - `COMPLETE`: full backup.
     * - `INCREMENTAL`: incremental backup.
     * - `DIFFERENTIAL`: differential backup.
     * 
     */
    public Optional<Output<String>> backupType() {
        return Optional.ofNullable(this.backupType);
    }

    /**
     * The ID of the SAP HANA instance.
     * 
     */
    @Import(name="clusterId")
    private @Nullable Output<String> clusterId;

    /**
     * @return The ID of the SAP HANA instance.
     * 
     */
    public Optional<Output<String>> clusterId() {
        return Optional.ofNullable(this.clusterId);
    }

    /**
     * The name of the database.
     * 
     */
    @Import(name="databaseName")
    private @Nullable Output<String> databaseName;

    /**
     * @return The name of the database.
     * 
     */
    public Optional<Output<String>> databaseName() {
        return Optional.ofNullable(this.databaseName);
    }

    /**
     * The id of the plan.
     * 
     */
    @Import(name="planId")
    private @Nullable Output<String> planId;

    /**
     * @return The id of the plan.
     * 
     */
    public Optional<Output<String>> planId() {
        return Optional.ofNullable(this.planId);
    }

    /**
     * The name of the backup plan.
     * 
     */
    @Import(name="planName")
    private @Nullable Output<String> planName;

    /**
     * @return The name of the backup plan.
     * 
     */
    public Optional<Output<String>> planName() {
        return Optional.ofNullable(this.planName);
    }

    /**
     * The resource attribute field that represents the resource group ID.
     * 
     */
    @Import(name="resourceGroupId")
    private @Nullable Output<String> resourceGroupId;

    /**
     * @return The resource attribute field that represents the resource group ID.
     * 
     */
    public Optional<Output<String>> resourceGroupId() {
        return Optional.ofNullable(this.resourceGroupId);
    }

    /**
     * The backup policy. Format: `I|{startTime}|{interval}`. The system runs the first backup job at a point in time that is specified in the {startTime} parameter and the subsequent backup jobs at an interval that is specified in the {interval} parameter. The system does not run a backup job before the specified point in time. Each backup job, except the first one, starts only after the previous backup job is completed. For example, I|1631685600|P1D specifies that the system runs the first backup job at 14:00:00 on September 15, 2021 and the subsequent backup jobs once a day.
     * 
     */
    @Import(name="schedule")
    private @Nullable Output<String> schedule;

    /**
     * @return The backup policy. Format: `I|{startTime}|{interval}`. The system runs the first backup job at a point in time that is specified in the {startTime} parameter and the subsequent backup jobs at an interval that is specified in the {interval} parameter. The system does not run a backup job before the specified point in time. Each backup job, except the first one, starts only after the previous backup job is completed. For example, I|1631685600|P1D specifies that the system runs the first backup job at 14:00:00 on September 15, 2021 and the subsequent backup jobs once a day.
     * 
     */
    public Optional<Output<String>> schedule() {
        return Optional.ofNullable(this.schedule);
    }

    /**
     * The status of the resource. Valid values: `Enabled`, `Disabled`.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return The status of the resource. Valid values: `Enabled`, `Disabled`.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * The ID of the backup vault.
     * 
     */
    @Import(name="vaultId")
    private @Nullable Output<String> vaultId;

    /**
     * @return The ID of the backup vault.
     * 
     */
    public Optional<Output<String>> vaultId() {
        return Optional.ofNullable(this.vaultId);
    }

    private HanaBackupPlanState() {}

    private HanaBackupPlanState(HanaBackupPlanState $) {
        this.backupPrefix = $.backupPrefix;
        this.backupType = $.backupType;
        this.clusterId = $.clusterId;
        this.databaseName = $.databaseName;
        this.planId = $.planId;
        this.planName = $.planName;
        this.resourceGroupId = $.resourceGroupId;
        this.schedule = $.schedule;
        this.status = $.status;
        this.vaultId = $.vaultId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(HanaBackupPlanState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private HanaBackupPlanState $;

        public Builder() {
            $ = new HanaBackupPlanState();
        }

        public Builder(HanaBackupPlanState defaults) {
            $ = new HanaBackupPlanState(Objects.requireNonNull(defaults));
        }

        /**
         * @param backupPrefix The backup prefix.
         * 
         * @return builder
         * 
         */
        public Builder backupPrefix(@Nullable Output<String> backupPrefix) {
            $.backupPrefix = backupPrefix;
            return this;
        }

        /**
         * @param backupPrefix The backup prefix.
         * 
         * @return builder
         * 
         */
        public Builder backupPrefix(String backupPrefix) {
            return backupPrefix(Output.of(backupPrefix));
        }

        /**
         * @param backupType The backup type. Valid values:
         * - `COMPLETE`: full backup.
         * - `INCREMENTAL`: incremental backup.
         * - `DIFFERENTIAL`: differential backup.
         * 
         * @return builder
         * 
         */
        public Builder backupType(@Nullable Output<String> backupType) {
            $.backupType = backupType;
            return this;
        }

        /**
         * @param backupType The backup type. Valid values:
         * - `COMPLETE`: full backup.
         * - `INCREMENTAL`: incremental backup.
         * - `DIFFERENTIAL`: differential backup.
         * 
         * @return builder
         * 
         */
        public Builder backupType(String backupType) {
            return backupType(Output.of(backupType));
        }

        /**
         * @param clusterId The ID of the SAP HANA instance.
         * 
         * @return builder
         * 
         */
        public Builder clusterId(@Nullable Output<String> clusterId) {
            $.clusterId = clusterId;
            return this;
        }

        /**
         * @param clusterId The ID of the SAP HANA instance.
         * 
         * @return builder
         * 
         */
        public Builder clusterId(String clusterId) {
            return clusterId(Output.of(clusterId));
        }

        /**
         * @param databaseName The name of the database.
         * 
         * @return builder
         * 
         */
        public Builder databaseName(@Nullable Output<String> databaseName) {
            $.databaseName = databaseName;
            return this;
        }

        /**
         * @param databaseName The name of the database.
         * 
         * @return builder
         * 
         */
        public Builder databaseName(String databaseName) {
            return databaseName(Output.of(databaseName));
        }

        /**
         * @param planId The id of the plan.
         * 
         * @return builder
         * 
         */
        public Builder planId(@Nullable Output<String> planId) {
            $.planId = planId;
            return this;
        }

        /**
         * @param planId The id of the plan.
         * 
         * @return builder
         * 
         */
        public Builder planId(String planId) {
            return planId(Output.of(planId));
        }

        /**
         * @param planName The name of the backup plan.
         * 
         * @return builder
         * 
         */
        public Builder planName(@Nullable Output<String> planName) {
            $.planName = planName;
            return this;
        }

        /**
         * @param planName The name of the backup plan.
         * 
         * @return builder
         * 
         */
        public Builder planName(String planName) {
            return planName(Output.of(planName));
        }

        /**
         * @param resourceGroupId The resource attribute field that represents the resource group ID.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupId(@Nullable Output<String> resourceGroupId) {
            $.resourceGroupId = resourceGroupId;
            return this;
        }

        /**
         * @param resourceGroupId The resource attribute field that represents the resource group ID.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupId(String resourceGroupId) {
            return resourceGroupId(Output.of(resourceGroupId));
        }

        /**
         * @param schedule The backup policy. Format: `I|{startTime}|{interval}`. The system runs the first backup job at a point in time that is specified in the {startTime} parameter and the subsequent backup jobs at an interval that is specified in the {interval} parameter. The system does not run a backup job before the specified point in time. Each backup job, except the first one, starts only after the previous backup job is completed. For example, I|1631685600|P1D specifies that the system runs the first backup job at 14:00:00 on September 15, 2021 and the subsequent backup jobs once a day.
         * 
         * @return builder
         * 
         */
        public Builder schedule(@Nullable Output<String> schedule) {
            $.schedule = schedule;
            return this;
        }

        /**
         * @param schedule The backup policy. Format: `I|{startTime}|{interval}`. The system runs the first backup job at a point in time that is specified in the {startTime} parameter and the subsequent backup jobs at an interval that is specified in the {interval} parameter. The system does not run a backup job before the specified point in time. Each backup job, except the first one, starts only after the previous backup job is completed. For example, I|1631685600|P1D specifies that the system runs the first backup job at 14:00:00 on September 15, 2021 and the subsequent backup jobs once a day.
         * 
         * @return builder
         * 
         */
        public Builder schedule(String schedule) {
            return schedule(Output.of(schedule));
        }

        /**
         * @param status The status of the resource. Valid values: `Enabled`, `Disabled`.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status The status of the resource. Valid values: `Enabled`, `Disabled`.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param vaultId The ID of the backup vault.
         * 
         * @return builder
         * 
         */
        public Builder vaultId(@Nullable Output<String> vaultId) {
            $.vaultId = vaultId;
            return this;
        }

        /**
         * @param vaultId The ID of the backup vault.
         * 
         * @return builder
         * 
         */
        public Builder vaultId(String vaultId) {
            return vaultId(Output.of(vaultId));
        }

        public HanaBackupPlanState build() {
            return $;
        }
    }

}
