// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.oos.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TemplateState extends com.pulumi.resources.ResourceArgs {

    public static final TemplateState Empty = new TemplateState();

    /**
     * When deleting a template, whether to delete its related executions. Default to `false`.
     * 
     */
    @Import(name="autoDeleteExecutions")
    private @Nullable Output<Boolean> autoDeleteExecutions;

    /**
     * @return When deleting a template, whether to delete its related executions. Default to `false`.
     * 
     */
    public Optional<Output<Boolean>> autoDeleteExecutions() {
        return Optional.ofNullable(this.autoDeleteExecutions);
    }

    /**
     * The content of the template. The template must be in the JSON or YAML format. Maximum size: 64 KB.
     * 
     */
    @Import(name="content")
    private @Nullable Output<String> content;

    /**
     * @return The content of the template. The template must be in the JSON or YAML format. Maximum size: 64 KB.
     * 
     */
    public Optional<Output<String>> content() {
        return Optional.ofNullable(this.content);
    }

    /**
     * The creator of the template.
     * 
     */
    @Import(name="createdBy")
    private @Nullable Output<String> createdBy;

    /**
     * @return The creator of the template.
     * 
     */
    public Optional<Output<String>> createdBy() {
        return Optional.ofNullable(this.createdBy);
    }

    /**
     * The time when the template is created.
     * 
     */
    @Import(name="createdDate")
    private @Nullable Output<String> createdDate;

    /**
     * @return The time when the template is created.
     * 
     */
    public Optional<Output<String>> createdDate() {
        return Optional.ofNullable(this.createdDate);
    }

    /**
     * The description of the template.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The description of the template.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Is it triggered successfully.
     * 
     */
    @Import(name="hasTrigger")
    private @Nullable Output<Boolean> hasTrigger;

    /**
     * @return Is it triggered successfully.
     * 
     */
    public Optional<Output<Boolean>> hasTrigger() {
        return Optional.ofNullable(this.hasTrigger);
    }

    /**
     * The ID of resource group which the template belongs.
     * 
     */
    @Import(name="resourceGroupId")
    private @Nullable Output<String> resourceGroupId;

    /**
     * @return The ID of resource group which the template belongs.
     * 
     */
    public Optional<Output<String>> resourceGroupId() {
        return Optional.ofNullable(this.resourceGroupId);
    }

    /**
     * The sharing type of the template. The sharing type of templates created by users are set to Private. The sharing type of common templates provided by OOS are set to Public.
     * 
     */
    @Import(name="shareType")
    private @Nullable Output<String> shareType;

    /**
     * @return The sharing type of the template. The sharing type of templates created by users are set to Private. The sharing type of common templates provided by OOS are set to Public.
     * 
     */
    public Optional<Output<String>> shareType() {
        return Optional.ofNullable(this.shareType);
    }

    /**
     * A mapping of tags to assign to the resource.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return A mapping of tags to assign to the resource.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * The format of the template. The format can be JSON or YAML. The system automatically identifies the format.
     * 
     */
    @Import(name="templateFormat")
    private @Nullable Output<String> templateFormat;

    /**
     * @return The format of the template. The format can be JSON or YAML. The system automatically identifies the format.
     * 
     */
    public Optional<Output<String>> templateFormat() {
        return Optional.ofNullable(this.templateFormat);
    }

    /**
     * The id of OOS Template.
     * 
     */
    @Import(name="templateId")
    private @Nullable Output<String> templateId;

    /**
     * @return The id of OOS Template.
     * 
     */
    public Optional<Output<String>> templateId() {
        return Optional.ofNullable(this.templateId);
    }

    /**
     * The name of the template. The template name can be up to 200 characters in length. The name can contain letters, digits, hyphens (-), and underscores (_). It cannot start with `ALIYUN`, `ACS`, `ALIBABA`, or `ALICLOUD`.
     * 
     */
    @Import(name="templateName")
    private @Nullable Output<String> templateName;

    /**
     * @return The name of the template. The template name can be up to 200 characters in length. The name can contain letters, digits, hyphens (-), and underscores (_). It cannot start with `ALIYUN`, `ACS`, `ALIBABA`, or `ALICLOUD`.
     * 
     */
    public Optional<Output<String>> templateName() {
        return Optional.ofNullable(this.templateName);
    }

    /**
     * The type of OOS Template. `Automation` means the implementation of Alibaba Cloud API template, `Package` means represents a template for installing software.
     * 
     */
    @Import(name="templateType")
    private @Nullable Output<String> templateType;

    /**
     * @return The type of OOS Template. `Automation` means the implementation of Alibaba Cloud API template, `Package` means represents a template for installing software.
     * 
     */
    public Optional<Output<String>> templateType() {
        return Optional.ofNullable(this.templateType);
    }

    /**
     * The version of OOS Template.
     * 
     */
    @Import(name="templateVersion")
    private @Nullable Output<String> templateVersion;

    /**
     * @return The version of OOS Template.
     * 
     */
    public Optional<Output<String>> templateVersion() {
        return Optional.ofNullable(this.templateVersion);
    }

    /**
     * The user who updated the template.
     * 
     */
    @Import(name="updatedBy")
    private @Nullable Output<String> updatedBy;

    /**
     * @return The user who updated the template.
     * 
     */
    public Optional<Output<String>> updatedBy() {
        return Optional.ofNullable(this.updatedBy);
    }

    /**
     * The time when the template was updated.
     * 
     */
    @Import(name="updatedDate")
    private @Nullable Output<String> updatedDate;

    /**
     * @return The time when the template was updated.
     * 
     */
    public Optional<Output<String>> updatedDate() {
        return Optional.ofNullable(this.updatedDate);
    }

    /**
     * The name of template version.
     * 
     */
    @Import(name="versionName")
    private @Nullable Output<String> versionName;

    /**
     * @return The name of template version.
     * 
     */
    public Optional<Output<String>> versionName() {
        return Optional.ofNullable(this.versionName);
    }

    private TemplateState() {}

    private TemplateState(TemplateState $) {
        this.autoDeleteExecutions = $.autoDeleteExecutions;
        this.content = $.content;
        this.createdBy = $.createdBy;
        this.createdDate = $.createdDate;
        this.description = $.description;
        this.hasTrigger = $.hasTrigger;
        this.resourceGroupId = $.resourceGroupId;
        this.shareType = $.shareType;
        this.tags = $.tags;
        this.templateFormat = $.templateFormat;
        this.templateId = $.templateId;
        this.templateName = $.templateName;
        this.templateType = $.templateType;
        this.templateVersion = $.templateVersion;
        this.updatedBy = $.updatedBy;
        this.updatedDate = $.updatedDate;
        this.versionName = $.versionName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TemplateState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TemplateState $;

        public Builder() {
            $ = new TemplateState();
        }

        public Builder(TemplateState defaults) {
            $ = new TemplateState(Objects.requireNonNull(defaults));
        }

        /**
         * @param autoDeleteExecutions When deleting a template, whether to delete its related executions. Default to `false`.
         * 
         * @return builder
         * 
         */
        public Builder autoDeleteExecutions(@Nullable Output<Boolean> autoDeleteExecutions) {
            $.autoDeleteExecutions = autoDeleteExecutions;
            return this;
        }

        /**
         * @param autoDeleteExecutions When deleting a template, whether to delete its related executions. Default to `false`.
         * 
         * @return builder
         * 
         */
        public Builder autoDeleteExecutions(Boolean autoDeleteExecutions) {
            return autoDeleteExecutions(Output.of(autoDeleteExecutions));
        }

        /**
         * @param content The content of the template. The template must be in the JSON or YAML format. Maximum size: 64 KB.
         * 
         * @return builder
         * 
         */
        public Builder content(@Nullable Output<String> content) {
            $.content = content;
            return this;
        }

        /**
         * @param content The content of the template. The template must be in the JSON or YAML format. Maximum size: 64 KB.
         * 
         * @return builder
         * 
         */
        public Builder content(String content) {
            return content(Output.of(content));
        }

        /**
         * @param createdBy The creator of the template.
         * 
         * @return builder
         * 
         */
        public Builder createdBy(@Nullable Output<String> createdBy) {
            $.createdBy = createdBy;
            return this;
        }

        /**
         * @param createdBy The creator of the template.
         * 
         * @return builder
         * 
         */
        public Builder createdBy(String createdBy) {
            return createdBy(Output.of(createdBy));
        }

        /**
         * @param createdDate The time when the template is created.
         * 
         * @return builder
         * 
         */
        public Builder createdDate(@Nullable Output<String> createdDate) {
            $.createdDate = createdDate;
            return this;
        }

        /**
         * @param createdDate The time when the template is created.
         * 
         * @return builder
         * 
         */
        public Builder createdDate(String createdDate) {
            return createdDate(Output.of(createdDate));
        }

        /**
         * @param description The description of the template.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The description of the template.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param hasTrigger Is it triggered successfully.
         * 
         * @return builder
         * 
         */
        public Builder hasTrigger(@Nullable Output<Boolean> hasTrigger) {
            $.hasTrigger = hasTrigger;
            return this;
        }

        /**
         * @param hasTrigger Is it triggered successfully.
         * 
         * @return builder
         * 
         */
        public Builder hasTrigger(Boolean hasTrigger) {
            return hasTrigger(Output.of(hasTrigger));
        }

        /**
         * @param resourceGroupId The ID of resource group which the template belongs.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupId(@Nullable Output<String> resourceGroupId) {
            $.resourceGroupId = resourceGroupId;
            return this;
        }

        /**
         * @param resourceGroupId The ID of resource group which the template belongs.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupId(String resourceGroupId) {
            return resourceGroupId(Output.of(resourceGroupId));
        }

        /**
         * @param shareType The sharing type of the template. The sharing type of templates created by users are set to Private. The sharing type of common templates provided by OOS are set to Public.
         * 
         * @return builder
         * 
         */
        public Builder shareType(@Nullable Output<String> shareType) {
            $.shareType = shareType;
            return this;
        }

        /**
         * @param shareType The sharing type of the template. The sharing type of templates created by users are set to Private. The sharing type of common templates provided by OOS are set to Public.
         * 
         * @return builder
         * 
         */
        public Builder shareType(String shareType) {
            return shareType(Output.of(shareType));
        }

        /**
         * @param tags A mapping of tags to assign to the resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags A mapping of tags to assign to the resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param templateFormat The format of the template. The format can be JSON or YAML. The system automatically identifies the format.
         * 
         * @return builder
         * 
         */
        public Builder templateFormat(@Nullable Output<String> templateFormat) {
            $.templateFormat = templateFormat;
            return this;
        }

        /**
         * @param templateFormat The format of the template. The format can be JSON or YAML. The system automatically identifies the format.
         * 
         * @return builder
         * 
         */
        public Builder templateFormat(String templateFormat) {
            return templateFormat(Output.of(templateFormat));
        }

        /**
         * @param templateId The id of OOS Template.
         * 
         * @return builder
         * 
         */
        public Builder templateId(@Nullable Output<String> templateId) {
            $.templateId = templateId;
            return this;
        }

        /**
         * @param templateId The id of OOS Template.
         * 
         * @return builder
         * 
         */
        public Builder templateId(String templateId) {
            return templateId(Output.of(templateId));
        }

        /**
         * @param templateName The name of the template. The template name can be up to 200 characters in length. The name can contain letters, digits, hyphens (-), and underscores (_). It cannot start with `ALIYUN`, `ACS`, `ALIBABA`, or `ALICLOUD`.
         * 
         * @return builder
         * 
         */
        public Builder templateName(@Nullable Output<String> templateName) {
            $.templateName = templateName;
            return this;
        }

        /**
         * @param templateName The name of the template. The template name can be up to 200 characters in length. The name can contain letters, digits, hyphens (-), and underscores (_). It cannot start with `ALIYUN`, `ACS`, `ALIBABA`, or `ALICLOUD`.
         * 
         * @return builder
         * 
         */
        public Builder templateName(String templateName) {
            return templateName(Output.of(templateName));
        }

        /**
         * @param templateType The type of OOS Template. `Automation` means the implementation of Alibaba Cloud API template, `Package` means represents a template for installing software.
         * 
         * @return builder
         * 
         */
        public Builder templateType(@Nullable Output<String> templateType) {
            $.templateType = templateType;
            return this;
        }

        /**
         * @param templateType The type of OOS Template. `Automation` means the implementation of Alibaba Cloud API template, `Package` means represents a template for installing software.
         * 
         * @return builder
         * 
         */
        public Builder templateType(String templateType) {
            return templateType(Output.of(templateType));
        }

        /**
         * @param templateVersion The version of OOS Template.
         * 
         * @return builder
         * 
         */
        public Builder templateVersion(@Nullable Output<String> templateVersion) {
            $.templateVersion = templateVersion;
            return this;
        }

        /**
         * @param templateVersion The version of OOS Template.
         * 
         * @return builder
         * 
         */
        public Builder templateVersion(String templateVersion) {
            return templateVersion(Output.of(templateVersion));
        }

        /**
         * @param updatedBy The user who updated the template.
         * 
         * @return builder
         * 
         */
        public Builder updatedBy(@Nullable Output<String> updatedBy) {
            $.updatedBy = updatedBy;
            return this;
        }

        /**
         * @param updatedBy The user who updated the template.
         * 
         * @return builder
         * 
         */
        public Builder updatedBy(String updatedBy) {
            return updatedBy(Output.of(updatedBy));
        }

        /**
         * @param updatedDate The time when the template was updated.
         * 
         * @return builder
         * 
         */
        public Builder updatedDate(@Nullable Output<String> updatedDate) {
            $.updatedDate = updatedDate;
            return this;
        }

        /**
         * @param updatedDate The time when the template was updated.
         * 
         * @return builder
         * 
         */
        public Builder updatedDate(String updatedDate) {
            return updatedDate(Output.of(updatedDate));
        }

        /**
         * @param versionName The name of template version.
         * 
         * @return builder
         * 
         */
        public Builder versionName(@Nullable Output<String> versionName) {
            $.versionName = versionName;
            return this;
        }

        /**
         * @param versionName The name of template version.
         * 
         * @return builder
         * 
         */
        public Builder versionName(String versionName) {
            return versionName(Output.of(versionName));
        }

        public TemplateState build() {
            return $;
        }
    }

}
