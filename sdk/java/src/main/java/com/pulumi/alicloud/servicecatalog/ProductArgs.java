// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.servicecatalog;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ProductArgs extends com.pulumi.resources.ResourceArgs {

    public static final ProductArgs Empty = new ProductArgs();

    /**
     * The description of the product
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The description of the product
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The name of the product
     * 
     */
    @Import(name="productName", required=true)
    private Output<String> productName;

    /**
     * @return The name of the product
     * 
     */
    public Output<String> productName() {
        return this.productName;
    }

    /**
     * The type of the product
     * 
     */
    @Import(name="productType", required=true)
    private Output<String> productType;

    /**
     * @return The type of the product
     * 
     */
    public Output<String> productType() {
        return this.productType;
    }

    /**
     * The provider name of the product
     * 
     */
    @Import(name="providerName", required=true)
    private Output<String> providerName;

    /**
     * @return The provider name of the product
     * 
     */
    public Output<String> providerName() {
        return this.providerName;
    }

    private ProductArgs() {}

    private ProductArgs(ProductArgs $) {
        this.description = $.description;
        this.productName = $.productName;
        this.productType = $.productType;
        this.providerName = $.providerName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ProductArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ProductArgs $;

        public Builder() {
            $ = new ProductArgs();
        }

        public Builder(ProductArgs defaults) {
            $ = new ProductArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param description The description of the product
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The description of the product
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param productName The name of the product
         * 
         * @return builder
         * 
         */
        public Builder productName(Output<String> productName) {
            $.productName = productName;
            return this;
        }

        /**
         * @param productName The name of the product
         * 
         * @return builder
         * 
         */
        public Builder productName(String productName) {
            return productName(Output.of(productName));
        }

        /**
         * @param productType The type of the product
         * 
         * @return builder
         * 
         */
        public Builder productType(Output<String> productType) {
            $.productType = productType;
            return this;
        }

        /**
         * @param productType The type of the product
         * 
         * @return builder
         * 
         */
        public Builder productType(String productType) {
            return productType(Output.of(productType));
        }

        /**
         * @param providerName The provider name of the product
         * 
         * @return builder
         * 
         */
        public Builder providerName(Output<String> providerName) {
            $.providerName = providerName;
            return this;
        }

        /**
         * @param providerName The provider name of the product
         * 
         * @return builder
         * 
         */
        public Builder providerName(String providerName) {
            return providerName(Output.of(providerName));
        }

        public ProductArgs build() {
            if ($.productName == null) {
                throw new MissingRequiredPropertyException("ProductArgs", "productName");
            }
            if ($.productType == null) {
                throw new MissingRequiredPropertyException("ProductArgs", "productType");
            }
            if ($.providerName == null) {
                throw new MissingRequiredPropertyException("ProductArgs", "providerName");
            }
            return $;
        }
    }

}
