// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.eds.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SnapshotState extends com.pulumi.resources.ResourceArgs {

    public static final SnapshotState Empty = new SnapshotState();

    /**
     * The description of the Snapshot.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The description of the Snapshot.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The ID of the Desktop.
     * 
     */
    @Import(name="desktopId")
    private @Nullable Output<String> desktopId;

    /**
     * @return The ID of the Desktop.
     * 
     */
    public Optional<Output<String>> desktopId() {
        return Optional.ofNullable(this.desktopId);
    }

    /**
     * The name of the Snapshot.
     * 
     */
    @Import(name="snapshotName")
    private @Nullable Output<String> snapshotName;

    /**
     * @return The name of the Snapshot.
     * 
     */
    public Optional<Output<String>> snapshotName() {
        return Optional.ofNullable(this.snapshotName);
    }

    /**
     * The type of the disk for which to create a snapshot. Valid values: `SYSTEM`, `DATA`.
     * 
     */
    @Import(name="sourceDiskType")
    private @Nullable Output<String> sourceDiskType;

    /**
     * @return The type of the disk for which to create a snapshot. Valid values: `SYSTEM`, `DATA`.
     * 
     */
    public Optional<Output<String>> sourceDiskType() {
        return Optional.ofNullable(this.sourceDiskType);
    }

    /**
     * The status of the snapshot.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return The status of the snapshot.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    private SnapshotState() {}

    private SnapshotState(SnapshotState $) {
        this.description = $.description;
        this.desktopId = $.desktopId;
        this.snapshotName = $.snapshotName;
        this.sourceDiskType = $.sourceDiskType;
        this.status = $.status;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SnapshotState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SnapshotState $;

        public Builder() {
            $ = new SnapshotState();
        }

        public Builder(SnapshotState defaults) {
            $ = new SnapshotState(Objects.requireNonNull(defaults));
        }

        /**
         * @param description The description of the Snapshot.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The description of the Snapshot.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param desktopId The ID of the Desktop.
         * 
         * @return builder
         * 
         */
        public Builder desktopId(@Nullable Output<String> desktopId) {
            $.desktopId = desktopId;
            return this;
        }

        /**
         * @param desktopId The ID of the Desktop.
         * 
         * @return builder
         * 
         */
        public Builder desktopId(String desktopId) {
            return desktopId(Output.of(desktopId));
        }

        /**
         * @param snapshotName The name of the Snapshot.
         * 
         * @return builder
         * 
         */
        public Builder snapshotName(@Nullable Output<String> snapshotName) {
            $.snapshotName = snapshotName;
            return this;
        }

        /**
         * @param snapshotName The name of the Snapshot.
         * 
         * @return builder
         * 
         */
        public Builder snapshotName(String snapshotName) {
            return snapshotName(Output.of(snapshotName));
        }

        /**
         * @param sourceDiskType The type of the disk for which to create a snapshot. Valid values: `SYSTEM`, `DATA`.
         * 
         * @return builder
         * 
         */
        public Builder sourceDiskType(@Nullable Output<String> sourceDiskType) {
            $.sourceDiskType = sourceDiskType;
            return this;
        }

        /**
         * @param sourceDiskType The type of the disk for which to create a snapshot. Valid values: `SYSTEM`, `DATA`.
         * 
         * @return builder
         * 
         */
        public Builder sourceDiskType(String sourceDiskType) {
            return sourceDiskType(Output.of(sourceDiskType));
        }

        /**
         * @param status The status of the snapshot.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status The status of the snapshot.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        public SnapshotState build() {
            return $;
        }
    }

}
