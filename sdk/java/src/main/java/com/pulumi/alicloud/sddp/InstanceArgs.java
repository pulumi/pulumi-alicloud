// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.sddp;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class InstanceArgs extends com.pulumi.resources.ResourceArgs {

    public static final InstanceArgs Empty = new InstanceArgs();

    /**
     * The dataphin. Valid values: `yes`,`no`.
     * 
     */
    @Import(name="dataphin")
    private @Nullable Output<String> dataphin;

    /**
     * @return The dataphin. Valid values: `yes`,`no`.
     * 
     */
    public Optional<Output<String>> dataphin() {
        return Optional.ofNullable(this.dataphin);
    }

    /**
     * The dataphin count. Valid values: 1 to 20.
     * 
     */
    @Import(name="dataphinCount")
    private @Nullable Output<String> dataphinCount;

    /**
     * @return The dataphin count. Valid values: 1 to 20.
     * 
     */
    public Optional<Output<String>> dataphinCount() {
        return Optional.ofNullable(this.dataphinCount);
    }

    /**
     * The logistics.
     * 
     */
    @Import(name="logistics")
    private @Nullable Output<String> logistics;

    /**
     * @return The logistics.
     * 
     */
    public Optional<Output<String>> logistics() {
        return Optional.ofNullable(this.logistics);
    }

    /**
     * The modify type. Valid values: `Upgrade`, `Downgrade`.  **NOTE:** The `modify_type` is required when you execute a update operation.
     * 
     */
    @Import(name="modifyType")
    private @Nullable Output<String> modifyType;

    /**
     * @return The modify type. Valid values: `Upgrade`, `Downgrade`.  **NOTE:** The `modify_type` is required when you execute a update operation.
     * 
     */
    public Optional<Output<String>> modifyType() {
        return Optional.ofNullable(this.modifyType);
    }

    /**
     * The OSS storage capacity.
     * 
     */
    @Import(name="ossSize")
    private @Nullable Output<String> ossSize;

    /**
     * @return The OSS storage capacity.
     * 
     */
    public Optional<Output<String>> ossSize() {
        return Optional.ofNullable(this.ossSize);
    }

    /**
     * The payment type of the resource. Valid values: `Subscription`.
     * 
     */
    @Import(name="paymentType", required=true)
    private Output<String> paymentType;

    /**
     * @return The payment type of the resource. Valid values: `Subscription`.
     * 
     */
    public Output<String> paymentType() {
        return this.paymentType;
    }

    /**
     * The Prepaid period. Valid values: `1`, `2`, `3`, `6`,`12`,`24`.
     * 
     */
    @Import(name="period", required=true)
    private Output<Integer> period;

    /**
     * @return The Prepaid period. Valid values: `1`, `2`, `3`, `6`,`12`,`24`.
     * 
     */
    public Output<Integer> period() {
        return this.period;
    }

    /**
     * Automatic renewal period. **NOTE:** The `renew_period` is required under the condition that renewal_status is `AutoRenewal`,
     * 
     */
    @Import(name="renewPeriod")
    private @Nullable Output<Integer> renewPeriod;

    /**
     * @return Automatic renewal period. **NOTE:** The `renew_period` is required under the condition that renewal_status is `AutoRenewal`,
     * 
     */
    public Optional<Output<Integer>> renewPeriod() {
        return Optional.ofNullable(this.renewPeriod);
    }

    /**
     * Automatic renewal status. Valid values: `AutoRenewal`,`ManualRenewal`. Default Value: `ManualRenewal`.
     * 
     */
    @Import(name="renewalStatus")
    private @Nullable Output<String> renewalStatus;

    /**
     * @return Automatic renewal status. Valid values: `AutoRenewal`,`ManualRenewal`. Default Value: `ManualRenewal`.
     * 
     */
    public Optional<Output<String>> renewalStatus() {
        return Optional.ofNullable(this.renewalStatus);
    }

    /**
     * Whether to use the database. Valid values:`yes`,`no`.
     * 
     */
    @Import(name="sdCbool", required=true)
    private Output<String> sdCbool;

    /**
     * @return Whether to use the database. Valid values:`yes`,`no`.
     * 
     */
    public Output<String> sdCbool() {
        return this.sdCbool;
    }

    /**
     * The number of instances.
     * 
     */
    @Import(name="sdc", required=true)
    private Output<String> sdc;

    /**
     * @return The number of instances.
     * 
     */
    public Output<String> sdc() {
        return this.sdc;
    }

    /**
     * The sddp version. Valid values: `version_audit`,`version_company`,`version_dlp`.
     * 
     */
    @Import(name="sddpVersion", required=true)
    private Output<String> sddpVersion;

    /**
     * @return The sddp version. Valid values: `version_audit`,`version_company`,`version_dlp`.
     * 
     */
    public Output<String> sddpVersion() {
        return this.sddpVersion;
    }

    /**
     * Whether to use OSS. Valid values: `yes`,`no`.
     * 
     */
    @Import(name="udCbool", required=true)
    private Output<String> udCbool;

    /**
     * @return Whether to use OSS. Valid values: `yes`,`no`.
     * 
     */
    public Output<String> udCbool() {
        return this.udCbool;
    }

    /**
     * OSS Size.
     * 
     */
    @Import(name="udc", required=true)
    private Output<String> udc;

    /**
     * @return OSS Size.
     * 
     */
    public Output<String> udc() {
        return this.udc;
    }

    private InstanceArgs() {}

    private InstanceArgs(InstanceArgs $) {
        this.dataphin = $.dataphin;
        this.dataphinCount = $.dataphinCount;
        this.logistics = $.logistics;
        this.modifyType = $.modifyType;
        this.ossSize = $.ossSize;
        this.paymentType = $.paymentType;
        this.period = $.period;
        this.renewPeriod = $.renewPeriod;
        this.renewalStatus = $.renewalStatus;
        this.sdCbool = $.sdCbool;
        this.sdc = $.sdc;
        this.sddpVersion = $.sddpVersion;
        this.udCbool = $.udCbool;
        this.udc = $.udc;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(InstanceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private InstanceArgs $;

        public Builder() {
            $ = new InstanceArgs();
        }

        public Builder(InstanceArgs defaults) {
            $ = new InstanceArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param dataphin The dataphin. Valid values: `yes`,`no`.
         * 
         * @return builder
         * 
         */
        public Builder dataphin(@Nullable Output<String> dataphin) {
            $.dataphin = dataphin;
            return this;
        }

        /**
         * @param dataphin The dataphin. Valid values: `yes`,`no`.
         * 
         * @return builder
         * 
         */
        public Builder dataphin(String dataphin) {
            return dataphin(Output.of(dataphin));
        }

        /**
         * @param dataphinCount The dataphin count. Valid values: 1 to 20.
         * 
         * @return builder
         * 
         */
        public Builder dataphinCount(@Nullable Output<String> dataphinCount) {
            $.dataphinCount = dataphinCount;
            return this;
        }

        /**
         * @param dataphinCount The dataphin count. Valid values: 1 to 20.
         * 
         * @return builder
         * 
         */
        public Builder dataphinCount(String dataphinCount) {
            return dataphinCount(Output.of(dataphinCount));
        }

        /**
         * @param logistics The logistics.
         * 
         * @return builder
         * 
         */
        public Builder logistics(@Nullable Output<String> logistics) {
            $.logistics = logistics;
            return this;
        }

        /**
         * @param logistics The logistics.
         * 
         * @return builder
         * 
         */
        public Builder logistics(String logistics) {
            return logistics(Output.of(logistics));
        }

        /**
         * @param modifyType The modify type. Valid values: `Upgrade`, `Downgrade`.  **NOTE:** The `modify_type` is required when you execute a update operation.
         * 
         * @return builder
         * 
         */
        public Builder modifyType(@Nullable Output<String> modifyType) {
            $.modifyType = modifyType;
            return this;
        }

        /**
         * @param modifyType The modify type. Valid values: `Upgrade`, `Downgrade`.  **NOTE:** The `modify_type` is required when you execute a update operation.
         * 
         * @return builder
         * 
         */
        public Builder modifyType(String modifyType) {
            return modifyType(Output.of(modifyType));
        }

        /**
         * @param ossSize The OSS storage capacity.
         * 
         * @return builder
         * 
         */
        public Builder ossSize(@Nullable Output<String> ossSize) {
            $.ossSize = ossSize;
            return this;
        }

        /**
         * @param ossSize The OSS storage capacity.
         * 
         * @return builder
         * 
         */
        public Builder ossSize(String ossSize) {
            return ossSize(Output.of(ossSize));
        }

        /**
         * @param paymentType The payment type of the resource. Valid values: `Subscription`.
         * 
         * @return builder
         * 
         */
        public Builder paymentType(Output<String> paymentType) {
            $.paymentType = paymentType;
            return this;
        }

        /**
         * @param paymentType The payment type of the resource. Valid values: `Subscription`.
         * 
         * @return builder
         * 
         */
        public Builder paymentType(String paymentType) {
            return paymentType(Output.of(paymentType));
        }

        /**
         * @param period The Prepaid period. Valid values: `1`, `2`, `3`, `6`,`12`,`24`.
         * 
         * @return builder
         * 
         */
        public Builder period(Output<Integer> period) {
            $.period = period;
            return this;
        }

        /**
         * @param period The Prepaid period. Valid values: `1`, `2`, `3`, `6`,`12`,`24`.
         * 
         * @return builder
         * 
         */
        public Builder period(Integer period) {
            return period(Output.of(period));
        }

        /**
         * @param renewPeriod Automatic renewal period. **NOTE:** The `renew_period` is required under the condition that renewal_status is `AutoRenewal`,
         * 
         * @return builder
         * 
         */
        public Builder renewPeriod(@Nullable Output<Integer> renewPeriod) {
            $.renewPeriod = renewPeriod;
            return this;
        }

        /**
         * @param renewPeriod Automatic renewal period. **NOTE:** The `renew_period` is required under the condition that renewal_status is `AutoRenewal`,
         * 
         * @return builder
         * 
         */
        public Builder renewPeriod(Integer renewPeriod) {
            return renewPeriod(Output.of(renewPeriod));
        }

        /**
         * @param renewalStatus Automatic renewal status. Valid values: `AutoRenewal`,`ManualRenewal`. Default Value: `ManualRenewal`.
         * 
         * @return builder
         * 
         */
        public Builder renewalStatus(@Nullable Output<String> renewalStatus) {
            $.renewalStatus = renewalStatus;
            return this;
        }

        /**
         * @param renewalStatus Automatic renewal status. Valid values: `AutoRenewal`,`ManualRenewal`. Default Value: `ManualRenewal`.
         * 
         * @return builder
         * 
         */
        public Builder renewalStatus(String renewalStatus) {
            return renewalStatus(Output.of(renewalStatus));
        }

        /**
         * @param sdCbool Whether to use the database. Valid values:`yes`,`no`.
         * 
         * @return builder
         * 
         */
        public Builder sdCbool(Output<String> sdCbool) {
            $.sdCbool = sdCbool;
            return this;
        }

        /**
         * @param sdCbool Whether to use the database. Valid values:`yes`,`no`.
         * 
         * @return builder
         * 
         */
        public Builder sdCbool(String sdCbool) {
            return sdCbool(Output.of(sdCbool));
        }

        /**
         * @param sdc The number of instances.
         * 
         * @return builder
         * 
         */
        public Builder sdc(Output<String> sdc) {
            $.sdc = sdc;
            return this;
        }

        /**
         * @param sdc The number of instances.
         * 
         * @return builder
         * 
         */
        public Builder sdc(String sdc) {
            return sdc(Output.of(sdc));
        }

        /**
         * @param sddpVersion The sddp version. Valid values: `version_audit`,`version_company`,`version_dlp`.
         * 
         * @return builder
         * 
         */
        public Builder sddpVersion(Output<String> sddpVersion) {
            $.sddpVersion = sddpVersion;
            return this;
        }

        /**
         * @param sddpVersion The sddp version. Valid values: `version_audit`,`version_company`,`version_dlp`.
         * 
         * @return builder
         * 
         */
        public Builder sddpVersion(String sddpVersion) {
            return sddpVersion(Output.of(sddpVersion));
        }

        /**
         * @param udCbool Whether to use OSS. Valid values: `yes`,`no`.
         * 
         * @return builder
         * 
         */
        public Builder udCbool(Output<String> udCbool) {
            $.udCbool = udCbool;
            return this;
        }

        /**
         * @param udCbool Whether to use OSS. Valid values: `yes`,`no`.
         * 
         * @return builder
         * 
         */
        public Builder udCbool(String udCbool) {
            return udCbool(Output.of(udCbool));
        }

        /**
         * @param udc OSS Size.
         * 
         * @return builder
         * 
         */
        public Builder udc(Output<String> udc) {
            $.udc = udc;
            return this;
        }

        /**
         * @param udc OSS Size.
         * 
         * @return builder
         * 
         */
        public Builder udc(String udc) {
            return udc(Output.of(udc));
        }

        public InstanceArgs build() {
            if ($.paymentType == null) {
                throw new MissingRequiredPropertyException("InstanceArgs", "paymentType");
            }
            if ($.period == null) {
                throw new MissingRequiredPropertyException("InstanceArgs", "period");
            }
            if ($.sdCbool == null) {
                throw new MissingRequiredPropertyException("InstanceArgs", "sdCbool");
            }
            if ($.sdc == null) {
                throw new MissingRequiredPropertyException("InstanceArgs", "sdc");
            }
            if ($.sddpVersion == null) {
                throw new MissingRequiredPropertyException("InstanceArgs", "sddpVersion");
            }
            if ($.udCbool == null) {
                throw new MissingRequiredPropertyException("InstanceArgs", "udCbool");
            }
            if ($.udc == null) {
                throw new MissingRequiredPropertyException("InstanceArgs", "udc");
            }
            return $;
        }
    }

}
