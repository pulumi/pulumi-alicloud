// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.cr;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class NamespaceArgs extends com.pulumi.resources.ResourceArgs {

    public static final NamespaceArgs Empty = new NamespaceArgs();

    /**
     * Boolean, when it set to true, repositories are automatically created when pushing new images. If it set to false, you create repository for images before pushing.
     * 
     */
    @Import(name="autoCreate", required=true)
    private Output<Boolean> autoCreate;

    /**
     * @return Boolean, when it set to true, repositories are automatically created when pushing new images. If it set to false, you create repository for images before pushing.
     * 
     */
    public Output<Boolean> autoCreate() {
        return this.autoCreate;
    }

    /**
     * `PUBLIC` or `PRIVATE`, default repository visibility in this namespace.
     * 
     */
    @Import(name="defaultVisibility", required=true)
    private Output<String> defaultVisibility;

    /**
     * @return `PUBLIC` or `PRIVATE`, default repository visibility in this namespace.
     * 
     */
    public Output<String> defaultVisibility() {
        return this.defaultVisibility;
    }

    /**
     * Name of Container Registry namespace.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of Container Registry namespace.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    private NamespaceArgs() {}

    private NamespaceArgs(NamespaceArgs $) {
        this.autoCreate = $.autoCreate;
        this.defaultVisibility = $.defaultVisibility;
        this.name = $.name;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NamespaceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NamespaceArgs $;

        public Builder() {
            $ = new NamespaceArgs();
        }

        public Builder(NamespaceArgs defaults) {
            $ = new NamespaceArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param autoCreate Boolean, when it set to true, repositories are automatically created when pushing new images. If it set to false, you create repository for images before pushing.
         * 
         * @return builder
         * 
         */
        public Builder autoCreate(Output<Boolean> autoCreate) {
            $.autoCreate = autoCreate;
            return this;
        }

        /**
         * @param autoCreate Boolean, when it set to true, repositories are automatically created when pushing new images. If it set to false, you create repository for images before pushing.
         * 
         * @return builder
         * 
         */
        public Builder autoCreate(Boolean autoCreate) {
            return autoCreate(Output.of(autoCreate));
        }

        /**
         * @param defaultVisibility `PUBLIC` or `PRIVATE`, default repository visibility in this namespace.
         * 
         * @return builder
         * 
         */
        public Builder defaultVisibility(Output<String> defaultVisibility) {
            $.defaultVisibility = defaultVisibility;
            return this;
        }

        /**
         * @param defaultVisibility `PUBLIC` or `PRIVATE`, default repository visibility in this namespace.
         * 
         * @return builder
         * 
         */
        public Builder defaultVisibility(String defaultVisibility) {
            return defaultVisibility(Output.of(defaultVisibility));
        }

        /**
         * @param name Name of Container Registry namespace.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of Container Registry namespace.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public NamespaceArgs build() {
            if ($.autoCreate == null) {
                throw new MissingRequiredPropertyException("NamespaceArgs", "autoCreate");
            }
            if ($.defaultVisibility == null) {
                throw new MissingRequiredPropertyException("NamespaceArgs", "defaultVisibility");
            }
            return $;
        }
    }

}
