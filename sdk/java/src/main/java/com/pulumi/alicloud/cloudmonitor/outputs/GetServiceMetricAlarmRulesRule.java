// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.cloudmonitor.outputs;

import com.pulumi.alicloud.cloudmonitor.outputs.GetServiceMetricAlarmRulesRuleCompositeExpression;
import com.pulumi.alicloud.cloudmonitor.outputs.GetServiceMetricAlarmRulesRuleEscalations;
import com.pulumi.alicloud.cloudmonitor.outputs.GetServiceMetricAlarmRulesRuleLabel;
import com.pulumi.alicloud.cloudmonitor.outputs.GetServiceMetricAlarmRulesRulePrometheus;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetServiceMetricAlarmRulesRule {
    /**
     * @return The trigger conditions for multiple metrics.
     * 
     */
    private GetServiceMetricAlarmRulesRuleCompositeExpression compositeExpression;
    /**
     * @return The alert contact group.
     * 
     */
    private String contactGroups;
    /**
     * @return The monitoring dimensions of the specified resource.
     * 
     */
    private String dimensions;
    /**
     * @return The time period during which the alert rule is effective.
     * 
     */
    private String effectiveInterval;
    /**
     * @return The subject of the alert notification email.
     * 
     */
    private String emailSubject;
    /**
     * @return The conditions for triggering different levels of alerts.
     * 
     */
    private GetServiceMetricAlarmRulesRuleEscalations escalations;
    /**
     * @return The ID of the alert rule.
     * 
     */
    private String id;
    /**
     * @return The tags of the alert rule.
     * 
     */
    private List<GetServiceMetricAlarmRulesRuleLabel> labels;
    /**
     * @return The name of the metric.
     * 
     */
    private String metricName;
    /**
     * @return The namespace of the cloud service.
     * 
     */
    private String namespace;
    /**
     * @return The method that is used to handle alerts when no monitoring data is found.
     * 
     */
    private String noDataPolicy;
    /**
     * @return The time period during which the alert rule is ineffective.
     * 
     */
    private String noEffectiveInterval;
    /**
     * @return The aggregation period of the metric.
     * 
     */
    private String period;
    /**
     * @return The Prometheus alerts.
     * 
     */
    private GetServiceMetricAlarmRulesRulePrometheus prometheus;
    /**
     * @return The resources that are associated with the alert rule.
     * 
     */
    private String resources;
    /**
     * @return The name of the alert rule.
     * 
     */
    private String ruleName;
    /**
     * @return The mute period during which new alert notifications are not sent even if the trigger conditions are met.
     * 
     */
    private String silenceTime;
    /**
     * @return The type of the alert rule.
     * 
     */
    private String sourceType;
    /**
     * @return Specifies whether to query enabled or disabled alert rules. Valid values: `true`, `false`.
     * 
     */
    private Boolean status;
    /**
     * @return The callback URL.
     * 
     */
    private String webhook;

    private GetServiceMetricAlarmRulesRule() {}
    /**
     * @return The trigger conditions for multiple metrics.
     * 
     */
    public GetServiceMetricAlarmRulesRuleCompositeExpression compositeExpression() {
        return this.compositeExpression;
    }
    /**
     * @return The alert contact group.
     * 
     */
    public String contactGroups() {
        return this.contactGroups;
    }
    /**
     * @return The monitoring dimensions of the specified resource.
     * 
     */
    public String dimensions() {
        return this.dimensions;
    }
    /**
     * @return The time period during which the alert rule is effective.
     * 
     */
    public String effectiveInterval() {
        return this.effectiveInterval;
    }
    /**
     * @return The subject of the alert notification email.
     * 
     */
    public String emailSubject() {
        return this.emailSubject;
    }
    /**
     * @return The conditions for triggering different levels of alerts.
     * 
     */
    public GetServiceMetricAlarmRulesRuleEscalations escalations() {
        return this.escalations;
    }
    /**
     * @return The ID of the alert rule.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The tags of the alert rule.
     * 
     */
    public List<GetServiceMetricAlarmRulesRuleLabel> labels() {
        return this.labels;
    }
    /**
     * @return The name of the metric.
     * 
     */
    public String metricName() {
        return this.metricName;
    }
    /**
     * @return The namespace of the cloud service.
     * 
     */
    public String namespace() {
        return this.namespace;
    }
    /**
     * @return The method that is used to handle alerts when no monitoring data is found.
     * 
     */
    public String noDataPolicy() {
        return this.noDataPolicy;
    }
    /**
     * @return The time period during which the alert rule is ineffective.
     * 
     */
    public String noEffectiveInterval() {
        return this.noEffectiveInterval;
    }
    /**
     * @return The aggregation period of the metric.
     * 
     */
    public String period() {
        return this.period;
    }
    /**
     * @return The Prometheus alerts.
     * 
     */
    public GetServiceMetricAlarmRulesRulePrometheus prometheus() {
        return this.prometheus;
    }
    /**
     * @return The resources that are associated with the alert rule.
     * 
     */
    public String resources() {
        return this.resources;
    }
    /**
     * @return The name of the alert rule.
     * 
     */
    public String ruleName() {
        return this.ruleName;
    }
    /**
     * @return The mute period during which new alert notifications are not sent even if the trigger conditions are met.
     * 
     */
    public String silenceTime() {
        return this.silenceTime;
    }
    /**
     * @return The type of the alert rule.
     * 
     */
    public String sourceType() {
        return this.sourceType;
    }
    /**
     * @return Specifies whether to query enabled or disabled alert rules. Valid values: `true`, `false`.
     * 
     */
    public Boolean status() {
        return this.status;
    }
    /**
     * @return The callback URL.
     * 
     */
    public String webhook() {
        return this.webhook;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetServiceMetricAlarmRulesRule defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private GetServiceMetricAlarmRulesRuleCompositeExpression compositeExpression;
        private String contactGroups;
        private String dimensions;
        private String effectiveInterval;
        private String emailSubject;
        private GetServiceMetricAlarmRulesRuleEscalations escalations;
        private String id;
        private List<GetServiceMetricAlarmRulesRuleLabel> labels;
        private String metricName;
        private String namespace;
        private String noDataPolicy;
        private String noEffectiveInterval;
        private String period;
        private GetServiceMetricAlarmRulesRulePrometheus prometheus;
        private String resources;
        private String ruleName;
        private String silenceTime;
        private String sourceType;
        private Boolean status;
        private String webhook;
        public Builder() {}
        public Builder(GetServiceMetricAlarmRulesRule defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.compositeExpression = defaults.compositeExpression;
    	      this.contactGroups = defaults.contactGroups;
    	      this.dimensions = defaults.dimensions;
    	      this.effectiveInterval = defaults.effectiveInterval;
    	      this.emailSubject = defaults.emailSubject;
    	      this.escalations = defaults.escalations;
    	      this.id = defaults.id;
    	      this.labels = defaults.labels;
    	      this.metricName = defaults.metricName;
    	      this.namespace = defaults.namespace;
    	      this.noDataPolicy = defaults.noDataPolicy;
    	      this.noEffectiveInterval = defaults.noEffectiveInterval;
    	      this.period = defaults.period;
    	      this.prometheus = defaults.prometheus;
    	      this.resources = defaults.resources;
    	      this.ruleName = defaults.ruleName;
    	      this.silenceTime = defaults.silenceTime;
    	      this.sourceType = defaults.sourceType;
    	      this.status = defaults.status;
    	      this.webhook = defaults.webhook;
        }

        @CustomType.Setter
        public Builder compositeExpression(GetServiceMetricAlarmRulesRuleCompositeExpression compositeExpression) {
            if (compositeExpression == null) {
              throw new MissingRequiredPropertyException("GetServiceMetricAlarmRulesRule", "compositeExpression");
            }
            this.compositeExpression = compositeExpression;
            return this;
        }
        @CustomType.Setter
        public Builder contactGroups(String contactGroups) {
            if (contactGroups == null) {
              throw new MissingRequiredPropertyException("GetServiceMetricAlarmRulesRule", "contactGroups");
            }
            this.contactGroups = contactGroups;
            return this;
        }
        @CustomType.Setter
        public Builder dimensions(String dimensions) {
            if (dimensions == null) {
              throw new MissingRequiredPropertyException("GetServiceMetricAlarmRulesRule", "dimensions");
            }
            this.dimensions = dimensions;
            return this;
        }
        @CustomType.Setter
        public Builder effectiveInterval(String effectiveInterval) {
            if (effectiveInterval == null) {
              throw new MissingRequiredPropertyException("GetServiceMetricAlarmRulesRule", "effectiveInterval");
            }
            this.effectiveInterval = effectiveInterval;
            return this;
        }
        @CustomType.Setter
        public Builder emailSubject(String emailSubject) {
            if (emailSubject == null) {
              throw new MissingRequiredPropertyException("GetServiceMetricAlarmRulesRule", "emailSubject");
            }
            this.emailSubject = emailSubject;
            return this;
        }
        @CustomType.Setter
        public Builder escalations(GetServiceMetricAlarmRulesRuleEscalations escalations) {
            if (escalations == null) {
              throw new MissingRequiredPropertyException("GetServiceMetricAlarmRulesRule", "escalations");
            }
            this.escalations = escalations;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetServiceMetricAlarmRulesRule", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder labels(List<GetServiceMetricAlarmRulesRuleLabel> labels) {
            if (labels == null) {
              throw new MissingRequiredPropertyException("GetServiceMetricAlarmRulesRule", "labels");
            }
            this.labels = labels;
            return this;
        }
        public Builder labels(GetServiceMetricAlarmRulesRuleLabel... labels) {
            return labels(List.of(labels));
        }
        @CustomType.Setter
        public Builder metricName(String metricName) {
            if (metricName == null) {
              throw new MissingRequiredPropertyException("GetServiceMetricAlarmRulesRule", "metricName");
            }
            this.metricName = metricName;
            return this;
        }
        @CustomType.Setter
        public Builder namespace(String namespace) {
            if (namespace == null) {
              throw new MissingRequiredPropertyException("GetServiceMetricAlarmRulesRule", "namespace");
            }
            this.namespace = namespace;
            return this;
        }
        @CustomType.Setter
        public Builder noDataPolicy(String noDataPolicy) {
            if (noDataPolicy == null) {
              throw new MissingRequiredPropertyException("GetServiceMetricAlarmRulesRule", "noDataPolicy");
            }
            this.noDataPolicy = noDataPolicy;
            return this;
        }
        @CustomType.Setter
        public Builder noEffectiveInterval(String noEffectiveInterval) {
            if (noEffectiveInterval == null) {
              throw new MissingRequiredPropertyException("GetServiceMetricAlarmRulesRule", "noEffectiveInterval");
            }
            this.noEffectiveInterval = noEffectiveInterval;
            return this;
        }
        @CustomType.Setter
        public Builder period(String period) {
            if (period == null) {
              throw new MissingRequiredPropertyException("GetServiceMetricAlarmRulesRule", "period");
            }
            this.period = period;
            return this;
        }
        @CustomType.Setter
        public Builder prometheus(GetServiceMetricAlarmRulesRulePrometheus prometheus) {
            if (prometheus == null) {
              throw new MissingRequiredPropertyException("GetServiceMetricAlarmRulesRule", "prometheus");
            }
            this.prometheus = prometheus;
            return this;
        }
        @CustomType.Setter
        public Builder resources(String resources) {
            if (resources == null) {
              throw new MissingRequiredPropertyException("GetServiceMetricAlarmRulesRule", "resources");
            }
            this.resources = resources;
            return this;
        }
        @CustomType.Setter
        public Builder ruleName(String ruleName) {
            if (ruleName == null) {
              throw new MissingRequiredPropertyException("GetServiceMetricAlarmRulesRule", "ruleName");
            }
            this.ruleName = ruleName;
            return this;
        }
        @CustomType.Setter
        public Builder silenceTime(String silenceTime) {
            if (silenceTime == null) {
              throw new MissingRequiredPropertyException("GetServiceMetricAlarmRulesRule", "silenceTime");
            }
            this.silenceTime = silenceTime;
            return this;
        }
        @CustomType.Setter
        public Builder sourceType(String sourceType) {
            if (sourceType == null) {
              throw new MissingRequiredPropertyException("GetServiceMetricAlarmRulesRule", "sourceType");
            }
            this.sourceType = sourceType;
            return this;
        }
        @CustomType.Setter
        public Builder status(Boolean status) {
            if (status == null) {
              throw new MissingRequiredPropertyException("GetServiceMetricAlarmRulesRule", "status");
            }
            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder webhook(String webhook) {
            if (webhook == null) {
              throw new MissingRequiredPropertyException("GetServiceMetricAlarmRulesRule", "webhook");
            }
            this.webhook = webhook;
            return this;
        }
        public GetServiceMetricAlarmRulesRule build() {
            final var _resultValue = new GetServiceMetricAlarmRulesRule();
            _resultValue.compositeExpression = compositeExpression;
            _resultValue.contactGroups = contactGroups;
            _resultValue.dimensions = dimensions;
            _resultValue.effectiveInterval = effectiveInterval;
            _resultValue.emailSubject = emailSubject;
            _resultValue.escalations = escalations;
            _resultValue.id = id;
            _resultValue.labels = labels;
            _resultValue.metricName = metricName;
            _resultValue.namespace = namespace;
            _resultValue.noDataPolicy = noDataPolicy;
            _resultValue.noEffectiveInterval = noEffectiveInterval;
            _resultValue.period = period;
            _resultValue.prometheus = prometheus;
            _resultValue.resources = resources;
            _resultValue.ruleName = ruleName;
            _resultValue.silenceTime = silenceTime;
            _resultValue.sourceType = sourceType;
            _resultValue.status = status;
            _resultValue.webhook = webhook;
            return _resultValue;
        }
    }
}
