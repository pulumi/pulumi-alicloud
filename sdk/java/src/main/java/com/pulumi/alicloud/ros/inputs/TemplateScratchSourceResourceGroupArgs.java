// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.ros.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TemplateScratchSourceResourceGroupArgs extends com.pulumi.resources.ResourceArgs {

    public static final TemplateScratchSourceResourceGroupArgs Empty = new TemplateScratchSourceResourceGroupArgs();

    /**
     * The ID of the Source Resource Group.
     * 
     */
    @Import(name="resourceGroupId", required=true)
    private Output<String> resourceGroupId;

    /**
     * @return The ID of the Source Resource Group.
     * 
     */
    public Output<String> resourceGroupId() {
        return this.resourceGroupId;
    }

    /**
     * Source resource type filter list. If the resource type list is specified, it means to scan the resources of the specified resource type and in the specified resource group; Otherwise, it means to scan all resources in the specified resource group. **NOTE:** A maximum of `20` resource type filter can be configured.
     * 
     */
    @Import(name="resourceTypeFilters")
    private @Nullable Output<List<String>> resourceTypeFilters;

    /**
     * @return Source resource type filter list. If the resource type list is specified, it means to scan the resources of the specified resource type and in the specified resource group; Otherwise, it means to scan all resources in the specified resource group. **NOTE:** A maximum of `20` resource type filter can be configured.
     * 
     */
    public Optional<Output<List<String>>> resourceTypeFilters() {
        return Optional.ofNullable(this.resourceTypeFilters);
    }

    private TemplateScratchSourceResourceGroupArgs() {}

    private TemplateScratchSourceResourceGroupArgs(TemplateScratchSourceResourceGroupArgs $) {
        this.resourceGroupId = $.resourceGroupId;
        this.resourceTypeFilters = $.resourceTypeFilters;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TemplateScratchSourceResourceGroupArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TemplateScratchSourceResourceGroupArgs $;

        public Builder() {
            $ = new TemplateScratchSourceResourceGroupArgs();
        }

        public Builder(TemplateScratchSourceResourceGroupArgs defaults) {
            $ = new TemplateScratchSourceResourceGroupArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param resourceGroupId The ID of the Source Resource Group.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupId(Output<String> resourceGroupId) {
            $.resourceGroupId = resourceGroupId;
            return this;
        }

        /**
         * @param resourceGroupId The ID of the Source Resource Group.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupId(String resourceGroupId) {
            return resourceGroupId(Output.of(resourceGroupId));
        }

        /**
         * @param resourceTypeFilters Source resource type filter list. If the resource type list is specified, it means to scan the resources of the specified resource type and in the specified resource group; Otherwise, it means to scan all resources in the specified resource group. **NOTE:** A maximum of `20` resource type filter can be configured.
         * 
         * @return builder
         * 
         */
        public Builder resourceTypeFilters(@Nullable Output<List<String>> resourceTypeFilters) {
            $.resourceTypeFilters = resourceTypeFilters;
            return this;
        }

        /**
         * @param resourceTypeFilters Source resource type filter list. If the resource type list is specified, it means to scan the resources of the specified resource type and in the specified resource group; Otherwise, it means to scan all resources in the specified resource group. **NOTE:** A maximum of `20` resource type filter can be configured.
         * 
         * @return builder
         * 
         */
        public Builder resourceTypeFilters(List<String> resourceTypeFilters) {
            return resourceTypeFilters(Output.of(resourceTypeFilters));
        }

        /**
         * @param resourceTypeFilters Source resource type filter list. If the resource type list is specified, it means to scan the resources of the specified resource type and in the specified resource group; Otherwise, it means to scan all resources in the specified resource group. **NOTE:** A maximum of `20` resource type filter can be configured.
         * 
         * @return builder
         * 
         */
        public Builder resourceTypeFilters(String... resourceTypeFilters) {
            return resourceTypeFilters(List.of(resourceTypeFilters));
        }

        public TemplateScratchSourceResourceGroupArgs build() {
            if ($.resourceGroupId == null) {
                throw new MissingRequiredPropertyException("TemplateScratchSourceResourceGroupArgs", "resourceGroupId");
            }
            return $;
        }
    }

}
