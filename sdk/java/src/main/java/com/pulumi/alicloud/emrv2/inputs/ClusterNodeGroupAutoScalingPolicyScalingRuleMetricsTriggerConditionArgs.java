// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.emrv2.inputs;

import com.pulumi.alicloud.emrv2.inputs.ClusterNodeGroupAutoScalingPolicyScalingRuleMetricsTriggerConditionTagArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ClusterNodeGroupAutoScalingPolicyScalingRuleMetricsTriggerConditionArgs extends com.pulumi.resources.ResourceArgs {

    public static final ClusterNodeGroupAutoScalingPolicyScalingRuleMetricsTriggerConditionArgs Empty = new ClusterNodeGroupAutoScalingPolicyScalingRuleMetricsTriggerConditionArgs();

    /**
     * The comparison operator for this scaling rule specific metrics trigger. Invalid values: `EQ`, `NE`, `GT`, `LT`, `GE`, `LE`.
     * 
     */
    @Import(name="comparisonOperator", required=true)
    private Output<String> comparisonOperator;

    /**
     * @return The comparison operator for this scaling rule specific metrics trigger. Invalid values: `EQ`, `NE`, `GT`, `LT`, `GE`, `LE`.
     * 
     */
    public Output<String> comparisonOperator() {
        return this.comparisonOperator;
    }

    /**
     * The metric name for this scaling rule specific metrics trigger.
     * 
     */
    @Import(name="metricName", required=true)
    private Output<String> metricName;

    /**
     * @return The metric name for this scaling rule specific metrics trigger.
     * 
     */
    public Output<String> metricName() {
        return this.metricName;
    }

    /**
     * The statistics for this scaling rule specific metrics trigger.
     * 
     */
    @Import(name="statistics", required=true)
    private Output<String> statistics;

    /**
     * @return The statistics for this scaling rule specific metrics trigger.
     * 
     */
    public Output<String> statistics() {
        return this.statistics;
    }

    /**
     * A mapping of tags to assign to the resource.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<ClusterNodeGroupAutoScalingPolicyScalingRuleMetricsTriggerConditionTagArgs>> tags;

    /**
     * @return A mapping of tags to assign to the resource.
     * 
     */
    public Optional<Output<List<ClusterNodeGroupAutoScalingPolicyScalingRuleMetricsTriggerConditionTagArgs>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * The threshold for this scaling rule specific metrics trigger.
     * 
     */
    @Import(name="threshold", required=true)
    private Output<Double> threshold;

    /**
     * @return The threshold for this scaling rule specific metrics trigger.
     * 
     */
    public Output<Double> threshold() {
        return this.threshold;
    }

    private ClusterNodeGroupAutoScalingPolicyScalingRuleMetricsTriggerConditionArgs() {}

    private ClusterNodeGroupAutoScalingPolicyScalingRuleMetricsTriggerConditionArgs(ClusterNodeGroupAutoScalingPolicyScalingRuleMetricsTriggerConditionArgs $) {
        this.comparisonOperator = $.comparisonOperator;
        this.metricName = $.metricName;
        this.statistics = $.statistics;
        this.tags = $.tags;
        this.threshold = $.threshold;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ClusterNodeGroupAutoScalingPolicyScalingRuleMetricsTriggerConditionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ClusterNodeGroupAutoScalingPolicyScalingRuleMetricsTriggerConditionArgs $;

        public Builder() {
            $ = new ClusterNodeGroupAutoScalingPolicyScalingRuleMetricsTriggerConditionArgs();
        }

        public Builder(ClusterNodeGroupAutoScalingPolicyScalingRuleMetricsTriggerConditionArgs defaults) {
            $ = new ClusterNodeGroupAutoScalingPolicyScalingRuleMetricsTriggerConditionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param comparisonOperator The comparison operator for this scaling rule specific metrics trigger. Invalid values: `EQ`, `NE`, `GT`, `LT`, `GE`, `LE`.
         * 
         * @return builder
         * 
         */
        public Builder comparisonOperator(Output<String> comparisonOperator) {
            $.comparisonOperator = comparisonOperator;
            return this;
        }

        /**
         * @param comparisonOperator The comparison operator for this scaling rule specific metrics trigger. Invalid values: `EQ`, `NE`, `GT`, `LT`, `GE`, `LE`.
         * 
         * @return builder
         * 
         */
        public Builder comparisonOperator(String comparisonOperator) {
            return comparisonOperator(Output.of(comparisonOperator));
        }

        /**
         * @param metricName The metric name for this scaling rule specific metrics trigger.
         * 
         * @return builder
         * 
         */
        public Builder metricName(Output<String> metricName) {
            $.metricName = metricName;
            return this;
        }

        /**
         * @param metricName The metric name for this scaling rule specific metrics trigger.
         * 
         * @return builder
         * 
         */
        public Builder metricName(String metricName) {
            return metricName(Output.of(metricName));
        }

        /**
         * @param statistics The statistics for this scaling rule specific metrics trigger.
         * 
         * @return builder
         * 
         */
        public Builder statistics(Output<String> statistics) {
            $.statistics = statistics;
            return this;
        }

        /**
         * @param statistics The statistics for this scaling rule specific metrics trigger.
         * 
         * @return builder
         * 
         */
        public Builder statistics(String statistics) {
            return statistics(Output.of(statistics));
        }

        /**
         * @param tags A mapping of tags to assign to the resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<List<ClusterNodeGroupAutoScalingPolicyScalingRuleMetricsTriggerConditionTagArgs>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags A mapping of tags to assign to the resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(List<ClusterNodeGroupAutoScalingPolicyScalingRuleMetricsTriggerConditionTagArgs> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags A mapping of tags to assign to the resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(ClusterNodeGroupAutoScalingPolicyScalingRuleMetricsTriggerConditionTagArgs... tags) {
            return tags(List.of(tags));
        }

        /**
         * @param threshold The threshold for this scaling rule specific metrics trigger.
         * 
         * @return builder
         * 
         */
        public Builder threshold(Output<Double> threshold) {
            $.threshold = threshold;
            return this;
        }

        /**
         * @param threshold The threshold for this scaling rule specific metrics trigger.
         * 
         * @return builder
         * 
         */
        public Builder threshold(Double threshold) {
            return threshold(Output.of(threshold));
        }

        public ClusterNodeGroupAutoScalingPolicyScalingRuleMetricsTriggerConditionArgs build() {
            if ($.comparisonOperator == null) {
                throw new MissingRequiredPropertyException("ClusterNodeGroupAutoScalingPolicyScalingRuleMetricsTriggerConditionArgs", "comparisonOperator");
            }
            if ($.metricName == null) {
                throw new MissingRequiredPropertyException("ClusterNodeGroupAutoScalingPolicyScalingRuleMetricsTriggerConditionArgs", "metricName");
            }
            if ($.statistics == null) {
                throw new MissingRequiredPropertyException("ClusterNodeGroupAutoScalingPolicyScalingRuleMetricsTriggerConditionArgs", "statistics");
            }
            if ($.threshold == null) {
                throw new MissingRequiredPropertyException("ClusterNodeGroupAutoScalingPolicyScalingRuleMetricsTriggerConditionArgs", "threshold");
            }
            return $;
        }
    }

}
