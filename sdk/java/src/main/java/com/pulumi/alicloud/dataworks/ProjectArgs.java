// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.dataworks;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ProjectArgs extends com.pulumi.resources.ResourceArgs {

    public static final ProjectArgs Empty = new ProjectArgs();

    /**
     * Description of the workspace
     * 
     */
    @Import(name="description", required=true)
    private Output<String> description;

    /**
     * @return Description of the workspace
     * 
     */
    public Output<String> description() {
        return this.description;
    }

    /**
     * The display name of the workspace.
     * 
     */
    @Import(name="displayName", required=true)
    private Output<String> displayName;

    /**
     * @return The display name of the workspace.
     * 
     */
    public Output<String> displayName() {
        return this.displayName;
    }

    /**
     * The mode of the workspace, with the following values:
     * - 2, indicates the simple workspace mode.
     * - 3, indicating the standard workspace mode.
     * 
     */
    @Import(name="projectMode")
    private @Nullable Output<Integer> projectMode;

    /**
     * @return The mode of the workspace, with the following values:
     * - 2, indicates the simple workspace mode.
     * - 3, indicating the standard workspace mode.
     * 
     */
    public Optional<Output<Integer>> projectMode() {
        return Optional.ofNullable(this.projectMode);
    }

    /**
     * Immutable Name of the workspace.
     * 
     */
    @Import(name="projectName", required=true)
    private Output<String> projectName;

    /**
     * @return Immutable Name of the workspace.
     * 
     */
    public Output<String> projectName() {
        return this.projectName;
    }

    /**
     * The status of the resource
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return The status of the resource
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    private ProjectArgs() {}

    private ProjectArgs(ProjectArgs $) {
        this.description = $.description;
        this.displayName = $.displayName;
        this.projectMode = $.projectMode;
        this.projectName = $.projectName;
        this.status = $.status;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ProjectArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ProjectArgs $;

        public Builder() {
            $ = new ProjectArgs();
        }

        public Builder(ProjectArgs defaults) {
            $ = new ProjectArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param description Description of the workspace
         * 
         * @return builder
         * 
         */
        public Builder description(Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Description of the workspace
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param displayName The display name of the workspace.
         * 
         * @return builder
         * 
         */
        public Builder displayName(Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName The display name of the workspace.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param projectMode The mode of the workspace, with the following values:
         * - 2, indicates the simple workspace mode.
         * - 3, indicating the standard workspace mode.
         * 
         * @return builder
         * 
         */
        public Builder projectMode(@Nullable Output<Integer> projectMode) {
            $.projectMode = projectMode;
            return this;
        }

        /**
         * @param projectMode The mode of the workspace, with the following values:
         * - 2, indicates the simple workspace mode.
         * - 3, indicating the standard workspace mode.
         * 
         * @return builder
         * 
         */
        public Builder projectMode(Integer projectMode) {
            return projectMode(Output.of(projectMode));
        }

        /**
         * @param projectName Immutable Name of the workspace.
         * 
         * @return builder
         * 
         */
        public Builder projectName(Output<String> projectName) {
            $.projectName = projectName;
            return this;
        }

        /**
         * @param projectName Immutable Name of the workspace.
         * 
         * @return builder
         * 
         */
        public Builder projectName(String projectName) {
            return projectName(Output.of(projectName));
        }

        /**
         * @param status The status of the resource
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status The status of the resource
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        public ProjectArgs build() {
            if ($.description == null) {
                throw new MissingRequiredPropertyException("ProjectArgs", "description");
            }
            if ($.displayName == null) {
                throw new MissingRequiredPropertyException("ProjectArgs", "displayName");
            }
            if ($.projectName == null) {
                throw new MissingRequiredPropertyException("ProjectArgs", "projectName");
            }
            return $;
        }
    }

}
