// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.cen;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TransitRouterRouteEntryArgs extends com.pulumi.resources.ResourceArgs {

    public static final TransitRouterRouteEntryArgs Empty = new TransitRouterRouteEntryArgs();

    /**
     * The dry run.
     * 
     * &gt; **NOTE:** If transit_router_route_entry_next_hop_type is `Attachment`, transit_router_route_entry_next_hop_id is required.
     * If transit_router_route_entry_next_hop_type is `BlackHole`, transit_router_route_entry_next_hop_id cannot be filled.
     * 
     */
    @Import(name="dryRun")
    private @Nullable Output<Boolean> dryRun;

    /**
     * @return The dry run.
     * 
     * &gt; **NOTE:** If transit_router_route_entry_next_hop_type is `Attachment`, transit_router_route_entry_next_hop_id is required.
     * If transit_router_route_entry_next_hop_type is `BlackHole`, transit_router_route_entry_next_hop_id cannot be filled.
     * 
     */
    public Optional<Output<Boolean>> dryRun() {
        return Optional.ofNullable(this.dryRun);
    }

    /**
     * The description of the transit router route entry.
     * 
     */
    @Import(name="transitRouterRouteEntryDescription")
    private @Nullable Output<String> transitRouterRouteEntryDescription;

    /**
     * @return The description of the transit router route entry.
     * 
     */
    public Optional<Output<String>> transitRouterRouteEntryDescription() {
        return Optional.ofNullable(this.transitRouterRouteEntryDescription);
    }

    /**
     * The CIDR of the transit router route entry.
     * 
     */
    @Import(name="transitRouterRouteEntryDestinationCidrBlock", required=true)
    private Output<String> transitRouterRouteEntryDestinationCidrBlock;

    /**
     * @return The CIDR of the transit router route entry.
     * 
     */
    public Output<String> transitRouterRouteEntryDestinationCidrBlock() {
        return this.transitRouterRouteEntryDestinationCidrBlock;
    }

    /**
     * The name of the transit router route entry.
     * 
     */
    @Import(name="transitRouterRouteEntryName")
    private @Nullable Output<String> transitRouterRouteEntryName;

    /**
     * @return The name of the transit router route entry.
     * 
     */
    public Optional<Output<String>> transitRouterRouteEntryName() {
        return Optional.ofNullable(this.transitRouterRouteEntryName);
    }

    /**
     * The ID of the transit router route entry next hop.
     * 
     */
    @Import(name="transitRouterRouteEntryNextHopId")
    private @Nullable Output<String> transitRouterRouteEntryNextHopId;

    /**
     * @return The ID of the transit router route entry next hop.
     * 
     */
    public Optional<Output<String>> transitRouterRouteEntryNextHopId() {
        return Optional.ofNullable(this.transitRouterRouteEntryNextHopId);
    }

    /**
     * The Type of the transit router route entry next hop,Valid values `Attachment` and `BlackHole`.
     * 
     */
    @Import(name="transitRouterRouteEntryNextHopType", required=true)
    private Output<String> transitRouterRouteEntryNextHopType;

    /**
     * @return The Type of the transit router route entry next hop,Valid values `Attachment` and `BlackHole`.
     * 
     */
    public Output<String> transitRouterRouteEntryNextHopType() {
        return this.transitRouterRouteEntryNextHopType;
    }

    /**
     * The ID of the transit router route table.
     * 
     */
    @Import(name="transitRouterRouteTableId", required=true)
    private Output<String> transitRouterRouteTableId;

    /**
     * @return The ID of the transit router route table.
     * 
     */
    public Output<String> transitRouterRouteTableId() {
        return this.transitRouterRouteTableId;
    }

    private TransitRouterRouteEntryArgs() {}

    private TransitRouterRouteEntryArgs(TransitRouterRouteEntryArgs $) {
        this.dryRun = $.dryRun;
        this.transitRouterRouteEntryDescription = $.transitRouterRouteEntryDescription;
        this.transitRouterRouteEntryDestinationCidrBlock = $.transitRouterRouteEntryDestinationCidrBlock;
        this.transitRouterRouteEntryName = $.transitRouterRouteEntryName;
        this.transitRouterRouteEntryNextHopId = $.transitRouterRouteEntryNextHopId;
        this.transitRouterRouteEntryNextHopType = $.transitRouterRouteEntryNextHopType;
        this.transitRouterRouteTableId = $.transitRouterRouteTableId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TransitRouterRouteEntryArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TransitRouterRouteEntryArgs $;

        public Builder() {
            $ = new TransitRouterRouteEntryArgs();
        }

        public Builder(TransitRouterRouteEntryArgs defaults) {
            $ = new TransitRouterRouteEntryArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param dryRun The dry run.
         * 
         * &gt; **NOTE:** If transit_router_route_entry_next_hop_type is `Attachment`, transit_router_route_entry_next_hop_id is required.
         * If transit_router_route_entry_next_hop_type is `BlackHole`, transit_router_route_entry_next_hop_id cannot be filled.
         * 
         * @return builder
         * 
         */
        public Builder dryRun(@Nullable Output<Boolean> dryRun) {
            $.dryRun = dryRun;
            return this;
        }

        /**
         * @param dryRun The dry run.
         * 
         * &gt; **NOTE:** If transit_router_route_entry_next_hop_type is `Attachment`, transit_router_route_entry_next_hop_id is required.
         * If transit_router_route_entry_next_hop_type is `BlackHole`, transit_router_route_entry_next_hop_id cannot be filled.
         * 
         * @return builder
         * 
         */
        public Builder dryRun(Boolean dryRun) {
            return dryRun(Output.of(dryRun));
        }

        /**
         * @param transitRouterRouteEntryDescription The description of the transit router route entry.
         * 
         * @return builder
         * 
         */
        public Builder transitRouterRouteEntryDescription(@Nullable Output<String> transitRouterRouteEntryDescription) {
            $.transitRouterRouteEntryDescription = transitRouterRouteEntryDescription;
            return this;
        }

        /**
         * @param transitRouterRouteEntryDescription The description of the transit router route entry.
         * 
         * @return builder
         * 
         */
        public Builder transitRouterRouteEntryDescription(String transitRouterRouteEntryDescription) {
            return transitRouterRouteEntryDescription(Output.of(transitRouterRouteEntryDescription));
        }

        /**
         * @param transitRouterRouteEntryDestinationCidrBlock The CIDR of the transit router route entry.
         * 
         * @return builder
         * 
         */
        public Builder transitRouterRouteEntryDestinationCidrBlock(Output<String> transitRouterRouteEntryDestinationCidrBlock) {
            $.transitRouterRouteEntryDestinationCidrBlock = transitRouterRouteEntryDestinationCidrBlock;
            return this;
        }

        /**
         * @param transitRouterRouteEntryDestinationCidrBlock The CIDR of the transit router route entry.
         * 
         * @return builder
         * 
         */
        public Builder transitRouterRouteEntryDestinationCidrBlock(String transitRouterRouteEntryDestinationCidrBlock) {
            return transitRouterRouteEntryDestinationCidrBlock(Output.of(transitRouterRouteEntryDestinationCidrBlock));
        }

        /**
         * @param transitRouterRouteEntryName The name of the transit router route entry.
         * 
         * @return builder
         * 
         */
        public Builder transitRouterRouteEntryName(@Nullable Output<String> transitRouterRouteEntryName) {
            $.transitRouterRouteEntryName = transitRouterRouteEntryName;
            return this;
        }

        /**
         * @param transitRouterRouteEntryName The name of the transit router route entry.
         * 
         * @return builder
         * 
         */
        public Builder transitRouterRouteEntryName(String transitRouterRouteEntryName) {
            return transitRouterRouteEntryName(Output.of(transitRouterRouteEntryName));
        }

        /**
         * @param transitRouterRouteEntryNextHopId The ID of the transit router route entry next hop.
         * 
         * @return builder
         * 
         */
        public Builder transitRouterRouteEntryNextHopId(@Nullable Output<String> transitRouterRouteEntryNextHopId) {
            $.transitRouterRouteEntryNextHopId = transitRouterRouteEntryNextHopId;
            return this;
        }

        /**
         * @param transitRouterRouteEntryNextHopId The ID of the transit router route entry next hop.
         * 
         * @return builder
         * 
         */
        public Builder transitRouterRouteEntryNextHopId(String transitRouterRouteEntryNextHopId) {
            return transitRouterRouteEntryNextHopId(Output.of(transitRouterRouteEntryNextHopId));
        }

        /**
         * @param transitRouterRouteEntryNextHopType The Type of the transit router route entry next hop,Valid values `Attachment` and `BlackHole`.
         * 
         * @return builder
         * 
         */
        public Builder transitRouterRouteEntryNextHopType(Output<String> transitRouterRouteEntryNextHopType) {
            $.transitRouterRouteEntryNextHopType = transitRouterRouteEntryNextHopType;
            return this;
        }

        /**
         * @param transitRouterRouteEntryNextHopType The Type of the transit router route entry next hop,Valid values `Attachment` and `BlackHole`.
         * 
         * @return builder
         * 
         */
        public Builder transitRouterRouteEntryNextHopType(String transitRouterRouteEntryNextHopType) {
            return transitRouterRouteEntryNextHopType(Output.of(transitRouterRouteEntryNextHopType));
        }

        /**
         * @param transitRouterRouteTableId The ID of the transit router route table.
         * 
         * @return builder
         * 
         */
        public Builder transitRouterRouteTableId(Output<String> transitRouterRouteTableId) {
            $.transitRouterRouteTableId = transitRouterRouteTableId;
            return this;
        }

        /**
         * @param transitRouterRouteTableId The ID of the transit router route table.
         * 
         * @return builder
         * 
         */
        public Builder transitRouterRouteTableId(String transitRouterRouteTableId) {
            return transitRouterRouteTableId(Output.of(transitRouterRouteTableId));
        }

        public TransitRouterRouteEntryArgs build() {
            if ($.transitRouterRouteEntryDestinationCidrBlock == null) {
                throw new MissingRequiredPropertyException("TransitRouterRouteEntryArgs", "transitRouterRouteEntryDestinationCidrBlock");
            }
            if ($.transitRouterRouteEntryNextHopType == null) {
                throw new MissingRequiredPropertyException("TransitRouterRouteEntryArgs", "transitRouterRouteEntryNextHopType");
            }
            if ($.transitRouterRouteTableId == null) {
                throw new MissingRequiredPropertyException("TransitRouterRouteEntryArgs", "transitRouterRouteTableId");
            }
            return $;
        }
    }

}
