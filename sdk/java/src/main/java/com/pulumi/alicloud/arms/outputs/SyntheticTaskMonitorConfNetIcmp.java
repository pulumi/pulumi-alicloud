// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.arms.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class SyntheticTaskMonitorConfNetIcmp {
    private @Nullable Integer interval;
    private @Nullable Integer packageNum;
    private @Nullable Integer packageSize;
    private @Nullable Boolean splitPackage;
    private String targetUrl;
    private @Nullable Integer timeout;
    private @Nullable Boolean tracertEnable;
    private @Nullable Integer tracertNumMax;
    private @Nullable Integer tracertTimeout;

    private SyntheticTaskMonitorConfNetIcmp() {}
    public Optional<Integer> interval() {
        return Optional.ofNullable(this.interval);
    }
    public Optional<Integer> packageNum() {
        return Optional.ofNullable(this.packageNum);
    }
    public Optional<Integer> packageSize() {
        return Optional.ofNullable(this.packageSize);
    }
    public Optional<Boolean> splitPackage() {
        return Optional.ofNullable(this.splitPackage);
    }
    public String targetUrl() {
        return this.targetUrl;
    }
    public Optional<Integer> timeout() {
        return Optional.ofNullable(this.timeout);
    }
    public Optional<Boolean> tracertEnable() {
        return Optional.ofNullable(this.tracertEnable);
    }
    public Optional<Integer> tracertNumMax() {
        return Optional.ofNullable(this.tracertNumMax);
    }
    public Optional<Integer> tracertTimeout() {
        return Optional.ofNullable(this.tracertTimeout);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SyntheticTaskMonitorConfNetIcmp defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Integer interval;
        private @Nullable Integer packageNum;
        private @Nullable Integer packageSize;
        private @Nullable Boolean splitPackage;
        private String targetUrl;
        private @Nullable Integer timeout;
        private @Nullable Boolean tracertEnable;
        private @Nullable Integer tracertNumMax;
        private @Nullable Integer tracertTimeout;
        public Builder() {}
        public Builder(SyntheticTaskMonitorConfNetIcmp defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.interval = defaults.interval;
    	      this.packageNum = defaults.packageNum;
    	      this.packageSize = defaults.packageSize;
    	      this.splitPackage = defaults.splitPackage;
    	      this.targetUrl = defaults.targetUrl;
    	      this.timeout = defaults.timeout;
    	      this.tracertEnable = defaults.tracertEnable;
    	      this.tracertNumMax = defaults.tracertNumMax;
    	      this.tracertTimeout = defaults.tracertTimeout;
        }

        @CustomType.Setter
        public Builder interval(@Nullable Integer interval) {

            this.interval = interval;
            return this;
        }
        @CustomType.Setter
        public Builder packageNum(@Nullable Integer packageNum) {

            this.packageNum = packageNum;
            return this;
        }
        @CustomType.Setter
        public Builder packageSize(@Nullable Integer packageSize) {

            this.packageSize = packageSize;
            return this;
        }
        @CustomType.Setter
        public Builder splitPackage(@Nullable Boolean splitPackage) {

            this.splitPackage = splitPackage;
            return this;
        }
        @CustomType.Setter
        public Builder targetUrl(String targetUrl) {
            if (targetUrl == null) {
              throw new MissingRequiredPropertyException("SyntheticTaskMonitorConfNetIcmp", "targetUrl");
            }
            this.targetUrl = targetUrl;
            return this;
        }
        @CustomType.Setter
        public Builder timeout(@Nullable Integer timeout) {

            this.timeout = timeout;
            return this;
        }
        @CustomType.Setter
        public Builder tracertEnable(@Nullable Boolean tracertEnable) {

            this.tracertEnable = tracertEnable;
            return this;
        }
        @CustomType.Setter
        public Builder tracertNumMax(@Nullable Integer tracertNumMax) {

            this.tracertNumMax = tracertNumMax;
            return this;
        }
        @CustomType.Setter
        public Builder tracertTimeout(@Nullable Integer tracertTimeout) {

            this.tracertTimeout = tracertTimeout;
            return this;
        }
        public SyntheticTaskMonitorConfNetIcmp build() {
            final var _resultValue = new SyntheticTaskMonitorConfNetIcmp();
            _resultValue.interval = interval;
            _resultValue.packageNum = packageNum;
            _resultValue.packageSize = packageSize;
            _resultValue.splitPackage = splitPackage;
            _resultValue.targetUrl = targetUrl;
            _resultValue.timeout = timeout;
            _resultValue.tracertEnable = tracertEnable;
            _resultValue.tracertNumMax = tracertNumMax;
            _resultValue.tracertTimeout = tracertTimeout;
            return _resultValue;
        }
    }
}
