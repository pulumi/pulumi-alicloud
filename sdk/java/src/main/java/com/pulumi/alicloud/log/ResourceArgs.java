// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.log;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ResourceArgs extends com.pulumi.resources.ResourceArgs {

    public static final ResourceArgs Empty = new ResourceArgs();

    /**
     * The meta store&#39;s description.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The meta store&#39;s description.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The ext info of meta store.
     * 
     */
    @Import(name="extInfo")
    private @Nullable Output<String> extInfo;

    /**
     * @return The ext info of meta store.
     * 
     */
    public Optional<Output<String>> extInfo() {
        return Optional.ofNullable(this.extInfo);
    }

    /**
     * The meta store&#39;s name, can be used as table name.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The meta store&#39;s name, can be used as table name.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The meta store&#39;s schema info, which is json string format, used to define table&#39;s fields.
     * 
     */
    @Import(name="schema", required=true)
    private Output<String> schema;

    /**
     * @return The meta store&#39;s schema info, which is json string format, used to define table&#39;s fields.
     * 
     */
    public Output<String> schema() {
        return this.schema;
    }

    /**
     * The meta store&#39;s type, userdefine e.g.
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return The meta store&#39;s type, userdefine e.g.
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    private ResourceArgs() {}

    private ResourceArgs(ResourceArgs $) {
        this.description = $.description;
        this.extInfo = $.extInfo;
        this.name = $.name;
        this.schema = $.schema;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ResourceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ResourceArgs $;

        public Builder() {
            $ = new ResourceArgs();
        }

        public Builder(ResourceArgs defaults) {
            $ = new ResourceArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param description The meta store&#39;s description.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The meta store&#39;s description.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param extInfo The ext info of meta store.
         * 
         * @return builder
         * 
         */
        public Builder extInfo(@Nullable Output<String> extInfo) {
            $.extInfo = extInfo;
            return this;
        }

        /**
         * @param extInfo The ext info of meta store.
         * 
         * @return builder
         * 
         */
        public Builder extInfo(String extInfo) {
            return extInfo(Output.of(extInfo));
        }

        /**
         * @param name The meta store&#39;s name, can be used as table name.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The meta store&#39;s name, can be used as table name.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param schema The meta store&#39;s schema info, which is json string format, used to define table&#39;s fields.
         * 
         * @return builder
         * 
         */
        public Builder schema(Output<String> schema) {
            $.schema = schema;
            return this;
        }

        /**
         * @param schema The meta store&#39;s schema info, which is json string format, used to define table&#39;s fields.
         * 
         * @return builder
         * 
         */
        public Builder schema(String schema) {
            return schema(Output.of(schema));
        }

        /**
         * @param type The meta store&#39;s type, userdefine e.g.
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type The meta store&#39;s type, userdefine e.g.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public ResourceArgs build() {
            if ($.schema == null) {
                throw new MissingRequiredPropertyException("ResourceArgs", "schema");
            }
            if ($.type == null) {
                throw new MissingRequiredPropertyException("ResourceArgs", "type");
            }
            return $;
        }
    }

}
