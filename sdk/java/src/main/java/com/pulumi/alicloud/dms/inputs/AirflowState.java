// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.dms.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AirflowState extends com.pulumi.resources.ResourceArgs {

    public static final AirflowState Empty = new AirflowState();

    /**
     * AirflowId
     * 
     */
    @Import(name="airflowId")
    private @Nullable Output<String> airflowId;

    /**
     * @return AirflowId
     * 
     */
    public Optional<Output<String>> airflowId() {
        return Optional.ofNullable(this.airflowId);
    }

    /**
     * Name of the Airflow instance
     * 
     */
    @Import(name="airflowName")
    private @Nullable Output<String> airflowName;

    /**
     * @return Name of the Airflow instance
     * 
     */
    public Optional<Output<String>> airflowName() {
        return Optional.ofNullable(this.airflowName);
    }

    /**
     * Airflow instance specifications
     * 
     */
    @Import(name="appSpec")
    private @Nullable Output<String> appSpec;

    /**
     * @return Airflow instance specifications
     * 
     */
    public Optional<Output<String>> appSpec() {
        return Optional.ofNullable(this.appSpec);
    }

    /**
     * Dag scan path
     * 
     */
    @Import(name="dagsDir")
    private @Nullable Output<String> dagsDir;

    /**
     * @return Dag scan path
     * 
     */
    public Optional<Output<String>> dagsDir() {
        return Optional.ofNullable(this.dagsDir);
    }

    /**
     * Description of the airflow instance
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Description of the airflow instance
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * OSS bucket name
     * 
     */
    @Import(name="ossBucketName")
    private @Nullable Output<String> ossBucketName;

    /**
     * @return OSS bucket name
     * 
     */
    public Optional<Output<String>> ossBucketName() {
        return Optional.ofNullable(this.ossBucketName);
    }

    /**
     * OSS path
     * 
     */
    @Import(name="ossPath")
    private @Nullable Output<String> ossPath;

    /**
     * @return OSS path
     * 
     */
    public Optional<Output<String>> ossPath() {
        return Optional.ofNullable(this.ossPath);
    }

    /**
     * The path of the plugin scanned by the airflow instance.
     * 
     */
    @Import(name="pluginsDir")
    private @Nullable Output<String> pluginsDir;

    /**
     * @return The path of the plugin scanned by the airflow instance.
     * 
     */
    public Optional<Output<String>> pluginsDir() {
        return Optional.ofNullable(this.pluginsDir);
    }

    /**
     * The region ID of the resource
     * 
     */
    @Import(name="regionId")
    private @Nullable Output<String> regionId;

    /**
     * @return The region ID of the resource
     * 
     */
    public Optional<Output<String>> regionId() {
        return Optional.ofNullable(this.regionId);
    }

    /**
     * Path to installable package
     * 
     */
    @Import(name="requirementFile")
    private @Nullable Output<String> requirementFile;

    /**
     * @return Path to installable package
     * 
     */
    public Optional<Output<String>> requirementFile() {
        return Optional.ofNullable(this.requirementFile);
    }

    /**
     * Security group ID
     * 
     */
    @Import(name="securityGroupId")
    private @Nullable Output<String> securityGroupId;

    /**
     * @return Security group ID
     * 
     */
    public Optional<Output<String>> securityGroupId() {
        return Optional.ofNullable(this.securityGroupId);
    }

    /**
     * Launch script for the airflow container
     * 
     */
    @Import(name="startupFile")
    private @Nullable Output<String> startupFile;

    /**
     * @return Launch script for the airflow container
     * 
     */
    public Optional<Output<String>> startupFile() {
        return Optional.ofNullable(this.startupFile);
    }

    /**
     * Vpc id
     * 
     */
    @Import(name="vpcId")
    private @Nullable Output<String> vpcId;

    /**
     * @return Vpc id
     * 
     */
    public Optional<Output<String>> vpcId() {
        return Optional.ofNullable(this.vpcId);
    }

    /**
     * Switch ID
     * 
     */
    @Import(name="vswitchId")
    private @Nullable Output<String> vswitchId;

    /**
     * @return Switch ID
     * 
     */
    public Optional<Output<String>> vswitchId() {
        return Optional.ofNullable(this.vswitchId);
    }

    /**
     * Worker Node extension
     * 
     */
    @Import(name="workerServerlessReplicas")
    private @Nullable Output<Integer> workerServerlessReplicas;

    /**
     * @return Worker Node extension
     * 
     */
    public Optional<Output<Integer>> workerServerlessReplicas() {
        return Optional.ofNullable(this.workerServerlessReplicas);
    }

    /**
     * DMS workspace ID
     * 
     */
    @Import(name="workspaceId")
    private @Nullable Output<String> workspaceId;

    /**
     * @return DMS workspace ID
     * 
     */
    public Optional<Output<String>> workspaceId() {
        return Optional.ofNullable(this.workspaceId);
    }

    /**
     * Zone ID in the region
     * 
     */
    @Import(name="zoneId")
    private @Nullable Output<String> zoneId;

    /**
     * @return Zone ID in the region
     * 
     */
    public Optional<Output<String>> zoneId() {
        return Optional.ofNullable(this.zoneId);
    }

    private AirflowState() {}

    private AirflowState(AirflowState $) {
        this.airflowId = $.airflowId;
        this.airflowName = $.airflowName;
        this.appSpec = $.appSpec;
        this.dagsDir = $.dagsDir;
        this.description = $.description;
        this.ossBucketName = $.ossBucketName;
        this.ossPath = $.ossPath;
        this.pluginsDir = $.pluginsDir;
        this.regionId = $.regionId;
        this.requirementFile = $.requirementFile;
        this.securityGroupId = $.securityGroupId;
        this.startupFile = $.startupFile;
        this.vpcId = $.vpcId;
        this.vswitchId = $.vswitchId;
        this.workerServerlessReplicas = $.workerServerlessReplicas;
        this.workspaceId = $.workspaceId;
        this.zoneId = $.zoneId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AirflowState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AirflowState $;

        public Builder() {
            $ = new AirflowState();
        }

        public Builder(AirflowState defaults) {
            $ = new AirflowState(Objects.requireNonNull(defaults));
        }

        /**
         * @param airflowId AirflowId
         * 
         * @return builder
         * 
         */
        public Builder airflowId(@Nullable Output<String> airflowId) {
            $.airflowId = airflowId;
            return this;
        }

        /**
         * @param airflowId AirflowId
         * 
         * @return builder
         * 
         */
        public Builder airflowId(String airflowId) {
            return airflowId(Output.of(airflowId));
        }

        /**
         * @param airflowName Name of the Airflow instance
         * 
         * @return builder
         * 
         */
        public Builder airflowName(@Nullable Output<String> airflowName) {
            $.airflowName = airflowName;
            return this;
        }

        /**
         * @param airflowName Name of the Airflow instance
         * 
         * @return builder
         * 
         */
        public Builder airflowName(String airflowName) {
            return airflowName(Output.of(airflowName));
        }

        /**
         * @param appSpec Airflow instance specifications
         * 
         * @return builder
         * 
         */
        public Builder appSpec(@Nullable Output<String> appSpec) {
            $.appSpec = appSpec;
            return this;
        }

        /**
         * @param appSpec Airflow instance specifications
         * 
         * @return builder
         * 
         */
        public Builder appSpec(String appSpec) {
            return appSpec(Output.of(appSpec));
        }

        /**
         * @param dagsDir Dag scan path
         * 
         * @return builder
         * 
         */
        public Builder dagsDir(@Nullable Output<String> dagsDir) {
            $.dagsDir = dagsDir;
            return this;
        }

        /**
         * @param dagsDir Dag scan path
         * 
         * @return builder
         * 
         */
        public Builder dagsDir(String dagsDir) {
            return dagsDir(Output.of(dagsDir));
        }

        /**
         * @param description Description of the airflow instance
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Description of the airflow instance
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param ossBucketName OSS bucket name
         * 
         * @return builder
         * 
         */
        public Builder ossBucketName(@Nullable Output<String> ossBucketName) {
            $.ossBucketName = ossBucketName;
            return this;
        }

        /**
         * @param ossBucketName OSS bucket name
         * 
         * @return builder
         * 
         */
        public Builder ossBucketName(String ossBucketName) {
            return ossBucketName(Output.of(ossBucketName));
        }

        /**
         * @param ossPath OSS path
         * 
         * @return builder
         * 
         */
        public Builder ossPath(@Nullable Output<String> ossPath) {
            $.ossPath = ossPath;
            return this;
        }

        /**
         * @param ossPath OSS path
         * 
         * @return builder
         * 
         */
        public Builder ossPath(String ossPath) {
            return ossPath(Output.of(ossPath));
        }

        /**
         * @param pluginsDir The path of the plugin scanned by the airflow instance.
         * 
         * @return builder
         * 
         */
        public Builder pluginsDir(@Nullable Output<String> pluginsDir) {
            $.pluginsDir = pluginsDir;
            return this;
        }

        /**
         * @param pluginsDir The path of the plugin scanned by the airflow instance.
         * 
         * @return builder
         * 
         */
        public Builder pluginsDir(String pluginsDir) {
            return pluginsDir(Output.of(pluginsDir));
        }

        /**
         * @param regionId The region ID of the resource
         * 
         * @return builder
         * 
         */
        public Builder regionId(@Nullable Output<String> regionId) {
            $.regionId = regionId;
            return this;
        }

        /**
         * @param regionId The region ID of the resource
         * 
         * @return builder
         * 
         */
        public Builder regionId(String regionId) {
            return regionId(Output.of(regionId));
        }

        /**
         * @param requirementFile Path to installable package
         * 
         * @return builder
         * 
         */
        public Builder requirementFile(@Nullable Output<String> requirementFile) {
            $.requirementFile = requirementFile;
            return this;
        }

        /**
         * @param requirementFile Path to installable package
         * 
         * @return builder
         * 
         */
        public Builder requirementFile(String requirementFile) {
            return requirementFile(Output.of(requirementFile));
        }

        /**
         * @param securityGroupId Security group ID
         * 
         * @return builder
         * 
         */
        public Builder securityGroupId(@Nullable Output<String> securityGroupId) {
            $.securityGroupId = securityGroupId;
            return this;
        }

        /**
         * @param securityGroupId Security group ID
         * 
         * @return builder
         * 
         */
        public Builder securityGroupId(String securityGroupId) {
            return securityGroupId(Output.of(securityGroupId));
        }

        /**
         * @param startupFile Launch script for the airflow container
         * 
         * @return builder
         * 
         */
        public Builder startupFile(@Nullable Output<String> startupFile) {
            $.startupFile = startupFile;
            return this;
        }

        /**
         * @param startupFile Launch script for the airflow container
         * 
         * @return builder
         * 
         */
        public Builder startupFile(String startupFile) {
            return startupFile(Output.of(startupFile));
        }

        /**
         * @param vpcId Vpc id
         * 
         * @return builder
         * 
         */
        public Builder vpcId(@Nullable Output<String> vpcId) {
            $.vpcId = vpcId;
            return this;
        }

        /**
         * @param vpcId Vpc id
         * 
         * @return builder
         * 
         */
        public Builder vpcId(String vpcId) {
            return vpcId(Output.of(vpcId));
        }

        /**
         * @param vswitchId Switch ID
         * 
         * @return builder
         * 
         */
        public Builder vswitchId(@Nullable Output<String> vswitchId) {
            $.vswitchId = vswitchId;
            return this;
        }

        /**
         * @param vswitchId Switch ID
         * 
         * @return builder
         * 
         */
        public Builder vswitchId(String vswitchId) {
            return vswitchId(Output.of(vswitchId));
        }

        /**
         * @param workerServerlessReplicas Worker Node extension
         * 
         * @return builder
         * 
         */
        public Builder workerServerlessReplicas(@Nullable Output<Integer> workerServerlessReplicas) {
            $.workerServerlessReplicas = workerServerlessReplicas;
            return this;
        }

        /**
         * @param workerServerlessReplicas Worker Node extension
         * 
         * @return builder
         * 
         */
        public Builder workerServerlessReplicas(Integer workerServerlessReplicas) {
            return workerServerlessReplicas(Output.of(workerServerlessReplicas));
        }

        /**
         * @param workspaceId DMS workspace ID
         * 
         * @return builder
         * 
         */
        public Builder workspaceId(@Nullable Output<String> workspaceId) {
            $.workspaceId = workspaceId;
            return this;
        }

        /**
         * @param workspaceId DMS workspace ID
         * 
         * @return builder
         * 
         */
        public Builder workspaceId(String workspaceId) {
            return workspaceId(Output.of(workspaceId));
        }

        /**
         * @param zoneId Zone ID in the region
         * 
         * @return builder
         * 
         */
        public Builder zoneId(@Nullable Output<String> zoneId) {
            $.zoneId = zoneId;
            return this;
        }

        /**
         * @param zoneId Zone ID in the region
         * 
         * @return builder
         * 
         */
        public Builder zoneId(String zoneId) {
            return zoneId(Output.of(zoneId));
        }

        public AirflowState build() {
            return $;
        }
    }

}
