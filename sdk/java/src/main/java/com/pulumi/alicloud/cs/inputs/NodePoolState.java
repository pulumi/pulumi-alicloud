// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.cs.inputs;

import com.pulumi.alicloud.cs.inputs.NodePoolDataDiskArgs;
import com.pulumi.alicloud.cs.inputs.NodePoolKubeletConfigurationArgs;
import com.pulumi.alicloud.cs.inputs.NodePoolLabelArgs;
import com.pulumi.alicloud.cs.inputs.NodePoolManagementArgs;
import com.pulumi.alicloud.cs.inputs.NodePoolPrivatePoolOptionsArgs;
import com.pulumi.alicloud.cs.inputs.NodePoolRollingPolicyArgs;
import com.pulumi.alicloud.cs.inputs.NodePoolScalingConfigArgs;
import com.pulumi.alicloud.cs.inputs.NodePoolSpotPriceLimitArgs;
import com.pulumi.alicloud.cs.inputs.NodePoolTaintArgs;
import com.pulumi.alicloud.cs.inputs.NodePoolTeeConfigArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class NodePoolState extends com.pulumi.resources.ResourceArgs {

    public static final NodePoolState Empty = new NodePoolState();

    /**
     * Whether to enable automatic renewal for nodes in the node pool takes effect only when `instance_charge_type` is set to `PrePaid`. Default value: `false`. Valid values:
     * 
     */
    @Import(name="autoRenew")
    private @Nullable Output<Boolean> autoRenew;

    /**
     * @return Whether to enable automatic renewal for nodes in the node pool takes effect only when `instance_charge_type` is set to `PrePaid`. Default value: `false`. Valid values:
     * 
     */
    public Optional<Output<Boolean>> autoRenew() {
        return Optional.ofNullable(this.autoRenew);
    }

    /**
     * The automatic renewal period of nodes in the node pool takes effect only when you select Prepaid and Automatic Renewal, and is a required value. When `PeriodUnit = Month`, the value range is {1, 2, 3, 6, 12}. Default value: 1.
     * 
     */
    @Import(name="autoRenewPeriod")
    private @Nullable Output<Integer> autoRenewPeriod;

    /**
     * @return The automatic renewal period of nodes in the node pool takes effect only when you select Prepaid and Automatic Renewal, and is a required value. When `PeriodUnit = Month`, the value range is {1, 2, 3, 6, 12}. Default value: 1.
     * 
     */
    public Optional<Output<Integer>> autoRenewPeriod() {
        return Optional.ofNullable(this.autoRenewPeriod);
    }

    /**
     * Whether enable worker node to support cis security reinforcement, its valid value `true` or `false`. Default to `false` and apply to AliyunLinux series. Use `security_hardening_os` instead.
     * 
     * @deprecated
     * Field &#39;cis_enabled&#39; has been deprecated from provider version 1.223.1. Whether enable worker node to support cis security reinforcement, its valid value `true` or `false`. Default to `false` and apply to AliyunLinux series. Use `security_hardening_os` instead.
     * 
     */
    @Deprecated /* Field 'cis_enabled' has been deprecated from provider version 1.223.1. Whether enable worker node to support cis security reinforcement, its valid value `true` or `false`. Default to `false` and apply to AliyunLinux series. Use `security_hardening_os` instead. */
    @Import(name="cisEnabled")
    private @Nullable Output<Boolean> cisEnabled;

    /**
     * @return Whether enable worker node to support cis security reinforcement, its valid value `true` or `false`. Default to `false` and apply to AliyunLinux series. Use `security_hardening_os` instead.
     * 
     * @deprecated
     * Field &#39;cis_enabled&#39; has been deprecated from provider version 1.223.1. Whether enable worker node to support cis security reinforcement, its valid value `true` or `false`. Default to `false` and apply to AliyunLinux series. Use `security_hardening_os` instead.
     * 
     */
    @Deprecated /* Field 'cis_enabled' has been deprecated from provider version 1.223.1. Whether enable worker node to support cis security reinforcement, its valid value `true` or `false`. Default to `false` and apply to AliyunLinux series. Use `security_hardening_os` instead. */
    public Optional<Output<Boolean>> cisEnabled() {
        return Optional.ofNullable(this.cisEnabled);
    }

    /**
     * The id of kubernetes cluster.
     * 
     */
    @Import(name="clusterId")
    private @Nullable Output<String> clusterId;

    /**
     * @return The id of kubernetes cluster.
     * 
     */
    public Optional<Output<String>> clusterId() {
        return Optional.ofNullable(this.clusterId);
    }

    /**
     * Specifies whether to automatically create pay-as-you-go instances to meet the required number of ECS instances if preemptible instances cannot be created due to reasons such as cost or insufficient inventory. This parameter takes effect when you set `multi_az_policy` to `COST_OPTIMIZED`. Valid values: `true`: automatically creates pay-as-you-go instances to meet the required number of ECS instances if preemptible instances cannot be created. `false`: does not create pay-as-you-go instances to meet the required number of ECS instances if preemptible instances cannot be created.
     * 
     */
    @Import(name="compensateWithOnDemand")
    private @Nullable Output<Boolean> compensateWithOnDemand;

    /**
     * @return Specifies whether to automatically create pay-as-you-go instances to meet the required number of ECS instances if preemptible instances cannot be created due to reasons such as cost or insufficient inventory. This parameter takes effect when you set `multi_az_policy` to `COST_OPTIMIZED`. Valid values: `true`: automatically creates pay-as-you-go instances to meet the required number of ECS instances if preemptible instances cannot be created. `false`: does not create pay-as-you-go instances to meet the required number of ECS instances if preemptible instances cannot be created.
     * 
     */
    public Optional<Output<Boolean>> compensateWithOnDemand() {
        return Optional.ofNullable(this.compensateWithOnDemand);
    }

    /**
     * Node CPU management policies. Default value: `none`. When the cluster version is 1.12.6 or later, the following two policies are supported:
     * 
     */
    @Import(name="cpuPolicy")
    private @Nullable Output<String> cpuPolicy;

    /**
     * @return Node CPU management policies. Default value: `none`. When the cluster version is 1.12.6 or later, the following two policies are supported:
     * 
     */
    public Optional<Output<String>> cpuPolicy() {
        return Optional.ofNullable(this.cpuPolicy);
    }

    /**
     * Configure the data disk of the node in the node pool. See `data_disks` below.
     * 
     */
    @Import(name="dataDisks")
    private @Nullable Output<List<NodePoolDataDiskArgs>> dataDisks;

    /**
     * @return Configure the data disk of the node in the node pool. See `data_disks` below.
     * 
     */
    public Optional<Output<List<NodePoolDataDiskArgs>>> dataDisks() {
        return Optional.ofNullable(this.dataDisks);
    }

    /**
     * The deployment set of node pool. Specify the deploymentSet to ensure that the nodes in the node pool can be distributed on different physical machines.
     * 
     */
    @Import(name="deploymentSetId")
    private @Nullable Output<String> deploymentSetId;

    /**
     * @return The deployment set of node pool. Specify the deploymentSet to ensure that the nodes in the node pool can be distributed on different physical machines.
     * 
     */
    public Optional<Output<String>> deploymentSetId() {
        return Optional.ofNullable(this.deploymentSetId);
    }

    /**
     * Number of expected nodes in the node pool.
     * 
     */
    @Import(name="desiredSize")
    private @Nullable Output<Integer> desiredSize;

    /**
     * @return Number of expected nodes in the node pool.
     * 
     */
    public Optional<Output<Integer>> desiredSize() {
        return Optional.ofNullable(this.desiredSize);
    }

    /**
     * Whether to force deletion.
     * 
     */
    @Import(name="forceDelete")
    private @Nullable Output<Boolean> forceDelete;

    /**
     * @return Whether to force deletion.
     * 
     */
    public Optional<Output<Boolean>> forceDelete() {
        return Optional.ofNullable(this.forceDelete);
    }

    /**
     * After you select this check box, if data disks have been attached to the specified ECS instances and the file system of the last data disk is uninitialized, the system automatically formats the last data disk to ext4 and mounts the data disk to /var/lib/docker and /var/lib/kubelet. The original data on the disk will be cleared. Make sure that you back up data in advance. If no data disk is mounted on the ECS instance, no new data disk will be purchased. Default is `false`.
     * 
     */
    @Import(name="formatDisk")
    private @Nullable Output<Boolean> formatDisk;

    /**
     * @return After you select this check box, if data disks have been attached to the specified ECS instances and the file system of the last data disk is uninitialized, the system automatically formats the last data disk to ext4 and mounts the data disk to /var/lib/docker and /var/lib/kubelet. The original data on the disk will be cleared. Make sure that you back up data in advance. If no data disk is mounted on the ECS instance, no new data disk will be purchased. Default is `false`.
     * 
     */
    public Optional<Output<Boolean>> formatDisk() {
        return Optional.ofNullable(this.formatDisk);
    }

    /**
     * The custom image ID. The system-provided image is used by default.
     * 
     */
    @Import(name="imageId")
    private @Nullable Output<String> imageId;

    /**
     * @return The custom image ID. The system-provided image is used by default.
     * 
     */
    public Optional<Output<String>> imageId() {
        return Optional.ofNullable(this.imageId);
    }

    /**
     * The operating system image type and the `platform` parameter can be selected from the following values:
     * - `AliyunLinux` : Alinux2 image.
     * - `AliyunLinux3` : Alinux3 image.
     * - `AliyunLinux3Arm64` : Alinux3 mirror ARM version.
     * - `AliyunLinuxUEFI` : Alinux2 Image UEFI version.
     * - `CentOS` : CentOS image.
     * - `Windows` : Windows image.
     * - `WindowsCore` : WindowsCore image.
     * - `ContainerOS` : container-optimized image.
     * - `Ubuntu`: (Available since v1.236.0) Ubuntu image.
     * 
     */
    @Import(name="imageType")
    private @Nullable Output<String> imageType;

    /**
     * @return The operating system image type and the `platform` parameter can be selected from the following values:
     * - `AliyunLinux` : Alinux2 image.
     * - `AliyunLinux3` : Alinux3 image.
     * - `AliyunLinux3Arm64` : Alinux3 mirror ARM version.
     * - `AliyunLinuxUEFI` : Alinux2 Image UEFI version.
     * - `CentOS` : CentOS image.
     * - `Windows` : Windows image.
     * - `WindowsCore` : WindowsCore image.
     * - `ContainerOS` : container-optimized image.
     * - `Ubuntu`: (Available since v1.236.0) Ubuntu image.
     * 
     */
    public Optional<Output<String>> imageType() {
        return Optional.ofNullable(this.imageType);
    }

    /**
     * Whether to install cloud monitoring on the ECS node. After installation, you can view the monitoring information of the created ECS instance in the cloud monitoring console and recommend enable it. Default value: `false`. Valid values:
     * 
     */
    @Import(name="installCloudMonitor")
    private @Nullable Output<Boolean> installCloudMonitor;

    /**
     * @return Whether to install cloud monitoring on the ECS node. After installation, you can view the monitoring information of the created ECS instance in the cloud monitoring console and recommend enable it. Default value: `false`. Valid values:
     * 
     */
    public Optional<Output<Boolean>> installCloudMonitor() {
        return Optional.ofNullable(this.installCloudMonitor);
    }

    /**
     * Node payment type. Valid values: `PostPaid`, `PrePaid`, default is `PostPaid`. If value is `PrePaid`, the arguments `period`, `period_unit`, `auto_renew` and `auto_renew_period` are required.
     * 
     */
    @Import(name="instanceChargeType")
    private @Nullable Output<String> instanceChargeType;

    /**
     * @return Node payment type. Valid values: `PostPaid`, `PrePaid`, default is `PostPaid`. If value is `PrePaid`, the arguments `period`, `period_unit`, `auto_renew` and `auto_renew_period` are required.
     * 
     */
    public Optional<Output<String>> instanceChargeType() {
        return Optional.ofNullable(this.instanceChargeType);
    }

    /**
     * In the node instance specification list, you can select multiple instance specifications as alternatives. When each node is created, it will try to purchase from the first specification until it is created successfully. The final purchased instance specifications may vary with inventory changes.
     * 
     */
    @Import(name="instanceTypes")
    private @Nullable Output<List<String>> instanceTypes;

    /**
     * @return In the node instance specification list, you can select multiple instance specifications as alternatives. When each node is created, it will try to purchase from the first specification until it is created successfully. The final purchased instance specifications may vary with inventory changes.
     * 
     */
    public Optional<Output<List<String>>> instanceTypes() {
        return Optional.ofNullable(this.instanceTypes);
    }

    /**
     * The instance list. Add existing nodes under the same cluster VPC to the node pool.
     * 
     */
    @Import(name="instances")
    private @Nullable Output<List<String>> instances;

    /**
     * @return The instance list. Add existing nodes under the same cluster VPC to the node pool.
     * 
     */
    public Optional<Output<List<String>>> instances() {
        return Optional.ofNullable(this.instances);
    }

    /**
     * The billing method for network usage. Valid values `PayByBandwidth` and `PayByTraffic`. Conflict with `eip_internet_charge_type`, EIP and public network IP can only choose one.
     * 
     */
    @Import(name="internetChargeType")
    private @Nullable Output<String> internetChargeType;

    /**
     * @return The billing method for network usage. Valid values `PayByBandwidth` and `PayByTraffic`. Conflict with `eip_internet_charge_type`, EIP and public network IP can only choose one.
     * 
     */
    public Optional<Output<String>> internetChargeType() {
        return Optional.ofNullable(this.internetChargeType);
    }

    /**
     * The maximum bandwidth of the public IP address of the node. The unit is Mbps(Mega bit per second). The value range is:\[1,100\]
     * 
     */
    @Import(name="internetMaxBandwidthOut")
    private @Nullable Output<Integer> internetMaxBandwidthOut;

    /**
     * @return The maximum bandwidth of the public IP address of the node. The unit is Mbps(Mega bit per second). The value range is:\[1,100\]
     * 
     */
    public Optional<Output<Integer>> internetMaxBandwidthOut() {
        return Optional.ofNullable(this.internetMaxBandwidthOut);
    }

    /**
     * Add an existing instance to the node pool, whether to keep the original instance name. It is recommended to set to `true`.
     * 
     */
    @Import(name="keepInstanceName")
    private @Nullable Output<Boolean> keepInstanceName;

    /**
     * @return Add an existing instance to the node pool, whether to keep the original instance name. It is recommended to set to `true`.
     * 
     */
    public Optional<Output<Boolean>> keepInstanceName() {
        return Optional.ofNullable(this.keepInstanceName);
    }

    /**
     * The name of the key pair. When the node pool is a managed node pool, only `key_name` is supported.
     * 
     */
    @Import(name="keyName")
    private @Nullable Output<String> keyName;

    /**
     * @return The name of the key pair. When the node pool is a managed node pool, only `key_name` is supported.
     * 
     */
    public Optional<Output<String>> keyName() {
        return Optional.ofNullable(this.keyName);
    }

    /**
     * An KMS encrypts password used to a cs kubernetes. You have to specify one of `password` `key_name` `kms_encrypted_password` fields.
     * 
     */
    @Import(name="kmsEncryptedPassword")
    private @Nullable Output<String> kmsEncryptedPassword;

    /**
     * @return An KMS encrypts password used to a cs kubernetes. You have to specify one of `password` `key_name` `kms_encrypted_password` fields.
     * 
     */
    public Optional<Output<String>> kmsEncryptedPassword() {
        return Optional.ofNullable(this.kmsEncryptedPassword);
    }

    /**
     * An KMS encryption context used to decrypt `kms_encrypted_password` before creating or updating a cs kubernetes with `kms_encrypted_password`. See [Encryption Context](https://www.alibabacloud.com/help/doc-detail/42975.htm). It is valid when `kms_encrypted_password` is set.
     * 
     */
    @Import(name="kmsEncryptionContext")
    private @Nullable Output<Map<String,String>> kmsEncryptionContext;

    /**
     * @return An KMS encryption context used to decrypt `kms_encrypted_password` before creating or updating a cs kubernetes with `kms_encrypted_password`. See [Encryption Context](https://www.alibabacloud.com/help/doc-detail/42975.htm). It is valid when `kms_encrypted_password` is set.
     * 
     */
    public Optional<Output<Map<String,String>>> kmsEncryptionContext() {
        return Optional.ofNullable(this.kmsEncryptionContext);
    }

    /**
     * Kubelet configuration parameters for worker nodes. See `kubelet_configuration` below. More information in [Kubelet Configuration](https://kubernetes.io/docs/reference/config-api/kubelet-config.v1beta1/). See `kubelet_configuration` below.
     * 
     */
    @Import(name="kubeletConfiguration")
    private @Nullable Output<NodePoolKubeletConfigurationArgs> kubeletConfiguration;

    /**
     * @return Kubelet configuration parameters for worker nodes. See `kubelet_configuration` below. More information in [Kubelet Configuration](https://kubernetes.io/docs/reference/config-api/kubelet-config.v1beta1/). See `kubelet_configuration` below.
     * 
     */
    public Optional<Output<NodePoolKubeletConfigurationArgs>> kubeletConfiguration() {
        return Optional.ofNullable(this.kubeletConfiguration);
    }

    /**
     * A List of Kubernetes labels to assign to the nodes . Only labels that are applied with the ACK API are managed by this argument. Detailed below. More information in [Labels](https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/). See `labels` below.
     * 
     */
    @Import(name="labels")
    private @Nullable Output<List<NodePoolLabelArgs>> labels;

    /**
     * @return A List of Kubernetes labels to assign to the nodes . Only labels that are applied with the ACK API are managed by this argument. Detailed below. More information in [Labels](https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/). See `labels` below.
     * 
     */
    public Optional<Output<List<NodePoolLabelArgs>>> labels() {
        return Optional.ofNullable(this.labels);
    }

    /**
     * Whether the ECS instance is logged on as a ecs-user user. Valid value: `true` and `false`.
     * 
     */
    @Import(name="loginAsNonRoot")
    private @Nullable Output<Boolean> loginAsNonRoot;

    /**
     * @return Whether the ECS instance is logged on as a ecs-user user. Valid value: `true` and `false`.
     * 
     */
    public Optional<Output<Boolean>> loginAsNonRoot() {
        return Optional.ofNullable(this.loginAsNonRoot);
    }

    /**
     * Managed node pool configuration. See `management` below.
     * 
     */
    @Import(name="management")
    private @Nullable Output<NodePoolManagementArgs> management;

    /**
     * @return Managed node pool configuration. See `management` below.
     * 
     */
    public Optional<Output<NodePoolManagementArgs>> management() {
        return Optional.ofNullable(this.management);
    }

    /**
     * The scaling policy for ECS instances in a multi-zone scaling group. Valid value: `PRIORITY`, `COST_OPTIMIZED` and `BALANCE`. `PRIORITY`: scales the capacity according to the virtual switches you define (VSwitchIds.N). When an ECS instance cannot be created in the zone where the higher-priority vSwitch is located, the next-priority vSwitch is automatically used to create an ECS instance. `COST_OPTIMIZED`: try to create by vCPU unit price from low to high. When the scaling configuration is configured with multiple instances of preemptible billing, preemptible instances are created first. You can continue to use the `CompensateWithOnDemand` parameter to specify whether to automatically try to create a preemptible instance by paying for it. It takes effect only when the scaling configuration has multi-instance specifications or preemptible instances. `BALANCE`: distributes ECS instances evenly among the multi-zone specified by the scaling group. If the zones become unbalanced due to insufficient inventory, you can use the API RebalanceInstances to balance resources.
     * 
     */
    @Import(name="multiAzPolicy")
    private @Nullable Output<String> multiAzPolicy;

    /**
     * @return The scaling policy for ECS instances in a multi-zone scaling group. Valid value: `PRIORITY`, `COST_OPTIMIZED` and `BALANCE`. `PRIORITY`: scales the capacity according to the virtual switches you define (VSwitchIds.N). When an ECS instance cannot be created in the zone where the higher-priority vSwitch is located, the next-priority vSwitch is automatically used to create an ECS instance. `COST_OPTIMIZED`: try to create by vCPU unit price from low to high. When the scaling configuration is configured with multiple instances of preemptible billing, preemptible instances are created first. You can continue to use the `CompensateWithOnDemand` parameter to specify whether to automatically try to create a preemptible instance by paying for it. It takes effect only when the scaling configuration has multi-instance specifications or preemptible instances. `BALANCE`: distributes ECS instances evenly among the multi-zone specified by the scaling group. If the zones become unbalanced due to insufficient inventory, you can use the API RebalanceInstances to balance resources.
     * 
     */
    public Optional<Output<String>> multiAzPolicy() {
        return Optional.ofNullable(this.multiAzPolicy);
    }

    /**
     * . Field &#39;name&#39; has been deprecated from provider version 1.219.0. New field &#39;node_pool_name&#39; instead.
     * 
     * @deprecated
     * Field &#39;name&#39; has been deprecated since provider version 1.219.0. New field &#39;node_pool_name&#39; instead.
     * 
     */
    @Deprecated /* Field 'name' has been deprecated since provider version 1.219.0. New field 'node_pool_name' instead. */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return . Field &#39;name&#39; has been deprecated from provider version 1.219.0. New field &#39;node_pool_name&#39; instead.
     * 
     * @deprecated
     * Field &#39;name&#39; has been deprecated since provider version 1.219.0. New field &#39;node_pool_name&#39; instead.
     * 
     */
    @Deprecated /* Field 'name' has been deprecated since provider version 1.219.0. New field 'node_pool_name' instead. */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The worker node number of the node pool. From version 1.111.0, `node_count` is not required.
     * 
     * @deprecated
     * Field &#39;node_count&#39; has been deprecated from provider version 1.158.0. New field &#39;desired_size&#39; instead.
     * 
     */
    @Deprecated /* Field 'node_count' has been deprecated from provider version 1.158.0. New field 'desired_size' instead. */
    @Import(name="nodeCount")
    private @Nullable Output<Integer> nodeCount;

    /**
     * @return The worker node number of the node pool. From version 1.111.0, `node_count` is not required.
     * 
     * @deprecated
     * Field &#39;node_count&#39; has been deprecated from provider version 1.158.0. New field &#39;desired_size&#39; instead.
     * 
     */
    @Deprecated /* Field 'node_count' has been deprecated from provider version 1.158.0. New field 'desired_size' instead. */
    public Optional<Output<Integer>> nodeCount() {
        return Optional.ofNullable(this.nodeCount);
    }

    /**
     * Each node name consists of a prefix, its private network IP, and a suffix, separated by commas. The input format is `customized,,ip,`.
     * - The prefix and suffix can be composed of one or more parts separated by &#39;.&#39;, each part can use lowercase letters, numbers and &#39;-&#39;, and the beginning and end of the node name must be lowercase letters and numbers.
     * - The node IP address is the complete private IP address of the node.
     * - For example, if the string `customized,aliyun,ip,com` is passed in (where &#39;customized&#39; and &#39;ip&#39; are fixed strings, &#39;aliyun&#39; is the prefix, and &#39;com&#39; is the suffix), the name of the node is `aliyun192.168.xxx.xxxcom`.
     * 
     */
    @Import(name="nodeNameMode")
    private @Nullable Output<String> nodeNameMode;

    /**
     * @return Each node name consists of a prefix, its private network IP, and a suffix, separated by commas. The input format is `customized,,ip,`.
     * - The prefix and suffix can be composed of one or more parts separated by &#39;.&#39;, each part can use lowercase letters, numbers and &#39;-&#39;, and the beginning and end of the node name must be lowercase letters and numbers.
     * - The node IP address is the complete private IP address of the node.
     * - For example, if the string `customized,aliyun,ip,com` is passed in (where &#39;customized&#39; and &#39;ip&#39; are fixed strings, &#39;aliyun&#39; is the prefix, and &#39;com&#39; is the suffix), the name of the node is `aliyun192.168.xxx.xxxcom`.
     * 
     */
    public Optional<Output<String>> nodeNameMode() {
        return Optional.ofNullable(this.nodeNameMode);
    }

    /**
     * The first ID of the resource.
     * 
     */
    @Import(name="nodePoolId")
    private @Nullable Output<String> nodePoolId;

    /**
     * @return The first ID of the resource.
     * 
     */
    public Optional<Output<String>> nodePoolId() {
        return Optional.ofNullable(this.nodePoolId);
    }

    /**
     * The name of node pool.
     * 
     */
    @Import(name="nodePoolName")
    private @Nullable Output<String> nodePoolName;

    /**
     * @return The name of node pool.
     * 
     */
    public Optional<Output<String>> nodePoolName() {
        return Optional.ofNullable(this.nodePoolName);
    }

    /**
     * The minimum number of pay-as-you-go instances that must be kept in the scaling group. Valid values: 0 to 1000. If the number of pay-as-you-go instances is less than the value of this parameter, Auto Scaling preferably creates pay-as-you-go instances.
     * 
     */
    @Import(name="onDemandBaseCapacity")
    private @Nullable Output<Integer> onDemandBaseCapacity;

    /**
     * @return The minimum number of pay-as-you-go instances that must be kept in the scaling group. Valid values: 0 to 1000. If the number of pay-as-you-go instances is less than the value of this parameter, Auto Scaling preferably creates pay-as-you-go instances.
     * 
     */
    public Optional<Output<Integer>> onDemandBaseCapacity() {
        return Optional.ofNullable(this.onDemandBaseCapacity);
    }

    /**
     * The percentage of pay-as-you-go instances among the extra instances that exceed the number specified by `on_demand_base_capacity`. Valid values: 0 to 100.
     * 
     */
    @Import(name="onDemandPercentageAboveBaseCapacity")
    private @Nullable Output<Integer> onDemandPercentageAboveBaseCapacity;

    /**
     * @return The percentage of pay-as-you-go instances among the extra instances that exceed the number specified by `on_demand_base_capacity`. Valid values: 0 to 100.
     * 
     */
    public Optional<Output<Integer>> onDemandPercentageAboveBaseCapacity() {
        return Optional.ofNullable(this.onDemandPercentageAboveBaseCapacity);
    }

    /**
     * The password of ssh login. You have to specify one of `password` and `key_name` fields. The password rule is 8 to 30 characters and contains at least three items (upper and lower case letters, numbers, and special symbols).
     * 
     */
    @Import(name="password")
    private @Nullable Output<String> password;

    /**
     * @return The password of ssh login. You have to specify one of `password` and `key_name` fields. The password rule is 8 to 30 characters and contains at least three items (upper and lower case letters, numbers, and special symbols).
     * 
     */
    public Optional<Output<String>> password() {
        return Optional.ofNullable(this.password);
    }

    /**
     * Node payment period. Its valid value is one of {1, 2, 3, 6, 12}.
     * 
     */
    @Import(name="period")
    private @Nullable Output<Integer> period;

    /**
     * @return Node payment period. Its valid value is one of {1, 2, 3, 6, 12}.
     * 
     */
    public Optional<Output<Integer>> period() {
        return Optional.ofNullable(this.period);
    }

    /**
     * Node payment period unit, valid value: `Month`. Default is `Month`.
     * 
     */
    @Import(name="periodUnit")
    private @Nullable Output<String> periodUnit;

    /**
     * @return Node payment period unit, valid value: `Month`. Default is `Month`.
     * 
     */
    public Optional<Output<String>> periodUnit() {
        return Optional.ofNullable(this.periodUnit);
    }

    /**
     * Operating system release, using `image_type` instead.
     * 
     * @deprecated
     * Field &#39;platform&#39; has been deprecated from provider version 1.145.0. Operating system release, using `image_type` instead.
     * 
     */
    @Deprecated /* Field 'platform' has been deprecated from provider version 1.145.0. Operating system release, using `image_type` instead. */
    @Import(name="platform")
    private @Nullable Output<String> platform;

    /**
     * @return Operating system release, using `image_type` instead.
     * 
     * @deprecated
     * Field &#39;platform&#39; has been deprecated from provider version 1.145.0. Operating system release, using `image_type` instead.
     * 
     */
    @Deprecated /* Field 'platform' has been deprecated from provider version 1.145.0. Operating system release, using `image_type` instead. */
    public Optional<Output<String>> platform() {
        return Optional.ofNullable(this.platform);
    }

    /**
     * Node pre custom data, base64-encoded, the script executed before the node is initialized.
     * 
     */
    @Import(name="preUserData")
    private @Nullable Output<String> preUserData;

    /**
     * @return Node pre custom data, base64-encoded, the script executed before the node is initialized.
     * 
     */
    public Optional<Output<String>> preUserData() {
        return Optional.ofNullable(this.preUserData);
    }

    /**
     * Private node pool configuration. See `private_pool_options` below.
     * 
     */
    @Import(name="privatePoolOptions")
    private @Nullable Output<NodePoolPrivatePoolOptionsArgs> privatePoolOptions;

    /**
     * @return Private node pool configuration. See `private_pool_options` below.
     * 
     */
    public Optional<Output<NodePoolPrivatePoolOptionsArgs>> privatePoolOptions() {
        return Optional.ofNullable(this.privatePoolOptions);
    }

    /**
     * The name of the Worker RAM role.
     * * If it is empty, the default Worker RAM role created in the cluster will be used.
     * * If the specified RAM role is not empty, the specified RAM role must be a **Common Service role**, and its **trusted service** configuration must be **cloud server**. For more information, see [Create a common service role](https://help.aliyun.com/document_detail/116800.html). If the specified RAM role is not the default Worker RAM role created in the cluster, the role name cannot start with &#39;KubernetesMasterRole-&#39;or &#39;KubernetesWorkerRole.
     * 
     * &gt; **NOTE:**  This parameter is only supported for ACK-managed clusters of 1.22 or later versions.
     * 
     */
    @Import(name="ramRoleName")
    private @Nullable Output<String> ramRoleName;

    /**
     * @return The name of the Worker RAM role.
     * * If it is empty, the default Worker RAM role created in the cluster will be used.
     * * If the specified RAM role is not empty, the specified RAM role must be a **Common Service role**, and its **trusted service** configuration must be **cloud server**. For more information, see [Create a common service role](https://help.aliyun.com/document_detail/116800.html). If the specified RAM role is not the default Worker RAM role created in the cluster, the role name cannot start with &#39;KubernetesMasterRole-&#39;or &#39;KubernetesWorkerRole.
     * 
     * &gt; **NOTE:**  This parameter is only supported for ACK-managed clusters of 1.22 or later versions.
     * 
     */
    public Optional<Output<String>> ramRoleName() {
        return Optional.ofNullable(this.ramRoleName);
    }

    /**
     * The list of RDS instances.
     * 
     */
    @Import(name="rdsInstances")
    private @Nullable Output<List<String>> rdsInstances;

    /**
     * @return The list of RDS instances.
     * 
     */
    public Optional<Output<List<String>>> rdsInstances() {
        return Optional.ofNullable(this.rdsInstances);
    }

    /**
     * The ID of the resource group
     * 
     */
    @Import(name="resourceGroupId")
    private @Nullable Output<String> resourceGroupId;

    /**
     * @return The ID of the resource group
     * 
     */
    public Optional<Output<String>> resourceGroupId() {
        return Optional.ofNullable(this.resourceGroupId);
    }

    /**
     * Rotary configuration. See `rolling_policy` below.
     * 
     */
    @Import(name="rollingPolicy")
    private @Nullable Output<NodePoolRollingPolicyArgs> rollingPolicy;

    /**
     * @return Rotary configuration. See `rolling_policy` below.
     * 
     */
    public Optional<Output<NodePoolRollingPolicyArgs>> rollingPolicy() {
        return Optional.ofNullable(this.rollingPolicy);
    }

    /**
     * The runtime name of containers. If not set, the cluster runtime will be used as the node pool runtime. If you select another container runtime, see [Comparison of Docker, containerd, and Sandboxed-Container](https://www.alibabacloud.com/help/doc-detail/160313.htm).
     * 
     */
    @Import(name="runtimeName")
    private @Nullable Output<String> runtimeName;

    /**
     * @return The runtime name of containers. If not set, the cluster runtime will be used as the node pool runtime. If you select another container runtime, see [Comparison of Docker, containerd, and Sandboxed-Container](https://www.alibabacloud.com/help/doc-detail/160313.htm).
     * 
     */
    public Optional<Output<String>> runtimeName() {
        return Optional.ofNullable(this.runtimeName);
    }

    /**
     * The runtime version of containers. If not set, the cluster runtime will be used as the node pool runtime.
     * 
     */
    @Import(name="runtimeVersion")
    private @Nullable Output<String> runtimeVersion;

    /**
     * @return The runtime version of containers. If not set, the cluster runtime will be used as the node pool runtime.
     * 
     */
    public Optional<Output<String>> runtimeVersion() {
        return Optional.ofNullable(this.runtimeVersion);
    }

    /**
     * Automatic scaling configuration. See `scaling_config` below.
     * 
     */
    @Import(name="scalingConfig")
    private @Nullable Output<NodePoolScalingConfigArgs> scalingConfig;

    /**
     * @return Automatic scaling configuration. See `scaling_config` below.
     * 
     */
    public Optional<Output<NodePoolScalingConfigArgs>> scalingConfig() {
        return Optional.ofNullable(this.scalingConfig);
    }

    /**
     * The ID of the scaling group.
     * 
     */
    @Import(name="scalingGroupId")
    private @Nullable Output<String> scalingGroupId;

    /**
     * @return The ID of the scaling group.
     * 
     */
    public Optional<Output<String>> scalingGroupId() {
        return Optional.ofNullable(this.scalingGroupId);
    }

    /**
     * Scaling group mode, default value: `release`. Valid values:
     * 
     */
    @Import(name="scalingPolicy")
    private @Nullable Output<String> scalingPolicy;

    /**
     * @return Scaling group mode, default value: `release`. Valid values:
     * 
     */
    public Optional<Output<String>> scalingPolicy() {
        return Optional.ofNullable(this.scalingPolicy);
    }

    /**
     * The security group ID of the node pool. This field has been replaced by `security_group_ids`, please use the `security_group_ids` field instead.
     * 
     * @deprecated
     * Field &#39;security_group_id&#39; has been deprecated from provider version 1.145.0. The security group ID of the node pool. This field has been replaced by `security_group_ids`, please use the `security_group_ids` field instead.
     * 
     */
    @Deprecated /* Field 'security_group_id' has been deprecated from provider version 1.145.0. The security group ID of the node pool. This field has been replaced by `security_group_ids`, please use the `security_group_ids` field instead. */
    @Import(name="securityGroupId")
    private @Nullable Output<String> securityGroupId;

    /**
     * @return The security group ID of the node pool. This field has been replaced by `security_group_ids`, please use the `security_group_ids` field instead.
     * 
     * @deprecated
     * Field &#39;security_group_id&#39; has been deprecated from provider version 1.145.0. The security group ID of the node pool. This field has been replaced by `security_group_ids`, please use the `security_group_ids` field instead.
     * 
     */
    @Deprecated /* Field 'security_group_id' has been deprecated from provider version 1.145.0. The security group ID of the node pool. This field has been replaced by `security_group_ids`, please use the `security_group_ids` field instead. */
    public Optional<Output<String>> securityGroupId() {
        return Optional.ofNullable(this.securityGroupId);
    }

    /**
     * Multiple security groups can be configured for a node pool. If both `security_group_ids` and `security_group_id` are configured, `security_group_ids` takes effect. This field cannot be modified.
     * 
     */
    @Import(name="securityGroupIds")
    private @Nullable Output<List<String>> securityGroupIds;

    /**
     * @return Multiple security groups can be configured for a node pool. If both `security_group_ids` and `security_group_id` are configured, `security_group_ids` takes effect. This field cannot be modified.
     * 
     */
    public Optional<Output<List<String>>> securityGroupIds() {
        return Optional.ofNullable(this.securityGroupIds);
    }

    /**
     * Alibaba Cloud OS security reinforcement. Default value: `false`. Value:
     * 
     */
    @Import(name="securityHardeningOs")
    private @Nullable Output<Boolean> securityHardeningOs;

    /**
     * @return Alibaba Cloud OS security reinforcement. Default value: `false`. Value:
     * 
     */
    public Optional<Output<Boolean>> securityHardeningOs() {
        return Optional.ofNullable(this.securityHardeningOs);
    }

    /**
     * Whether enable worker node to support soc security reinforcement, its valid value `true` or `false`. Default to `false` and apply to AliyunLinux series. See [SOC Reinforcement](https://help.aliyun.com/document_detail/196148.html).
     * 
     * &gt; **NOTE:**  It is forbidden to set both `security_hardening_os` and `soc_enabled` to `true` at the same time.
     * 
     */
    @Import(name="socEnabled")
    private @Nullable Output<Boolean> socEnabled;

    /**
     * @return Whether enable worker node to support soc security reinforcement, its valid value `true` or `false`. Default to `false` and apply to AliyunLinux series. See [SOC Reinforcement](https://help.aliyun.com/document_detail/196148.html).
     * 
     * &gt; **NOTE:**  It is forbidden to set both `security_hardening_os` and `soc_enabled` to `true` at the same time.
     * 
     */
    public Optional<Output<Boolean>> socEnabled() {
        return Optional.ofNullable(this.socEnabled);
    }

    /**
     * The number of instance types that are available. Auto Scaling creates preemptible instances of multiple instance types that are available at the lowest cost. Valid values: 1 to 10.
     * 
     */
    @Import(name="spotInstancePools")
    private @Nullable Output<Integer> spotInstancePools;

    /**
     * @return The number of instance types that are available. Auto Scaling creates preemptible instances of multiple instance types that are available at the lowest cost. Valid values: 1 to 10.
     * 
     */
    public Optional<Output<Integer>> spotInstancePools() {
        return Optional.ofNullable(this.spotInstancePools);
    }

    /**
     * Specifies whether to supplement preemptible instances when the number of preemptible instances drops below the specified minimum number. If you set the value to true, Auto Scaling attempts to create a new preemptible instance when the system notifies that an existing preemptible instance is about to be reclaimed. Valid values: `true`: enables the supplementation of preemptible instances. `false`: disables the supplementation of preemptible instances.
     * 
     */
    @Import(name="spotInstanceRemedy")
    private @Nullable Output<Boolean> spotInstanceRemedy;

    /**
     * @return Specifies whether to supplement preemptible instances when the number of preemptible instances drops below the specified minimum number. If you set the value to true, Auto Scaling attempts to create a new preemptible instance when the system notifies that an existing preemptible instance is about to be reclaimed. Valid values: `true`: enables the supplementation of preemptible instances. `false`: disables the supplementation of preemptible instances.
     * 
     */
    public Optional<Output<Boolean>> spotInstanceRemedy() {
        return Optional.ofNullable(this.spotInstanceRemedy);
    }

    /**
     * The current single preemptible instance type market price range configuration. See `spot_price_limit` below.
     * 
     */
    @Import(name="spotPriceLimits")
    private @Nullable Output<List<NodePoolSpotPriceLimitArgs>> spotPriceLimits;

    /**
     * @return The current single preemptible instance type market price range configuration. See `spot_price_limit` below.
     * 
     */
    public Optional<Output<List<NodePoolSpotPriceLimitArgs>>> spotPriceLimits() {
        return Optional.ofNullable(this.spotPriceLimits);
    }

    /**
     * The preemptible instance type. Value:
     * - `NoSpot` : Non-preemptible instance.
     * - `SpotWithPriceLimit` : Set the upper limit of the preemptible instance price.
     * - `SpotAsPriceGo` : The system automatically bids, following the actual price of the current market.
     * 
     */
    @Import(name="spotStrategy")
    private @Nullable Output<String> spotStrategy;

    /**
     * @return The preemptible instance type. Value:
     * - `NoSpot` : Non-preemptible instance.
     * - `SpotWithPriceLimit` : Set the upper limit of the preemptible instance price.
     * - `SpotAsPriceGo` : The system automatically bids, following the actual price of the current market.
     * 
     */
    public Optional<Output<String>> spotStrategy() {
        return Optional.ofNullable(this.spotStrategy);
    }

    /**
     * Specifies whether to enable the burst feature for system disks. Valid values:`true`: enables the burst feature. `false`: disables the burst feature. This parameter is supported only when `system_disk_category` is set to `cloud_auto`.
     * 
     */
    @Import(name="systemDiskBurstingEnabled")
    private @Nullable Output<Boolean> systemDiskBurstingEnabled;

    /**
     * @return Specifies whether to enable the burst feature for system disks. Valid values:`true`: enables the burst feature. `false`: disables the burst feature. This parameter is supported only when `system_disk_category` is set to `cloud_auto`.
     * 
     */
    public Optional<Output<Boolean>> systemDiskBurstingEnabled() {
        return Optional.ofNullable(this.systemDiskBurstingEnabled);
    }

    /**
     * The multi-disk categories of the system disk. When a high-priority disk type cannot be used, Auto Scaling automatically tries to create a system disk with the next priority disk category. Valid values: `cloud`: cloud disk. `cloud_efficiency`: a high-efficiency cloud disk. `cloud_ssd`:SSD cloud disk. `cloud_essd`: ESSD cloud disk.
     * 
     */
    @Import(name="systemDiskCategories")
    private @Nullable Output<List<String>> systemDiskCategories;

    /**
     * @return The multi-disk categories of the system disk. When a high-priority disk type cannot be used, Auto Scaling automatically tries to create a system disk with the next priority disk category. Valid values: `cloud`: cloud disk. `cloud_efficiency`: a high-efficiency cloud disk. `cloud_ssd`:SSD cloud disk. `cloud_essd`: ESSD cloud disk.
     * 
     */
    public Optional<Output<List<String>>> systemDiskCategories() {
        return Optional.ofNullable(this.systemDiskCategories);
    }

    /**
     * The system disk category of worker node. Its valid value are `cloud_ssd`, `cloud_efficiency`, `cloud_essd` and `cloud_auto`.
     * 
     */
    @Import(name="systemDiskCategory")
    private @Nullable Output<String> systemDiskCategory;

    /**
     * @return The system disk category of worker node. Its valid value are `cloud_ssd`, `cloud_efficiency`, `cloud_essd` and `cloud_auto`.
     * 
     */
    public Optional<Output<String>> systemDiskCategory() {
        return Optional.ofNullable(this.systemDiskCategory);
    }

    /**
     * The encryption algorithm used by the system disk. Value range: aes-256.
     * 
     */
    @Import(name="systemDiskEncryptAlgorithm")
    private @Nullable Output<String> systemDiskEncryptAlgorithm;

    /**
     * @return The encryption algorithm used by the system disk. Value range: aes-256.
     * 
     */
    public Optional<Output<String>> systemDiskEncryptAlgorithm() {
        return Optional.ofNullable(this.systemDiskEncryptAlgorithm);
    }

    /**
     * Whether to encrypt the system disk. Value range: `true`: encryption. `false`: Do not encrypt.
     * 
     */
    @Import(name="systemDiskEncrypted")
    private @Nullable Output<Boolean> systemDiskEncrypted;

    /**
     * @return Whether to encrypt the system disk. Value range: `true`: encryption. `false`: Do not encrypt.
     * 
     */
    public Optional<Output<Boolean>> systemDiskEncrypted() {
        return Optional.ofNullable(this.systemDiskEncrypted);
    }

    /**
     * The ID of the KMS key used by the system disk.
     * 
     */
    @Import(name="systemDiskKmsKey")
    private @Nullable Output<String> systemDiskKmsKey;

    /**
     * @return The ID of the KMS key used by the system disk.
     * 
     */
    public Optional<Output<String>> systemDiskKmsKey() {
        return Optional.ofNullable(this.systemDiskKmsKey);
    }

    /**
     * The system disk performance of the node takes effect only for the ESSD disk.
     * - `PL0`: maximum random read/write IOPS 10000 for a single disk.
     * - `PL1`: maximum random read/write IOPS 50000 for a single disk.
     * - `PL2`: highest random read/write IOPS 100000 for a single disk.
     * - `PL3`: maximum random read/write IOPS 1 million for a single disk.
     * 
     */
    @Import(name="systemDiskPerformanceLevel")
    private @Nullable Output<String> systemDiskPerformanceLevel;

    /**
     * @return The system disk performance of the node takes effect only for the ESSD disk.
     * - `PL0`: maximum random read/write IOPS 10000 for a single disk.
     * - `PL1`: maximum random read/write IOPS 50000 for a single disk.
     * - `PL2`: highest random read/write IOPS 100000 for a single disk.
     * - `PL3`: maximum random read/write IOPS 1 million for a single disk.
     * 
     */
    public Optional<Output<String>> systemDiskPerformanceLevel() {
        return Optional.ofNullable(this.systemDiskPerformanceLevel);
    }

    /**
     * The predefined IOPS of a system disk. Valid values: 0 to min{50,000, 1,000 × Capacity - Baseline IOPS}. Baseline IOPS = min{1,800 + 50 × Capacity, 50,000}. This parameter is supported only when `system_disk_category` is set to `cloud_auto`.
     * 
     */
    @Import(name="systemDiskProvisionedIops")
    private @Nullable Output<Integer> systemDiskProvisionedIops;

    /**
     * @return The predefined IOPS of a system disk. Valid values: 0 to min{50,000, 1,000 × Capacity - Baseline IOPS}. Baseline IOPS = min{1,800 + 50 × Capacity, 50,000}. This parameter is supported only when `system_disk_category` is set to `cloud_auto`.
     * 
     */
    public Optional<Output<Integer>> systemDiskProvisionedIops() {
        return Optional.ofNullable(this.systemDiskProvisionedIops);
    }

    /**
     * The system disk category of worker node. Its valid value range [40~500] in GB. Default to `120`.
     * 
     */
    @Import(name="systemDiskSize")
    private @Nullable Output<Integer> systemDiskSize;

    /**
     * @return The system disk category of worker node. Its valid value range [40~500] in GB. Default to `120`.
     * 
     */
    public Optional<Output<Integer>> systemDiskSize() {
        return Optional.ofNullable(this.systemDiskSize);
    }

    /**
     * The ID of the automatic snapshot policy used by the system disk.
     * 
     */
    @Import(name="systemDiskSnapshotPolicyId")
    private @Nullable Output<String> systemDiskSnapshotPolicyId;

    /**
     * @return The ID of the automatic snapshot policy used by the system disk.
     * 
     */
    public Optional<Output<String>> systemDiskSnapshotPolicyId() {
        return Optional.ofNullable(this.systemDiskSnapshotPolicyId);
    }

    /**
     * Add tags only for ECS instances. The maximum length of the tag key is 128 characters. The tag key and value cannot start with aliyun or acs:, or contain https:// or http://.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return Add tags only for ECS instances. The maximum length of the tag key is 128 characters. The tag key and value cannot start with aliyun or acs:, or contain https:// or http://.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * A List of Kubernetes taints to assign to the nodes. Detailed below. More information in [Taints and Toleration](https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/). See `taints` below.
     * 
     */
    @Import(name="taints")
    private @Nullable Output<List<NodePoolTaintArgs>> taints;

    /**
     * @return A List of Kubernetes taints to assign to the nodes. Detailed below. More information in [Taints and Toleration](https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/). See `taints` below.
     * 
     */
    public Optional<Output<List<NodePoolTaintArgs>>> taints() {
        return Optional.ofNullable(this.taints);
    }

    /**
     * The configuration about confidential computing for the cluster. See `tee_config` below.
     * 
     */
    @Import(name="teeConfig")
    private @Nullable Output<NodePoolTeeConfigArgs> teeConfig;

    /**
     * @return The configuration about confidential computing for the cluster. See `tee_config` below.
     * 
     */
    public Optional<Output<NodePoolTeeConfigArgs>> teeConfig() {
        return Optional.ofNullable(this.teeConfig);
    }

    /**
     * Whether the node after expansion can be scheduled.
     * 
     */
    @Import(name="unschedulable")
    private @Nullable Output<Boolean> unschedulable;

    /**
     * @return Whether the node after expansion can be scheduled.
     * 
     */
    public Optional<Output<Boolean>> unschedulable() {
        return Optional.ofNullable(this.unschedulable);
    }

    /**
     * Synchronously update node labels and taints.
     * 
     */
    @Import(name="updateNodes")
    private @Nullable Output<Boolean> updateNodes;

    /**
     * @return Synchronously update node labels and taints.
     * 
     */
    public Optional<Output<Boolean>> updateNodes() {
        return Optional.ofNullable(this.updateNodes);
    }

    /**
     * Node custom data, base64-encoded.
     * 
     */
    @Import(name="userData")
    private @Nullable Output<String> userData;

    /**
     * @return Node custom data, base64-encoded.
     * 
     */
    public Optional<Output<String>> userData() {
        return Optional.ofNullable(this.userData);
    }

    /**
     * The vswitches used by node pool workers.
     * 
     */
    @Import(name="vswitchIds")
    private @Nullable Output<List<String>> vswitchIds;

    /**
     * @return The vswitches used by node pool workers.
     * 
     */
    public Optional<Output<List<String>>> vswitchIds() {
        return Optional.ofNullable(this.vswitchIds);
    }

    private NodePoolState() {}

    private NodePoolState(NodePoolState $) {
        this.autoRenew = $.autoRenew;
        this.autoRenewPeriod = $.autoRenewPeriod;
        this.cisEnabled = $.cisEnabled;
        this.clusterId = $.clusterId;
        this.compensateWithOnDemand = $.compensateWithOnDemand;
        this.cpuPolicy = $.cpuPolicy;
        this.dataDisks = $.dataDisks;
        this.deploymentSetId = $.deploymentSetId;
        this.desiredSize = $.desiredSize;
        this.forceDelete = $.forceDelete;
        this.formatDisk = $.formatDisk;
        this.imageId = $.imageId;
        this.imageType = $.imageType;
        this.installCloudMonitor = $.installCloudMonitor;
        this.instanceChargeType = $.instanceChargeType;
        this.instanceTypes = $.instanceTypes;
        this.instances = $.instances;
        this.internetChargeType = $.internetChargeType;
        this.internetMaxBandwidthOut = $.internetMaxBandwidthOut;
        this.keepInstanceName = $.keepInstanceName;
        this.keyName = $.keyName;
        this.kmsEncryptedPassword = $.kmsEncryptedPassword;
        this.kmsEncryptionContext = $.kmsEncryptionContext;
        this.kubeletConfiguration = $.kubeletConfiguration;
        this.labels = $.labels;
        this.loginAsNonRoot = $.loginAsNonRoot;
        this.management = $.management;
        this.multiAzPolicy = $.multiAzPolicy;
        this.name = $.name;
        this.nodeCount = $.nodeCount;
        this.nodeNameMode = $.nodeNameMode;
        this.nodePoolId = $.nodePoolId;
        this.nodePoolName = $.nodePoolName;
        this.onDemandBaseCapacity = $.onDemandBaseCapacity;
        this.onDemandPercentageAboveBaseCapacity = $.onDemandPercentageAboveBaseCapacity;
        this.password = $.password;
        this.period = $.period;
        this.periodUnit = $.periodUnit;
        this.platform = $.platform;
        this.preUserData = $.preUserData;
        this.privatePoolOptions = $.privatePoolOptions;
        this.ramRoleName = $.ramRoleName;
        this.rdsInstances = $.rdsInstances;
        this.resourceGroupId = $.resourceGroupId;
        this.rollingPolicy = $.rollingPolicy;
        this.runtimeName = $.runtimeName;
        this.runtimeVersion = $.runtimeVersion;
        this.scalingConfig = $.scalingConfig;
        this.scalingGroupId = $.scalingGroupId;
        this.scalingPolicy = $.scalingPolicy;
        this.securityGroupId = $.securityGroupId;
        this.securityGroupIds = $.securityGroupIds;
        this.securityHardeningOs = $.securityHardeningOs;
        this.socEnabled = $.socEnabled;
        this.spotInstancePools = $.spotInstancePools;
        this.spotInstanceRemedy = $.spotInstanceRemedy;
        this.spotPriceLimits = $.spotPriceLimits;
        this.spotStrategy = $.spotStrategy;
        this.systemDiskBurstingEnabled = $.systemDiskBurstingEnabled;
        this.systemDiskCategories = $.systemDiskCategories;
        this.systemDiskCategory = $.systemDiskCategory;
        this.systemDiskEncryptAlgorithm = $.systemDiskEncryptAlgorithm;
        this.systemDiskEncrypted = $.systemDiskEncrypted;
        this.systemDiskKmsKey = $.systemDiskKmsKey;
        this.systemDiskPerformanceLevel = $.systemDiskPerformanceLevel;
        this.systemDiskProvisionedIops = $.systemDiskProvisionedIops;
        this.systemDiskSize = $.systemDiskSize;
        this.systemDiskSnapshotPolicyId = $.systemDiskSnapshotPolicyId;
        this.tags = $.tags;
        this.taints = $.taints;
        this.teeConfig = $.teeConfig;
        this.unschedulable = $.unschedulable;
        this.updateNodes = $.updateNodes;
        this.userData = $.userData;
        this.vswitchIds = $.vswitchIds;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NodePoolState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NodePoolState $;

        public Builder() {
            $ = new NodePoolState();
        }

        public Builder(NodePoolState defaults) {
            $ = new NodePoolState(Objects.requireNonNull(defaults));
        }

        /**
         * @param autoRenew Whether to enable automatic renewal for nodes in the node pool takes effect only when `instance_charge_type` is set to `PrePaid`. Default value: `false`. Valid values:
         * 
         * @return builder
         * 
         */
        public Builder autoRenew(@Nullable Output<Boolean> autoRenew) {
            $.autoRenew = autoRenew;
            return this;
        }

        /**
         * @param autoRenew Whether to enable automatic renewal for nodes in the node pool takes effect only when `instance_charge_type` is set to `PrePaid`. Default value: `false`. Valid values:
         * 
         * @return builder
         * 
         */
        public Builder autoRenew(Boolean autoRenew) {
            return autoRenew(Output.of(autoRenew));
        }

        /**
         * @param autoRenewPeriod The automatic renewal period of nodes in the node pool takes effect only when you select Prepaid and Automatic Renewal, and is a required value. When `PeriodUnit = Month`, the value range is {1, 2, 3, 6, 12}. Default value: 1.
         * 
         * @return builder
         * 
         */
        public Builder autoRenewPeriod(@Nullable Output<Integer> autoRenewPeriod) {
            $.autoRenewPeriod = autoRenewPeriod;
            return this;
        }

        /**
         * @param autoRenewPeriod The automatic renewal period of nodes in the node pool takes effect only when you select Prepaid and Automatic Renewal, and is a required value. When `PeriodUnit = Month`, the value range is {1, 2, 3, 6, 12}. Default value: 1.
         * 
         * @return builder
         * 
         */
        public Builder autoRenewPeriod(Integer autoRenewPeriod) {
            return autoRenewPeriod(Output.of(autoRenewPeriod));
        }

        /**
         * @param cisEnabled Whether enable worker node to support cis security reinforcement, its valid value `true` or `false`. Default to `false` and apply to AliyunLinux series. Use `security_hardening_os` instead.
         * 
         * @return builder
         * 
         * @deprecated
         * Field &#39;cis_enabled&#39; has been deprecated from provider version 1.223.1. Whether enable worker node to support cis security reinforcement, its valid value `true` or `false`. Default to `false` and apply to AliyunLinux series. Use `security_hardening_os` instead.
         * 
         */
        @Deprecated /* Field 'cis_enabled' has been deprecated from provider version 1.223.1. Whether enable worker node to support cis security reinforcement, its valid value `true` or `false`. Default to `false` and apply to AliyunLinux series. Use `security_hardening_os` instead. */
        public Builder cisEnabled(@Nullable Output<Boolean> cisEnabled) {
            $.cisEnabled = cisEnabled;
            return this;
        }

        /**
         * @param cisEnabled Whether enable worker node to support cis security reinforcement, its valid value `true` or `false`. Default to `false` and apply to AliyunLinux series. Use `security_hardening_os` instead.
         * 
         * @return builder
         * 
         * @deprecated
         * Field &#39;cis_enabled&#39; has been deprecated from provider version 1.223.1. Whether enable worker node to support cis security reinforcement, its valid value `true` or `false`. Default to `false` and apply to AliyunLinux series. Use `security_hardening_os` instead.
         * 
         */
        @Deprecated /* Field 'cis_enabled' has been deprecated from provider version 1.223.1. Whether enable worker node to support cis security reinforcement, its valid value `true` or `false`. Default to `false` and apply to AliyunLinux series. Use `security_hardening_os` instead. */
        public Builder cisEnabled(Boolean cisEnabled) {
            return cisEnabled(Output.of(cisEnabled));
        }

        /**
         * @param clusterId The id of kubernetes cluster.
         * 
         * @return builder
         * 
         */
        public Builder clusterId(@Nullable Output<String> clusterId) {
            $.clusterId = clusterId;
            return this;
        }

        /**
         * @param clusterId The id of kubernetes cluster.
         * 
         * @return builder
         * 
         */
        public Builder clusterId(String clusterId) {
            return clusterId(Output.of(clusterId));
        }

        /**
         * @param compensateWithOnDemand Specifies whether to automatically create pay-as-you-go instances to meet the required number of ECS instances if preemptible instances cannot be created due to reasons such as cost or insufficient inventory. This parameter takes effect when you set `multi_az_policy` to `COST_OPTIMIZED`. Valid values: `true`: automatically creates pay-as-you-go instances to meet the required number of ECS instances if preemptible instances cannot be created. `false`: does not create pay-as-you-go instances to meet the required number of ECS instances if preemptible instances cannot be created.
         * 
         * @return builder
         * 
         */
        public Builder compensateWithOnDemand(@Nullable Output<Boolean> compensateWithOnDemand) {
            $.compensateWithOnDemand = compensateWithOnDemand;
            return this;
        }

        /**
         * @param compensateWithOnDemand Specifies whether to automatically create pay-as-you-go instances to meet the required number of ECS instances if preemptible instances cannot be created due to reasons such as cost or insufficient inventory. This parameter takes effect when you set `multi_az_policy` to `COST_OPTIMIZED`. Valid values: `true`: automatically creates pay-as-you-go instances to meet the required number of ECS instances if preemptible instances cannot be created. `false`: does not create pay-as-you-go instances to meet the required number of ECS instances if preemptible instances cannot be created.
         * 
         * @return builder
         * 
         */
        public Builder compensateWithOnDemand(Boolean compensateWithOnDemand) {
            return compensateWithOnDemand(Output.of(compensateWithOnDemand));
        }

        /**
         * @param cpuPolicy Node CPU management policies. Default value: `none`. When the cluster version is 1.12.6 or later, the following two policies are supported:
         * 
         * @return builder
         * 
         */
        public Builder cpuPolicy(@Nullable Output<String> cpuPolicy) {
            $.cpuPolicy = cpuPolicy;
            return this;
        }

        /**
         * @param cpuPolicy Node CPU management policies. Default value: `none`. When the cluster version is 1.12.6 or later, the following two policies are supported:
         * 
         * @return builder
         * 
         */
        public Builder cpuPolicy(String cpuPolicy) {
            return cpuPolicy(Output.of(cpuPolicy));
        }

        /**
         * @param dataDisks Configure the data disk of the node in the node pool. See `data_disks` below.
         * 
         * @return builder
         * 
         */
        public Builder dataDisks(@Nullable Output<List<NodePoolDataDiskArgs>> dataDisks) {
            $.dataDisks = dataDisks;
            return this;
        }

        /**
         * @param dataDisks Configure the data disk of the node in the node pool. See `data_disks` below.
         * 
         * @return builder
         * 
         */
        public Builder dataDisks(List<NodePoolDataDiskArgs> dataDisks) {
            return dataDisks(Output.of(dataDisks));
        }

        /**
         * @param dataDisks Configure the data disk of the node in the node pool. See `data_disks` below.
         * 
         * @return builder
         * 
         */
        public Builder dataDisks(NodePoolDataDiskArgs... dataDisks) {
            return dataDisks(List.of(dataDisks));
        }

        /**
         * @param deploymentSetId The deployment set of node pool. Specify the deploymentSet to ensure that the nodes in the node pool can be distributed on different physical machines.
         * 
         * @return builder
         * 
         */
        public Builder deploymentSetId(@Nullable Output<String> deploymentSetId) {
            $.deploymentSetId = deploymentSetId;
            return this;
        }

        /**
         * @param deploymentSetId The deployment set of node pool. Specify the deploymentSet to ensure that the nodes in the node pool can be distributed on different physical machines.
         * 
         * @return builder
         * 
         */
        public Builder deploymentSetId(String deploymentSetId) {
            return deploymentSetId(Output.of(deploymentSetId));
        }

        /**
         * @param desiredSize Number of expected nodes in the node pool.
         * 
         * @return builder
         * 
         */
        public Builder desiredSize(@Nullable Output<Integer> desiredSize) {
            $.desiredSize = desiredSize;
            return this;
        }

        /**
         * @param desiredSize Number of expected nodes in the node pool.
         * 
         * @return builder
         * 
         */
        public Builder desiredSize(Integer desiredSize) {
            return desiredSize(Output.of(desiredSize));
        }

        /**
         * @param forceDelete Whether to force deletion.
         * 
         * @return builder
         * 
         */
        public Builder forceDelete(@Nullable Output<Boolean> forceDelete) {
            $.forceDelete = forceDelete;
            return this;
        }

        /**
         * @param forceDelete Whether to force deletion.
         * 
         * @return builder
         * 
         */
        public Builder forceDelete(Boolean forceDelete) {
            return forceDelete(Output.of(forceDelete));
        }

        /**
         * @param formatDisk After you select this check box, if data disks have been attached to the specified ECS instances and the file system of the last data disk is uninitialized, the system automatically formats the last data disk to ext4 and mounts the data disk to /var/lib/docker and /var/lib/kubelet. The original data on the disk will be cleared. Make sure that you back up data in advance. If no data disk is mounted on the ECS instance, no new data disk will be purchased. Default is `false`.
         * 
         * @return builder
         * 
         */
        public Builder formatDisk(@Nullable Output<Boolean> formatDisk) {
            $.formatDisk = formatDisk;
            return this;
        }

        /**
         * @param formatDisk After you select this check box, if data disks have been attached to the specified ECS instances and the file system of the last data disk is uninitialized, the system automatically formats the last data disk to ext4 and mounts the data disk to /var/lib/docker and /var/lib/kubelet. The original data on the disk will be cleared. Make sure that you back up data in advance. If no data disk is mounted on the ECS instance, no new data disk will be purchased. Default is `false`.
         * 
         * @return builder
         * 
         */
        public Builder formatDisk(Boolean formatDisk) {
            return formatDisk(Output.of(formatDisk));
        }

        /**
         * @param imageId The custom image ID. The system-provided image is used by default.
         * 
         * @return builder
         * 
         */
        public Builder imageId(@Nullable Output<String> imageId) {
            $.imageId = imageId;
            return this;
        }

        /**
         * @param imageId The custom image ID. The system-provided image is used by default.
         * 
         * @return builder
         * 
         */
        public Builder imageId(String imageId) {
            return imageId(Output.of(imageId));
        }

        /**
         * @param imageType The operating system image type and the `platform` parameter can be selected from the following values:
         * - `AliyunLinux` : Alinux2 image.
         * - `AliyunLinux3` : Alinux3 image.
         * - `AliyunLinux3Arm64` : Alinux3 mirror ARM version.
         * - `AliyunLinuxUEFI` : Alinux2 Image UEFI version.
         * - `CentOS` : CentOS image.
         * - `Windows` : Windows image.
         * - `WindowsCore` : WindowsCore image.
         * - `ContainerOS` : container-optimized image.
         * - `Ubuntu`: (Available since v1.236.0) Ubuntu image.
         * 
         * @return builder
         * 
         */
        public Builder imageType(@Nullable Output<String> imageType) {
            $.imageType = imageType;
            return this;
        }

        /**
         * @param imageType The operating system image type and the `platform` parameter can be selected from the following values:
         * - `AliyunLinux` : Alinux2 image.
         * - `AliyunLinux3` : Alinux3 image.
         * - `AliyunLinux3Arm64` : Alinux3 mirror ARM version.
         * - `AliyunLinuxUEFI` : Alinux2 Image UEFI version.
         * - `CentOS` : CentOS image.
         * - `Windows` : Windows image.
         * - `WindowsCore` : WindowsCore image.
         * - `ContainerOS` : container-optimized image.
         * - `Ubuntu`: (Available since v1.236.0) Ubuntu image.
         * 
         * @return builder
         * 
         */
        public Builder imageType(String imageType) {
            return imageType(Output.of(imageType));
        }

        /**
         * @param installCloudMonitor Whether to install cloud monitoring on the ECS node. After installation, you can view the monitoring information of the created ECS instance in the cloud monitoring console and recommend enable it. Default value: `false`. Valid values:
         * 
         * @return builder
         * 
         */
        public Builder installCloudMonitor(@Nullable Output<Boolean> installCloudMonitor) {
            $.installCloudMonitor = installCloudMonitor;
            return this;
        }

        /**
         * @param installCloudMonitor Whether to install cloud monitoring on the ECS node. After installation, you can view the monitoring information of the created ECS instance in the cloud monitoring console and recommend enable it. Default value: `false`. Valid values:
         * 
         * @return builder
         * 
         */
        public Builder installCloudMonitor(Boolean installCloudMonitor) {
            return installCloudMonitor(Output.of(installCloudMonitor));
        }

        /**
         * @param instanceChargeType Node payment type. Valid values: `PostPaid`, `PrePaid`, default is `PostPaid`. If value is `PrePaid`, the arguments `period`, `period_unit`, `auto_renew` and `auto_renew_period` are required.
         * 
         * @return builder
         * 
         */
        public Builder instanceChargeType(@Nullable Output<String> instanceChargeType) {
            $.instanceChargeType = instanceChargeType;
            return this;
        }

        /**
         * @param instanceChargeType Node payment type. Valid values: `PostPaid`, `PrePaid`, default is `PostPaid`. If value is `PrePaid`, the arguments `period`, `period_unit`, `auto_renew` and `auto_renew_period` are required.
         * 
         * @return builder
         * 
         */
        public Builder instanceChargeType(String instanceChargeType) {
            return instanceChargeType(Output.of(instanceChargeType));
        }

        /**
         * @param instanceTypes In the node instance specification list, you can select multiple instance specifications as alternatives. When each node is created, it will try to purchase from the first specification until it is created successfully. The final purchased instance specifications may vary with inventory changes.
         * 
         * @return builder
         * 
         */
        public Builder instanceTypes(@Nullable Output<List<String>> instanceTypes) {
            $.instanceTypes = instanceTypes;
            return this;
        }

        /**
         * @param instanceTypes In the node instance specification list, you can select multiple instance specifications as alternatives. When each node is created, it will try to purchase from the first specification until it is created successfully. The final purchased instance specifications may vary with inventory changes.
         * 
         * @return builder
         * 
         */
        public Builder instanceTypes(List<String> instanceTypes) {
            return instanceTypes(Output.of(instanceTypes));
        }

        /**
         * @param instanceTypes In the node instance specification list, you can select multiple instance specifications as alternatives. When each node is created, it will try to purchase from the first specification until it is created successfully. The final purchased instance specifications may vary with inventory changes.
         * 
         * @return builder
         * 
         */
        public Builder instanceTypes(String... instanceTypes) {
            return instanceTypes(List.of(instanceTypes));
        }

        /**
         * @param instances The instance list. Add existing nodes under the same cluster VPC to the node pool.
         * 
         * @return builder
         * 
         */
        public Builder instances(@Nullable Output<List<String>> instances) {
            $.instances = instances;
            return this;
        }

        /**
         * @param instances The instance list. Add existing nodes under the same cluster VPC to the node pool.
         * 
         * @return builder
         * 
         */
        public Builder instances(List<String> instances) {
            return instances(Output.of(instances));
        }

        /**
         * @param instances The instance list. Add existing nodes under the same cluster VPC to the node pool.
         * 
         * @return builder
         * 
         */
        public Builder instances(String... instances) {
            return instances(List.of(instances));
        }

        /**
         * @param internetChargeType The billing method for network usage. Valid values `PayByBandwidth` and `PayByTraffic`. Conflict with `eip_internet_charge_type`, EIP and public network IP can only choose one.
         * 
         * @return builder
         * 
         */
        public Builder internetChargeType(@Nullable Output<String> internetChargeType) {
            $.internetChargeType = internetChargeType;
            return this;
        }

        /**
         * @param internetChargeType The billing method for network usage. Valid values `PayByBandwidth` and `PayByTraffic`. Conflict with `eip_internet_charge_type`, EIP and public network IP can only choose one.
         * 
         * @return builder
         * 
         */
        public Builder internetChargeType(String internetChargeType) {
            return internetChargeType(Output.of(internetChargeType));
        }

        /**
         * @param internetMaxBandwidthOut The maximum bandwidth of the public IP address of the node. The unit is Mbps(Mega bit per second). The value range is:\[1,100\]
         * 
         * @return builder
         * 
         */
        public Builder internetMaxBandwidthOut(@Nullable Output<Integer> internetMaxBandwidthOut) {
            $.internetMaxBandwidthOut = internetMaxBandwidthOut;
            return this;
        }

        /**
         * @param internetMaxBandwidthOut The maximum bandwidth of the public IP address of the node. The unit is Mbps(Mega bit per second). The value range is:\[1,100\]
         * 
         * @return builder
         * 
         */
        public Builder internetMaxBandwidthOut(Integer internetMaxBandwidthOut) {
            return internetMaxBandwidthOut(Output.of(internetMaxBandwidthOut));
        }

        /**
         * @param keepInstanceName Add an existing instance to the node pool, whether to keep the original instance name. It is recommended to set to `true`.
         * 
         * @return builder
         * 
         */
        public Builder keepInstanceName(@Nullable Output<Boolean> keepInstanceName) {
            $.keepInstanceName = keepInstanceName;
            return this;
        }

        /**
         * @param keepInstanceName Add an existing instance to the node pool, whether to keep the original instance name. It is recommended to set to `true`.
         * 
         * @return builder
         * 
         */
        public Builder keepInstanceName(Boolean keepInstanceName) {
            return keepInstanceName(Output.of(keepInstanceName));
        }

        /**
         * @param keyName The name of the key pair. When the node pool is a managed node pool, only `key_name` is supported.
         * 
         * @return builder
         * 
         */
        public Builder keyName(@Nullable Output<String> keyName) {
            $.keyName = keyName;
            return this;
        }

        /**
         * @param keyName The name of the key pair. When the node pool is a managed node pool, only `key_name` is supported.
         * 
         * @return builder
         * 
         */
        public Builder keyName(String keyName) {
            return keyName(Output.of(keyName));
        }

        /**
         * @param kmsEncryptedPassword An KMS encrypts password used to a cs kubernetes. You have to specify one of `password` `key_name` `kms_encrypted_password` fields.
         * 
         * @return builder
         * 
         */
        public Builder kmsEncryptedPassword(@Nullable Output<String> kmsEncryptedPassword) {
            $.kmsEncryptedPassword = kmsEncryptedPassword;
            return this;
        }

        /**
         * @param kmsEncryptedPassword An KMS encrypts password used to a cs kubernetes. You have to specify one of `password` `key_name` `kms_encrypted_password` fields.
         * 
         * @return builder
         * 
         */
        public Builder kmsEncryptedPassword(String kmsEncryptedPassword) {
            return kmsEncryptedPassword(Output.of(kmsEncryptedPassword));
        }

        /**
         * @param kmsEncryptionContext An KMS encryption context used to decrypt `kms_encrypted_password` before creating or updating a cs kubernetes with `kms_encrypted_password`. See [Encryption Context](https://www.alibabacloud.com/help/doc-detail/42975.htm). It is valid when `kms_encrypted_password` is set.
         * 
         * @return builder
         * 
         */
        public Builder kmsEncryptionContext(@Nullable Output<Map<String,String>> kmsEncryptionContext) {
            $.kmsEncryptionContext = kmsEncryptionContext;
            return this;
        }

        /**
         * @param kmsEncryptionContext An KMS encryption context used to decrypt `kms_encrypted_password` before creating or updating a cs kubernetes with `kms_encrypted_password`. See [Encryption Context](https://www.alibabacloud.com/help/doc-detail/42975.htm). It is valid when `kms_encrypted_password` is set.
         * 
         * @return builder
         * 
         */
        public Builder kmsEncryptionContext(Map<String,String> kmsEncryptionContext) {
            return kmsEncryptionContext(Output.of(kmsEncryptionContext));
        }

        /**
         * @param kubeletConfiguration Kubelet configuration parameters for worker nodes. See `kubelet_configuration` below. More information in [Kubelet Configuration](https://kubernetes.io/docs/reference/config-api/kubelet-config.v1beta1/). See `kubelet_configuration` below.
         * 
         * @return builder
         * 
         */
        public Builder kubeletConfiguration(@Nullable Output<NodePoolKubeletConfigurationArgs> kubeletConfiguration) {
            $.kubeletConfiguration = kubeletConfiguration;
            return this;
        }

        /**
         * @param kubeletConfiguration Kubelet configuration parameters for worker nodes. See `kubelet_configuration` below. More information in [Kubelet Configuration](https://kubernetes.io/docs/reference/config-api/kubelet-config.v1beta1/). See `kubelet_configuration` below.
         * 
         * @return builder
         * 
         */
        public Builder kubeletConfiguration(NodePoolKubeletConfigurationArgs kubeletConfiguration) {
            return kubeletConfiguration(Output.of(kubeletConfiguration));
        }

        /**
         * @param labels A List of Kubernetes labels to assign to the nodes . Only labels that are applied with the ACK API are managed by this argument. Detailed below. More information in [Labels](https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/). See `labels` below.
         * 
         * @return builder
         * 
         */
        public Builder labels(@Nullable Output<List<NodePoolLabelArgs>> labels) {
            $.labels = labels;
            return this;
        }

        /**
         * @param labels A List of Kubernetes labels to assign to the nodes . Only labels that are applied with the ACK API are managed by this argument. Detailed below. More information in [Labels](https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/). See `labels` below.
         * 
         * @return builder
         * 
         */
        public Builder labels(List<NodePoolLabelArgs> labels) {
            return labels(Output.of(labels));
        }

        /**
         * @param labels A List of Kubernetes labels to assign to the nodes . Only labels that are applied with the ACK API are managed by this argument. Detailed below. More information in [Labels](https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/). See `labels` below.
         * 
         * @return builder
         * 
         */
        public Builder labels(NodePoolLabelArgs... labels) {
            return labels(List.of(labels));
        }

        /**
         * @param loginAsNonRoot Whether the ECS instance is logged on as a ecs-user user. Valid value: `true` and `false`.
         * 
         * @return builder
         * 
         */
        public Builder loginAsNonRoot(@Nullable Output<Boolean> loginAsNonRoot) {
            $.loginAsNonRoot = loginAsNonRoot;
            return this;
        }

        /**
         * @param loginAsNonRoot Whether the ECS instance is logged on as a ecs-user user. Valid value: `true` and `false`.
         * 
         * @return builder
         * 
         */
        public Builder loginAsNonRoot(Boolean loginAsNonRoot) {
            return loginAsNonRoot(Output.of(loginAsNonRoot));
        }

        /**
         * @param management Managed node pool configuration. See `management` below.
         * 
         * @return builder
         * 
         */
        public Builder management(@Nullable Output<NodePoolManagementArgs> management) {
            $.management = management;
            return this;
        }

        /**
         * @param management Managed node pool configuration. See `management` below.
         * 
         * @return builder
         * 
         */
        public Builder management(NodePoolManagementArgs management) {
            return management(Output.of(management));
        }

        /**
         * @param multiAzPolicy The scaling policy for ECS instances in a multi-zone scaling group. Valid value: `PRIORITY`, `COST_OPTIMIZED` and `BALANCE`. `PRIORITY`: scales the capacity according to the virtual switches you define (VSwitchIds.N). When an ECS instance cannot be created in the zone where the higher-priority vSwitch is located, the next-priority vSwitch is automatically used to create an ECS instance. `COST_OPTIMIZED`: try to create by vCPU unit price from low to high. When the scaling configuration is configured with multiple instances of preemptible billing, preemptible instances are created first. You can continue to use the `CompensateWithOnDemand` parameter to specify whether to automatically try to create a preemptible instance by paying for it. It takes effect only when the scaling configuration has multi-instance specifications or preemptible instances. `BALANCE`: distributes ECS instances evenly among the multi-zone specified by the scaling group. If the zones become unbalanced due to insufficient inventory, you can use the API RebalanceInstances to balance resources.
         * 
         * @return builder
         * 
         */
        public Builder multiAzPolicy(@Nullable Output<String> multiAzPolicy) {
            $.multiAzPolicy = multiAzPolicy;
            return this;
        }

        /**
         * @param multiAzPolicy The scaling policy for ECS instances in a multi-zone scaling group. Valid value: `PRIORITY`, `COST_OPTIMIZED` and `BALANCE`. `PRIORITY`: scales the capacity according to the virtual switches you define (VSwitchIds.N). When an ECS instance cannot be created in the zone where the higher-priority vSwitch is located, the next-priority vSwitch is automatically used to create an ECS instance. `COST_OPTIMIZED`: try to create by vCPU unit price from low to high. When the scaling configuration is configured with multiple instances of preemptible billing, preemptible instances are created first. You can continue to use the `CompensateWithOnDemand` parameter to specify whether to automatically try to create a preemptible instance by paying for it. It takes effect only when the scaling configuration has multi-instance specifications or preemptible instances. `BALANCE`: distributes ECS instances evenly among the multi-zone specified by the scaling group. If the zones become unbalanced due to insufficient inventory, you can use the API RebalanceInstances to balance resources.
         * 
         * @return builder
         * 
         */
        public Builder multiAzPolicy(String multiAzPolicy) {
            return multiAzPolicy(Output.of(multiAzPolicy));
        }

        /**
         * @param name . Field &#39;name&#39; has been deprecated from provider version 1.219.0. New field &#39;node_pool_name&#39; instead.
         * 
         * @return builder
         * 
         * @deprecated
         * Field &#39;name&#39; has been deprecated since provider version 1.219.0. New field &#39;node_pool_name&#39; instead.
         * 
         */
        @Deprecated /* Field 'name' has been deprecated since provider version 1.219.0. New field 'node_pool_name' instead. */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name . Field &#39;name&#39; has been deprecated from provider version 1.219.0. New field &#39;node_pool_name&#39; instead.
         * 
         * @return builder
         * 
         * @deprecated
         * Field &#39;name&#39; has been deprecated since provider version 1.219.0. New field &#39;node_pool_name&#39; instead.
         * 
         */
        @Deprecated /* Field 'name' has been deprecated since provider version 1.219.0. New field 'node_pool_name' instead. */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param nodeCount The worker node number of the node pool. From version 1.111.0, `node_count` is not required.
         * 
         * @return builder
         * 
         * @deprecated
         * Field &#39;node_count&#39; has been deprecated from provider version 1.158.0. New field &#39;desired_size&#39; instead.
         * 
         */
        @Deprecated /* Field 'node_count' has been deprecated from provider version 1.158.0. New field 'desired_size' instead. */
        public Builder nodeCount(@Nullable Output<Integer> nodeCount) {
            $.nodeCount = nodeCount;
            return this;
        }

        /**
         * @param nodeCount The worker node number of the node pool. From version 1.111.0, `node_count` is not required.
         * 
         * @return builder
         * 
         * @deprecated
         * Field &#39;node_count&#39; has been deprecated from provider version 1.158.0. New field &#39;desired_size&#39; instead.
         * 
         */
        @Deprecated /* Field 'node_count' has been deprecated from provider version 1.158.0. New field 'desired_size' instead. */
        public Builder nodeCount(Integer nodeCount) {
            return nodeCount(Output.of(nodeCount));
        }

        /**
         * @param nodeNameMode Each node name consists of a prefix, its private network IP, and a suffix, separated by commas. The input format is `customized,,ip,`.
         * - The prefix and suffix can be composed of one or more parts separated by &#39;.&#39;, each part can use lowercase letters, numbers and &#39;-&#39;, and the beginning and end of the node name must be lowercase letters and numbers.
         * - The node IP address is the complete private IP address of the node.
         * - For example, if the string `customized,aliyun,ip,com` is passed in (where &#39;customized&#39; and &#39;ip&#39; are fixed strings, &#39;aliyun&#39; is the prefix, and &#39;com&#39; is the suffix), the name of the node is `aliyun192.168.xxx.xxxcom`.
         * 
         * @return builder
         * 
         */
        public Builder nodeNameMode(@Nullable Output<String> nodeNameMode) {
            $.nodeNameMode = nodeNameMode;
            return this;
        }

        /**
         * @param nodeNameMode Each node name consists of a prefix, its private network IP, and a suffix, separated by commas. The input format is `customized,,ip,`.
         * - The prefix and suffix can be composed of one or more parts separated by &#39;.&#39;, each part can use lowercase letters, numbers and &#39;-&#39;, and the beginning and end of the node name must be lowercase letters and numbers.
         * - The node IP address is the complete private IP address of the node.
         * - For example, if the string `customized,aliyun,ip,com` is passed in (where &#39;customized&#39; and &#39;ip&#39; are fixed strings, &#39;aliyun&#39; is the prefix, and &#39;com&#39; is the suffix), the name of the node is `aliyun192.168.xxx.xxxcom`.
         * 
         * @return builder
         * 
         */
        public Builder nodeNameMode(String nodeNameMode) {
            return nodeNameMode(Output.of(nodeNameMode));
        }

        /**
         * @param nodePoolId The first ID of the resource.
         * 
         * @return builder
         * 
         */
        public Builder nodePoolId(@Nullable Output<String> nodePoolId) {
            $.nodePoolId = nodePoolId;
            return this;
        }

        /**
         * @param nodePoolId The first ID of the resource.
         * 
         * @return builder
         * 
         */
        public Builder nodePoolId(String nodePoolId) {
            return nodePoolId(Output.of(nodePoolId));
        }

        /**
         * @param nodePoolName The name of node pool.
         * 
         * @return builder
         * 
         */
        public Builder nodePoolName(@Nullable Output<String> nodePoolName) {
            $.nodePoolName = nodePoolName;
            return this;
        }

        /**
         * @param nodePoolName The name of node pool.
         * 
         * @return builder
         * 
         */
        public Builder nodePoolName(String nodePoolName) {
            return nodePoolName(Output.of(nodePoolName));
        }

        /**
         * @param onDemandBaseCapacity The minimum number of pay-as-you-go instances that must be kept in the scaling group. Valid values: 0 to 1000. If the number of pay-as-you-go instances is less than the value of this parameter, Auto Scaling preferably creates pay-as-you-go instances.
         * 
         * @return builder
         * 
         */
        public Builder onDemandBaseCapacity(@Nullable Output<Integer> onDemandBaseCapacity) {
            $.onDemandBaseCapacity = onDemandBaseCapacity;
            return this;
        }

        /**
         * @param onDemandBaseCapacity The minimum number of pay-as-you-go instances that must be kept in the scaling group. Valid values: 0 to 1000. If the number of pay-as-you-go instances is less than the value of this parameter, Auto Scaling preferably creates pay-as-you-go instances.
         * 
         * @return builder
         * 
         */
        public Builder onDemandBaseCapacity(Integer onDemandBaseCapacity) {
            return onDemandBaseCapacity(Output.of(onDemandBaseCapacity));
        }

        /**
         * @param onDemandPercentageAboveBaseCapacity The percentage of pay-as-you-go instances among the extra instances that exceed the number specified by `on_demand_base_capacity`. Valid values: 0 to 100.
         * 
         * @return builder
         * 
         */
        public Builder onDemandPercentageAboveBaseCapacity(@Nullable Output<Integer> onDemandPercentageAboveBaseCapacity) {
            $.onDemandPercentageAboveBaseCapacity = onDemandPercentageAboveBaseCapacity;
            return this;
        }

        /**
         * @param onDemandPercentageAboveBaseCapacity The percentage of pay-as-you-go instances among the extra instances that exceed the number specified by `on_demand_base_capacity`. Valid values: 0 to 100.
         * 
         * @return builder
         * 
         */
        public Builder onDemandPercentageAboveBaseCapacity(Integer onDemandPercentageAboveBaseCapacity) {
            return onDemandPercentageAboveBaseCapacity(Output.of(onDemandPercentageAboveBaseCapacity));
        }

        /**
         * @param password The password of ssh login. You have to specify one of `password` and `key_name` fields. The password rule is 8 to 30 characters and contains at least three items (upper and lower case letters, numbers, and special symbols).
         * 
         * @return builder
         * 
         */
        public Builder password(@Nullable Output<String> password) {
            $.password = password;
            return this;
        }

        /**
         * @param password The password of ssh login. You have to specify one of `password` and `key_name` fields. The password rule is 8 to 30 characters and contains at least three items (upper and lower case letters, numbers, and special symbols).
         * 
         * @return builder
         * 
         */
        public Builder password(String password) {
            return password(Output.of(password));
        }

        /**
         * @param period Node payment period. Its valid value is one of {1, 2, 3, 6, 12}.
         * 
         * @return builder
         * 
         */
        public Builder period(@Nullable Output<Integer> period) {
            $.period = period;
            return this;
        }

        /**
         * @param period Node payment period. Its valid value is one of {1, 2, 3, 6, 12}.
         * 
         * @return builder
         * 
         */
        public Builder period(Integer period) {
            return period(Output.of(period));
        }

        /**
         * @param periodUnit Node payment period unit, valid value: `Month`. Default is `Month`.
         * 
         * @return builder
         * 
         */
        public Builder periodUnit(@Nullable Output<String> periodUnit) {
            $.periodUnit = periodUnit;
            return this;
        }

        /**
         * @param periodUnit Node payment period unit, valid value: `Month`. Default is `Month`.
         * 
         * @return builder
         * 
         */
        public Builder periodUnit(String periodUnit) {
            return periodUnit(Output.of(periodUnit));
        }

        /**
         * @param platform Operating system release, using `image_type` instead.
         * 
         * @return builder
         * 
         * @deprecated
         * Field &#39;platform&#39; has been deprecated from provider version 1.145.0. Operating system release, using `image_type` instead.
         * 
         */
        @Deprecated /* Field 'platform' has been deprecated from provider version 1.145.0. Operating system release, using `image_type` instead. */
        public Builder platform(@Nullable Output<String> platform) {
            $.platform = platform;
            return this;
        }

        /**
         * @param platform Operating system release, using `image_type` instead.
         * 
         * @return builder
         * 
         * @deprecated
         * Field &#39;platform&#39; has been deprecated from provider version 1.145.0. Operating system release, using `image_type` instead.
         * 
         */
        @Deprecated /* Field 'platform' has been deprecated from provider version 1.145.0. Operating system release, using `image_type` instead. */
        public Builder platform(String platform) {
            return platform(Output.of(platform));
        }

        /**
         * @param preUserData Node pre custom data, base64-encoded, the script executed before the node is initialized.
         * 
         * @return builder
         * 
         */
        public Builder preUserData(@Nullable Output<String> preUserData) {
            $.preUserData = preUserData;
            return this;
        }

        /**
         * @param preUserData Node pre custom data, base64-encoded, the script executed before the node is initialized.
         * 
         * @return builder
         * 
         */
        public Builder preUserData(String preUserData) {
            return preUserData(Output.of(preUserData));
        }

        /**
         * @param privatePoolOptions Private node pool configuration. See `private_pool_options` below.
         * 
         * @return builder
         * 
         */
        public Builder privatePoolOptions(@Nullable Output<NodePoolPrivatePoolOptionsArgs> privatePoolOptions) {
            $.privatePoolOptions = privatePoolOptions;
            return this;
        }

        /**
         * @param privatePoolOptions Private node pool configuration. See `private_pool_options` below.
         * 
         * @return builder
         * 
         */
        public Builder privatePoolOptions(NodePoolPrivatePoolOptionsArgs privatePoolOptions) {
            return privatePoolOptions(Output.of(privatePoolOptions));
        }

        /**
         * @param ramRoleName The name of the Worker RAM role.
         * * If it is empty, the default Worker RAM role created in the cluster will be used.
         * * If the specified RAM role is not empty, the specified RAM role must be a **Common Service role**, and its **trusted service** configuration must be **cloud server**. For more information, see [Create a common service role](https://help.aliyun.com/document_detail/116800.html). If the specified RAM role is not the default Worker RAM role created in the cluster, the role name cannot start with &#39;KubernetesMasterRole-&#39;or &#39;KubernetesWorkerRole.
         * 
         * &gt; **NOTE:**  This parameter is only supported for ACK-managed clusters of 1.22 or later versions.
         * 
         * @return builder
         * 
         */
        public Builder ramRoleName(@Nullable Output<String> ramRoleName) {
            $.ramRoleName = ramRoleName;
            return this;
        }

        /**
         * @param ramRoleName The name of the Worker RAM role.
         * * If it is empty, the default Worker RAM role created in the cluster will be used.
         * * If the specified RAM role is not empty, the specified RAM role must be a **Common Service role**, and its **trusted service** configuration must be **cloud server**. For more information, see [Create a common service role](https://help.aliyun.com/document_detail/116800.html). If the specified RAM role is not the default Worker RAM role created in the cluster, the role name cannot start with &#39;KubernetesMasterRole-&#39;or &#39;KubernetesWorkerRole.
         * 
         * &gt; **NOTE:**  This parameter is only supported for ACK-managed clusters of 1.22 or later versions.
         * 
         * @return builder
         * 
         */
        public Builder ramRoleName(String ramRoleName) {
            return ramRoleName(Output.of(ramRoleName));
        }

        /**
         * @param rdsInstances The list of RDS instances.
         * 
         * @return builder
         * 
         */
        public Builder rdsInstances(@Nullable Output<List<String>> rdsInstances) {
            $.rdsInstances = rdsInstances;
            return this;
        }

        /**
         * @param rdsInstances The list of RDS instances.
         * 
         * @return builder
         * 
         */
        public Builder rdsInstances(List<String> rdsInstances) {
            return rdsInstances(Output.of(rdsInstances));
        }

        /**
         * @param rdsInstances The list of RDS instances.
         * 
         * @return builder
         * 
         */
        public Builder rdsInstances(String... rdsInstances) {
            return rdsInstances(List.of(rdsInstances));
        }

        /**
         * @param resourceGroupId The ID of the resource group
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupId(@Nullable Output<String> resourceGroupId) {
            $.resourceGroupId = resourceGroupId;
            return this;
        }

        /**
         * @param resourceGroupId The ID of the resource group
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupId(String resourceGroupId) {
            return resourceGroupId(Output.of(resourceGroupId));
        }

        /**
         * @param rollingPolicy Rotary configuration. See `rolling_policy` below.
         * 
         * @return builder
         * 
         */
        public Builder rollingPolicy(@Nullable Output<NodePoolRollingPolicyArgs> rollingPolicy) {
            $.rollingPolicy = rollingPolicy;
            return this;
        }

        /**
         * @param rollingPolicy Rotary configuration. See `rolling_policy` below.
         * 
         * @return builder
         * 
         */
        public Builder rollingPolicy(NodePoolRollingPolicyArgs rollingPolicy) {
            return rollingPolicy(Output.of(rollingPolicy));
        }

        /**
         * @param runtimeName The runtime name of containers. If not set, the cluster runtime will be used as the node pool runtime. If you select another container runtime, see [Comparison of Docker, containerd, and Sandboxed-Container](https://www.alibabacloud.com/help/doc-detail/160313.htm).
         * 
         * @return builder
         * 
         */
        public Builder runtimeName(@Nullable Output<String> runtimeName) {
            $.runtimeName = runtimeName;
            return this;
        }

        /**
         * @param runtimeName The runtime name of containers. If not set, the cluster runtime will be used as the node pool runtime. If you select another container runtime, see [Comparison of Docker, containerd, and Sandboxed-Container](https://www.alibabacloud.com/help/doc-detail/160313.htm).
         * 
         * @return builder
         * 
         */
        public Builder runtimeName(String runtimeName) {
            return runtimeName(Output.of(runtimeName));
        }

        /**
         * @param runtimeVersion The runtime version of containers. If not set, the cluster runtime will be used as the node pool runtime.
         * 
         * @return builder
         * 
         */
        public Builder runtimeVersion(@Nullable Output<String> runtimeVersion) {
            $.runtimeVersion = runtimeVersion;
            return this;
        }

        /**
         * @param runtimeVersion The runtime version of containers. If not set, the cluster runtime will be used as the node pool runtime.
         * 
         * @return builder
         * 
         */
        public Builder runtimeVersion(String runtimeVersion) {
            return runtimeVersion(Output.of(runtimeVersion));
        }

        /**
         * @param scalingConfig Automatic scaling configuration. See `scaling_config` below.
         * 
         * @return builder
         * 
         */
        public Builder scalingConfig(@Nullable Output<NodePoolScalingConfigArgs> scalingConfig) {
            $.scalingConfig = scalingConfig;
            return this;
        }

        /**
         * @param scalingConfig Automatic scaling configuration. See `scaling_config` below.
         * 
         * @return builder
         * 
         */
        public Builder scalingConfig(NodePoolScalingConfigArgs scalingConfig) {
            return scalingConfig(Output.of(scalingConfig));
        }

        /**
         * @param scalingGroupId The ID of the scaling group.
         * 
         * @return builder
         * 
         */
        public Builder scalingGroupId(@Nullable Output<String> scalingGroupId) {
            $.scalingGroupId = scalingGroupId;
            return this;
        }

        /**
         * @param scalingGroupId The ID of the scaling group.
         * 
         * @return builder
         * 
         */
        public Builder scalingGroupId(String scalingGroupId) {
            return scalingGroupId(Output.of(scalingGroupId));
        }

        /**
         * @param scalingPolicy Scaling group mode, default value: `release`. Valid values:
         * 
         * @return builder
         * 
         */
        public Builder scalingPolicy(@Nullable Output<String> scalingPolicy) {
            $.scalingPolicy = scalingPolicy;
            return this;
        }

        /**
         * @param scalingPolicy Scaling group mode, default value: `release`. Valid values:
         * 
         * @return builder
         * 
         */
        public Builder scalingPolicy(String scalingPolicy) {
            return scalingPolicy(Output.of(scalingPolicy));
        }

        /**
         * @param securityGroupId The security group ID of the node pool. This field has been replaced by `security_group_ids`, please use the `security_group_ids` field instead.
         * 
         * @return builder
         * 
         * @deprecated
         * Field &#39;security_group_id&#39; has been deprecated from provider version 1.145.0. The security group ID of the node pool. This field has been replaced by `security_group_ids`, please use the `security_group_ids` field instead.
         * 
         */
        @Deprecated /* Field 'security_group_id' has been deprecated from provider version 1.145.0. The security group ID of the node pool. This field has been replaced by `security_group_ids`, please use the `security_group_ids` field instead. */
        public Builder securityGroupId(@Nullable Output<String> securityGroupId) {
            $.securityGroupId = securityGroupId;
            return this;
        }

        /**
         * @param securityGroupId The security group ID of the node pool. This field has been replaced by `security_group_ids`, please use the `security_group_ids` field instead.
         * 
         * @return builder
         * 
         * @deprecated
         * Field &#39;security_group_id&#39; has been deprecated from provider version 1.145.0. The security group ID of the node pool. This field has been replaced by `security_group_ids`, please use the `security_group_ids` field instead.
         * 
         */
        @Deprecated /* Field 'security_group_id' has been deprecated from provider version 1.145.0. The security group ID of the node pool. This field has been replaced by `security_group_ids`, please use the `security_group_ids` field instead. */
        public Builder securityGroupId(String securityGroupId) {
            return securityGroupId(Output.of(securityGroupId));
        }

        /**
         * @param securityGroupIds Multiple security groups can be configured for a node pool. If both `security_group_ids` and `security_group_id` are configured, `security_group_ids` takes effect. This field cannot be modified.
         * 
         * @return builder
         * 
         */
        public Builder securityGroupIds(@Nullable Output<List<String>> securityGroupIds) {
            $.securityGroupIds = securityGroupIds;
            return this;
        }

        /**
         * @param securityGroupIds Multiple security groups can be configured for a node pool. If both `security_group_ids` and `security_group_id` are configured, `security_group_ids` takes effect. This field cannot be modified.
         * 
         * @return builder
         * 
         */
        public Builder securityGroupIds(List<String> securityGroupIds) {
            return securityGroupIds(Output.of(securityGroupIds));
        }

        /**
         * @param securityGroupIds Multiple security groups can be configured for a node pool. If both `security_group_ids` and `security_group_id` are configured, `security_group_ids` takes effect. This field cannot be modified.
         * 
         * @return builder
         * 
         */
        public Builder securityGroupIds(String... securityGroupIds) {
            return securityGroupIds(List.of(securityGroupIds));
        }

        /**
         * @param securityHardeningOs Alibaba Cloud OS security reinforcement. Default value: `false`. Value:
         * 
         * @return builder
         * 
         */
        public Builder securityHardeningOs(@Nullable Output<Boolean> securityHardeningOs) {
            $.securityHardeningOs = securityHardeningOs;
            return this;
        }

        /**
         * @param securityHardeningOs Alibaba Cloud OS security reinforcement. Default value: `false`. Value:
         * 
         * @return builder
         * 
         */
        public Builder securityHardeningOs(Boolean securityHardeningOs) {
            return securityHardeningOs(Output.of(securityHardeningOs));
        }

        /**
         * @param socEnabled Whether enable worker node to support soc security reinforcement, its valid value `true` or `false`. Default to `false` and apply to AliyunLinux series. See [SOC Reinforcement](https://help.aliyun.com/document_detail/196148.html).
         * 
         * &gt; **NOTE:**  It is forbidden to set both `security_hardening_os` and `soc_enabled` to `true` at the same time.
         * 
         * @return builder
         * 
         */
        public Builder socEnabled(@Nullable Output<Boolean> socEnabled) {
            $.socEnabled = socEnabled;
            return this;
        }

        /**
         * @param socEnabled Whether enable worker node to support soc security reinforcement, its valid value `true` or `false`. Default to `false` and apply to AliyunLinux series. See [SOC Reinforcement](https://help.aliyun.com/document_detail/196148.html).
         * 
         * &gt; **NOTE:**  It is forbidden to set both `security_hardening_os` and `soc_enabled` to `true` at the same time.
         * 
         * @return builder
         * 
         */
        public Builder socEnabled(Boolean socEnabled) {
            return socEnabled(Output.of(socEnabled));
        }

        /**
         * @param spotInstancePools The number of instance types that are available. Auto Scaling creates preemptible instances of multiple instance types that are available at the lowest cost. Valid values: 1 to 10.
         * 
         * @return builder
         * 
         */
        public Builder spotInstancePools(@Nullable Output<Integer> spotInstancePools) {
            $.spotInstancePools = spotInstancePools;
            return this;
        }

        /**
         * @param spotInstancePools The number of instance types that are available. Auto Scaling creates preemptible instances of multiple instance types that are available at the lowest cost. Valid values: 1 to 10.
         * 
         * @return builder
         * 
         */
        public Builder spotInstancePools(Integer spotInstancePools) {
            return spotInstancePools(Output.of(spotInstancePools));
        }

        /**
         * @param spotInstanceRemedy Specifies whether to supplement preemptible instances when the number of preemptible instances drops below the specified minimum number. If you set the value to true, Auto Scaling attempts to create a new preemptible instance when the system notifies that an existing preemptible instance is about to be reclaimed. Valid values: `true`: enables the supplementation of preemptible instances. `false`: disables the supplementation of preemptible instances.
         * 
         * @return builder
         * 
         */
        public Builder spotInstanceRemedy(@Nullable Output<Boolean> spotInstanceRemedy) {
            $.spotInstanceRemedy = spotInstanceRemedy;
            return this;
        }

        /**
         * @param spotInstanceRemedy Specifies whether to supplement preemptible instances when the number of preemptible instances drops below the specified minimum number. If you set the value to true, Auto Scaling attempts to create a new preemptible instance when the system notifies that an existing preemptible instance is about to be reclaimed. Valid values: `true`: enables the supplementation of preemptible instances. `false`: disables the supplementation of preemptible instances.
         * 
         * @return builder
         * 
         */
        public Builder spotInstanceRemedy(Boolean spotInstanceRemedy) {
            return spotInstanceRemedy(Output.of(spotInstanceRemedy));
        }

        /**
         * @param spotPriceLimits The current single preemptible instance type market price range configuration. See `spot_price_limit` below.
         * 
         * @return builder
         * 
         */
        public Builder spotPriceLimits(@Nullable Output<List<NodePoolSpotPriceLimitArgs>> spotPriceLimits) {
            $.spotPriceLimits = spotPriceLimits;
            return this;
        }

        /**
         * @param spotPriceLimits The current single preemptible instance type market price range configuration. See `spot_price_limit` below.
         * 
         * @return builder
         * 
         */
        public Builder spotPriceLimits(List<NodePoolSpotPriceLimitArgs> spotPriceLimits) {
            return spotPriceLimits(Output.of(spotPriceLimits));
        }

        /**
         * @param spotPriceLimits The current single preemptible instance type market price range configuration. See `spot_price_limit` below.
         * 
         * @return builder
         * 
         */
        public Builder spotPriceLimits(NodePoolSpotPriceLimitArgs... spotPriceLimits) {
            return spotPriceLimits(List.of(spotPriceLimits));
        }

        /**
         * @param spotStrategy The preemptible instance type. Value:
         * - `NoSpot` : Non-preemptible instance.
         * - `SpotWithPriceLimit` : Set the upper limit of the preemptible instance price.
         * - `SpotAsPriceGo` : The system automatically bids, following the actual price of the current market.
         * 
         * @return builder
         * 
         */
        public Builder spotStrategy(@Nullable Output<String> spotStrategy) {
            $.spotStrategy = spotStrategy;
            return this;
        }

        /**
         * @param spotStrategy The preemptible instance type. Value:
         * - `NoSpot` : Non-preemptible instance.
         * - `SpotWithPriceLimit` : Set the upper limit of the preemptible instance price.
         * - `SpotAsPriceGo` : The system automatically bids, following the actual price of the current market.
         * 
         * @return builder
         * 
         */
        public Builder spotStrategy(String spotStrategy) {
            return spotStrategy(Output.of(spotStrategy));
        }

        /**
         * @param systemDiskBurstingEnabled Specifies whether to enable the burst feature for system disks. Valid values:`true`: enables the burst feature. `false`: disables the burst feature. This parameter is supported only when `system_disk_category` is set to `cloud_auto`.
         * 
         * @return builder
         * 
         */
        public Builder systemDiskBurstingEnabled(@Nullable Output<Boolean> systemDiskBurstingEnabled) {
            $.systemDiskBurstingEnabled = systemDiskBurstingEnabled;
            return this;
        }

        /**
         * @param systemDiskBurstingEnabled Specifies whether to enable the burst feature for system disks. Valid values:`true`: enables the burst feature. `false`: disables the burst feature. This parameter is supported only when `system_disk_category` is set to `cloud_auto`.
         * 
         * @return builder
         * 
         */
        public Builder systemDiskBurstingEnabled(Boolean systemDiskBurstingEnabled) {
            return systemDiskBurstingEnabled(Output.of(systemDiskBurstingEnabled));
        }

        /**
         * @param systemDiskCategories The multi-disk categories of the system disk. When a high-priority disk type cannot be used, Auto Scaling automatically tries to create a system disk with the next priority disk category. Valid values: `cloud`: cloud disk. `cloud_efficiency`: a high-efficiency cloud disk. `cloud_ssd`:SSD cloud disk. `cloud_essd`: ESSD cloud disk.
         * 
         * @return builder
         * 
         */
        public Builder systemDiskCategories(@Nullable Output<List<String>> systemDiskCategories) {
            $.systemDiskCategories = systemDiskCategories;
            return this;
        }

        /**
         * @param systemDiskCategories The multi-disk categories of the system disk. When a high-priority disk type cannot be used, Auto Scaling automatically tries to create a system disk with the next priority disk category. Valid values: `cloud`: cloud disk. `cloud_efficiency`: a high-efficiency cloud disk. `cloud_ssd`:SSD cloud disk. `cloud_essd`: ESSD cloud disk.
         * 
         * @return builder
         * 
         */
        public Builder systemDiskCategories(List<String> systemDiskCategories) {
            return systemDiskCategories(Output.of(systemDiskCategories));
        }

        /**
         * @param systemDiskCategories The multi-disk categories of the system disk. When a high-priority disk type cannot be used, Auto Scaling automatically tries to create a system disk with the next priority disk category. Valid values: `cloud`: cloud disk. `cloud_efficiency`: a high-efficiency cloud disk. `cloud_ssd`:SSD cloud disk. `cloud_essd`: ESSD cloud disk.
         * 
         * @return builder
         * 
         */
        public Builder systemDiskCategories(String... systemDiskCategories) {
            return systemDiskCategories(List.of(systemDiskCategories));
        }

        /**
         * @param systemDiskCategory The system disk category of worker node. Its valid value are `cloud_ssd`, `cloud_efficiency`, `cloud_essd` and `cloud_auto`.
         * 
         * @return builder
         * 
         */
        public Builder systemDiskCategory(@Nullable Output<String> systemDiskCategory) {
            $.systemDiskCategory = systemDiskCategory;
            return this;
        }

        /**
         * @param systemDiskCategory The system disk category of worker node. Its valid value are `cloud_ssd`, `cloud_efficiency`, `cloud_essd` and `cloud_auto`.
         * 
         * @return builder
         * 
         */
        public Builder systemDiskCategory(String systemDiskCategory) {
            return systemDiskCategory(Output.of(systemDiskCategory));
        }

        /**
         * @param systemDiskEncryptAlgorithm The encryption algorithm used by the system disk. Value range: aes-256.
         * 
         * @return builder
         * 
         */
        public Builder systemDiskEncryptAlgorithm(@Nullable Output<String> systemDiskEncryptAlgorithm) {
            $.systemDiskEncryptAlgorithm = systemDiskEncryptAlgorithm;
            return this;
        }

        /**
         * @param systemDiskEncryptAlgorithm The encryption algorithm used by the system disk. Value range: aes-256.
         * 
         * @return builder
         * 
         */
        public Builder systemDiskEncryptAlgorithm(String systemDiskEncryptAlgorithm) {
            return systemDiskEncryptAlgorithm(Output.of(systemDiskEncryptAlgorithm));
        }

        /**
         * @param systemDiskEncrypted Whether to encrypt the system disk. Value range: `true`: encryption. `false`: Do not encrypt.
         * 
         * @return builder
         * 
         */
        public Builder systemDiskEncrypted(@Nullable Output<Boolean> systemDiskEncrypted) {
            $.systemDiskEncrypted = systemDiskEncrypted;
            return this;
        }

        /**
         * @param systemDiskEncrypted Whether to encrypt the system disk. Value range: `true`: encryption. `false`: Do not encrypt.
         * 
         * @return builder
         * 
         */
        public Builder systemDiskEncrypted(Boolean systemDiskEncrypted) {
            return systemDiskEncrypted(Output.of(systemDiskEncrypted));
        }

        /**
         * @param systemDiskKmsKey The ID of the KMS key used by the system disk.
         * 
         * @return builder
         * 
         */
        public Builder systemDiskKmsKey(@Nullable Output<String> systemDiskKmsKey) {
            $.systemDiskKmsKey = systemDiskKmsKey;
            return this;
        }

        /**
         * @param systemDiskKmsKey The ID of the KMS key used by the system disk.
         * 
         * @return builder
         * 
         */
        public Builder systemDiskKmsKey(String systemDiskKmsKey) {
            return systemDiskKmsKey(Output.of(systemDiskKmsKey));
        }

        /**
         * @param systemDiskPerformanceLevel The system disk performance of the node takes effect only for the ESSD disk.
         * - `PL0`: maximum random read/write IOPS 10000 for a single disk.
         * - `PL1`: maximum random read/write IOPS 50000 for a single disk.
         * - `PL2`: highest random read/write IOPS 100000 for a single disk.
         * - `PL3`: maximum random read/write IOPS 1 million for a single disk.
         * 
         * @return builder
         * 
         */
        public Builder systemDiskPerformanceLevel(@Nullable Output<String> systemDiskPerformanceLevel) {
            $.systemDiskPerformanceLevel = systemDiskPerformanceLevel;
            return this;
        }

        /**
         * @param systemDiskPerformanceLevel The system disk performance of the node takes effect only for the ESSD disk.
         * - `PL0`: maximum random read/write IOPS 10000 for a single disk.
         * - `PL1`: maximum random read/write IOPS 50000 for a single disk.
         * - `PL2`: highest random read/write IOPS 100000 for a single disk.
         * - `PL3`: maximum random read/write IOPS 1 million for a single disk.
         * 
         * @return builder
         * 
         */
        public Builder systemDiskPerformanceLevel(String systemDiskPerformanceLevel) {
            return systemDiskPerformanceLevel(Output.of(systemDiskPerformanceLevel));
        }

        /**
         * @param systemDiskProvisionedIops The predefined IOPS of a system disk. Valid values: 0 to min{50,000, 1,000 × Capacity - Baseline IOPS}. Baseline IOPS = min{1,800 + 50 × Capacity, 50,000}. This parameter is supported only when `system_disk_category` is set to `cloud_auto`.
         * 
         * @return builder
         * 
         */
        public Builder systemDiskProvisionedIops(@Nullable Output<Integer> systemDiskProvisionedIops) {
            $.systemDiskProvisionedIops = systemDiskProvisionedIops;
            return this;
        }

        /**
         * @param systemDiskProvisionedIops The predefined IOPS of a system disk. Valid values: 0 to min{50,000, 1,000 × Capacity - Baseline IOPS}. Baseline IOPS = min{1,800 + 50 × Capacity, 50,000}. This parameter is supported only when `system_disk_category` is set to `cloud_auto`.
         * 
         * @return builder
         * 
         */
        public Builder systemDiskProvisionedIops(Integer systemDiskProvisionedIops) {
            return systemDiskProvisionedIops(Output.of(systemDiskProvisionedIops));
        }

        /**
         * @param systemDiskSize The system disk category of worker node. Its valid value range [40~500] in GB. Default to `120`.
         * 
         * @return builder
         * 
         */
        public Builder systemDiskSize(@Nullable Output<Integer> systemDiskSize) {
            $.systemDiskSize = systemDiskSize;
            return this;
        }

        /**
         * @param systemDiskSize The system disk category of worker node. Its valid value range [40~500] in GB. Default to `120`.
         * 
         * @return builder
         * 
         */
        public Builder systemDiskSize(Integer systemDiskSize) {
            return systemDiskSize(Output.of(systemDiskSize));
        }

        /**
         * @param systemDiskSnapshotPolicyId The ID of the automatic snapshot policy used by the system disk.
         * 
         * @return builder
         * 
         */
        public Builder systemDiskSnapshotPolicyId(@Nullable Output<String> systemDiskSnapshotPolicyId) {
            $.systemDiskSnapshotPolicyId = systemDiskSnapshotPolicyId;
            return this;
        }

        /**
         * @param systemDiskSnapshotPolicyId The ID of the automatic snapshot policy used by the system disk.
         * 
         * @return builder
         * 
         */
        public Builder systemDiskSnapshotPolicyId(String systemDiskSnapshotPolicyId) {
            return systemDiskSnapshotPolicyId(Output.of(systemDiskSnapshotPolicyId));
        }

        /**
         * @param tags Add tags only for ECS instances. The maximum length of the tag key is 128 characters. The tag key and value cannot start with aliyun or acs:, or contain https:// or http://.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags Add tags only for ECS instances. The maximum length of the tag key is 128 characters. The tag key and value cannot start with aliyun or acs:, or contain https:// or http://.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param taints A List of Kubernetes taints to assign to the nodes. Detailed below. More information in [Taints and Toleration](https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/). See `taints` below.
         * 
         * @return builder
         * 
         */
        public Builder taints(@Nullable Output<List<NodePoolTaintArgs>> taints) {
            $.taints = taints;
            return this;
        }

        /**
         * @param taints A List of Kubernetes taints to assign to the nodes. Detailed below. More information in [Taints and Toleration](https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/). See `taints` below.
         * 
         * @return builder
         * 
         */
        public Builder taints(List<NodePoolTaintArgs> taints) {
            return taints(Output.of(taints));
        }

        /**
         * @param taints A List of Kubernetes taints to assign to the nodes. Detailed below. More information in [Taints and Toleration](https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/). See `taints` below.
         * 
         * @return builder
         * 
         */
        public Builder taints(NodePoolTaintArgs... taints) {
            return taints(List.of(taints));
        }

        /**
         * @param teeConfig The configuration about confidential computing for the cluster. See `tee_config` below.
         * 
         * @return builder
         * 
         */
        public Builder teeConfig(@Nullable Output<NodePoolTeeConfigArgs> teeConfig) {
            $.teeConfig = teeConfig;
            return this;
        }

        /**
         * @param teeConfig The configuration about confidential computing for the cluster. See `tee_config` below.
         * 
         * @return builder
         * 
         */
        public Builder teeConfig(NodePoolTeeConfigArgs teeConfig) {
            return teeConfig(Output.of(teeConfig));
        }

        /**
         * @param unschedulable Whether the node after expansion can be scheduled.
         * 
         * @return builder
         * 
         */
        public Builder unschedulable(@Nullable Output<Boolean> unschedulable) {
            $.unschedulable = unschedulable;
            return this;
        }

        /**
         * @param unschedulable Whether the node after expansion can be scheduled.
         * 
         * @return builder
         * 
         */
        public Builder unschedulable(Boolean unschedulable) {
            return unschedulable(Output.of(unschedulable));
        }

        /**
         * @param updateNodes Synchronously update node labels and taints.
         * 
         * @return builder
         * 
         */
        public Builder updateNodes(@Nullable Output<Boolean> updateNodes) {
            $.updateNodes = updateNodes;
            return this;
        }

        /**
         * @param updateNodes Synchronously update node labels and taints.
         * 
         * @return builder
         * 
         */
        public Builder updateNodes(Boolean updateNodes) {
            return updateNodes(Output.of(updateNodes));
        }

        /**
         * @param userData Node custom data, base64-encoded.
         * 
         * @return builder
         * 
         */
        public Builder userData(@Nullable Output<String> userData) {
            $.userData = userData;
            return this;
        }

        /**
         * @param userData Node custom data, base64-encoded.
         * 
         * @return builder
         * 
         */
        public Builder userData(String userData) {
            return userData(Output.of(userData));
        }

        /**
         * @param vswitchIds The vswitches used by node pool workers.
         * 
         * @return builder
         * 
         */
        public Builder vswitchIds(@Nullable Output<List<String>> vswitchIds) {
            $.vswitchIds = vswitchIds;
            return this;
        }

        /**
         * @param vswitchIds The vswitches used by node pool workers.
         * 
         * @return builder
         * 
         */
        public Builder vswitchIds(List<String> vswitchIds) {
            return vswitchIds(Output.of(vswitchIds));
        }

        /**
         * @param vswitchIds The vswitches used by node pool workers.
         * 
         * @return builder
         * 
         */
        public Builder vswitchIds(String... vswitchIds) {
            return vswitchIds(List.of(vswitchIds));
        }

        public NodePoolState build() {
            return $;
        }
    }

}
