// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.eflo.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ResourceMachineTypesArgs extends com.pulumi.resources.ResourceArgs {

    public static final ResourceMachineTypesArgs Empty = new ResourceMachineTypesArgs();

    /**
     * This property specifies the number of network bindings, which relates to the number of physical or virtual network cards connected to the network through the network interface card (NIC). Multiple network bindings can increase bandwidth and redundancy and improve network reliability.
     * 
     */
    @Import(name="bondNum")
    private @Nullable Output<Integer> bondNum;

    /**
     * @return This property specifies the number of network bindings, which relates to the number of physical or virtual network cards connected to the network through the network interface card (NIC). Multiple network bindings can increase bandwidth and redundancy and improve network reliability.
     * 
     */
    public Optional<Output<Integer>> bondNum() {
        return Optional.ofNullable(this.bondNum);
    }

    /**
     * Provides CPU details, including the number of cores, number of threads, clock frequency, and architecture type. This information helps to evaluate the processing power and identify whether it can meet the performance requirements of a particular application.
     * 
     */
    @Import(name="cpuInfo", required=true)
    private Output<String> cpuInfo;

    /**
     * @return Provides CPU details, including the number of cores, number of threads, clock frequency, and architecture type. This information helps to evaluate the processing power and identify whether it can meet the performance requirements of a particular application.
     * 
     */
    public Output<String> cpuInfo() {
        return this.cpuInfo;
    }

    /**
     * Displays information about the storage device, including the disk type (such as SSD or HDD), capacity, and I/O performance. Storage performance is critical in data-intensive applications such as big data processing and databases.
     * 
     */
    @Import(name="diskInfo")
    private @Nullable Output<String> diskInfo;

    /**
     * @return Displays information about the storage device, including the disk type (such as SSD or HDD), capacity, and I/O performance. Storage performance is critical in data-intensive applications such as big data processing and databases.
     * 
     */
    public Optional<Output<String>> diskInfo() {
        return Optional.ofNullable(this.diskInfo);
    }

    /**
     * Provides detailed information about the GPU, including the number, model, memory size, and computing capability. This information is particularly important for tasks such as deep learning, scientific computing, and graph processing, helping users understand the graph processing capabilities of nodes.
     * 
     */
    @Import(name="gpuInfo", required=true)
    private Output<String> gpuInfo;

    /**
     * @return Provides detailed information about the GPU, including the number, model, memory size, and computing capability. This information is particularly important for tasks such as deep learning, scientific computing, and graph processing, helping users understand the graph processing capabilities of nodes.
     * 
     */
    public Output<String> gpuInfo() {
        return this.gpuInfo;
    }

    /**
     * This property provides memory details, including total memory, available memory, and usage. This helps users understand the memory processing capabilities of compute nodes, especially when running heavy-duty applications.
     * 
     */
    @Import(name="memoryInfo")
    private @Nullable Output<String> memoryInfo;

    /**
     * @return This property provides memory details, including total memory, available memory, and usage. This helps users understand the memory processing capabilities of compute nodes, especially when running heavy-duty applications.
     * 
     */
    public Optional<Output<String>> memoryInfo() {
        return Optional.ofNullable(this.memoryInfo);
    }

    /**
     * Specification Name.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Specification Name.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Contains detailed information about the network interface, such as network bandwidth, latency, protocol types supported by the network, IP addresses, and network topology. Optimizing network information is essential to ensure efficient data transmission and low latency.
     * 
     */
    @Import(name="networkInfo")
    private @Nullable Output<String> networkInfo;

    /**
     * @return Contains detailed information about the network interface, such as network bandwidth, latency, protocol types supported by the network, IP addresses, and network topology. Optimizing network information is essential to ensure efficient data transmission and low latency.
     * 
     */
    public Optional<Output<String>> networkInfo() {
        return Optional.ofNullable(this.networkInfo);
    }

    /**
     * Specifies the network mode, such as bridge mode, NAT mode, or direct connection mode. Different network modes affect the network configuration and data transmission performance of nodes, and affect the network access methods of computing instances.
     * 
     */
    @Import(name="networkMode")
    private @Nullable Output<String> networkMode;

    /**
     * @return Specifies the network mode, such as bridge mode, NAT mode, or direct connection mode. Different network modes affect the network configuration and data transmission performance of nodes, and affect the network access methods of computing instances.
     * 
     */
    public Optional<Output<String>> networkMode() {
        return Optional.ofNullable(this.networkMode);
    }

    /**
     * Specifies the total number of compute nodes. This property is particularly important in distributed computing and cluster environments, because the number of nodes often directly affects the computing power and the ability to parallel processing.
     * 
     */
    @Import(name="nodeCount")
    private @Nullable Output<Integer> nodeCount;

    /**
     * @return Specifies the total number of compute nodes. This property is particularly important in distributed computing and cluster environments, because the number of nodes often directly affects the computing power and the ability to parallel processing.
     * 
     */
    public Optional<Output<Integer>> nodeCount() {
        return Optional.ofNullable(this.nodeCount);
    }

    /**
     * Usually refers to a specific resource type (such as virtual machine, physical server, container, etc.), which is used to distinguish different computing units or resource categories.
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return Usually refers to a specific resource type (such as virtual machine, physical server, container, etc.), which is used to distinguish different computing units or resource categories.
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    private ResourceMachineTypesArgs() {}

    private ResourceMachineTypesArgs(ResourceMachineTypesArgs $) {
        this.bondNum = $.bondNum;
        this.cpuInfo = $.cpuInfo;
        this.diskInfo = $.diskInfo;
        this.gpuInfo = $.gpuInfo;
        this.memoryInfo = $.memoryInfo;
        this.name = $.name;
        this.networkInfo = $.networkInfo;
        this.networkMode = $.networkMode;
        this.nodeCount = $.nodeCount;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ResourceMachineTypesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ResourceMachineTypesArgs $;

        public Builder() {
            $ = new ResourceMachineTypesArgs();
        }

        public Builder(ResourceMachineTypesArgs defaults) {
            $ = new ResourceMachineTypesArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param bondNum This property specifies the number of network bindings, which relates to the number of physical or virtual network cards connected to the network through the network interface card (NIC). Multiple network bindings can increase bandwidth and redundancy and improve network reliability.
         * 
         * @return builder
         * 
         */
        public Builder bondNum(@Nullable Output<Integer> bondNum) {
            $.bondNum = bondNum;
            return this;
        }

        /**
         * @param bondNum This property specifies the number of network bindings, which relates to the number of physical or virtual network cards connected to the network through the network interface card (NIC). Multiple network bindings can increase bandwidth and redundancy and improve network reliability.
         * 
         * @return builder
         * 
         */
        public Builder bondNum(Integer bondNum) {
            return bondNum(Output.of(bondNum));
        }

        /**
         * @param cpuInfo Provides CPU details, including the number of cores, number of threads, clock frequency, and architecture type. This information helps to evaluate the processing power and identify whether it can meet the performance requirements of a particular application.
         * 
         * @return builder
         * 
         */
        public Builder cpuInfo(Output<String> cpuInfo) {
            $.cpuInfo = cpuInfo;
            return this;
        }

        /**
         * @param cpuInfo Provides CPU details, including the number of cores, number of threads, clock frequency, and architecture type. This information helps to evaluate the processing power and identify whether it can meet the performance requirements of a particular application.
         * 
         * @return builder
         * 
         */
        public Builder cpuInfo(String cpuInfo) {
            return cpuInfo(Output.of(cpuInfo));
        }

        /**
         * @param diskInfo Displays information about the storage device, including the disk type (such as SSD or HDD), capacity, and I/O performance. Storage performance is critical in data-intensive applications such as big data processing and databases.
         * 
         * @return builder
         * 
         */
        public Builder diskInfo(@Nullable Output<String> diskInfo) {
            $.diskInfo = diskInfo;
            return this;
        }

        /**
         * @param diskInfo Displays information about the storage device, including the disk type (such as SSD or HDD), capacity, and I/O performance. Storage performance is critical in data-intensive applications such as big data processing and databases.
         * 
         * @return builder
         * 
         */
        public Builder diskInfo(String diskInfo) {
            return diskInfo(Output.of(diskInfo));
        }

        /**
         * @param gpuInfo Provides detailed information about the GPU, including the number, model, memory size, and computing capability. This information is particularly important for tasks such as deep learning, scientific computing, and graph processing, helping users understand the graph processing capabilities of nodes.
         * 
         * @return builder
         * 
         */
        public Builder gpuInfo(Output<String> gpuInfo) {
            $.gpuInfo = gpuInfo;
            return this;
        }

        /**
         * @param gpuInfo Provides detailed information about the GPU, including the number, model, memory size, and computing capability. This information is particularly important for tasks such as deep learning, scientific computing, and graph processing, helping users understand the graph processing capabilities of nodes.
         * 
         * @return builder
         * 
         */
        public Builder gpuInfo(String gpuInfo) {
            return gpuInfo(Output.of(gpuInfo));
        }

        /**
         * @param memoryInfo This property provides memory details, including total memory, available memory, and usage. This helps users understand the memory processing capabilities of compute nodes, especially when running heavy-duty applications.
         * 
         * @return builder
         * 
         */
        public Builder memoryInfo(@Nullable Output<String> memoryInfo) {
            $.memoryInfo = memoryInfo;
            return this;
        }

        /**
         * @param memoryInfo This property provides memory details, including total memory, available memory, and usage. This helps users understand the memory processing capabilities of compute nodes, especially when running heavy-duty applications.
         * 
         * @return builder
         * 
         */
        public Builder memoryInfo(String memoryInfo) {
            return memoryInfo(Output.of(memoryInfo));
        }

        /**
         * @param name Specification Name.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Specification Name.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param networkInfo Contains detailed information about the network interface, such as network bandwidth, latency, protocol types supported by the network, IP addresses, and network topology. Optimizing network information is essential to ensure efficient data transmission and low latency.
         * 
         * @return builder
         * 
         */
        public Builder networkInfo(@Nullable Output<String> networkInfo) {
            $.networkInfo = networkInfo;
            return this;
        }

        /**
         * @param networkInfo Contains detailed information about the network interface, such as network bandwidth, latency, protocol types supported by the network, IP addresses, and network topology. Optimizing network information is essential to ensure efficient data transmission and low latency.
         * 
         * @return builder
         * 
         */
        public Builder networkInfo(String networkInfo) {
            return networkInfo(Output.of(networkInfo));
        }

        /**
         * @param networkMode Specifies the network mode, such as bridge mode, NAT mode, or direct connection mode. Different network modes affect the network configuration and data transmission performance of nodes, and affect the network access methods of computing instances.
         * 
         * @return builder
         * 
         */
        public Builder networkMode(@Nullable Output<String> networkMode) {
            $.networkMode = networkMode;
            return this;
        }

        /**
         * @param networkMode Specifies the network mode, such as bridge mode, NAT mode, or direct connection mode. Different network modes affect the network configuration and data transmission performance of nodes, and affect the network access methods of computing instances.
         * 
         * @return builder
         * 
         */
        public Builder networkMode(String networkMode) {
            return networkMode(Output.of(networkMode));
        }

        /**
         * @param nodeCount Specifies the total number of compute nodes. This property is particularly important in distributed computing and cluster environments, because the number of nodes often directly affects the computing power and the ability to parallel processing.
         * 
         * @return builder
         * 
         */
        public Builder nodeCount(@Nullable Output<Integer> nodeCount) {
            $.nodeCount = nodeCount;
            return this;
        }

        /**
         * @param nodeCount Specifies the total number of compute nodes. This property is particularly important in distributed computing and cluster environments, because the number of nodes often directly affects the computing power and the ability to parallel processing.
         * 
         * @return builder
         * 
         */
        public Builder nodeCount(Integer nodeCount) {
            return nodeCount(Output.of(nodeCount));
        }

        /**
         * @param type Usually refers to a specific resource type (such as virtual machine, physical server, container, etc.), which is used to distinguish different computing units or resource categories.
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Usually refers to a specific resource type (such as virtual machine, physical server, container, etc.), which is used to distinguish different computing units or resource categories.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public ResourceMachineTypesArgs build() {
            if ($.cpuInfo == null) {
                throw new MissingRequiredPropertyException("ResourceMachineTypesArgs", "cpuInfo");
            }
            if ($.gpuInfo == null) {
                throw new MissingRequiredPropertyException("ResourceMachineTypesArgs", "gpuInfo");
            }
            return $;
        }
    }

}
