// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.eflo.inputs;

import com.pulumi.alicloud.eflo.inputs.ExperimentPlanTemplateTemplatePipelineEnvParamsArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ExperimentPlanTemplateTemplatePipelineArgs extends com.pulumi.resources.ResourceArgs {

    public static final ExperimentPlanTemplateTemplatePipelineArgs Empty = new ExperimentPlanTemplateTemplatePipelineArgs();

    /**
     * Contains a series of parameters related to the environment. See `env_params` below.
     * 
     */
    @Import(name="envParams", required=true)
    private Output<ExperimentPlanTemplateTemplatePipelineEnvParamsArgs> envParams;

    /**
     * @return Contains a series of parameters related to the environment. See `env_params` below.
     * 
     */
    public Output<ExperimentPlanTemplateTemplatePipelineEnvParamsArgs> envParams() {
        return this.envParams;
    }

    /**
     * Indicates the sequence number of the pipeline node.
     * 
     */
    @Import(name="pipelineOrder", required=true)
    private Output<Integer> pipelineOrder;

    /**
     * @return Indicates the sequence number of the pipeline node.
     * 
     */
    public Output<Integer> pipelineOrder() {
        return this.pipelineOrder;
    }

    /**
     * The use of the template scenario. It can have the following optional parameters:
     * - baseline: benchmark evaluation
     * 
     */
    @Import(name="scene", required=true)
    private Output<String> scene;

    /**
     * @return The use of the template scenario. It can have the following optional parameters:
     * - baseline: benchmark evaluation
     * 
     */
    public Output<String> scene() {
        return this.scene;
    }

    /**
     * Represents additional parameters for the run.
     * 
     */
    @Import(name="settingParams")
    private @Nullable Output<Map<String,String>> settingParams;

    /**
     * @return Represents additional parameters for the run.
     * 
     */
    public Optional<Output<Map<String,String>>> settingParams() {
        return Optional.ofNullable(this.settingParams);
    }

    /**
     * Used to uniquely identify a specific payload.
     * 
     */
    @Import(name="workloadId", required=true)
    private Output<Integer> workloadId;

    /**
     * @return Used to uniquely identify a specific payload.
     * 
     */
    public Output<Integer> workloadId() {
        return this.workloadId;
    }

    /**
     * The name used to represent a specific payload.
     * 
     */
    @Import(name="workloadName", required=true)
    private Output<String> workloadName;

    /**
     * @return The name used to represent a specific payload.
     * 
     */
    public Output<String> workloadName() {
        return this.workloadName;
    }

    private ExperimentPlanTemplateTemplatePipelineArgs() {}

    private ExperimentPlanTemplateTemplatePipelineArgs(ExperimentPlanTemplateTemplatePipelineArgs $) {
        this.envParams = $.envParams;
        this.pipelineOrder = $.pipelineOrder;
        this.scene = $.scene;
        this.settingParams = $.settingParams;
        this.workloadId = $.workloadId;
        this.workloadName = $.workloadName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ExperimentPlanTemplateTemplatePipelineArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ExperimentPlanTemplateTemplatePipelineArgs $;

        public Builder() {
            $ = new ExperimentPlanTemplateTemplatePipelineArgs();
        }

        public Builder(ExperimentPlanTemplateTemplatePipelineArgs defaults) {
            $ = new ExperimentPlanTemplateTemplatePipelineArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param envParams Contains a series of parameters related to the environment. See `env_params` below.
         * 
         * @return builder
         * 
         */
        public Builder envParams(Output<ExperimentPlanTemplateTemplatePipelineEnvParamsArgs> envParams) {
            $.envParams = envParams;
            return this;
        }

        /**
         * @param envParams Contains a series of parameters related to the environment. See `env_params` below.
         * 
         * @return builder
         * 
         */
        public Builder envParams(ExperimentPlanTemplateTemplatePipelineEnvParamsArgs envParams) {
            return envParams(Output.of(envParams));
        }

        /**
         * @param pipelineOrder Indicates the sequence number of the pipeline node.
         * 
         * @return builder
         * 
         */
        public Builder pipelineOrder(Output<Integer> pipelineOrder) {
            $.pipelineOrder = pipelineOrder;
            return this;
        }

        /**
         * @param pipelineOrder Indicates the sequence number of the pipeline node.
         * 
         * @return builder
         * 
         */
        public Builder pipelineOrder(Integer pipelineOrder) {
            return pipelineOrder(Output.of(pipelineOrder));
        }

        /**
         * @param scene The use of the template scenario. It can have the following optional parameters:
         * - baseline: benchmark evaluation
         * 
         * @return builder
         * 
         */
        public Builder scene(Output<String> scene) {
            $.scene = scene;
            return this;
        }

        /**
         * @param scene The use of the template scenario. It can have the following optional parameters:
         * - baseline: benchmark evaluation
         * 
         * @return builder
         * 
         */
        public Builder scene(String scene) {
            return scene(Output.of(scene));
        }

        /**
         * @param settingParams Represents additional parameters for the run.
         * 
         * @return builder
         * 
         */
        public Builder settingParams(@Nullable Output<Map<String,String>> settingParams) {
            $.settingParams = settingParams;
            return this;
        }

        /**
         * @param settingParams Represents additional parameters for the run.
         * 
         * @return builder
         * 
         */
        public Builder settingParams(Map<String,String> settingParams) {
            return settingParams(Output.of(settingParams));
        }

        /**
         * @param workloadId Used to uniquely identify a specific payload.
         * 
         * @return builder
         * 
         */
        public Builder workloadId(Output<Integer> workloadId) {
            $.workloadId = workloadId;
            return this;
        }

        /**
         * @param workloadId Used to uniquely identify a specific payload.
         * 
         * @return builder
         * 
         */
        public Builder workloadId(Integer workloadId) {
            return workloadId(Output.of(workloadId));
        }

        /**
         * @param workloadName The name used to represent a specific payload.
         * 
         * @return builder
         * 
         */
        public Builder workloadName(Output<String> workloadName) {
            $.workloadName = workloadName;
            return this;
        }

        /**
         * @param workloadName The name used to represent a specific payload.
         * 
         * @return builder
         * 
         */
        public Builder workloadName(String workloadName) {
            return workloadName(Output.of(workloadName));
        }

        public ExperimentPlanTemplateTemplatePipelineArgs build() {
            if ($.envParams == null) {
                throw new MissingRequiredPropertyException("ExperimentPlanTemplateTemplatePipelineArgs", "envParams");
            }
            if ($.pipelineOrder == null) {
                throw new MissingRequiredPropertyException("ExperimentPlanTemplateTemplatePipelineArgs", "pipelineOrder");
            }
            if ($.scene == null) {
                throw new MissingRequiredPropertyException("ExperimentPlanTemplateTemplatePipelineArgs", "scene");
            }
            if ($.workloadId == null) {
                throw new MissingRequiredPropertyException("ExperimentPlanTemplateTemplatePipelineArgs", "workloadId");
            }
            if ($.workloadName == null) {
                throw new MissingRequiredPropertyException("ExperimentPlanTemplateTemplatePipelineArgs", "workloadName");
            }
            return $;
        }
    }

}
