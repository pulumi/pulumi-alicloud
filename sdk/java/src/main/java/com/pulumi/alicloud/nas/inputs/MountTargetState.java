// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.nas.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class MountTargetState extends com.pulumi.resources.ResourceArgs {

    public static final MountTargetState Empty = new MountTargetState();

    /**
     * The name of the permission group.
     * 
     */
    @Import(name="accessGroupName")
    private @Nullable Output<String> accessGroupName;

    /**
     * @return The name of the permission group.
     * 
     */
    public Optional<Output<String>> accessGroupName() {
        return Optional.ofNullable(this.accessGroupName);
    }

    /**
     * Whether to create an IPv6 mount point.
     * 
     * Value:
     * - true: create
     * - false (default): not created
     * 
     * &gt; **NOTE:**  currently, only extreme NAS supports IPv6 function in various regions in mainland China, and IPv6 function needs to be turned on for this file system.
     * 
     */
    @Import(name="dualStack")
    private @Nullable Output<Boolean> dualStack;

    /**
     * @return Whether to create an IPv6 mount point.
     * 
     * Value:
     * - true: create
     * - false (default): not created
     * 
     * &gt; **NOTE:**  currently, only extreme NAS supports IPv6 function in various regions in mainland China, and IPv6 function needs to be turned on for this file system.
     * 
     */
    public Optional<Output<Boolean>> dualStack() {
        return Optional.ofNullable(this.dualStack);
    }

    /**
     * The ID of the file system.
     * 
     */
    @Import(name="fileSystemId")
    private @Nullable Output<String> fileSystemId;

    /**
     * @return The ID of the file system.
     * 
     */
    public Optional<Output<String>> fileSystemId() {
        return Optional.ofNullable(this.fileSystemId);
    }

    /**
     * The domain name of the Mount point.
     * 
     */
    @Import(name="mountTargetDomain")
    private @Nullable Output<String> mountTargetDomain;

    /**
     * @return The domain name of the Mount point.
     * 
     */
    public Optional<Output<String>> mountTargetDomain() {
        return Optional.ofNullable(this.mountTargetDomain);
    }

    /**
     * Network type.
     * 
     */
    @Import(name="networkType")
    private @Nullable Output<String> networkType;

    /**
     * @return Network type.
     * 
     */
    public Optional<Output<String>> networkType() {
        return Optional.ofNullable(this.networkType);
    }

    /**
     * The ID of the security group.
     * 
     */
    @Import(name="securityGroupId")
    private @Nullable Output<String> securityGroupId;

    /**
     * @return The ID of the security group.
     * 
     */
    public Optional<Output<String>> securityGroupId() {
        return Optional.ofNullable(this.securityGroupId);
    }

    /**
     * The current status of the Mount point, including Active and Inactive, can be used to mount the file system only when the status is Active.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return The current status of the Mount point, including Active and Inactive, can be used to mount the file system only when the status is Active.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * VPC ID.
     * 
     */
    @Import(name="vpcId")
    private @Nullable Output<String> vpcId;

    /**
     * @return VPC ID.
     * 
     */
    public Optional<Output<String>> vpcId() {
        return Optional.ofNullable(this.vpcId);
    }

    /**
     * The ID of the switch.
     * 
     */
    @Import(name="vswitchId")
    private @Nullable Output<String> vswitchId;

    /**
     * @return The ID of the switch.
     * 
     */
    public Optional<Output<String>> vswitchId() {
        return Optional.ofNullable(this.vswitchId);
    }

    private MountTargetState() {}

    private MountTargetState(MountTargetState $) {
        this.accessGroupName = $.accessGroupName;
        this.dualStack = $.dualStack;
        this.fileSystemId = $.fileSystemId;
        this.mountTargetDomain = $.mountTargetDomain;
        this.networkType = $.networkType;
        this.securityGroupId = $.securityGroupId;
        this.status = $.status;
        this.vpcId = $.vpcId;
        this.vswitchId = $.vswitchId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MountTargetState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MountTargetState $;

        public Builder() {
            $ = new MountTargetState();
        }

        public Builder(MountTargetState defaults) {
            $ = new MountTargetState(Objects.requireNonNull(defaults));
        }

        /**
         * @param accessGroupName The name of the permission group.
         * 
         * @return builder
         * 
         */
        public Builder accessGroupName(@Nullable Output<String> accessGroupName) {
            $.accessGroupName = accessGroupName;
            return this;
        }

        /**
         * @param accessGroupName The name of the permission group.
         * 
         * @return builder
         * 
         */
        public Builder accessGroupName(String accessGroupName) {
            return accessGroupName(Output.of(accessGroupName));
        }

        /**
         * @param dualStack Whether to create an IPv6 mount point.
         * 
         * Value:
         * - true: create
         * - false (default): not created
         * 
         * &gt; **NOTE:**  currently, only extreme NAS supports IPv6 function in various regions in mainland China, and IPv6 function needs to be turned on for this file system.
         * 
         * @return builder
         * 
         */
        public Builder dualStack(@Nullable Output<Boolean> dualStack) {
            $.dualStack = dualStack;
            return this;
        }

        /**
         * @param dualStack Whether to create an IPv6 mount point.
         * 
         * Value:
         * - true: create
         * - false (default): not created
         * 
         * &gt; **NOTE:**  currently, only extreme NAS supports IPv6 function in various regions in mainland China, and IPv6 function needs to be turned on for this file system.
         * 
         * @return builder
         * 
         */
        public Builder dualStack(Boolean dualStack) {
            return dualStack(Output.of(dualStack));
        }

        /**
         * @param fileSystemId The ID of the file system.
         * 
         * @return builder
         * 
         */
        public Builder fileSystemId(@Nullable Output<String> fileSystemId) {
            $.fileSystemId = fileSystemId;
            return this;
        }

        /**
         * @param fileSystemId The ID of the file system.
         * 
         * @return builder
         * 
         */
        public Builder fileSystemId(String fileSystemId) {
            return fileSystemId(Output.of(fileSystemId));
        }

        /**
         * @param mountTargetDomain The domain name of the Mount point.
         * 
         * @return builder
         * 
         */
        public Builder mountTargetDomain(@Nullable Output<String> mountTargetDomain) {
            $.mountTargetDomain = mountTargetDomain;
            return this;
        }

        /**
         * @param mountTargetDomain The domain name of the Mount point.
         * 
         * @return builder
         * 
         */
        public Builder mountTargetDomain(String mountTargetDomain) {
            return mountTargetDomain(Output.of(mountTargetDomain));
        }

        /**
         * @param networkType Network type.
         * 
         * @return builder
         * 
         */
        public Builder networkType(@Nullable Output<String> networkType) {
            $.networkType = networkType;
            return this;
        }

        /**
         * @param networkType Network type.
         * 
         * @return builder
         * 
         */
        public Builder networkType(String networkType) {
            return networkType(Output.of(networkType));
        }

        /**
         * @param securityGroupId The ID of the security group.
         * 
         * @return builder
         * 
         */
        public Builder securityGroupId(@Nullable Output<String> securityGroupId) {
            $.securityGroupId = securityGroupId;
            return this;
        }

        /**
         * @param securityGroupId The ID of the security group.
         * 
         * @return builder
         * 
         */
        public Builder securityGroupId(String securityGroupId) {
            return securityGroupId(Output.of(securityGroupId));
        }

        /**
         * @param status The current status of the Mount point, including Active and Inactive, can be used to mount the file system only when the status is Active.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status The current status of the Mount point, including Active and Inactive, can be used to mount the file system only when the status is Active.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param vpcId VPC ID.
         * 
         * @return builder
         * 
         */
        public Builder vpcId(@Nullable Output<String> vpcId) {
            $.vpcId = vpcId;
            return this;
        }

        /**
         * @param vpcId VPC ID.
         * 
         * @return builder
         * 
         */
        public Builder vpcId(String vpcId) {
            return vpcId(Output.of(vpcId));
        }

        /**
         * @param vswitchId The ID of the switch.
         * 
         * @return builder
         * 
         */
        public Builder vswitchId(@Nullable Output<String> vswitchId) {
            $.vswitchId = vswitchId;
            return this;
        }

        /**
         * @param vswitchId The ID of the switch.
         * 
         * @return builder
         * 
         */
        public Builder vswitchId(String vswitchId) {
            return vswitchId(Output.of(vswitchId));
        }

        public MountTargetState build() {
            return $;
        }
    }

}
