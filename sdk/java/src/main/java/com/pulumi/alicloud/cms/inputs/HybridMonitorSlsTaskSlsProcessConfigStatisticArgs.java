// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.cms.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class HybridMonitorSlsTaskSlsProcessConfigStatisticArgs extends com.pulumi.resources.ResourceArgs {

    public static final HybridMonitorSlsTaskSlsProcessConfigStatisticArgs Empty = new HybridMonitorSlsTaskSlsProcessConfigStatisticArgs();

    /**
     * The alias of the extended field that specifies the result of basic operations that are performed on aggregation results.
     * 
     */
    @Import(name="alias")
    private @Nullable Output<String> alias;

    /**
     * @return The alias of the extended field that specifies the result of basic operations that are performed on aggregation results.
     * 
     */
    public Optional<Output<String>> alias() {
        return Optional.ofNullable(this.alias);
    }

    /**
     * The function that is used to aggregate log data within a statistical period. Valid values: `count`, `sum`, `avg`, `max`, `min`, `value`, `countps`, `sumps`, `distinct`, `distribution`, `percentile`.
     * 
     */
    @Import(name="function")
    private @Nullable Output<String> function;

    /**
     * @return The function that is used to aggregate log data within a statistical period. Valid values: `count`, `sum`, `avg`, `max`, `min`, `value`, `countps`, `sumps`, `distinct`, `distribution`, `percentile`.
     * 
     */
    public Optional<Output<String>> function() {
        return Optional.ofNullable(this.function);
    }

    /**
     * The value of the function that is used to aggregate logs imported from Log Service.
     * - If you set the `function` parameter to `distribution`, this parameter specifies the lower limit of the statistical interval. For example, if you want to calculate the number of HTTP requests whose status code is 2XX, set this parameter to 200.
     * - If you set the `function` parameter to `percentile`, this parameter specifies the percentile at which the expected value is. For example, 0.5 specifies P50.
     * 
     */
    @Import(name="parameterOne")
    private @Nullable Output<String> parameterOne;

    /**
     * @return The value of the function that is used to aggregate logs imported from Log Service.
     * - If you set the `function` parameter to `distribution`, this parameter specifies the lower limit of the statistical interval. For example, if you want to calculate the number of HTTP requests whose status code is 2XX, set this parameter to 200.
     * - If you set the `function` parameter to `percentile`, this parameter specifies the percentile at which the expected value is. For example, 0.5 specifies P50.
     * 
     */
    public Optional<Output<String>> parameterOne() {
        return Optional.ofNullable(this.parameterOne);
    }

    /**
     * The value of the function that is used to aggregate logs imported from Log Service. **Note:** This parameter is required only if the `function` parameter is set to `distribution`. This parameter specifies the upper limit of the statistical interval.
     * 
     */
    @Import(name="parameterTwo")
    private @Nullable Output<String> parameterTwo;

    /**
     * @return The value of the function that is used to aggregate logs imported from Log Service. **Note:** This parameter is required only if the `function` parameter is set to `distribution`. This parameter specifies the upper limit of the statistical interval.
     * 
     */
    public Optional<Output<String>> parameterTwo() {
        return Optional.ofNullable(this.parameterTwo);
    }

    /**
     * The name of the key that is used to filter logs imported from Log Service.
     * 
     */
    @Import(name="slsKeyName")
    private @Nullable Output<String> slsKeyName;

    /**
     * @return The name of the key that is used to filter logs imported from Log Service.
     * 
     */
    public Optional<Output<String>> slsKeyName() {
        return Optional.ofNullable(this.slsKeyName);
    }

    private HybridMonitorSlsTaskSlsProcessConfigStatisticArgs() {}

    private HybridMonitorSlsTaskSlsProcessConfigStatisticArgs(HybridMonitorSlsTaskSlsProcessConfigStatisticArgs $) {
        this.alias = $.alias;
        this.function = $.function;
        this.parameterOne = $.parameterOne;
        this.parameterTwo = $.parameterTwo;
        this.slsKeyName = $.slsKeyName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(HybridMonitorSlsTaskSlsProcessConfigStatisticArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private HybridMonitorSlsTaskSlsProcessConfigStatisticArgs $;

        public Builder() {
            $ = new HybridMonitorSlsTaskSlsProcessConfigStatisticArgs();
        }

        public Builder(HybridMonitorSlsTaskSlsProcessConfigStatisticArgs defaults) {
            $ = new HybridMonitorSlsTaskSlsProcessConfigStatisticArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param alias The alias of the extended field that specifies the result of basic operations that are performed on aggregation results.
         * 
         * @return builder
         * 
         */
        public Builder alias(@Nullable Output<String> alias) {
            $.alias = alias;
            return this;
        }

        /**
         * @param alias The alias of the extended field that specifies the result of basic operations that are performed on aggregation results.
         * 
         * @return builder
         * 
         */
        public Builder alias(String alias) {
            return alias(Output.of(alias));
        }

        /**
         * @param function The function that is used to aggregate log data within a statistical period. Valid values: `count`, `sum`, `avg`, `max`, `min`, `value`, `countps`, `sumps`, `distinct`, `distribution`, `percentile`.
         * 
         * @return builder
         * 
         */
        public Builder function(@Nullable Output<String> function) {
            $.function = function;
            return this;
        }

        /**
         * @param function The function that is used to aggregate log data within a statistical period. Valid values: `count`, `sum`, `avg`, `max`, `min`, `value`, `countps`, `sumps`, `distinct`, `distribution`, `percentile`.
         * 
         * @return builder
         * 
         */
        public Builder function(String function) {
            return function(Output.of(function));
        }

        /**
         * @param parameterOne The value of the function that is used to aggregate logs imported from Log Service.
         * - If you set the `function` parameter to `distribution`, this parameter specifies the lower limit of the statistical interval. For example, if you want to calculate the number of HTTP requests whose status code is 2XX, set this parameter to 200.
         * - If you set the `function` parameter to `percentile`, this parameter specifies the percentile at which the expected value is. For example, 0.5 specifies P50.
         * 
         * @return builder
         * 
         */
        public Builder parameterOne(@Nullable Output<String> parameterOne) {
            $.parameterOne = parameterOne;
            return this;
        }

        /**
         * @param parameterOne The value of the function that is used to aggregate logs imported from Log Service.
         * - If you set the `function` parameter to `distribution`, this parameter specifies the lower limit of the statistical interval. For example, if you want to calculate the number of HTTP requests whose status code is 2XX, set this parameter to 200.
         * - If you set the `function` parameter to `percentile`, this parameter specifies the percentile at which the expected value is. For example, 0.5 specifies P50.
         * 
         * @return builder
         * 
         */
        public Builder parameterOne(String parameterOne) {
            return parameterOne(Output.of(parameterOne));
        }

        /**
         * @param parameterTwo The value of the function that is used to aggregate logs imported from Log Service. **Note:** This parameter is required only if the `function` parameter is set to `distribution`. This parameter specifies the upper limit of the statistical interval.
         * 
         * @return builder
         * 
         */
        public Builder parameterTwo(@Nullable Output<String> parameterTwo) {
            $.parameterTwo = parameterTwo;
            return this;
        }

        /**
         * @param parameterTwo The value of the function that is used to aggregate logs imported from Log Service. **Note:** This parameter is required only if the `function` parameter is set to `distribution`. This parameter specifies the upper limit of the statistical interval.
         * 
         * @return builder
         * 
         */
        public Builder parameterTwo(String parameterTwo) {
            return parameterTwo(Output.of(parameterTwo));
        }

        /**
         * @param slsKeyName The name of the key that is used to filter logs imported from Log Service.
         * 
         * @return builder
         * 
         */
        public Builder slsKeyName(@Nullable Output<String> slsKeyName) {
            $.slsKeyName = slsKeyName;
            return this;
        }

        /**
         * @param slsKeyName The name of the key that is used to filter logs imported from Log Service.
         * 
         * @return builder
         * 
         */
        public Builder slsKeyName(String slsKeyName) {
            return slsKeyName(Output.of(slsKeyName));
        }

        public HybridMonitorSlsTaskSlsProcessConfigStatisticArgs build() {
            return $;
        }
    }

}
