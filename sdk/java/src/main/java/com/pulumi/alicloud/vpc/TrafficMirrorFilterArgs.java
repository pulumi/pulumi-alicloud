// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.vpc;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TrafficMirrorFilterArgs extends com.pulumi.resources.ResourceArgs {

    public static final TrafficMirrorFilterArgs Empty = new TrafficMirrorFilterArgs();

    /**
     * The dry run.
     * 
     */
    @Import(name="dryRun")
    private @Nullable Output<Boolean> dryRun;

    /**
     * @return The dry run.
     * 
     */
    public Optional<Output<Boolean>> dryRun() {
        return Optional.ofNullable(this.dryRun);
    }

    /**
     * The description of the filter. The description must be 1 to 256 characters in length and cannot start with `http://` or `https://`.
     * 
     */
    @Import(name="trafficMirrorFilterDescription")
    private @Nullable Output<String> trafficMirrorFilterDescription;

    /**
     * @return The description of the filter. The description must be 1 to 256 characters in length and cannot start with `http://` or `https://`.
     * 
     */
    public Optional<Output<String>> trafficMirrorFilterDescription() {
        return Optional.ofNullable(this.trafficMirrorFilterDescription);
    }

    /**
     * The name of the filter. The name must be 1 to 128 characters in length and cannot start with `http://` or `https://`.
     * 
     */
    @Import(name="trafficMirrorFilterName")
    private @Nullable Output<String> trafficMirrorFilterName;

    /**
     * @return The name of the filter. The name must be 1 to 128 characters in length and cannot start with `http://` or `https://`.
     * 
     */
    public Optional<Output<String>> trafficMirrorFilterName() {
        return Optional.ofNullable(this.trafficMirrorFilterName);
    }

    private TrafficMirrorFilterArgs() {}

    private TrafficMirrorFilterArgs(TrafficMirrorFilterArgs $) {
        this.dryRun = $.dryRun;
        this.trafficMirrorFilterDescription = $.trafficMirrorFilterDescription;
        this.trafficMirrorFilterName = $.trafficMirrorFilterName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TrafficMirrorFilterArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TrafficMirrorFilterArgs $;

        public Builder() {
            $ = new TrafficMirrorFilterArgs();
        }

        public Builder(TrafficMirrorFilterArgs defaults) {
            $ = new TrafficMirrorFilterArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param dryRun The dry run.
         * 
         * @return builder
         * 
         */
        public Builder dryRun(@Nullable Output<Boolean> dryRun) {
            $.dryRun = dryRun;
            return this;
        }

        /**
         * @param dryRun The dry run.
         * 
         * @return builder
         * 
         */
        public Builder dryRun(Boolean dryRun) {
            return dryRun(Output.of(dryRun));
        }

        /**
         * @param trafficMirrorFilterDescription The description of the filter. The description must be 1 to 256 characters in length and cannot start with `http://` or `https://`.
         * 
         * @return builder
         * 
         */
        public Builder trafficMirrorFilterDescription(@Nullable Output<String> trafficMirrorFilterDescription) {
            $.trafficMirrorFilterDescription = trafficMirrorFilterDescription;
            return this;
        }

        /**
         * @param trafficMirrorFilterDescription The description of the filter. The description must be 1 to 256 characters in length and cannot start with `http://` or `https://`.
         * 
         * @return builder
         * 
         */
        public Builder trafficMirrorFilterDescription(String trafficMirrorFilterDescription) {
            return trafficMirrorFilterDescription(Output.of(trafficMirrorFilterDescription));
        }

        /**
         * @param trafficMirrorFilterName The name of the filter. The name must be 1 to 128 characters in length and cannot start with `http://` or `https://`.
         * 
         * @return builder
         * 
         */
        public Builder trafficMirrorFilterName(@Nullable Output<String> trafficMirrorFilterName) {
            $.trafficMirrorFilterName = trafficMirrorFilterName;
            return this;
        }

        /**
         * @param trafficMirrorFilterName The name of the filter. The name must be 1 to 128 characters in length and cannot start with `http://` or `https://`.
         * 
         * @return builder
         * 
         */
        public Builder trafficMirrorFilterName(String trafficMirrorFilterName) {
            return trafficMirrorFilterName(Output.of(trafficMirrorFilterName));
        }

        public TrafficMirrorFilterArgs build() {
            return $;
        }
    }

}
