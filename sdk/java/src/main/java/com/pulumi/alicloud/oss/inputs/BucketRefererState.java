// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.oss.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class BucketRefererState extends com.pulumi.resources.ResourceArgs {

    public static final BucketRefererState Empty = new BucketRefererState();

    /**
     * Whether to allow empty Referer request headers.
     * 
     */
    @Import(name="allowEmptyReferer")
    private @Nullable Output<Boolean> allowEmptyReferer;

    /**
     * @return Whether to allow empty Referer request headers.
     * 
     */
    public Optional<Output<Boolean>> allowEmptyReferer() {
        return Optional.ofNullable(this.allowEmptyReferer);
    }

    /**
     * Specifies whether to truncate the query string in the URL when the Referer is matched. Valid values: true, false.
     * 
     */
    @Import(name="allowTruncateQueryString")
    private @Nullable Output<Boolean> allowTruncateQueryString;

    /**
     * @return Specifies whether to truncate the query string in the URL when the Referer is matched. Valid values: true, false.
     * 
     */
    public Optional<Output<Boolean>> allowTruncateQueryString() {
        return Optional.ofNullable(this.allowTruncateQueryString);
    }

    /**
     * Name of the Bucket.
     * 
     */
    @Import(name="bucket")
    private @Nullable Output<String> bucket;

    /**
     * @return Name of the Bucket.
     * 
     */
    public Optional<Output<String>> bucket() {
        return Optional.ofNullable(this.bucket);
    }

    /**
     * The container that holds the Referer blacklist.
     * 
     */
    @Import(name="refererBlacklists")
    private @Nullable Output<List<String>> refererBlacklists;

    /**
     * @return The container that holds the Referer blacklist.
     * 
     */
    public Optional<Output<List<String>>> refererBlacklists() {
        return Optional.ofNullable(this.refererBlacklists);
    }

    /**
     * The container that holds the Referer whitelist.
     * 
     */
    @Import(name="refererLists")
    private @Nullable Output<List<String>> refererLists;

    /**
     * @return The container that holds the Referer whitelist.
     * 
     */
    public Optional<Output<List<String>>> refererLists() {
        return Optional.ofNullable(this.refererLists);
    }

    /**
     * Specifies whether to truncate the path and parts that follow the path in the URL when the Referer is matched. Valid values: true, false. If TruncatePath is set to true, the value of AllowTruncateQueryString must be also true because the query string follows the path component. When the path is truncated, the query string is also truncated.
     * 
     */
    @Import(name="truncatePath")
    private @Nullable Output<Boolean> truncatePath;

    /**
     * @return Specifies whether to truncate the path and parts that follow the path in the URL when the Referer is matched. Valid values: true, false. If TruncatePath is set to true, the value of AllowTruncateQueryString must be also true because the query string follows the path component. When the path is truncated, the query string is also truncated.
     * 
     */
    public Optional<Output<Boolean>> truncatePath() {
        return Optional.ofNullable(this.truncatePath);
    }

    private BucketRefererState() {}

    private BucketRefererState(BucketRefererState $) {
        this.allowEmptyReferer = $.allowEmptyReferer;
        this.allowTruncateQueryString = $.allowTruncateQueryString;
        this.bucket = $.bucket;
        this.refererBlacklists = $.refererBlacklists;
        this.refererLists = $.refererLists;
        this.truncatePath = $.truncatePath;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BucketRefererState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BucketRefererState $;

        public Builder() {
            $ = new BucketRefererState();
        }

        public Builder(BucketRefererState defaults) {
            $ = new BucketRefererState(Objects.requireNonNull(defaults));
        }

        /**
         * @param allowEmptyReferer Whether to allow empty Referer request headers.
         * 
         * @return builder
         * 
         */
        public Builder allowEmptyReferer(@Nullable Output<Boolean> allowEmptyReferer) {
            $.allowEmptyReferer = allowEmptyReferer;
            return this;
        }

        /**
         * @param allowEmptyReferer Whether to allow empty Referer request headers.
         * 
         * @return builder
         * 
         */
        public Builder allowEmptyReferer(Boolean allowEmptyReferer) {
            return allowEmptyReferer(Output.of(allowEmptyReferer));
        }

        /**
         * @param allowTruncateQueryString Specifies whether to truncate the query string in the URL when the Referer is matched. Valid values: true, false.
         * 
         * @return builder
         * 
         */
        public Builder allowTruncateQueryString(@Nullable Output<Boolean> allowTruncateQueryString) {
            $.allowTruncateQueryString = allowTruncateQueryString;
            return this;
        }

        /**
         * @param allowTruncateQueryString Specifies whether to truncate the query string in the URL when the Referer is matched. Valid values: true, false.
         * 
         * @return builder
         * 
         */
        public Builder allowTruncateQueryString(Boolean allowTruncateQueryString) {
            return allowTruncateQueryString(Output.of(allowTruncateQueryString));
        }

        /**
         * @param bucket Name of the Bucket.
         * 
         * @return builder
         * 
         */
        public Builder bucket(@Nullable Output<String> bucket) {
            $.bucket = bucket;
            return this;
        }

        /**
         * @param bucket Name of the Bucket.
         * 
         * @return builder
         * 
         */
        public Builder bucket(String bucket) {
            return bucket(Output.of(bucket));
        }

        /**
         * @param refererBlacklists The container that holds the Referer blacklist.
         * 
         * @return builder
         * 
         */
        public Builder refererBlacklists(@Nullable Output<List<String>> refererBlacklists) {
            $.refererBlacklists = refererBlacklists;
            return this;
        }

        /**
         * @param refererBlacklists The container that holds the Referer blacklist.
         * 
         * @return builder
         * 
         */
        public Builder refererBlacklists(List<String> refererBlacklists) {
            return refererBlacklists(Output.of(refererBlacklists));
        }

        /**
         * @param refererBlacklists The container that holds the Referer blacklist.
         * 
         * @return builder
         * 
         */
        public Builder refererBlacklists(String... refererBlacklists) {
            return refererBlacklists(List.of(refererBlacklists));
        }

        /**
         * @param refererLists The container that holds the Referer whitelist.
         * 
         * @return builder
         * 
         */
        public Builder refererLists(@Nullable Output<List<String>> refererLists) {
            $.refererLists = refererLists;
            return this;
        }

        /**
         * @param refererLists The container that holds the Referer whitelist.
         * 
         * @return builder
         * 
         */
        public Builder refererLists(List<String> refererLists) {
            return refererLists(Output.of(refererLists));
        }

        /**
         * @param refererLists The container that holds the Referer whitelist.
         * 
         * @return builder
         * 
         */
        public Builder refererLists(String... refererLists) {
            return refererLists(List.of(refererLists));
        }

        /**
         * @param truncatePath Specifies whether to truncate the path and parts that follow the path in the URL when the Referer is matched. Valid values: true, false. If TruncatePath is set to true, the value of AllowTruncateQueryString must be also true because the query string follows the path component. When the path is truncated, the query string is also truncated.
         * 
         * @return builder
         * 
         */
        public Builder truncatePath(@Nullable Output<Boolean> truncatePath) {
            $.truncatePath = truncatePath;
            return this;
        }

        /**
         * @param truncatePath Specifies whether to truncate the path and parts that follow the path in the URL when the Referer is matched. Valid values: true, false. If TruncatePath is set to true, the value of AllowTruncateQueryString must be also true because the query string follows the path component. When the path is truncated, the query string is also truncated.
         * 
         * @return builder
         * 
         */
        public Builder truncatePath(Boolean truncatePath) {
            return truncatePath(Output.of(truncatePath));
        }

        public BucketRefererState build() {
            return $;
        }
    }

}
