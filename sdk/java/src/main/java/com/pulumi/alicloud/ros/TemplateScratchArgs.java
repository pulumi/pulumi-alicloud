// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.ros;

import com.pulumi.alicloud.ros.inputs.TemplateScratchPreferenceParameterArgs;
import com.pulumi.alicloud.ros.inputs.TemplateScratchSourceResourceArgs;
import com.pulumi.alicloud.ros.inputs.TemplateScratchSourceResourceGroupArgs;
import com.pulumi.alicloud.ros.inputs.TemplateScratchSourceTagArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TemplateScratchArgs extends com.pulumi.resources.ResourceArgs {

    public static final TemplateScratchArgs Empty = new TemplateScratchArgs();

    /**
     * The Description of the Template Scratch.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The Description of the Template Scratch.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The execution mode. Valid Values: `Async` or `Sync`.
     * 
     */
    @Import(name="executionMode")
    private @Nullable Output<String> executionMode;

    /**
     * @return The execution mode. Valid Values: `Async` or `Sync`.
     * 
     */
    public Optional<Output<String>> executionMode() {
        return Optional.ofNullable(this.executionMode);
    }

    /**
     * Logical ID generation strategy. Valid Values: `LongTypePrefixAndIndexSuffix`, `LongTypePrefixAndHashSuffix` and `ShortTypePrefixAndHashSuffix`.
     * 
     */
    @Import(name="logicalIdStrategy")
    private @Nullable Output<String> logicalIdStrategy;

    /**
     * @return Logical ID generation strategy. Valid Values: `LongTypePrefixAndIndexSuffix`, `LongTypePrefixAndHashSuffix` and `ShortTypePrefixAndHashSuffix`.
     * 
     */
    public Optional<Output<String>> logicalIdStrategy() {
        return Optional.ofNullable(this.logicalIdStrategy);
    }

    /**
     * Priority parameter. See the following `Block preference_parameters`.
     * 
     */
    @Import(name="preferenceParameters")
    private @Nullable Output<List<TemplateScratchPreferenceParameterArgs>> preferenceParameters;

    /**
     * @return Priority parameter. See the following `Block preference_parameters`.
     * 
     */
    public Optional<Output<List<TemplateScratchPreferenceParameterArgs>>> preferenceParameters() {
        return Optional.ofNullable(this.preferenceParameters);
    }

    /**
     * Source resource grouping. See the following `Block source_resource_group`.
     * 
     */
    @Import(name="sourceResourceGroup")
    private @Nullable Output<TemplateScratchSourceResourceGroupArgs> sourceResourceGroup;

    /**
     * @return Source resource grouping. See the following `Block source_resource_group`.
     * 
     */
    public Optional<Output<TemplateScratchSourceResourceGroupArgs>> sourceResourceGroup() {
        return Optional.ofNullable(this.sourceResourceGroup);
    }

    /**
     * Source resource. See the following `Block source_resources`.
     * 
     */
    @Import(name="sourceResources")
    private @Nullable Output<List<TemplateScratchSourceResourceArgs>> sourceResources;

    /**
     * @return Source resource. See the following `Block source_resources`.
     * 
     */
    public Optional<Output<List<TemplateScratchSourceResourceArgs>>> sourceResources() {
        return Optional.ofNullable(this.sourceResources);
    }

    /**
     * Source tag. See the following `Block source_tag`.
     * 
     */
    @Import(name="sourceTag")
    private @Nullable Output<TemplateScratchSourceTagArgs> sourceTag;

    /**
     * @return Source tag. See the following `Block source_tag`.
     * 
     */
    public Optional<Output<TemplateScratchSourceTagArgs>> sourceTag() {
        return Optional.ofNullable(this.sourceTag);
    }

    /**
     * The type of the Template scan. Valid Values: `ResourceImport` or `ArchitectureReplication`.
     * 
     */
    @Import(name="templateScratchType", required=true)
    private Output<String> templateScratchType;

    /**
     * @return The type of the Template scan. Valid Values: `ResourceImport` or `ArchitectureReplication`.
     * 
     */
    public Output<String> templateScratchType() {
        return this.templateScratchType;
    }

    private TemplateScratchArgs() {}

    private TemplateScratchArgs(TemplateScratchArgs $) {
        this.description = $.description;
        this.executionMode = $.executionMode;
        this.logicalIdStrategy = $.logicalIdStrategy;
        this.preferenceParameters = $.preferenceParameters;
        this.sourceResourceGroup = $.sourceResourceGroup;
        this.sourceResources = $.sourceResources;
        this.sourceTag = $.sourceTag;
        this.templateScratchType = $.templateScratchType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TemplateScratchArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TemplateScratchArgs $;

        public Builder() {
            $ = new TemplateScratchArgs();
        }

        public Builder(TemplateScratchArgs defaults) {
            $ = new TemplateScratchArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param description The Description of the Template Scratch.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The Description of the Template Scratch.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param executionMode The execution mode. Valid Values: `Async` or `Sync`.
         * 
         * @return builder
         * 
         */
        public Builder executionMode(@Nullable Output<String> executionMode) {
            $.executionMode = executionMode;
            return this;
        }

        /**
         * @param executionMode The execution mode. Valid Values: `Async` or `Sync`.
         * 
         * @return builder
         * 
         */
        public Builder executionMode(String executionMode) {
            return executionMode(Output.of(executionMode));
        }

        /**
         * @param logicalIdStrategy Logical ID generation strategy. Valid Values: `LongTypePrefixAndIndexSuffix`, `LongTypePrefixAndHashSuffix` and `ShortTypePrefixAndHashSuffix`.
         * 
         * @return builder
         * 
         */
        public Builder logicalIdStrategy(@Nullable Output<String> logicalIdStrategy) {
            $.logicalIdStrategy = logicalIdStrategy;
            return this;
        }

        /**
         * @param logicalIdStrategy Logical ID generation strategy. Valid Values: `LongTypePrefixAndIndexSuffix`, `LongTypePrefixAndHashSuffix` and `ShortTypePrefixAndHashSuffix`.
         * 
         * @return builder
         * 
         */
        public Builder logicalIdStrategy(String logicalIdStrategy) {
            return logicalIdStrategy(Output.of(logicalIdStrategy));
        }

        /**
         * @param preferenceParameters Priority parameter. See the following `Block preference_parameters`.
         * 
         * @return builder
         * 
         */
        public Builder preferenceParameters(@Nullable Output<List<TemplateScratchPreferenceParameterArgs>> preferenceParameters) {
            $.preferenceParameters = preferenceParameters;
            return this;
        }

        /**
         * @param preferenceParameters Priority parameter. See the following `Block preference_parameters`.
         * 
         * @return builder
         * 
         */
        public Builder preferenceParameters(List<TemplateScratchPreferenceParameterArgs> preferenceParameters) {
            return preferenceParameters(Output.of(preferenceParameters));
        }

        /**
         * @param preferenceParameters Priority parameter. See the following `Block preference_parameters`.
         * 
         * @return builder
         * 
         */
        public Builder preferenceParameters(TemplateScratchPreferenceParameterArgs... preferenceParameters) {
            return preferenceParameters(List.of(preferenceParameters));
        }

        /**
         * @param sourceResourceGroup Source resource grouping. See the following `Block source_resource_group`.
         * 
         * @return builder
         * 
         */
        public Builder sourceResourceGroup(@Nullable Output<TemplateScratchSourceResourceGroupArgs> sourceResourceGroup) {
            $.sourceResourceGroup = sourceResourceGroup;
            return this;
        }

        /**
         * @param sourceResourceGroup Source resource grouping. See the following `Block source_resource_group`.
         * 
         * @return builder
         * 
         */
        public Builder sourceResourceGroup(TemplateScratchSourceResourceGroupArgs sourceResourceGroup) {
            return sourceResourceGroup(Output.of(sourceResourceGroup));
        }

        /**
         * @param sourceResources Source resource. See the following `Block source_resources`.
         * 
         * @return builder
         * 
         */
        public Builder sourceResources(@Nullable Output<List<TemplateScratchSourceResourceArgs>> sourceResources) {
            $.sourceResources = sourceResources;
            return this;
        }

        /**
         * @param sourceResources Source resource. See the following `Block source_resources`.
         * 
         * @return builder
         * 
         */
        public Builder sourceResources(List<TemplateScratchSourceResourceArgs> sourceResources) {
            return sourceResources(Output.of(sourceResources));
        }

        /**
         * @param sourceResources Source resource. See the following `Block source_resources`.
         * 
         * @return builder
         * 
         */
        public Builder sourceResources(TemplateScratchSourceResourceArgs... sourceResources) {
            return sourceResources(List.of(sourceResources));
        }

        /**
         * @param sourceTag Source tag. See the following `Block source_tag`.
         * 
         * @return builder
         * 
         */
        public Builder sourceTag(@Nullable Output<TemplateScratchSourceTagArgs> sourceTag) {
            $.sourceTag = sourceTag;
            return this;
        }

        /**
         * @param sourceTag Source tag. See the following `Block source_tag`.
         * 
         * @return builder
         * 
         */
        public Builder sourceTag(TemplateScratchSourceTagArgs sourceTag) {
            return sourceTag(Output.of(sourceTag));
        }

        /**
         * @param templateScratchType The type of the Template scan. Valid Values: `ResourceImport` or `ArchitectureReplication`.
         * 
         * @return builder
         * 
         */
        public Builder templateScratchType(Output<String> templateScratchType) {
            $.templateScratchType = templateScratchType;
            return this;
        }

        /**
         * @param templateScratchType The type of the Template scan. Valid Values: `ResourceImport` or `ArchitectureReplication`.
         * 
         * @return builder
         * 
         */
        public Builder templateScratchType(String templateScratchType) {
            return templateScratchType(Output.of(templateScratchType));
        }

        public TemplateScratchArgs build() {
            if ($.templateScratchType == null) {
                throw new MissingRequiredPropertyException("TemplateScratchArgs", "templateScratchType");
            }
            return $;
        }
    }

}
