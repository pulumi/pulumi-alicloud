// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.oss.outputs;

import com.pulumi.alicloud.oss.outputs.BucketLifecycleRuleAbortMultipartUpload;
import com.pulumi.alicloud.oss.outputs.BucketLifecycleRuleExpiration;
import com.pulumi.alicloud.oss.outputs.BucketLifecycleRuleFilter;
import com.pulumi.alicloud.oss.outputs.BucketLifecycleRuleNoncurrentVersionExpiration;
import com.pulumi.alicloud.oss.outputs.BucketLifecycleRuleNoncurrentVersionTransition;
import com.pulumi.alicloud.oss.outputs.BucketLifecycleRuleTransition;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class BucketLifecycleRule {
    /**
     * @return Specifies the number of days after initiating a multipart upload when the multipart upload must be completed. See `abort_multipart_upload` below.
     * 
     */
    private @Nullable List<BucketLifecycleRuleAbortMultipartUpload> abortMultipartUploads;
    /**
     * @return Specifies lifecycle rule status.
     * 
     */
    private Boolean enabled;
    /**
     * @return Specifies a period in the object&#39;s expire. See `expiration` below.
     * 
     */
    private @Nullable List<BucketLifecycleRuleExpiration> expirations;
    /**
     * @return Configuration block used to identify objects that a Lifecycle rule applies to. See `filter` below.
     * 
     * `NOTE`: At least one of expiration, transitions, abort_multipart_upload, noncurrent_version_expiration and noncurrent_version_transition should be configured.
     * 
     */
    private @Nullable BucketLifecycleRuleFilter filter;
    /**
     * @return Unique identifier for the rule. If omitted, OSS bucket will assign a unique name.
     * 
     */
    private @Nullable String id;
    /**
     * @return Specifies when noncurrent object versions expire. See `noncurrent_version_expiration` below.
     * 
     */
    private @Nullable List<BucketLifecycleRuleNoncurrentVersionExpiration> noncurrentVersionExpirations;
    /**
     * @return Specifies when noncurrent object versions transitions. See `noncurrent_version_transition` below.
     * 
     */
    private @Nullable List<BucketLifecycleRuleNoncurrentVersionTransition> noncurrentVersionTransitions;
    /**
     * @return The prefix in the names of the objects to which the lifecycle rule does not apply.
     * 
     */
    private @Nullable String prefix;
    /**
     * @return Key-value map of resource tags. All of these tags must exist in the object&#39;s tag set in order for the rule to apply.
     * 
     */
    private @Nullable Map<String,Object> tags;
    /**
     * @return Specifies the time when an object is converted to the IA or archive storage class during a valid life cycle. See `transitions` below.
     * 
     */
    private @Nullable List<BucketLifecycleRuleTransition> transitions;

    private BucketLifecycleRule() {}
    /**
     * @return Specifies the number of days after initiating a multipart upload when the multipart upload must be completed. See `abort_multipart_upload` below.
     * 
     */
    public List<BucketLifecycleRuleAbortMultipartUpload> abortMultipartUploads() {
        return this.abortMultipartUploads == null ? List.of() : this.abortMultipartUploads;
    }
    /**
     * @return Specifies lifecycle rule status.
     * 
     */
    public Boolean enabled() {
        return this.enabled;
    }
    /**
     * @return Specifies a period in the object&#39;s expire. See `expiration` below.
     * 
     */
    public List<BucketLifecycleRuleExpiration> expirations() {
        return this.expirations == null ? List.of() : this.expirations;
    }
    /**
     * @return Configuration block used to identify objects that a Lifecycle rule applies to. See `filter` below.
     * 
     * `NOTE`: At least one of expiration, transitions, abort_multipart_upload, noncurrent_version_expiration and noncurrent_version_transition should be configured.
     * 
     */
    public Optional<BucketLifecycleRuleFilter> filter() {
        return Optional.ofNullable(this.filter);
    }
    /**
     * @return Unique identifier for the rule. If omitted, OSS bucket will assign a unique name.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return Specifies when noncurrent object versions expire. See `noncurrent_version_expiration` below.
     * 
     */
    public List<BucketLifecycleRuleNoncurrentVersionExpiration> noncurrentVersionExpirations() {
        return this.noncurrentVersionExpirations == null ? List.of() : this.noncurrentVersionExpirations;
    }
    /**
     * @return Specifies when noncurrent object versions transitions. See `noncurrent_version_transition` below.
     * 
     */
    public List<BucketLifecycleRuleNoncurrentVersionTransition> noncurrentVersionTransitions() {
        return this.noncurrentVersionTransitions == null ? List.of() : this.noncurrentVersionTransitions;
    }
    /**
     * @return The prefix in the names of the objects to which the lifecycle rule does not apply.
     * 
     */
    public Optional<String> prefix() {
        return Optional.ofNullable(this.prefix);
    }
    /**
     * @return Key-value map of resource tags. All of these tags must exist in the object&#39;s tag set in order for the rule to apply.
     * 
     */
    public Map<String,Object> tags() {
        return this.tags == null ? Map.of() : this.tags;
    }
    /**
     * @return Specifies the time when an object is converted to the IA or archive storage class during a valid life cycle. See `transitions` below.
     * 
     */
    public List<BucketLifecycleRuleTransition> transitions() {
        return this.transitions == null ? List.of() : this.transitions;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(BucketLifecycleRule defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<BucketLifecycleRuleAbortMultipartUpload> abortMultipartUploads;
        private Boolean enabled;
        private @Nullable List<BucketLifecycleRuleExpiration> expirations;
        private @Nullable BucketLifecycleRuleFilter filter;
        private @Nullable String id;
        private @Nullable List<BucketLifecycleRuleNoncurrentVersionExpiration> noncurrentVersionExpirations;
        private @Nullable List<BucketLifecycleRuleNoncurrentVersionTransition> noncurrentVersionTransitions;
        private @Nullable String prefix;
        private @Nullable Map<String,Object> tags;
        private @Nullable List<BucketLifecycleRuleTransition> transitions;
        public Builder() {}
        public Builder(BucketLifecycleRule defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.abortMultipartUploads = defaults.abortMultipartUploads;
    	      this.enabled = defaults.enabled;
    	      this.expirations = defaults.expirations;
    	      this.filter = defaults.filter;
    	      this.id = defaults.id;
    	      this.noncurrentVersionExpirations = defaults.noncurrentVersionExpirations;
    	      this.noncurrentVersionTransitions = defaults.noncurrentVersionTransitions;
    	      this.prefix = defaults.prefix;
    	      this.tags = defaults.tags;
    	      this.transitions = defaults.transitions;
        }

        @CustomType.Setter
        public Builder abortMultipartUploads(@Nullable List<BucketLifecycleRuleAbortMultipartUpload> abortMultipartUploads) {
            this.abortMultipartUploads = abortMultipartUploads;
            return this;
        }
        public Builder abortMultipartUploads(BucketLifecycleRuleAbortMultipartUpload... abortMultipartUploads) {
            return abortMultipartUploads(List.of(abortMultipartUploads));
        }
        @CustomType.Setter
        public Builder enabled(Boolean enabled) {
            this.enabled = Objects.requireNonNull(enabled);
            return this;
        }
        @CustomType.Setter
        public Builder expirations(@Nullable List<BucketLifecycleRuleExpiration> expirations) {
            this.expirations = expirations;
            return this;
        }
        public Builder expirations(BucketLifecycleRuleExpiration... expirations) {
            return expirations(List.of(expirations));
        }
        @CustomType.Setter
        public Builder filter(@Nullable BucketLifecycleRuleFilter filter) {
            this.filter = filter;
            return this;
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder noncurrentVersionExpirations(@Nullable List<BucketLifecycleRuleNoncurrentVersionExpiration> noncurrentVersionExpirations) {
            this.noncurrentVersionExpirations = noncurrentVersionExpirations;
            return this;
        }
        public Builder noncurrentVersionExpirations(BucketLifecycleRuleNoncurrentVersionExpiration... noncurrentVersionExpirations) {
            return noncurrentVersionExpirations(List.of(noncurrentVersionExpirations));
        }
        @CustomType.Setter
        public Builder noncurrentVersionTransitions(@Nullable List<BucketLifecycleRuleNoncurrentVersionTransition> noncurrentVersionTransitions) {
            this.noncurrentVersionTransitions = noncurrentVersionTransitions;
            return this;
        }
        public Builder noncurrentVersionTransitions(BucketLifecycleRuleNoncurrentVersionTransition... noncurrentVersionTransitions) {
            return noncurrentVersionTransitions(List.of(noncurrentVersionTransitions));
        }
        @CustomType.Setter
        public Builder prefix(@Nullable String prefix) {
            this.prefix = prefix;
            return this;
        }
        @CustomType.Setter
        public Builder tags(@Nullable Map<String,Object> tags) {
            this.tags = tags;
            return this;
        }
        @CustomType.Setter
        public Builder transitions(@Nullable List<BucketLifecycleRuleTransition> transitions) {
            this.transitions = transitions;
            return this;
        }
        public Builder transitions(BucketLifecycleRuleTransition... transitions) {
            return transitions(List.of(transitions));
        }
        public BucketLifecycleRule build() {
            final var _resultValue = new BucketLifecycleRule();
            _resultValue.abortMultipartUploads = abortMultipartUploads;
            _resultValue.enabled = enabled;
            _resultValue.expirations = expirations;
            _resultValue.filter = filter;
            _resultValue.id = id;
            _resultValue.noncurrentVersionExpirations = noncurrentVersionExpirations;
            _resultValue.noncurrentVersionTransitions = noncurrentVersionTransitions;
            _resultValue.prefix = prefix;
            _resultValue.tags = tags;
            _resultValue.transitions = transitions;
            return _resultValue;
        }
    }
}
