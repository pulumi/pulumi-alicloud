// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.threatdetection.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetWebLockConfigsConfig {
    /**
     * @return The prevention mode.
     * 
     */
    private String defenceMode;
    /**
     * @return The directory that has web tamper proofing enabled.
     * 
     */
    private String dir;
    /**
     * @return The directory that has web tamper proofing disabled.
     * 
     */
    private String exclusiveDir;
    /**
     * @return The file that has web tamper proofing disabled. **Note:** If the value of `mode` is `blacklist`, this parameter is returned.
     * 
     */
    private String exclusiveFile;
    /**
     * @return The type of the file that has web tamper proofing disabled. **Note:** If the value of `mode` is `blacklist`, this parameter is returned.
     * 
     */
    private String exclusiveFileType;
    /**
     * @return The ID of the resource.
     * 
     */
    private String id;
    /**
     * @return The type of the file that has web tamper proofing enabled. **Note:** If the value of `mode` is `whitelist`, this parameter is returned.
     * 
     */
    private String inclusiveFileType;
    /**
     * @return The local path to the backup files of the protected directory.
     * 
     */
    private String localBackupDir;
    /**
     * @return The protection mode of web tamper proofing.
     * 
     */
    private String mode;
    /**
     * @return The UUID of the server that has web tamper proofing enabled.
     * 
     */
    private String uuid;

    private GetWebLockConfigsConfig() {}
    /**
     * @return The prevention mode.
     * 
     */
    public String defenceMode() {
        return this.defenceMode;
    }
    /**
     * @return The directory that has web tamper proofing enabled.
     * 
     */
    public String dir() {
        return this.dir;
    }
    /**
     * @return The directory that has web tamper proofing disabled.
     * 
     */
    public String exclusiveDir() {
        return this.exclusiveDir;
    }
    /**
     * @return The file that has web tamper proofing disabled. **Note:** If the value of `mode` is `blacklist`, this parameter is returned.
     * 
     */
    public String exclusiveFile() {
        return this.exclusiveFile;
    }
    /**
     * @return The type of the file that has web tamper proofing disabled. **Note:** If the value of `mode` is `blacklist`, this parameter is returned.
     * 
     */
    public String exclusiveFileType() {
        return this.exclusiveFileType;
    }
    /**
     * @return The ID of the resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The type of the file that has web tamper proofing enabled. **Note:** If the value of `mode` is `whitelist`, this parameter is returned.
     * 
     */
    public String inclusiveFileType() {
        return this.inclusiveFileType;
    }
    /**
     * @return The local path to the backup files of the protected directory.
     * 
     */
    public String localBackupDir() {
        return this.localBackupDir;
    }
    /**
     * @return The protection mode of web tamper proofing.
     * 
     */
    public String mode() {
        return this.mode;
    }
    /**
     * @return The UUID of the server that has web tamper proofing enabled.
     * 
     */
    public String uuid() {
        return this.uuid;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetWebLockConfigsConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String defenceMode;
        private String dir;
        private String exclusiveDir;
        private String exclusiveFile;
        private String exclusiveFileType;
        private String id;
        private String inclusiveFileType;
        private String localBackupDir;
        private String mode;
        private String uuid;
        public Builder() {}
        public Builder(GetWebLockConfigsConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.defenceMode = defaults.defenceMode;
    	      this.dir = defaults.dir;
    	      this.exclusiveDir = defaults.exclusiveDir;
    	      this.exclusiveFile = defaults.exclusiveFile;
    	      this.exclusiveFileType = defaults.exclusiveFileType;
    	      this.id = defaults.id;
    	      this.inclusiveFileType = defaults.inclusiveFileType;
    	      this.localBackupDir = defaults.localBackupDir;
    	      this.mode = defaults.mode;
    	      this.uuid = defaults.uuid;
        }

        @CustomType.Setter
        public Builder defenceMode(String defenceMode) {
            if (defenceMode == null) {
              throw new MissingRequiredPropertyException("GetWebLockConfigsConfig", "defenceMode");
            }
            this.defenceMode = defenceMode;
            return this;
        }
        @CustomType.Setter
        public Builder dir(String dir) {
            if (dir == null) {
              throw new MissingRequiredPropertyException("GetWebLockConfigsConfig", "dir");
            }
            this.dir = dir;
            return this;
        }
        @CustomType.Setter
        public Builder exclusiveDir(String exclusiveDir) {
            if (exclusiveDir == null) {
              throw new MissingRequiredPropertyException("GetWebLockConfigsConfig", "exclusiveDir");
            }
            this.exclusiveDir = exclusiveDir;
            return this;
        }
        @CustomType.Setter
        public Builder exclusiveFile(String exclusiveFile) {
            if (exclusiveFile == null) {
              throw new MissingRequiredPropertyException("GetWebLockConfigsConfig", "exclusiveFile");
            }
            this.exclusiveFile = exclusiveFile;
            return this;
        }
        @CustomType.Setter
        public Builder exclusiveFileType(String exclusiveFileType) {
            if (exclusiveFileType == null) {
              throw new MissingRequiredPropertyException("GetWebLockConfigsConfig", "exclusiveFileType");
            }
            this.exclusiveFileType = exclusiveFileType;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetWebLockConfigsConfig", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder inclusiveFileType(String inclusiveFileType) {
            if (inclusiveFileType == null) {
              throw new MissingRequiredPropertyException("GetWebLockConfigsConfig", "inclusiveFileType");
            }
            this.inclusiveFileType = inclusiveFileType;
            return this;
        }
        @CustomType.Setter
        public Builder localBackupDir(String localBackupDir) {
            if (localBackupDir == null) {
              throw new MissingRequiredPropertyException("GetWebLockConfigsConfig", "localBackupDir");
            }
            this.localBackupDir = localBackupDir;
            return this;
        }
        @CustomType.Setter
        public Builder mode(String mode) {
            if (mode == null) {
              throw new MissingRequiredPropertyException("GetWebLockConfigsConfig", "mode");
            }
            this.mode = mode;
            return this;
        }
        @CustomType.Setter
        public Builder uuid(String uuid) {
            if (uuid == null) {
              throw new MissingRequiredPropertyException("GetWebLockConfigsConfig", "uuid");
            }
            this.uuid = uuid;
            return this;
        }
        public GetWebLockConfigsConfig build() {
            final var _resultValue = new GetWebLockConfigsConfig();
            _resultValue.defenceMode = defenceMode;
            _resultValue.dir = dir;
            _resultValue.exclusiveDir = exclusiveDir;
            _resultValue.exclusiveFile = exclusiveFile;
            _resultValue.exclusiveFileType = exclusiveFileType;
            _resultValue.id = id;
            _resultValue.inclusiveFileType = inclusiveFileType;
            _resultValue.localBackupDir = localBackupDir;
            _resultValue.mode = mode;
            _resultValue.uuid = uuid;
            return _resultValue;
        }
    }
}
