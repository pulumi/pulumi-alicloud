// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.ecs.inputs;

import com.pulumi.alicloud.ecs.inputs.GetEcsDisksOperationLockArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetEcsDisksArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetEcsDisksArgs Empty = new GetEcsDisksArgs();

    /**
     * Other attribute values. Currently, only the incoming value of IOPS is supported, which means to query the IOPS upper limit of the current disk.
     * 
     */
    @Import(name="additionalAttributes")
    private @Nullable Output<List<String>> additionalAttributes;

    /**
     * @return Other attribute values. Currently, only the incoming value of IOPS is supported, which means to query the IOPS upper limit of the current disk.
     * 
     */
    public Optional<Output<List<String>>> additionalAttributes() {
        return Optional.ofNullable(this.additionalAttributes);
    }

    /**
     * Query cloud disks based on the automatic snapshot policy ID.
     * 
     */
    @Import(name="autoSnapshotPolicyId")
    private @Nullable Output<String> autoSnapshotPolicyId;

    /**
     * @return Query cloud disks based on the automatic snapshot policy ID.
     * 
     */
    public Optional<Output<String>> autoSnapshotPolicyId() {
        return Optional.ofNullable(this.autoSnapshotPolicyId);
    }

    /**
     * Field `availability_zone` has been deprecated from provider version 1.122.0. New field `zone_id` instead.
     * 
     * @deprecated
     * Field &#39;availability_zone&#39; has been deprecated from provider version 1.122.0. New field &#39;zone_id&#39; instead
     * 
     */
    @Deprecated /* Field 'availability_zone' has been deprecated from provider version 1.122.0. New field 'zone_id' instead */
    @Import(name="availabilityZone")
    private @Nullable Output<String> availabilityZone;

    /**
     * @return Field `availability_zone` has been deprecated from provider version 1.122.0. New field `zone_id` instead.
     * 
     * @deprecated
     * Field &#39;availability_zone&#39; has been deprecated from provider version 1.122.0. New field &#39;zone_id&#39; instead
     * 
     */
    @Deprecated /* Field 'availability_zone' has been deprecated from provider version 1.122.0. New field 'zone_id' instead */
    public Optional<Output<String>> availabilityZone() {
        return Optional.ofNullable(this.availabilityZone);
    }

    /**
     * Disk category. Valid values: `cloud`, `cloud_efficiency`, `cloud_essd`, `cloud_ssd`, `ephemeral_ssd`, `cloud_auto`, `cloud_essd_entry`.
     * 
     */
    @Import(name="category")
    private @Nullable Output<String> category;

    /**
     * @return Disk category. Valid values: `cloud`, `cloud_efficiency`, `cloud_essd`, `cloud_ssd`, `ephemeral_ssd`, `cloud_auto`, `cloud_essd_entry`.
     * 
     */
    public Optional<Output<String>> category() {
        return Optional.ofNullable(this.category);
    }

    /**
     * Indicates whether the automatic snapshot is deleted when the disk is released.
     * 
     */
    @Import(name="deleteAutoSnapshot")
    private @Nullable Output<Boolean> deleteAutoSnapshot;

    /**
     * @return Indicates whether the automatic snapshot is deleted when the disk is released.
     * 
     */
    public Optional<Output<Boolean>> deleteAutoSnapshot() {
        return Optional.ofNullable(this.deleteAutoSnapshot);
    }

    /**
     * Indicates whether the disk is released together with the instance.
     * 
     */
    @Import(name="deleteWithInstance")
    private @Nullable Output<Boolean> deleteWithInstance;

    /**
     * @return Indicates whether the disk is released together with the instance.
     * 
     */
    public Optional<Output<Boolean>> deleteWithInstance() {
        return Optional.ofNullable(this.deleteWithInstance);
    }

    /**
     * The disk name.
     * 
     */
    @Import(name="diskName")
    private @Nullable Output<String> diskName;

    /**
     * @return The disk name.
     * 
     */
    public Optional<Output<String>> diskName() {
        return Optional.ofNullable(this.diskName);
    }

    /**
     * The disk type.
     * 
     */
    @Import(name="diskType")
    private @Nullable Output<String> diskType;

    /**
     * @return The disk type.
     * 
     */
    public Optional<Output<String>> diskType() {
        return Optional.ofNullable(this.diskType);
    }

    /**
     * Specifies whether to check the validity of the request without actually making the request.request Default value: false. Valid values:
     * 
     */
    @Import(name="dryRun")
    private @Nullable Output<Boolean> dryRun;

    /**
     * @return Specifies whether to check the validity of the request without actually making the request.request Default value: false. Valid values:
     * 
     */
    public Optional<Output<Boolean>> dryRun() {
        return Optional.ofNullable(this.dryRun);
    }

    /**
     * Indicates whether the automatic snapshot is deleted when the disk is released.
     * 
     */
    @Import(name="enableAutoSnapshot")
    private @Nullable Output<Boolean> enableAutoSnapshot;

    /**
     * @return Indicates whether the automatic snapshot is deleted when the disk is released.
     * 
     */
    public Optional<Output<Boolean>> enableAutoSnapshot() {
        return Optional.ofNullable(this.enableAutoSnapshot);
    }

    /**
     * Whether the cloud disk has an automatic snapshot policy
     * 
     */
    @Import(name="enableAutomatedSnapshotPolicy")
    private @Nullable Output<Boolean> enableAutomatedSnapshotPolicy;

    /**
     * @return Whether the cloud disk has an automatic snapshot policy
     * 
     */
    public Optional<Output<Boolean>> enableAutomatedSnapshotPolicy() {
        return Optional.ofNullable(this.enableAutomatedSnapshotPolicy);
    }

    /**
     * Whether it is shared block storage.
     * 
     */
    @Import(name="enableShared")
    private @Nullable Output<Boolean> enableShared;

    /**
     * @return Whether it is shared block storage.
     * 
     */
    public Optional<Output<Boolean>> enableShared() {
        return Optional.ofNullable(this.enableShared);
    }

    /**
     * Indicate whether the disk is encrypted or not. Possible values: `on` and `off`.
     * 
     */
    @Import(name="encrypted")
    private @Nullable Output<String> encrypted;

    /**
     * @return Indicate whether the disk is encrypted or not. Possible values: `on` and `off`.
     * 
     */
    public Optional<Output<String>> encrypted() {
        return Optional.ofNullable(this.encrypted);
    }

    /**
     * A list of Disk IDs.
     * 
     */
    @Import(name="ids")
    private @Nullable Output<List<String>> ids;

    /**
     * @return A list of Disk IDs.
     * 
     */
    public Optional<Output<List<String>>> ids() {
        return Optional.ofNullable(this.ids);
    }

    /**
     * Filter the results by the specified ECS instance ID.
     * 
     */
    @Import(name="instanceId")
    private @Nullable Output<String> instanceId;

    /**
     * @return Filter the results by the specified ECS instance ID.
     * 
     */
    public Optional<Output<String>> instanceId() {
        return Optional.ofNullable(this.instanceId);
    }

    /**
     * The kms key id.
     * 
     */
    @Import(name="kmsKeyId")
    private @Nullable Output<String> kmsKeyId;

    /**
     * @return The kms key id.
     * 
     */
    public Optional<Output<String>> kmsKeyId() {
        return Optional.ofNullable(this.kmsKeyId);
    }

    /**
     * A regex string to filter results by Disk name.
     * 
     */
    @Import(name="nameRegex")
    private @Nullable Output<String> nameRegex;

    /**
     * @return A regex string to filter results by Disk name.
     * 
     */
    public Optional<Output<String>> nameRegex() {
        return Optional.ofNullable(this.nameRegex);
    }

    @Import(name="operationLocks")
    private @Nullable Output<List<GetEcsDisksOperationLockArgs>> operationLocks;

    public Optional<Output<List<GetEcsDisksOperationLockArgs>>> operationLocks() {
        return Optional.ofNullable(this.operationLocks);
    }

    /**
     * File name where to save data source results (after running `pulumi preview`).
     * 
     */
    @Import(name="outputFile")
    private @Nullable Output<String> outputFile;

    /**
     * @return File name where to save data source results (after running `pulumi preview`).
     * 
     */
    public Optional<Output<String>> outputFile() {
        return Optional.ofNullable(this.outputFile);
    }

    @Import(name="pageNumber")
    private @Nullable Output<Integer> pageNumber;

    public Optional<Output<Integer>> pageNumber() {
        return Optional.ofNullable(this.pageNumber);
    }

    @Import(name="pageSize")
    private @Nullable Output<Integer> pageSize;

    public Optional<Output<Integer>> pageSize() {
        return Optional.ofNullable(this.pageSize);
    }

    /**
     * Payment method for disk. Valid Values: `PayAsYouGo`, `Subscription`.
     * 
     */
    @Import(name="paymentType")
    private @Nullable Output<String> paymentType;

    /**
     * @return Payment method for disk. Valid Values: `PayAsYouGo`, `Subscription`.
     * 
     */
    public Optional<Output<String>> paymentType() {
        return Optional.ofNullable(this.paymentType);
    }

    /**
     * Whether the cloud disk or local disk supports uninstallation.
     * 
     */
    @Import(name="portable")
    private @Nullable Output<Boolean> portable;

    /**
     * @return Whether the cloud disk or local disk supports uninstallation.
     * 
     */
    public Optional<Output<Boolean>> portable() {
        return Optional.ofNullable(this.portable);
    }

    /**
     * The Id of resource group which the disk belongs.
     * 
     */
    @Import(name="resourceGroupId")
    private @Nullable Output<String> resourceGroupId;

    /**
     * @return The Id of resource group which the disk belongs.
     * 
     */
    public Optional<Output<String>> resourceGroupId() {
        return Optional.ofNullable(this.resourceGroupId);
    }

    /**
     * The source snapshot id.
     * 
     */
    @Import(name="snapshotId")
    private @Nullable Output<String> snapshotId;

    /**
     * @return The source snapshot id.
     * 
     */
    public Optional<Output<String>> snapshotId() {
        return Optional.ofNullable(this.snapshotId);
    }

    /**
     * The status of disk.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return The status of disk.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * A map of tags assigned to the disks.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,Object>> tags;

    /**
     * @return A map of tags assigned to the disks.
     * 
     */
    public Optional<Output<Map<String,Object>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * Field `type` has been deprecated from provider version 1.122.0. New field `disk_type` instead.
     * 
     * @deprecated
     * Field &#39;type&#39; has been deprecated from provider version 1.122.0. New field &#39;disk_type&#39; instead.
     * 
     */
    @Deprecated /* Field 'type' has been deprecated from provider version 1.122.0. New field 'disk_type' instead. */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return Field `type` has been deprecated from provider version 1.122.0. New field `disk_type` instead.
     * 
     * @deprecated
     * Field &#39;type&#39; has been deprecated from provider version 1.122.0. New field &#39;disk_type&#39; instead.
     * 
     */
    @Deprecated /* Field 'type' has been deprecated from provider version 1.122.0. New field 'disk_type' instead. */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    /**
     * ID of the free zone to which the disk belongs.
     * 
     */
    @Import(name="zoneId")
    private @Nullable Output<String> zoneId;

    /**
     * @return ID of the free zone to which the disk belongs.
     * 
     */
    public Optional<Output<String>> zoneId() {
        return Optional.ofNullable(this.zoneId);
    }

    private GetEcsDisksArgs() {}

    private GetEcsDisksArgs(GetEcsDisksArgs $) {
        this.additionalAttributes = $.additionalAttributes;
        this.autoSnapshotPolicyId = $.autoSnapshotPolicyId;
        this.availabilityZone = $.availabilityZone;
        this.category = $.category;
        this.deleteAutoSnapshot = $.deleteAutoSnapshot;
        this.deleteWithInstance = $.deleteWithInstance;
        this.diskName = $.diskName;
        this.diskType = $.diskType;
        this.dryRun = $.dryRun;
        this.enableAutoSnapshot = $.enableAutoSnapshot;
        this.enableAutomatedSnapshotPolicy = $.enableAutomatedSnapshotPolicy;
        this.enableShared = $.enableShared;
        this.encrypted = $.encrypted;
        this.ids = $.ids;
        this.instanceId = $.instanceId;
        this.kmsKeyId = $.kmsKeyId;
        this.nameRegex = $.nameRegex;
        this.operationLocks = $.operationLocks;
        this.outputFile = $.outputFile;
        this.pageNumber = $.pageNumber;
        this.pageSize = $.pageSize;
        this.paymentType = $.paymentType;
        this.portable = $.portable;
        this.resourceGroupId = $.resourceGroupId;
        this.snapshotId = $.snapshotId;
        this.status = $.status;
        this.tags = $.tags;
        this.type = $.type;
        this.zoneId = $.zoneId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetEcsDisksArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetEcsDisksArgs $;

        public Builder() {
            $ = new GetEcsDisksArgs();
        }

        public Builder(GetEcsDisksArgs defaults) {
            $ = new GetEcsDisksArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param additionalAttributes Other attribute values. Currently, only the incoming value of IOPS is supported, which means to query the IOPS upper limit of the current disk.
         * 
         * @return builder
         * 
         */
        public Builder additionalAttributes(@Nullable Output<List<String>> additionalAttributes) {
            $.additionalAttributes = additionalAttributes;
            return this;
        }

        /**
         * @param additionalAttributes Other attribute values. Currently, only the incoming value of IOPS is supported, which means to query the IOPS upper limit of the current disk.
         * 
         * @return builder
         * 
         */
        public Builder additionalAttributes(List<String> additionalAttributes) {
            return additionalAttributes(Output.of(additionalAttributes));
        }

        /**
         * @param additionalAttributes Other attribute values. Currently, only the incoming value of IOPS is supported, which means to query the IOPS upper limit of the current disk.
         * 
         * @return builder
         * 
         */
        public Builder additionalAttributes(String... additionalAttributes) {
            return additionalAttributes(List.of(additionalAttributes));
        }

        /**
         * @param autoSnapshotPolicyId Query cloud disks based on the automatic snapshot policy ID.
         * 
         * @return builder
         * 
         */
        public Builder autoSnapshotPolicyId(@Nullable Output<String> autoSnapshotPolicyId) {
            $.autoSnapshotPolicyId = autoSnapshotPolicyId;
            return this;
        }

        /**
         * @param autoSnapshotPolicyId Query cloud disks based on the automatic snapshot policy ID.
         * 
         * @return builder
         * 
         */
        public Builder autoSnapshotPolicyId(String autoSnapshotPolicyId) {
            return autoSnapshotPolicyId(Output.of(autoSnapshotPolicyId));
        }

        /**
         * @param availabilityZone Field `availability_zone` has been deprecated from provider version 1.122.0. New field `zone_id` instead.
         * 
         * @return builder
         * 
         * @deprecated
         * Field &#39;availability_zone&#39; has been deprecated from provider version 1.122.0. New field &#39;zone_id&#39; instead
         * 
         */
        @Deprecated /* Field 'availability_zone' has been deprecated from provider version 1.122.0. New field 'zone_id' instead */
        public Builder availabilityZone(@Nullable Output<String> availabilityZone) {
            $.availabilityZone = availabilityZone;
            return this;
        }

        /**
         * @param availabilityZone Field `availability_zone` has been deprecated from provider version 1.122.0. New field `zone_id` instead.
         * 
         * @return builder
         * 
         * @deprecated
         * Field &#39;availability_zone&#39; has been deprecated from provider version 1.122.0. New field &#39;zone_id&#39; instead
         * 
         */
        @Deprecated /* Field 'availability_zone' has been deprecated from provider version 1.122.0. New field 'zone_id' instead */
        public Builder availabilityZone(String availabilityZone) {
            return availabilityZone(Output.of(availabilityZone));
        }

        /**
         * @param category Disk category. Valid values: `cloud`, `cloud_efficiency`, `cloud_essd`, `cloud_ssd`, `ephemeral_ssd`, `cloud_auto`, `cloud_essd_entry`.
         * 
         * @return builder
         * 
         */
        public Builder category(@Nullable Output<String> category) {
            $.category = category;
            return this;
        }

        /**
         * @param category Disk category. Valid values: `cloud`, `cloud_efficiency`, `cloud_essd`, `cloud_ssd`, `ephemeral_ssd`, `cloud_auto`, `cloud_essd_entry`.
         * 
         * @return builder
         * 
         */
        public Builder category(String category) {
            return category(Output.of(category));
        }

        /**
         * @param deleteAutoSnapshot Indicates whether the automatic snapshot is deleted when the disk is released.
         * 
         * @return builder
         * 
         */
        public Builder deleteAutoSnapshot(@Nullable Output<Boolean> deleteAutoSnapshot) {
            $.deleteAutoSnapshot = deleteAutoSnapshot;
            return this;
        }

        /**
         * @param deleteAutoSnapshot Indicates whether the automatic snapshot is deleted when the disk is released.
         * 
         * @return builder
         * 
         */
        public Builder deleteAutoSnapshot(Boolean deleteAutoSnapshot) {
            return deleteAutoSnapshot(Output.of(deleteAutoSnapshot));
        }

        /**
         * @param deleteWithInstance Indicates whether the disk is released together with the instance.
         * 
         * @return builder
         * 
         */
        public Builder deleteWithInstance(@Nullable Output<Boolean> deleteWithInstance) {
            $.deleteWithInstance = deleteWithInstance;
            return this;
        }

        /**
         * @param deleteWithInstance Indicates whether the disk is released together with the instance.
         * 
         * @return builder
         * 
         */
        public Builder deleteWithInstance(Boolean deleteWithInstance) {
            return deleteWithInstance(Output.of(deleteWithInstance));
        }

        /**
         * @param diskName The disk name.
         * 
         * @return builder
         * 
         */
        public Builder diskName(@Nullable Output<String> diskName) {
            $.diskName = diskName;
            return this;
        }

        /**
         * @param diskName The disk name.
         * 
         * @return builder
         * 
         */
        public Builder diskName(String diskName) {
            return diskName(Output.of(diskName));
        }

        /**
         * @param diskType The disk type.
         * 
         * @return builder
         * 
         */
        public Builder diskType(@Nullable Output<String> diskType) {
            $.diskType = diskType;
            return this;
        }

        /**
         * @param diskType The disk type.
         * 
         * @return builder
         * 
         */
        public Builder diskType(String diskType) {
            return diskType(Output.of(diskType));
        }

        /**
         * @param dryRun Specifies whether to check the validity of the request without actually making the request.request Default value: false. Valid values:
         * 
         * @return builder
         * 
         */
        public Builder dryRun(@Nullable Output<Boolean> dryRun) {
            $.dryRun = dryRun;
            return this;
        }

        /**
         * @param dryRun Specifies whether to check the validity of the request without actually making the request.request Default value: false. Valid values:
         * 
         * @return builder
         * 
         */
        public Builder dryRun(Boolean dryRun) {
            return dryRun(Output.of(dryRun));
        }

        /**
         * @param enableAutoSnapshot Indicates whether the automatic snapshot is deleted when the disk is released.
         * 
         * @return builder
         * 
         */
        public Builder enableAutoSnapshot(@Nullable Output<Boolean> enableAutoSnapshot) {
            $.enableAutoSnapshot = enableAutoSnapshot;
            return this;
        }

        /**
         * @param enableAutoSnapshot Indicates whether the automatic snapshot is deleted when the disk is released.
         * 
         * @return builder
         * 
         */
        public Builder enableAutoSnapshot(Boolean enableAutoSnapshot) {
            return enableAutoSnapshot(Output.of(enableAutoSnapshot));
        }

        /**
         * @param enableAutomatedSnapshotPolicy Whether the cloud disk has an automatic snapshot policy
         * 
         * @return builder
         * 
         */
        public Builder enableAutomatedSnapshotPolicy(@Nullable Output<Boolean> enableAutomatedSnapshotPolicy) {
            $.enableAutomatedSnapshotPolicy = enableAutomatedSnapshotPolicy;
            return this;
        }

        /**
         * @param enableAutomatedSnapshotPolicy Whether the cloud disk has an automatic snapshot policy
         * 
         * @return builder
         * 
         */
        public Builder enableAutomatedSnapshotPolicy(Boolean enableAutomatedSnapshotPolicy) {
            return enableAutomatedSnapshotPolicy(Output.of(enableAutomatedSnapshotPolicy));
        }

        /**
         * @param enableShared Whether it is shared block storage.
         * 
         * @return builder
         * 
         */
        public Builder enableShared(@Nullable Output<Boolean> enableShared) {
            $.enableShared = enableShared;
            return this;
        }

        /**
         * @param enableShared Whether it is shared block storage.
         * 
         * @return builder
         * 
         */
        public Builder enableShared(Boolean enableShared) {
            return enableShared(Output.of(enableShared));
        }

        /**
         * @param encrypted Indicate whether the disk is encrypted or not. Possible values: `on` and `off`.
         * 
         * @return builder
         * 
         */
        public Builder encrypted(@Nullable Output<String> encrypted) {
            $.encrypted = encrypted;
            return this;
        }

        /**
         * @param encrypted Indicate whether the disk is encrypted or not. Possible values: `on` and `off`.
         * 
         * @return builder
         * 
         */
        public Builder encrypted(String encrypted) {
            return encrypted(Output.of(encrypted));
        }

        /**
         * @param ids A list of Disk IDs.
         * 
         * @return builder
         * 
         */
        public Builder ids(@Nullable Output<List<String>> ids) {
            $.ids = ids;
            return this;
        }

        /**
         * @param ids A list of Disk IDs.
         * 
         * @return builder
         * 
         */
        public Builder ids(List<String> ids) {
            return ids(Output.of(ids));
        }

        /**
         * @param ids A list of Disk IDs.
         * 
         * @return builder
         * 
         */
        public Builder ids(String... ids) {
            return ids(List.of(ids));
        }

        /**
         * @param instanceId Filter the results by the specified ECS instance ID.
         * 
         * @return builder
         * 
         */
        public Builder instanceId(@Nullable Output<String> instanceId) {
            $.instanceId = instanceId;
            return this;
        }

        /**
         * @param instanceId Filter the results by the specified ECS instance ID.
         * 
         * @return builder
         * 
         */
        public Builder instanceId(String instanceId) {
            return instanceId(Output.of(instanceId));
        }

        /**
         * @param kmsKeyId The kms key id.
         * 
         * @return builder
         * 
         */
        public Builder kmsKeyId(@Nullable Output<String> kmsKeyId) {
            $.kmsKeyId = kmsKeyId;
            return this;
        }

        /**
         * @param kmsKeyId The kms key id.
         * 
         * @return builder
         * 
         */
        public Builder kmsKeyId(String kmsKeyId) {
            return kmsKeyId(Output.of(kmsKeyId));
        }

        /**
         * @param nameRegex A regex string to filter results by Disk name.
         * 
         * @return builder
         * 
         */
        public Builder nameRegex(@Nullable Output<String> nameRegex) {
            $.nameRegex = nameRegex;
            return this;
        }

        /**
         * @param nameRegex A regex string to filter results by Disk name.
         * 
         * @return builder
         * 
         */
        public Builder nameRegex(String nameRegex) {
            return nameRegex(Output.of(nameRegex));
        }

        public Builder operationLocks(@Nullable Output<List<GetEcsDisksOperationLockArgs>> operationLocks) {
            $.operationLocks = operationLocks;
            return this;
        }

        public Builder operationLocks(List<GetEcsDisksOperationLockArgs> operationLocks) {
            return operationLocks(Output.of(operationLocks));
        }

        public Builder operationLocks(GetEcsDisksOperationLockArgs... operationLocks) {
            return operationLocks(List.of(operationLocks));
        }

        /**
         * @param outputFile File name where to save data source results (after running `pulumi preview`).
         * 
         * @return builder
         * 
         */
        public Builder outputFile(@Nullable Output<String> outputFile) {
            $.outputFile = outputFile;
            return this;
        }

        /**
         * @param outputFile File name where to save data source results (after running `pulumi preview`).
         * 
         * @return builder
         * 
         */
        public Builder outputFile(String outputFile) {
            return outputFile(Output.of(outputFile));
        }

        public Builder pageNumber(@Nullable Output<Integer> pageNumber) {
            $.pageNumber = pageNumber;
            return this;
        }

        public Builder pageNumber(Integer pageNumber) {
            return pageNumber(Output.of(pageNumber));
        }

        public Builder pageSize(@Nullable Output<Integer> pageSize) {
            $.pageSize = pageSize;
            return this;
        }

        public Builder pageSize(Integer pageSize) {
            return pageSize(Output.of(pageSize));
        }

        /**
         * @param paymentType Payment method for disk. Valid Values: `PayAsYouGo`, `Subscription`.
         * 
         * @return builder
         * 
         */
        public Builder paymentType(@Nullable Output<String> paymentType) {
            $.paymentType = paymentType;
            return this;
        }

        /**
         * @param paymentType Payment method for disk. Valid Values: `PayAsYouGo`, `Subscription`.
         * 
         * @return builder
         * 
         */
        public Builder paymentType(String paymentType) {
            return paymentType(Output.of(paymentType));
        }

        /**
         * @param portable Whether the cloud disk or local disk supports uninstallation.
         * 
         * @return builder
         * 
         */
        public Builder portable(@Nullable Output<Boolean> portable) {
            $.portable = portable;
            return this;
        }

        /**
         * @param portable Whether the cloud disk or local disk supports uninstallation.
         * 
         * @return builder
         * 
         */
        public Builder portable(Boolean portable) {
            return portable(Output.of(portable));
        }

        /**
         * @param resourceGroupId The Id of resource group which the disk belongs.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupId(@Nullable Output<String> resourceGroupId) {
            $.resourceGroupId = resourceGroupId;
            return this;
        }

        /**
         * @param resourceGroupId The Id of resource group which the disk belongs.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupId(String resourceGroupId) {
            return resourceGroupId(Output.of(resourceGroupId));
        }

        /**
         * @param snapshotId The source snapshot id.
         * 
         * @return builder
         * 
         */
        public Builder snapshotId(@Nullable Output<String> snapshotId) {
            $.snapshotId = snapshotId;
            return this;
        }

        /**
         * @param snapshotId The source snapshot id.
         * 
         * @return builder
         * 
         */
        public Builder snapshotId(String snapshotId) {
            return snapshotId(Output.of(snapshotId));
        }

        /**
         * @param status The status of disk.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status The status of disk.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param tags A map of tags assigned to the disks.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,Object>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags A map of tags assigned to the disks.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,Object> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param type Field `type` has been deprecated from provider version 1.122.0. New field `disk_type` instead.
         * 
         * @return builder
         * 
         * @deprecated
         * Field &#39;type&#39; has been deprecated from provider version 1.122.0. New field &#39;disk_type&#39; instead.
         * 
         */
        @Deprecated /* Field 'type' has been deprecated from provider version 1.122.0. New field 'disk_type' instead. */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Field `type` has been deprecated from provider version 1.122.0. New field `disk_type` instead.
         * 
         * @return builder
         * 
         * @deprecated
         * Field &#39;type&#39; has been deprecated from provider version 1.122.0. New field &#39;disk_type&#39; instead.
         * 
         */
        @Deprecated /* Field 'type' has been deprecated from provider version 1.122.0. New field 'disk_type' instead. */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param zoneId ID of the free zone to which the disk belongs.
         * 
         * @return builder
         * 
         */
        public Builder zoneId(@Nullable Output<String> zoneId) {
            $.zoneId = zoneId;
            return this;
        }

        /**
         * @param zoneId ID of the free zone to which the disk belongs.
         * 
         * @return builder
         * 
         */
        public Builder zoneId(String zoneId) {
            return zoneId(Output.of(zoneId));
        }

        public GetEcsDisksArgs build() {
            return $;
        }
    }

}
