// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.log.inputs;

import com.pulumi.alicloud.log.inputs.OssShipperParquetConfigArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class OssShipperState extends com.pulumi.resources.ResourceArgs {

    public static final OssShipperState Empty = new OssShipperState();

    /**
     * How often is it delivered every interval.
     * 
     */
    @Import(name="bufferInterval")
    private @Nullable Output<Integer> bufferInterval;

    /**
     * @return How often is it delivered every interval.
     * 
     */
    public Optional<Output<Integer>> bufferInterval() {
        return Optional.ofNullable(this.bufferInterval);
    }

    /**
     * Automatically control the creation interval of delivery tasks and set the upper limit of an OSS object size (calculated in uncompressed), unit: `MB`.
     * 
     */
    @Import(name="bufferSize")
    private @Nullable Output<Integer> bufferSize;

    /**
     * @return Automatically control the creation interval of delivery tasks and set the upper limit of an OSS object size (calculated in uncompressed), unit: `MB`.
     * 
     */
    public Optional<Output<Integer>> bufferSize() {
        return Optional.ofNullable(this.bufferSize);
    }

    /**
     * OSS data storage compression method, support: none, snappy. Among them, none means that the original data is not compressed, and snappy means that the data is compressed using the snappy algorithm, which can reduce the storage space usage of the `OSS Bucket`.
     * 
     */
    @Import(name="compressType")
    private @Nullable Output<String> compressType;

    /**
     * @return OSS data storage compression method, support: none, snappy. Among them, none means that the original data is not compressed, and snappy means that the data is compressed using the snappy algorithm, which can reduce the storage space usage of the `OSS Bucket`.
     * 
     */
    public Optional<Output<String>> compressType() {
        return Optional.ofNullable(this.compressType);
    }

    @Import(name="csvConfigColumns")
    private @Nullable Output<List<String>> csvConfigColumns;

    public Optional<Output<List<String>>> csvConfigColumns() {
        return Optional.ofNullable(this.csvConfigColumns);
    }

    @Import(name="csvConfigDelimiter")
    private @Nullable Output<String> csvConfigDelimiter;

    public Optional<Output<String>> csvConfigDelimiter() {
        return Optional.ofNullable(this.csvConfigDelimiter);
    }

    @Import(name="csvConfigHeader")
    private @Nullable Output<Boolean> csvConfigHeader;

    public Optional<Output<Boolean>> csvConfigHeader() {
        return Optional.ofNullable(this.csvConfigHeader);
    }

    @Import(name="csvConfigLinefeed")
    private @Nullable Output<String> csvConfigLinefeed;

    public Optional<Output<String>> csvConfigLinefeed() {
        return Optional.ofNullable(this.csvConfigLinefeed);
    }

    @Import(name="csvConfigNullidentifier")
    private @Nullable Output<String> csvConfigNullidentifier;

    public Optional<Output<String>> csvConfigNullidentifier() {
        return Optional.ofNullable(this.csvConfigNullidentifier);
    }

    @Import(name="csvConfigQuote")
    private @Nullable Output<String> csvConfigQuote;

    public Optional<Output<String>> csvConfigQuote() {
        return Optional.ofNullable(this.csvConfigQuote);
    }

    /**
     * Storage format, only supports three types: `json`, `parquet`, `csv`.
     * **According to the different format, please select the following parameters**
     * - format = `json`
     *   `json_enable_tag` - (Optional) Whether to deliver the label.
     * - format = `csv`
     *   `csv_config_delimiter` - (Optional) Separator configuration in csv configuration format.
     *   `csv_config_columns` - (Optional) Field configuration in csv configuration format.
     *   `csv_config_nullidentifier` - (Optional) Invalid field content.
     *   `csv_config_quote` - (Optional) Escape character under csv configuration.
     *   `csv_config_header` - (Optional) Indicates whether to write the field name to the CSV file, the default value is `false`.
     *   `csv_config_linefeed` - (Optional) lineFeed in csv configuration.
     * - format = `parquet`
     *   `parquet_config` - (Optional) Configure to use parquet storage format.
     *   `name` - (Required) The name of the key.
     *   `type` - (Required) Type of configuration name.
     * 
     */
    @Import(name="format")
    private @Nullable Output<String> format;

    /**
     * @return Storage format, only supports three types: `json`, `parquet`, `csv`.
     * **According to the different format, please select the following parameters**
     * - format = `json`
     *   `json_enable_tag` - (Optional) Whether to deliver the label.
     * - format = `csv`
     *   `csv_config_delimiter` - (Optional) Separator configuration in csv configuration format.
     *   `csv_config_columns` - (Optional) Field configuration in csv configuration format.
     *   `csv_config_nullidentifier` - (Optional) Invalid field content.
     *   `csv_config_quote` - (Optional) Escape character under csv configuration.
     *   `csv_config_header` - (Optional) Indicates whether to write the field name to the CSV file, the default value is `false`.
     *   `csv_config_linefeed` - (Optional) lineFeed in csv configuration.
     * - format = `parquet`
     *   `parquet_config` - (Optional) Configure to use parquet storage format.
     *   `name` - (Required) The name of the key.
     *   `type` - (Required) Type of configuration name.
     * 
     */
    public Optional<Output<String>> format() {
        return Optional.ofNullable(this.format);
    }

    @Import(name="jsonEnableTag")
    private @Nullable Output<Boolean> jsonEnableTag;

    public Optional<Output<Boolean>> jsonEnableTag() {
        return Optional.ofNullable(this.jsonEnableTag);
    }

    /**
     * The name of the log logstore.
     * 
     */
    @Import(name="logstoreName")
    private @Nullable Output<String> logstoreName;

    /**
     * @return The name of the log logstore.
     * 
     */
    public Optional<Output<String>> logstoreName() {
        return Optional.ofNullable(this.logstoreName);
    }

    /**
     * The name of the oss bucket.
     * 
     */
    @Import(name="ossBucket")
    private @Nullable Output<String> ossBucket;

    /**
     * @return The name of the oss bucket.
     * 
     */
    public Optional<Output<String>> ossBucket() {
        return Optional.ofNullable(this.ossBucket);
    }

    /**
     * The data synchronized from Log Service to OSS will be stored in this directory of Bucket.
     * 
     */
    @Import(name="ossPrefix")
    private @Nullable Output<String> ossPrefix;

    /**
     * @return The data synchronized from Log Service to OSS will be stored in this directory of Bucket.
     * 
     */
    public Optional<Output<String>> ossPrefix() {
        return Optional.ofNullable(this.ossPrefix);
    }

    @Import(name="parquetConfigs")
    private @Nullable Output<List<OssShipperParquetConfigArgs>> parquetConfigs;

    public Optional<Output<List<OssShipperParquetConfigArgs>>> parquetConfigs() {
        return Optional.ofNullable(this.parquetConfigs);
    }

    /**
     * The OSS Bucket directory is dynamically generated according to the creation time of the shipper task, it cannot start with a forward slash `/`, the default value is `%Y/%m/%d/%H/%M`.
     * 
     */
    @Import(name="pathFormat")
    private @Nullable Output<String> pathFormat;

    /**
     * @return The OSS Bucket directory is dynamically generated according to the creation time of the shipper task, it cannot start with a forward slash `/`, the default value is `%Y/%m/%d/%H/%M`.
     * 
     */
    public Optional<Output<String>> pathFormat() {
        return Optional.ofNullable(this.pathFormat);
    }

    /**
     * The name of the log project. It is the only in one Alicloud account.
     * 
     */
    @Import(name="projectName")
    private @Nullable Output<String> projectName;

    /**
     * @return The name of the log project. It is the only in one Alicloud account.
     * 
     */
    public Optional<Output<String>> projectName() {
        return Optional.ofNullable(this.projectName);
    }

    /**
     * Used for access control, the OSS Bucket owner creates the role mark, such as `acs:ram::13234:role/logrole`
     * 
     */
    @Import(name="roleArn")
    private @Nullable Output<String> roleArn;

    /**
     * @return Used for access control, the OSS Bucket owner creates the role mark, such as `acs:ram::13234:role/logrole`
     * 
     */
    public Optional<Output<String>> roleArn() {
        return Optional.ofNullable(this.roleArn);
    }

    /**
     * Delivery configuration name, it can only contain lowercase letters, numbers, dashes `-` and underscores `_`. It must start and end with lowercase letters or numbers, and the name must be 2 to 128 characters long.
     * 
     */
    @Import(name="shipperName")
    private @Nullable Output<String> shipperName;

    /**
     * @return Delivery configuration name, it can only contain lowercase letters, numbers, dashes `-` and underscores `_`. It must start and end with lowercase letters or numbers, and the name must be 2 to 128 characters long.
     * 
     */
    public Optional<Output<String>> shipperName() {
        return Optional.ofNullable(this.shipperName);
    }

    private OssShipperState() {}

    private OssShipperState(OssShipperState $) {
        this.bufferInterval = $.bufferInterval;
        this.bufferSize = $.bufferSize;
        this.compressType = $.compressType;
        this.csvConfigColumns = $.csvConfigColumns;
        this.csvConfigDelimiter = $.csvConfigDelimiter;
        this.csvConfigHeader = $.csvConfigHeader;
        this.csvConfigLinefeed = $.csvConfigLinefeed;
        this.csvConfigNullidentifier = $.csvConfigNullidentifier;
        this.csvConfigQuote = $.csvConfigQuote;
        this.format = $.format;
        this.jsonEnableTag = $.jsonEnableTag;
        this.logstoreName = $.logstoreName;
        this.ossBucket = $.ossBucket;
        this.ossPrefix = $.ossPrefix;
        this.parquetConfigs = $.parquetConfigs;
        this.pathFormat = $.pathFormat;
        this.projectName = $.projectName;
        this.roleArn = $.roleArn;
        this.shipperName = $.shipperName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(OssShipperState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private OssShipperState $;

        public Builder() {
            $ = new OssShipperState();
        }

        public Builder(OssShipperState defaults) {
            $ = new OssShipperState(Objects.requireNonNull(defaults));
        }

        /**
         * @param bufferInterval How often is it delivered every interval.
         * 
         * @return builder
         * 
         */
        public Builder bufferInterval(@Nullable Output<Integer> bufferInterval) {
            $.bufferInterval = bufferInterval;
            return this;
        }

        /**
         * @param bufferInterval How often is it delivered every interval.
         * 
         * @return builder
         * 
         */
        public Builder bufferInterval(Integer bufferInterval) {
            return bufferInterval(Output.of(bufferInterval));
        }

        /**
         * @param bufferSize Automatically control the creation interval of delivery tasks and set the upper limit of an OSS object size (calculated in uncompressed), unit: `MB`.
         * 
         * @return builder
         * 
         */
        public Builder bufferSize(@Nullable Output<Integer> bufferSize) {
            $.bufferSize = bufferSize;
            return this;
        }

        /**
         * @param bufferSize Automatically control the creation interval of delivery tasks and set the upper limit of an OSS object size (calculated in uncompressed), unit: `MB`.
         * 
         * @return builder
         * 
         */
        public Builder bufferSize(Integer bufferSize) {
            return bufferSize(Output.of(bufferSize));
        }

        /**
         * @param compressType OSS data storage compression method, support: none, snappy. Among them, none means that the original data is not compressed, and snappy means that the data is compressed using the snappy algorithm, which can reduce the storage space usage of the `OSS Bucket`.
         * 
         * @return builder
         * 
         */
        public Builder compressType(@Nullable Output<String> compressType) {
            $.compressType = compressType;
            return this;
        }

        /**
         * @param compressType OSS data storage compression method, support: none, snappy. Among them, none means that the original data is not compressed, and snappy means that the data is compressed using the snappy algorithm, which can reduce the storage space usage of the `OSS Bucket`.
         * 
         * @return builder
         * 
         */
        public Builder compressType(String compressType) {
            return compressType(Output.of(compressType));
        }

        public Builder csvConfigColumns(@Nullable Output<List<String>> csvConfigColumns) {
            $.csvConfigColumns = csvConfigColumns;
            return this;
        }

        public Builder csvConfigColumns(List<String> csvConfigColumns) {
            return csvConfigColumns(Output.of(csvConfigColumns));
        }

        public Builder csvConfigColumns(String... csvConfigColumns) {
            return csvConfigColumns(List.of(csvConfigColumns));
        }

        public Builder csvConfigDelimiter(@Nullable Output<String> csvConfigDelimiter) {
            $.csvConfigDelimiter = csvConfigDelimiter;
            return this;
        }

        public Builder csvConfigDelimiter(String csvConfigDelimiter) {
            return csvConfigDelimiter(Output.of(csvConfigDelimiter));
        }

        public Builder csvConfigHeader(@Nullable Output<Boolean> csvConfigHeader) {
            $.csvConfigHeader = csvConfigHeader;
            return this;
        }

        public Builder csvConfigHeader(Boolean csvConfigHeader) {
            return csvConfigHeader(Output.of(csvConfigHeader));
        }

        public Builder csvConfigLinefeed(@Nullable Output<String> csvConfigLinefeed) {
            $.csvConfigLinefeed = csvConfigLinefeed;
            return this;
        }

        public Builder csvConfigLinefeed(String csvConfigLinefeed) {
            return csvConfigLinefeed(Output.of(csvConfigLinefeed));
        }

        public Builder csvConfigNullidentifier(@Nullable Output<String> csvConfigNullidentifier) {
            $.csvConfigNullidentifier = csvConfigNullidentifier;
            return this;
        }

        public Builder csvConfigNullidentifier(String csvConfigNullidentifier) {
            return csvConfigNullidentifier(Output.of(csvConfigNullidentifier));
        }

        public Builder csvConfigQuote(@Nullable Output<String> csvConfigQuote) {
            $.csvConfigQuote = csvConfigQuote;
            return this;
        }

        public Builder csvConfigQuote(String csvConfigQuote) {
            return csvConfigQuote(Output.of(csvConfigQuote));
        }

        /**
         * @param format Storage format, only supports three types: `json`, `parquet`, `csv`.
         * **According to the different format, please select the following parameters**
         * - format = `json`
         *   `json_enable_tag` - (Optional) Whether to deliver the label.
         * - format = `csv`
         *   `csv_config_delimiter` - (Optional) Separator configuration in csv configuration format.
         *   `csv_config_columns` - (Optional) Field configuration in csv configuration format.
         *   `csv_config_nullidentifier` - (Optional) Invalid field content.
         *   `csv_config_quote` - (Optional) Escape character under csv configuration.
         *   `csv_config_header` - (Optional) Indicates whether to write the field name to the CSV file, the default value is `false`.
         *   `csv_config_linefeed` - (Optional) lineFeed in csv configuration.
         * - format = `parquet`
         *   `parquet_config` - (Optional) Configure to use parquet storage format.
         *   `name` - (Required) The name of the key.
         *   `type` - (Required) Type of configuration name.
         * 
         * @return builder
         * 
         */
        public Builder format(@Nullable Output<String> format) {
            $.format = format;
            return this;
        }

        /**
         * @param format Storage format, only supports three types: `json`, `parquet`, `csv`.
         * **According to the different format, please select the following parameters**
         * - format = `json`
         *   `json_enable_tag` - (Optional) Whether to deliver the label.
         * - format = `csv`
         *   `csv_config_delimiter` - (Optional) Separator configuration in csv configuration format.
         *   `csv_config_columns` - (Optional) Field configuration in csv configuration format.
         *   `csv_config_nullidentifier` - (Optional) Invalid field content.
         *   `csv_config_quote` - (Optional) Escape character under csv configuration.
         *   `csv_config_header` - (Optional) Indicates whether to write the field name to the CSV file, the default value is `false`.
         *   `csv_config_linefeed` - (Optional) lineFeed in csv configuration.
         * - format = `parquet`
         *   `parquet_config` - (Optional) Configure to use parquet storage format.
         *   `name` - (Required) The name of the key.
         *   `type` - (Required) Type of configuration name.
         * 
         * @return builder
         * 
         */
        public Builder format(String format) {
            return format(Output.of(format));
        }

        public Builder jsonEnableTag(@Nullable Output<Boolean> jsonEnableTag) {
            $.jsonEnableTag = jsonEnableTag;
            return this;
        }

        public Builder jsonEnableTag(Boolean jsonEnableTag) {
            return jsonEnableTag(Output.of(jsonEnableTag));
        }

        /**
         * @param logstoreName The name of the log logstore.
         * 
         * @return builder
         * 
         */
        public Builder logstoreName(@Nullable Output<String> logstoreName) {
            $.logstoreName = logstoreName;
            return this;
        }

        /**
         * @param logstoreName The name of the log logstore.
         * 
         * @return builder
         * 
         */
        public Builder logstoreName(String logstoreName) {
            return logstoreName(Output.of(logstoreName));
        }

        /**
         * @param ossBucket The name of the oss bucket.
         * 
         * @return builder
         * 
         */
        public Builder ossBucket(@Nullable Output<String> ossBucket) {
            $.ossBucket = ossBucket;
            return this;
        }

        /**
         * @param ossBucket The name of the oss bucket.
         * 
         * @return builder
         * 
         */
        public Builder ossBucket(String ossBucket) {
            return ossBucket(Output.of(ossBucket));
        }

        /**
         * @param ossPrefix The data synchronized from Log Service to OSS will be stored in this directory of Bucket.
         * 
         * @return builder
         * 
         */
        public Builder ossPrefix(@Nullable Output<String> ossPrefix) {
            $.ossPrefix = ossPrefix;
            return this;
        }

        /**
         * @param ossPrefix The data synchronized from Log Service to OSS will be stored in this directory of Bucket.
         * 
         * @return builder
         * 
         */
        public Builder ossPrefix(String ossPrefix) {
            return ossPrefix(Output.of(ossPrefix));
        }

        public Builder parquetConfigs(@Nullable Output<List<OssShipperParquetConfigArgs>> parquetConfigs) {
            $.parquetConfigs = parquetConfigs;
            return this;
        }

        public Builder parquetConfigs(List<OssShipperParquetConfigArgs> parquetConfigs) {
            return parquetConfigs(Output.of(parquetConfigs));
        }

        public Builder parquetConfigs(OssShipperParquetConfigArgs... parquetConfigs) {
            return parquetConfigs(List.of(parquetConfigs));
        }

        /**
         * @param pathFormat The OSS Bucket directory is dynamically generated according to the creation time of the shipper task, it cannot start with a forward slash `/`, the default value is `%Y/%m/%d/%H/%M`.
         * 
         * @return builder
         * 
         */
        public Builder pathFormat(@Nullable Output<String> pathFormat) {
            $.pathFormat = pathFormat;
            return this;
        }

        /**
         * @param pathFormat The OSS Bucket directory is dynamically generated according to the creation time of the shipper task, it cannot start with a forward slash `/`, the default value is `%Y/%m/%d/%H/%M`.
         * 
         * @return builder
         * 
         */
        public Builder pathFormat(String pathFormat) {
            return pathFormat(Output.of(pathFormat));
        }

        /**
         * @param projectName The name of the log project. It is the only in one Alicloud account.
         * 
         * @return builder
         * 
         */
        public Builder projectName(@Nullable Output<String> projectName) {
            $.projectName = projectName;
            return this;
        }

        /**
         * @param projectName The name of the log project. It is the only in one Alicloud account.
         * 
         * @return builder
         * 
         */
        public Builder projectName(String projectName) {
            return projectName(Output.of(projectName));
        }

        /**
         * @param roleArn Used for access control, the OSS Bucket owner creates the role mark, such as `acs:ram::13234:role/logrole`
         * 
         * @return builder
         * 
         */
        public Builder roleArn(@Nullable Output<String> roleArn) {
            $.roleArn = roleArn;
            return this;
        }

        /**
         * @param roleArn Used for access control, the OSS Bucket owner creates the role mark, such as `acs:ram::13234:role/logrole`
         * 
         * @return builder
         * 
         */
        public Builder roleArn(String roleArn) {
            return roleArn(Output.of(roleArn));
        }

        /**
         * @param shipperName Delivery configuration name, it can only contain lowercase letters, numbers, dashes `-` and underscores `_`. It must start and end with lowercase letters or numbers, and the name must be 2 to 128 characters long.
         * 
         * @return builder
         * 
         */
        public Builder shipperName(@Nullable Output<String> shipperName) {
            $.shipperName = shipperName;
            return this;
        }

        /**
         * @param shipperName Delivery configuration name, it can only contain lowercase letters, numbers, dashes `-` and underscores `_`. It must start and end with lowercase letters or numbers, and the name must be 2 to 128 characters long.
         * 
         * @return builder
         * 
         */
        public Builder shipperName(String shipperName) {
            return shipperName(Output.of(shipperName));
        }

        public OssShipperState build() {
            return $;
        }
    }

}
