// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.ram;

import com.pulumi.alicloud.Utilities;
import com.pulumi.alicloud.ram.PasswordPolicyArgs;
import com.pulumi.alicloud.ram.inputs.PasswordPolicyState;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.Integer;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * ## Import
 * 
 * RAM Password Policy can be imported using the id, e.g.
 * 
 * ```sh
 * $ pulumi import alicloud:ram/passwordPolicy:PasswordPolicy example &lt;id&gt;.
 * ```
 * 
 */
@ResourceType(type="alicloud:ram/passwordPolicy:PasswordPolicy")
public class PasswordPolicy extends com.pulumi.resources.CustomResource {
    /**
     * Whether to restrict logon after the password expires. Value:
     * - true: After the password expires, you cannot log in to the console. You must reset the password of the RAM user through the main account or a RAM user with administrator permissions to log on normally.
     * - false (default): After the password expires, the RAM user can change the password and log on normally.
     * 
     */
    @Export(name="hardExpiry", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> hardExpiry;

    /**
     * @return Whether to restrict logon after the password expires. Value:
     * - true: After the password expires, you cannot log in to the console. You must reset the password of the RAM user through the main account or a RAM user with administrator permissions to log on normally.
     * - false (default): After the password expires, the RAM user can change the password and log on normally.
     * 
     */
    public Output<Optional<Boolean>> hardExpiry() {
        return Codegen.optional(this.hardExpiry);
    }
    /**
     * Password retry constraint. After entering the wrong password continuously for the set number of times, the account will be locked for one hour.
     * Value range: 0~32.
     * Default value: 0, which means that the password retry constraint is not enabled.
     * 
     */
    @Export(name="maxLoginAttemps", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> maxLoginAttemps;

    /**
     * @return Password retry constraint. After entering the wrong password continuously for the set number of times, the account will be locked for one hour.
     * Value range: 0~32.
     * Default value: 0, which means that the password retry constraint is not enabled.
     * 
     */
    public Output<Optional<Integer>> maxLoginAttemps() {
        return Codegen.optional(this.maxLoginAttemps);
    }
    /**
     * Password validity period.
     * Value range: 0~1095. Unit: days.
     * Default value: 0, which means never expires.
     * 
     */
    @Export(name="maxPasswordAge", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> maxPasswordAge;

    /**
     * @return Password validity period.
     * Value range: 0~1095. Unit: days.
     * Default value: 0, which means never expires.
     * 
     */
    public Output<Optional<Integer>> maxPasswordAge() {
        return Codegen.optional(this.maxPasswordAge);
    }
    /**
     * The minimum number of unique characters in the password.
     * Valid values: 0 to 8.
     * The default value is 0, which indicates that no limits are imposed on the number of unique characters in a password.
     * 
     */
    @Export(name="minimumPasswordDifferentCharacter", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> minimumPasswordDifferentCharacter;

    /**
     * @return The minimum number of unique characters in the password.
     * Valid values: 0 to 8.
     * The default value is 0, which indicates that no limits are imposed on the number of unique characters in a password.
     * 
     */
    public Output<Optional<Integer>> minimumPasswordDifferentCharacter() {
        return Codegen.optional(this.minimumPasswordDifferentCharacter);
    }
    /**
     * The minimum number of characters in the password.
     * Valid values: 8 to 32. Default value: 8.
     * 
     */
    @Export(name="minimumPasswordLength", refs={Integer.class}, tree="[0]")
    private Output<Integer> minimumPasswordLength;

    /**
     * @return The minimum number of characters in the password.
     * Valid values: 8 to 32. Default value: 8.
     * 
     */
    public Output<Integer> minimumPasswordLength() {
        return this.minimumPasswordLength;
    }
    /**
     * Whether the user name is not allowed in the password. Value:
     * - true: The password cannot contain the user name.
     * - false (default): The user name can be included in the password.
     * 
     */
    @Export(name="passwordNotContainUserName", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> passwordNotContainUserName;

    /**
     * @return Whether the user name is not allowed in the password. Value:
     * - true: The password cannot contain the user name.
     * - false (default): The user name can be included in the password.
     * 
     */
    public Output<Optional<Boolean>> passwordNotContainUserName() {
        return Codegen.optional(this.passwordNotContainUserName);
    }
    /**
     * Historical password check policy.
     * Do not use the previous N Passwords. The value range of N is 0 to 24.
     * Default value: 0, indicating that the historical password check policy is not enabled.
     * 
     */
    @Export(name="passwordReusePrevention", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> passwordReusePrevention;

    /**
     * @return Historical password check policy.
     * Do not use the previous N Passwords. The value range of N is 0 to 24.
     * Default value: 0, indicating that the historical password check policy is not enabled.
     * 
     */
    public Output<Optional<Integer>> passwordReusePrevention() {
        return Codegen.optional(this.passwordReusePrevention);
    }
    /**
     * Specifies whether the password must contain lowercase letters. Valid values:
     * - true
     * - false (default)
     * 
     */
    @Export(name="requireLowercaseCharacters", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> requireLowercaseCharacters;

    /**
     * @return Specifies whether the password must contain lowercase letters. Valid values:
     * - true
     * - false (default)
     * 
     */
    public Output<Optional<Boolean>> requireLowercaseCharacters() {
        return Codegen.optional(this.requireLowercaseCharacters);
    }
    /**
     * Specifies whether the password must contain digits. Valid values:
     * - true
     * - false (default)
     * 
     */
    @Export(name="requireNumbers", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> requireNumbers;

    /**
     * @return Specifies whether the password must contain digits. Valid values:
     * - true
     * - false (default)
     * 
     */
    public Output<Optional<Boolean>> requireNumbers() {
        return Codegen.optional(this.requireNumbers);
    }
    /**
     * Specifies whether the password must contain special characters. Valid values:
     * - true
     * - false (default)
     * 
     */
    @Export(name="requireSymbols", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> requireSymbols;

    /**
     * @return Specifies whether the password must contain special characters. Valid values:
     * - true
     * - false (default)
     * 
     */
    public Output<Optional<Boolean>> requireSymbols() {
        return Codegen.optional(this.requireSymbols);
    }
    /**
     * Specifies whether the password must contain uppercase letters. Valid values:
     * - true
     * - false (default)
     * 
     */
    @Export(name="requireUppercaseCharacters", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> requireUppercaseCharacters;

    /**
     * @return Specifies whether the password must contain uppercase letters. Valid values:
     * - true
     * - false (default)
     * 
     */
    public Output<Optional<Boolean>> requireUppercaseCharacters() {
        return Codegen.optional(this.requireUppercaseCharacters);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public PasswordPolicy(java.lang.String name) {
        this(name, PasswordPolicyArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public PasswordPolicy(java.lang.String name, @Nullable PasswordPolicyArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public PasswordPolicy(java.lang.String name, @Nullable PasswordPolicyArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("alicloud:ram/passwordPolicy:PasswordPolicy", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private PasswordPolicy(java.lang.String name, Output<java.lang.String> id, @Nullable PasswordPolicyState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("alicloud:ram/passwordPolicy:PasswordPolicy", name, state, makeResourceOptions(options, id), false);
    }

    private static PasswordPolicyArgs makeArgs(@Nullable PasswordPolicyArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? PasswordPolicyArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static PasswordPolicy get(java.lang.String name, Output<java.lang.String> id, @Nullable PasswordPolicyState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new PasswordPolicy(name, id, state, options);
    }
}
