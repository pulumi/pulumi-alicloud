// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.hbr.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetHanaBackupClientsHanaBackupClient {
    /**
     * @return The alert settings.
     * 
     */
    private String alertSetting;
    /**
     * @return The ID of the backup client.
     * 
     */
    private String clientId;
    /**
     * @return The name of the backup client.
     * 
     */
    private String clientName;
    /**
     * @return The type of the backup client.
     * 
     */
    private String clientType;
    /**
     * @return The version number of the backup client.
     * 
     */
    private String clientVersion;
    /**
     * @return The ID of the SAP HANA instance.
     * 
     */
    private String clusterId;
    /**
     * @return The id of the Hana Backup Client. It formats as `&lt;vault_id&gt;:&lt;client_id&gt;`.
     * 
     */
    private String id;
    /**
     * @return The ID of the instance.
     * 
     */
    private String instanceId;
    /**
     * @return The name of the ECS instance.
     * 
     */
    private String instanceName;
    /**
     * @return The maximum version number of the backup client.
     * 
     */
    private String maxVersion;
    /**
     * @return The network type.
     * 
     */
    private String networkType;
    /**
     * @return The status of the Hana Backup Client. Valid Values: `REGISTERED`, `ACTIVATED`, `DEACTIVATED`, `INSTALLING`, `INSTALL_FAILED`, `NOT_INSTALLED`, `UPGRADING`, `UPGRADE_FAILED`, `UNINSTALLING`, `UNINSTALL_FAILED`, `STOPPED`, `UNKNOWN`.
     * 
     */
    private String status;
    /**
     * @return The status information.
     * 
     */
    private String statusMessage;
    /**
     * @return Indicates whether data is transmitted over HTTPS.
     * 
     */
    private Boolean useHttps;
    /**
     * @return The ID of the backup vault.
     * 
     */
    private String vaultId;

    private GetHanaBackupClientsHanaBackupClient() {}
    /**
     * @return The alert settings.
     * 
     */
    public String alertSetting() {
        return this.alertSetting;
    }
    /**
     * @return The ID of the backup client.
     * 
     */
    public String clientId() {
        return this.clientId;
    }
    /**
     * @return The name of the backup client.
     * 
     */
    public String clientName() {
        return this.clientName;
    }
    /**
     * @return The type of the backup client.
     * 
     */
    public String clientType() {
        return this.clientType;
    }
    /**
     * @return The version number of the backup client.
     * 
     */
    public String clientVersion() {
        return this.clientVersion;
    }
    /**
     * @return The ID of the SAP HANA instance.
     * 
     */
    public String clusterId() {
        return this.clusterId;
    }
    /**
     * @return The id of the Hana Backup Client. It formats as `&lt;vault_id&gt;:&lt;client_id&gt;`.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The ID of the instance.
     * 
     */
    public String instanceId() {
        return this.instanceId;
    }
    /**
     * @return The name of the ECS instance.
     * 
     */
    public String instanceName() {
        return this.instanceName;
    }
    /**
     * @return The maximum version number of the backup client.
     * 
     */
    public String maxVersion() {
        return this.maxVersion;
    }
    /**
     * @return The network type.
     * 
     */
    public String networkType() {
        return this.networkType;
    }
    /**
     * @return The status of the Hana Backup Client. Valid Values: `REGISTERED`, `ACTIVATED`, `DEACTIVATED`, `INSTALLING`, `INSTALL_FAILED`, `NOT_INSTALLED`, `UPGRADING`, `UPGRADE_FAILED`, `UNINSTALLING`, `UNINSTALL_FAILED`, `STOPPED`, `UNKNOWN`.
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return The status information.
     * 
     */
    public String statusMessage() {
        return this.statusMessage;
    }
    /**
     * @return Indicates whether data is transmitted over HTTPS.
     * 
     */
    public Boolean useHttps() {
        return this.useHttps;
    }
    /**
     * @return The ID of the backup vault.
     * 
     */
    public String vaultId() {
        return this.vaultId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetHanaBackupClientsHanaBackupClient defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String alertSetting;
        private String clientId;
        private String clientName;
        private String clientType;
        private String clientVersion;
        private String clusterId;
        private String id;
        private String instanceId;
        private String instanceName;
        private String maxVersion;
        private String networkType;
        private String status;
        private String statusMessage;
        private Boolean useHttps;
        private String vaultId;
        public Builder() {}
        public Builder(GetHanaBackupClientsHanaBackupClient defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.alertSetting = defaults.alertSetting;
    	      this.clientId = defaults.clientId;
    	      this.clientName = defaults.clientName;
    	      this.clientType = defaults.clientType;
    	      this.clientVersion = defaults.clientVersion;
    	      this.clusterId = defaults.clusterId;
    	      this.id = defaults.id;
    	      this.instanceId = defaults.instanceId;
    	      this.instanceName = defaults.instanceName;
    	      this.maxVersion = defaults.maxVersion;
    	      this.networkType = defaults.networkType;
    	      this.status = defaults.status;
    	      this.statusMessage = defaults.statusMessage;
    	      this.useHttps = defaults.useHttps;
    	      this.vaultId = defaults.vaultId;
        }

        @CustomType.Setter
        public Builder alertSetting(String alertSetting) {
            this.alertSetting = Objects.requireNonNull(alertSetting);
            return this;
        }
        @CustomType.Setter
        public Builder clientId(String clientId) {
            this.clientId = Objects.requireNonNull(clientId);
            return this;
        }
        @CustomType.Setter
        public Builder clientName(String clientName) {
            this.clientName = Objects.requireNonNull(clientName);
            return this;
        }
        @CustomType.Setter
        public Builder clientType(String clientType) {
            this.clientType = Objects.requireNonNull(clientType);
            return this;
        }
        @CustomType.Setter
        public Builder clientVersion(String clientVersion) {
            this.clientVersion = Objects.requireNonNull(clientVersion);
            return this;
        }
        @CustomType.Setter
        public Builder clusterId(String clusterId) {
            this.clusterId = Objects.requireNonNull(clusterId);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder instanceId(String instanceId) {
            this.instanceId = Objects.requireNonNull(instanceId);
            return this;
        }
        @CustomType.Setter
        public Builder instanceName(String instanceName) {
            this.instanceName = Objects.requireNonNull(instanceName);
            return this;
        }
        @CustomType.Setter
        public Builder maxVersion(String maxVersion) {
            this.maxVersion = Objects.requireNonNull(maxVersion);
            return this;
        }
        @CustomType.Setter
        public Builder networkType(String networkType) {
            this.networkType = Objects.requireNonNull(networkType);
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            this.status = Objects.requireNonNull(status);
            return this;
        }
        @CustomType.Setter
        public Builder statusMessage(String statusMessage) {
            this.statusMessage = Objects.requireNonNull(statusMessage);
            return this;
        }
        @CustomType.Setter
        public Builder useHttps(Boolean useHttps) {
            this.useHttps = Objects.requireNonNull(useHttps);
            return this;
        }
        @CustomType.Setter
        public Builder vaultId(String vaultId) {
            this.vaultId = Objects.requireNonNull(vaultId);
            return this;
        }
        public GetHanaBackupClientsHanaBackupClient build() {
            final var _resultValue = new GetHanaBackupClientsHanaBackupClient();
            _resultValue.alertSetting = alertSetting;
            _resultValue.clientId = clientId;
            _resultValue.clientName = clientName;
            _resultValue.clientType = clientType;
            _resultValue.clientVersion = clientVersion;
            _resultValue.clusterId = clusterId;
            _resultValue.id = id;
            _resultValue.instanceId = instanceId;
            _resultValue.instanceName = instanceName;
            _resultValue.maxVersion = maxVersion;
            _resultValue.networkType = networkType;
            _resultValue.status = status;
            _resultValue.statusMessage = statusMessage;
            _resultValue.useHttps = useHttps;
            _resultValue.vaultId = vaultId;
            return _resultValue;
        }
    }
}
