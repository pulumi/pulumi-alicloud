// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.nlb;

import com.pulumi.alicloud.nlb.inputs.ServerGroupHealthCheckArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ServerGroupArgs extends com.pulumi.resources.ResourceArgs {

    public static final ServerGroupArgs Empty = new ServerGroupArgs();

    /**
     * Protocol version. Value:
     * - **ipv4**:IPv4 type.
     * - **DualStack**: Double Stack type.
     * 
     */
    @Import(name="addressIpVersion")
    private @Nullable Output<String> addressIpVersion;

    /**
     * @return Protocol version. Value:
     * - **ipv4**:IPv4 type.
     * - **DualStack**: Double Stack type.
     * 
     */
    public Optional<Output<String>> addressIpVersion() {
        return Optional.ofNullable(this.addressIpVersion);
    }

    /**
     * Full port forwarding.
     * 
     */
    @Import(name="anyPortEnabled")
    private @Nullable Output<Boolean> anyPortEnabled;

    /**
     * @return Full port forwarding.
     * 
     */
    public Optional<Output<Boolean>> anyPortEnabled() {
        return Optional.ofNullable(this.anyPortEnabled);
    }

    /**
     * . Field &#39;connection_drain&#39; has been deprecated from provider version 1.214.0. New field &#39;connection_drain_enabled&#39; instead.
     * 
     * @deprecated
     * Field &#39;connection_drain&#39; has been deprecated since provider version 1.214.0. New field &#39;connection_drain_enabled&#39; instead.
     * 
     */
    @Deprecated /* Field 'connection_drain' has been deprecated since provider version 1.214.0. New field 'connection_drain_enabled' instead. */
    @Import(name="connectionDrain")
    private @Nullable Output<Boolean> connectionDrain;

    /**
     * @return . Field &#39;connection_drain&#39; has been deprecated from provider version 1.214.0. New field &#39;connection_drain_enabled&#39; instead.
     * 
     * @deprecated
     * Field &#39;connection_drain&#39; has been deprecated since provider version 1.214.0. New field &#39;connection_drain_enabled&#39; instead.
     * 
     */
    @Deprecated /* Field 'connection_drain' has been deprecated since provider version 1.214.0. New field 'connection_drain_enabled' instead. */
    public Optional<Output<Boolean>> connectionDrain() {
        return Optional.ofNullable(this.connectionDrain);
    }

    /**
     * Whether to open the connection gracefully interrupted. Value:
     * - **true**: on.
     * - **false**: closed.
     * 
     */
    @Import(name="connectionDrainEnabled")
    private @Nullable Output<Boolean> connectionDrainEnabled;

    /**
     * @return Whether to open the connection gracefully interrupted. Value:
     * - **true**: on.
     * - **false**: closed.
     * 
     */
    public Optional<Output<Boolean>> connectionDrainEnabled() {
        return Optional.ofNullable(this.connectionDrainEnabled);
    }

    /**
     * Set the connection elegant interrupt timeout. Unit: seconds. Valid values: **10** ~ **900**.
     * 
     */
    @Import(name="connectionDrainTimeout")
    private @Nullable Output<Integer> connectionDrainTimeout;

    /**
     * @return Set the connection elegant interrupt timeout. Unit: seconds. Valid values: **10** ~ **900**.
     * 
     */
    public Optional<Output<Integer>> connectionDrainTimeout() {
        return Optional.ofNullable(this.connectionDrainTimeout);
    }

    /**
     * Health check configuration information. See `health_check` below.
     * 
     */
    @Import(name="healthCheck")
    private @Nullable Output<ServerGroupHealthCheckArgs> healthCheck;

    /**
     * @return Health check configuration information. See `health_check` below.
     * 
     */
    public Optional<Output<ServerGroupHealthCheckArgs>> healthCheck() {
        return Optional.ofNullable(this.healthCheck);
    }

    /**
     * Whether to enable the client address retention function. Value:
     * - **true**: on.
     * - **false**: closed.
     * &gt; **NOTE:**  special instructions: When **AddressIPVersion** is of the **ipv4** type, the default value is **true**. **Addrestipversion** can only be **false** when the value of **ipv6** is **ipv6**, and can be **true** when supported by the underlying layer * *.
     * 
     */
    @Import(name="preserveClientIpEnabled")
    private @Nullable Output<Boolean> preserveClientIpEnabled;

    /**
     * @return Whether to enable the client address retention function. Value:
     * - **true**: on.
     * - **false**: closed.
     * &gt; **NOTE:**  special instructions: When **AddressIPVersion** is of the **ipv4** type, the default value is **true**. **Addrestipversion** can only be **false** when the value of **ipv6** is **ipv6**, and can be **true** when supported by the underlying layer * *.
     * 
     */
    public Optional<Output<Boolean>> preserveClientIpEnabled() {
        return Optional.ofNullable(this.preserveClientIpEnabled);
    }

    /**
     * The backend Forwarding Protocol. Valid values: **TCP**, **UDP**, or **TCPSSL**.
     * 
     */
    @Import(name="protocol")
    private @Nullable Output<String> protocol;

    /**
     * @return The backend Forwarding Protocol. Valid values: **TCP**, **UDP**, or **TCPSSL**.
     * 
     */
    public Optional<Output<String>> protocol() {
        return Optional.ofNullable(this.protocol);
    }

    /**
     * The ID of the resource group to which the server group belongs.
     * 
     */
    @Import(name="resourceGroupId")
    private @Nullable Output<String> resourceGroupId;

    /**
     * @return The ID of the resource group to which the server group belongs.
     * 
     */
    public Optional<Output<String>> resourceGroupId() {
        return Optional.ofNullable(this.resourceGroupId);
    }

    /**
     * Scheduling algorithm. Value:
     * - **Wrr**: Weighted polling. The higher the weight of the backend server, the higher the probability of being polled.
     * - **Rr**: polls external requests are distributed to backend servers in sequence according to the access order. sch: Source IP hash: The same source address is scheduled to the same backend server.
     * - **Tch**: Quadruple hash, based on the consistent hash of the Quad (source IP, Destination IP, source port, and destination port), the same stream is scheduled to the same backend server.
     * - **Qch**: a QUIC ID hash that allows you to hash requests with the same QUIC ID to the same backend server.
     * 
     */
    @Import(name="scheduler")
    private @Nullable Output<String> scheduler;

    /**
     * @return Scheduling algorithm. Value:
     * - **Wrr**: Weighted polling. The higher the weight of the backend server, the higher the probability of being polled.
     * - **Rr**: polls external requests are distributed to backend servers in sequence according to the access order. sch: Source IP hash: The same source address is scheduled to the same backend server.
     * - **Tch**: Quadruple hash, based on the consistent hash of the Quad (source IP, Destination IP, source port, and destination port), the same stream is scheduled to the same backend server.
     * - **Qch**: a QUIC ID hash that allows you to hash requests with the same QUIC ID to the same backend server.
     * 
     */
    public Optional<Output<String>> scheduler() {
        return Optional.ofNullable(this.scheduler);
    }

    /**
     * The name of the server group.
     * 
     */
    @Import(name="serverGroupName", required=true)
    private Output<String> serverGroupName;

    /**
     * @return The name of the server group.
     * 
     */
    public Output<String> serverGroupName() {
        return this.serverGroupName;
    }

    /**
     * Server group type. Value:
     * - **Instance**: The server type. You can add **Ecs**, **Ens**, and **Eci** instances to the server group.
     * - **Ip**: Ip address type. You can add Ip addresses to a server group of this type.
     * 
     */
    @Import(name="serverGroupType")
    private @Nullable Output<String> serverGroupType;

    /**
     * @return Server group type. Value:
     * - **Instance**: The server type. You can add **Ecs**, **Ens**, and **Eci** instances to the server group.
     * - **Ip**: Ip address type. You can add Ip addresses to a server group of this type.
     * 
     */
    public Optional<Output<String>> serverGroupType() {
        return Optional.ofNullable(this.serverGroupType);
    }

    /**
     * Label.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,Object>> tags;

    /**
     * @return Label.
     * 
     */
    public Optional<Output<Map<String,Object>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * The ID of the VPC to which the server group belongs.
     * 
     * The following arguments will be discarded. Please use new fields as soon as possible:
     * 
     */
    @Import(name="vpcId", required=true)
    private Output<String> vpcId;

    /**
     * @return The ID of the VPC to which the server group belongs.
     * 
     * The following arguments will be discarded. Please use new fields as soon as possible:
     * 
     */
    public Output<String> vpcId() {
        return this.vpcId;
    }

    private ServerGroupArgs() {}

    private ServerGroupArgs(ServerGroupArgs $) {
        this.addressIpVersion = $.addressIpVersion;
        this.anyPortEnabled = $.anyPortEnabled;
        this.connectionDrain = $.connectionDrain;
        this.connectionDrainEnabled = $.connectionDrainEnabled;
        this.connectionDrainTimeout = $.connectionDrainTimeout;
        this.healthCheck = $.healthCheck;
        this.preserveClientIpEnabled = $.preserveClientIpEnabled;
        this.protocol = $.protocol;
        this.resourceGroupId = $.resourceGroupId;
        this.scheduler = $.scheduler;
        this.serverGroupName = $.serverGroupName;
        this.serverGroupType = $.serverGroupType;
        this.tags = $.tags;
        this.vpcId = $.vpcId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServerGroupArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServerGroupArgs $;

        public Builder() {
            $ = new ServerGroupArgs();
        }

        public Builder(ServerGroupArgs defaults) {
            $ = new ServerGroupArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param addressIpVersion Protocol version. Value:
         * - **ipv4**:IPv4 type.
         * - **DualStack**: Double Stack type.
         * 
         * @return builder
         * 
         */
        public Builder addressIpVersion(@Nullable Output<String> addressIpVersion) {
            $.addressIpVersion = addressIpVersion;
            return this;
        }

        /**
         * @param addressIpVersion Protocol version. Value:
         * - **ipv4**:IPv4 type.
         * - **DualStack**: Double Stack type.
         * 
         * @return builder
         * 
         */
        public Builder addressIpVersion(String addressIpVersion) {
            return addressIpVersion(Output.of(addressIpVersion));
        }

        /**
         * @param anyPortEnabled Full port forwarding.
         * 
         * @return builder
         * 
         */
        public Builder anyPortEnabled(@Nullable Output<Boolean> anyPortEnabled) {
            $.anyPortEnabled = anyPortEnabled;
            return this;
        }

        /**
         * @param anyPortEnabled Full port forwarding.
         * 
         * @return builder
         * 
         */
        public Builder anyPortEnabled(Boolean anyPortEnabled) {
            return anyPortEnabled(Output.of(anyPortEnabled));
        }

        /**
         * @param connectionDrain . Field &#39;connection_drain&#39; has been deprecated from provider version 1.214.0. New field &#39;connection_drain_enabled&#39; instead.
         * 
         * @return builder
         * 
         * @deprecated
         * Field &#39;connection_drain&#39; has been deprecated since provider version 1.214.0. New field &#39;connection_drain_enabled&#39; instead.
         * 
         */
        @Deprecated /* Field 'connection_drain' has been deprecated since provider version 1.214.0. New field 'connection_drain_enabled' instead. */
        public Builder connectionDrain(@Nullable Output<Boolean> connectionDrain) {
            $.connectionDrain = connectionDrain;
            return this;
        }

        /**
         * @param connectionDrain . Field &#39;connection_drain&#39; has been deprecated from provider version 1.214.0. New field &#39;connection_drain_enabled&#39; instead.
         * 
         * @return builder
         * 
         * @deprecated
         * Field &#39;connection_drain&#39; has been deprecated since provider version 1.214.0. New field &#39;connection_drain_enabled&#39; instead.
         * 
         */
        @Deprecated /* Field 'connection_drain' has been deprecated since provider version 1.214.0. New field 'connection_drain_enabled' instead. */
        public Builder connectionDrain(Boolean connectionDrain) {
            return connectionDrain(Output.of(connectionDrain));
        }

        /**
         * @param connectionDrainEnabled Whether to open the connection gracefully interrupted. Value:
         * - **true**: on.
         * - **false**: closed.
         * 
         * @return builder
         * 
         */
        public Builder connectionDrainEnabled(@Nullable Output<Boolean> connectionDrainEnabled) {
            $.connectionDrainEnabled = connectionDrainEnabled;
            return this;
        }

        /**
         * @param connectionDrainEnabled Whether to open the connection gracefully interrupted. Value:
         * - **true**: on.
         * - **false**: closed.
         * 
         * @return builder
         * 
         */
        public Builder connectionDrainEnabled(Boolean connectionDrainEnabled) {
            return connectionDrainEnabled(Output.of(connectionDrainEnabled));
        }

        /**
         * @param connectionDrainTimeout Set the connection elegant interrupt timeout. Unit: seconds. Valid values: **10** ~ **900**.
         * 
         * @return builder
         * 
         */
        public Builder connectionDrainTimeout(@Nullable Output<Integer> connectionDrainTimeout) {
            $.connectionDrainTimeout = connectionDrainTimeout;
            return this;
        }

        /**
         * @param connectionDrainTimeout Set the connection elegant interrupt timeout. Unit: seconds. Valid values: **10** ~ **900**.
         * 
         * @return builder
         * 
         */
        public Builder connectionDrainTimeout(Integer connectionDrainTimeout) {
            return connectionDrainTimeout(Output.of(connectionDrainTimeout));
        }

        /**
         * @param healthCheck Health check configuration information. See `health_check` below.
         * 
         * @return builder
         * 
         */
        public Builder healthCheck(@Nullable Output<ServerGroupHealthCheckArgs> healthCheck) {
            $.healthCheck = healthCheck;
            return this;
        }

        /**
         * @param healthCheck Health check configuration information. See `health_check` below.
         * 
         * @return builder
         * 
         */
        public Builder healthCheck(ServerGroupHealthCheckArgs healthCheck) {
            return healthCheck(Output.of(healthCheck));
        }

        /**
         * @param preserveClientIpEnabled Whether to enable the client address retention function. Value:
         * - **true**: on.
         * - **false**: closed.
         * &gt; **NOTE:**  special instructions: When **AddressIPVersion** is of the **ipv4** type, the default value is **true**. **Addrestipversion** can only be **false** when the value of **ipv6** is **ipv6**, and can be **true** when supported by the underlying layer * *.
         * 
         * @return builder
         * 
         */
        public Builder preserveClientIpEnabled(@Nullable Output<Boolean> preserveClientIpEnabled) {
            $.preserveClientIpEnabled = preserveClientIpEnabled;
            return this;
        }

        /**
         * @param preserveClientIpEnabled Whether to enable the client address retention function. Value:
         * - **true**: on.
         * - **false**: closed.
         * &gt; **NOTE:**  special instructions: When **AddressIPVersion** is of the **ipv4** type, the default value is **true**. **Addrestipversion** can only be **false** when the value of **ipv6** is **ipv6**, and can be **true** when supported by the underlying layer * *.
         * 
         * @return builder
         * 
         */
        public Builder preserveClientIpEnabled(Boolean preserveClientIpEnabled) {
            return preserveClientIpEnabled(Output.of(preserveClientIpEnabled));
        }

        /**
         * @param protocol The backend Forwarding Protocol. Valid values: **TCP**, **UDP**, or **TCPSSL**.
         * 
         * @return builder
         * 
         */
        public Builder protocol(@Nullable Output<String> protocol) {
            $.protocol = protocol;
            return this;
        }

        /**
         * @param protocol The backend Forwarding Protocol. Valid values: **TCP**, **UDP**, or **TCPSSL**.
         * 
         * @return builder
         * 
         */
        public Builder protocol(String protocol) {
            return protocol(Output.of(protocol));
        }

        /**
         * @param resourceGroupId The ID of the resource group to which the server group belongs.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupId(@Nullable Output<String> resourceGroupId) {
            $.resourceGroupId = resourceGroupId;
            return this;
        }

        /**
         * @param resourceGroupId The ID of the resource group to which the server group belongs.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupId(String resourceGroupId) {
            return resourceGroupId(Output.of(resourceGroupId));
        }

        /**
         * @param scheduler Scheduling algorithm. Value:
         * - **Wrr**: Weighted polling. The higher the weight of the backend server, the higher the probability of being polled.
         * - **Rr**: polls external requests are distributed to backend servers in sequence according to the access order. sch: Source IP hash: The same source address is scheduled to the same backend server.
         * - **Tch**: Quadruple hash, based on the consistent hash of the Quad (source IP, Destination IP, source port, and destination port), the same stream is scheduled to the same backend server.
         * - **Qch**: a QUIC ID hash that allows you to hash requests with the same QUIC ID to the same backend server.
         * 
         * @return builder
         * 
         */
        public Builder scheduler(@Nullable Output<String> scheduler) {
            $.scheduler = scheduler;
            return this;
        }

        /**
         * @param scheduler Scheduling algorithm. Value:
         * - **Wrr**: Weighted polling. The higher the weight of the backend server, the higher the probability of being polled.
         * - **Rr**: polls external requests are distributed to backend servers in sequence according to the access order. sch: Source IP hash: The same source address is scheduled to the same backend server.
         * - **Tch**: Quadruple hash, based on the consistent hash of the Quad (source IP, Destination IP, source port, and destination port), the same stream is scheduled to the same backend server.
         * - **Qch**: a QUIC ID hash that allows you to hash requests with the same QUIC ID to the same backend server.
         * 
         * @return builder
         * 
         */
        public Builder scheduler(String scheduler) {
            return scheduler(Output.of(scheduler));
        }

        /**
         * @param serverGroupName The name of the server group.
         * 
         * @return builder
         * 
         */
        public Builder serverGroupName(Output<String> serverGroupName) {
            $.serverGroupName = serverGroupName;
            return this;
        }

        /**
         * @param serverGroupName The name of the server group.
         * 
         * @return builder
         * 
         */
        public Builder serverGroupName(String serverGroupName) {
            return serverGroupName(Output.of(serverGroupName));
        }

        /**
         * @param serverGroupType Server group type. Value:
         * - **Instance**: The server type. You can add **Ecs**, **Ens**, and **Eci** instances to the server group.
         * - **Ip**: Ip address type. You can add Ip addresses to a server group of this type.
         * 
         * @return builder
         * 
         */
        public Builder serverGroupType(@Nullable Output<String> serverGroupType) {
            $.serverGroupType = serverGroupType;
            return this;
        }

        /**
         * @param serverGroupType Server group type. Value:
         * - **Instance**: The server type. You can add **Ecs**, **Ens**, and **Eci** instances to the server group.
         * - **Ip**: Ip address type. You can add Ip addresses to a server group of this type.
         * 
         * @return builder
         * 
         */
        public Builder serverGroupType(String serverGroupType) {
            return serverGroupType(Output.of(serverGroupType));
        }

        /**
         * @param tags Label.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,Object>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags Label.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,Object> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param vpcId The ID of the VPC to which the server group belongs.
         * 
         * The following arguments will be discarded. Please use new fields as soon as possible:
         * 
         * @return builder
         * 
         */
        public Builder vpcId(Output<String> vpcId) {
            $.vpcId = vpcId;
            return this;
        }

        /**
         * @param vpcId The ID of the VPC to which the server group belongs.
         * 
         * The following arguments will be discarded. Please use new fields as soon as possible:
         * 
         * @return builder
         * 
         */
        public Builder vpcId(String vpcId) {
            return vpcId(Output.of(vpcId));
        }

        public ServerGroupArgs build() {
            if ($.serverGroupName == null) {
                throw new MissingRequiredPropertyException("ServerGroupArgs", "serverGroupName");
            }
            if ($.vpcId == null) {
                throw new MissingRequiredPropertyException("ServerGroupArgs", "vpcId");
            }
            return $;
        }
    }

}
