// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.emrv2.outputs;

import com.pulumi.alicloud.emrv2.outputs.ClusterNodeGroupAckConfigCustomAnnotation;
import com.pulumi.alicloud.emrv2.outputs.ClusterNodeGroupAckConfigCustomLabel;
import com.pulumi.alicloud.emrv2.outputs.ClusterNodeGroupAckConfigNodeSelector;
import com.pulumi.alicloud.emrv2.outputs.ClusterNodeGroupAckConfigPvc;
import com.pulumi.alicloud.emrv2.outputs.ClusterNodeGroupAckConfigToleration;
import com.pulumi.alicloud.emrv2.outputs.ClusterNodeGroupAckConfigVolume;
import com.pulumi.alicloud.emrv2.outputs.ClusterNodeGroupAckConfigVolumeMount;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ClusterNodeGroupAckConfig {
    /**
     * @return The ack cluster instance id.
     * 
     */
    private String ackInstanceId;
    /**
     * @return The ack cluster custom annotations. See `customAnnotations` below.
     * 
     */
    private @Nullable List<ClusterNodeGroupAckConfigCustomAnnotation> customAnnotations;
    /**
     * @return The ack cluster custom labels. See `customLabels` below.
     * 
     */
    private @Nullable List<ClusterNodeGroupAckConfigCustomLabel> customLabels;
    /**
     * @return The job pod resource of limit cpu.
     * 
     */
    private Double limitCpu;
    /**
     * @return The job pod resource of limit memory.
     * 
     */
    private Double limitMemory;
    /**
     * @return The ack cluster namespace.
     * 
     */
    private String namespace;
    /**
     * @return The ack cluster node affinity.
     * 
     */
    private @Nullable String nodeAffinity;
    /**
     * @return The ack cluster node selectors for job pods scheduling. See `nodeSelectors` below.
     * 
     */
    private @Nullable List<ClusterNodeGroupAckConfigNodeSelector> nodeSelectors;
    /**
     * @return The job pod affinity.
     * 
     */
    private @Nullable String podAffinity;
    /**
     * @return The job pod anti-affinity.
     * 
     */
    private @Nullable String podAntiAffinity;
    /**
     * @return The job pod pre start command.
     * 
     */
    private @Nullable List<String> preStartCommands;
    /**
     * @return The ack cluster persistent volume claim. See `pvcs` below.
     * 
     */
    private @Nullable List<ClusterNodeGroupAckConfigPvc> pvcs;
    /**
     * @return The job pod resource of request cpu.
     * 
     */
    private Double requestCpu;
    /**
     * @return The job pod resource of request memory.
     * 
     */
    private Double requestMemory;
    /**
     * @return The ack cluster tolerations. See `tolerations` below.
     * 
     */
    private @Nullable List<ClusterNodeGroupAckConfigToleration> tolerations;
    /**
     * @return The ack cluster volume mounts. See `volumeMounts` below.
     * 
     */
    private @Nullable List<ClusterNodeGroupAckConfigVolumeMount> volumeMounts;
    /**
     * @return The ack cluster volumes. See `volumes` below.
     * 
     */
    private @Nullable List<ClusterNodeGroupAckConfigVolume> volumes;

    private ClusterNodeGroupAckConfig() {}
    /**
     * @return The ack cluster instance id.
     * 
     */
    public String ackInstanceId() {
        return this.ackInstanceId;
    }
    /**
     * @return The ack cluster custom annotations. See `customAnnotations` below.
     * 
     */
    public List<ClusterNodeGroupAckConfigCustomAnnotation> customAnnotations() {
        return this.customAnnotations == null ? List.of() : this.customAnnotations;
    }
    /**
     * @return The ack cluster custom labels. See `customLabels` below.
     * 
     */
    public List<ClusterNodeGroupAckConfigCustomLabel> customLabels() {
        return this.customLabels == null ? List.of() : this.customLabels;
    }
    /**
     * @return The job pod resource of limit cpu.
     * 
     */
    public Double limitCpu() {
        return this.limitCpu;
    }
    /**
     * @return The job pod resource of limit memory.
     * 
     */
    public Double limitMemory() {
        return this.limitMemory;
    }
    /**
     * @return The ack cluster namespace.
     * 
     */
    public String namespace() {
        return this.namespace;
    }
    /**
     * @return The ack cluster node affinity.
     * 
     */
    public Optional<String> nodeAffinity() {
        return Optional.ofNullable(this.nodeAffinity);
    }
    /**
     * @return The ack cluster node selectors for job pods scheduling. See `nodeSelectors` below.
     * 
     */
    public List<ClusterNodeGroupAckConfigNodeSelector> nodeSelectors() {
        return this.nodeSelectors == null ? List.of() : this.nodeSelectors;
    }
    /**
     * @return The job pod affinity.
     * 
     */
    public Optional<String> podAffinity() {
        return Optional.ofNullable(this.podAffinity);
    }
    /**
     * @return The job pod anti-affinity.
     * 
     */
    public Optional<String> podAntiAffinity() {
        return Optional.ofNullable(this.podAntiAffinity);
    }
    /**
     * @return The job pod pre start command.
     * 
     */
    public List<String> preStartCommands() {
        return this.preStartCommands == null ? List.of() : this.preStartCommands;
    }
    /**
     * @return The ack cluster persistent volume claim. See `pvcs` below.
     * 
     */
    public List<ClusterNodeGroupAckConfigPvc> pvcs() {
        return this.pvcs == null ? List.of() : this.pvcs;
    }
    /**
     * @return The job pod resource of request cpu.
     * 
     */
    public Double requestCpu() {
        return this.requestCpu;
    }
    /**
     * @return The job pod resource of request memory.
     * 
     */
    public Double requestMemory() {
        return this.requestMemory;
    }
    /**
     * @return The ack cluster tolerations. See `tolerations` below.
     * 
     */
    public List<ClusterNodeGroupAckConfigToleration> tolerations() {
        return this.tolerations == null ? List.of() : this.tolerations;
    }
    /**
     * @return The ack cluster volume mounts. See `volumeMounts` below.
     * 
     */
    public List<ClusterNodeGroupAckConfigVolumeMount> volumeMounts() {
        return this.volumeMounts == null ? List.of() : this.volumeMounts;
    }
    /**
     * @return The ack cluster volumes. See `volumes` below.
     * 
     */
    public List<ClusterNodeGroupAckConfigVolume> volumes() {
        return this.volumes == null ? List.of() : this.volumes;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ClusterNodeGroupAckConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String ackInstanceId;
        private @Nullable List<ClusterNodeGroupAckConfigCustomAnnotation> customAnnotations;
        private @Nullable List<ClusterNodeGroupAckConfigCustomLabel> customLabels;
        private Double limitCpu;
        private Double limitMemory;
        private String namespace;
        private @Nullable String nodeAffinity;
        private @Nullable List<ClusterNodeGroupAckConfigNodeSelector> nodeSelectors;
        private @Nullable String podAffinity;
        private @Nullable String podAntiAffinity;
        private @Nullable List<String> preStartCommands;
        private @Nullable List<ClusterNodeGroupAckConfigPvc> pvcs;
        private Double requestCpu;
        private Double requestMemory;
        private @Nullable List<ClusterNodeGroupAckConfigToleration> tolerations;
        private @Nullable List<ClusterNodeGroupAckConfigVolumeMount> volumeMounts;
        private @Nullable List<ClusterNodeGroupAckConfigVolume> volumes;
        public Builder() {}
        public Builder(ClusterNodeGroupAckConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.ackInstanceId = defaults.ackInstanceId;
    	      this.customAnnotations = defaults.customAnnotations;
    	      this.customLabels = defaults.customLabels;
    	      this.limitCpu = defaults.limitCpu;
    	      this.limitMemory = defaults.limitMemory;
    	      this.namespace = defaults.namespace;
    	      this.nodeAffinity = defaults.nodeAffinity;
    	      this.nodeSelectors = defaults.nodeSelectors;
    	      this.podAffinity = defaults.podAffinity;
    	      this.podAntiAffinity = defaults.podAntiAffinity;
    	      this.preStartCommands = defaults.preStartCommands;
    	      this.pvcs = defaults.pvcs;
    	      this.requestCpu = defaults.requestCpu;
    	      this.requestMemory = defaults.requestMemory;
    	      this.tolerations = defaults.tolerations;
    	      this.volumeMounts = defaults.volumeMounts;
    	      this.volumes = defaults.volumes;
        }

        @CustomType.Setter
        public Builder ackInstanceId(String ackInstanceId) {
            if (ackInstanceId == null) {
              throw new MissingRequiredPropertyException("ClusterNodeGroupAckConfig", "ackInstanceId");
            }
            this.ackInstanceId = ackInstanceId;
            return this;
        }
        @CustomType.Setter
        public Builder customAnnotations(@Nullable List<ClusterNodeGroupAckConfigCustomAnnotation> customAnnotations) {

            this.customAnnotations = customAnnotations;
            return this;
        }
        public Builder customAnnotations(ClusterNodeGroupAckConfigCustomAnnotation... customAnnotations) {
            return customAnnotations(List.of(customAnnotations));
        }
        @CustomType.Setter
        public Builder customLabels(@Nullable List<ClusterNodeGroupAckConfigCustomLabel> customLabels) {

            this.customLabels = customLabels;
            return this;
        }
        public Builder customLabels(ClusterNodeGroupAckConfigCustomLabel... customLabels) {
            return customLabels(List.of(customLabels));
        }
        @CustomType.Setter
        public Builder limitCpu(Double limitCpu) {
            if (limitCpu == null) {
              throw new MissingRequiredPropertyException("ClusterNodeGroupAckConfig", "limitCpu");
            }
            this.limitCpu = limitCpu;
            return this;
        }
        @CustomType.Setter
        public Builder limitMemory(Double limitMemory) {
            if (limitMemory == null) {
              throw new MissingRequiredPropertyException("ClusterNodeGroupAckConfig", "limitMemory");
            }
            this.limitMemory = limitMemory;
            return this;
        }
        @CustomType.Setter
        public Builder namespace(String namespace) {
            if (namespace == null) {
              throw new MissingRequiredPropertyException("ClusterNodeGroupAckConfig", "namespace");
            }
            this.namespace = namespace;
            return this;
        }
        @CustomType.Setter
        public Builder nodeAffinity(@Nullable String nodeAffinity) {

            this.nodeAffinity = nodeAffinity;
            return this;
        }
        @CustomType.Setter
        public Builder nodeSelectors(@Nullable List<ClusterNodeGroupAckConfigNodeSelector> nodeSelectors) {

            this.nodeSelectors = nodeSelectors;
            return this;
        }
        public Builder nodeSelectors(ClusterNodeGroupAckConfigNodeSelector... nodeSelectors) {
            return nodeSelectors(List.of(nodeSelectors));
        }
        @CustomType.Setter
        public Builder podAffinity(@Nullable String podAffinity) {

            this.podAffinity = podAffinity;
            return this;
        }
        @CustomType.Setter
        public Builder podAntiAffinity(@Nullable String podAntiAffinity) {

            this.podAntiAffinity = podAntiAffinity;
            return this;
        }
        @CustomType.Setter
        public Builder preStartCommands(@Nullable List<String> preStartCommands) {

            this.preStartCommands = preStartCommands;
            return this;
        }
        public Builder preStartCommands(String... preStartCommands) {
            return preStartCommands(List.of(preStartCommands));
        }
        @CustomType.Setter
        public Builder pvcs(@Nullable List<ClusterNodeGroupAckConfigPvc> pvcs) {

            this.pvcs = pvcs;
            return this;
        }
        public Builder pvcs(ClusterNodeGroupAckConfigPvc... pvcs) {
            return pvcs(List.of(pvcs));
        }
        @CustomType.Setter
        public Builder requestCpu(Double requestCpu) {
            if (requestCpu == null) {
              throw new MissingRequiredPropertyException("ClusterNodeGroupAckConfig", "requestCpu");
            }
            this.requestCpu = requestCpu;
            return this;
        }
        @CustomType.Setter
        public Builder requestMemory(Double requestMemory) {
            if (requestMemory == null) {
              throw new MissingRequiredPropertyException("ClusterNodeGroupAckConfig", "requestMemory");
            }
            this.requestMemory = requestMemory;
            return this;
        }
        @CustomType.Setter
        public Builder tolerations(@Nullable List<ClusterNodeGroupAckConfigToleration> tolerations) {

            this.tolerations = tolerations;
            return this;
        }
        public Builder tolerations(ClusterNodeGroupAckConfigToleration... tolerations) {
            return tolerations(List.of(tolerations));
        }
        @CustomType.Setter
        public Builder volumeMounts(@Nullable List<ClusterNodeGroupAckConfigVolumeMount> volumeMounts) {

            this.volumeMounts = volumeMounts;
            return this;
        }
        public Builder volumeMounts(ClusterNodeGroupAckConfigVolumeMount... volumeMounts) {
            return volumeMounts(List.of(volumeMounts));
        }
        @CustomType.Setter
        public Builder volumes(@Nullable List<ClusterNodeGroupAckConfigVolume> volumes) {

            this.volumes = volumes;
            return this;
        }
        public Builder volumes(ClusterNodeGroupAckConfigVolume... volumes) {
            return volumes(List.of(volumes));
        }
        public ClusterNodeGroupAckConfig build() {
            final var _resultValue = new ClusterNodeGroupAckConfig();
            _resultValue.ackInstanceId = ackInstanceId;
            _resultValue.customAnnotations = customAnnotations;
            _resultValue.customLabels = customLabels;
            _resultValue.limitCpu = limitCpu;
            _resultValue.limitMemory = limitMemory;
            _resultValue.namespace = namespace;
            _resultValue.nodeAffinity = nodeAffinity;
            _resultValue.nodeSelectors = nodeSelectors;
            _resultValue.podAffinity = podAffinity;
            _resultValue.podAntiAffinity = podAntiAffinity;
            _resultValue.preStartCommands = preStartCommands;
            _resultValue.pvcs = pvcs;
            _resultValue.requestCpu = requestCpu;
            _resultValue.requestMemory = requestMemory;
            _resultValue.tolerations = tolerations;
            _resultValue.volumeMounts = volumeMounts;
            _resultValue.volumes = volumes;
            return _resultValue;
        }
    }
}
