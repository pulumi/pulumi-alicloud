// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.maxcompute.inputs;

import com.pulumi.alicloud.maxcompute.inputs.QuotaSubQuotaInfoListArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class QuotaState extends com.pulumi.resources.ResourceArgs {

    public static final QuotaState Empty = new QuotaState();

    /**
     * Valid values: odps_intl/odpsplus_intl/odps/odpsplus
     * - *NOTE:** --odps_intl: International Station standard post-payment -- odpsplus_intl: International Station standard pre-payment -- odps: China Station standard post-payment -- odpsplus: China Station standard pre-payment
     * 
     */
    @Import(name="commodityCode")
    private @Nullable Output<String> commodityCode;

    /**
     * @return Valid values: odps_intl/odpsplus_intl/odps/odpsplus
     * - *NOTE:** --odps_intl: International Station standard post-payment -- odpsplus_intl: International Station standard pre-payment -- odps: China Station standard post-payment -- odpsplus: China Station standard pre-payment
     * 
     */
    public Optional<Output<String>> commodityCode() {
        return Optional.ofNullable(this.commodityCode);
    }

    /**
     * Define quota rules when creating quotas, for example:{&#34;CU&#34;:50,&#34;ord_time&#34;:&#34;1:Month&#34;,&#34;autoRenew&#34;:false}.
     * CU (minimum quota resource size is 50)
     * ord_time 1:Month/Year (1 means quantity: Month/Year is the unit)
     * autoRenew (whether to enable automatic renewal)
     * If PaymentType is PayAsYouGo, you do not need to fill in
     * 
     */
    @Import(name="commodityData")
    private @Nullable Output<String> commodityData;

    /**
     * @return Define quota rules when creating quotas, for example:{&#34;CU&#34;:50,&#34;ord_time&#34;:&#34;1:Month&#34;,&#34;autoRenew&#34;:false}.
     * CU (minimum quota resource size is 50)
     * ord_time 1:Month/Year (1 means quantity: Month/Year is the unit)
     * autoRenew (whether to enable automatic renewal)
     * If PaymentType is PayAsYouGo, you do not need to fill in
     * 
     */
    public Optional<Output<String>> commodityData() {
        return Optional.ofNullable(this.commodityData);
    }

    /**
     * Quota partial nickname, supports English letters and numbers, up to 24 characters
     * 
     * &gt; **NOTE:** If PaymentType is PayAsYouGo, you do not need to fill it in
     * 
     */
    @Import(name="partNickName")
    private @Nullable Output<String> partNickName;

    /**
     * @return Quota partial nickname, supports English letters and numbers, up to 24 characters
     * 
     * &gt; **NOTE:** If PaymentType is PayAsYouGo, you do not need to fill it in
     * 
     */
    public Optional<Output<String>> partNickName() {
        return Optional.ofNullable(this.partNickName);
    }

    /**
     * Payment type. Valid values: Subscription/PayAsYouGo
     * 
     * &gt; **NOTE:** -- PayAsYouGo only needs to be opened once per region
     * 
     */
    @Import(name="paymentType")
    private @Nullable Output<String> paymentType;

    /**
     * @return Payment type. Valid values: Subscription/PayAsYouGo
     * 
     * &gt; **NOTE:** -- PayAsYouGo only needs to be opened once per region
     * 
     */
    public Optional<Output<String>> paymentType() {
        return Optional.ofNullable(this.paymentType);
    }

    /**
     * Secondary Quota list
     * 
     * &gt; **NOTE:** -- Add: If the configuration contains a second-level Quota that does not exist, a second-level Quota is added. -- Delete: If the configuration does not contain the existing secondary Quota, it will be deleted. -- Modify: If the configuration is inconsistent with the existing secondary Quota configuration parameters, the secondary Quota configuration will be updated. -- The default secondary Quota must be configured and cannot be deleted.
     * See `sub_quota_info_list` below.
     * 
     */
    @Import(name="subQuotaInfoLists")
    private @Nullable Output<List<QuotaSubQuotaInfoListArgs>> subQuotaInfoLists;

    /**
     * @return Secondary Quota list
     * 
     * &gt; **NOTE:** -- Add: If the configuration contains a second-level Quota that does not exist, a second-level Quota is added. -- Delete: If the configuration does not contain the existing secondary Quota, it will be deleted. -- Modify: If the configuration is inconsistent with the existing secondary Quota configuration parameters, the secondary Quota configuration will be updated. -- The default secondary Quota must be configured and cannot be deleted.
     * See `sub_quota_info_list` below.
     * 
     */
    public Optional<Output<List<QuotaSubQuotaInfoListArgs>>> subQuotaInfoLists() {
        return Optional.ofNullable(this.subQuotaInfoLists);
    }

    private QuotaState() {}

    private QuotaState(QuotaState $) {
        this.commodityCode = $.commodityCode;
        this.commodityData = $.commodityData;
        this.partNickName = $.partNickName;
        this.paymentType = $.paymentType;
        this.subQuotaInfoLists = $.subQuotaInfoLists;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(QuotaState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private QuotaState $;

        public Builder() {
            $ = new QuotaState();
        }

        public Builder(QuotaState defaults) {
            $ = new QuotaState(Objects.requireNonNull(defaults));
        }

        /**
         * @param commodityCode Valid values: odps_intl/odpsplus_intl/odps/odpsplus
         * - *NOTE:** --odps_intl: International Station standard post-payment -- odpsplus_intl: International Station standard pre-payment -- odps: China Station standard post-payment -- odpsplus: China Station standard pre-payment
         * 
         * @return builder
         * 
         */
        public Builder commodityCode(@Nullable Output<String> commodityCode) {
            $.commodityCode = commodityCode;
            return this;
        }

        /**
         * @param commodityCode Valid values: odps_intl/odpsplus_intl/odps/odpsplus
         * - *NOTE:** --odps_intl: International Station standard post-payment -- odpsplus_intl: International Station standard pre-payment -- odps: China Station standard post-payment -- odpsplus: China Station standard pre-payment
         * 
         * @return builder
         * 
         */
        public Builder commodityCode(String commodityCode) {
            return commodityCode(Output.of(commodityCode));
        }

        /**
         * @param commodityData Define quota rules when creating quotas, for example:{&#34;CU&#34;:50,&#34;ord_time&#34;:&#34;1:Month&#34;,&#34;autoRenew&#34;:false}.
         * CU (minimum quota resource size is 50)
         * ord_time 1:Month/Year (1 means quantity: Month/Year is the unit)
         * autoRenew (whether to enable automatic renewal)
         * If PaymentType is PayAsYouGo, you do not need to fill in
         * 
         * @return builder
         * 
         */
        public Builder commodityData(@Nullable Output<String> commodityData) {
            $.commodityData = commodityData;
            return this;
        }

        /**
         * @param commodityData Define quota rules when creating quotas, for example:{&#34;CU&#34;:50,&#34;ord_time&#34;:&#34;1:Month&#34;,&#34;autoRenew&#34;:false}.
         * CU (minimum quota resource size is 50)
         * ord_time 1:Month/Year (1 means quantity: Month/Year is the unit)
         * autoRenew (whether to enable automatic renewal)
         * If PaymentType is PayAsYouGo, you do not need to fill in
         * 
         * @return builder
         * 
         */
        public Builder commodityData(String commodityData) {
            return commodityData(Output.of(commodityData));
        }

        /**
         * @param partNickName Quota partial nickname, supports English letters and numbers, up to 24 characters
         * 
         * &gt; **NOTE:** If PaymentType is PayAsYouGo, you do not need to fill it in
         * 
         * @return builder
         * 
         */
        public Builder partNickName(@Nullable Output<String> partNickName) {
            $.partNickName = partNickName;
            return this;
        }

        /**
         * @param partNickName Quota partial nickname, supports English letters and numbers, up to 24 characters
         * 
         * &gt; **NOTE:** If PaymentType is PayAsYouGo, you do not need to fill it in
         * 
         * @return builder
         * 
         */
        public Builder partNickName(String partNickName) {
            return partNickName(Output.of(partNickName));
        }

        /**
         * @param paymentType Payment type. Valid values: Subscription/PayAsYouGo
         * 
         * &gt; **NOTE:** -- PayAsYouGo only needs to be opened once per region
         * 
         * @return builder
         * 
         */
        public Builder paymentType(@Nullable Output<String> paymentType) {
            $.paymentType = paymentType;
            return this;
        }

        /**
         * @param paymentType Payment type. Valid values: Subscription/PayAsYouGo
         * 
         * &gt; **NOTE:** -- PayAsYouGo only needs to be opened once per region
         * 
         * @return builder
         * 
         */
        public Builder paymentType(String paymentType) {
            return paymentType(Output.of(paymentType));
        }

        /**
         * @param subQuotaInfoLists Secondary Quota list
         * 
         * &gt; **NOTE:** -- Add: If the configuration contains a second-level Quota that does not exist, a second-level Quota is added. -- Delete: If the configuration does not contain the existing secondary Quota, it will be deleted. -- Modify: If the configuration is inconsistent with the existing secondary Quota configuration parameters, the secondary Quota configuration will be updated. -- The default secondary Quota must be configured and cannot be deleted.
         * See `sub_quota_info_list` below.
         * 
         * @return builder
         * 
         */
        public Builder subQuotaInfoLists(@Nullable Output<List<QuotaSubQuotaInfoListArgs>> subQuotaInfoLists) {
            $.subQuotaInfoLists = subQuotaInfoLists;
            return this;
        }

        /**
         * @param subQuotaInfoLists Secondary Quota list
         * 
         * &gt; **NOTE:** -- Add: If the configuration contains a second-level Quota that does not exist, a second-level Quota is added. -- Delete: If the configuration does not contain the existing secondary Quota, it will be deleted. -- Modify: If the configuration is inconsistent with the existing secondary Quota configuration parameters, the secondary Quota configuration will be updated. -- The default secondary Quota must be configured and cannot be deleted.
         * See `sub_quota_info_list` below.
         * 
         * @return builder
         * 
         */
        public Builder subQuotaInfoLists(List<QuotaSubQuotaInfoListArgs> subQuotaInfoLists) {
            return subQuotaInfoLists(Output.of(subQuotaInfoLists));
        }

        /**
         * @param subQuotaInfoLists Secondary Quota list
         * 
         * &gt; **NOTE:** -- Add: If the configuration contains a second-level Quota that does not exist, a second-level Quota is added. -- Delete: If the configuration does not contain the existing secondary Quota, it will be deleted. -- Modify: If the configuration is inconsistent with the existing secondary Quota configuration parameters, the secondary Quota configuration will be updated. -- The default secondary Quota must be configured and cannot be deleted.
         * See `sub_quota_info_list` below.
         * 
         * @return builder
         * 
         */
        public Builder subQuotaInfoLists(QuotaSubQuotaInfoListArgs... subQuotaInfoLists) {
            return subQuotaInfoLists(List.of(subQuotaInfoLists));
        }

        public QuotaState build() {
            return $;
        }
    }

}
