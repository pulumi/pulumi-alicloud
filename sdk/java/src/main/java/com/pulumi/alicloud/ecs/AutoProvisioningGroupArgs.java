// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.ecs;

import com.pulumi.alicloud.ecs.inputs.AutoProvisioningGroupLaunchTemplateConfigArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AutoProvisioningGroupArgs extends com.pulumi.resources.ResourceArgs {

    public static final AutoProvisioningGroupArgs Empty = new AutoProvisioningGroupArgs();

    /**
     * The name of the auto provisioning group to be created. It must be 2 to 128 characters in length. It must start with a letter but cannot start with http:// or https://. It can contain letters, digits, colons (:), underscores (_), and hyphens (-)
     * 
     */
    @Import(name="autoProvisioningGroupName")
    private @Nullable Output<String> autoProvisioningGroupName;

    /**
     * @return The name of the auto provisioning group to be created. It must be 2 to 128 characters in length. It must start with a letter but cannot start with http:// or https://. It can contain letters, digits, colons (:), underscores (_), and hyphens (-)
     * 
     */
    public Optional<Output<String>> autoProvisioningGroupName() {
        return Optional.ofNullable(this.autoProvisioningGroupName);
    }

    /**
     * The type of the auto provisioning group. Valid values:`request` and `maintain`,Default value: `maintain`.
     * 
     */
    @Import(name="autoProvisioningGroupType")
    private @Nullable Output<String> autoProvisioningGroupType;

    /**
     * @return The type of the auto provisioning group. Valid values:`request` and `maintain`,Default value: `maintain`.
     * 
     */
    public Optional<Output<String>> autoProvisioningGroupType() {
        return Optional.ofNullable(this.autoProvisioningGroupType);
    }

    /**
     * The type of supplemental instances. When the total value of `PayAsYouGoTargetCapacity` and `SpotTargetCapacity` is smaller than the value of TotalTargetCapacity, the auto provisioning group will create instances of the specified type to meet the capacity requirements. Valid values:`PayAsYouGo`: Pay-as-you-go instances; `Spot`: Preemptible instances, Default value: `Spot`.
     * 
     */
    @Import(name="defaultTargetCapacityType")
    private @Nullable Output<String> defaultTargetCapacityType;

    /**
     * @return The type of supplemental instances. When the total value of `PayAsYouGoTargetCapacity` and `SpotTargetCapacity` is smaller than the value of TotalTargetCapacity, the auto provisioning group will create instances of the specified type to meet the capacity requirements. Valid values:`PayAsYouGo`: Pay-as-you-go instances; `Spot`: Preemptible instances, Default value: `Spot`.
     * 
     */
    public Optional<Output<String>> defaultTargetCapacityType() {
        return Optional.ofNullable(this.defaultTargetCapacityType);
    }

    /**
     * The description of the auto provisioning group.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The description of the auto provisioning group.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The shutdown policy for excess preemptible instances followed when the capacity of the auto provisioning group exceeds the target capacity. Valid values: `no-termination` and `termination`,Default value: `no-termination`.
     * 
     */
    @Import(name="excessCapacityTerminationPolicy")
    private @Nullable Output<String> excessCapacityTerminationPolicy;

    /**
     * @return The shutdown policy for excess preemptible instances followed when the capacity of the auto provisioning group exceeds the target capacity. Valid values: `no-termination` and `termination`,Default value: `no-termination`.
     * 
     */
    public Optional<Output<String>> excessCapacityTerminationPolicy() {
        return Optional.ofNullable(this.excessCapacityTerminationPolicy);
    }

    /**
     * DataDisk mappings to attach to ecs instance. See `block-config` below for details.
     * 
     */
    @Import(name="launchTemplateConfigs", required=true)
    private Output<List<AutoProvisioningGroupLaunchTemplateConfigArgs>> launchTemplateConfigs;

    /**
     * @return DataDisk mappings to attach to ecs instance. See `block-config` below for details.
     * 
     */
    public Output<List<AutoProvisioningGroupLaunchTemplateConfigArgs>> launchTemplateConfigs() {
        return this.launchTemplateConfigs;
    }

    /**
     * The ID of the instance launch template associated with the auto provisioning group.
     * 
     */
    @Import(name="launchTemplateId", required=true)
    private Output<String> launchTemplateId;

    /**
     * @return The ID of the instance launch template associated with the auto provisioning group.
     * 
     */
    public Output<String> launchTemplateId() {
        return this.launchTemplateId;
    }

    /**
     * The version of the instance launch template associated with the auto provisioning group.
     * 
     */
    @Import(name="launchTemplateVersion")
    private @Nullable Output<String> launchTemplateVersion;

    /**
     * @return The version of the instance launch template associated with the auto provisioning group.
     * 
     */
    public Optional<Output<String>> launchTemplateVersion() {
        return Optional.ofNullable(this.launchTemplateVersion);
    }

    /**
     * The global maximum price for preemptible instances in the auto provisioning group. If both the `MaxSpotPrice` and `LaunchTemplateConfig.N.MaxPrice` parameters are specified, the maximum price is the lower value of the two.
     * 
     */
    @Import(name="maxSpotPrice")
    private @Nullable Output<Double> maxSpotPrice;

    /**
     * @return The global maximum price for preemptible instances in the auto provisioning group. If both the `MaxSpotPrice` and `LaunchTemplateConfig.N.MaxPrice` parameters are specified, the maximum price is the lower value of the two.
     * 
     */
    public Optional<Output<Double>> maxSpotPrice() {
        return Optional.ofNullable(this.maxSpotPrice);
    }

    /**
     * The scale-out policy for pay-as-you-go instances. Valid values: `lowest-price` and `prioritized`,Default value: `lowest-price`.
     * 
     */
    @Import(name="payAsYouGoAllocationStrategy")
    private @Nullable Output<String> payAsYouGoAllocationStrategy;

    /**
     * @return The scale-out policy for pay-as-you-go instances. Valid values: `lowest-price` and `prioritized`,Default value: `lowest-price`.
     * 
     */
    public Optional<Output<String>> payAsYouGoAllocationStrategy() {
        return Optional.ofNullable(this.payAsYouGoAllocationStrategy);
    }

    /**
     * The target capacity of pay-as-you-go instances in the auto provisioning group.
     * 
     */
    @Import(name="payAsYouGoTargetCapacity")
    private @Nullable Output<String> payAsYouGoTargetCapacity;

    /**
     * @return The target capacity of pay-as-you-go instances in the auto provisioning group.
     * 
     */
    public Optional<Output<String>> payAsYouGoTargetCapacity() {
        return Optional.ofNullable(this.payAsYouGoTargetCapacity);
    }

    /**
     * The scale-out policy for preemptible instances. Valid values:`lowest-price` and `diversified`,Default value: `lowest-price`.
     * 
     */
    @Import(name="spotAllocationStrategy")
    private @Nullable Output<String> spotAllocationStrategy;

    /**
     * @return The scale-out policy for preemptible instances. Valid values:`lowest-price` and `diversified`,Default value: `lowest-price`.
     * 
     */
    public Optional<Output<String>> spotAllocationStrategy() {
        return Optional.ofNullable(this.spotAllocationStrategy);
    }

    /**
     * The default behavior after preemptible instances are shut down. Valid values: `stop` and `terminate`,Default value: `stop`.
     * 
     */
    @Import(name="spotInstanceInterruptionBehavior")
    private @Nullable Output<String> spotInstanceInterruptionBehavior;

    /**
     * @return The default behavior after preemptible instances are shut down. Valid values: `stop` and `terminate`,Default value: `stop`.
     * 
     */
    public Optional<Output<String>> spotInstanceInterruptionBehavior() {
        return Optional.ofNullable(this.spotInstanceInterruptionBehavior);
    }

    /**
     * This parameter takes effect when the `SpotAllocationStrategy` parameter is set to `lowest-price`. The auto provisioning group selects instance types of the lowest cost to create instances.
     * 
     */
    @Import(name="spotInstancePoolsToUseCount")
    private @Nullable Output<Integer> spotInstancePoolsToUseCount;

    /**
     * @return This parameter takes effect when the `SpotAllocationStrategy` parameter is set to `lowest-price`. The auto provisioning group selects instance types of the lowest cost to create instances.
     * 
     */
    public Optional<Output<Integer>> spotInstancePoolsToUseCount() {
        return Optional.ofNullable(this.spotInstancePoolsToUseCount);
    }

    /**
     * The target capacity of preemptible instances in the auto provisioning group.
     * 
     */
    @Import(name="spotTargetCapacity")
    private @Nullable Output<String> spotTargetCapacity;

    /**
     * @return The target capacity of preemptible instances in the auto provisioning group.
     * 
     */
    public Optional<Output<String>> spotTargetCapacity() {
        return Optional.ofNullable(this.spotTargetCapacity);
    }

    /**
     * Specifies whether to release instances of the auto provisioning group. Valid values:`false` and `true`, default value: `false`.
     * 
     */
    @Import(name="terminateInstances")
    private @Nullable Output<Boolean> terminateInstances;

    /**
     * @return Specifies whether to release instances of the auto provisioning group. Valid values:`false` and `true`, default value: `false`.
     * 
     */
    public Optional<Output<Boolean>> terminateInstances() {
        return Optional.ofNullable(this.terminateInstances);
    }

    /**
     * The shutdown policy for preemptible instances when the auto provisioning group expires. Valid values: `false` and `true`, default value: `false`.
     * 
     */
    @Import(name="terminateInstancesWithExpiration")
    private @Nullable Output<Boolean> terminateInstancesWithExpiration;

    /**
     * @return The shutdown policy for preemptible instances when the auto provisioning group expires. Valid values: `false` and `true`, default value: `false`.
     * 
     */
    public Optional<Output<Boolean>> terminateInstancesWithExpiration() {
        return Optional.ofNullable(this.terminateInstancesWithExpiration);
    }

    /**
     * The total target capacity of the auto provisioning group. The target capacity consists of the following three parts:PayAsYouGoTargetCapacity,SpotTargetCapacity and the supplemental capacity besides PayAsYouGoTargetCapacity and SpotTargetCapacity.
     * 
     */
    @Import(name="totalTargetCapacity", required=true)
    private Output<String> totalTargetCapacity;

    /**
     * @return The total target capacity of the auto provisioning group. The target capacity consists of the following three parts:PayAsYouGoTargetCapacity,SpotTargetCapacity and the supplemental capacity besides PayAsYouGoTargetCapacity and SpotTargetCapacity.
     * 
     */
    public Output<String> totalTargetCapacity() {
        return this.totalTargetCapacity;
    }

    /**
     * The time when the auto provisioning group is started. The period of time between this point in time and the point in time specified by the `valid_until` parameter is the effective time period of the auto provisioning group.By default, an auto provisioning group is immediately started after creation.
     * 
     */
    @Import(name="validFrom")
    private @Nullable Output<String> validFrom;

    /**
     * @return The time when the auto provisioning group is started. The period of time between this point in time and the point in time specified by the `valid_until` parameter is the effective time period of the auto provisioning group.By default, an auto provisioning group is immediately started after creation.
     * 
     */
    public Optional<Output<String>> validFrom() {
        return Optional.ofNullable(this.validFrom);
    }

    /**
     * The time when the auto provisioning group expires. The period of time between this point in time and the point in time specified by the `valid_from` parameter is the effective time period of the auto provisioning group.By default, an auto provisioning group never expires.
     * 
     */
    @Import(name="validUntil")
    private @Nullable Output<String> validUntil;

    /**
     * @return The time when the auto provisioning group expires. The period of time between this point in time and the point in time specified by the `valid_from` parameter is the effective time period of the auto provisioning group.By default, an auto provisioning group never expires.
     * 
     */
    public Optional<Output<String>> validUntil() {
        return Optional.ofNullable(this.validUntil);
    }

    private AutoProvisioningGroupArgs() {}

    private AutoProvisioningGroupArgs(AutoProvisioningGroupArgs $) {
        this.autoProvisioningGroupName = $.autoProvisioningGroupName;
        this.autoProvisioningGroupType = $.autoProvisioningGroupType;
        this.defaultTargetCapacityType = $.defaultTargetCapacityType;
        this.description = $.description;
        this.excessCapacityTerminationPolicy = $.excessCapacityTerminationPolicy;
        this.launchTemplateConfigs = $.launchTemplateConfigs;
        this.launchTemplateId = $.launchTemplateId;
        this.launchTemplateVersion = $.launchTemplateVersion;
        this.maxSpotPrice = $.maxSpotPrice;
        this.payAsYouGoAllocationStrategy = $.payAsYouGoAllocationStrategy;
        this.payAsYouGoTargetCapacity = $.payAsYouGoTargetCapacity;
        this.spotAllocationStrategy = $.spotAllocationStrategy;
        this.spotInstanceInterruptionBehavior = $.spotInstanceInterruptionBehavior;
        this.spotInstancePoolsToUseCount = $.spotInstancePoolsToUseCount;
        this.spotTargetCapacity = $.spotTargetCapacity;
        this.terminateInstances = $.terminateInstances;
        this.terminateInstancesWithExpiration = $.terminateInstancesWithExpiration;
        this.totalTargetCapacity = $.totalTargetCapacity;
        this.validFrom = $.validFrom;
        this.validUntil = $.validUntil;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AutoProvisioningGroupArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AutoProvisioningGroupArgs $;

        public Builder() {
            $ = new AutoProvisioningGroupArgs();
        }

        public Builder(AutoProvisioningGroupArgs defaults) {
            $ = new AutoProvisioningGroupArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param autoProvisioningGroupName The name of the auto provisioning group to be created. It must be 2 to 128 characters in length. It must start with a letter but cannot start with http:// or https://. It can contain letters, digits, colons (:), underscores (_), and hyphens (-)
         * 
         * @return builder
         * 
         */
        public Builder autoProvisioningGroupName(@Nullable Output<String> autoProvisioningGroupName) {
            $.autoProvisioningGroupName = autoProvisioningGroupName;
            return this;
        }

        /**
         * @param autoProvisioningGroupName The name of the auto provisioning group to be created. It must be 2 to 128 characters in length. It must start with a letter but cannot start with http:// or https://. It can contain letters, digits, colons (:), underscores (_), and hyphens (-)
         * 
         * @return builder
         * 
         */
        public Builder autoProvisioningGroupName(String autoProvisioningGroupName) {
            return autoProvisioningGroupName(Output.of(autoProvisioningGroupName));
        }

        /**
         * @param autoProvisioningGroupType The type of the auto provisioning group. Valid values:`request` and `maintain`,Default value: `maintain`.
         * 
         * @return builder
         * 
         */
        public Builder autoProvisioningGroupType(@Nullable Output<String> autoProvisioningGroupType) {
            $.autoProvisioningGroupType = autoProvisioningGroupType;
            return this;
        }

        /**
         * @param autoProvisioningGroupType The type of the auto provisioning group. Valid values:`request` and `maintain`,Default value: `maintain`.
         * 
         * @return builder
         * 
         */
        public Builder autoProvisioningGroupType(String autoProvisioningGroupType) {
            return autoProvisioningGroupType(Output.of(autoProvisioningGroupType));
        }

        /**
         * @param defaultTargetCapacityType The type of supplemental instances. When the total value of `PayAsYouGoTargetCapacity` and `SpotTargetCapacity` is smaller than the value of TotalTargetCapacity, the auto provisioning group will create instances of the specified type to meet the capacity requirements. Valid values:`PayAsYouGo`: Pay-as-you-go instances; `Spot`: Preemptible instances, Default value: `Spot`.
         * 
         * @return builder
         * 
         */
        public Builder defaultTargetCapacityType(@Nullable Output<String> defaultTargetCapacityType) {
            $.defaultTargetCapacityType = defaultTargetCapacityType;
            return this;
        }

        /**
         * @param defaultTargetCapacityType The type of supplemental instances. When the total value of `PayAsYouGoTargetCapacity` and `SpotTargetCapacity` is smaller than the value of TotalTargetCapacity, the auto provisioning group will create instances of the specified type to meet the capacity requirements. Valid values:`PayAsYouGo`: Pay-as-you-go instances; `Spot`: Preemptible instances, Default value: `Spot`.
         * 
         * @return builder
         * 
         */
        public Builder defaultTargetCapacityType(String defaultTargetCapacityType) {
            return defaultTargetCapacityType(Output.of(defaultTargetCapacityType));
        }

        /**
         * @param description The description of the auto provisioning group.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The description of the auto provisioning group.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param excessCapacityTerminationPolicy The shutdown policy for excess preemptible instances followed when the capacity of the auto provisioning group exceeds the target capacity. Valid values: `no-termination` and `termination`,Default value: `no-termination`.
         * 
         * @return builder
         * 
         */
        public Builder excessCapacityTerminationPolicy(@Nullable Output<String> excessCapacityTerminationPolicy) {
            $.excessCapacityTerminationPolicy = excessCapacityTerminationPolicy;
            return this;
        }

        /**
         * @param excessCapacityTerminationPolicy The shutdown policy for excess preemptible instances followed when the capacity of the auto provisioning group exceeds the target capacity. Valid values: `no-termination` and `termination`,Default value: `no-termination`.
         * 
         * @return builder
         * 
         */
        public Builder excessCapacityTerminationPolicy(String excessCapacityTerminationPolicy) {
            return excessCapacityTerminationPolicy(Output.of(excessCapacityTerminationPolicy));
        }

        /**
         * @param launchTemplateConfigs DataDisk mappings to attach to ecs instance. See `block-config` below for details.
         * 
         * @return builder
         * 
         */
        public Builder launchTemplateConfigs(Output<List<AutoProvisioningGroupLaunchTemplateConfigArgs>> launchTemplateConfigs) {
            $.launchTemplateConfigs = launchTemplateConfigs;
            return this;
        }

        /**
         * @param launchTemplateConfigs DataDisk mappings to attach to ecs instance. See `block-config` below for details.
         * 
         * @return builder
         * 
         */
        public Builder launchTemplateConfigs(List<AutoProvisioningGroupLaunchTemplateConfigArgs> launchTemplateConfigs) {
            return launchTemplateConfigs(Output.of(launchTemplateConfigs));
        }

        /**
         * @param launchTemplateConfigs DataDisk mappings to attach to ecs instance. See `block-config` below for details.
         * 
         * @return builder
         * 
         */
        public Builder launchTemplateConfigs(AutoProvisioningGroupLaunchTemplateConfigArgs... launchTemplateConfigs) {
            return launchTemplateConfigs(List.of(launchTemplateConfigs));
        }

        /**
         * @param launchTemplateId The ID of the instance launch template associated with the auto provisioning group.
         * 
         * @return builder
         * 
         */
        public Builder launchTemplateId(Output<String> launchTemplateId) {
            $.launchTemplateId = launchTemplateId;
            return this;
        }

        /**
         * @param launchTemplateId The ID of the instance launch template associated with the auto provisioning group.
         * 
         * @return builder
         * 
         */
        public Builder launchTemplateId(String launchTemplateId) {
            return launchTemplateId(Output.of(launchTemplateId));
        }

        /**
         * @param launchTemplateVersion The version of the instance launch template associated with the auto provisioning group.
         * 
         * @return builder
         * 
         */
        public Builder launchTemplateVersion(@Nullable Output<String> launchTemplateVersion) {
            $.launchTemplateVersion = launchTemplateVersion;
            return this;
        }

        /**
         * @param launchTemplateVersion The version of the instance launch template associated with the auto provisioning group.
         * 
         * @return builder
         * 
         */
        public Builder launchTemplateVersion(String launchTemplateVersion) {
            return launchTemplateVersion(Output.of(launchTemplateVersion));
        }

        /**
         * @param maxSpotPrice The global maximum price for preemptible instances in the auto provisioning group. If both the `MaxSpotPrice` and `LaunchTemplateConfig.N.MaxPrice` parameters are specified, the maximum price is the lower value of the two.
         * 
         * @return builder
         * 
         */
        public Builder maxSpotPrice(@Nullable Output<Double> maxSpotPrice) {
            $.maxSpotPrice = maxSpotPrice;
            return this;
        }

        /**
         * @param maxSpotPrice The global maximum price for preemptible instances in the auto provisioning group. If both the `MaxSpotPrice` and `LaunchTemplateConfig.N.MaxPrice` parameters are specified, the maximum price is the lower value of the two.
         * 
         * @return builder
         * 
         */
        public Builder maxSpotPrice(Double maxSpotPrice) {
            return maxSpotPrice(Output.of(maxSpotPrice));
        }

        /**
         * @param payAsYouGoAllocationStrategy The scale-out policy for pay-as-you-go instances. Valid values: `lowest-price` and `prioritized`,Default value: `lowest-price`.
         * 
         * @return builder
         * 
         */
        public Builder payAsYouGoAllocationStrategy(@Nullable Output<String> payAsYouGoAllocationStrategy) {
            $.payAsYouGoAllocationStrategy = payAsYouGoAllocationStrategy;
            return this;
        }

        /**
         * @param payAsYouGoAllocationStrategy The scale-out policy for pay-as-you-go instances. Valid values: `lowest-price` and `prioritized`,Default value: `lowest-price`.
         * 
         * @return builder
         * 
         */
        public Builder payAsYouGoAllocationStrategy(String payAsYouGoAllocationStrategy) {
            return payAsYouGoAllocationStrategy(Output.of(payAsYouGoAllocationStrategy));
        }

        /**
         * @param payAsYouGoTargetCapacity The target capacity of pay-as-you-go instances in the auto provisioning group.
         * 
         * @return builder
         * 
         */
        public Builder payAsYouGoTargetCapacity(@Nullable Output<String> payAsYouGoTargetCapacity) {
            $.payAsYouGoTargetCapacity = payAsYouGoTargetCapacity;
            return this;
        }

        /**
         * @param payAsYouGoTargetCapacity The target capacity of pay-as-you-go instances in the auto provisioning group.
         * 
         * @return builder
         * 
         */
        public Builder payAsYouGoTargetCapacity(String payAsYouGoTargetCapacity) {
            return payAsYouGoTargetCapacity(Output.of(payAsYouGoTargetCapacity));
        }

        /**
         * @param spotAllocationStrategy The scale-out policy for preemptible instances. Valid values:`lowest-price` and `diversified`,Default value: `lowest-price`.
         * 
         * @return builder
         * 
         */
        public Builder spotAllocationStrategy(@Nullable Output<String> spotAllocationStrategy) {
            $.spotAllocationStrategy = spotAllocationStrategy;
            return this;
        }

        /**
         * @param spotAllocationStrategy The scale-out policy for preemptible instances. Valid values:`lowest-price` and `diversified`,Default value: `lowest-price`.
         * 
         * @return builder
         * 
         */
        public Builder spotAllocationStrategy(String spotAllocationStrategy) {
            return spotAllocationStrategy(Output.of(spotAllocationStrategy));
        }

        /**
         * @param spotInstanceInterruptionBehavior The default behavior after preemptible instances are shut down. Valid values: `stop` and `terminate`,Default value: `stop`.
         * 
         * @return builder
         * 
         */
        public Builder spotInstanceInterruptionBehavior(@Nullable Output<String> spotInstanceInterruptionBehavior) {
            $.spotInstanceInterruptionBehavior = spotInstanceInterruptionBehavior;
            return this;
        }

        /**
         * @param spotInstanceInterruptionBehavior The default behavior after preemptible instances are shut down. Valid values: `stop` and `terminate`,Default value: `stop`.
         * 
         * @return builder
         * 
         */
        public Builder spotInstanceInterruptionBehavior(String spotInstanceInterruptionBehavior) {
            return spotInstanceInterruptionBehavior(Output.of(spotInstanceInterruptionBehavior));
        }

        /**
         * @param spotInstancePoolsToUseCount This parameter takes effect when the `SpotAllocationStrategy` parameter is set to `lowest-price`. The auto provisioning group selects instance types of the lowest cost to create instances.
         * 
         * @return builder
         * 
         */
        public Builder spotInstancePoolsToUseCount(@Nullable Output<Integer> spotInstancePoolsToUseCount) {
            $.spotInstancePoolsToUseCount = spotInstancePoolsToUseCount;
            return this;
        }

        /**
         * @param spotInstancePoolsToUseCount This parameter takes effect when the `SpotAllocationStrategy` parameter is set to `lowest-price`. The auto provisioning group selects instance types of the lowest cost to create instances.
         * 
         * @return builder
         * 
         */
        public Builder spotInstancePoolsToUseCount(Integer spotInstancePoolsToUseCount) {
            return spotInstancePoolsToUseCount(Output.of(spotInstancePoolsToUseCount));
        }

        /**
         * @param spotTargetCapacity The target capacity of preemptible instances in the auto provisioning group.
         * 
         * @return builder
         * 
         */
        public Builder spotTargetCapacity(@Nullable Output<String> spotTargetCapacity) {
            $.spotTargetCapacity = spotTargetCapacity;
            return this;
        }

        /**
         * @param spotTargetCapacity The target capacity of preemptible instances in the auto provisioning group.
         * 
         * @return builder
         * 
         */
        public Builder spotTargetCapacity(String spotTargetCapacity) {
            return spotTargetCapacity(Output.of(spotTargetCapacity));
        }

        /**
         * @param terminateInstances Specifies whether to release instances of the auto provisioning group. Valid values:`false` and `true`, default value: `false`.
         * 
         * @return builder
         * 
         */
        public Builder terminateInstances(@Nullable Output<Boolean> terminateInstances) {
            $.terminateInstances = terminateInstances;
            return this;
        }

        /**
         * @param terminateInstances Specifies whether to release instances of the auto provisioning group. Valid values:`false` and `true`, default value: `false`.
         * 
         * @return builder
         * 
         */
        public Builder terminateInstances(Boolean terminateInstances) {
            return terminateInstances(Output.of(terminateInstances));
        }

        /**
         * @param terminateInstancesWithExpiration The shutdown policy for preemptible instances when the auto provisioning group expires. Valid values: `false` and `true`, default value: `false`.
         * 
         * @return builder
         * 
         */
        public Builder terminateInstancesWithExpiration(@Nullable Output<Boolean> terminateInstancesWithExpiration) {
            $.terminateInstancesWithExpiration = terminateInstancesWithExpiration;
            return this;
        }

        /**
         * @param terminateInstancesWithExpiration The shutdown policy for preemptible instances when the auto provisioning group expires. Valid values: `false` and `true`, default value: `false`.
         * 
         * @return builder
         * 
         */
        public Builder terminateInstancesWithExpiration(Boolean terminateInstancesWithExpiration) {
            return terminateInstancesWithExpiration(Output.of(terminateInstancesWithExpiration));
        }

        /**
         * @param totalTargetCapacity The total target capacity of the auto provisioning group. The target capacity consists of the following three parts:PayAsYouGoTargetCapacity,SpotTargetCapacity and the supplemental capacity besides PayAsYouGoTargetCapacity and SpotTargetCapacity.
         * 
         * @return builder
         * 
         */
        public Builder totalTargetCapacity(Output<String> totalTargetCapacity) {
            $.totalTargetCapacity = totalTargetCapacity;
            return this;
        }

        /**
         * @param totalTargetCapacity The total target capacity of the auto provisioning group. The target capacity consists of the following three parts:PayAsYouGoTargetCapacity,SpotTargetCapacity and the supplemental capacity besides PayAsYouGoTargetCapacity and SpotTargetCapacity.
         * 
         * @return builder
         * 
         */
        public Builder totalTargetCapacity(String totalTargetCapacity) {
            return totalTargetCapacity(Output.of(totalTargetCapacity));
        }

        /**
         * @param validFrom The time when the auto provisioning group is started. The period of time between this point in time and the point in time specified by the `valid_until` parameter is the effective time period of the auto provisioning group.By default, an auto provisioning group is immediately started after creation.
         * 
         * @return builder
         * 
         */
        public Builder validFrom(@Nullable Output<String> validFrom) {
            $.validFrom = validFrom;
            return this;
        }

        /**
         * @param validFrom The time when the auto provisioning group is started. The period of time between this point in time and the point in time specified by the `valid_until` parameter is the effective time period of the auto provisioning group.By default, an auto provisioning group is immediately started after creation.
         * 
         * @return builder
         * 
         */
        public Builder validFrom(String validFrom) {
            return validFrom(Output.of(validFrom));
        }

        /**
         * @param validUntil The time when the auto provisioning group expires. The period of time between this point in time and the point in time specified by the `valid_from` parameter is the effective time period of the auto provisioning group.By default, an auto provisioning group never expires.
         * 
         * @return builder
         * 
         */
        public Builder validUntil(@Nullable Output<String> validUntil) {
            $.validUntil = validUntil;
            return this;
        }

        /**
         * @param validUntil The time when the auto provisioning group expires. The period of time between this point in time and the point in time specified by the `valid_from` parameter is the effective time period of the auto provisioning group.By default, an auto provisioning group never expires.
         * 
         * @return builder
         * 
         */
        public Builder validUntil(String validUntil) {
            return validUntil(Output.of(validUntil));
        }

        public AutoProvisioningGroupArgs build() {
            if ($.launchTemplateConfigs == null) {
                throw new MissingRequiredPropertyException("AutoProvisioningGroupArgs", "launchTemplateConfigs");
            }
            if ($.launchTemplateId == null) {
                throw new MissingRequiredPropertyException("AutoProvisioningGroupArgs", "launchTemplateId");
            }
            if ($.totalTargetCapacity == null) {
                throw new MissingRequiredPropertyException("AutoProvisioningGroupArgs", "totalTargetCapacity");
            }
            return $;
        }
    }

}
