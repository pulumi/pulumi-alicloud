// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.sls.inputs;

import com.pulumi.alicloud.sls.inputs.EtlConfigurationArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class EtlState extends com.pulumi.resources.ResourceArgs {

    public static final EtlState Empty = new EtlState();

    /**
     * The ETL configuration. See `configuration` below.
     * 
     */
    @Import(name="configuration")
    private @Nullable Output<EtlConfigurationArgs> configuration;

    /**
     * @return The ETL configuration. See `configuration` below.
     * 
     */
    public Optional<Output<EtlConfigurationArgs>> configuration() {
        return Optional.ofNullable(this.configuration);
    }

    /**
     * The time when the data transformation job was created.
     * 
     */
    @Import(name="createTime")
    private @Nullable Output<Integer> createTime;

    /**
     * @return The time when the data transformation job was created.
     * 
     */
    public Optional<Output<Integer>> createTime() {
        return Optional.ofNullable(this.createTime);
    }

    /**
     * Data Processing Task Description.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Data Processing Task Description.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Data processing task display name.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return Data processing task display name.
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * Unique identification of data processing task.
     * 
     */
    @Import(name="jobName")
    private @Nullable Output<String> jobName;

    /**
     * @return Unique identification of data processing task.
     * 
     */
    public Optional<Output<String>> jobName() {
        return Optional.ofNullable(this.jobName);
    }

    /**
     * Project Name.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return Project Name.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * The status of the data transformation job.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return The status of the data transformation job.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    private EtlState() {}

    private EtlState(EtlState $) {
        this.configuration = $.configuration;
        this.createTime = $.createTime;
        this.description = $.description;
        this.displayName = $.displayName;
        this.jobName = $.jobName;
        this.project = $.project;
        this.status = $.status;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(EtlState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private EtlState $;

        public Builder() {
            $ = new EtlState();
        }

        public Builder(EtlState defaults) {
            $ = new EtlState(Objects.requireNonNull(defaults));
        }

        /**
         * @param configuration The ETL configuration. See `configuration` below.
         * 
         * @return builder
         * 
         */
        public Builder configuration(@Nullable Output<EtlConfigurationArgs> configuration) {
            $.configuration = configuration;
            return this;
        }

        /**
         * @param configuration The ETL configuration. See `configuration` below.
         * 
         * @return builder
         * 
         */
        public Builder configuration(EtlConfigurationArgs configuration) {
            return configuration(Output.of(configuration));
        }

        /**
         * @param createTime The time when the data transformation job was created.
         * 
         * @return builder
         * 
         */
        public Builder createTime(@Nullable Output<Integer> createTime) {
            $.createTime = createTime;
            return this;
        }

        /**
         * @param createTime The time when the data transformation job was created.
         * 
         * @return builder
         * 
         */
        public Builder createTime(Integer createTime) {
            return createTime(Output.of(createTime));
        }

        /**
         * @param description Data Processing Task Description.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Data Processing Task Description.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param displayName Data processing task display name.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName Data processing task display name.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param jobName Unique identification of data processing task.
         * 
         * @return builder
         * 
         */
        public Builder jobName(@Nullable Output<String> jobName) {
            $.jobName = jobName;
            return this;
        }

        /**
         * @param jobName Unique identification of data processing task.
         * 
         * @return builder
         * 
         */
        public Builder jobName(String jobName) {
            return jobName(Output.of(jobName));
        }

        /**
         * @param project Project Name.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project Project Name.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param status The status of the data transformation job.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status The status of the data transformation job.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        public EtlState build() {
            return $;
        }
    }

}
