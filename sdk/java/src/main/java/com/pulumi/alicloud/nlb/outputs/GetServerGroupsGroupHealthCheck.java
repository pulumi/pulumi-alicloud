// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.nlb.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetServerGroupsGroupHealthCheck {
    /**
     * @return The backend port that is used for health checks.
     * 
     */
    private Integer healthCheckConnectPort;
    /**
     * @return The maximum timeout period of a health check response.
     * 
     */
    private Integer healthCheckConnectTimeout;
    /**
     * @return The domain name that is used for health checks.
     * 
     */
    private String healthCheckDomain;
    /**
     * @return Specifies whether to enable health checks.
     * 
     */
    private Boolean healthCheckEnabled;
    /**
     * @return The HTTP status codes returned for health checks.
     * 
     */
    private List<String> healthCheckHttpCodes;
    /**
     * @return The interval between two consecutive health checks.
     * 
     */
    private Integer healthCheckInterval;
    /**
     * @return The protocol that is used for health checks.
     * 
     */
    private String healthCheckType;
    /**
     * @return The path to which health check requests are sent.
     * 
     */
    private String healthCheckUrl;
    /**
     * @return The number of times that an unhealthy backend server must consecutively pass health checks before it is declared healthy.
     * 
     */
    private Integer healthyThreshold;
    /**
     * @return The HTTP method that is used for health checks.
     * 
     */
    private String httpCheckMethod;
    /**
     * @return The number of times that a healthy backend server must consecutively fail health checks before it is declared unhealthy.
     * 
     */
    private Integer unhealthyThreshold;

    private GetServerGroupsGroupHealthCheck() {}
    /**
     * @return The backend port that is used for health checks.
     * 
     */
    public Integer healthCheckConnectPort() {
        return this.healthCheckConnectPort;
    }
    /**
     * @return The maximum timeout period of a health check response.
     * 
     */
    public Integer healthCheckConnectTimeout() {
        return this.healthCheckConnectTimeout;
    }
    /**
     * @return The domain name that is used for health checks.
     * 
     */
    public String healthCheckDomain() {
        return this.healthCheckDomain;
    }
    /**
     * @return Specifies whether to enable health checks.
     * 
     */
    public Boolean healthCheckEnabled() {
        return this.healthCheckEnabled;
    }
    /**
     * @return The HTTP status codes returned for health checks.
     * 
     */
    public List<String> healthCheckHttpCodes() {
        return this.healthCheckHttpCodes;
    }
    /**
     * @return The interval between two consecutive health checks.
     * 
     */
    public Integer healthCheckInterval() {
        return this.healthCheckInterval;
    }
    /**
     * @return The protocol that is used for health checks.
     * 
     */
    public String healthCheckType() {
        return this.healthCheckType;
    }
    /**
     * @return The path to which health check requests are sent.
     * 
     */
    public String healthCheckUrl() {
        return this.healthCheckUrl;
    }
    /**
     * @return The number of times that an unhealthy backend server must consecutively pass health checks before it is declared healthy.
     * 
     */
    public Integer healthyThreshold() {
        return this.healthyThreshold;
    }
    /**
     * @return The HTTP method that is used for health checks.
     * 
     */
    public String httpCheckMethod() {
        return this.httpCheckMethod;
    }
    /**
     * @return The number of times that a healthy backend server must consecutively fail health checks before it is declared unhealthy.
     * 
     */
    public Integer unhealthyThreshold() {
        return this.unhealthyThreshold;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetServerGroupsGroupHealthCheck defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Integer healthCheckConnectPort;
        private Integer healthCheckConnectTimeout;
        private String healthCheckDomain;
        private Boolean healthCheckEnabled;
        private List<String> healthCheckHttpCodes;
        private Integer healthCheckInterval;
        private String healthCheckType;
        private String healthCheckUrl;
        private Integer healthyThreshold;
        private String httpCheckMethod;
        private Integer unhealthyThreshold;
        public Builder() {}
        public Builder(GetServerGroupsGroupHealthCheck defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.healthCheckConnectPort = defaults.healthCheckConnectPort;
    	      this.healthCheckConnectTimeout = defaults.healthCheckConnectTimeout;
    	      this.healthCheckDomain = defaults.healthCheckDomain;
    	      this.healthCheckEnabled = defaults.healthCheckEnabled;
    	      this.healthCheckHttpCodes = defaults.healthCheckHttpCodes;
    	      this.healthCheckInterval = defaults.healthCheckInterval;
    	      this.healthCheckType = defaults.healthCheckType;
    	      this.healthCheckUrl = defaults.healthCheckUrl;
    	      this.healthyThreshold = defaults.healthyThreshold;
    	      this.httpCheckMethod = defaults.httpCheckMethod;
    	      this.unhealthyThreshold = defaults.unhealthyThreshold;
        }

        @CustomType.Setter
        public Builder healthCheckConnectPort(Integer healthCheckConnectPort) {
            this.healthCheckConnectPort = Objects.requireNonNull(healthCheckConnectPort);
            return this;
        }
        @CustomType.Setter
        public Builder healthCheckConnectTimeout(Integer healthCheckConnectTimeout) {
            this.healthCheckConnectTimeout = Objects.requireNonNull(healthCheckConnectTimeout);
            return this;
        }
        @CustomType.Setter
        public Builder healthCheckDomain(String healthCheckDomain) {
            this.healthCheckDomain = Objects.requireNonNull(healthCheckDomain);
            return this;
        }
        @CustomType.Setter
        public Builder healthCheckEnabled(Boolean healthCheckEnabled) {
            this.healthCheckEnabled = Objects.requireNonNull(healthCheckEnabled);
            return this;
        }
        @CustomType.Setter
        public Builder healthCheckHttpCodes(List<String> healthCheckHttpCodes) {
            this.healthCheckHttpCodes = Objects.requireNonNull(healthCheckHttpCodes);
            return this;
        }
        public Builder healthCheckHttpCodes(String... healthCheckHttpCodes) {
            return healthCheckHttpCodes(List.of(healthCheckHttpCodes));
        }
        @CustomType.Setter
        public Builder healthCheckInterval(Integer healthCheckInterval) {
            this.healthCheckInterval = Objects.requireNonNull(healthCheckInterval);
            return this;
        }
        @CustomType.Setter
        public Builder healthCheckType(String healthCheckType) {
            this.healthCheckType = Objects.requireNonNull(healthCheckType);
            return this;
        }
        @CustomType.Setter
        public Builder healthCheckUrl(String healthCheckUrl) {
            this.healthCheckUrl = Objects.requireNonNull(healthCheckUrl);
            return this;
        }
        @CustomType.Setter
        public Builder healthyThreshold(Integer healthyThreshold) {
            this.healthyThreshold = Objects.requireNonNull(healthyThreshold);
            return this;
        }
        @CustomType.Setter
        public Builder httpCheckMethod(String httpCheckMethod) {
            this.httpCheckMethod = Objects.requireNonNull(httpCheckMethod);
            return this;
        }
        @CustomType.Setter
        public Builder unhealthyThreshold(Integer unhealthyThreshold) {
            this.unhealthyThreshold = Objects.requireNonNull(unhealthyThreshold);
            return this;
        }
        public GetServerGroupsGroupHealthCheck build() {
            final var _resultValue = new GetServerGroupsGroupHealthCheck();
            _resultValue.healthCheckConnectPort = healthCheckConnectPort;
            _resultValue.healthCheckConnectTimeout = healthCheckConnectTimeout;
            _resultValue.healthCheckDomain = healthCheckDomain;
            _resultValue.healthCheckEnabled = healthCheckEnabled;
            _resultValue.healthCheckHttpCodes = healthCheckHttpCodes;
            _resultValue.healthCheckInterval = healthCheckInterval;
            _resultValue.healthCheckType = healthCheckType;
            _resultValue.healthCheckUrl = healthCheckUrl;
            _resultValue.healthyThreshold = healthyThreshold;
            _resultValue.httpCheckMethod = httpCheckMethod;
            _resultValue.unhealthyThreshold = unhealthyThreshold;
            return _resultValue;
        }
    }
}
