// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.edas;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SlbAttachmentArgs extends com.pulumi.resources.ResourceArgs {

    public static final SlbAttachmentArgs Empty = new SlbAttachmentArgs();

    /**
     * The ID of the application to which you want to bind an SLB instance.
     * 
     */
    @Import(name="appId", required=true)
    private Output<String> appId;

    /**
     * @return The ID of the application to which you want to bind an SLB instance.
     * 
     */
    public Output<String> appId() {
        return this.appId;
    }

    /**
     * The listening port for the bound SLB instance.
     * 
     */
    @Import(name="listenerPort")
    private @Nullable Output<Integer> listenerPort;

    /**
     * @return The listening port for the bound SLB instance.
     * 
     */
    public Optional<Output<Integer>> listenerPort() {
        return Optional.ofNullable(this.listenerPort);
    }

    /**
     * The ID of the SLB instance that is going to be bound.
     * 
     */
    @Import(name="slbId", required=true)
    private Output<String> slbId;

    /**
     * @return The ID of the SLB instance that is going to be bound.
     * 
     */
    public Output<String> slbId() {
        return this.slbId;
    }

    /**
     * The IP address that is allocated to the bound SLB instance.
     * 
     */
    @Import(name="slbIp", required=true)
    private Output<String> slbIp;

    /**
     * @return The IP address that is allocated to the bound SLB instance.
     * 
     */
    public Output<String> slbIp() {
        return this.slbIp;
    }

    /**
     * The type of the bound SLB instance.
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return The type of the bound SLB instance.
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    /**
     * The ID of the virtual server (VServer) group associated with the intranet SLB instance.
     * 
     */
    @Import(name="vserverGroupId")
    private @Nullable Output<String> vserverGroupId;

    /**
     * @return The ID of the virtual server (VServer) group associated with the intranet SLB instance.
     * 
     */
    public Optional<Output<String>> vserverGroupId() {
        return Optional.ofNullable(this.vserverGroupId);
    }

    private SlbAttachmentArgs() {}

    private SlbAttachmentArgs(SlbAttachmentArgs $) {
        this.appId = $.appId;
        this.listenerPort = $.listenerPort;
        this.slbId = $.slbId;
        this.slbIp = $.slbIp;
        this.type = $.type;
        this.vserverGroupId = $.vserverGroupId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SlbAttachmentArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SlbAttachmentArgs $;

        public Builder() {
            $ = new SlbAttachmentArgs();
        }

        public Builder(SlbAttachmentArgs defaults) {
            $ = new SlbAttachmentArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param appId The ID of the application to which you want to bind an SLB instance.
         * 
         * @return builder
         * 
         */
        public Builder appId(Output<String> appId) {
            $.appId = appId;
            return this;
        }

        /**
         * @param appId The ID of the application to which you want to bind an SLB instance.
         * 
         * @return builder
         * 
         */
        public Builder appId(String appId) {
            return appId(Output.of(appId));
        }

        /**
         * @param listenerPort The listening port for the bound SLB instance.
         * 
         * @return builder
         * 
         */
        public Builder listenerPort(@Nullable Output<Integer> listenerPort) {
            $.listenerPort = listenerPort;
            return this;
        }

        /**
         * @param listenerPort The listening port for the bound SLB instance.
         * 
         * @return builder
         * 
         */
        public Builder listenerPort(Integer listenerPort) {
            return listenerPort(Output.of(listenerPort));
        }

        /**
         * @param slbId The ID of the SLB instance that is going to be bound.
         * 
         * @return builder
         * 
         */
        public Builder slbId(Output<String> slbId) {
            $.slbId = slbId;
            return this;
        }

        /**
         * @param slbId The ID of the SLB instance that is going to be bound.
         * 
         * @return builder
         * 
         */
        public Builder slbId(String slbId) {
            return slbId(Output.of(slbId));
        }

        /**
         * @param slbIp The IP address that is allocated to the bound SLB instance.
         * 
         * @return builder
         * 
         */
        public Builder slbIp(Output<String> slbIp) {
            $.slbIp = slbIp;
            return this;
        }

        /**
         * @param slbIp The IP address that is allocated to the bound SLB instance.
         * 
         * @return builder
         * 
         */
        public Builder slbIp(String slbIp) {
            return slbIp(Output.of(slbIp));
        }

        /**
         * @param type The type of the bound SLB instance.
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type The type of the bound SLB instance.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param vserverGroupId The ID of the virtual server (VServer) group associated with the intranet SLB instance.
         * 
         * @return builder
         * 
         */
        public Builder vserverGroupId(@Nullable Output<String> vserverGroupId) {
            $.vserverGroupId = vserverGroupId;
            return this;
        }

        /**
         * @param vserverGroupId The ID of the virtual server (VServer) group associated with the intranet SLB instance.
         * 
         * @return builder
         * 
         */
        public Builder vserverGroupId(String vserverGroupId) {
            return vserverGroupId(Output.of(vserverGroupId));
        }

        public SlbAttachmentArgs build() {
            if ($.appId == null) {
                throw new MissingRequiredPropertyException("SlbAttachmentArgs", "appId");
            }
            if ($.slbId == null) {
                throw new MissingRequiredPropertyException("SlbAttachmentArgs", "slbId");
            }
            if ($.slbIp == null) {
                throw new MissingRequiredPropertyException("SlbAttachmentArgs", "slbIp");
            }
            if ($.type == null) {
                throw new MissingRequiredPropertyException("SlbAttachmentArgs", "type");
            }
            return $;
        }
    }

}
