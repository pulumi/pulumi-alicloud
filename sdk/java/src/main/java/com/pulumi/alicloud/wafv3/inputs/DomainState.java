// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.wafv3.inputs;

import com.pulumi.alicloud.wafv3.inputs.DomainListenArgs;
import com.pulumi.alicloud.wafv3.inputs.DomainRedirectArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DomainState extends com.pulumi.resources.ResourceArgs {

    public static final DomainState Empty = new DomainState();

    /**
     * The mode in which the domain name is added to WAF. Valid values:
     * share: CNAME record mode. This is the default value.
     * 
     */
    @Import(name="accessType")
    private @Nullable Output<String> accessType;

    /**
     * @return The mode in which the domain name is added to WAF. Valid values:
     * share: CNAME record mode. This is the default value.
     * 
     */
    public Optional<Output<String>> accessType() {
        return Optional.ofNullable(this.accessType);
    }

    /**
     * The name of the domain name to query.
     * 
     */
    @Import(name="domain")
    private @Nullable Output<String> domain;

    /**
     * @return The name of the domain name to query.
     * 
     */
    public Optional<Output<String>> domain() {
        return Optional.ofNullable(this.domain);
    }

    /**
     * The domain ID.
     * 
     */
    @Import(name="domainId")
    private @Nullable Output<String> domainId;

    /**
     * @return The domain ID.
     * 
     */
    public Optional<Output<String>> domainId() {
        return Optional.ofNullable(this.domainId);
    }

    /**
     * The ID of the Web Application Firewall (WAF) instance.
     * 
     */
    @Import(name="instanceId")
    private @Nullable Output<String> instanceId;

    /**
     * @return The ID of the Web Application Firewall (WAF) instance.
     * 
     */
    public Optional<Output<String>> instanceId() {
        return Optional.ofNullable(this.instanceId);
    }

    /**
     * Configure listening information. See `listen` below.
     * 
     */
    @Import(name="listen")
    private @Nullable Output<DomainListenArgs> listen;

    /**
     * @return Configure listening information. See `listen` below.
     * 
     */
    public Optional<Output<DomainListenArgs>> listen() {
        return Optional.ofNullable(this.listen);
    }

    /**
     * Configure forwarding information. See `redirect` below.
     * 
     */
    @Import(name="redirect")
    private @Nullable Output<DomainRedirectArgs> redirect;

    /**
     * @return Configure forwarding information. See `redirect` below.
     * 
     */
    public Optional<Output<DomainRedirectArgs>> redirect() {
        return Optional.ofNullable(this.redirect);
    }

    /**
     * The ID of the Alibaba Cloud resource group.
     * 
     */
    @Import(name="resourceManagerResourceGroupId")
    private @Nullable Output<String> resourceManagerResourceGroupId;

    /**
     * @return The ID of the Alibaba Cloud resource group.
     * 
     */
    public Optional<Output<String>> resourceManagerResourceGroupId() {
        return Optional.ofNullable(this.resourceManagerResourceGroupId);
    }

    /**
     * The status of the domain name.
     * 
     */
    @Import(name="status")
    private @Nullable Output<Integer> status;

    /**
     * @return The status of the domain name.
     * 
     */
    public Optional<Output<Integer>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * The tags. You can specify up to 20 tags.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return The tags. You can specify up to 20 tags.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private DomainState() {}

    private DomainState(DomainState $) {
        this.accessType = $.accessType;
        this.domain = $.domain;
        this.domainId = $.domainId;
        this.instanceId = $.instanceId;
        this.listen = $.listen;
        this.redirect = $.redirect;
        this.resourceManagerResourceGroupId = $.resourceManagerResourceGroupId;
        this.status = $.status;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DomainState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DomainState $;

        public Builder() {
            $ = new DomainState();
        }

        public Builder(DomainState defaults) {
            $ = new DomainState(Objects.requireNonNull(defaults));
        }

        /**
         * @param accessType The mode in which the domain name is added to WAF. Valid values:
         * share: CNAME record mode. This is the default value.
         * 
         * @return builder
         * 
         */
        public Builder accessType(@Nullable Output<String> accessType) {
            $.accessType = accessType;
            return this;
        }

        /**
         * @param accessType The mode in which the domain name is added to WAF. Valid values:
         * share: CNAME record mode. This is the default value.
         * 
         * @return builder
         * 
         */
        public Builder accessType(String accessType) {
            return accessType(Output.of(accessType));
        }

        /**
         * @param domain The name of the domain name to query.
         * 
         * @return builder
         * 
         */
        public Builder domain(@Nullable Output<String> domain) {
            $.domain = domain;
            return this;
        }

        /**
         * @param domain The name of the domain name to query.
         * 
         * @return builder
         * 
         */
        public Builder domain(String domain) {
            return domain(Output.of(domain));
        }

        /**
         * @param domainId The domain ID.
         * 
         * @return builder
         * 
         */
        public Builder domainId(@Nullable Output<String> domainId) {
            $.domainId = domainId;
            return this;
        }

        /**
         * @param domainId The domain ID.
         * 
         * @return builder
         * 
         */
        public Builder domainId(String domainId) {
            return domainId(Output.of(domainId));
        }

        /**
         * @param instanceId The ID of the Web Application Firewall (WAF) instance.
         * 
         * @return builder
         * 
         */
        public Builder instanceId(@Nullable Output<String> instanceId) {
            $.instanceId = instanceId;
            return this;
        }

        /**
         * @param instanceId The ID of the Web Application Firewall (WAF) instance.
         * 
         * @return builder
         * 
         */
        public Builder instanceId(String instanceId) {
            return instanceId(Output.of(instanceId));
        }

        /**
         * @param listen Configure listening information. See `listen` below.
         * 
         * @return builder
         * 
         */
        public Builder listen(@Nullable Output<DomainListenArgs> listen) {
            $.listen = listen;
            return this;
        }

        /**
         * @param listen Configure listening information. See `listen` below.
         * 
         * @return builder
         * 
         */
        public Builder listen(DomainListenArgs listen) {
            return listen(Output.of(listen));
        }

        /**
         * @param redirect Configure forwarding information. See `redirect` below.
         * 
         * @return builder
         * 
         */
        public Builder redirect(@Nullable Output<DomainRedirectArgs> redirect) {
            $.redirect = redirect;
            return this;
        }

        /**
         * @param redirect Configure forwarding information. See `redirect` below.
         * 
         * @return builder
         * 
         */
        public Builder redirect(DomainRedirectArgs redirect) {
            return redirect(Output.of(redirect));
        }

        /**
         * @param resourceManagerResourceGroupId The ID of the Alibaba Cloud resource group.
         * 
         * @return builder
         * 
         */
        public Builder resourceManagerResourceGroupId(@Nullable Output<String> resourceManagerResourceGroupId) {
            $.resourceManagerResourceGroupId = resourceManagerResourceGroupId;
            return this;
        }

        /**
         * @param resourceManagerResourceGroupId The ID of the Alibaba Cloud resource group.
         * 
         * @return builder
         * 
         */
        public Builder resourceManagerResourceGroupId(String resourceManagerResourceGroupId) {
            return resourceManagerResourceGroupId(Output.of(resourceManagerResourceGroupId));
        }

        /**
         * @param status The status of the domain name.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<Integer> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status The status of the domain name.
         * 
         * @return builder
         * 
         */
        public Builder status(Integer status) {
            return status(Output.of(status));
        }

        /**
         * @param tags The tags. You can specify up to 20 tags.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags The tags. You can specify up to 20 tags.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public DomainState build() {
            return $;
        }
    }

}
