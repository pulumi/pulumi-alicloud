// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.eds;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SnapshotArgs extends com.pulumi.resources.ResourceArgs {

    public static final SnapshotArgs Empty = new SnapshotArgs();

    /**
     * The description of the Snapshot.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The description of the Snapshot.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The ID of the Desktop.
     * 
     */
    @Import(name="desktopId", required=true)
    private Output<String> desktopId;

    /**
     * @return The ID of the Desktop.
     * 
     */
    public Output<String> desktopId() {
        return this.desktopId;
    }

    /**
     * The name of the Snapshot.
     * 
     */
    @Import(name="snapshotName", required=true)
    private Output<String> snapshotName;

    /**
     * @return The name of the Snapshot.
     * 
     */
    public Output<String> snapshotName() {
        return this.snapshotName;
    }

    /**
     * The type of the disk for which to create a snapshot. Valid values: `SYSTEM`, `DATA`.
     * 
     */
    @Import(name="sourceDiskType", required=true)
    private Output<String> sourceDiskType;

    /**
     * @return The type of the disk for which to create a snapshot. Valid values: `SYSTEM`, `DATA`.
     * 
     */
    public Output<String> sourceDiskType() {
        return this.sourceDiskType;
    }

    private SnapshotArgs() {}

    private SnapshotArgs(SnapshotArgs $) {
        this.description = $.description;
        this.desktopId = $.desktopId;
        this.snapshotName = $.snapshotName;
        this.sourceDiskType = $.sourceDiskType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SnapshotArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SnapshotArgs $;

        public Builder() {
            $ = new SnapshotArgs();
        }

        public Builder(SnapshotArgs defaults) {
            $ = new SnapshotArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param description The description of the Snapshot.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The description of the Snapshot.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param desktopId The ID of the Desktop.
         * 
         * @return builder
         * 
         */
        public Builder desktopId(Output<String> desktopId) {
            $.desktopId = desktopId;
            return this;
        }

        /**
         * @param desktopId The ID of the Desktop.
         * 
         * @return builder
         * 
         */
        public Builder desktopId(String desktopId) {
            return desktopId(Output.of(desktopId));
        }

        /**
         * @param snapshotName The name of the Snapshot.
         * 
         * @return builder
         * 
         */
        public Builder snapshotName(Output<String> snapshotName) {
            $.snapshotName = snapshotName;
            return this;
        }

        /**
         * @param snapshotName The name of the Snapshot.
         * 
         * @return builder
         * 
         */
        public Builder snapshotName(String snapshotName) {
            return snapshotName(Output.of(snapshotName));
        }

        /**
         * @param sourceDiskType The type of the disk for which to create a snapshot. Valid values: `SYSTEM`, `DATA`.
         * 
         * @return builder
         * 
         */
        public Builder sourceDiskType(Output<String> sourceDiskType) {
            $.sourceDiskType = sourceDiskType;
            return this;
        }

        /**
         * @param sourceDiskType The type of the disk for which to create a snapshot. Valid values: `SYSTEM`, `DATA`.
         * 
         * @return builder
         * 
         */
        public Builder sourceDiskType(String sourceDiskType) {
            return sourceDiskType(Output.of(sourceDiskType));
        }

        public SnapshotArgs build() {
            if ($.desktopId == null) {
                throw new MissingRequiredPropertyException("SnapshotArgs", "desktopId");
            }
            if ($.snapshotName == null) {
                throw new MissingRequiredPropertyException("SnapshotArgs", "snapshotName");
            }
            if ($.sourceDiskType == null) {
                throw new MissingRequiredPropertyException("SnapshotArgs", "sourceDiskType");
            }
            return $;
        }
    }

}
