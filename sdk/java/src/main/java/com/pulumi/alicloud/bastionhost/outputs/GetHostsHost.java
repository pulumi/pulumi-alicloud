// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.bastionhost.outputs;

import com.pulumi.alicloud.bastionhost.outputs.GetHostsHostProtocol;
import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetHostsHost {
    /**
     * @return Specify the new create a host of address types. Valid values: Public: the IP address of a Public network Private: Private network address.
     * 
     */
    private String activeAddressType;
    /**
     * @return Specify a host of notes, supports up to 500 characters.
     * 
     */
    private String comment;
    /**
     * @return The host ID.
     * 
     */
    private String hostId;
    /**
     * @return Specify the new create a host name of the supports up to 128 characters.
     * 
     */
    private String hostName;
    /**
     * @return Specify the new create a host of the private network address, it is possible to use the domain name or IP ADDRESS.
     * 
     */
    private String hostPrivateAddress;
    /**
     * @return Specify the new create a host of the IP address of a public network, it is possible to use the domain name or IP ADDRESS.
     * 
     */
    private String hostPublicAddress;
    /**
     * @return The ID of the Host.
     * 
     */
    private String id;
    /**
     * @return Specify the new create a host where the Bastion host ID of.
     * 
     */
    private String instanceId;
    /**
     * @return Specify the new create the host&#39;s operating system. Valid values: Linux Windows.
     * 
     */
    private String osType;
    /**
     * @return The host of the protocol information.
     * 
     */
    private List<GetHostsHostProtocol> protocols;
    /**
     * @return Specify the new create a host of source. Valid values: Local: localhost Ecs:ECS instance Rds:RDS exclusive cluster host.
     * 
     */
    private String source;
    /**
     * @return Specify the newly created ECS instance ID or dedicated cluster host ID.
     * 
     */
    private String sourceInstanceId;

    private GetHostsHost() {}
    /**
     * @return Specify the new create a host of address types. Valid values: Public: the IP address of a Public network Private: Private network address.
     * 
     */
    public String activeAddressType() {
        return this.activeAddressType;
    }
    /**
     * @return Specify a host of notes, supports up to 500 characters.
     * 
     */
    public String comment() {
        return this.comment;
    }
    /**
     * @return The host ID.
     * 
     */
    public String hostId() {
        return this.hostId;
    }
    /**
     * @return Specify the new create a host name of the supports up to 128 characters.
     * 
     */
    public String hostName() {
        return this.hostName;
    }
    /**
     * @return Specify the new create a host of the private network address, it is possible to use the domain name or IP ADDRESS.
     * 
     */
    public String hostPrivateAddress() {
        return this.hostPrivateAddress;
    }
    /**
     * @return Specify the new create a host of the IP address of a public network, it is possible to use the domain name or IP ADDRESS.
     * 
     */
    public String hostPublicAddress() {
        return this.hostPublicAddress;
    }
    /**
     * @return The ID of the Host.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Specify the new create a host where the Bastion host ID of.
     * 
     */
    public String instanceId() {
        return this.instanceId;
    }
    /**
     * @return Specify the new create the host&#39;s operating system. Valid values: Linux Windows.
     * 
     */
    public String osType() {
        return this.osType;
    }
    /**
     * @return The host of the protocol information.
     * 
     */
    public List<GetHostsHostProtocol> protocols() {
        return this.protocols;
    }
    /**
     * @return Specify the new create a host of source. Valid values: Local: localhost Ecs:ECS instance Rds:RDS exclusive cluster host.
     * 
     */
    public String source() {
        return this.source;
    }
    /**
     * @return Specify the newly created ECS instance ID or dedicated cluster host ID.
     * 
     */
    public String sourceInstanceId() {
        return this.sourceInstanceId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetHostsHost defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String activeAddressType;
        private String comment;
        private String hostId;
        private String hostName;
        private String hostPrivateAddress;
        private String hostPublicAddress;
        private String id;
        private String instanceId;
        private String osType;
        private List<GetHostsHostProtocol> protocols;
        private String source;
        private String sourceInstanceId;
        public Builder() {}
        public Builder(GetHostsHost defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.activeAddressType = defaults.activeAddressType;
    	      this.comment = defaults.comment;
    	      this.hostId = defaults.hostId;
    	      this.hostName = defaults.hostName;
    	      this.hostPrivateAddress = defaults.hostPrivateAddress;
    	      this.hostPublicAddress = defaults.hostPublicAddress;
    	      this.id = defaults.id;
    	      this.instanceId = defaults.instanceId;
    	      this.osType = defaults.osType;
    	      this.protocols = defaults.protocols;
    	      this.source = defaults.source;
    	      this.sourceInstanceId = defaults.sourceInstanceId;
        }

        @CustomType.Setter
        public Builder activeAddressType(String activeAddressType) {
            this.activeAddressType = Objects.requireNonNull(activeAddressType);
            return this;
        }
        @CustomType.Setter
        public Builder comment(String comment) {
            this.comment = Objects.requireNonNull(comment);
            return this;
        }
        @CustomType.Setter
        public Builder hostId(String hostId) {
            this.hostId = Objects.requireNonNull(hostId);
            return this;
        }
        @CustomType.Setter
        public Builder hostName(String hostName) {
            this.hostName = Objects.requireNonNull(hostName);
            return this;
        }
        @CustomType.Setter
        public Builder hostPrivateAddress(String hostPrivateAddress) {
            this.hostPrivateAddress = Objects.requireNonNull(hostPrivateAddress);
            return this;
        }
        @CustomType.Setter
        public Builder hostPublicAddress(String hostPublicAddress) {
            this.hostPublicAddress = Objects.requireNonNull(hostPublicAddress);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder instanceId(String instanceId) {
            this.instanceId = Objects.requireNonNull(instanceId);
            return this;
        }
        @CustomType.Setter
        public Builder osType(String osType) {
            this.osType = Objects.requireNonNull(osType);
            return this;
        }
        @CustomType.Setter
        public Builder protocols(List<GetHostsHostProtocol> protocols) {
            this.protocols = Objects.requireNonNull(protocols);
            return this;
        }
        public Builder protocols(GetHostsHostProtocol... protocols) {
            return protocols(List.of(protocols));
        }
        @CustomType.Setter
        public Builder source(String source) {
            this.source = Objects.requireNonNull(source);
            return this;
        }
        @CustomType.Setter
        public Builder sourceInstanceId(String sourceInstanceId) {
            this.sourceInstanceId = Objects.requireNonNull(sourceInstanceId);
            return this;
        }
        public GetHostsHost build() {
            final var o = new GetHostsHost();
            o.activeAddressType = activeAddressType;
            o.comment = comment;
            o.hostId = hostId;
            o.hostName = hostName;
            o.hostPrivateAddress = hostPrivateAddress;
            o.hostPublicAddress = hostPublicAddress;
            o.id = id;
            o.instanceId = instanceId;
            o.osType = osType;
            o.protocols = protocols;
            o.source = source;
            o.sourceInstanceId = sourceInstanceId;
            return o;
        }
    }
}
