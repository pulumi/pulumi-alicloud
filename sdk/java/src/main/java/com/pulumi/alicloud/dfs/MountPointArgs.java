// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.dfs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class MountPointArgs extends com.pulumi.resources.ResourceArgs {

    public static final MountPointArgs Empty = new MountPointArgs();

    /**
     * The ID of the Access Group.
     * 
     */
    @Import(name="accessGroupId", required=true)
    private Output<String> accessGroupId;

    /**
     * @return The ID of the Access Group.
     * 
     */
    public Output<String> accessGroupId() {
        return this.accessGroupId;
    }

    /**
     * The description of the Mount Point.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The description of the Mount Point.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The ID of the File System.
     * 
     */
    @Import(name="fileSystemId", required=true)
    private Output<String> fileSystemId;

    /**
     * @return The ID of the File System.
     * 
     */
    public Output<String> fileSystemId() {
        return this.fileSystemId;
    }

    /**
     * The network type of the Mount Point. Valid values: `VPC`.
     * 
     */
    @Import(name="networkType", required=true)
    private Output<String> networkType;

    /**
     * @return The network type of the Mount Point. Valid values: `VPC`.
     * 
     */
    public Output<String> networkType() {
        return this.networkType;
    }

    /**
     * The status of the Mount Point. Valid values: `Active`, `Inactive`.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return The status of the Mount Point. Valid values: `Active`, `Inactive`.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * The vpc id.
     * 
     */
    @Import(name="vpcId", required=true)
    private Output<String> vpcId;

    /**
     * @return The vpc id.
     * 
     */
    public Output<String> vpcId() {
        return this.vpcId;
    }

    /**
     * The vswitch id.
     * 
     */
    @Import(name="vswitchId", required=true)
    private Output<String> vswitchId;

    /**
     * @return The vswitch id.
     * 
     */
    public Output<String> vswitchId() {
        return this.vswitchId;
    }

    private MountPointArgs() {}

    private MountPointArgs(MountPointArgs $) {
        this.accessGroupId = $.accessGroupId;
        this.description = $.description;
        this.fileSystemId = $.fileSystemId;
        this.networkType = $.networkType;
        this.status = $.status;
        this.vpcId = $.vpcId;
        this.vswitchId = $.vswitchId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MountPointArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MountPointArgs $;

        public Builder() {
            $ = new MountPointArgs();
        }

        public Builder(MountPointArgs defaults) {
            $ = new MountPointArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accessGroupId The ID of the Access Group.
         * 
         * @return builder
         * 
         */
        public Builder accessGroupId(Output<String> accessGroupId) {
            $.accessGroupId = accessGroupId;
            return this;
        }

        /**
         * @param accessGroupId The ID of the Access Group.
         * 
         * @return builder
         * 
         */
        public Builder accessGroupId(String accessGroupId) {
            return accessGroupId(Output.of(accessGroupId));
        }

        /**
         * @param description The description of the Mount Point.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The description of the Mount Point.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param fileSystemId The ID of the File System.
         * 
         * @return builder
         * 
         */
        public Builder fileSystemId(Output<String> fileSystemId) {
            $.fileSystemId = fileSystemId;
            return this;
        }

        /**
         * @param fileSystemId The ID of the File System.
         * 
         * @return builder
         * 
         */
        public Builder fileSystemId(String fileSystemId) {
            return fileSystemId(Output.of(fileSystemId));
        }

        /**
         * @param networkType The network type of the Mount Point. Valid values: `VPC`.
         * 
         * @return builder
         * 
         */
        public Builder networkType(Output<String> networkType) {
            $.networkType = networkType;
            return this;
        }

        /**
         * @param networkType The network type of the Mount Point. Valid values: `VPC`.
         * 
         * @return builder
         * 
         */
        public Builder networkType(String networkType) {
            return networkType(Output.of(networkType));
        }

        /**
         * @param status The status of the Mount Point. Valid values: `Active`, `Inactive`.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status The status of the Mount Point. Valid values: `Active`, `Inactive`.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param vpcId The vpc id.
         * 
         * @return builder
         * 
         */
        public Builder vpcId(Output<String> vpcId) {
            $.vpcId = vpcId;
            return this;
        }

        /**
         * @param vpcId The vpc id.
         * 
         * @return builder
         * 
         */
        public Builder vpcId(String vpcId) {
            return vpcId(Output.of(vpcId));
        }

        /**
         * @param vswitchId The vswitch id.
         * 
         * @return builder
         * 
         */
        public Builder vswitchId(Output<String> vswitchId) {
            $.vswitchId = vswitchId;
            return this;
        }

        /**
         * @param vswitchId The vswitch id.
         * 
         * @return builder
         * 
         */
        public Builder vswitchId(String vswitchId) {
            return vswitchId(Output.of(vswitchId));
        }

        public MountPointArgs build() {
            if ($.accessGroupId == null) {
                throw new MissingRequiredPropertyException("MountPointArgs", "accessGroupId");
            }
            if ($.fileSystemId == null) {
                throw new MissingRequiredPropertyException("MountPointArgs", "fileSystemId");
            }
            if ($.networkType == null) {
                throw new MissingRequiredPropertyException("MountPointArgs", "networkType");
            }
            if ($.vpcId == null) {
                throw new MissingRequiredPropertyException("MountPointArgs", "vpcId");
            }
            if ($.vswitchId == null) {
                throw new MissingRequiredPropertyException("MountPointArgs", "vswitchId");
            }
            return $;
        }
    }

}
