// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.ecs.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ImagePipelineExecutionState extends com.pulumi.resources.ResourceArgs {

    public static final ImagePipelineExecutionState Empty = new ImagePipelineExecutionState();

    /**
     * The time when the image build task was created.
     * 
     */
    @Import(name="createTime")
    private @Nullable Output<String> createTime;

    /**
     * @return The time when the image build task was created.
     * 
     */
    public Optional<Output<String>> createTime() {
        return Optional.ofNullable(this.createTime);
    }

    /**
     * The ID of the image template.
     * 
     */
    @Import(name="imagePipelineId")
    private @Nullable Output<String> imagePipelineId;

    /**
     * @return The ID of the image template.
     * 
     */
    public Optional<Output<String>> imagePipelineId() {
        return Optional.ofNullable(this.imagePipelineId);
    }

    /**
     * The status of the image build task. Valid values:
     * - CANCELLED: canceled. The build process has been canceled.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return The status of the image build task. Valid values:
     * - CANCELLED: canceled. The build process has been canceled.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    private ImagePipelineExecutionState() {}

    private ImagePipelineExecutionState(ImagePipelineExecutionState $) {
        this.createTime = $.createTime;
        this.imagePipelineId = $.imagePipelineId;
        this.status = $.status;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ImagePipelineExecutionState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ImagePipelineExecutionState $;

        public Builder() {
            $ = new ImagePipelineExecutionState();
        }

        public Builder(ImagePipelineExecutionState defaults) {
            $ = new ImagePipelineExecutionState(Objects.requireNonNull(defaults));
        }

        /**
         * @param createTime The time when the image build task was created.
         * 
         * @return builder
         * 
         */
        public Builder createTime(@Nullable Output<String> createTime) {
            $.createTime = createTime;
            return this;
        }

        /**
         * @param createTime The time when the image build task was created.
         * 
         * @return builder
         * 
         */
        public Builder createTime(String createTime) {
            return createTime(Output.of(createTime));
        }

        /**
         * @param imagePipelineId The ID of the image template.
         * 
         * @return builder
         * 
         */
        public Builder imagePipelineId(@Nullable Output<String> imagePipelineId) {
            $.imagePipelineId = imagePipelineId;
            return this;
        }

        /**
         * @param imagePipelineId The ID of the image template.
         * 
         * @return builder
         * 
         */
        public Builder imagePipelineId(String imagePipelineId) {
            return imagePipelineId(Output.of(imagePipelineId));
        }

        /**
         * @param status The status of the image build task. Valid values:
         * - CANCELLED: canceled. The build process has been canceled.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status The status of the image build task. Valid values:
         * - CANCELLED: canceled. The build process has been canceled.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        public ImagePipelineExecutionState build() {
            return $;
        }
    }

}
