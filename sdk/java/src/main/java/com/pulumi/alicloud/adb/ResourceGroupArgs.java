// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.adb;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ResourceGroupArgs extends com.pulumi.resources.ResourceArgs {

    public static final ResourceGroupArgs Empty = new ResourceGroupArgs();

    /**
     * The working mode of the resource group. Default value: `Disable`. Valid values: `Disable`, `AutoScale`.
     * 
     */
    @Import(name="clusterMode")
    private @Nullable Output<String> clusterMode;

    /**
     * @return The working mode of the resource group. Default value: `Disable`. Valid values: `Disable`, `AutoScale`.
     * 
     */
    public Optional<Output<String>> clusterMode() {
        return Optional.ofNullable(this.clusterMode);
    }

    /**
     * The resource specifications of a single compute cluster. Unit: ACU.
     * 
     */
    @Import(name="clusterSizeResource")
    private @Nullable Output<String> clusterSizeResource;

    /**
     * @return The resource specifications of a single compute cluster. Unit: ACU.
     * 
     */
    public Optional<Output<String>> clusterSizeResource() {
        return Optional.ofNullable(this.clusterSizeResource);
    }

    /**
     * The ID of the DBCluster.
     * 
     */
    @Import(name="dbClusterId", required=true)
    private Output<String> dbClusterId;

    /**
     * @return The ID of the DBCluster.
     * 
     */
    public Output<String> dbClusterId() {
        return this.dbClusterId;
    }

    /**
     * The engine of the resource group. Default value: `AnalyticDB`. Valid values: `AnalyticDB`, `SparkWarehouse`.
     * 
     */
    @Import(name="engine")
    private @Nullable Output<String> engine;

    /**
     * @return The engine of the resource group. Default value: `AnalyticDB`. Valid values: `AnalyticDB`, `SparkWarehouse`.
     * 
     */
    public Optional<Output<String>> engine() {
        return Optional.ofNullable(this.engine);
    }

    /**
     * The Spark application configuration parameters that can be applied to all Spark jobs executed in the resource group.
     * 
     */
    @Import(name="engineParams")
    private @Nullable Output<Map<String,String>> engineParams;

    /**
     * @return The Spark application configuration parameters that can be applied to all Spark jobs executed in the resource group.
     * 
     */
    public Optional<Output<Map<String,String>>> engineParams() {
        return Optional.ofNullable(this.engineParams);
    }

    /**
     * The name of the resource group. The `groupName` can be up to 255 characters in length and can contain digits, uppercase letters, hyphens (-), and underscores (_). It must start with a digit or uppercase letter.
     * 
     */
    @Import(name="groupName", required=true)
    private Output<String> groupName;

    /**
     * @return The name of the resource group. The `groupName` can be up to 255 characters in length and can contain digits, uppercase letters, hyphens (-), and underscores (_). It must start with a digit or uppercase letter.
     * 
     */
    public Output<String> groupName() {
        return this.groupName;
    }

    /**
     * The query execution mode. Default value: `interactive`. Valid values: `interactive`, `batch`.
     * 
     */
    @Import(name="groupType")
    private @Nullable Output<String> groupType;

    /**
     * @return The query execution mode. Default value: `interactive`. Valid values: `interactive`, `batch`.
     * 
     */
    public Optional<Output<String>> groupType() {
        return Optional.ofNullable(this.groupType);
    }

    /**
     * The maximum number of compute clusters that are allowed in the resource group.
     * 
     */
    @Import(name="maxClusterCount")
    private @Nullable Output<Integer> maxClusterCount;

    /**
     * @return The maximum number of compute clusters that are allowed in the resource group.
     * 
     */
    public Optional<Output<Integer>> maxClusterCount() {
        return Optional.ofNullable(this.maxClusterCount);
    }

    /**
     * The maximum amount of reserved computing resources, which refers to the amount of resources that are not allocated in the cluster.
     * 
     */
    @Import(name="maxComputeResource")
    private @Nullable Output<String> maxComputeResource;

    /**
     * @return The maximum amount of reserved computing resources, which refers to the amount of resources that are not allocated in the cluster.
     * 
     */
    public Optional<Output<String>> maxComputeResource() {
        return Optional.ofNullable(this.maxComputeResource);
    }

    /**
     * The minimum number of compute clusters that are required in the resource group.
     * 
     */
    @Import(name="minClusterCount")
    private @Nullable Output<Integer> minClusterCount;

    /**
     * @return The minimum number of compute clusters that are required in the resource group.
     * 
     */
    public Optional<Output<Integer>> minClusterCount() {
        return Optional.ofNullable(this.minClusterCount);
    }

    /**
     * The minimum amount of reserved computing resources. Unit: AnalyticDB compute unit (ACU).
     * 
     */
    @Import(name="minComputeResource")
    private @Nullable Output<String> minComputeResource;

    /**
     * @return The minimum amount of reserved computing resources. Unit: AnalyticDB compute unit (ACU).
     * 
     */
    public Optional<Output<String>> minComputeResource() {
        return Optional.ofNullable(this.minComputeResource);
    }

    /**
     * The number of nodes.
     * 
     */
    @Import(name="nodeNum")
    private @Nullable Output<Integer> nodeNum;

    /**
     * @return The number of nodes.
     * 
     */
    public Optional<Output<Integer>> nodeNum() {
        return Optional.ofNullable(this.nodeNum);
    }

    /**
     * The database accounts with which to associate the resource group.
     * 
     */
    @Import(name="users")
    private @Nullable Output<List<String>> users;

    /**
     * @return The database accounts with which to associate the resource group.
     * 
     */
    public Optional<Output<List<String>>> users() {
        return Optional.ofNullable(this.users);
    }

    private ResourceGroupArgs() {}

    private ResourceGroupArgs(ResourceGroupArgs $) {
        this.clusterMode = $.clusterMode;
        this.clusterSizeResource = $.clusterSizeResource;
        this.dbClusterId = $.dbClusterId;
        this.engine = $.engine;
        this.engineParams = $.engineParams;
        this.groupName = $.groupName;
        this.groupType = $.groupType;
        this.maxClusterCount = $.maxClusterCount;
        this.maxComputeResource = $.maxComputeResource;
        this.minClusterCount = $.minClusterCount;
        this.minComputeResource = $.minComputeResource;
        this.nodeNum = $.nodeNum;
        this.users = $.users;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ResourceGroupArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ResourceGroupArgs $;

        public Builder() {
            $ = new ResourceGroupArgs();
        }

        public Builder(ResourceGroupArgs defaults) {
            $ = new ResourceGroupArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param clusterMode The working mode of the resource group. Default value: `Disable`. Valid values: `Disable`, `AutoScale`.
         * 
         * @return builder
         * 
         */
        public Builder clusterMode(@Nullable Output<String> clusterMode) {
            $.clusterMode = clusterMode;
            return this;
        }

        /**
         * @param clusterMode The working mode of the resource group. Default value: `Disable`. Valid values: `Disable`, `AutoScale`.
         * 
         * @return builder
         * 
         */
        public Builder clusterMode(String clusterMode) {
            return clusterMode(Output.of(clusterMode));
        }

        /**
         * @param clusterSizeResource The resource specifications of a single compute cluster. Unit: ACU.
         * 
         * @return builder
         * 
         */
        public Builder clusterSizeResource(@Nullable Output<String> clusterSizeResource) {
            $.clusterSizeResource = clusterSizeResource;
            return this;
        }

        /**
         * @param clusterSizeResource The resource specifications of a single compute cluster. Unit: ACU.
         * 
         * @return builder
         * 
         */
        public Builder clusterSizeResource(String clusterSizeResource) {
            return clusterSizeResource(Output.of(clusterSizeResource));
        }

        /**
         * @param dbClusterId The ID of the DBCluster.
         * 
         * @return builder
         * 
         */
        public Builder dbClusterId(Output<String> dbClusterId) {
            $.dbClusterId = dbClusterId;
            return this;
        }

        /**
         * @param dbClusterId The ID of the DBCluster.
         * 
         * @return builder
         * 
         */
        public Builder dbClusterId(String dbClusterId) {
            return dbClusterId(Output.of(dbClusterId));
        }

        /**
         * @param engine The engine of the resource group. Default value: `AnalyticDB`. Valid values: `AnalyticDB`, `SparkWarehouse`.
         * 
         * @return builder
         * 
         */
        public Builder engine(@Nullable Output<String> engine) {
            $.engine = engine;
            return this;
        }

        /**
         * @param engine The engine of the resource group. Default value: `AnalyticDB`. Valid values: `AnalyticDB`, `SparkWarehouse`.
         * 
         * @return builder
         * 
         */
        public Builder engine(String engine) {
            return engine(Output.of(engine));
        }

        /**
         * @param engineParams The Spark application configuration parameters that can be applied to all Spark jobs executed in the resource group.
         * 
         * @return builder
         * 
         */
        public Builder engineParams(@Nullable Output<Map<String,String>> engineParams) {
            $.engineParams = engineParams;
            return this;
        }

        /**
         * @param engineParams The Spark application configuration parameters that can be applied to all Spark jobs executed in the resource group.
         * 
         * @return builder
         * 
         */
        public Builder engineParams(Map<String,String> engineParams) {
            return engineParams(Output.of(engineParams));
        }

        /**
         * @param groupName The name of the resource group. The `groupName` can be up to 255 characters in length and can contain digits, uppercase letters, hyphens (-), and underscores (_). It must start with a digit or uppercase letter.
         * 
         * @return builder
         * 
         */
        public Builder groupName(Output<String> groupName) {
            $.groupName = groupName;
            return this;
        }

        /**
         * @param groupName The name of the resource group. The `groupName` can be up to 255 characters in length and can contain digits, uppercase letters, hyphens (-), and underscores (_). It must start with a digit or uppercase letter.
         * 
         * @return builder
         * 
         */
        public Builder groupName(String groupName) {
            return groupName(Output.of(groupName));
        }

        /**
         * @param groupType The query execution mode. Default value: `interactive`. Valid values: `interactive`, `batch`.
         * 
         * @return builder
         * 
         */
        public Builder groupType(@Nullable Output<String> groupType) {
            $.groupType = groupType;
            return this;
        }

        /**
         * @param groupType The query execution mode. Default value: `interactive`. Valid values: `interactive`, `batch`.
         * 
         * @return builder
         * 
         */
        public Builder groupType(String groupType) {
            return groupType(Output.of(groupType));
        }

        /**
         * @param maxClusterCount The maximum number of compute clusters that are allowed in the resource group.
         * 
         * @return builder
         * 
         */
        public Builder maxClusterCount(@Nullable Output<Integer> maxClusterCount) {
            $.maxClusterCount = maxClusterCount;
            return this;
        }

        /**
         * @param maxClusterCount The maximum number of compute clusters that are allowed in the resource group.
         * 
         * @return builder
         * 
         */
        public Builder maxClusterCount(Integer maxClusterCount) {
            return maxClusterCount(Output.of(maxClusterCount));
        }

        /**
         * @param maxComputeResource The maximum amount of reserved computing resources, which refers to the amount of resources that are not allocated in the cluster.
         * 
         * @return builder
         * 
         */
        public Builder maxComputeResource(@Nullable Output<String> maxComputeResource) {
            $.maxComputeResource = maxComputeResource;
            return this;
        }

        /**
         * @param maxComputeResource The maximum amount of reserved computing resources, which refers to the amount of resources that are not allocated in the cluster.
         * 
         * @return builder
         * 
         */
        public Builder maxComputeResource(String maxComputeResource) {
            return maxComputeResource(Output.of(maxComputeResource));
        }

        /**
         * @param minClusterCount The minimum number of compute clusters that are required in the resource group.
         * 
         * @return builder
         * 
         */
        public Builder minClusterCount(@Nullable Output<Integer> minClusterCount) {
            $.minClusterCount = minClusterCount;
            return this;
        }

        /**
         * @param minClusterCount The minimum number of compute clusters that are required in the resource group.
         * 
         * @return builder
         * 
         */
        public Builder minClusterCount(Integer minClusterCount) {
            return minClusterCount(Output.of(minClusterCount));
        }

        /**
         * @param minComputeResource The minimum amount of reserved computing resources. Unit: AnalyticDB compute unit (ACU).
         * 
         * @return builder
         * 
         */
        public Builder minComputeResource(@Nullable Output<String> minComputeResource) {
            $.minComputeResource = minComputeResource;
            return this;
        }

        /**
         * @param minComputeResource The minimum amount of reserved computing resources. Unit: AnalyticDB compute unit (ACU).
         * 
         * @return builder
         * 
         */
        public Builder minComputeResource(String minComputeResource) {
            return minComputeResource(Output.of(minComputeResource));
        }

        /**
         * @param nodeNum The number of nodes.
         * 
         * @return builder
         * 
         */
        public Builder nodeNum(@Nullable Output<Integer> nodeNum) {
            $.nodeNum = nodeNum;
            return this;
        }

        /**
         * @param nodeNum The number of nodes.
         * 
         * @return builder
         * 
         */
        public Builder nodeNum(Integer nodeNum) {
            return nodeNum(Output.of(nodeNum));
        }

        /**
         * @param users The database accounts with which to associate the resource group.
         * 
         * @return builder
         * 
         */
        public Builder users(@Nullable Output<List<String>> users) {
            $.users = users;
            return this;
        }

        /**
         * @param users The database accounts with which to associate the resource group.
         * 
         * @return builder
         * 
         */
        public Builder users(List<String> users) {
            return users(Output.of(users));
        }

        /**
         * @param users The database accounts with which to associate the resource group.
         * 
         * @return builder
         * 
         */
        public Builder users(String... users) {
            return users(List.of(users));
        }

        public ResourceGroupArgs build() {
            if ($.dbClusterId == null) {
                throw new MissingRequiredPropertyException("ResourceGroupArgs", "dbClusterId");
            }
            if ($.groupName == null) {
                throw new MissingRequiredPropertyException("ResourceGroupArgs", "groupName");
            }
            return $;
        }
    }

}
