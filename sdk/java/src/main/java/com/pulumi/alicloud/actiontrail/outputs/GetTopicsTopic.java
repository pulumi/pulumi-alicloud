// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.actiontrail.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;

@CustomType
public final class GetTopicsTopic {
    /**
     * @return whether the current topic is kafka compact topic or not.
     * 
     */
    private Boolean compactTopic;
    /**
     * @return Time of creation.
     * 
     */
    private String createTime;
    /**
     * @return The ID of the topic, It is formatted to `&lt;instance_id&gt;:&lt;topic&gt;`.
     * 
     */
    private String id;
    /**
     * @return ID of the instance.
     * 
     */
    private String instanceId;
    /**
     * @return whether the current topic is kafka local topic or not.
     * 
     */
    private Boolean localTopic;
    /**
     * @return Partition number of the topic.
     * 
     */
    private Integer partitionNum;
    /**
     * @return Remark of the topic.
     * 
     */
    private String remark;
    /**
     * @return The current status code of the topic. There are three values to describe the topic status: 0 stands for the topic is in service, 1 stands for freezing and 2 stands for pause.
     * 
     */
    private Integer status;
    /**
     * @return The status_name of the topic.
     * 
     */
    private String statusName;
    /**
     * @return A mapping of tags to assign to the topic.
     * 
     */
    private @Nullable Map<String,Object> tags;
    /**
     * @return A topic to filter results by the topic name.
     * 
     */
    private String topic;

    private GetTopicsTopic() {}
    /**
     * @return whether the current topic is kafka compact topic or not.
     * 
     */
    public Boolean compactTopic() {
        return this.compactTopic;
    }
    /**
     * @return Time of creation.
     * 
     */
    public String createTime() {
        return this.createTime;
    }
    /**
     * @return The ID of the topic, It is formatted to `&lt;instance_id&gt;:&lt;topic&gt;`.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return ID of the instance.
     * 
     */
    public String instanceId() {
        return this.instanceId;
    }
    /**
     * @return whether the current topic is kafka local topic or not.
     * 
     */
    public Boolean localTopic() {
        return this.localTopic;
    }
    /**
     * @return Partition number of the topic.
     * 
     */
    public Integer partitionNum() {
        return this.partitionNum;
    }
    /**
     * @return Remark of the topic.
     * 
     */
    public String remark() {
        return this.remark;
    }
    /**
     * @return The current status code of the topic. There are three values to describe the topic status: 0 stands for the topic is in service, 1 stands for freezing and 2 stands for pause.
     * 
     */
    public Integer status() {
        return this.status;
    }
    /**
     * @return The status_name of the topic.
     * 
     */
    public String statusName() {
        return this.statusName;
    }
    /**
     * @return A mapping of tags to assign to the topic.
     * 
     */
    public Map<String,Object> tags() {
        return this.tags == null ? Map.of() : this.tags;
    }
    /**
     * @return A topic to filter results by the topic name.
     * 
     */
    public String topic() {
        return this.topic;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetTopicsTopic defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean compactTopic;
        private String createTime;
        private String id;
        private String instanceId;
        private Boolean localTopic;
        private Integer partitionNum;
        private String remark;
        private Integer status;
        private String statusName;
        private @Nullable Map<String,Object> tags;
        private String topic;
        public Builder() {}
        public Builder(GetTopicsTopic defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.compactTopic = defaults.compactTopic;
    	      this.createTime = defaults.createTime;
    	      this.id = defaults.id;
    	      this.instanceId = defaults.instanceId;
    	      this.localTopic = defaults.localTopic;
    	      this.partitionNum = defaults.partitionNum;
    	      this.remark = defaults.remark;
    	      this.status = defaults.status;
    	      this.statusName = defaults.statusName;
    	      this.tags = defaults.tags;
    	      this.topic = defaults.topic;
        }

        @CustomType.Setter
        public Builder compactTopic(Boolean compactTopic) {
            if (compactTopic == null) {
              throw new MissingRequiredPropertyException("GetTopicsTopic", "compactTopic");
            }
            this.compactTopic = compactTopic;
            return this;
        }
        @CustomType.Setter
        public Builder createTime(String createTime) {
            if (createTime == null) {
              throw new MissingRequiredPropertyException("GetTopicsTopic", "createTime");
            }
            this.createTime = createTime;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetTopicsTopic", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder instanceId(String instanceId) {
            if (instanceId == null) {
              throw new MissingRequiredPropertyException("GetTopicsTopic", "instanceId");
            }
            this.instanceId = instanceId;
            return this;
        }
        @CustomType.Setter
        public Builder localTopic(Boolean localTopic) {
            if (localTopic == null) {
              throw new MissingRequiredPropertyException("GetTopicsTopic", "localTopic");
            }
            this.localTopic = localTopic;
            return this;
        }
        @CustomType.Setter
        public Builder partitionNum(Integer partitionNum) {
            if (partitionNum == null) {
              throw new MissingRequiredPropertyException("GetTopicsTopic", "partitionNum");
            }
            this.partitionNum = partitionNum;
            return this;
        }
        @CustomType.Setter
        public Builder remark(String remark) {
            if (remark == null) {
              throw new MissingRequiredPropertyException("GetTopicsTopic", "remark");
            }
            this.remark = remark;
            return this;
        }
        @CustomType.Setter
        public Builder status(Integer status) {
            if (status == null) {
              throw new MissingRequiredPropertyException("GetTopicsTopic", "status");
            }
            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder statusName(String statusName) {
            if (statusName == null) {
              throw new MissingRequiredPropertyException("GetTopicsTopic", "statusName");
            }
            this.statusName = statusName;
            return this;
        }
        @CustomType.Setter
        public Builder tags(@Nullable Map<String,Object> tags) {

            this.tags = tags;
            return this;
        }
        @CustomType.Setter
        public Builder topic(String topic) {
            if (topic == null) {
              throw new MissingRequiredPropertyException("GetTopicsTopic", "topic");
            }
            this.topic = topic;
            return this;
        }
        public GetTopicsTopic build() {
            final var _resultValue = new GetTopicsTopic();
            _resultValue.compactTopic = compactTopic;
            _resultValue.createTime = createTime;
            _resultValue.id = id;
            _resultValue.instanceId = instanceId;
            _resultValue.localTopic = localTopic;
            _resultValue.partitionNum = partitionNum;
            _resultValue.remark = remark;
            _resultValue.status = status;
            _resultValue.statusName = statusName;
            _resultValue.tags = tags;
            _resultValue.topic = topic;
            return _resultValue;
        }
    }
}
