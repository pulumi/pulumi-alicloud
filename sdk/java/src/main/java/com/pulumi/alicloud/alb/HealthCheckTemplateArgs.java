// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.alb;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class HealthCheckTemplateArgs extends com.pulumi.resources.ResourceArgs {

    public static final HealthCheckTemplateArgs Empty = new HealthCheckTemplateArgs();

    /**
     * Whether to PreCheck only this request, value:
     * true: sends a check request and does not create a resource. Check items include whether required parameters, request format, and business restrictions have been filled in. If the check fails, the corresponding error is returned. If the check passes, the error code DryRunOperation is returned.
     * false (default): Sends a normal request, returns the http_2xx status code after the check, and directly performs the operation.
     * 
     */
    @Import(name="dryRun")
    private @Nullable Output<Boolean> dryRun;

    /**
     * @return Whether to PreCheck only this request, value:
     * true: sends a check request and does not create a resource. Check items include whether required parameters, request format, and business restrictions have been filled in. If the check fails, the corresponding error is returned. If the check passes, the error code DryRunOperation is returned.
     * false (default): Sends a normal request, returns the http_2xx status code after the check, and directly performs the operation.
     * 
     */
    public Optional<Output<Boolean>> dryRun() {
        return Optional.ofNullable(this.dryRun);
    }

    /**
     * The HTTP code of the health check. The default value is http_2xx. The normal HTTP code for health check. Separate multiple codes with commas (,). Valid values: http_2xx, http_3xx, http_4xx, or http_5xx.
     * 
     */
    @Import(name="healthCheckCodes")
    private @Nullable Output<List<String>> healthCheckCodes;

    /**
     * @return The HTTP code of the health check. The default value is http_2xx. The normal HTTP code for health check. Separate multiple codes with commas (,). Valid values: http_2xx, http_3xx, http_4xx, or http_5xx.
     * 
     */
    public Optional<Output<List<String>>> healthCheckCodes() {
        return Optional.ofNullable(this.healthCheckCodes);
    }

    /**
     * The number of the port that is used for health checks.  Valid values: 0 to 65535.  Default value: 0. This value indicates that the backend server is used for health checks.
     * 
     */
    @Import(name="healthCheckConnectPort")
    private @Nullable Output<Integer> healthCheckConnectPort;

    /**
     * @return The number of the port that is used for health checks.  Valid values: 0 to 65535.  Default value: 0. This value indicates that the backend server is used for health checks.
     * 
     */
    public Optional<Output<Integer>> healthCheckConnectPort() {
        return Optional.ofNullable(this.healthCheckConnectPort);
    }

    /**
     * The domain name that is used for health checks. Valid values:  $SERVER_IP (default value): The private IP addresses of backend servers. If the $_ip parameter is set or the HealthCheckHost parameter is not set, SLB uses the private IP addresses of backend servers as the domain names for health checks.  domain: The domain name must be 1 to 80 characters in length, and can contain only letters, digits, periods (.),and hyphens (-).
     * 
     */
    @Import(name="healthCheckHost")
    private @Nullable Output<String> healthCheckHost;

    /**
     * @return The domain name that is used for health checks. Valid values:  $SERVER_IP (default value): The private IP addresses of backend servers. If the $_ip parameter is set or the HealthCheckHost parameter is not set, SLB uses the private IP addresses of backend servers as the domain names for health checks.  domain: The domain name must be 1 to 80 characters in length, and can contain only letters, digits, periods (.),and hyphens (-).
     * 
     */
    public Optional<Output<String>> healthCheckHost() {
        return Optional.ofNullable(this.healthCheckHost);
    }

    /**
     * The version of the HTTP protocol.  Valid values: HTTP 1.0 and HTTP 1.1.  Default value: HTTP 1.1.
     * 
     */
    @Import(name="healthCheckHttpVersion")
    private @Nullable Output<String> healthCheckHttpVersion;

    /**
     * @return The version of the HTTP protocol.  Valid values: HTTP 1.0 and HTTP 1.1.  Default value: HTTP 1.1.
     * 
     */
    public Optional<Output<String>> healthCheckHttpVersion() {
        return Optional.ofNullable(this.healthCheckHttpVersion);
    }

    /**
     * The time interval between two consecutive health checks.  Valid values: 1 to 50. Unit: seconds.  Default value: 2.
     * 
     */
    @Import(name="healthCheckInterval")
    private @Nullable Output<Integer> healthCheckInterval;

    /**
     * @return The time interval between two consecutive health checks.  Valid values: 1 to 50. Unit: seconds.  Default value: 2.
     * 
     */
    public Optional<Output<Integer>> healthCheckInterval() {
        return Optional.ofNullable(this.healthCheckInterval);
    }

    /**
     * The health check method.  Valid values: GET and HEAD.  Default value: HEAD.
     * 
     */
    @Import(name="healthCheckMethod")
    private @Nullable Output<String> healthCheckMethod;

    /**
     * @return The health check method.  Valid values: GET and HEAD.  Default value: HEAD.
     * 
     */
    public Optional<Output<String>> healthCheckMethod() {
        return Optional.ofNullable(this.healthCheckMethod);
    }

    /**
     * The URL that is used for health checks.  The URL must be 1 to 80 characters in length, and can contain letters, digits, hyphens (-), forward slashes (/), periods (.), percent signs (%), question marks (?), number signs (#), and ampersands (&amp;). The URL can also contain the following extended characters: _ ; ~ ! ( )* [ ] {@literal @} $ ^ : &#39; , +. The URL must start with a forward slash (/).
     * 
     */
    @Import(name="healthCheckPath")
    private @Nullable Output<String> healthCheckPath;

    /**
     * @return The URL that is used for health checks.  The URL must be 1 to 80 characters in length, and can contain letters, digits, hyphens (-), forward slashes (/), periods (.), percent signs (%), question marks (?), number signs (#), and ampersands (&amp;). The URL can also contain the following extended characters: _ ; ~ ! ( )* [ ] {@literal @} $ ^ : &#39; , +. The URL must start with a forward slash (/).
     * 
     */
    public Optional<Output<String>> healthCheckPath() {
        return Optional.ofNullable(this.healthCheckPath);
    }

    /**
     * The protocol used for the health check. Value:
     * HTTP (default): Sends a HEAD or GET request to simulate the browser&#39;s access behavior to check whether the server application is healthy.
     * HTTPS: Sends a HEAD or GET request to simulate the browser&#39;s access behavior to check whether the server application is healthy. (Data encryption is more secure than HTTP.)
     * TCP: Sends a SYN handshake packet to check whether the server port is alive.
     * gRPC: Check whether the server application is healthy by sending a POST or GET request.
     * 
     */
    @Import(name="healthCheckProtocol")
    private @Nullable Output<String> healthCheckProtocol;

    /**
     * @return The protocol used for the health check. Value:
     * HTTP (default): Sends a HEAD or GET request to simulate the browser&#39;s access behavior to check whether the server application is healthy.
     * HTTPS: Sends a HEAD or GET request to simulate the browser&#39;s access behavior to check whether the server application is healthy. (Data encryption is more secure than HTTP.)
     * TCP: Sends a SYN handshake packet to check whether the server port is alive.
     * gRPC: Check whether the server application is healthy by sending a POST or GET request.
     * 
     */
    public Optional<Output<String>> healthCheckProtocol() {
        return Optional.ofNullable(this.healthCheckProtocol);
    }

    /**
     * The name of the health check template.  The name must be 2 to 128 characters in length, and can contain letters, digits, periods (.), underscores (_), and hyphens (-). The name must start with a letter.
     * 
     */
    @Import(name="healthCheckTemplateName", required=true)
    private Output<String> healthCheckTemplateName;

    /**
     * @return The name of the health check template.  The name must be 2 to 128 characters in length, and can contain letters, digits, periods (.), underscores (_), and hyphens (-). The name must start with a letter.
     * 
     */
    public Output<String> healthCheckTemplateName() {
        return this.healthCheckTemplateName;
    }

    /**
     * The timeout period of a health check response. If the backend Elastic Compute Service (ECS) instance does not send an expected response within the specified period of time, the health check fails.  Valid values: 1 to 300. Unit: seconds.  Default value: 5.
     * 
     */
    @Import(name="healthCheckTimeout")
    private @Nullable Output<Integer> healthCheckTimeout;

    /**
     * @return The timeout period of a health check response. If the backend Elastic Compute Service (ECS) instance does not send an expected response within the specified period of time, the health check fails.  Valid values: 1 to 300. Unit: seconds.  Default value: 5.
     * 
     */
    public Optional<Output<Integer>> healthCheckTimeout() {
        return Optional.ofNullable(this.healthCheckTimeout);
    }

    /**
     * The number of times that an unhealthy backend server must consecutively pass health checks before it is declared healthy (from fail to success).
     * 
     */
    @Import(name="healthyThreshold")
    private @Nullable Output<Integer> healthyThreshold;

    /**
     * @return The number of times that an unhealthy backend server must consecutively pass health checks before it is declared healthy (from fail to success).
     * 
     */
    public Optional<Output<Integer>> healthyThreshold() {
        return Optional.ofNullable(this.healthyThreshold);
    }

    /**
     * The ID of the resource group
     * 
     */
    @Import(name="resourceGroupId")
    private @Nullable Output<String> resourceGroupId;

    /**
     * @return The ID of the resource group
     * 
     */
    public Optional<Output<String>> resourceGroupId() {
        return Optional.ofNullable(this.resourceGroupId);
    }

    /**
     * The tag of the resource
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return The tag of the resource
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * Specifies the number of times that an healthy backend server must consecutively fail health checks before it is declared unhealthy (from success to fail).
     * 
     */
    @Import(name="unhealthyThreshold")
    private @Nullable Output<Integer> unhealthyThreshold;

    /**
     * @return Specifies the number of times that an healthy backend server must consecutively fail health checks before it is declared unhealthy (from success to fail).
     * 
     */
    public Optional<Output<Integer>> unhealthyThreshold() {
        return Optional.ofNullable(this.unhealthyThreshold);
    }

    private HealthCheckTemplateArgs() {}

    private HealthCheckTemplateArgs(HealthCheckTemplateArgs $) {
        this.dryRun = $.dryRun;
        this.healthCheckCodes = $.healthCheckCodes;
        this.healthCheckConnectPort = $.healthCheckConnectPort;
        this.healthCheckHost = $.healthCheckHost;
        this.healthCheckHttpVersion = $.healthCheckHttpVersion;
        this.healthCheckInterval = $.healthCheckInterval;
        this.healthCheckMethod = $.healthCheckMethod;
        this.healthCheckPath = $.healthCheckPath;
        this.healthCheckProtocol = $.healthCheckProtocol;
        this.healthCheckTemplateName = $.healthCheckTemplateName;
        this.healthCheckTimeout = $.healthCheckTimeout;
        this.healthyThreshold = $.healthyThreshold;
        this.resourceGroupId = $.resourceGroupId;
        this.tags = $.tags;
        this.unhealthyThreshold = $.unhealthyThreshold;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(HealthCheckTemplateArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private HealthCheckTemplateArgs $;

        public Builder() {
            $ = new HealthCheckTemplateArgs();
        }

        public Builder(HealthCheckTemplateArgs defaults) {
            $ = new HealthCheckTemplateArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param dryRun Whether to PreCheck only this request, value:
         * true: sends a check request and does not create a resource. Check items include whether required parameters, request format, and business restrictions have been filled in. If the check fails, the corresponding error is returned. If the check passes, the error code DryRunOperation is returned.
         * false (default): Sends a normal request, returns the http_2xx status code after the check, and directly performs the operation.
         * 
         * @return builder
         * 
         */
        public Builder dryRun(@Nullable Output<Boolean> dryRun) {
            $.dryRun = dryRun;
            return this;
        }

        /**
         * @param dryRun Whether to PreCheck only this request, value:
         * true: sends a check request and does not create a resource. Check items include whether required parameters, request format, and business restrictions have been filled in. If the check fails, the corresponding error is returned. If the check passes, the error code DryRunOperation is returned.
         * false (default): Sends a normal request, returns the http_2xx status code after the check, and directly performs the operation.
         * 
         * @return builder
         * 
         */
        public Builder dryRun(Boolean dryRun) {
            return dryRun(Output.of(dryRun));
        }

        /**
         * @param healthCheckCodes The HTTP code of the health check. The default value is http_2xx. The normal HTTP code for health check. Separate multiple codes with commas (,). Valid values: http_2xx, http_3xx, http_4xx, or http_5xx.
         * 
         * @return builder
         * 
         */
        public Builder healthCheckCodes(@Nullable Output<List<String>> healthCheckCodes) {
            $.healthCheckCodes = healthCheckCodes;
            return this;
        }

        /**
         * @param healthCheckCodes The HTTP code of the health check. The default value is http_2xx. The normal HTTP code for health check. Separate multiple codes with commas (,). Valid values: http_2xx, http_3xx, http_4xx, or http_5xx.
         * 
         * @return builder
         * 
         */
        public Builder healthCheckCodes(List<String> healthCheckCodes) {
            return healthCheckCodes(Output.of(healthCheckCodes));
        }

        /**
         * @param healthCheckCodes The HTTP code of the health check. The default value is http_2xx. The normal HTTP code for health check. Separate multiple codes with commas (,). Valid values: http_2xx, http_3xx, http_4xx, or http_5xx.
         * 
         * @return builder
         * 
         */
        public Builder healthCheckCodes(String... healthCheckCodes) {
            return healthCheckCodes(List.of(healthCheckCodes));
        }

        /**
         * @param healthCheckConnectPort The number of the port that is used for health checks.  Valid values: 0 to 65535.  Default value: 0. This value indicates that the backend server is used for health checks.
         * 
         * @return builder
         * 
         */
        public Builder healthCheckConnectPort(@Nullable Output<Integer> healthCheckConnectPort) {
            $.healthCheckConnectPort = healthCheckConnectPort;
            return this;
        }

        /**
         * @param healthCheckConnectPort The number of the port that is used for health checks.  Valid values: 0 to 65535.  Default value: 0. This value indicates that the backend server is used for health checks.
         * 
         * @return builder
         * 
         */
        public Builder healthCheckConnectPort(Integer healthCheckConnectPort) {
            return healthCheckConnectPort(Output.of(healthCheckConnectPort));
        }

        /**
         * @param healthCheckHost The domain name that is used for health checks. Valid values:  $SERVER_IP (default value): The private IP addresses of backend servers. If the $_ip parameter is set or the HealthCheckHost parameter is not set, SLB uses the private IP addresses of backend servers as the domain names for health checks.  domain: The domain name must be 1 to 80 characters in length, and can contain only letters, digits, periods (.),and hyphens (-).
         * 
         * @return builder
         * 
         */
        public Builder healthCheckHost(@Nullable Output<String> healthCheckHost) {
            $.healthCheckHost = healthCheckHost;
            return this;
        }

        /**
         * @param healthCheckHost The domain name that is used for health checks. Valid values:  $SERVER_IP (default value): The private IP addresses of backend servers. If the $_ip parameter is set or the HealthCheckHost parameter is not set, SLB uses the private IP addresses of backend servers as the domain names for health checks.  domain: The domain name must be 1 to 80 characters in length, and can contain only letters, digits, periods (.),and hyphens (-).
         * 
         * @return builder
         * 
         */
        public Builder healthCheckHost(String healthCheckHost) {
            return healthCheckHost(Output.of(healthCheckHost));
        }

        /**
         * @param healthCheckHttpVersion The version of the HTTP protocol.  Valid values: HTTP 1.0 and HTTP 1.1.  Default value: HTTP 1.1.
         * 
         * @return builder
         * 
         */
        public Builder healthCheckHttpVersion(@Nullable Output<String> healthCheckHttpVersion) {
            $.healthCheckHttpVersion = healthCheckHttpVersion;
            return this;
        }

        /**
         * @param healthCheckHttpVersion The version of the HTTP protocol.  Valid values: HTTP 1.0 and HTTP 1.1.  Default value: HTTP 1.1.
         * 
         * @return builder
         * 
         */
        public Builder healthCheckHttpVersion(String healthCheckHttpVersion) {
            return healthCheckHttpVersion(Output.of(healthCheckHttpVersion));
        }

        /**
         * @param healthCheckInterval The time interval between two consecutive health checks.  Valid values: 1 to 50. Unit: seconds.  Default value: 2.
         * 
         * @return builder
         * 
         */
        public Builder healthCheckInterval(@Nullable Output<Integer> healthCheckInterval) {
            $.healthCheckInterval = healthCheckInterval;
            return this;
        }

        /**
         * @param healthCheckInterval The time interval between two consecutive health checks.  Valid values: 1 to 50. Unit: seconds.  Default value: 2.
         * 
         * @return builder
         * 
         */
        public Builder healthCheckInterval(Integer healthCheckInterval) {
            return healthCheckInterval(Output.of(healthCheckInterval));
        }

        /**
         * @param healthCheckMethod The health check method.  Valid values: GET and HEAD.  Default value: HEAD.
         * 
         * @return builder
         * 
         */
        public Builder healthCheckMethod(@Nullable Output<String> healthCheckMethod) {
            $.healthCheckMethod = healthCheckMethod;
            return this;
        }

        /**
         * @param healthCheckMethod The health check method.  Valid values: GET and HEAD.  Default value: HEAD.
         * 
         * @return builder
         * 
         */
        public Builder healthCheckMethod(String healthCheckMethod) {
            return healthCheckMethod(Output.of(healthCheckMethod));
        }

        /**
         * @param healthCheckPath The URL that is used for health checks.  The URL must be 1 to 80 characters in length, and can contain letters, digits, hyphens (-), forward slashes (/), periods (.), percent signs (%), question marks (?), number signs (#), and ampersands (&amp;). The URL can also contain the following extended characters: _ ; ~ ! ( )* [ ] {@literal @} $ ^ : &#39; , +. The URL must start with a forward slash (/).
         * 
         * @return builder
         * 
         */
        public Builder healthCheckPath(@Nullable Output<String> healthCheckPath) {
            $.healthCheckPath = healthCheckPath;
            return this;
        }

        /**
         * @param healthCheckPath The URL that is used for health checks.  The URL must be 1 to 80 characters in length, and can contain letters, digits, hyphens (-), forward slashes (/), periods (.), percent signs (%), question marks (?), number signs (#), and ampersands (&amp;). The URL can also contain the following extended characters: _ ; ~ ! ( )* [ ] {@literal @} $ ^ : &#39; , +. The URL must start with a forward slash (/).
         * 
         * @return builder
         * 
         */
        public Builder healthCheckPath(String healthCheckPath) {
            return healthCheckPath(Output.of(healthCheckPath));
        }

        /**
         * @param healthCheckProtocol The protocol used for the health check. Value:
         * HTTP (default): Sends a HEAD or GET request to simulate the browser&#39;s access behavior to check whether the server application is healthy.
         * HTTPS: Sends a HEAD or GET request to simulate the browser&#39;s access behavior to check whether the server application is healthy. (Data encryption is more secure than HTTP.)
         * TCP: Sends a SYN handshake packet to check whether the server port is alive.
         * gRPC: Check whether the server application is healthy by sending a POST or GET request.
         * 
         * @return builder
         * 
         */
        public Builder healthCheckProtocol(@Nullable Output<String> healthCheckProtocol) {
            $.healthCheckProtocol = healthCheckProtocol;
            return this;
        }

        /**
         * @param healthCheckProtocol The protocol used for the health check. Value:
         * HTTP (default): Sends a HEAD or GET request to simulate the browser&#39;s access behavior to check whether the server application is healthy.
         * HTTPS: Sends a HEAD or GET request to simulate the browser&#39;s access behavior to check whether the server application is healthy. (Data encryption is more secure than HTTP.)
         * TCP: Sends a SYN handshake packet to check whether the server port is alive.
         * gRPC: Check whether the server application is healthy by sending a POST or GET request.
         * 
         * @return builder
         * 
         */
        public Builder healthCheckProtocol(String healthCheckProtocol) {
            return healthCheckProtocol(Output.of(healthCheckProtocol));
        }

        /**
         * @param healthCheckTemplateName The name of the health check template.  The name must be 2 to 128 characters in length, and can contain letters, digits, periods (.), underscores (_), and hyphens (-). The name must start with a letter.
         * 
         * @return builder
         * 
         */
        public Builder healthCheckTemplateName(Output<String> healthCheckTemplateName) {
            $.healthCheckTemplateName = healthCheckTemplateName;
            return this;
        }

        /**
         * @param healthCheckTemplateName The name of the health check template.  The name must be 2 to 128 characters in length, and can contain letters, digits, periods (.), underscores (_), and hyphens (-). The name must start with a letter.
         * 
         * @return builder
         * 
         */
        public Builder healthCheckTemplateName(String healthCheckTemplateName) {
            return healthCheckTemplateName(Output.of(healthCheckTemplateName));
        }

        /**
         * @param healthCheckTimeout The timeout period of a health check response. If the backend Elastic Compute Service (ECS) instance does not send an expected response within the specified period of time, the health check fails.  Valid values: 1 to 300. Unit: seconds.  Default value: 5.
         * 
         * @return builder
         * 
         */
        public Builder healthCheckTimeout(@Nullable Output<Integer> healthCheckTimeout) {
            $.healthCheckTimeout = healthCheckTimeout;
            return this;
        }

        /**
         * @param healthCheckTimeout The timeout period of a health check response. If the backend Elastic Compute Service (ECS) instance does not send an expected response within the specified period of time, the health check fails.  Valid values: 1 to 300. Unit: seconds.  Default value: 5.
         * 
         * @return builder
         * 
         */
        public Builder healthCheckTimeout(Integer healthCheckTimeout) {
            return healthCheckTimeout(Output.of(healthCheckTimeout));
        }

        /**
         * @param healthyThreshold The number of times that an unhealthy backend server must consecutively pass health checks before it is declared healthy (from fail to success).
         * 
         * @return builder
         * 
         */
        public Builder healthyThreshold(@Nullable Output<Integer> healthyThreshold) {
            $.healthyThreshold = healthyThreshold;
            return this;
        }

        /**
         * @param healthyThreshold The number of times that an unhealthy backend server must consecutively pass health checks before it is declared healthy (from fail to success).
         * 
         * @return builder
         * 
         */
        public Builder healthyThreshold(Integer healthyThreshold) {
            return healthyThreshold(Output.of(healthyThreshold));
        }

        /**
         * @param resourceGroupId The ID of the resource group
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupId(@Nullable Output<String> resourceGroupId) {
            $.resourceGroupId = resourceGroupId;
            return this;
        }

        /**
         * @param resourceGroupId The ID of the resource group
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupId(String resourceGroupId) {
            return resourceGroupId(Output.of(resourceGroupId));
        }

        /**
         * @param tags The tag of the resource
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags The tag of the resource
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param unhealthyThreshold Specifies the number of times that an healthy backend server must consecutively fail health checks before it is declared unhealthy (from success to fail).
         * 
         * @return builder
         * 
         */
        public Builder unhealthyThreshold(@Nullable Output<Integer> unhealthyThreshold) {
            $.unhealthyThreshold = unhealthyThreshold;
            return this;
        }

        /**
         * @param unhealthyThreshold Specifies the number of times that an healthy backend server must consecutively fail health checks before it is declared unhealthy (from success to fail).
         * 
         * @return builder
         * 
         */
        public Builder unhealthyThreshold(Integer unhealthyThreshold) {
            return unhealthyThreshold(Output.of(unhealthyThreshold));
        }

        public HealthCheckTemplateArgs build() {
            if ($.healthCheckTemplateName == null) {
                throw new MissingRequiredPropertyException("HealthCheckTemplateArgs", "healthCheckTemplateName");
            }
            return $;
        }
    }

}
