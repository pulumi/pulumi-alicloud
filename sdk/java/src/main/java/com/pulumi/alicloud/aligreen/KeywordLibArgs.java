// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.aligreen;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class KeywordLibArgs extends com.pulumi.resources.ResourceArgs {

    public static final KeywordLibArgs Empty = new KeywordLibArgs();

    /**
     * The business scenario. Example:[&#34;bizTypeA&#34;,&#34;bizTypeB&#34;]
     * 
     */
    @Import(name="bizTypes")
    private @Nullable Output<List<String>> bizTypes;

    /**
     * @return The business scenario. Example:[&#34;bizTypeA&#34;,&#34;bizTypeB&#34;]
     * 
     */
    public Optional<Output<List<String>>> bizTypes() {
        return Optional.ofNullable(this.bizTypes);
    }

    /**
     * The category of the text library. Valid values: BLACK: a blacklist. WHITE: a whitelist. REVIEW: a review list
     * 
     */
    @Import(name="category")
    private @Nullable Output<String> category;

    /**
     * @return The category of the text library. Valid values: BLACK: a blacklist. WHITE: a whitelist. REVIEW: a review list
     * 
     */
    public Optional<Output<String>> category() {
        return Optional.ofNullable(this.category);
    }

    /**
     * Specifies whether to enable text library.true: Enable the text library. This is the default value.false: Disable the text library.
     * 
     */
    @Import(name="enable")
    private @Nullable Output<Boolean> enable;

    /**
     * @return Specifies whether to enable text library.true: Enable the text library. This is the default value.false: Disable the text library.
     * 
     */
    public Optional<Output<Boolean>> enable() {
        return Optional.ofNullable(this.enable);
    }

    /**
     * The name of the keyword library defined by the customer. It can contain no more than 20 characters in Chinese, English, and underscore (_).
     * 
     */
    @Import(name="keywordLibName", required=true)
    private Output<String> keywordLibName;

    /**
     * @return The name of the keyword library defined by the customer. It can contain no more than 20 characters in Chinese, English, and underscore (_).
     * 
     */
    public Output<String> keywordLibName() {
        return this.keywordLibName;
    }

    /**
     * Language.
     * 
     */
    @Import(name="lang")
    private @Nullable Output<String> lang;

    /**
     * @return Language.
     * 
     */
    public Optional<Output<String>> lang() {
        return Optional.ofNullable(this.lang);
    }

    /**
     * Language used by the text Library
     * 
     */
    @Import(name="language")
    private @Nullable Output<String> language;

    /**
     * @return Language used by the text Library
     * 
     */
    public Optional<Output<String>> language() {
        return Optional.ofNullable(this.language);
    }

    /**
     * The category of the text library in each moderation scenario. Valid values: textKeyword: a text library against which terms in text are matched. similarText: a text library against which text patterns are matched. textKeyword: a text library against which terms extracted from images are matched. voiceText: a text library against which terms converted from audio are matched.
     * 
     */
    @Import(name="libType")
    private @Nullable Output<String> libType;

    /**
     * @return The category of the text library in each moderation scenario. Valid values: textKeyword: a text library against which terms in text are matched. similarText: a text library against which text patterns are matched. textKeyword: a text library against which terms extracted from images are matched. voiceText: a text library against which terms converted from audio are matched.
     * 
     */
    public Optional<Output<String>> libType() {
        return Optional.ofNullable(this.libType);
    }

    /**
     * The matching method. Valid values:fuzzy: fuzzy match precise: exact match
     * 
     */
    @Import(name="matchMode")
    private @Nullable Output<String> matchMode;

    /**
     * @return The matching method. Valid values:fuzzy: fuzzy match precise: exact match
     * 
     */
    public Optional<Output<String>> matchMode() {
        return Optional.ofNullable(this.matchMode);
    }

    /**
     * The moderation scenario to which the text library applies. Valid values:TEXT: text anti-spam、IMAGE: ad violation detection、VOICE: audio anti-spam
     * 
     */
    @Import(name="resourceType", required=true)
    private Output<String> resourceType;

    /**
     * @return The moderation scenario to which the text library applies. Valid values:TEXT: text anti-spam、IMAGE: ad violation detection、VOICE: audio anti-spam
     * 
     */
    public Output<String> resourceType() {
        return this.resourceType;
    }

    private KeywordLibArgs() {}

    private KeywordLibArgs(KeywordLibArgs $) {
        this.bizTypes = $.bizTypes;
        this.category = $.category;
        this.enable = $.enable;
        this.keywordLibName = $.keywordLibName;
        this.lang = $.lang;
        this.language = $.language;
        this.libType = $.libType;
        this.matchMode = $.matchMode;
        this.resourceType = $.resourceType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(KeywordLibArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private KeywordLibArgs $;

        public Builder() {
            $ = new KeywordLibArgs();
        }

        public Builder(KeywordLibArgs defaults) {
            $ = new KeywordLibArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param bizTypes The business scenario. Example:[&#34;bizTypeA&#34;,&#34;bizTypeB&#34;]
         * 
         * @return builder
         * 
         */
        public Builder bizTypes(@Nullable Output<List<String>> bizTypes) {
            $.bizTypes = bizTypes;
            return this;
        }

        /**
         * @param bizTypes The business scenario. Example:[&#34;bizTypeA&#34;,&#34;bizTypeB&#34;]
         * 
         * @return builder
         * 
         */
        public Builder bizTypes(List<String> bizTypes) {
            return bizTypes(Output.of(bizTypes));
        }

        /**
         * @param bizTypes The business scenario. Example:[&#34;bizTypeA&#34;,&#34;bizTypeB&#34;]
         * 
         * @return builder
         * 
         */
        public Builder bizTypes(String... bizTypes) {
            return bizTypes(List.of(bizTypes));
        }

        /**
         * @param category The category of the text library. Valid values: BLACK: a blacklist. WHITE: a whitelist. REVIEW: a review list
         * 
         * @return builder
         * 
         */
        public Builder category(@Nullable Output<String> category) {
            $.category = category;
            return this;
        }

        /**
         * @param category The category of the text library. Valid values: BLACK: a blacklist. WHITE: a whitelist. REVIEW: a review list
         * 
         * @return builder
         * 
         */
        public Builder category(String category) {
            return category(Output.of(category));
        }

        /**
         * @param enable Specifies whether to enable text library.true: Enable the text library. This is the default value.false: Disable the text library.
         * 
         * @return builder
         * 
         */
        public Builder enable(@Nullable Output<Boolean> enable) {
            $.enable = enable;
            return this;
        }

        /**
         * @param enable Specifies whether to enable text library.true: Enable the text library. This is the default value.false: Disable the text library.
         * 
         * @return builder
         * 
         */
        public Builder enable(Boolean enable) {
            return enable(Output.of(enable));
        }

        /**
         * @param keywordLibName The name of the keyword library defined by the customer. It can contain no more than 20 characters in Chinese, English, and underscore (_).
         * 
         * @return builder
         * 
         */
        public Builder keywordLibName(Output<String> keywordLibName) {
            $.keywordLibName = keywordLibName;
            return this;
        }

        /**
         * @param keywordLibName The name of the keyword library defined by the customer. It can contain no more than 20 characters in Chinese, English, and underscore (_).
         * 
         * @return builder
         * 
         */
        public Builder keywordLibName(String keywordLibName) {
            return keywordLibName(Output.of(keywordLibName));
        }

        /**
         * @param lang Language.
         * 
         * @return builder
         * 
         */
        public Builder lang(@Nullable Output<String> lang) {
            $.lang = lang;
            return this;
        }

        /**
         * @param lang Language.
         * 
         * @return builder
         * 
         */
        public Builder lang(String lang) {
            return lang(Output.of(lang));
        }

        /**
         * @param language Language used by the text Library
         * 
         * @return builder
         * 
         */
        public Builder language(@Nullable Output<String> language) {
            $.language = language;
            return this;
        }

        /**
         * @param language Language used by the text Library
         * 
         * @return builder
         * 
         */
        public Builder language(String language) {
            return language(Output.of(language));
        }

        /**
         * @param libType The category of the text library in each moderation scenario. Valid values: textKeyword: a text library against which terms in text are matched. similarText: a text library against which text patterns are matched. textKeyword: a text library against which terms extracted from images are matched. voiceText: a text library against which terms converted from audio are matched.
         * 
         * @return builder
         * 
         */
        public Builder libType(@Nullable Output<String> libType) {
            $.libType = libType;
            return this;
        }

        /**
         * @param libType The category of the text library in each moderation scenario. Valid values: textKeyword: a text library against which terms in text are matched. similarText: a text library against which text patterns are matched. textKeyword: a text library against which terms extracted from images are matched. voiceText: a text library against which terms converted from audio are matched.
         * 
         * @return builder
         * 
         */
        public Builder libType(String libType) {
            return libType(Output.of(libType));
        }

        /**
         * @param matchMode The matching method. Valid values:fuzzy: fuzzy match precise: exact match
         * 
         * @return builder
         * 
         */
        public Builder matchMode(@Nullable Output<String> matchMode) {
            $.matchMode = matchMode;
            return this;
        }

        /**
         * @param matchMode The matching method. Valid values:fuzzy: fuzzy match precise: exact match
         * 
         * @return builder
         * 
         */
        public Builder matchMode(String matchMode) {
            return matchMode(Output.of(matchMode));
        }

        /**
         * @param resourceType The moderation scenario to which the text library applies. Valid values:TEXT: text anti-spam、IMAGE: ad violation detection、VOICE: audio anti-spam
         * 
         * @return builder
         * 
         */
        public Builder resourceType(Output<String> resourceType) {
            $.resourceType = resourceType;
            return this;
        }

        /**
         * @param resourceType The moderation scenario to which the text library applies. Valid values:TEXT: text anti-spam、IMAGE: ad violation detection、VOICE: audio anti-spam
         * 
         * @return builder
         * 
         */
        public Builder resourceType(String resourceType) {
            return resourceType(Output.of(resourceType));
        }

        public KeywordLibArgs build() {
            if ($.keywordLibName == null) {
                throw new MissingRequiredPropertyException("KeywordLibArgs", "keywordLibName");
            }
            if ($.resourceType == null) {
                throw new MissingRequiredPropertyException("KeywordLibArgs", "resourceType");
            }
            return $;
        }
    }

}
