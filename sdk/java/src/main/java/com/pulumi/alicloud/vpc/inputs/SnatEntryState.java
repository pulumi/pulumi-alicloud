// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.vpc.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SnatEntryState extends com.pulumi.resources.ResourceArgs {

    public static final SnatEntryState Empty = new SnatEntryState();

    /**
     * Specifies whether to enable EIP affinity. Default value: `0`. Valid values:
     * 
     */
    @Import(name="eipAffinity")
    private @Nullable Output<Integer> eipAffinity;

    /**
     * @return Specifies whether to enable EIP affinity. Default value: `0`. Valid values:
     * 
     */
    public Optional<Output<Integer>> eipAffinity() {
        return Optional.ofNullable(this.eipAffinity);
    }

    /**
     * The id of the snat entry on the server.
     * 
     */
    @Import(name="snatEntryId")
    private @Nullable Output<String> snatEntryId;

    /**
     * @return The id of the snat entry on the server.
     * 
     */
    public Optional<Output<String>> snatEntryId() {
        return Optional.ofNullable(this.snatEntryId);
    }

    /**
     * The name of the SNAT entry. The name must be `2` to `128` characters in length. It must start with a letter but cannot start with `http://` or `https://`.
     * 
     */
    @Import(name="snatEntryName")
    private @Nullable Output<String> snatEntryName;

    /**
     * @return The name of the SNAT entry. The name must be `2` to `128` characters in length. It must start with a letter but cannot start with `http://` or `https://`.
     * 
     */
    public Optional<Output<String>> snatEntryName() {
        return Optional.ofNullable(this.snatEntryName);
    }

    /**
     * The IP of a SNAT entry. Separate multiple EIP or NAT IP addresses with commas (,). **NOTE:** From version 1.241.0, `snatIp` can be modified.
     * 
     */
    @Import(name="snatIp")
    private @Nullable Output<String> snatIp;

    /**
     * @return The IP of a SNAT entry. Separate multiple EIP or NAT IP addresses with commas (,). **NOTE:** From version 1.241.0, `snatIp` can be modified.
     * 
     */
    public Optional<Output<String>> snatIp() {
        return Optional.ofNullable(this.snatIp);
    }

    /**
     * The ID of the SNAT table.
     * 
     */
    @Import(name="snatTableId")
    private @Nullable Output<String> snatTableId;

    /**
     * @return The ID of the SNAT table.
     * 
     */
    public Optional<Output<String>> snatTableId() {
        return Optional.ofNullable(this.snatTableId);
    }

    /**
     * The source CIDR block specified in the SNAT entry.
     * 
     */
    @Import(name="sourceCidr")
    private @Nullable Output<String> sourceCidr;

    /**
     * @return The source CIDR block specified in the SNAT entry.
     * 
     */
    public Optional<Output<String>> sourceCidr() {
        return Optional.ofNullable(this.sourceCidr);
    }

    /**
     * The ID of the vSwitch.
     * 
     */
    @Import(name="sourceVswitchId")
    private @Nullable Output<String> sourceVswitchId;

    /**
     * @return The ID of the vSwitch.
     * 
     */
    public Optional<Output<String>> sourceVswitchId() {
        return Optional.ofNullable(this.sourceVswitchId);
    }

    /**
     * (Available since v1.119.1) The ID of the SNAT entry.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return (Available since v1.119.1) The ID of the SNAT entry.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    private SnatEntryState() {}

    private SnatEntryState(SnatEntryState $) {
        this.eipAffinity = $.eipAffinity;
        this.snatEntryId = $.snatEntryId;
        this.snatEntryName = $.snatEntryName;
        this.snatIp = $.snatIp;
        this.snatTableId = $.snatTableId;
        this.sourceCidr = $.sourceCidr;
        this.sourceVswitchId = $.sourceVswitchId;
        this.status = $.status;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SnatEntryState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SnatEntryState $;

        public Builder() {
            $ = new SnatEntryState();
        }

        public Builder(SnatEntryState defaults) {
            $ = new SnatEntryState(Objects.requireNonNull(defaults));
        }

        /**
         * @param eipAffinity Specifies whether to enable EIP affinity. Default value: `0`. Valid values:
         * 
         * @return builder
         * 
         */
        public Builder eipAffinity(@Nullable Output<Integer> eipAffinity) {
            $.eipAffinity = eipAffinity;
            return this;
        }

        /**
         * @param eipAffinity Specifies whether to enable EIP affinity. Default value: `0`. Valid values:
         * 
         * @return builder
         * 
         */
        public Builder eipAffinity(Integer eipAffinity) {
            return eipAffinity(Output.of(eipAffinity));
        }

        /**
         * @param snatEntryId The id of the snat entry on the server.
         * 
         * @return builder
         * 
         */
        public Builder snatEntryId(@Nullable Output<String> snatEntryId) {
            $.snatEntryId = snatEntryId;
            return this;
        }

        /**
         * @param snatEntryId The id of the snat entry on the server.
         * 
         * @return builder
         * 
         */
        public Builder snatEntryId(String snatEntryId) {
            return snatEntryId(Output.of(snatEntryId));
        }

        /**
         * @param snatEntryName The name of the SNAT entry. The name must be `2` to `128` characters in length. It must start with a letter but cannot start with `http://` or `https://`.
         * 
         * @return builder
         * 
         */
        public Builder snatEntryName(@Nullable Output<String> snatEntryName) {
            $.snatEntryName = snatEntryName;
            return this;
        }

        /**
         * @param snatEntryName The name of the SNAT entry. The name must be `2` to `128` characters in length. It must start with a letter but cannot start with `http://` or `https://`.
         * 
         * @return builder
         * 
         */
        public Builder snatEntryName(String snatEntryName) {
            return snatEntryName(Output.of(snatEntryName));
        }

        /**
         * @param snatIp The IP of a SNAT entry. Separate multiple EIP or NAT IP addresses with commas (,). **NOTE:** From version 1.241.0, `snatIp` can be modified.
         * 
         * @return builder
         * 
         */
        public Builder snatIp(@Nullable Output<String> snatIp) {
            $.snatIp = snatIp;
            return this;
        }

        /**
         * @param snatIp The IP of a SNAT entry. Separate multiple EIP or NAT IP addresses with commas (,). **NOTE:** From version 1.241.0, `snatIp` can be modified.
         * 
         * @return builder
         * 
         */
        public Builder snatIp(String snatIp) {
            return snatIp(Output.of(snatIp));
        }

        /**
         * @param snatTableId The ID of the SNAT table.
         * 
         * @return builder
         * 
         */
        public Builder snatTableId(@Nullable Output<String> snatTableId) {
            $.snatTableId = snatTableId;
            return this;
        }

        /**
         * @param snatTableId The ID of the SNAT table.
         * 
         * @return builder
         * 
         */
        public Builder snatTableId(String snatTableId) {
            return snatTableId(Output.of(snatTableId));
        }

        /**
         * @param sourceCidr The source CIDR block specified in the SNAT entry.
         * 
         * @return builder
         * 
         */
        public Builder sourceCidr(@Nullable Output<String> sourceCidr) {
            $.sourceCidr = sourceCidr;
            return this;
        }

        /**
         * @param sourceCidr The source CIDR block specified in the SNAT entry.
         * 
         * @return builder
         * 
         */
        public Builder sourceCidr(String sourceCidr) {
            return sourceCidr(Output.of(sourceCidr));
        }

        /**
         * @param sourceVswitchId The ID of the vSwitch.
         * 
         * @return builder
         * 
         */
        public Builder sourceVswitchId(@Nullable Output<String> sourceVswitchId) {
            $.sourceVswitchId = sourceVswitchId;
            return this;
        }

        /**
         * @param sourceVswitchId The ID of the vSwitch.
         * 
         * @return builder
         * 
         */
        public Builder sourceVswitchId(String sourceVswitchId) {
            return sourceVswitchId(Output.of(sourceVswitchId));
        }

        /**
         * @param status (Available since v1.119.1) The ID of the SNAT entry.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status (Available since v1.119.1) The ID of the SNAT entry.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        public SnatEntryState build() {
            return $;
        }
    }

}
