// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.rds.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DbNodeState extends com.pulumi.resources.ResourceArgs {

    public static final DbNodeState Empty = new DbNodeState();

    /**
     * The specification information of the node.
     * 
     */
    @Import(name="classCode")
    private @Nullable Output<String> classCode;

    /**
     * @return The specification information of the node.
     * 
     */
    public Optional<Output<String>> classCode() {
        return Optional.ofNullable(this.classCode);
    }

    /**
     * The Id of instance that can run database.
     * 
     */
    @Import(name="dbInstanceId")
    private @Nullable Output<String> dbInstanceId;

    /**
     * @return The Id of instance that can run database.
     * 
     */
    public Optional<Output<String>> dbInstanceId() {
        return Optional.ofNullable(this.dbInstanceId);
    }

    /**
     * The ID of the node.
     * 
     */
    @Import(name="nodeId")
    private @Nullable Output<String> nodeId;

    /**
     * @return The ID of the node.
     * 
     */
    public Optional<Output<String>> nodeId() {
        return Optional.ofNullable(this.nodeId);
    }

    /**
     * The region ID of the node.
     * 
     */
    @Import(name="nodeRegionId")
    private @Nullable Output<String> nodeRegionId;

    /**
     * @return The region ID of the node.
     * 
     */
    public Optional<Output<String>> nodeRegionId() {
        return Optional.ofNullable(this.nodeRegionId);
    }

    /**
     * The role of node.
     * 
     */
    @Import(name="nodeRole")
    private @Nullable Output<String> nodeRole;

    /**
     * @return The role of node.
     * 
     */
    public Optional<Output<String>> nodeRole() {
        return Optional.ofNullable(this.nodeRole);
    }

    /**
     * The zone ID of the node.
     * 
     */
    @Import(name="zoneId")
    private @Nullable Output<String> zoneId;

    /**
     * @return The zone ID of the node.
     * 
     */
    public Optional<Output<String>> zoneId() {
        return Optional.ofNullable(this.zoneId);
    }

    private DbNodeState() {}

    private DbNodeState(DbNodeState $) {
        this.classCode = $.classCode;
        this.dbInstanceId = $.dbInstanceId;
        this.nodeId = $.nodeId;
        this.nodeRegionId = $.nodeRegionId;
        this.nodeRole = $.nodeRole;
        this.zoneId = $.zoneId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DbNodeState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DbNodeState $;

        public Builder() {
            $ = new DbNodeState();
        }

        public Builder(DbNodeState defaults) {
            $ = new DbNodeState(Objects.requireNonNull(defaults));
        }

        /**
         * @param classCode The specification information of the node.
         * 
         * @return builder
         * 
         */
        public Builder classCode(@Nullable Output<String> classCode) {
            $.classCode = classCode;
            return this;
        }

        /**
         * @param classCode The specification information of the node.
         * 
         * @return builder
         * 
         */
        public Builder classCode(String classCode) {
            return classCode(Output.of(classCode));
        }

        /**
         * @param dbInstanceId The Id of instance that can run database.
         * 
         * @return builder
         * 
         */
        public Builder dbInstanceId(@Nullable Output<String> dbInstanceId) {
            $.dbInstanceId = dbInstanceId;
            return this;
        }

        /**
         * @param dbInstanceId The Id of instance that can run database.
         * 
         * @return builder
         * 
         */
        public Builder dbInstanceId(String dbInstanceId) {
            return dbInstanceId(Output.of(dbInstanceId));
        }

        /**
         * @param nodeId The ID of the node.
         * 
         * @return builder
         * 
         */
        public Builder nodeId(@Nullable Output<String> nodeId) {
            $.nodeId = nodeId;
            return this;
        }

        /**
         * @param nodeId The ID of the node.
         * 
         * @return builder
         * 
         */
        public Builder nodeId(String nodeId) {
            return nodeId(Output.of(nodeId));
        }

        /**
         * @param nodeRegionId The region ID of the node.
         * 
         * @return builder
         * 
         */
        public Builder nodeRegionId(@Nullable Output<String> nodeRegionId) {
            $.nodeRegionId = nodeRegionId;
            return this;
        }

        /**
         * @param nodeRegionId The region ID of the node.
         * 
         * @return builder
         * 
         */
        public Builder nodeRegionId(String nodeRegionId) {
            return nodeRegionId(Output.of(nodeRegionId));
        }

        /**
         * @param nodeRole The role of node.
         * 
         * @return builder
         * 
         */
        public Builder nodeRole(@Nullable Output<String> nodeRole) {
            $.nodeRole = nodeRole;
            return this;
        }

        /**
         * @param nodeRole The role of node.
         * 
         * @return builder
         * 
         */
        public Builder nodeRole(String nodeRole) {
            return nodeRole(Output.of(nodeRole));
        }

        /**
         * @param zoneId The zone ID of the node.
         * 
         * @return builder
         * 
         */
        public Builder zoneId(@Nullable Output<String> zoneId) {
            $.zoneId = zoneId;
            return this;
        }

        /**
         * @param zoneId The zone ID of the node.
         * 
         * @return builder
         * 
         */
        public Builder zoneId(String zoneId) {
            return zoneId(Output.of(zoneId));
        }

        public DbNodeState build() {
            return $;
        }
    }

}
