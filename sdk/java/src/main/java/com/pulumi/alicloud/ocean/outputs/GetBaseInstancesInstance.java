// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.ocean.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetBaseInstancesInstance {
    /**
     * @return The product code of the OceanBase cluster.
     * 
     */
    private String commodityCode;
    /**
     * @return The number of CPU cores of the cluster.
     * 
     */
    private Integer cpu;
    /**
     * @return The creation time of the resource.
     * 
     */
    private String createTime;
    /**
     * @return The size of the storage space, in GB.
     * 
     */
    private String diskSize;
    /**
     * @return The ID of the Instance.
     * 
     */
    private String id;
    /**
     * @return Cluster specification information.
     * 
     */
    private String instanceClass;
    /**
     * @return OceanBase cluster ID.
     * 
     */
    private String instanceId;
    /**
     * @return OceanBase cluster name.
     * 
     */
    private String instanceName;
    /**
     * @return The number of nodes in the cluster.
     * 
     */
    private String nodeNum;
    /**
     * @return The payment method of the instance.
     * 
     */
    private String paymentType;
    /**
     * @return The ID of the enterprise resource group to which the instance resides.
     * 
     */
    private String resourceGroupId;
    /**
     * @return Series of OceanBase clusters.
     * 
     */
    private String series;
    /**
     * @return The status of the resource.
     * 
     */
    private String status;
    /**
     * @return Information about the zone where the cluster is deployed.
     * 
     */
    private List<String> zones;

    private GetBaseInstancesInstance() {}
    /**
     * @return The product code of the OceanBase cluster.
     * 
     */
    public String commodityCode() {
        return this.commodityCode;
    }
    /**
     * @return The number of CPU cores of the cluster.
     * 
     */
    public Integer cpu() {
        return this.cpu;
    }
    /**
     * @return The creation time of the resource.
     * 
     */
    public String createTime() {
        return this.createTime;
    }
    /**
     * @return The size of the storage space, in GB.
     * 
     */
    public String diskSize() {
        return this.diskSize;
    }
    /**
     * @return The ID of the Instance.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Cluster specification information.
     * 
     */
    public String instanceClass() {
        return this.instanceClass;
    }
    /**
     * @return OceanBase cluster ID.
     * 
     */
    public String instanceId() {
        return this.instanceId;
    }
    /**
     * @return OceanBase cluster name.
     * 
     */
    public String instanceName() {
        return this.instanceName;
    }
    /**
     * @return The number of nodes in the cluster.
     * 
     */
    public String nodeNum() {
        return this.nodeNum;
    }
    /**
     * @return The payment method of the instance.
     * 
     */
    public String paymentType() {
        return this.paymentType;
    }
    /**
     * @return The ID of the enterprise resource group to which the instance resides.
     * 
     */
    public String resourceGroupId() {
        return this.resourceGroupId;
    }
    /**
     * @return Series of OceanBase clusters.
     * 
     */
    public String series() {
        return this.series;
    }
    /**
     * @return The status of the resource.
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return Information about the zone where the cluster is deployed.
     * 
     */
    public List<String> zones() {
        return this.zones;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetBaseInstancesInstance defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String commodityCode;
        private Integer cpu;
        private String createTime;
        private String diskSize;
        private String id;
        private String instanceClass;
        private String instanceId;
        private String instanceName;
        private String nodeNum;
        private String paymentType;
        private String resourceGroupId;
        private String series;
        private String status;
        private List<String> zones;
        public Builder() {}
        public Builder(GetBaseInstancesInstance defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.commodityCode = defaults.commodityCode;
    	      this.cpu = defaults.cpu;
    	      this.createTime = defaults.createTime;
    	      this.diskSize = defaults.diskSize;
    	      this.id = defaults.id;
    	      this.instanceClass = defaults.instanceClass;
    	      this.instanceId = defaults.instanceId;
    	      this.instanceName = defaults.instanceName;
    	      this.nodeNum = defaults.nodeNum;
    	      this.paymentType = defaults.paymentType;
    	      this.resourceGroupId = defaults.resourceGroupId;
    	      this.series = defaults.series;
    	      this.status = defaults.status;
    	      this.zones = defaults.zones;
        }

        @CustomType.Setter
        public Builder commodityCode(String commodityCode) {
            if (commodityCode == null) {
              throw new MissingRequiredPropertyException("GetBaseInstancesInstance", "commodityCode");
            }
            this.commodityCode = commodityCode;
            return this;
        }
        @CustomType.Setter
        public Builder cpu(Integer cpu) {
            if (cpu == null) {
              throw new MissingRequiredPropertyException("GetBaseInstancesInstance", "cpu");
            }
            this.cpu = cpu;
            return this;
        }
        @CustomType.Setter
        public Builder createTime(String createTime) {
            if (createTime == null) {
              throw new MissingRequiredPropertyException("GetBaseInstancesInstance", "createTime");
            }
            this.createTime = createTime;
            return this;
        }
        @CustomType.Setter
        public Builder diskSize(String diskSize) {
            if (diskSize == null) {
              throw new MissingRequiredPropertyException("GetBaseInstancesInstance", "diskSize");
            }
            this.diskSize = diskSize;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetBaseInstancesInstance", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder instanceClass(String instanceClass) {
            if (instanceClass == null) {
              throw new MissingRequiredPropertyException("GetBaseInstancesInstance", "instanceClass");
            }
            this.instanceClass = instanceClass;
            return this;
        }
        @CustomType.Setter
        public Builder instanceId(String instanceId) {
            if (instanceId == null) {
              throw new MissingRequiredPropertyException("GetBaseInstancesInstance", "instanceId");
            }
            this.instanceId = instanceId;
            return this;
        }
        @CustomType.Setter
        public Builder instanceName(String instanceName) {
            if (instanceName == null) {
              throw new MissingRequiredPropertyException("GetBaseInstancesInstance", "instanceName");
            }
            this.instanceName = instanceName;
            return this;
        }
        @CustomType.Setter
        public Builder nodeNum(String nodeNum) {
            if (nodeNum == null) {
              throw new MissingRequiredPropertyException("GetBaseInstancesInstance", "nodeNum");
            }
            this.nodeNum = nodeNum;
            return this;
        }
        @CustomType.Setter
        public Builder paymentType(String paymentType) {
            if (paymentType == null) {
              throw new MissingRequiredPropertyException("GetBaseInstancesInstance", "paymentType");
            }
            this.paymentType = paymentType;
            return this;
        }
        @CustomType.Setter
        public Builder resourceGroupId(String resourceGroupId) {
            if (resourceGroupId == null) {
              throw new MissingRequiredPropertyException("GetBaseInstancesInstance", "resourceGroupId");
            }
            this.resourceGroupId = resourceGroupId;
            return this;
        }
        @CustomType.Setter
        public Builder series(String series) {
            if (series == null) {
              throw new MissingRequiredPropertyException("GetBaseInstancesInstance", "series");
            }
            this.series = series;
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            if (status == null) {
              throw new MissingRequiredPropertyException("GetBaseInstancesInstance", "status");
            }
            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder zones(List<String> zones) {
            if (zones == null) {
              throw new MissingRequiredPropertyException("GetBaseInstancesInstance", "zones");
            }
            this.zones = zones;
            return this;
        }
        public Builder zones(String... zones) {
            return zones(List.of(zones));
        }
        public GetBaseInstancesInstance build() {
            final var _resultValue = new GetBaseInstancesInstance();
            _resultValue.commodityCode = commodityCode;
            _resultValue.cpu = cpu;
            _resultValue.createTime = createTime;
            _resultValue.diskSize = diskSize;
            _resultValue.id = id;
            _resultValue.instanceClass = instanceClass;
            _resultValue.instanceId = instanceId;
            _resultValue.instanceName = instanceName;
            _resultValue.nodeNum = nodeNum;
            _resultValue.paymentType = paymentType;
            _resultValue.resourceGroupId = resourceGroupId;
            _resultValue.series = series;
            _resultValue.status = status;
            _resultValue.zones = zones;
            return _resultValue;
        }
    }
}
