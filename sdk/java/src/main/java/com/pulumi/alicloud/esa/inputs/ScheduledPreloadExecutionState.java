// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.esa.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ScheduledPreloadExecutionState extends com.pulumi.resources.ResourceArgs {

    public static final ScheduledPreloadExecutionState Empty = new ScheduledPreloadExecutionState();

    /**
     * The end time of the prefetch plan.
     * 
     */
    @Import(name="endTime")
    private @Nullable Output<String> endTime;

    /**
     * @return The end time of the prefetch plan.
     * 
     */
    public Optional<Output<String>> endTime() {
        return Optional.ofNullable(this.endTime);
    }

    /**
     * The time interval between each batch execution. Unit: seconds.
     * 
     */
    @Import(name="interval")
    private @Nullable Output<Integer> interval;

    /**
     * @return The time interval between each batch execution. Unit: seconds.
     * 
     */
    public Optional<Output<Integer>> interval() {
        return Optional.ofNullable(this.interval);
    }

    /**
     * The ID of the prefetch plan.
     * 
     */
    @Import(name="scheduledPreloadExecutionId")
    private @Nullable Output<String> scheduledPreloadExecutionId;

    /**
     * @return The ID of the prefetch plan.
     * 
     */
    public Optional<Output<String>> scheduledPreloadExecutionId() {
        return Optional.ofNullable(this.scheduledPreloadExecutionId);
    }

    /**
     * The ID of the prefetch task.
     * 
     */
    @Import(name="scheduledPreloadJobId")
    private @Nullable Output<String> scheduledPreloadJobId;

    /**
     * @return The ID of the prefetch task.
     * 
     */
    public Optional<Output<String>> scheduledPreloadJobId() {
        return Optional.ofNullable(this.scheduledPreloadJobId);
    }

    /**
     * The number of URLs prefetched in each batch.
     * 
     */
    @Import(name="sliceLen")
    private @Nullable Output<Integer> sliceLen;

    /**
     * @return The number of URLs prefetched in each batch.
     * 
     */
    public Optional<Output<Integer>> sliceLen() {
        return Optional.ofNullable(this.sliceLen);
    }

    /**
     * The start time of the prefetch plan.
     * 
     */
    @Import(name="startTime")
    private @Nullable Output<String> startTime;

    /**
     * @return The start time of the prefetch plan.
     * 
     */
    public Optional<Output<String>> startTime() {
        return Optional.ofNullable(this.startTime);
    }

    /**
     * The status of the prefetch plan, including the following statuses.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return The status of the prefetch plan, including the following statuses.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    private ScheduledPreloadExecutionState() {}

    private ScheduledPreloadExecutionState(ScheduledPreloadExecutionState $) {
        this.endTime = $.endTime;
        this.interval = $.interval;
        this.scheduledPreloadExecutionId = $.scheduledPreloadExecutionId;
        this.scheduledPreloadJobId = $.scheduledPreloadJobId;
        this.sliceLen = $.sliceLen;
        this.startTime = $.startTime;
        this.status = $.status;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ScheduledPreloadExecutionState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ScheduledPreloadExecutionState $;

        public Builder() {
            $ = new ScheduledPreloadExecutionState();
        }

        public Builder(ScheduledPreloadExecutionState defaults) {
            $ = new ScheduledPreloadExecutionState(Objects.requireNonNull(defaults));
        }

        /**
         * @param endTime The end time of the prefetch plan.
         * 
         * @return builder
         * 
         */
        public Builder endTime(@Nullable Output<String> endTime) {
            $.endTime = endTime;
            return this;
        }

        /**
         * @param endTime The end time of the prefetch plan.
         * 
         * @return builder
         * 
         */
        public Builder endTime(String endTime) {
            return endTime(Output.of(endTime));
        }

        /**
         * @param interval The time interval between each batch execution. Unit: seconds.
         * 
         * @return builder
         * 
         */
        public Builder interval(@Nullable Output<Integer> interval) {
            $.interval = interval;
            return this;
        }

        /**
         * @param interval The time interval between each batch execution. Unit: seconds.
         * 
         * @return builder
         * 
         */
        public Builder interval(Integer interval) {
            return interval(Output.of(interval));
        }

        /**
         * @param scheduledPreloadExecutionId The ID of the prefetch plan.
         * 
         * @return builder
         * 
         */
        public Builder scheduledPreloadExecutionId(@Nullable Output<String> scheduledPreloadExecutionId) {
            $.scheduledPreloadExecutionId = scheduledPreloadExecutionId;
            return this;
        }

        /**
         * @param scheduledPreloadExecutionId The ID of the prefetch plan.
         * 
         * @return builder
         * 
         */
        public Builder scheduledPreloadExecutionId(String scheduledPreloadExecutionId) {
            return scheduledPreloadExecutionId(Output.of(scheduledPreloadExecutionId));
        }

        /**
         * @param scheduledPreloadJobId The ID of the prefetch task.
         * 
         * @return builder
         * 
         */
        public Builder scheduledPreloadJobId(@Nullable Output<String> scheduledPreloadJobId) {
            $.scheduledPreloadJobId = scheduledPreloadJobId;
            return this;
        }

        /**
         * @param scheduledPreloadJobId The ID of the prefetch task.
         * 
         * @return builder
         * 
         */
        public Builder scheduledPreloadJobId(String scheduledPreloadJobId) {
            return scheduledPreloadJobId(Output.of(scheduledPreloadJobId));
        }

        /**
         * @param sliceLen The number of URLs prefetched in each batch.
         * 
         * @return builder
         * 
         */
        public Builder sliceLen(@Nullable Output<Integer> sliceLen) {
            $.sliceLen = sliceLen;
            return this;
        }

        /**
         * @param sliceLen The number of URLs prefetched in each batch.
         * 
         * @return builder
         * 
         */
        public Builder sliceLen(Integer sliceLen) {
            return sliceLen(Output.of(sliceLen));
        }

        /**
         * @param startTime The start time of the prefetch plan.
         * 
         * @return builder
         * 
         */
        public Builder startTime(@Nullable Output<String> startTime) {
            $.startTime = startTime;
            return this;
        }

        /**
         * @param startTime The start time of the prefetch plan.
         * 
         * @return builder
         * 
         */
        public Builder startTime(String startTime) {
            return startTime(Output.of(startTime));
        }

        /**
         * @param status The status of the prefetch plan, including the following statuses.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status The status of the prefetch plan, including the following statuses.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        public ScheduledPreloadExecutionState build() {
            return $;
        }
    }

}
