// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.message.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ServiceEndpointAclState extends com.pulumi.resources.ResourceArgs {

    public static final ServiceEndpointAclState Empty = new ServiceEndpointAclState();

    /**
     * The ACL policy. Valid value:
     * - allow: indicates that the current endpoint allows access from the corresponding CIDR block. (Only allow is supported)
     * 
     */
    @Import(name="aclStrategy")
    private @Nullable Output<String> aclStrategy;

    /**
     * @return The ACL policy. Valid value:
     * - allow: indicates that the current endpoint allows access from the corresponding CIDR block. (Only allow is supported)
     * 
     */
    public Optional<Output<String>> aclStrategy() {
        return Optional.ofNullable(this.aclStrategy);
    }

    @Import(name="cidr")
    private @Nullable Output<String> cidr;

    public Optional<Output<String>> cidr() {
        return Optional.ofNullable(this.cidr);
    }

    /**
     * Access point type. Value:
     * - public: indicates a public access point. (Currently only public is supported)
     * 
     */
    @Import(name="endpointType")
    private @Nullable Output<String> endpointType;

    /**
     * @return Access point type. Value:
     * - public: indicates a public access point. (Currently only public is supported)
     * 
     */
    public Optional<Output<String>> endpointType() {
        return Optional.ofNullable(this.endpointType);
    }

    private ServiceEndpointAclState() {}

    private ServiceEndpointAclState(ServiceEndpointAclState $) {
        this.aclStrategy = $.aclStrategy;
        this.cidr = $.cidr;
        this.endpointType = $.endpointType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServiceEndpointAclState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServiceEndpointAclState $;

        public Builder() {
            $ = new ServiceEndpointAclState();
        }

        public Builder(ServiceEndpointAclState defaults) {
            $ = new ServiceEndpointAclState(Objects.requireNonNull(defaults));
        }

        /**
         * @param aclStrategy The ACL policy. Valid value:
         * - allow: indicates that the current endpoint allows access from the corresponding CIDR block. (Only allow is supported)
         * 
         * @return builder
         * 
         */
        public Builder aclStrategy(@Nullable Output<String> aclStrategy) {
            $.aclStrategy = aclStrategy;
            return this;
        }

        /**
         * @param aclStrategy The ACL policy. Valid value:
         * - allow: indicates that the current endpoint allows access from the corresponding CIDR block. (Only allow is supported)
         * 
         * @return builder
         * 
         */
        public Builder aclStrategy(String aclStrategy) {
            return aclStrategy(Output.of(aclStrategy));
        }

        public Builder cidr(@Nullable Output<String> cidr) {
            $.cidr = cidr;
            return this;
        }

        public Builder cidr(String cidr) {
            return cidr(Output.of(cidr));
        }

        /**
         * @param endpointType Access point type. Value:
         * - public: indicates a public access point. (Currently only public is supported)
         * 
         * @return builder
         * 
         */
        public Builder endpointType(@Nullable Output<String> endpointType) {
            $.endpointType = endpointType;
            return this;
        }

        /**
         * @param endpointType Access point type. Value:
         * - public: indicates a public access point. (Currently only public is supported)
         * 
         * @return builder
         * 
         */
        public Builder endpointType(String endpointType) {
            return endpointType(Output.of(endpointType));
        }

        public ServiceEndpointAclState build() {
            return $;
        }
    }

}
