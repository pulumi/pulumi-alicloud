// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.dcdn;

import com.pulumi.alicloud.dcdn.inputs.DomainConfigFunctionArgArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DomainConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final DomainConfigArgs Empty = new DomainConfigArgs();

    /**
     * Name of the accelerated domain. This name without suffix can have a string of 1 to 63 characters, must contain only alphanumeric characters or &#34;-&#34;, and must not begin or end with &#34;-&#34;, and &#34;-&#34; must not in the 3th and 4th character positions at the same time. Suffix `.sh` and `.tel` are not supported.
     * 
     */
    @Import(name="domainName", required=true)
    private Output<String> domainName;

    /**
     * @return Name of the accelerated domain. This name without suffix can have a string of 1 to 63 characters, must contain only alphanumeric characters or &#34;-&#34;, and must not begin or end with &#34;-&#34;, and &#34;-&#34; must not in the 3th and 4th character positions at the same time. Suffix `.sh` and `.tel` are not supported.
     * 
     */
    public Output<String> domainName() {
        return this.domainName;
    }

    /**
     * The args of the domain config. See `function_args` below.
     * 
     */
    @Import(name="functionArgs", required=true)
    private Output<List<DomainConfigFunctionArgArgs>> functionArgs;

    /**
     * @return The args of the domain config. See `function_args` below.
     * 
     */
    public Output<List<DomainConfigFunctionArgArgs>> functionArgs() {
        return this.functionArgs;
    }

    /**
     * The name of the domain config.
     * 
     */
    @Import(name="functionName", required=true)
    private Output<String> functionName;

    /**
     * @return The name of the domain config.
     * 
     */
    public Output<String> functionName() {
        return this.functionName;
    }

    /**
     * By configuring the function condition (rule engine) in the domain name configuration function parameters, Rule conditions can be created (Rule conditions can match and filter user requests by identifying various parameters carried in user requests). After each rule condition is created, a corresponding ConfigId will be generated, and the ConfigId can be referenced by other functions as a ParentId parameter, in this way, the rule conditions can be combined with the functional configuration to form a more flexible configuration.
     * 
     */
    @Import(name="parentId")
    private @Nullable Output<String> parentId;

    /**
     * @return By configuring the function condition (rule engine) in the domain name configuration function parameters, Rule conditions can be created (Rule conditions can match and filter user requests by identifying various parameters carried in user requests). After each rule condition is created, a corresponding ConfigId will be generated, and the ConfigId can be referenced by other functions as a ParentId parameter, in this way, the rule conditions can be combined with the functional configuration to form a more flexible configuration.
     * 
     */
    public Optional<Output<String>> parentId() {
        return Optional.ofNullable(this.parentId);
    }

    private DomainConfigArgs() {}

    private DomainConfigArgs(DomainConfigArgs $) {
        this.domainName = $.domainName;
        this.functionArgs = $.functionArgs;
        this.functionName = $.functionName;
        this.parentId = $.parentId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DomainConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DomainConfigArgs $;

        public Builder() {
            $ = new DomainConfigArgs();
        }

        public Builder(DomainConfigArgs defaults) {
            $ = new DomainConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param domainName Name of the accelerated domain. This name without suffix can have a string of 1 to 63 characters, must contain only alphanumeric characters or &#34;-&#34;, and must not begin or end with &#34;-&#34;, and &#34;-&#34; must not in the 3th and 4th character positions at the same time. Suffix `.sh` and `.tel` are not supported.
         * 
         * @return builder
         * 
         */
        public Builder domainName(Output<String> domainName) {
            $.domainName = domainName;
            return this;
        }

        /**
         * @param domainName Name of the accelerated domain. This name without suffix can have a string of 1 to 63 characters, must contain only alphanumeric characters or &#34;-&#34;, and must not begin or end with &#34;-&#34;, and &#34;-&#34; must not in the 3th and 4th character positions at the same time. Suffix `.sh` and `.tel` are not supported.
         * 
         * @return builder
         * 
         */
        public Builder domainName(String domainName) {
            return domainName(Output.of(domainName));
        }

        /**
         * @param functionArgs The args of the domain config. See `function_args` below.
         * 
         * @return builder
         * 
         */
        public Builder functionArgs(Output<List<DomainConfigFunctionArgArgs>> functionArgs) {
            $.functionArgs = functionArgs;
            return this;
        }

        /**
         * @param functionArgs The args of the domain config. See `function_args` below.
         * 
         * @return builder
         * 
         */
        public Builder functionArgs(List<DomainConfigFunctionArgArgs> functionArgs) {
            return functionArgs(Output.of(functionArgs));
        }

        /**
         * @param functionArgs The args of the domain config. See `function_args` below.
         * 
         * @return builder
         * 
         */
        public Builder functionArgs(DomainConfigFunctionArgArgs... functionArgs) {
            return functionArgs(List.of(functionArgs));
        }

        /**
         * @param functionName The name of the domain config.
         * 
         * @return builder
         * 
         */
        public Builder functionName(Output<String> functionName) {
            $.functionName = functionName;
            return this;
        }

        /**
         * @param functionName The name of the domain config.
         * 
         * @return builder
         * 
         */
        public Builder functionName(String functionName) {
            return functionName(Output.of(functionName));
        }

        /**
         * @param parentId By configuring the function condition (rule engine) in the domain name configuration function parameters, Rule conditions can be created (Rule conditions can match and filter user requests by identifying various parameters carried in user requests). After each rule condition is created, a corresponding ConfigId will be generated, and the ConfigId can be referenced by other functions as a ParentId parameter, in this way, the rule conditions can be combined with the functional configuration to form a more flexible configuration.
         * 
         * @return builder
         * 
         */
        public Builder parentId(@Nullable Output<String> parentId) {
            $.parentId = parentId;
            return this;
        }

        /**
         * @param parentId By configuring the function condition (rule engine) in the domain name configuration function parameters, Rule conditions can be created (Rule conditions can match and filter user requests by identifying various parameters carried in user requests). After each rule condition is created, a corresponding ConfigId will be generated, and the ConfigId can be referenced by other functions as a ParentId parameter, in this way, the rule conditions can be combined with the functional configuration to form a more flexible configuration.
         * 
         * @return builder
         * 
         */
        public Builder parentId(String parentId) {
            return parentId(Output.of(parentId));
        }

        public DomainConfigArgs build() {
            if ($.domainName == null) {
                throw new MissingRequiredPropertyException("DomainConfigArgs", "domainName");
            }
            if ($.functionArgs == null) {
                throw new MissingRequiredPropertyException("DomainConfigArgs", "functionArgs");
            }
            if ($.functionName == null) {
                throw new MissingRequiredPropertyException("DomainConfigArgs", "functionName");
            }
            return $;
        }
    }

}
