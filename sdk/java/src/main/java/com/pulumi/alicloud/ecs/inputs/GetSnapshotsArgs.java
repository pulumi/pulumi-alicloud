// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.ecs.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetSnapshotsArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetSnapshotsArgs Empty = new GetSnapshotsArgs();

    @Import(name="category")
    private @Nullable Output<String> category;

    public Optional<Output<String>> category() {
        return Optional.ofNullable(this.category);
    }

    @Import(name="dryRun")
    private @Nullable Output<Boolean> dryRun;

    public Optional<Output<Boolean>> dryRun() {
        return Optional.ofNullable(this.dryRun);
    }

    /**
     * Whether the snapshot is encrypted or not.
     * 
     */
    @Import(name="encrypted")
    private @Nullable Output<Boolean> encrypted;

    /**
     * @return Whether the snapshot is encrypted or not.
     * 
     */
    public Optional<Output<Boolean>> encrypted() {
        return Optional.ofNullable(this.encrypted);
    }

    /**
     * A list of snapshot IDs.
     * 
     */
    @Import(name="ids")
    private @Nullable Output<List<String>> ids;

    /**
     * @return A list of snapshot IDs.
     * 
     */
    public Optional<Output<List<String>>> ids() {
        return Optional.ofNullable(this.ids);
    }

    @Import(name="kmsKeyId")
    private @Nullable Output<String> kmsKeyId;

    public Optional<Output<String>> kmsKeyId() {
        return Optional.ofNullable(this.kmsKeyId);
    }

    @Import(name="nameRegex")
    private @Nullable Output<String> nameRegex;

    public Optional<Output<String>> nameRegex() {
        return Optional.ofNullable(this.nameRegex);
    }

    @Import(name="outputFile")
    private @Nullable Output<String> outputFile;

    public Optional<Output<String>> outputFile() {
        return Optional.ofNullable(this.outputFile);
    }

    @Import(name="resourceGroupId")
    private @Nullable Output<String> resourceGroupId;

    public Optional<Output<String>> resourceGroupId() {
        return Optional.ofNullable(this.resourceGroupId);
    }

    @Import(name="snapshotLinkId")
    private @Nullable Output<String> snapshotLinkId;

    public Optional<Output<String>> snapshotLinkId() {
        return Optional.ofNullable(this.snapshotLinkId);
    }

    @Import(name="snapshotName")
    private @Nullable Output<String> snapshotName;

    public Optional<Output<String>> snapshotName() {
        return Optional.ofNullable(this.snapshotName);
    }

    @Import(name="snapshotType")
    private @Nullable Output<String> snapshotType;

    public Optional<Output<String>> snapshotType() {
        return Optional.ofNullable(this.snapshotType);
    }

    /**
     * Source disk attribute. Value range: `System`,`Data`.
     * 
     */
    @Import(name="sourceDiskType")
    private @Nullable Output<String> sourceDiskType;

    /**
     * @return Source disk attribute. Value range: `System`,`Data`.
     * 
     */
    public Optional<Output<String>> sourceDiskType() {
        return Optional.ofNullable(this.sourceDiskType);
    }

    /**
     * The snapshot status. Value range: `progressing`, `accomplished` and `failed`.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return The snapshot status. Value range: `progressing`, `accomplished` and `failed`.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * A map of tags assigned to the snapshot.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return A map of tags assigned to the snapshot.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    @Import(name="type")
    private @Nullable Output<String> type;

    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    /**
     * Whether the snapshots are used to create resources or not. Value range: `image`, `disk`, `image_disk` and `none`.
     * 
     */
    @Import(name="usage")
    private @Nullable Output<String> usage;

    /**
     * @return Whether the snapshots are used to create resources or not. Value range: `image`, `disk`, `image_disk` and `none`.
     * 
     */
    public Optional<Output<String>> usage() {
        return Optional.ofNullable(this.usage);
    }

    private GetSnapshotsArgs() {}

    private GetSnapshotsArgs(GetSnapshotsArgs $) {
        this.category = $.category;
        this.dryRun = $.dryRun;
        this.encrypted = $.encrypted;
        this.ids = $.ids;
        this.kmsKeyId = $.kmsKeyId;
        this.nameRegex = $.nameRegex;
        this.outputFile = $.outputFile;
        this.resourceGroupId = $.resourceGroupId;
        this.snapshotLinkId = $.snapshotLinkId;
        this.snapshotName = $.snapshotName;
        this.snapshotType = $.snapshotType;
        this.sourceDiskType = $.sourceDiskType;
        this.status = $.status;
        this.tags = $.tags;
        this.type = $.type;
        this.usage = $.usage;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetSnapshotsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetSnapshotsArgs $;

        public Builder() {
            $ = new GetSnapshotsArgs();
        }

        public Builder(GetSnapshotsArgs defaults) {
            $ = new GetSnapshotsArgs(Objects.requireNonNull(defaults));
        }

        public Builder category(@Nullable Output<String> category) {
            $.category = category;
            return this;
        }

        public Builder category(String category) {
            return category(Output.of(category));
        }

        public Builder dryRun(@Nullable Output<Boolean> dryRun) {
            $.dryRun = dryRun;
            return this;
        }

        public Builder dryRun(Boolean dryRun) {
            return dryRun(Output.of(dryRun));
        }

        /**
         * @param encrypted Whether the snapshot is encrypted or not.
         * 
         * @return builder
         * 
         */
        public Builder encrypted(@Nullable Output<Boolean> encrypted) {
            $.encrypted = encrypted;
            return this;
        }

        /**
         * @param encrypted Whether the snapshot is encrypted or not.
         * 
         * @return builder
         * 
         */
        public Builder encrypted(Boolean encrypted) {
            return encrypted(Output.of(encrypted));
        }

        /**
         * @param ids A list of snapshot IDs.
         * 
         * @return builder
         * 
         */
        public Builder ids(@Nullable Output<List<String>> ids) {
            $.ids = ids;
            return this;
        }

        /**
         * @param ids A list of snapshot IDs.
         * 
         * @return builder
         * 
         */
        public Builder ids(List<String> ids) {
            return ids(Output.of(ids));
        }

        /**
         * @param ids A list of snapshot IDs.
         * 
         * @return builder
         * 
         */
        public Builder ids(String... ids) {
            return ids(List.of(ids));
        }

        public Builder kmsKeyId(@Nullable Output<String> kmsKeyId) {
            $.kmsKeyId = kmsKeyId;
            return this;
        }

        public Builder kmsKeyId(String kmsKeyId) {
            return kmsKeyId(Output.of(kmsKeyId));
        }

        public Builder nameRegex(@Nullable Output<String> nameRegex) {
            $.nameRegex = nameRegex;
            return this;
        }

        public Builder nameRegex(String nameRegex) {
            return nameRegex(Output.of(nameRegex));
        }

        public Builder outputFile(@Nullable Output<String> outputFile) {
            $.outputFile = outputFile;
            return this;
        }

        public Builder outputFile(String outputFile) {
            return outputFile(Output.of(outputFile));
        }

        public Builder resourceGroupId(@Nullable Output<String> resourceGroupId) {
            $.resourceGroupId = resourceGroupId;
            return this;
        }

        public Builder resourceGroupId(String resourceGroupId) {
            return resourceGroupId(Output.of(resourceGroupId));
        }

        public Builder snapshotLinkId(@Nullable Output<String> snapshotLinkId) {
            $.snapshotLinkId = snapshotLinkId;
            return this;
        }

        public Builder snapshotLinkId(String snapshotLinkId) {
            return snapshotLinkId(Output.of(snapshotLinkId));
        }

        public Builder snapshotName(@Nullable Output<String> snapshotName) {
            $.snapshotName = snapshotName;
            return this;
        }

        public Builder snapshotName(String snapshotName) {
            return snapshotName(Output.of(snapshotName));
        }

        public Builder snapshotType(@Nullable Output<String> snapshotType) {
            $.snapshotType = snapshotType;
            return this;
        }

        public Builder snapshotType(String snapshotType) {
            return snapshotType(Output.of(snapshotType));
        }

        /**
         * @param sourceDiskType Source disk attribute. Value range: `System`,`Data`.
         * 
         * @return builder
         * 
         */
        public Builder sourceDiskType(@Nullable Output<String> sourceDiskType) {
            $.sourceDiskType = sourceDiskType;
            return this;
        }

        /**
         * @param sourceDiskType Source disk attribute. Value range: `System`,`Data`.
         * 
         * @return builder
         * 
         */
        public Builder sourceDiskType(String sourceDiskType) {
            return sourceDiskType(Output.of(sourceDiskType));
        }

        /**
         * @param status The snapshot status. Value range: `progressing`, `accomplished` and `failed`.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status The snapshot status. Value range: `progressing`, `accomplished` and `failed`.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param tags A map of tags assigned to the snapshot.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags A map of tags assigned to the snapshot.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param usage Whether the snapshots are used to create resources or not. Value range: `image`, `disk`, `image_disk` and `none`.
         * 
         * @return builder
         * 
         */
        public Builder usage(@Nullable Output<String> usage) {
            $.usage = usage;
            return this;
        }

        /**
         * @param usage Whether the snapshots are used to create resources or not. Value range: `image`, `disk`, `image_disk` and `none`.
         * 
         * @return builder
         * 
         */
        public Builder usage(String usage) {
            return usage(Output.of(usage));
        }

        public GetSnapshotsArgs build() {
            return $;
        }
    }

}
