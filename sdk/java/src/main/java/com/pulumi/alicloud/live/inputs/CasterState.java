// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.live.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CasterState extends com.pulumi.resources.ResourceArgs {

    public static final CasterState Empty = new CasterState();

    /**
     * Automatic standby broadcast configuration. eofThres: indicates that the broadcast is automatically cut and prepared after the flow interruption time, in seconds.
     * 
     */
    @Import(name="autoSwitchUrgentConfig")
    private @Nullable Output<String> autoSwitchUrgentConfig;

    /**
     * @return Automatic standby broadcast configuration. eofThres: indicates that the broadcast is automatically cut and prepared after the flow interruption time, in seconds.
     * 
     */
    public Optional<Output<String>> autoSwitchUrgentConfig() {
        return Optional.ofNullable(this.autoSwitchUrgentConfig);
    }

    /**
     * Turn on the cut-off automatic switch for broadcast preparation.
     * 
     * true: open.
     * 
     * false: closed.
     * 
     */
    @Import(name="autoSwitchUrgentOn")
    private @Nullable Output<Boolean> autoSwitchUrgentOn;

    /**
     * @return Turn on the cut-off automatic switch for broadcast preparation.
     * 
     * true: open.
     * 
     * false: closed.
     * 
     */
    public Optional<Output<Boolean>> autoSwitchUrgentOn() {
        return Optional.ofNullable(this.autoSwitchUrgentOn);
    }

    /**
     * The callback address of the user. To receive Callback Notifications, enter an available address and accept the HTTP protocol. If this parameter is set to null, the callback notification from the director Station is canceled by default.
     * 
     */
    @Import(name="callbackUrl")
    private @Nullable Output<String> callbackUrl;

    /**
     * @return The callback address of the user. To receive Callback Notifications, enter an available address and accept the HTTP protocol. If this parameter is set to null, the callback notification from the director Station is canceled by default.
     * 
     */
    public Optional<Output<String>> callbackUrl() {
        return Optional.ofNullable(this.callbackUrl);
    }

    /**
     * Guide station name.
     * 
     */
    @Import(name="casterName")
    private @Nullable Output<String> casterName;

    /**
     * @return Guide station name.
     * 
     */
    public Optional<Output<String>> casterName() {
        return Optional.ofNullable(this.casterName);
    }

    /**
     * Creation time.
     * 
     */
    @Import(name="createTime")
    private @Nullable Output<String> createTime;

    /**
     * @return Creation time.
     * 
     */
    public Optional<Output<String>> createTime() {
        return Optional.ofNullable(this.createTime);
    }

    /**
     * Delayed playback. Time unit: seconds.
     * 
     */
    @Import(name="delay")
    private @Nullable Output<Double> delay;

    /**
     * @return Delayed playback. Time unit: seconds.
     * 
     */
    public Optional<Output<Double>> delay() {
        return Optional.ofNullable(this.delay);
    }

    /**
     * Master play domain name.
     * 
     */
    @Import(name="domainName")
    private @Nullable Output<String> domainName;

    /**
     * @return Master play domain name.
     * 
     */
    public Optional<Output<String>> domainName() {
        return Optional.ofNullable(this.domainName);
    }

    /**
     * Guide station specification type. Value:
     * - 0: Broadcast single type.
     * - 1: General purpose.
     * 
     */
    @Import(name="normType")
    private @Nullable Output<Integer> normType;

    /**
     * @return Guide station specification type. Value:
     * - 0: Broadcast single type.
     * - 1: General purpose.
     * 
     */
    public Optional<Output<Integer>> normType() {
        return Optional.ofNullable(this.normType);
    }

    /**
     * The paymen type of the resource
     * 
     */
    @Import(name="paymentType")
    private @Nullable Output<String> paymentType;

    /**
     * @return The paymen type of the resource
     * 
     */
    public Optional<Output<String>> paymentType() {
        return Optional.ofNullable(this.paymentType);
    }

    /**
     * Carousel effective flag.
     * 
     * 0: Not in effect.
     * 
     * 1: Entry into force.
     * 
     */
    @Import(name="programEffect")
    private @Nullable Output<Integer> programEffect;

    /**
     * @return Carousel effective flag.
     * 
     * 0: Not in effect.
     * 
     * 1: Entry into force.
     * 
     */
    public Optional<Output<Integer>> programEffect() {
        return Optional.ofNullable(this.programEffect);
    }

    /**
     * The carousel station name, which can be configured when using the carousel function.
     * 
     */
    @Import(name="programName")
    private @Nullable Output<String> programName;

    /**
     * @return The carousel station name, which can be configured when using the carousel function.
     * 
     */
    public Optional<Output<String>> programName() {
        return Optional.ofNullable(this.programName);
    }

    /**
     * Record configuration information. The format is JSON. The configuration element information is as follows:
     * 
     */
    @Import(name="recordConfig")
    private @Nullable Output<String> recordConfig;

    /**
     * @return Record configuration information. The format is JSON. The configuration element information is as follows:
     * 
     */
    public Optional<Output<String>> recordConfig() {
        return Optional.ofNullable(this.recordConfig);
    }

    /**
     * Resource Group id
     * 
     */
    @Import(name="resourceGroupId")
    private @Nullable Output<String> resourceGroupId;

    /**
     * @return Resource Group id
     * 
     */
    public Optional<Output<String>> resourceGroupId() {
        return Optional.ofNullable(this.resourceGroupId);
    }

    /**
     * resource type
     * 
     */
    @Import(name="resourceType")
    private @Nullable Output<String> resourceType;

    /**
     * @return resource type
     * 
     */
    public Optional<Output<String>> resourceType() {
        return Optional.ofNullable(this.resourceType);
    }

    /**
     * The user-defined stream ingest address corresponding to the bypass output address of the guide station. If this parameter is left blank, the streaming address corresponding to the output address automatically generated by Alibaba Cloud is used by default.
     * 
     */
    @Import(name="sideOutputUrl")
    private @Nullable Output<String> sideOutputUrl;

    /**
     * @return The user-defined stream ingest address corresponding to the bypass output address of the guide station. If this parameter is left blank, the streaming address corresponding to the output address automatically generated by Alibaba Cloud is used by default.
     * 
     */
    public Optional<Output<String>> sideOutputUrl() {
        return Optional.ofNullable(this.sideOutputUrl);
    }

    /**
     * The list of multiple forwarding stream addresses, which can be the CDN forwarding stream addresses of Alibaba Cloud or a third-party vendor. A guide can add up to 20 RTMP forwarding addresses.
     * 
     */
    @Import(name="sideOutputUrlList")
    private @Nullable Output<String> sideOutputUrlList;

    /**
     * @return The list of multiple forwarding stream addresses, which can be the CDN forwarding stream addresses of Alibaba Cloud or a third-party vendor. A guide can add up to 20 RTMP forwarding addresses.
     * 
     */
    public Optional<Output<String>> sideOutputUrlList() {
        return Optional.ofNullable(this.sideOutputUrlList);
    }

    /**
     * Multi-View synchronization configuration to synchronize multiple video sources. Multi-View synchronization is divided into two modes:
     * - `mode 0`: (In the anchor mode, multiple video sources are synchronized according to the specified mode.)
     * - `mode 1`: (Conference mode, there is no concept of anchor video, all video sources are synchronized with each other.)
     * - `Anchor mode`: hostResourceId: the video source of the anchor in Anchor mode.
     * - `Conference mode`: no hostRsoureId field, only the resource ids in the resourceIds to be provided.
     * 
     */
    @Import(name="syncGroupsConfig")
    private @Nullable Output<String> syncGroupsConfig;

    /**
     * @return Multi-View synchronization configuration to synchronize multiple video sources. Multi-View synchronization is divided into two modes:
     * - `mode 0`: (In the anchor mode, multiple video sources are synchronized according to the specified mode.)
     * - `mode 1`: (Conference mode, there is no concept of anchor video, all video sources are synchronized with each other.)
     * - `Anchor mode`: hostResourceId: the video source of the anchor in Anchor mode.
     * - `Conference mode`: no hostRsoureId field, only the resource ids in the resourceIds to be provided.
     * 
     */
    public Optional<Output<String>> syncGroupsConfig() {
        return Optional.ofNullable(this.syncGroupsConfig);
    }

    /**
     * The tag of the resource
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return The tag of the resource
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * Transcoding configuration.
     * 
     * JSON format string, Please capitalize the first letter of the internal field of the structure, hump format input. If this parameter is set to null, the transcoding configuration is cleared by default. If the transcoding template is null, an error is reported when the director starts.
     * 
     */
    @Import(name="transcodeConfig")
    private @Nullable Output<String> transcodeConfig;

    /**
     * @return Transcoding configuration.
     * 
     * JSON format string, Please capitalize the first letter of the internal field of the structure, hump format input. If this parameter is set to null, the transcoding configuration is cleared by default. If the transcoding template is null, an error is reported when the director starts.
     * 
     */
    public Optional<Output<String>> transcodeConfig() {
        return Optional.ofNullable(this.transcodeConfig);
    }

    /**
     * The ID of the picture material of the media library.
     * 
     */
    @Import(name="urgentImageId")
    private @Nullable Output<String> urgentImageId;

    /**
     * @return The ID of the picture material of the media library.
     * 
     */
    public Optional<Output<String>> urgentImageId() {
        return Optional.ofNullable(this.urgentImageId);
    }

    /**
     * Prepare the URL of the picture material.
     * 
     */
    @Import(name="urgentImageUrl")
    private @Nullable Output<String> urgentImageUrl;

    /**
     * @return Prepare the URL of the picture material.
     * 
     */
    public Optional<Output<String>> urgentImageUrl() {
        return Optional.ofNullable(this.urgentImageUrl);
    }

    /**
     * The prepared live stream URL.
     * 
     */
    @Import(name="urgentLiveStreamUrl")
    private @Nullable Output<String> urgentLiveStreamUrl;

    /**
     * @return The prepared live stream URL.
     * 
     */
    public Optional<Output<String>> urgentLiveStreamUrl() {
        return Optional.ofNullable(this.urgentLiveStreamUrl);
    }

    /**
     * Prepared video, media library material ID. If this parameter is set to null, the standby configuration is cleared by default.
     * 
     */
    @Import(name="urgentMaterialId")
    private @Nullable Output<String> urgentMaterialId;

    /**
     * @return Prepared video, media library material ID. If this parameter is set to null, the standby configuration is cleared by default.
     * 
     */
    public Optional<Output<String>> urgentMaterialId() {
        return Optional.ofNullable(this.urgentMaterialId);
    }

    private CasterState() {}

    private CasterState(CasterState $) {
        this.autoSwitchUrgentConfig = $.autoSwitchUrgentConfig;
        this.autoSwitchUrgentOn = $.autoSwitchUrgentOn;
        this.callbackUrl = $.callbackUrl;
        this.casterName = $.casterName;
        this.createTime = $.createTime;
        this.delay = $.delay;
        this.domainName = $.domainName;
        this.normType = $.normType;
        this.paymentType = $.paymentType;
        this.programEffect = $.programEffect;
        this.programName = $.programName;
        this.recordConfig = $.recordConfig;
        this.resourceGroupId = $.resourceGroupId;
        this.resourceType = $.resourceType;
        this.sideOutputUrl = $.sideOutputUrl;
        this.sideOutputUrlList = $.sideOutputUrlList;
        this.syncGroupsConfig = $.syncGroupsConfig;
        this.tags = $.tags;
        this.transcodeConfig = $.transcodeConfig;
        this.urgentImageId = $.urgentImageId;
        this.urgentImageUrl = $.urgentImageUrl;
        this.urgentLiveStreamUrl = $.urgentLiveStreamUrl;
        this.urgentMaterialId = $.urgentMaterialId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CasterState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CasterState $;

        public Builder() {
            $ = new CasterState();
        }

        public Builder(CasterState defaults) {
            $ = new CasterState(Objects.requireNonNull(defaults));
        }

        /**
         * @param autoSwitchUrgentConfig Automatic standby broadcast configuration. eofThres: indicates that the broadcast is automatically cut and prepared after the flow interruption time, in seconds.
         * 
         * @return builder
         * 
         */
        public Builder autoSwitchUrgentConfig(@Nullable Output<String> autoSwitchUrgentConfig) {
            $.autoSwitchUrgentConfig = autoSwitchUrgentConfig;
            return this;
        }

        /**
         * @param autoSwitchUrgentConfig Automatic standby broadcast configuration. eofThres: indicates that the broadcast is automatically cut and prepared after the flow interruption time, in seconds.
         * 
         * @return builder
         * 
         */
        public Builder autoSwitchUrgentConfig(String autoSwitchUrgentConfig) {
            return autoSwitchUrgentConfig(Output.of(autoSwitchUrgentConfig));
        }

        /**
         * @param autoSwitchUrgentOn Turn on the cut-off automatic switch for broadcast preparation.
         * 
         * true: open.
         * 
         * false: closed.
         * 
         * @return builder
         * 
         */
        public Builder autoSwitchUrgentOn(@Nullable Output<Boolean> autoSwitchUrgentOn) {
            $.autoSwitchUrgentOn = autoSwitchUrgentOn;
            return this;
        }

        /**
         * @param autoSwitchUrgentOn Turn on the cut-off automatic switch for broadcast preparation.
         * 
         * true: open.
         * 
         * false: closed.
         * 
         * @return builder
         * 
         */
        public Builder autoSwitchUrgentOn(Boolean autoSwitchUrgentOn) {
            return autoSwitchUrgentOn(Output.of(autoSwitchUrgentOn));
        }

        /**
         * @param callbackUrl The callback address of the user. To receive Callback Notifications, enter an available address and accept the HTTP protocol. If this parameter is set to null, the callback notification from the director Station is canceled by default.
         * 
         * @return builder
         * 
         */
        public Builder callbackUrl(@Nullable Output<String> callbackUrl) {
            $.callbackUrl = callbackUrl;
            return this;
        }

        /**
         * @param callbackUrl The callback address of the user. To receive Callback Notifications, enter an available address and accept the HTTP protocol. If this parameter is set to null, the callback notification from the director Station is canceled by default.
         * 
         * @return builder
         * 
         */
        public Builder callbackUrl(String callbackUrl) {
            return callbackUrl(Output.of(callbackUrl));
        }

        /**
         * @param casterName Guide station name.
         * 
         * @return builder
         * 
         */
        public Builder casterName(@Nullable Output<String> casterName) {
            $.casterName = casterName;
            return this;
        }

        /**
         * @param casterName Guide station name.
         * 
         * @return builder
         * 
         */
        public Builder casterName(String casterName) {
            return casterName(Output.of(casterName));
        }

        /**
         * @param createTime Creation time.
         * 
         * @return builder
         * 
         */
        public Builder createTime(@Nullable Output<String> createTime) {
            $.createTime = createTime;
            return this;
        }

        /**
         * @param createTime Creation time.
         * 
         * @return builder
         * 
         */
        public Builder createTime(String createTime) {
            return createTime(Output.of(createTime));
        }

        /**
         * @param delay Delayed playback. Time unit: seconds.
         * 
         * @return builder
         * 
         */
        public Builder delay(@Nullable Output<Double> delay) {
            $.delay = delay;
            return this;
        }

        /**
         * @param delay Delayed playback. Time unit: seconds.
         * 
         * @return builder
         * 
         */
        public Builder delay(Double delay) {
            return delay(Output.of(delay));
        }

        /**
         * @param domainName Master play domain name.
         * 
         * @return builder
         * 
         */
        public Builder domainName(@Nullable Output<String> domainName) {
            $.domainName = domainName;
            return this;
        }

        /**
         * @param domainName Master play domain name.
         * 
         * @return builder
         * 
         */
        public Builder domainName(String domainName) {
            return domainName(Output.of(domainName));
        }

        /**
         * @param normType Guide station specification type. Value:
         * - 0: Broadcast single type.
         * - 1: General purpose.
         * 
         * @return builder
         * 
         */
        public Builder normType(@Nullable Output<Integer> normType) {
            $.normType = normType;
            return this;
        }

        /**
         * @param normType Guide station specification type. Value:
         * - 0: Broadcast single type.
         * - 1: General purpose.
         * 
         * @return builder
         * 
         */
        public Builder normType(Integer normType) {
            return normType(Output.of(normType));
        }

        /**
         * @param paymentType The paymen type of the resource
         * 
         * @return builder
         * 
         */
        public Builder paymentType(@Nullable Output<String> paymentType) {
            $.paymentType = paymentType;
            return this;
        }

        /**
         * @param paymentType The paymen type of the resource
         * 
         * @return builder
         * 
         */
        public Builder paymentType(String paymentType) {
            return paymentType(Output.of(paymentType));
        }

        /**
         * @param programEffect Carousel effective flag.
         * 
         * 0: Not in effect.
         * 
         * 1: Entry into force.
         * 
         * @return builder
         * 
         */
        public Builder programEffect(@Nullable Output<Integer> programEffect) {
            $.programEffect = programEffect;
            return this;
        }

        /**
         * @param programEffect Carousel effective flag.
         * 
         * 0: Not in effect.
         * 
         * 1: Entry into force.
         * 
         * @return builder
         * 
         */
        public Builder programEffect(Integer programEffect) {
            return programEffect(Output.of(programEffect));
        }

        /**
         * @param programName The carousel station name, which can be configured when using the carousel function.
         * 
         * @return builder
         * 
         */
        public Builder programName(@Nullable Output<String> programName) {
            $.programName = programName;
            return this;
        }

        /**
         * @param programName The carousel station name, which can be configured when using the carousel function.
         * 
         * @return builder
         * 
         */
        public Builder programName(String programName) {
            return programName(Output.of(programName));
        }

        /**
         * @param recordConfig Record configuration information. The format is JSON. The configuration element information is as follows:
         * 
         * @return builder
         * 
         */
        public Builder recordConfig(@Nullable Output<String> recordConfig) {
            $.recordConfig = recordConfig;
            return this;
        }

        /**
         * @param recordConfig Record configuration information. The format is JSON. The configuration element information is as follows:
         * 
         * @return builder
         * 
         */
        public Builder recordConfig(String recordConfig) {
            return recordConfig(Output.of(recordConfig));
        }

        /**
         * @param resourceGroupId Resource Group id
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupId(@Nullable Output<String> resourceGroupId) {
            $.resourceGroupId = resourceGroupId;
            return this;
        }

        /**
         * @param resourceGroupId Resource Group id
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupId(String resourceGroupId) {
            return resourceGroupId(Output.of(resourceGroupId));
        }

        /**
         * @param resourceType resource type
         * 
         * @return builder
         * 
         */
        public Builder resourceType(@Nullable Output<String> resourceType) {
            $.resourceType = resourceType;
            return this;
        }

        /**
         * @param resourceType resource type
         * 
         * @return builder
         * 
         */
        public Builder resourceType(String resourceType) {
            return resourceType(Output.of(resourceType));
        }

        /**
         * @param sideOutputUrl The user-defined stream ingest address corresponding to the bypass output address of the guide station. If this parameter is left blank, the streaming address corresponding to the output address automatically generated by Alibaba Cloud is used by default.
         * 
         * @return builder
         * 
         */
        public Builder sideOutputUrl(@Nullable Output<String> sideOutputUrl) {
            $.sideOutputUrl = sideOutputUrl;
            return this;
        }

        /**
         * @param sideOutputUrl The user-defined stream ingest address corresponding to the bypass output address of the guide station. If this parameter is left blank, the streaming address corresponding to the output address automatically generated by Alibaba Cloud is used by default.
         * 
         * @return builder
         * 
         */
        public Builder sideOutputUrl(String sideOutputUrl) {
            return sideOutputUrl(Output.of(sideOutputUrl));
        }

        /**
         * @param sideOutputUrlList The list of multiple forwarding stream addresses, which can be the CDN forwarding stream addresses of Alibaba Cloud or a third-party vendor. A guide can add up to 20 RTMP forwarding addresses.
         * 
         * @return builder
         * 
         */
        public Builder sideOutputUrlList(@Nullable Output<String> sideOutputUrlList) {
            $.sideOutputUrlList = sideOutputUrlList;
            return this;
        }

        /**
         * @param sideOutputUrlList The list of multiple forwarding stream addresses, which can be the CDN forwarding stream addresses of Alibaba Cloud or a third-party vendor. A guide can add up to 20 RTMP forwarding addresses.
         * 
         * @return builder
         * 
         */
        public Builder sideOutputUrlList(String sideOutputUrlList) {
            return sideOutputUrlList(Output.of(sideOutputUrlList));
        }

        /**
         * @param syncGroupsConfig Multi-View synchronization configuration to synchronize multiple video sources. Multi-View synchronization is divided into two modes:
         * - `mode 0`: (In the anchor mode, multiple video sources are synchronized according to the specified mode.)
         * - `mode 1`: (Conference mode, there is no concept of anchor video, all video sources are synchronized with each other.)
         * - `Anchor mode`: hostResourceId: the video source of the anchor in Anchor mode.
         * - `Conference mode`: no hostRsoureId field, only the resource ids in the resourceIds to be provided.
         * 
         * @return builder
         * 
         */
        public Builder syncGroupsConfig(@Nullable Output<String> syncGroupsConfig) {
            $.syncGroupsConfig = syncGroupsConfig;
            return this;
        }

        /**
         * @param syncGroupsConfig Multi-View synchronization configuration to synchronize multiple video sources. Multi-View synchronization is divided into two modes:
         * - `mode 0`: (In the anchor mode, multiple video sources are synchronized according to the specified mode.)
         * - `mode 1`: (Conference mode, there is no concept of anchor video, all video sources are synchronized with each other.)
         * - `Anchor mode`: hostResourceId: the video source of the anchor in Anchor mode.
         * - `Conference mode`: no hostRsoureId field, only the resource ids in the resourceIds to be provided.
         * 
         * @return builder
         * 
         */
        public Builder syncGroupsConfig(String syncGroupsConfig) {
            return syncGroupsConfig(Output.of(syncGroupsConfig));
        }

        /**
         * @param tags The tag of the resource
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags The tag of the resource
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param transcodeConfig Transcoding configuration.
         * 
         * JSON format string, Please capitalize the first letter of the internal field of the structure, hump format input. If this parameter is set to null, the transcoding configuration is cleared by default. If the transcoding template is null, an error is reported when the director starts.
         * 
         * @return builder
         * 
         */
        public Builder transcodeConfig(@Nullable Output<String> transcodeConfig) {
            $.transcodeConfig = transcodeConfig;
            return this;
        }

        /**
         * @param transcodeConfig Transcoding configuration.
         * 
         * JSON format string, Please capitalize the first letter of the internal field of the structure, hump format input. If this parameter is set to null, the transcoding configuration is cleared by default. If the transcoding template is null, an error is reported when the director starts.
         * 
         * @return builder
         * 
         */
        public Builder transcodeConfig(String transcodeConfig) {
            return transcodeConfig(Output.of(transcodeConfig));
        }

        /**
         * @param urgentImageId The ID of the picture material of the media library.
         * 
         * @return builder
         * 
         */
        public Builder urgentImageId(@Nullable Output<String> urgentImageId) {
            $.urgentImageId = urgentImageId;
            return this;
        }

        /**
         * @param urgentImageId The ID of the picture material of the media library.
         * 
         * @return builder
         * 
         */
        public Builder urgentImageId(String urgentImageId) {
            return urgentImageId(Output.of(urgentImageId));
        }

        /**
         * @param urgentImageUrl Prepare the URL of the picture material.
         * 
         * @return builder
         * 
         */
        public Builder urgentImageUrl(@Nullable Output<String> urgentImageUrl) {
            $.urgentImageUrl = urgentImageUrl;
            return this;
        }

        /**
         * @param urgentImageUrl Prepare the URL of the picture material.
         * 
         * @return builder
         * 
         */
        public Builder urgentImageUrl(String urgentImageUrl) {
            return urgentImageUrl(Output.of(urgentImageUrl));
        }

        /**
         * @param urgentLiveStreamUrl The prepared live stream URL.
         * 
         * @return builder
         * 
         */
        public Builder urgentLiveStreamUrl(@Nullable Output<String> urgentLiveStreamUrl) {
            $.urgentLiveStreamUrl = urgentLiveStreamUrl;
            return this;
        }

        /**
         * @param urgentLiveStreamUrl The prepared live stream URL.
         * 
         * @return builder
         * 
         */
        public Builder urgentLiveStreamUrl(String urgentLiveStreamUrl) {
            return urgentLiveStreamUrl(Output.of(urgentLiveStreamUrl));
        }

        /**
         * @param urgentMaterialId Prepared video, media library material ID. If this parameter is set to null, the standby configuration is cleared by default.
         * 
         * @return builder
         * 
         */
        public Builder urgentMaterialId(@Nullable Output<String> urgentMaterialId) {
            $.urgentMaterialId = urgentMaterialId;
            return this;
        }

        /**
         * @param urgentMaterialId Prepared video, media library material ID. If this parameter is set to null, the standby configuration is cleared by default.
         * 
         * @return builder
         * 
         */
        public Builder urgentMaterialId(String urgentMaterialId) {
            return urgentMaterialId(Output.of(urgentMaterialId));
        }

        public CasterState build() {
            return $;
        }
    }

}
