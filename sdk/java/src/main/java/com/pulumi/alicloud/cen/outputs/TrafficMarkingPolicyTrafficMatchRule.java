// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.cen.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class TrafficMarkingPolicyTrafficMatchRule {
    /**
     * @return IP Address Family
     * 
     */
    private @Nullable String addressFamily;
    /**
     * @return The destination network segment of the traffic message.
     * The flow classification matches the traffic of the destination IP address in the destination network segment. If the flow classification rule is not set, it means that the flow classification rule matches the traffic of any destination IP address.
     * 
     */
    private @Nullable String dstCidr;
    /**
     * @return The destination port of the traffic message. Valid values: **-1**, `1` to `65535`.
     * 
     * The flow classification rule matches the traffic of the destination port number in the destination port range. If the flow classification rule is not set, it means that the flow classification rule matches the traffic of any destination port number.
     * 
     * The current parameter supports a maximum of 2 port numbers. The input format is described as follows:
     * - If you only enter a port number, such as 1, the system defaults to match the traffic with the destination port of 1.
     * - If you enter 2 port numbers, such as 1 and 200, the system defaults to match the traffic of the destination port in the range of 1 to 200.
     * - If you enter 2 port numbers and one of them is - 1, the other port must also be - 1, indicating that it matches any destination port.
     * 
     */
    private @Nullable List<Integer> dstPortRanges;
    /**
     * @return The DSCP value of the traffic message. Valid values: `0` to **63 * *.
     * 
     * The flow classification rule matches the flow with the specified DSCP value. If the flow classification rule is not set, it means that the flow classification rule matches the flow with any DSCP value.
     * 
     * &gt; **NOTE:**  The current DSCP value refers to the DSCP value that the traffic message has carried before entering the cross-region connection.
     * 
     */
    private @Nullable Integer matchDscp;
    /**
     * @return The protocol type of the traffic message.
     * Stream classification rules can match traffic of multiple protocol types, such as `HTTP`, `HTTPS`, `TCP`, `UDP`, `SSH`, and **Telnet. For more protocol types, please log on to the [Cloud Enterprise Network Management Console](https://cen.console.aliyun.com/cen/list) to view.
     * 
     */
    private @Nullable String protocol;
    /**
     * @return The source network segment of the traffic message.
     * The flow classification rule matches the traffic of the source IP address in the source network segment. If the flow classification rule is not set, it means that the flow classification rule matches the traffic of any source IP address.
     * 
     */
    private @Nullable String srcCidr;
    /**
     * @return The source port of the traffic message. Valid values: **-1**, `1` to `65535`.
     * 
     * The flow classification rule matches the traffic of the source port number in the source port range. If it is not set, it means that the flow classification rule matches the traffic of any source port number.
     * 
     * The current parameter supports entering up to two port numbers. The input format is described as follows:
     * - If you only enter a port number, such as 1, the system defaults to match the traffic with source port 1.
     * - If you enter two port numbers, such as 1 and 200, the system defaults to match the traffic with the source port in the range of 1 to 200.
     * - If you enter two port numbers and one of them is - 1, the other port must also be - 1, indicating that it matches any source port.
     * 
     */
    private @Nullable List<Integer> srcPortRanges;
    /**
     * @return The description information of the stream classification rule.
     * The description must be 2 to 128 characters in length and can contain numbers, dashes (-), and underscores (_).
     * 
     */
    private @Nullable String trafficMatchRuleDescription;
    /**
     * @return The name of the stream classification rule.
     * The name must be 2 to 128 characters in length and can contain numbers, dashes (-), and underscores (_).
     * 
     */
    private @Nullable String trafficMatchRuleName;

    private TrafficMarkingPolicyTrafficMatchRule() {}
    /**
     * @return IP Address Family
     * 
     */
    public Optional<String> addressFamily() {
        return Optional.ofNullable(this.addressFamily);
    }
    /**
     * @return The destination network segment of the traffic message.
     * The flow classification matches the traffic of the destination IP address in the destination network segment. If the flow classification rule is not set, it means that the flow classification rule matches the traffic of any destination IP address.
     * 
     */
    public Optional<String> dstCidr() {
        return Optional.ofNullable(this.dstCidr);
    }
    /**
     * @return The destination port of the traffic message. Valid values: **-1**, `1` to `65535`.
     * 
     * The flow classification rule matches the traffic of the destination port number in the destination port range. If the flow classification rule is not set, it means that the flow classification rule matches the traffic of any destination port number.
     * 
     * The current parameter supports a maximum of 2 port numbers. The input format is described as follows:
     * - If you only enter a port number, such as 1, the system defaults to match the traffic with the destination port of 1.
     * - If you enter 2 port numbers, such as 1 and 200, the system defaults to match the traffic of the destination port in the range of 1 to 200.
     * - If you enter 2 port numbers and one of them is - 1, the other port must also be - 1, indicating that it matches any destination port.
     * 
     */
    public List<Integer> dstPortRanges() {
        return this.dstPortRanges == null ? List.of() : this.dstPortRanges;
    }
    /**
     * @return The DSCP value of the traffic message. Valid values: `0` to **63 * *.
     * 
     * The flow classification rule matches the flow with the specified DSCP value. If the flow classification rule is not set, it means that the flow classification rule matches the flow with any DSCP value.
     * 
     * &gt; **NOTE:**  The current DSCP value refers to the DSCP value that the traffic message has carried before entering the cross-region connection.
     * 
     */
    public Optional<Integer> matchDscp() {
        return Optional.ofNullable(this.matchDscp);
    }
    /**
     * @return The protocol type of the traffic message.
     * Stream classification rules can match traffic of multiple protocol types, such as `HTTP`, `HTTPS`, `TCP`, `UDP`, `SSH`, and **Telnet. For more protocol types, please log on to the [Cloud Enterprise Network Management Console](https://cen.console.aliyun.com/cen/list) to view.
     * 
     */
    public Optional<String> protocol() {
        return Optional.ofNullable(this.protocol);
    }
    /**
     * @return The source network segment of the traffic message.
     * The flow classification rule matches the traffic of the source IP address in the source network segment. If the flow classification rule is not set, it means that the flow classification rule matches the traffic of any source IP address.
     * 
     */
    public Optional<String> srcCidr() {
        return Optional.ofNullable(this.srcCidr);
    }
    /**
     * @return The source port of the traffic message. Valid values: **-1**, `1` to `65535`.
     * 
     * The flow classification rule matches the traffic of the source port number in the source port range. If it is not set, it means that the flow classification rule matches the traffic of any source port number.
     * 
     * The current parameter supports entering up to two port numbers. The input format is described as follows:
     * - If you only enter a port number, such as 1, the system defaults to match the traffic with source port 1.
     * - If you enter two port numbers, such as 1 and 200, the system defaults to match the traffic with the source port in the range of 1 to 200.
     * - If you enter two port numbers and one of them is - 1, the other port must also be - 1, indicating that it matches any source port.
     * 
     */
    public List<Integer> srcPortRanges() {
        return this.srcPortRanges == null ? List.of() : this.srcPortRanges;
    }
    /**
     * @return The description information of the stream classification rule.
     * The description must be 2 to 128 characters in length and can contain numbers, dashes (-), and underscores (_).
     * 
     */
    public Optional<String> trafficMatchRuleDescription() {
        return Optional.ofNullable(this.trafficMatchRuleDescription);
    }
    /**
     * @return The name of the stream classification rule.
     * The name must be 2 to 128 characters in length and can contain numbers, dashes (-), and underscores (_).
     * 
     */
    public Optional<String> trafficMatchRuleName() {
        return Optional.ofNullable(this.trafficMatchRuleName);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(TrafficMarkingPolicyTrafficMatchRule defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String addressFamily;
        private @Nullable String dstCidr;
        private @Nullable List<Integer> dstPortRanges;
        private @Nullable Integer matchDscp;
        private @Nullable String protocol;
        private @Nullable String srcCidr;
        private @Nullable List<Integer> srcPortRanges;
        private @Nullable String trafficMatchRuleDescription;
        private @Nullable String trafficMatchRuleName;
        public Builder() {}
        public Builder(TrafficMarkingPolicyTrafficMatchRule defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.addressFamily = defaults.addressFamily;
    	      this.dstCidr = defaults.dstCidr;
    	      this.dstPortRanges = defaults.dstPortRanges;
    	      this.matchDscp = defaults.matchDscp;
    	      this.protocol = defaults.protocol;
    	      this.srcCidr = defaults.srcCidr;
    	      this.srcPortRanges = defaults.srcPortRanges;
    	      this.trafficMatchRuleDescription = defaults.trafficMatchRuleDescription;
    	      this.trafficMatchRuleName = defaults.trafficMatchRuleName;
        }

        @CustomType.Setter
        public Builder addressFamily(@Nullable String addressFamily) {

            this.addressFamily = addressFamily;
            return this;
        }
        @CustomType.Setter
        public Builder dstCidr(@Nullable String dstCidr) {

            this.dstCidr = dstCidr;
            return this;
        }
        @CustomType.Setter
        public Builder dstPortRanges(@Nullable List<Integer> dstPortRanges) {

            this.dstPortRanges = dstPortRanges;
            return this;
        }
        public Builder dstPortRanges(Integer... dstPortRanges) {
            return dstPortRanges(List.of(dstPortRanges));
        }
        @CustomType.Setter
        public Builder matchDscp(@Nullable Integer matchDscp) {

            this.matchDscp = matchDscp;
            return this;
        }
        @CustomType.Setter
        public Builder protocol(@Nullable String protocol) {

            this.protocol = protocol;
            return this;
        }
        @CustomType.Setter
        public Builder srcCidr(@Nullable String srcCidr) {

            this.srcCidr = srcCidr;
            return this;
        }
        @CustomType.Setter
        public Builder srcPortRanges(@Nullable List<Integer> srcPortRanges) {

            this.srcPortRanges = srcPortRanges;
            return this;
        }
        public Builder srcPortRanges(Integer... srcPortRanges) {
            return srcPortRanges(List.of(srcPortRanges));
        }
        @CustomType.Setter
        public Builder trafficMatchRuleDescription(@Nullable String trafficMatchRuleDescription) {

            this.trafficMatchRuleDescription = trafficMatchRuleDescription;
            return this;
        }
        @CustomType.Setter
        public Builder trafficMatchRuleName(@Nullable String trafficMatchRuleName) {

            this.trafficMatchRuleName = trafficMatchRuleName;
            return this;
        }
        public TrafficMarkingPolicyTrafficMatchRule build() {
            final var _resultValue = new TrafficMarkingPolicyTrafficMatchRule();
            _resultValue.addressFamily = addressFamily;
            _resultValue.dstCidr = dstCidr;
            _resultValue.dstPortRanges = dstPortRanges;
            _resultValue.matchDscp = matchDscp;
            _resultValue.protocol = protocol;
            _resultValue.srcCidr = srcCidr;
            _resultValue.srcPortRanges = srcPortRanges;
            _resultValue.trafficMatchRuleDescription = trafficMatchRuleDescription;
            _resultValue.trafficMatchRuleName = trafficMatchRuleName;
            return _resultValue;
        }
    }
}
