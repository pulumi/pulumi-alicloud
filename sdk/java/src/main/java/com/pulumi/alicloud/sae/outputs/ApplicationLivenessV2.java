// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.sae.outputs;

import com.pulumi.alicloud.sae.outputs.ApplicationLivenessV2Exec;
import com.pulumi.alicloud.sae.outputs.ApplicationLivenessV2HttpGet;
import com.pulumi.alicloud.sae.outputs.ApplicationLivenessV2TcpSocket;
import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ApplicationLivenessV2 {
    /**
     * @return Execute. See `exec` below.
     * 
     */
    private @Nullable ApplicationLivenessV2Exec exec;
    /**
     * @return The liveness check settings of the container. See `http_get` below.
     * 
     */
    private @Nullable ApplicationLivenessV2HttpGet httpGet;
    /**
     * @return The delay of the health check.
     * 
     */
    private @Nullable Integer initialDelaySeconds;
    /**
     * @return The interval at which the health check is performed.
     * 
     */
    private @Nullable Integer periodSeconds;
    /**
     * @return The liveness check settings of the container. See `tcp_socket` below.
     * 
     */
    private @Nullable ApplicationLivenessV2TcpSocket tcpSocket;
    /**
     * @return The timeout period of the health check.
     * 
     */
    private @Nullable Integer timeoutSeconds;

    private ApplicationLivenessV2() {}
    /**
     * @return Execute. See `exec` below.
     * 
     */
    public Optional<ApplicationLivenessV2Exec> exec() {
        return Optional.ofNullable(this.exec);
    }
    /**
     * @return The liveness check settings of the container. See `http_get` below.
     * 
     */
    public Optional<ApplicationLivenessV2HttpGet> httpGet() {
        return Optional.ofNullable(this.httpGet);
    }
    /**
     * @return The delay of the health check.
     * 
     */
    public Optional<Integer> initialDelaySeconds() {
        return Optional.ofNullable(this.initialDelaySeconds);
    }
    /**
     * @return The interval at which the health check is performed.
     * 
     */
    public Optional<Integer> periodSeconds() {
        return Optional.ofNullable(this.periodSeconds);
    }
    /**
     * @return The liveness check settings of the container. See `tcp_socket` below.
     * 
     */
    public Optional<ApplicationLivenessV2TcpSocket> tcpSocket() {
        return Optional.ofNullable(this.tcpSocket);
    }
    /**
     * @return The timeout period of the health check.
     * 
     */
    public Optional<Integer> timeoutSeconds() {
        return Optional.ofNullable(this.timeoutSeconds);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ApplicationLivenessV2 defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable ApplicationLivenessV2Exec exec;
        private @Nullable ApplicationLivenessV2HttpGet httpGet;
        private @Nullable Integer initialDelaySeconds;
        private @Nullable Integer periodSeconds;
        private @Nullable ApplicationLivenessV2TcpSocket tcpSocket;
        private @Nullable Integer timeoutSeconds;
        public Builder() {}
        public Builder(ApplicationLivenessV2 defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.exec = defaults.exec;
    	      this.httpGet = defaults.httpGet;
    	      this.initialDelaySeconds = defaults.initialDelaySeconds;
    	      this.periodSeconds = defaults.periodSeconds;
    	      this.tcpSocket = defaults.tcpSocket;
    	      this.timeoutSeconds = defaults.timeoutSeconds;
        }

        @CustomType.Setter
        public Builder exec(@Nullable ApplicationLivenessV2Exec exec) {

            this.exec = exec;
            return this;
        }
        @CustomType.Setter
        public Builder httpGet(@Nullable ApplicationLivenessV2HttpGet httpGet) {

            this.httpGet = httpGet;
            return this;
        }
        @CustomType.Setter
        public Builder initialDelaySeconds(@Nullable Integer initialDelaySeconds) {

            this.initialDelaySeconds = initialDelaySeconds;
            return this;
        }
        @CustomType.Setter
        public Builder periodSeconds(@Nullable Integer periodSeconds) {

            this.periodSeconds = periodSeconds;
            return this;
        }
        @CustomType.Setter
        public Builder tcpSocket(@Nullable ApplicationLivenessV2TcpSocket tcpSocket) {

            this.tcpSocket = tcpSocket;
            return this;
        }
        @CustomType.Setter
        public Builder timeoutSeconds(@Nullable Integer timeoutSeconds) {

            this.timeoutSeconds = timeoutSeconds;
            return this;
        }
        public ApplicationLivenessV2 build() {
            final var _resultValue = new ApplicationLivenessV2();
            _resultValue.exec = exec;
            _resultValue.httpGet = httpGet;
            _resultValue.initialDelaySeconds = initialDelaySeconds;
            _resultValue.periodSeconds = periodSeconds;
            _resultValue.tcpSocket = tcpSocket;
            _resultValue.timeoutSeconds = timeoutSeconds;
            return _resultValue;
        }
    }
}
