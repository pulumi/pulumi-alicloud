// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.ecs.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetEcsInvocationsInvocationInvokeInstance {
    /**
     * @return The start time of the execution.
     * 
     */
    private String creationTime;
    /**
     * @return The size of truncated and discarded text when the value of the Output response parameter exceeds 24 KB in size.
     * 
     */
    private Integer dropped;
    private String errorCode;
    /**
     * @return Details about the reason why the command failed to be sent or run.
     * 
     */
    private String errorInfo;
    /**
     * @return The exit code of the execution.
     * 
     */
    private Integer exitCode;
    /**
     * @return The end time of the execution.
     * 
     */
    private String finishTime;
    /**
     * @return The ID of the instance.
     * 
     */
    private String instanceId;
    private String instanceInvokeStatus;
    /**
     * @return The execution state on a single instance. Valid values: `Pending`, `Scheduled`, `Running`, `Success`, `Failed`, `Stopping`, `Stopped`, `PartialFailed`.
     * 
     */
    private String invocationStatus;
    /**
     * @return The output of the command.
     * 
     */
    private String output;
    /**
     * @return The number of times that the command is run on the instance.
     * 
     */
    private Integer repeats;
    /**
     * @return The time when the command started to be run on the instance.
     * 
     */
    private String startTime;
    /**
     * @return The time when the command stopped being run on the instance. If you call the StopInvocation operation to manually stop the execution, the value is the time when you call the operation.
     * 
     */
    private String stopTime;
    /**
     * @return Indicates whether the commands are to be automatically run.
     * * `error_code	` - The code that indicates why the command failed to be sent or run.
     * * `instance_invoke_status	` - **Note:** We recommend that you ignore this parameter and check the value of the `invocation_status` response parameter for the overall execution state.
     * 
     */
    private Boolean timed;
    /**
     * @return The time when the execution state was updated.
     * 
     */
    private String updateTime;

    private GetEcsInvocationsInvocationInvokeInstance() {}
    /**
     * @return The start time of the execution.
     * 
     */
    public String creationTime() {
        return this.creationTime;
    }
    /**
     * @return The size of truncated and discarded text when the value of the Output response parameter exceeds 24 KB in size.
     * 
     */
    public Integer dropped() {
        return this.dropped;
    }
    public String errorCode() {
        return this.errorCode;
    }
    /**
     * @return Details about the reason why the command failed to be sent or run.
     * 
     */
    public String errorInfo() {
        return this.errorInfo;
    }
    /**
     * @return The exit code of the execution.
     * 
     */
    public Integer exitCode() {
        return this.exitCode;
    }
    /**
     * @return The end time of the execution.
     * 
     */
    public String finishTime() {
        return this.finishTime;
    }
    /**
     * @return The ID of the instance.
     * 
     */
    public String instanceId() {
        return this.instanceId;
    }
    public String instanceInvokeStatus() {
        return this.instanceInvokeStatus;
    }
    /**
     * @return The execution state on a single instance. Valid values: `Pending`, `Scheduled`, `Running`, `Success`, `Failed`, `Stopping`, `Stopped`, `PartialFailed`.
     * 
     */
    public String invocationStatus() {
        return this.invocationStatus;
    }
    /**
     * @return The output of the command.
     * 
     */
    public String output() {
        return this.output;
    }
    /**
     * @return The number of times that the command is run on the instance.
     * 
     */
    public Integer repeats() {
        return this.repeats;
    }
    /**
     * @return The time when the command started to be run on the instance.
     * 
     */
    public String startTime() {
        return this.startTime;
    }
    /**
     * @return The time when the command stopped being run on the instance. If you call the StopInvocation operation to manually stop the execution, the value is the time when you call the operation.
     * 
     */
    public String stopTime() {
        return this.stopTime;
    }
    /**
     * @return Indicates whether the commands are to be automatically run.
     * * `error_code	` - The code that indicates why the command failed to be sent or run.
     * * `instance_invoke_status	` - **Note:** We recommend that you ignore this parameter and check the value of the `invocation_status` response parameter for the overall execution state.
     * 
     */
    public Boolean timed() {
        return this.timed;
    }
    /**
     * @return The time when the execution state was updated.
     * 
     */
    public String updateTime() {
        return this.updateTime;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetEcsInvocationsInvocationInvokeInstance defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String creationTime;
        private Integer dropped;
        private String errorCode;
        private String errorInfo;
        private Integer exitCode;
        private String finishTime;
        private String instanceId;
        private String instanceInvokeStatus;
        private String invocationStatus;
        private String output;
        private Integer repeats;
        private String startTime;
        private String stopTime;
        private Boolean timed;
        private String updateTime;
        public Builder() {}
        public Builder(GetEcsInvocationsInvocationInvokeInstance defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.creationTime = defaults.creationTime;
    	      this.dropped = defaults.dropped;
    	      this.errorCode = defaults.errorCode;
    	      this.errorInfo = defaults.errorInfo;
    	      this.exitCode = defaults.exitCode;
    	      this.finishTime = defaults.finishTime;
    	      this.instanceId = defaults.instanceId;
    	      this.instanceInvokeStatus = defaults.instanceInvokeStatus;
    	      this.invocationStatus = defaults.invocationStatus;
    	      this.output = defaults.output;
    	      this.repeats = defaults.repeats;
    	      this.startTime = defaults.startTime;
    	      this.stopTime = defaults.stopTime;
    	      this.timed = defaults.timed;
    	      this.updateTime = defaults.updateTime;
        }

        @CustomType.Setter
        public Builder creationTime(String creationTime) {
            this.creationTime = Objects.requireNonNull(creationTime);
            return this;
        }
        @CustomType.Setter
        public Builder dropped(Integer dropped) {
            this.dropped = Objects.requireNonNull(dropped);
            return this;
        }
        @CustomType.Setter
        public Builder errorCode(String errorCode) {
            this.errorCode = Objects.requireNonNull(errorCode);
            return this;
        }
        @CustomType.Setter
        public Builder errorInfo(String errorInfo) {
            this.errorInfo = Objects.requireNonNull(errorInfo);
            return this;
        }
        @CustomType.Setter
        public Builder exitCode(Integer exitCode) {
            this.exitCode = Objects.requireNonNull(exitCode);
            return this;
        }
        @CustomType.Setter
        public Builder finishTime(String finishTime) {
            this.finishTime = Objects.requireNonNull(finishTime);
            return this;
        }
        @CustomType.Setter
        public Builder instanceId(String instanceId) {
            this.instanceId = Objects.requireNonNull(instanceId);
            return this;
        }
        @CustomType.Setter
        public Builder instanceInvokeStatus(String instanceInvokeStatus) {
            this.instanceInvokeStatus = Objects.requireNonNull(instanceInvokeStatus);
            return this;
        }
        @CustomType.Setter
        public Builder invocationStatus(String invocationStatus) {
            this.invocationStatus = Objects.requireNonNull(invocationStatus);
            return this;
        }
        @CustomType.Setter
        public Builder output(String output) {
            this.output = Objects.requireNonNull(output);
            return this;
        }
        @CustomType.Setter
        public Builder repeats(Integer repeats) {
            this.repeats = Objects.requireNonNull(repeats);
            return this;
        }
        @CustomType.Setter
        public Builder startTime(String startTime) {
            this.startTime = Objects.requireNonNull(startTime);
            return this;
        }
        @CustomType.Setter
        public Builder stopTime(String stopTime) {
            this.stopTime = Objects.requireNonNull(stopTime);
            return this;
        }
        @CustomType.Setter
        public Builder timed(Boolean timed) {
            this.timed = Objects.requireNonNull(timed);
            return this;
        }
        @CustomType.Setter
        public Builder updateTime(String updateTime) {
            this.updateTime = Objects.requireNonNull(updateTime);
            return this;
        }
        public GetEcsInvocationsInvocationInvokeInstance build() {
            final var o = new GetEcsInvocationsInvocationInvokeInstance();
            o.creationTime = creationTime;
            o.dropped = dropped;
            o.errorCode = errorCode;
            o.errorInfo = errorInfo;
            o.exitCode = exitCode;
            o.finishTime = finishTime;
            o.instanceId = instanceId;
            o.instanceInvokeStatus = instanceInvokeStatus;
            o.invocationStatus = invocationStatus;
            o.output = output;
            o.repeats = repeats;
            o.startTime = startTime;
            o.stopTime = stopTime;
            o.timed = timed;
            o.updateTime = updateTime;
            return o;
        }
    }
}
