// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.ots;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;


public final class TunnelArgs extends com.pulumi.resources.ResourceArgs {

    public static final TunnelArgs Empty = new TunnelArgs();

    /**
     * The name of the OTS instance in which table will located.
     * 
     */
    @Import(name="instanceName", required=true)
    private Output<String> instanceName;

    /**
     * @return The name of the OTS instance in which table will located.
     * 
     */
    public Output<String> instanceName() {
        return this.instanceName;
    }

    /**
     * The name of the OTS table. If changed, a new table would be created.
     * 
     */
    @Import(name="tableName", required=true)
    private Output<String> tableName;

    /**
     * @return The name of the OTS table. If changed, a new table would be created.
     * 
     */
    public Output<String> tableName() {
        return this.tableName;
    }

    /**
     * The name of the OTS tunnel. If changed, a new tunnel would be created.
     * 
     */
    @Import(name="tunnelName", required=true)
    private Output<String> tunnelName;

    /**
     * @return The name of the OTS tunnel. If changed, a new tunnel would be created.
     * 
     */
    public Output<String> tunnelName() {
        return this.tunnelName;
    }

    /**
     * The type of the OTS tunnel. Only `BaseAndStream`, `BaseData` or `Stream` is allowed.
     * 
     */
    @Import(name="tunnelType", required=true)
    private Output<String> tunnelType;

    /**
     * @return The type of the OTS tunnel. Only `BaseAndStream`, `BaseData` or `Stream` is allowed.
     * 
     */
    public Output<String> tunnelType() {
        return this.tunnelType;
    }

    private TunnelArgs() {}

    private TunnelArgs(TunnelArgs $) {
        this.instanceName = $.instanceName;
        this.tableName = $.tableName;
        this.tunnelName = $.tunnelName;
        this.tunnelType = $.tunnelType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TunnelArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TunnelArgs $;

        public Builder() {
            $ = new TunnelArgs();
        }

        public Builder(TunnelArgs defaults) {
            $ = new TunnelArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param instanceName The name of the OTS instance in which table will located.
         * 
         * @return builder
         * 
         */
        public Builder instanceName(Output<String> instanceName) {
            $.instanceName = instanceName;
            return this;
        }

        /**
         * @param instanceName The name of the OTS instance in which table will located.
         * 
         * @return builder
         * 
         */
        public Builder instanceName(String instanceName) {
            return instanceName(Output.of(instanceName));
        }

        /**
         * @param tableName The name of the OTS table. If changed, a new table would be created.
         * 
         * @return builder
         * 
         */
        public Builder tableName(Output<String> tableName) {
            $.tableName = tableName;
            return this;
        }

        /**
         * @param tableName The name of the OTS table. If changed, a new table would be created.
         * 
         * @return builder
         * 
         */
        public Builder tableName(String tableName) {
            return tableName(Output.of(tableName));
        }

        /**
         * @param tunnelName The name of the OTS tunnel. If changed, a new tunnel would be created.
         * 
         * @return builder
         * 
         */
        public Builder tunnelName(Output<String> tunnelName) {
            $.tunnelName = tunnelName;
            return this;
        }

        /**
         * @param tunnelName The name of the OTS tunnel. If changed, a new tunnel would be created.
         * 
         * @return builder
         * 
         */
        public Builder tunnelName(String tunnelName) {
            return tunnelName(Output.of(tunnelName));
        }

        /**
         * @param tunnelType The type of the OTS tunnel. Only `BaseAndStream`, `BaseData` or `Stream` is allowed.
         * 
         * @return builder
         * 
         */
        public Builder tunnelType(Output<String> tunnelType) {
            $.tunnelType = tunnelType;
            return this;
        }

        /**
         * @param tunnelType The type of the OTS tunnel. Only `BaseAndStream`, `BaseData` or `Stream` is allowed.
         * 
         * @return builder
         * 
         */
        public Builder tunnelType(String tunnelType) {
            return tunnelType(Output.of(tunnelType));
        }

        public TunnelArgs build() {
            if ($.instanceName == null) {
                throw new MissingRequiredPropertyException("TunnelArgs", "instanceName");
            }
            if ($.tableName == null) {
                throw new MissingRequiredPropertyException("TunnelArgs", "tableName");
            }
            if ($.tunnelName == null) {
                throw new MissingRequiredPropertyException("TunnelArgs", "tunnelName");
            }
            if ($.tunnelType == null) {
                throw new MissingRequiredPropertyException("TunnelArgs", "tunnelType");
            }
            return $;
        }
    }

}
