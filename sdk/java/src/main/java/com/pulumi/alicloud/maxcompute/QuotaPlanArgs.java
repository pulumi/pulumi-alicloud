// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.maxcompute;

import com.pulumi.alicloud.maxcompute.inputs.QuotaPlanQuotaArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class QuotaPlanArgs extends com.pulumi.resources.ResourceArgs {

    public static final QuotaPlanArgs Empty = new QuotaPlanArgs();

    /**
     * Whether to take effect immediately. “Valid values: true”\
     * .&gt; **NOTE:** when other quota plans in the same quota group take effect, the effective quota group will become invalid. That is, IsEffective will become false. The effective quota plan cannot be deleted.
     * 
     */
    @Import(name="isEffective")
    private @Nullable Output<Boolean> isEffective;

    /**
     * @return Whether to take effect immediately. “Valid values: true”\
     * .&gt; **NOTE:** when other quota plans in the same quota group take effect, the effective quota group will become invalid. That is, IsEffective will become false. The effective quota plan cannot be deleted.
     * 
     */
    public Optional<Output<Boolean>> isEffective() {
        return Optional.ofNullable(this.isEffective);
    }

    /**
     * Quota Name
     * 
     */
    @Import(name="nickname", required=true)
    private Output<String> nickname;

    /**
     * @return Quota Name
     * 
     */
    public Output<String> nickname() {
        return this.nickname;
    }

    /**
     * The Quota plan name. Start with a letter, containing letters, numbers, and underscores (_). It is no more than 64 characters long.
     * 
     */
    @Import(name="planName", required=true)
    private Output<String> planName;

    /**
     * @return The Quota plan name. Start with a letter, containing letters, numbers, and underscores (_). It is no more than 64 characters long.
     * 
     */
    public Output<String> planName() {
        return this.planName;
    }

    /**
     * Quota property See `quota` below.
     * 
     */
    @Import(name="quota")
    private @Nullable Output<QuotaPlanQuotaArgs> quota;

    /**
     * @return Quota property See `quota` below.
     * 
     */
    public Optional<Output<QuotaPlanQuotaArgs>> quota() {
        return Optional.ofNullable(this.quota);
    }

    private QuotaPlanArgs() {}

    private QuotaPlanArgs(QuotaPlanArgs $) {
        this.isEffective = $.isEffective;
        this.nickname = $.nickname;
        this.planName = $.planName;
        this.quota = $.quota;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(QuotaPlanArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private QuotaPlanArgs $;

        public Builder() {
            $ = new QuotaPlanArgs();
        }

        public Builder(QuotaPlanArgs defaults) {
            $ = new QuotaPlanArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param isEffective Whether to take effect immediately. “Valid values: true”\
         * .&gt; **NOTE:** when other quota plans in the same quota group take effect, the effective quota group will become invalid. That is, IsEffective will become false. The effective quota plan cannot be deleted.
         * 
         * @return builder
         * 
         */
        public Builder isEffective(@Nullable Output<Boolean> isEffective) {
            $.isEffective = isEffective;
            return this;
        }

        /**
         * @param isEffective Whether to take effect immediately. “Valid values: true”\
         * .&gt; **NOTE:** when other quota plans in the same quota group take effect, the effective quota group will become invalid. That is, IsEffective will become false. The effective quota plan cannot be deleted.
         * 
         * @return builder
         * 
         */
        public Builder isEffective(Boolean isEffective) {
            return isEffective(Output.of(isEffective));
        }

        /**
         * @param nickname Quota Name
         * 
         * @return builder
         * 
         */
        public Builder nickname(Output<String> nickname) {
            $.nickname = nickname;
            return this;
        }

        /**
         * @param nickname Quota Name
         * 
         * @return builder
         * 
         */
        public Builder nickname(String nickname) {
            return nickname(Output.of(nickname));
        }

        /**
         * @param planName The Quota plan name. Start with a letter, containing letters, numbers, and underscores (_). It is no more than 64 characters long.
         * 
         * @return builder
         * 
         */
        public Builder planName(Output<String> planName) {
            $.planName = planName;
            return this;
        }

        /**
         * @param planName The Quota plan name. Start with a letter, containing letters, numbers, and underscores (_). It is no more than 64 characters long.
         * 
         * @return builder
         * 
         */
        public Builder planName(String planName) {
            return planName(Output.of(planName));
        }

        /**
         * @param quota Quota property See `quota` below.
         * 
         * @return builder
         * 
         */
        public Builder quota(@Nullable Output<QuotaPlanQuotaArgs> quota) {
            $.quota = quota;
            return this;
        }

        /**
         * @param quota Quota property See `quota` below.
         * 
         * @return builder
         * 
         */
        public Builder quota(QuotaPlanQuotaArgs quota) {
            return quota(Output.of(quota));
        }

        public QuotaPlanArgs build() {
            if ($.nickname == null) {
                throw new MissingRequiredPropertyException("QuotaPlanArgs", "nickname");
            }
            if ($.planName == null) {
                throw new MissingRequiredPropertyException("QuotaPlanArgs", "planName");
            }
            return $;
        }
    }

}
