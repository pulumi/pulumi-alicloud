// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.cddc.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetDedicatedHostsArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetDedicatedHostsArgs Empty = new GetDedicatedHostsArgs();

    /**
     * Specifies whether instances can be created on the host. Valid values: `1` or `0`. `1`: Instances can be created on the host. `0`: Instances cannot be created on the host.
     * 
     */
    @Import(name="allocationStatus")
    private @Nullable Output<String> allocationStatus;

    /**
     * @return Specifies whether instances can be created on the host. Valid values: `1` or `0`. `1`: Instances can be created on the host. `0`: Instances cannot be created on the host.
     * 
     */
    public Optional<Output<String>> allocationStatus() {
        return Optional.ofNullable(this.allocationStatus);
    }

    /**
     * The ID of the dedicated cluster in which the host is created.
     * 
     */
    @Import(name="dedicatedHostGroupId", required=true)
    private Output<String> dedicatedHostGroupId;

    /**
     * @return The ID of the dedicated cluster in which the host is created.
     * 
     */
    public Output<String> dedicatedHostGroupId() {
        return this.dedicatedHostGroupId;
    }

    /**
     * Default to `false`. Set it to `true` can output more details about resource attributes.
     * 
     */
    @Import(name="enableDetails")
    private @Nullable Output<Boolean> enableDetails;

    /**
     * @return Default to `false`. Set it to `true` can output more details about resource attributes.
     * 
     */
    public Optional<Output<Boolean>> enableDetails() {
        return Optional.ofNullable(this.enableDetails);
    }

    /**
     * The storage type of the host.
     * 
     */
    @Import(name="hostType")
    private @Nullable Output<String> hostType;

    /**
     * @return The storage type of the host.
     * 
     */
    public Optional<Output<String>> hostType() {
        return Optional.ofNullable(this.hostType);
    }

    /**
     * A list of Dedicated Host IDs.
     * 
     */
    @Import(name="ids")
    private @Nullable Output<List<String>> ids;

    /**
     * @return A list of Dedicated Host IDs.
     * 
     */
    public Optional<Output<List<String>>> ids() {
        return Optional.ofNullable(this.ids);
    }

    /**
     * The ID of the order.
     * 
     */
    @Import(name="orderId")
    private @Nullable Output<String> orderId;

    /**
     * @return The ID of the order.
     * 
     */
    public Optional<Output<String>> orderId() {
        return Optional.ofNullable(this.orderId);
    }

    /**
     * File name where to save data source results (after running `pulumi preview`).
     * 
     */
    @Import(name="outputFile")
    private @Nullable Output<String> outputFile;

    /**
     * @return File name where to save data source results (after running `pulumi preview`).
     * 
     */
    public Optional<Output<String>> outputFile() {
        return Optional.ofNullable(this.outputFile);
    }

    /**
     * The state of the host.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return The state of the host.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * The tag of the resource.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,Object>> tags;

    /**
     * @return The tag of the resource.
     * 
     */
    public Optional<Output<Map<String,Object>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * The zone ID of the host.
     * 
     */
    @Import(name="zoneId")
    private @Nullable Output<String> zoneId;

    /**
     * @return The zone ID of the host.
     * 
     */
    public Optional<Output<String>> zoneId() {
        return Optional.ofNullable(this.zoneId);
    }

    private GetDedicatedHostsArgs() {}

    private GetDedicatedHostsArgs(GetDedicatedHostsArgs $) {
        this.allocationStatus = $.allocationStatus;
        this.dedicatedHostGroupId = $.dedicatedHostGroupId;
        this.enableDetails = $.enableDetails;
        this.hostType = $.hostType;
        this.ids = $.ids;
        this.orderId = $.orderId;
        this.outputFile = $.outputFile;
        this.status = $.status;
        this.tags = $.tags;
        this.zoneId = $.zoneId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetDedicatedHostsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetDedicatedHostsArgs $;

        public Builder() {
            $ = new GetDedicatedHostsArgs();
        }

        public Builder(GetDedicatedHostsArgs defaults) {
            $ = new GetDedicatedHostsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param allocationStatus Specifies whether instances can be created on the host. Valid values: `1` or `0`. `1`: Instances can be created on the host. `0`: Instances cannot be created on the host.
         * 
         * @return builder
         * 
         */
        public Builder allocationStatus(@Nullable Output<String> allocationStatus) {
            $.allocationStatus = allocationStatus;
            return this;
        }

        /**
         * @param allocationStatus Specifies whether instances can be created on the host. Valid values: `1` or `0`. `1`: Instances can be created on the host. `0`: Instances cannot be created on the host.
         * 
         * @return builder
         * 
         */
        public Builder allocationStatus(String allocationStatus) {
            return allocationStatus(Output.of(allocationStatus));
        }

        /**
         * @param dedicatedHostGroupId The ID of the dedicated cluster in which the host is created.
         * 
         * @return builder
         * 
         */
        public Builder dedicatedHostGroupId(Output<String> dedicatedHostGroupId) {
            $.dedicatedHostGroupId = dedicatedHostGroupId;
            return this;
        }

        /**
         * @param dedicatedHostGroupId The ID of the dedicated cluster in which the host is created.
         * 
         * @return builder
         * 
         */
        public Builder dedicatedHostGroupId(String dedicatedHostGroupId) {
            return dedicatedHostGroupId(Output.of(dedicatedHostGroupId));
        }

        /**
         * @param enableDetails Default to `false`. Set it to `true` can output more details about resource attributes.
         * 
         * @return builder
         * 
         */
        public Builder enableDetails(@Nullable Output<Boolean> enableDetails) {
            $.enableDetails = enableDetails;
            return this;
        }

        /**
         * @param enableDetails Default to `false`. Set it to `true` can output more details about resource attributes.
         * 
         * @return builder
         * 
         */
        public Builder enableDetails(Boolean enableDetails) {
            return enableDetails(Output.of(enableDetails));
        }

        /**
         * @param hostType The storage type of the host.
         * 
         * @return builder
         * 
         */
        public Builder hostType(@Nullable Output<String> hostType) {
            $.hostType = hostType;
            return this;
        }

        /**
         * @param hostType The storage type of the host.
         * 
         * @return builder
         * 
         */
        public Builder hostType(String hostType) {
            return hostType(Output.of(hostType));
        }

        /**
         * @param ids A list of Dedicated Host IDs.
         * 
         * @return builder
         * 
         */
        public Builder ids(@Nullable Output<List<String>> ids) {
            $.ids = ids;
            return this;
        }

        /**
         * @param ids A list of Dedicated Host IDs.
         * 
         * @return builder
         * 
         */
        public Builder ids(List<String> ids) {
            return ids(Output.of(ids));
        }

        /**
         * @param ids A list of Dedicated Host IDs.
         * 
         * @return builder
         * 
         */
        public Builder ids(String... ids) {
            return ids(List.of(ids));
        }

        /**
         * @param orderId The ID of the order.
         * 
         * @return builder
         * 
         */
        public Builder orderId(@Nullable Output<String> orderId) {
            $.orderId = orderId;
            return this;
        }

        /**
         * @param orderId The ID of the order.
         * 
         * @return builder
         * 
         */
        public Builder orderId(String orderId) {
            return orderId(Output.of(orderId));
        }

        /**
         * @param outputFile File name where to save data source results (after running `pulumi preview`).
         * 
         * @return builder
         * 
         */
        public Builder outputFile(@Nullable Output<String> outputFile) {
            $.outputFile = outputFile;
            return this;
        }

        /**
         * @param outputFile File name where to save data source results (after running `pulumi preview`).
         * 
         * @return builder
         * 
         */
        public Builder outputFile(String outputFile) {
            return outputFile(Output.of(outputFile));
        }

        /**
         * @param status The state of the host.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status The state of the host.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param tags The tag of the resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,Object>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags The tag of the resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,Object> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param zoneId The zone ID of the host.
         * 
         * @return builder
         * 
         */
        public Builder zoneId(@Nullable Output<String> zoneId) {
            $.zoneId = zoneId;
            return this;
        }

        /**
         * @param zoneId The zone ID of the host.
         * 
         * @return builder
         * 
         */
        public Builder zoneId(String zoneId) {
            return zoneId(Output.of(zoneId));
        }

        public GetDedicatedHostsArgs build() {
            if ($.dedicatedHostGroupId == null) {
                throw new MissingRequiredPropertyException("GetDedicatedHostsArgs", "dedicatedHostGroupId");
            }
            return $;
        }
    }

}
