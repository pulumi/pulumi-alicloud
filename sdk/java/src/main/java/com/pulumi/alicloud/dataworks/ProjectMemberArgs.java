// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.dataworks;

import com.pulumi.alicloud.dataworks.inputs.ProjectMemberRoleArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ProjectMemberArgs extends com.pulumi.resources.ResourceArgs {

    public static final ProjectMemberArgs Empty = new ProjectMemberArgs();

    /**
     * Project ID
     * 
     */
    @Import(name="projectId", required=true)
    private Output<Integer> projectId;

    /**
     * @return Project ID
     * 
     */
    public Output<Integer> projectId() {
        return this.projectId;
    }

    /**
     * List of roles owned by members. See `roles` below.
     * 
     */
    @Import(name="roles")
    private @Nullable Output<List<ProjectMemberRoleArgs>> roles;

    /**
     * @return List of roles owned by members. See `roles` below.
     * 
     */
    public Optional<Output<List<ProjectMemberRoleArgs>>> roles() {
        return Optional.ofNullable(this.roles);
    }

    /**
     * The user ID of the member.
     * 
     */
    @Import(name="userId", required=true)
    private Output<String> userId;

    /**
     * @return The user ID of the member.
     * 
     */
    public Output<String> userId() {
        return this.userId;
    }

    private ProjectMemberArgs() {}

    private ProjectMemberArgs(ProjectMemberArgs $) {
        this.projectId = $.projectId;
        this.roles = $.roles;
        this.userId = $.userId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ProjectMemberArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ProjectMemberArgs $;

        public Builder() {
            $ = new ProjectMemberArgs();
        }

        public Builder(ProjectMemberArgs defaults) {
            $ = new ProjectMemberArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param projectId Project ID
         * 
         * @return builder
         * 
         */
        public Builder projectId(Output<Integer> projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param projectId Project ID
         * 
         * @return builder
         * 
         */
        public Builder projectId(Integer projectId) {
            return projectId(Output.of(projectId));
        }

        /**
         * @param roles List of roles owned by members. See `roles` below.
         * 
         * @return builder
         * 
         */
        public Builder roles(@Nullable Output<List<ProjectMemberRoleArgs>> roles) {
            $.roles = roles;
            return this;
        }

        /**
         * @param roles List of roles owned by members. See `roles` below.
         * 
         * @return builder
         * 
         */
        public Builder roles(List<ProjectMemberRoleArgs> roles) {
            return roles(Output.of(roles));
        }

        /**
         * @param roles List of roles owned by members. See `roles` below.
         * 
         * @return builder
         * 
         */
        public Builder roles(ProjectMemberRoleArgs... roles) {
            return roles(List.of(roles));
        }

        /**
         * @param userId The user ID of the member.
         * 
         * @return builder
         * 
         */
        public Builder userId(Output<String> userId) {
            $.userId = userId;
            return this;
        }

        /**
         * @param userId The user ID of the member.
         * 
         * @return builder
         * 
         */
        public Builder userId(String userId) {
            return userId(Output.of(userId));
        }

        public ProjectMemberArgs build() {
            if ($.projectId == null) {
                throw new MissingRequiredPropertyException("ProjectMemberArgs", "projectId");
            }
            if ($.userId == null) {
                throw new MissingRequiredPropertyException("ProjectMemberArgs", "userId");
            }
            return $;
        }
    }

}
