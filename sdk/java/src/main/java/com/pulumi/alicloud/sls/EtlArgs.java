// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.sls;

import com.pulumi.alicloud.sls.inputs.EtlConfigurationArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class EtlArgs extends com.pulumi.resources.ResourceArgs {

    public static final EtlArgs Empty = new EtlArgs();

    /**
     * The ETL configuration. See `configuration` below.
     * 
     */
    @Import(name="configuration", required=true)
    private Output<EtlConfigurationArgs> configuration;

    /**
     * @return The ETL configuration. See `configuration` below.
     * 
     */
    public Output<EtlConfigurationArgs> configuration() {
        return this.configuration;
    }

    /**
     * Data Processing Task Description.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Data Processing Task Description.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Data processing task display name.
     * 
     */
    @Import(name="displayName", required=true)
    private Output<String> displayName;

    /**
     * @return Data processing task display name.
     * 
     */
    public Output<String> displayName() {
        return this.displayName;
    }

    /**
     * Unique identification of data processing task.
     * 
     */
    @Import(name="jobName", required=true)
    private Output<String> jobName;

    /**
     * @return Unique identification of data processing task.
     * 
     */
    public Output<String> jobName() {
        return this.jobName;
    }

    /**
     * Project Name.
     * 
     */
    @Import(name="project", required=true)
    private Output<String> project;

    /**
     * @return Project Name.
     * 
     */
    public Output<String> project() {
        return this.project;
    }

    private EtlArgs() {}

    private EtlArgs(EtlArgs $) {
        this.configuration = $.configuration;
        this.description = $.description;
        this.displayName = $.displayName;
        this.jobName = $.jobName;
        this.project = $.project;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(EtlArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private EtlArgs $;

        public Builder() {
            $ = new EtlArgs();
        }

        public Builder(EtlArgs defaults) {
            $ = new EtlArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param configuration The ETL configuration. See `configuration` below.
         * 
         * @return builder
         * 
         */
        public Builder configuration(Output<EtlConfigurationArgs> configuration) {
            $.configuration = configuration;
            return this;
        }

        /**
         * @param configuration The ETL configuration. See `configuration` below.
         * 
         * @return builder
         * 
         */
        public Builder configuration(EtlConfigurationArgs configuration) {
            return configuration(Output.of(configuration));
        }

        /**
         * @param description Data Processing Task Description.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Data Processing Task Description.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param displayName Data processing task display name.
         * 
         * @return builder
         * 
         */
        public Builder displayName(Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName Data processing task display name.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param jobName Unique identification of data processing task.
         * 
         * @return builder
         * 
         */
        public Builder jobName(Output<String> jobName) {
            $.jobName = jobName;
            return this;
        }

        /**
         * @param jobName Unique identification of data processing task.
         * 
         * @return builder
         * 
         */
        public Builder jobName(String jobName) {
            return jobName(Output.of(jobName));
        }

        /**
         * @param project Project Name.
         * 
         * @return builder
         * 
         */
        public Builder project(Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project Project Name.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        public EtlArgs build() {
            if ($.configuration == null) {
                throw new MissingRequiredPropertyException("EtlArgs", "configuration");
            }
            if ($.displayName == null) {
                throw new MissingRequiredPropertyException("EtlArgs", "displayName");
            }
            if ($.jobName == null) {
                throw new MissingRequiredPropertyException("EtlArgs", "jobName");
            }
            if ($.project == null) {
                throw new MissingRequiredPropertyException("EtlArgs", "project");
            }
            return $;
        }
    }

}
