// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.ecs.outputs;

import com.pulumi.alicloud.ecs.outputs.GetEcsKeyPairsPairInstance;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetEcsKeyPairsPair {
    /**
     * @return The fingerprint of the key pair.
     * 
     */
    private String fingerPrint;
    /**
     * @return The ID of the Key Pair.
     * 
     */
    private String id;
    /**
     * @return A list of ECS instances that has been bound this Key Pair.
     * 
     */
    private List<GetEcsKeyPairsPairInstance> instances;
    /**
     * @return The name of the key pair.
     * 
     */
    private String keyName;
    /**
     * @return The name of the Key Pair.
     * 
     */
    private String keyPairName;
    /**
     * @return The ID of the resource group.
     * 
     */
    private String resourceGroupId;
    /**
     * @return A mapping of tags to assign to the resource.
     * 
     */
    private Map<String,String> tags;

    private GetEcsKeyPairsPair() {}
    /**
     * @return The fingerprint of the key pair.
     * 
     */
    public String fingerPrint() {
        return this.fingerPrint;
    }
    /**
     * @return The ID of the Key Pair.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return A list of ECS instances that has been bound this Key Pair.
     * 
     */
    public List<GetEcsKeyPairsPairInstance> instances() {
        return this.instances;
    }
    /**
     * @return The name of the key pair.
     * 
     */
    public String keyName() {
        return this.keyName;
    }
    /**
     * @return The name of the Key Pair.
     * 
     */
    public String keyPairName() {
        return this.keyPairName;
    }
    /**
     * @return The ID of the resource group.
     * 
     */
    public String resourceGroupId() {
        return this.resourceGroupId;
    }
    /**
     * @return A mapping of tags to assign to the resource.
     * 
     */
    public Map<String,String> tags() {
        return this.tags;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetEcsKeyPairsPair defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String fingerPrint;
        private String id;
        private List<GetEcsKeyPairsPairInstance> instances;
        private String keyName;
        private String keyPairName;
        private String resourceGroupId;
        private Map<String,String> tags;
        public Builder() {}
        public Builder(GetEcsKeyPairsPair defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.fingerPrint = defaults.fingerPrint;
    	      this.id = defaults.id;
    	      this.instances = defaults.instances;
    	      this.keyName = defaults.keyName;
    	      this.keyPairName = defaults.keyPairName;
    	      this.resourceGroupId = defaults.resourceGroupId;
    	      this.tags = defaults.tags;
        }

        @CustomType.Setter
        public Builder fingerPrint(String fingerPrint) {
            if (fingerPrint == null) {
              throw new MissingRequiredPropertyException("GetEcsKeyPairsPair", "fingerPrint");
            }
            this.fingerPrint = fingerPrint;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetEcsKeyPairsPair", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder instances(List<GetEcsKeyPairsPairInstance> instances) {
            if (instances == null) {
              throw new MissingRequiredPropertyException("GetEcsKeyPairsPair", "instances");
            }
            this.instances = instances;
            return this;
        }
        public Builder instances(GetEcsKeyPairsPairInstance... instances) {
            return instances(List.of(instances));
        }
        @CustomType.Setter
        public Builder keyName(String keyName) {
            if (keyName == null) {
              throw new MissingRequiredPropertyException("GetEcsKeyPairsPair", "keyName");
            }
            this.keyName = keyName;
            return this;
        }
        @CustomType.Setter
        public Builder keyPairName(String keyPairName) {
            if (keyPairName == null) {
              throw new MissingRequiredPropertyException("GetEcsKeyPairsPair", "keyPairName");
            }
            this.keyPairName = keyPairName;
            return this;
        }
        @CustomType.Setter
        public Builder resourceGroupId(String resourceGroupId) {
            if (resourceGroupId == null) {
              throw new MissingRequiredPropertyException("GetEcsKeyPairsPair", "resourceGroupId");
            }
            this.resourceGroupId = resourceGroupId;
            return this;
        }
        @CustomType.Setter
        public Builder tags(Map<String,String> tags) {
            if (tags == null) {
              throw new MissingRequiredPropertyException("GetEcsKeyPairsPair", "tags");
            }
            this.tags = tags;
            return this;
        }
        public GetEcsKeyPairsPair build() {
            final var _resultValue = new GetEcsKeyPairsPair();
            _resultValue.fingerPrint = fingerPrint;
            _resultValue.id = id;
            _resultValue.instances = instances;
            _resultValue.keyName = keyName;
            _resultValue.keyPairName = keyPairName;
            _resultValue.resourceGroupId = resourceGroupId;
            _resultValue.tags = tags;
            return _resultValue;
        }
    }
}
