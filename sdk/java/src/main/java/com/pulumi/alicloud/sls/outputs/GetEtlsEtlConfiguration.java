// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.sls.outputs;

import com.pulumi.alicloud.sls.outputs.GetEtlsEtlConfigurationSink;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetEtlsEtlConfiguration {
    /**
     * @return Processing time start timestamp (accurate to the second). Enter 0 when the first log received from the source Logstore is consumed.
     * 
     */
    private Integer fromTime;
    /**
     * @return Data processing syntax type.
     * 
     */
    private String lang;
    /**
     * @return Source Logstore Name.
     * 
     */
    private String logstore;
    /**
     * @return Advanced parameter configuration.
     * 
     */
    private Map<String,String> parameters;
    /**
     * @return The ARN role that authorizes writing to the target Logstore.
     * 
     */
    private String roleArn;
    /**
     * @return Processing script.
     * 
     */
    private String script;
    /**
     * @return Processing result output target list.
     * 
     */
    private List<GetEtlsEtlConfigurationSink> sinks;
    /**
     * @return Processing time end timestamp (accurate to seconds). When continuous consumption is stopped manually, fill in 0.
     * 
     */
    private Integer toTime;

    private GetEtlsEtlConfiguration() {}
    /**
     * @return Processing time start timestamp (accurate to the second). Enter 0 when the first log received from the source Logstore is consumed.
     * 
     */
    public Integer fromTime() {
        return this.fromTime;
    }
    /**
     * @return Data processing syntax type.
     * 
     */
    public String lang() {
        return this.lang;
    }
    /**
     * @return Source Logstore Name.
     * 
     */
    public String logstore() {
        return this.logstore;
    }
    /**
     * @return Advanced parameter configuration.
     * 
     */
    public Map<String,String> parameters() {
        return this.parameters;
    }
    /**
     * @return The ARN role that authorizes writing to the target Logstore.
     * 
     */
    public String roleArn() {
        return this.roleArn;
    }
    /**
     * @return Processing script.
     * 
     */
    public String script() {
        return this.script;
    }
    /**
     * @return Processing result output target list.
     * 
     */
    public List<GetEtlsEtlConfigurationSink> sinks() {
        return this.sinks;
    }
    /**
     * @return Processing time end timestamp (accurate to seconds). When continuous consumption is stopped manually, fill in 0.
     * 
     */
    public Integer toTime() {
        return this.toTime;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetEtlsEtlConfiguration defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Integer fromTime;
        private String lang;
        private String logstore;
        private Map<String,String> parameters;
        private String roleArn;
        private String script;
        private List<GetEtlsEtlConfigurationSink> sinks;
        private Integer toTime;
        public Builder() {}
        public Builder(GetEtlsEtlConfiguration defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.fromTime = defaults.fromTime;
    	      this.lang = defaults.lang;
    	      this.logstore = defaults.logstore;
    	      this.parameters = defaults.parameters;
    	      this.roleArn = defaults.roleArn;
    	      this.script = defaults.script;
    	      this.sinks = defaults.sinks;
    	      this.toTime = defaults.toTime;
        }

        @CustomType.Setter
        public Builder fromTime(Integer fromTime) {
            if (fromTime == null) {
              throw new MissingRequiredPropertyException("GetEtlsEtlConfiguration", "fromTime");
            }
            this.fromTime = fromTime;
            return this;
        }
        @CustomType.Setter
        public Builder lang(String lang) {
            if (lang == null) {
              throw new MissingRequiredPropertyException("GetEtlsEtlConfiguration", "lang");
            }
            this.lang = lang;
            return this;
        }
        @CustomType.Setter
        public Builder logstore(String logstore) {
            if (logstore == null) {
              throw new MissingRequiredPropertyException("GetEtlsEtlConfiguration", "logstore");
            }
            this.logstore = logstore;
            return this;
        }
        @CustomType.Setter
        public Builder parameters(Map<String,String> parameters) {
            if (parameters == null) {
              throw new MissingRequiredPropertyException("GetEtlsEtlConfiguration", "parameters");
            }
            this.parameters = parameters;
            return this;
        }
        @CustomType.Setter
        public Builder roleArn(String roleArn) {
            if (roleArn == null) {
              throw new MissingRequiredPropertyException("GetEtlsEtlConfiguration", "roleArn");
            }
            this.roleArn = roleArn;
            return this;
        }
        @CustomType.Setter
        public Builder script(String script) {
            if (script == null) {
              throw new MissingRequiredPropertyException("GetEtlsEtlConfiguration", "script");
            }
            this.script = script;
            return this;
        }
        @CustomType.Setter
        public Builder sinks(List<GetEtlsEtlConfigurationSink> sinks) {
            if (sinks == null) {
              throw new MissingRequiredPropertyException("GetEtlsEtlConfiguration", "sinks");
            }
            this.sinks = sinks;
            return this;
        }
        public Builder sinks(GetEtlsEtlConfigurationSink... sinks) {
            return sinks(List.of(sinks));
        }
        @CustomType.Setter
        public Builder toTime(Integer toTime) {
            if (toTime == null) {
              throw new MissingRequiredPropertyException("GetEtlsEtlConfiguration", "toTime");
            }
            this.toTime = toTime;
            return this;
        }
        public GetEtlsEtlConfiguration build() {
            final var _resultValue = new GetEtlsEtlConfiguration();
            _resultValue.fromTime = fromTime;
            _resultValue.lang = lang;
            _resultValue.logstore = logstore;
            _resultValue.parameters = parameters;
            _resultValue.roleArn = roleArn;
            _resultValue.script = script;
            _resultValue.sinks = sinks;
            _resultValue.toTime = toTime;
            return _resultValue;
        }
    }
}
