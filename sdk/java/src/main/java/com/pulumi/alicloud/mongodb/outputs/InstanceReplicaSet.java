// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.mongodb.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class InstanceReplicaSet {
    /**
     * @return The connection address of the node.
     * 
     */
    private @Nullable String connectionDomain;
    /**
     * @return The connection port of the node.
     * 
     */
    private @Nullable String connectionPort;
    /**
     * @return The network type of the instance. Valid values:`Classic` or `VPC`. Default value: `Classic`.
     * 
     */
    private @Nullable String networkType;
    /**
     * @return The role of the node. Valid values: `Primary`,`Secondary`.
     * 
     */
    private @Nullable String replicaSetRole;
    /**
     * @return VPC instance ID.
     * 
     */
    private @Nullable String vpcCloudInstanceId;
    /**
     * @return The ID of the VPC. &gt; **NOTE:** This parameter is valid only when NetworkType is set to VPC.
     * 
     */
    private @Nullable String vpcId;
    /**
     * @return The virtual switch ID to launch DB instances in one VPC.
     * 
     */
    private @Nullable String vswitchId;

    private InstanceReplicaSet() {}
    /**
     * @return The connection address of the node.
     * 
     */
    public Optional<String> connectionDomain() {
        return Optional.ofNullable(this.connectionDomain);
    }
    /**
     * @return The connection port of the node.
     * 
     */
    public Optional<String> connectionPort() {
        return Optional.ofNullable(this.connectionPort);
    }
    /**
     * @return The network type of the instance. Valid values:`Classic` or `VPC`. Default value: `Classic`.
     * 
     */
    public Optional<String> networkType() {
        return Optional.ofNullable(this.networkType);
    }
    /**
     * @return The role of the node. Valid values: `Primary`,`Secondary`.
     * 
     */
    public Optional<String> replicaSetRole() {
        return Optional.ofNullable(this.replicaSetRole);
    }
    /**
     * @return VPC instance ID.
     * 
     */
    public Optional<String> vpcCloudInstanceId() {
        return Optional.ofNullable(this.vpcCloudInstanceId);
    }
    /**
     * @return The ID of the VPC. &gt; **NOTE:** This parameter is valid only when NetworkType is set to VPC.
     * 
     */
    public Optional<String> vpcId() {
        return Optional.ofNullable(this.vpcId);
    }
    /**
     * @return The virtual switch ID to launch DB instances in one VPC.
     * 
     */
    public Optional<String> vswitchId() {
        return Optional.ofNullable(this.vswitchId);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(InstanceReplicaSet defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String connectionDomain;
        private @Nullable String connectionPort;
        private @Nullable String networkType;
        private @Nullable String replicaSetRole;
        private @Nullable String vpcCloudInstanceId;
        private @Nullable String vpcId;
        private @Nullable String vswitchId;
        public Builder() {}
        public Builder(InstanceReplicaSet defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.connectionDomain = defaults.connectionDomain;
    	      this.connectionPort = defaults.connectionPort;
    	      this.networkType = defaults.networkType;
    	      this.replicaSetRole = defaults.replicaSetRole;
    	      this.vpcCloudInstanceId = defaults.vpcCloudInstanceId;
    	      this.vpcId = defaults.vpcId;
    	      this.vswitchId = defaults.vswitchId;
        }

        @CustomType.Setter
        public Builder connectionDomain(@Nullable String connectionDomain) {
            this.connectionDomain = connectionDomain;
            return this;
        }
        @CustomType.Setter
        public Builder connectionPort(@Nullable String connectionPort) {
            this.connectionPort = connectionPort;
            return this;
        }
        @CustomType.Setter
        public Builder networkType(@Nullable String networkType) {
            this.networkType = networkType;
            return this;
        }
        @CustomType.Setter
        public Builder replicaSetRole(@Nullable String replicaSetRole) {
            this.replicaSetRole = replicaSetRole;
            return this;
        }
        @CustomType.Setter
        public Builder vpcCloudInstanceId(@Nullable String vpcCloudInstanceId) {
            this.vpcCloudInstanceId = vpcCloudInstanceId;
            return this;
        }
        @CustomType.Setter
        public Builder vpcId(@Nullable String vpcId) {
            this.vpcId = vpcId;
            return this;
        }
        @CustomType.Setter
        public Builder vswitchId(@Nullable String vswitchId) {
            this.vswitchId = vswitchId;
            return this;
        }
        public InstanceReplicaSet build() {
            final var o = new InstanceReplicaSet();
            o.connectionDomain = connectionDomain;
            o.connectionPort = connectionPort;
            o.networkType = networkType;
            o.replicaSetRole = replicaSetRole;
            o.vpcCloudInstanceId = vpcCloudInstanceId;
            o.vpcId = vpcId;
            o.vswitchId = vswitchId;
            return o;
        }
    }
}
