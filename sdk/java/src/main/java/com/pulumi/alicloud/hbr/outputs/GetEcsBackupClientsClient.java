// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.hbr.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetEcsBackupClientsClient {
    /**
     * @return The system architecture of client, only the ECS File Backup Client is available. Valid values: `AMD64` , `386`.
     * 
     */
    private String archType;
    /**
     * @return Client protected status. Valid values: `UNPROTECTED`, `PROTECTED`.
     * 
     */
    private String backupStatus;
    /**
     * @return The type of client. Valid values: `ECS_CLIENT` (ECS File Backup Client).
     * 
     */
    private String clientType;
    /**
     * @return The version of client.
     * 
     */
    private String clientVersion;
    /**
     * @return The creation time of client. Unix time in seconds.
     * 
     */
    private String createTime;
    /**
     * @return The data plane access point type. Valid Values: `PUBLIC`, `VPC`, `CLASSIC`.
     * 
     */
    private String dataNetworkType;
    /**
     * @return The data plane proxy settings. Valid Values: `DISABLE`, `USE_CONTROL_PROXY`, `CUSTOM`.
     * 
     */
    private String dataProxySetting;
    /**
     * @return The first ID of the resource.
     * 
     */
    private String ecsBackupClientId;
    /**
     * @return The hostname of ECS instance.
     * 
     */
    private String hostname;
    /**
     * @return The ID of the Ecs Backup Client.
     * 
     */
    private String id;
    /**
     * @return The ID of ECS instance. When the client type is ECS file backup client, it indicates the ID of ECS instance. When the client type is a local file backup client, it is a hardware fingerprint generated based on system information.
     * 
     */
    private String instanceId;
    /**
     * @return The name of ECS instance.
     * 
     */
    private String instanceName;
    /**
     * @return The last heartbeat time of client. Unix Time Seconds.
     * 
     */
    private String lastHeartBeatTime;
    /**
     * @return The latest version of client.
     * 
     */
    private String maxClientVersion;
    /**
     * @return The number of CPU cores used by a single backup task, 0 means no restrictions.
     * 
     */
    private String maxCpuCore;
    /**
     * @return The number of concurrent jobs for a single backup task, 0 means no restrictions.
     * 
     */
    private String maxWorker;
    /**
     * @return The operating system type of client, only the ECS File Backup Client is available. Valid values: `windows`, `linux`.
     * 
     */
    private String osType;
    /**
     * @return Intranet IP address of the instance, only available for ECS file backup client.
     * 
     */
    private String privateIpv4;
    /**
     * @return Custom data plane proxy server host address.
     * 
     */
    private String proxyHost;
    /**
     * @return The password of custom data plane proxy server.
     * 
     */
    private String proxyPassword;
    /**
     * @return Custom data plane proxy server host port.
     * 
     */
    private String proxyPort;
    /**
     * @return The username of custom data plane proxy server.
     * 
     */
    private String proxyUser;
    /**
     * @return The status of the resource.
     * 
     */
    private String status;
    /**
     * @return The update time of client. Unix Time Seconds.
     * 
     */
    private String updatedTime;
    /**
     * @return Indicates whether to use the HTTPS protocol. Valid values: `true`, `false`.
     * 
     */
    private Boolean useHttps;
    /**
     * @return The ID of Zone.
     * 
     */
    private String zoneId;

    private GetEcsBackupClientsClient() {}
    /**
     * @return The system architecture of client, only the ECS File Backup Client is available. Valid values: `AMD64` , `386`.
     * 
     */
    public String archType() {
        return this.archType;
    }
    /**
     * @return Client protected status. Valid values: `UNPROTECTED`, `PROTECTED`.
     * 
     */
    public String backupStatus() {
        return this.backupStatus;
    }
    /**
     * @return The type of client. Valid values: `ECS_CLIENT` (ECS File Backup Client).
     * 
     */
    public String clientType() {
        return this.clientType;
    }
    /**
     * @return The version of client.
     * 
     */
    public String clientVersion() {
        return this.clientVersion;
    }
    /**
     * @return The creation time of client. Unix time in seconds.
     * 
     */
    public String createTime() {
        return this.createTime;
    }
    /**
     * @return The data plane access point type. Valid Values: `PUBLIC`, `VPC`, `CLASSIC`.
     * 
     */
    public String dataNetworkType() {
        return this.dataNetworkType;
    }
    /**
     * @return The data plane proxy settings. Valid Values: `DISABLE`, `USE_CONTROL_PROXY`, `CUSTOM`.
     * 
     */
    public String dataProxySetting() {
        return this.dataProxySetting;
    }
    /**
     * @return The first ID of the resource.
     * 
     */
    public String ecsBackupClientId() {
        return this.ecsBackupClientId;
    }
    /**
     * @return The hostname of ECS instance.
     * 
     */
    public String hostname() {
        return this.hostname;
    }
    /**
     * @return The ID of the Ecs Backup Client.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The ID of ECS instance. When the client type is ECS file backup client, it indicates the ID of ECS instance. When the client type is a local file backup client, it is a hardware fingerprint generated based on system information.
     * 
     */
    public String instanceId() {
        return this.instanceId;
    }
    /**
     * @return The name of ECS instance.
     * 
     */
    public String instanceName() {
        return this.instanceName;
    }
    /**
     * @return The last heartbeat time of client. Unix Time Seconds.
     * 
     */
    public String lastHeartBeatTime() {
        return this.lastHeartBeatTime;
    }
    /**
     * @return The latest version of client.
     * 
     */
    public String maxClientVersion() {
        return this.maxClientVersion;
    }
    /**
     * @return The number of CPU cores used by a single backup task, 0 means no restrictions.
     * 
     */
    public String maxCpuCore() {
        return this.maxCpuCore;
    }
    /**
     * @return The number of concurrent jobs for a single backup task, 0 means no restrictions.
     * 
     */
    public String maxWorker() {
        return this.maxWorker;
    }
    /**
     * @return The operating system type of client, only the ECS File Backup Client is available. Valid values: `windows`, `linux`.
     * 
     */
    public String osType() {
        return this.osType;
    }
    /**
     * @return Intranet IP address of the instance, only available for ECS file backup client.
     * 
     */
    public String privateIpv4() {
        return this.privateIpv4;
    }
    /**
     * @return Custom data plane proxy server host address.
     * 
     */
    public String proxyHost() {
        return this.proxyHost;
    }
    /**
     * @return The password of custom data plane proxy server.
     * 
     */
    public String proxyPassword() {
        return this.proxyPassword;
    }
    /**
     * @return Custom data plane proxy server host port.
     * 
     */
    public String proxyPort() {
        return this.proxyPort;
    }
    /**
     * @return The username of custom data plane proxy server.
     * 
     */
    public String proxyUser() {
        return this.proxyUser;
    }
    /**
     * @return The status of the resource.
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return The update time of client. Unix Time Seconds.
     * 
     */
    public String updatedTime() {
        return this.updatedTime;
    }
    /**
     * @return Indicates whether to use the HTTPS protocol. Valid values: `true`, `false`.
     * 
     */
    public Boolean useHttps() {
        return this.useHttps;
    }
    /**
     * @return The ID of Zone.
     * 
     */
    public String zoneId() {
        return this.zoneId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetEcsBackupClientsClient defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String archType;
        private String backupStatus;
        private String clientType;
        private String clientVersion;
        private String createTime;
        private String dataNetworkType;
        private String dataProxySetting;
        private String ecsBackupClientId;
        private String hostname;
        private String id;
        private String instanceId;
        private String instanceName;
        private String lastHeartBeatTime;
        private String maxClientVersion;
        private String maxCpuCore;
        private String maxWorker;
        private String osType;
        private String privateIpv4;
        private String proxyHost;
        private String proxyPassword;
        private String proxyPort;
        private String proxyUser;
        private String status;
        private String updatedTime;
        private Boolean useHttps;
        private String zoneId;
        public Builder() {}
        public Builder(GetEcsBackupClientsClient defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.archType = defaults.archType;
    	      this.backupStatus = defaults.backupStatus;
    	      this.clientType = defaults.clientType;
    	      this.clientVersion = defaults.clientVersion;
    	      this.createTime = defaults.createTime;
    	      this.dataNetworkType = defaults.dataNetworkType;
    	      this.dataProxySetting = defaults.dataProxySetting;
    	      this.ecsBackupClientId = defaults.ecsBackupClientId;
    	      this.hostname = defaults.hostname;
    	      this.id = defaults.id;
    	      this.instanceId = defaults.instanceId;
    	      this.instanceName = defaults.instanceName;
    	      this.lastHeartBeatTime = defaults.lastHeartBeatTime;
    	      this.maxClientVersion = defaults.maxClientVersion;
    	      this.maxCpuCore = defaults.maxCpuCore;
    	      this.maxWorker = defaults.maxWorker;
    	      this.osType = defaults.osType;
    	      this.privateIpv4 = defaults.privateIpv4;
    	      this.proxyHost = defaults.proxyHost;
    	      this.proxyPassword = defaults.proxyPassword;
    	      this.proxyPort = defaults.proxyPort;
    	      this.proxyUser = defaults.proxyUser;
    	      this.status = defaults.status;
    	      this.updatedTime = defaults.updatedTime;
    	      this.useHttps = defaults.useHttps;
    	      this.zoneId = defaults.zoneId;
        }

        @CustomType.Setter
        public Builder archType(String archType) {
            if (archType == null) {
              throw new MissingRequiredPropertyException("GetEcsBackupClientsClient", "archType");
            }
            this.archType = archType;
            return this;
        }
        @CustomType.Setter
        public Builder backupStatus(String backupStatus) {
            if (backupStatus == null) {
              throw new MissingRequiredPropertyException("GetEcsBackupClientsClient", "backupStatus");
            }
            this.backupStatus = backupStatus;
            return this;
        }
        @CustomType.Setter
        public Builder clientType(String clientType) {
            if (clientType == null) {
              throw new MissingRequiredPropertyException("GetEcsBackupClientsClient", "clientType");
            }
            this.clientType = clientType;
            return this;
        }
        @CustomType.Setter
        public Builder clientVersion(String clientVersion) {
            if (clientVersion == null) {
              throw new MissingRequiredPropertyException("GetEcsBackupClientsClient", "clientVersion");
            }
            this.clientVersion = clientVersion;
            return this;
        }
        @CustomType.Setter
        public Builder createTime(String createTime) {
            if (createTime == null) {
              throw new MissingRequiredPropertyException("GetEcsBackupClientsClient", "createTime");
            }
            this.createTime = createTime;
            return this;
        }
        @CustomType.Setter
        public Builder dataNetworkType(String dataNetworkType) {
            if (dataNetworkType == null) {
              throw new MissingRequiredPropertyException("GetEcsBackupClientsClient", "dataNetworkType");
            }
            this.dataNetworkType = dataNetworkType;
            return this;
        }
        @CustomType.Setter
        public Builder dataProxySetting(String dataProxySetting) {
            if (dataProxySetting == null) {
              throw new MissingRequiredPropertyException("GetEcsBackupClientsClient", "dataProxySetting");
            }
            this.dataProxySetting = dataProxySetting;
            return this;
        }
        @CustomType.Setter
        public Builder ecsBackupClientId(String ecsBackupClientId) {
            if (ecsBackupClientId == null) {
              throw new MissingRequiredPropertyException("GetEcsBackupClientsClient", "ecsBackupClientId");
            }
            this.ecsBackupClientId = ecsBackupClientId;
            return this;
        }
        @CustomType.Setter
        public Builder hostname(String hostname) {
            if (hostname == null) {
              throw new MissingRequiredPropertyException("GetEcsBackupClientsClient", "hostname");
            }
            this.hostname = hostname;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetEcsBackupClientsClient", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder instanceId(String instanceId) {
            if (instanceId == null) {
              throw new MissingRequiredPropertyException("GetEcsBackupClientsClient", "instanceId");
            }
            this.instanceId = instanceId;
            return this;
        }
        @CustomType.Setter
        public Builder instanceName(String instanceName) {
            if (instanceName == null) {
              throw new MissingRequiredPropertyException("GetEcsBackupClientsClient", "instanceName");
            }
            this.instanceName = instanceName;
            return this;
        }
        @CustomType.Setter
        public Builder lastHeartBeatTime(String lastHeartBeatTime) {
            if (lastHeartBeatTime == null) {
              throw new MissingRequiredPropertyException("GetEcsBackupClientsClient", "lastHeartBeatTime");
            }
            this.lastHeartBeatTime = lastHeartBeatTime;
            return this;
        }
        @CustomType.Setter
        public Builder maxClientVersion(String maxClientVersion) {
            if (maxClientVersion == null) {
              throw new MissingRequiredPropertyException("GetEcsBackupClientsClient", "maxClientVersion");
            }
            this.maxClientVersion = maxClientVersion;
            return this;
        }
        @CustomType.Setter
        public Builder maxCpuCore(String maxCpuCore) {
            if (maxCpuCore == null) {
              throw new MissingRequiredPropertyException("GetEcsBackupClientsClient", "maxCpuCore");
            }
            this.maxCpuCore = maxCpuCore;
            return this;
        }
        @CustomType.Setter
        public Builder maxWorker(String maxWorker) {
            if (maxWorker == null) {
              throw new MissingRequiredPropertyException("GetEcsBackupClientsClient", "maxWorker");
            }
            this.maxWorker = maxWorker;
            return this;
        }
        @CustomType.Setter
        public Builder osType(String osType) {
            if (osType == null) {
              throw new MissingRequiredPropertyException("GetEcsBackupClientsClient", "osType");
            }
            this.osType = osType;
            return this;
        }
        @CustomType.Setter
        public Builder privateIpv4(String privateIpv4) {
            if (privateIpv4 == null) {
              throw new MissingRequiredPropertyException("GetEcsBackupClientsClient", "privateIpv4");
            }
            this.privateIpv4 = privateIpv4;
            return this;
        }
        @CustomType.Setter
        public Builder proxyHost(String proxyHost) {
            if (proxyHost == null) {
              throw new MissingRequiredPropertyException("GetEcsBackupClientsClient", "proxyHost");
            }
            this.proxyHost = proxyHost;
            return this;
        }
        @CustomType.Setter
        public Builder proxyPassword(String proxyPassword) {
            if (proxyPassword == null) {
              throw new MissingRequiredPropertyException("GetEcsBackupClientsClient", "proxyPassword");
            }
            this.proxyPassword = proxyPassword;
            return this;
        }
        @CustomType.Setter
        public Builder proxyPort(String proxyPort) {
            if (proxyPort == null) {
              throw new MissingRequiredPropertyException("GetEcsBackupClientsClient", "proxyPort");
            }
            this.proxyPort = proxyPort;
            return this;
        }
        @CustomType.Setter
        public Builder proxyUser(String proxyUser) {
            if (proxyUser == null) {
              throw new MissingRequiredPropertyException("GetEcsBackupClientsClient", "proxyUser");
            }
            this.proxyUser = proxyUser;
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            if (status == null) {
              throw new MissingRequiredPropertyException("GetEcsBackupClientsClient", "status");
            }
            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder updatedTime(String updatedTime) {
            if (updatedTime == null) {
              throw new MissingRequiredPropertyException("GetEcsBackupClientsClient", "updatedTime");
            }
            this.updatedTime = updatedTime;
            return this;
        }
        @CustomType.Setter
        public Builder useHttps(Boolean useHttps) {
            if (useHttps == null) {
              throw new MissingRequiredPropertyException("GetEcsBackupClientsClient", "useHttps");
            }
            this.useHttps = useHttps;
            return this;
        }
        @CustomType.Setter
        public Builder zoneId(String zoneId) {
            if (zoneId == null) {
              throw new MissingRequiredPropertyException("GetEcsBackupClientsClient", "zoneId");
            }
            this.zoneId = zoneId;
            return this;
        }
        public GetEcsBackupClientsClient build() {
            final var _resultValue = new GetEcsBackupClientsClient();
            _resultValue.archType = archType;
            _resultValue.backupStatus = backupStatus;
            _resultValue.clientType = clientType;
            _resultValue.clientVersion = clientVersion;
            _resultValue.createTime = createTime;
            _resultValue.dataNetworkType = dataNetworkType;
            _resultValue.dataProxySetting = dataProxySetting;
            _resultValue.ecsBackupClientId = ecsBackupClientId;
            _resultValue.hostname = hostname;
            _resultValue.id = id;
            _resultValue.instanceId = instanceId;
            _resultValue.instanceName = instanceName;
            _resultValue.lastHeartBeatTime = lastHeartBeatTime;
            _resultValue.maxClientVersion = maxClientVersion;
            _resultValue.maxCpuCore = maxCpuCore;
            _resultValue.maxWorker = maxWorker;
            _resultValue.osType = osType;
            _resultValue.privateIpv4 = privateIpv4;
            _resultValue.proxyHost = proxyHost;
            _resultValue.proxyPassword = proxyPassword;
            _resultValue.proxyPort = proxyPort;
            _resultValue.proxyUser = proxyUser;
            _resultValue.status = status;
            _resultValue.updatedTime = updatedTime;
            _resultValue.useHttps = useHttps;
            _resultValue.zoneId = zoneId;
            return _resultValue;
        }
    }
}
