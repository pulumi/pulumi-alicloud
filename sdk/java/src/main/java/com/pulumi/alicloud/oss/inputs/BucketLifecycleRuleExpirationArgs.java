// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.oss.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class BucketLifecycleRuleExpirationArgs extends com.pulumi.resources.ResourceArgs {

    public static final BucketLifecycleRuleExpirationArgs Empty = new BucketLifecycleRuleExpirationArgs();

    /**
     * Specifies the time before which the rules take effect. The date must conform to the ISO8601 format and always be UTC 00:00. For example: 2002-10-11T00:00:00.000Z indicates that parts created before 2002-10-11T00:00:00.000Z are deleted, and parts created after this time (including this time) are not deleted.
     * 
     */
    @Import(name="createdBeforeDate")
    private @Nullable Output<String> createdBeforeDate;

    /**
     * @return Specifies the time before which the rules take effect. The date must conform to the ISO8601 format and always be UTC 00:00. For example: 2002-10-11T00:00:00.000Z indicates that parts created before 2002-10-11T00:00:00.000Z are deleted, and parts created after this time (including this time) are not deleted.
     * 
     */
    public Optional<Output<String>> createdBeforeDate() {
        return Optional.ofNullable(this.createdBeforeDate);
    }

    /**
     * Specifies the date after which you want the corresponding action to take effect. The value obeys ISO8601 format like `2017-03-09`.
     * 
     */
    @Import(name="date")
    private @Nullable Output<String> date;

    /**
     * @return Specifies the date after which you want the corresponding action to take effect. The value obeys ISO8601 format like `2017-03-09`.
     * 
     */
    public Optional<Output<String>> date() {
        return Optional.ofNullable(this.date);
    }

    /**
     * Specifies the number of days noncurrent object versions transition.
     * 
     */
    @Import(name="days")
    private @Nullable Output<Integer> days;

    /**
     * @return Specifies the number of days noncurrent object versions transition.
     * 
     */
    public Optional<Output<Integer>> days() {
        return Optional.ofNullable(this.days);
    }

    /**
     * On a versioned bucket (versioning-enabled or versioning-suspended bucket), you can add this element in the lifecycle configuration to direct OSS to delete expired object delete markers. This cannot be specified with Days, Date or CreatedBeforeDate in a Lifecycle Expiration Policy.
     * 
     * `NOTE`: One and only one of &#34;date&#34;, &#34;days&#34;, &#34;created_before_date&#34; and &#34;expired_object_delete_marker&#34; can be specified in one expiration configuration.
     * 
     */
    @Import(name="expiredObjectDeleteMarker")
    private @Nullable Output<Boolean> expiredObjectDeleteMarker;

    /**
     * @return On a versioned bucket (versioning-enabled or versioning-suspended bucket), you can add this element in the lifecycle configuration to direct OSS to delete expired object delete markers. This cannot be specified with Days, Date or CreatedBeforeDate in a Lifecycle Expiration Policy.
     * 
     * `NOTE`: One and only one of &#34;date&#34;, &#34;days&#34;, &#34;created_before_date&#34; and &#34;expired_object_delete_marker&#34; can be specified in one expiration configuration.
     * 
     */
    public Optional<Output<Boolean>> expiredObjectDeleteMarker() {
        return Optional.ofNullable(this.expiredObjectDeleteMarker);
    }

    private BucketLifecycleRuleExpirationArgs() {}

    private BucketLifecycleRuleExpirationArgs(BucketLifecycleRuleExpirationArgs $) {
        this.createdBeforeDate = $.createdBeforeDate;
        this.date = $.date;
        this.days = $.days;
        this.expiredObjectDeleteMarker = $.expiredObjectDeleteMarker;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BucketLifecycleRuleExpirationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BucketLifecycleRuleExpirationArgs $;

        public Builder() {
            $ = new BucketLifecycleRuleExpirationArgs();
        }

        public Builder(BucketLifecycleRuleExpirationArgs defaults) {
            $ = new BucketLifecycleRuleExpirationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param createdBeforeDate Specifies the time before which the rules take effect. The date must conform to the ISO8601 format and always be UTC 00:00. For example: 2002-10-11T00:00:00.000Z indicates that parts created before 2002-10-11T00:00:00.000Z are deleted, and parts created after this time (including this time) are not deleted.
         * 
         * @return builder
         * 
         */
        public Builder createdBeforeDate(@Nullable Output<String> createdBeforeDate) {
            $.createdBeforeDate = createdBeforeDate;
            return this;
        }

        /**
         * @param createdBeforeDate Specifies the time before which the rules take effect. The date must conform to the ISO8601 format and always be UTC 00:00. For example: 2002-10-11T00:00:00.000Z indicates that parts created before 2002-10-11T00:00:00.000Z are deleted, and parts created after this time (including this time) are not deleted.
         * 
         * @return builder
         * 
         */
        public Builder createdBeforeDate(String createdBeforeDate) {
            return createdBeforeDate(Output.of(createdBeforeDate));
        }

        /**
         * @param date Specifies the date after which you want the corresponding action to take effect. The value obeys ISO8601 format like `2017-03-09`.
         * 
         * @return builder
         * 
         */
        public Builder date(@Nullable Output<String> date) {
            $.date = date;
            return this;
        }

        /**
         * @param date Specifies the date after which you want the corresponding action to take effect. The value obeys ISO8601 format like `2017-03-09`.
         * 
         * @return builder
         * 
         */
        public Builder date(String date) {
            return date(Output.of(date));
        }

        /**
         * @param days Specifies the number of days noncurrent object versions transition.
         * 
         * @return builder
         * 
         */
        public Builder days(@Nullable Output<Integer> days) {
            $.days = days;
            return this;
        }

        /**
         * @param days Specifies the number of days noncurrent object versions transition.
         * 
         * @return builder
         * 
         */
        public Builder days(Integer days) {
            return days(Output.of(days));
        }

        /**
         * @param expiredObjectDeleteMarker On a versioned bucket (versioning-enabled or versioning-suspended bucket), you can add this element in the lifecycle configuration to direct OSS to delete expired object delete markers. This cannot be specified with Days, Date or CreatedBeforeDate in a Lifecycle Expiration Policy.
         * 
         * `NOTE`: One and only one of &#34;date&#34;, &#34;days&#34;, &#34;created_before_date&#34; and &#34;expired_object_delete_marker&#34; can be specified in one expiration configuration.
         * 
         * @return builder
         * 
         */
        public Builder expiredObjectDeleteMarker(@Nullable Output<Boolean> expiredObjectDeleteMarker) {
            $.expiredObjectDeleteMarker = expiredObjectDeleteMarker;
            return this;
        }

        /**
         * @param expiredObjectDeleteMarker On a versioned bucket (versioning-enabled or versioning-suspended bucket), you can add this element in the lifecycle configuration to direct OSS to delete expired object delete markers. This cannot be specified with Days, Date or CreatedBeforeDate in a Lifecycle Expiration Policy.
         * 
         * `NOTE`: One and only one of &#34;date&#34;, &#34;days&#34;, &#34;created_before_date&#34; and &#34;expired_object_delete_marker&#34; can be specified in one expiration configuration.
         * 
         * @return builder
         * 
         */
        public Builder expiredObjectDeleteMarker(Boolean expiredObjectDeleteMarker) {
            return expiredObjectDeleteMarker(Output.of(expiredObjectDeleteMarker));
        }

        public BucketLifecycleRuleExpirationArgs build() {
            return $;
        }
    }

}
