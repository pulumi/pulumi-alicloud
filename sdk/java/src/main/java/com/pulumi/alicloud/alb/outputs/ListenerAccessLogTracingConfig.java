// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.alb.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ListenerAccessLogTracingConfig {
    /**
     * @return Xtrace Function. Valid values: `true`, `false`. Default Value: `false`.
     * 
     * &gt; **NOTE:**  Only Instances outside the Security Group to Access the Log Switch `accesslogenabled` Open, in Order to Set This Parameter to the value `true`.
     * 
     */
    private Boolean tracingEnabled;
    /**
     * @return Xtrace Sampling Rate. Value: 1~10000. `tracingenabled` valued True When Effective.
     * 
     */
    private @Nullable Integer tracingSample;
    /**
     * @return Xtrace Type Value Is `Zipkin`.
     * 
     * &gt; **NOTE:**  `tracingenabled` valued True When Effective.
     * 
     */
    private @Nullable String tracingType;

    private ListenerAccessLogTracingConfig() {}
    /**
     * @return Xtrace Function. Valid values: `true`, `false`. Default Value: `false`.
     * 
     * &gt; **NOTE:**  Only Instances outside the Security Group to Access the Log Switch `accesslogenabled` Open, in Order to Set This Parameter to the value `true`.
     * 
     */
    public Boolean tracingEnabled() {
        return this.tracingEnabled;
    }
    /**
     * @return Xtrace Sampling Rate. Value: 1~10000. `tracingenabled` valued True When Effective.
     * 
     */
    public Optional<Integer> tracingSample() {
        return Optional.ofNullable(this.tracingSample);
    }
    /**
     * @return Xtrace Type Value Is `Zipkin`.
     * 
     * &gt; **NOTE:**  `tracingenabled` valued True When Effective.
     * 
     */
    public Optional<String> tracingType() {
        return Optional.ofNullable(this.tracingType);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ListenerAccessLogTracingConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean tracingEnabled;
        private @Nullable Integer tracingSample;
        private @Nullable String tracingType;
        public Builder() {}
        public Builder(ListenerAccessLogTracingConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.tracingEnabled = defaults.tracingEnabled;
    	      this.tracingSample = defaults.tracingSample;
    	      this.tracingType = defaults.tracingType;
        }

        @CustomType.Setter
        public Builder tracingEnabled(Boolean tracingEnabled) {
            if (tracingEnabled == null) {
              throw new MissingRequiredPropertyException("ListenerAccessLogTracingConfig", "tracingEnabled");
            }
            this.tracingEnabled = tracingEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder tracingSample(@Nullable Integer tracingSample) {

            this.tracingSample = tracingSample;
            return this;
        }
        @CustomType.Setter
        public Builder tracingType(@Nullable String tracingType) {

            this.tracingType = tracingType;
            return this;
        }
        public ListenerAccessLogTracingConfig build() {
            final var _resultValue = new ListenerAccessLogTracingConfig();
            _resultValue.tracingEnabled = tracingEnabled;
            _resultValue.tracingSample = tracingSample;
            _resultValue.tracingType = tracingType;
            return _resultValue;
        }
    }
}
