// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.emrv2.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ClusterApplicationConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final ClusterApplicationConfigArgs Empty = new ClusterApplicationConfigArgs();

    /**
     * The application name of EMR cluster which has installed.
     * 
     */
    @Import(name="applicationName", required=true)
    private Output<String> applicationName;

    /**
     * @return The application name of EMR cluster which has installed.
     * 
     */
    public Output<String> applicationName() {
        return this.applicationName;
    }

    /**
     * The configuration description of application installed.
     * 
     */
    @Import(name="configDescription")
    private @Nullable Output<String> configDescription;

    /**
     * @return The configuration description of application installed.
     * 
     */
    public Optional<Output<String>> configDescription() {
        return Optional.ofNullable(this.configDescription);
    }

    /**
     * The configuration file name of application installed.
     * 
     */
    @Import(name="configFileName", required=true)
    private Output<String> configFileName;

    /**
     * @return The configuration file name of application installed.
     * 
     */
    public Output<String> configFileName() {
        return this.configFileName;
    }

    /**
     * The configuration item key of application installed.
     * 
     */
    @Import(name="configItemKey", required=true)
    private Output<String> configItemKey;

    /**
     * @return The configuration item key of application installed.
     * 
     */
    public Output<String> configItemKey() {
        return this.configItemKey;
    }

    /**
     * The configuration item value of application installed.
     * 
     */
    @Import(name="configItemValue", required=true)
    private Output<String> configItemValue;

    /**
     * @return The configuration item value of application installed.
     * 
     */
    public Output<String> configItemValue() {
        return this.configItemValue;
    }

    /**
     * The configuration scope of emr cluster. Supported value: CLUSTER or NODEGROUP.
     * 
     */
    @Import(name="configScope")
    private @Nullable Output<String> configScope;

    /**
     * @return The configuration scope of emr cluster. Supported value: CLUSTER or NODEGROUP.
     * 
     */
    public Optional<Output<String>> configScope() {
        return Optional.ofNullable(this.configScope);
    }

    /**
     * The configuration effected which node group id of emr cluster.
     * 
     */
    @Import(name="nodeGroupId")
    private @Nullable Output<String> nodeGroupId;

    /**
     * @return The configuration effected which node group id of emr cluster.
     * 
     */
    public Optional<Output<String>> nodeGroupId() {
        return Optional.ofNullable(this.nodeGroupId);
    }

    /**
     * The configuration effected which node group name of emr cluster.
     * 
     */
    @Import(name="nodeGroupName")
    private @Nullable Output<String> nodeGroupName;

    /**
     * @return The configuration effected which node group name of emr cluster.
     * 
     */
    public Optional<Output<String>> nodeGroupName() {
        return Optional.ofNullable(this.nodeGroupName);
    }

    private ClusterApplicationConfigArgs() {}

    private ClusterApplicationConfigArgs(ClusterApplicationConfigArgs $) {
        this.applicationName = $.applicationName;
        this.configDescription = $.configDescription;
        this.configFileName = $.configFileName;
        this.configItemKey = $.configItemKey;
        this.configItemValue = $.configItemValue;
        this.configScope = $.configScope;
        this.nodeGroupId = $.nodeGroupId;
        this.nodeGroupName = $.nodeGroupName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ClusterApplicationConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ClusterApplicationConfigArgs $;

        public Builder() {
            $ = new ClusterApplicationConfigArgs();
        }

        public Builder(ClusterApplicationConfigArgs defaults) {
            $ = new ClusterApplicationConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param applicationName The application name of EMR cluster which has installed.
         * 
         * @return builder
         * 
         */
        public Builder applicationName(Output<String> applicationName) {
            $.applicationName = applicationName;
            return this;
        }

        /**
         * @param applicationName The application name of EMR cluster which has installed.
         * 
         * @return builder
         * 
         */
        public Builder applicationName(String applicationName) {
            return applicationName(Output.of(applicationName));
        }

        /**
         * @param configDescription The configuration description of application installed.
         * 
         * @return builder
         * 
         */
        public Builder configDescription(@Nullable Output<String> configDescription) {
            $.configDescription = configDescription;
            return this;
        }

        /**
         * @param configDescription The configuration description of application installed.
         * 
         * @return builder
         * 
         */
        public Builder configDescription(String configDescription) {
            return configDescription(Output.of(configDescription));
        }

        /**
         * @param configFileName The configuration file name of application installed.
         * 
         * @return builder
         * 
         */
        public Builder configFileName(Output<String> configFileName) {
            $.configFileName = configFileName;
            return this;
        }

        /**
         * @param configFileName The configuration file name of application installed.
         * 
         * @return builder
         * 
         */
        public Builder configFileName(String configFileName) {
            return configFileName(Output.of(configFileName));
        }

        /**
         * @param configItemKey The configuration item key of application installed.
         * 
         * @return builder
         * 
         */
        public Builder configItemKey(Output<String> configItemKey) {
            $.configItemKey = configItemKey;
            return this;
        }

        /**
         * @param configItemKey The configuration item key of application installed.
         * 
         * @return builder
         * 
         */
        public Builder configItemKey(String configItemKey) {
            return configItemKey(Output.of(configItemKey));
        }

        /**
         * @param configItemValue The configuration item value of application installed.
         * 
         * @return builder
         * 
         */
        public Builder configItemValue(Output<String> configItemValue) {
            $.configItemValue = configItemValue;
            return this;
        }

        /**
         * @param configItemValue The configuration item value of application installed.
         * 
         * @return builder
         * 
         */
        public Builder configItemValue(String configItemValue) {
            return configItemValue(Output.of(configItemValue));
        }

        /**
         * @param configScope The configuration scope of emr cluster. Supported value: CLUSTER or NODEGROUP.
         * 
         * @return builder
         * 
         */
        public Builder configScope(@Nullable Output<String> configScope) {
            $.configScope = configScope;
            return this;
        }

        /**
         * @param configScope The configuration scope of emr cluster. Supported value: CLUSTER or NODEGROUP.
         * 
         * @return builder
         * 
         */
        public Builder configScope(String configScope) {
            return configScope(Output.of(configScope));
        }

        /**
         * @param nodeGroupId The configuration effected which node group id of emr cluster.
         * 
         * @return builder
         * 
         */
        public Builder nodeGroupId(@Nullable Output<String> nodeGroupId) {
            $.nodeGroupId = nodeGroupId;
            return this;
        }

        /**
         * @param nodeGroupId The configuration effected which node group id of emr cluster.
         * 
         * @return builder
         * 
         */
        public Builder nodeGroupId(String nodeGroupId) {
            return nodeGroupId(Output.of(nodeGroupId));
        }

        /**
         * @param nodeGroupName The configuration effected which node group name of emr cluster.
         * 
         * @return builder
         * 
         */
        public Builder nodeGroupName(@Nullable Output<String> nodeGroupName) {
            $.nodeGroupName = nodeGroupName;
            return this;
        }

        /**
         * @param nodeGroupName The configuration effected which node group name of emr cluster.
         * 
         * @return builder
         * 
         */
        public Builder nodeGroupName(String nodeGroupName) {
            return nodeGroupName(Output.of(nodeGroupName));
        }

        public ClusterApplicationConfigArgs build() {
            if ($.applicationName == null) {
                throw new MissingRequiredPropertyException("ClusterApplicationConfigArgs", "applicationName");
            }
            if ($.configFileName == null) {
                throw new MissingRequiredPropertyException("ClusterApplicationConfigArgs", "configFileName");
            }
            if ($.configItemKey == null) {
                throw new MissingRequiredPropertyException("ClusterApplicationConfigArgs", "configItemKey");
            }
            if ($.configItemValue == null) {
                throw new MissingRequiredPropertyException("ClusterApplicationConfigArgs", "configItemValue");
            }
            return $;
        }
    }

}
