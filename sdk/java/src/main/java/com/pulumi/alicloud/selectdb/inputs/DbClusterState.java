// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.selectdb.inputs;

import com.pulumi.alicloud.selectdb.inputs.DbClusterDesiredParamArgs;
import com.pulumi.alicloud.selectdb.inputs.DbClusterParamChangeLogArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DbClusterState extends com.pulumi.resources.ResourceArgs {

    public static final DbClusterState Empty = new DbClusterState();

    /**
     * The desired cache size on creating cluster. The number should be divided by 100.
     * 
     */
    @Import(name="cacheSize")
    private @Nullable Output<Integer> cacheSize;

    /**
     * @return The desired cache size on creating cluster. The number should be divided by 100.
     * 
     */
    public Optional<Output<Integer>> cacheSize() {
        return Optional.ofNullable(this.cacheSize);
    }

    /**
     * The cpu resource amount of DBCluster. Depends on `db_cluster_class`.
     * 
     */
    @Import(name="cpu")
    private @Nullable Output<Integer> cpu;

    /**
     * @return The cpu resource amount of DBCluster. Depends on `db_cluster_class`.
     * 
     */
    public Optional<Output<Integer>> cpu() {
        return Optional.ofNullable(this.cpu);
    }

    /**
     * The time when DBCluster is created.
     * 
     */
    @Import(name="createTime")
    private @Nullable Output<String> createTime;

    /**
     * @return The time when DBCluster is created.
     * 
     */
    public Optional<Output<String>> createTime() {
        return Optional.ofNullable(this.createTime);
    }

    /**
     * The DBCluster class. db_cluster_class has a range of class from `selectdb.xlarge` to `selectdb.256xlarge`.
     * 
     */
    @Import(name="dbClusterClass")
    private @Nullable Output<String> dbClusterClass;

    /**
     * @return The DBCluster class. db_cluster_class has a range of class from `selectdb.xlarge` to `selectdb.256xlarge`.
     * 
     */
    public Optional<Output<String>> dbClusterClass() {
        return Optional.ofNullable(this.dbClusterClass);
    }

    /**
     * The DBCluster description.
     * 
     */
    @Import(name="dbClusterDescription")
    private @Nullable Output<String> dbClusterDescription;

    /**
     * @return The DBCluster description.
     * 
     */
    public Optional<Output<String>> dbClusterDescription() {
        return Optional.ofNullable(this.dbClusterDescription);
    }

    /**
     * The id of the cluster.
     * 
     */
    @Import(name="dbClusterId")
    private @Nullable Output<String> dbClusterId;

    /**
     * @return The id of the cluster.
     * 
     */
    public Optional<Output<String>> dbClusterId() {
        return Optional.ofNullable(this.dbClusterId);
    }

    /**
     * The InstanceId of DBInstance for DBCluster. Every DBCluster requires one DBInstance to rely on.
     * 
     */
    @Import(name="dbInstanceId")
    private @Nullable Output<String> dbInstanceId;

    /**
     * @return The InstanceId of DBInstance for DBCluster. Every DBCluster requires one DBInstance to rely on.
     * 
     */
    public Optional<Output<String>> dbInstanceId() {
        return Optional.ofNullable(this.dbInstanceId);
    }

    /**
     * The modified parameter in DBCluster. See `desired_params` below.
     * 
     */
    @Import(name="desiredParams")
    private @Nullable Output<List<DbClusterDesiredParamArgs>> desiredParams;

    /**
     * @return The modified parameter in DBCluster. See `desired_params` below.
     * 
     */
    public Optional<Output<List<DbClusterDesiredParamArgs>>> desiredParams() {
        return Optional.ofNullable(this.desiredParams);
    }

    /**
     * The desired status for the resource. Valid values: `ACTIVATION`,`STOPPED`,`STARTING`,`RESTART`.
     * 
     */
    @Import(name="desiredStatus")
    private @Nullable Output<String> desiredStatus;

    /**
     * @return The desired status for the resource. Valid values: `ACTIVATION`,`STOPPED`,`STARTING`,`RESTART`.
     * 
     */
    public Optional<Output<String>> desiredStatus() {
        return Optional.ofNullable(this.desiredStatus);
    }

    /**
     * The engine of DBCluster. Always `selectdb`.
     * 
     */
    @Import(name="engine")
    private @Nullable Output<String> engine;

    /**
     * @return The engine of DBCluster. Always `selectdb`.
     * 
     */
    public Optional<Output<String>> engine() {
        return Optional.ofNullable(this.engine);
    }

    /**
     * The version of DBCluster.
     * 
     */
    @Import(name="engineVersion")
    private @Nullable Output<String> engineVersion;

    /**
     * @return The version of DBCluster.
     * 
     */
    public Optional<Output<String>> engineVersion() {
        return Optional.ofNullable(this.engineVersion);
    }

    /**
     * The memory resource amount of DBCluster. Depends on `db_cluster_class`.
     * 
     */
    @Import(name="memory")
    private @Nullable Output<Integer> memory;

    /**
     * @return The memory resource amount of DBCluster. Depends on `db_cluster_class`.
     * 
     */
    public Optional<Output<Integer>> memory() {
        return Optional.ofNullable(this.memory);
    }

    /**
     * The details about parameter changelogs in DBCluster returned.
     * 
     */
    @Import(name="paramChangeLogs")
    private @Nullable Output<List<DbClusterParamChangeLogArgs>> paramChangeLogs;

    /**
     * @return The details about parameter changelogs in DBCluster returned.
     * 
     */
    public Optional<Output<List<DbClusterParamChangeLogArgs>>> paramChangeLogs() {
        return Optional.ofNullable(this.paramChangeLogs);
    }

    /**
     * The payment type of the resource. Valid values: `PayAsYouGo`,`Subscription`.
     * 
     */
    @Import(name="paymentType")
    private @Nullable Output<String> paymentType;

    /**
     * @return The payment type of the resource. Valid values: `PayAsYouGo`,`Subscription`.
     * 
     */
    public Optional<Output<String>> paymentType() {
        return Optional.ofNullable(this.paymentType);
    }

    /**
     * The ID of region for the cluster.
     * 
     */
    @Import(name="regionId")
    private @Nullable Output<String> regionId;

    /**
     * @return The ID of region for the cluster.
     * 
     */
    public Optional<Output<String>> regionId() {
        return Optional.ofNullable(this.regionId);
    }

    /**
     * The current status of the resource.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return The current status of the resource.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * The ID of the VPC for the cluster.
     * 
     */
    @Import(name="vpcId")
    private @Nullable Output<String> vpcId;

    /**
     * @return The ID of the VPC for the cluster.
     * 
     */
    public Optional<Output<String>> vpcId() {
        return Optional.ofNullable(this.vpcId);
    }

    /**
     * The ID of zone for the cluster.
     * 
     */
    @Import(name="zoneId")
    private @Nullable Output<String> zoneId;

    /**
     * @return The ID of zone for the cluster.
     * 
     */
    public Optional<Output<String>> zoneId() {
        return Optional.ofNullable(this.zoneId);
    }

    private DbClusterState() {}

    private DbClusterState(DbClusterState $) {
        this.cacheSize = $.cacheSize;
        this.cpu = $.cpu;
        this.createTime = $.createTime;
        this.dbClusterClass = $.dbClusterClass;
        this.dbClusterDescription = $.dbClusterDescription;
        this.dbClusterId = $.dbClusterId;
        this.dbInstanceId = $.dbInstanceId;
        this.desiredParams = $.desiredParams;
        this.desiredStatus = $.desiredStatus;
        this.engine = $.engine;
        this.engineVersion = $.engineVersion;
        this.memory = $.memory;
        this.paramChangeLogs = $.paramChangeLogs;
        this.paymentType = $.paymentType;
        this.regionId = $.regionId;
        this.status = $.status;
        this.vpcId = $.vpcId;
        this.zoneId = $.zoneId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DbClusterState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DbClusterState $;

        public Builder() {
            $ = new DbClusterState();
        }

        public Builder(DbClusterState defaults) {
            $ = new DbClusterState(Objects.requireNonNull(defaults));
        }

        /**
         * @param cacheSize The desired cache size on creating cluster. The number should be divided by 100.
         * 
         * @return builder
         * 
         */
        public Builder cacheSize(@Nullable Output<Integer> cacheSize) {
            $.cacheSize = cacheSize;
            return this;
        }

        /**
         * @param cacheSize The desired cache size on creating cluster. The number should be divided by 100.
         * 
         * @return builder
         * 
         */
        public Builder cacheSize(Integer cacheSize) {
            return cacheSize(Output.of(cacheSize));
        }

        /**
         * @param cpu The cpu resource amount of DBCluster. Depends on `db_cluster_class`.
         * 
         * @return builder
         * 
         */
        public Builder cpu(@Nullable Output<Integer> cpu) {
            $.cpu = cpu;
            return this;
        }

        /**
         * @param cpu The cpu resource amount of DBCluster. Depends on `db_cluster_class`.
         * 
         * @return builder
         * 
         */
        public Builder cpu(Integer cpu) {
            return cpu(Output.of(cpu));
        }

        /**
         * @param createTime The time when DBCluster is created.
         * 
         * @return builder
         * 
         */
        public Builder createTime(@Nullable Output<String> createTime) {
            $.createTime = createTime;
            return this;
        }

        /**
         * @param createTime The time when DBCluster is created.
         * 
         * @return builder
         * 
         */
        public Builder createTime(String createTime) {
            return createTime(Output.of(createTime));
        }

        /**
         * @param dbClusterClass The DBCluster class. db_cluster_class has a range of class from `selectdb.xlarge` to `selectdb.256xlarge`.
         * 
         * @return builder
         * 
         */
        public Builder dbClusterClass(@Nullable Output<String> dbClusterClass) {
            $.dbClusterClass = dbClusterClass;
            return this;
        }

        /**
         * @param dbClusterClass The DBCluster class. db_cluster_class has a range of class from `selectdb.xlarge` to `selectdb.256xlarge`.
         * 
         * @return builder
         * 
         */
        public Builder dbClusterClass(String dbClusterClass) {
            return dbClusterClass(Output.of(dbClusterClass));
        }

        /**
         * @param dbClusterDescription The DBCluster description.
         * 
         * @return builder
         * 
         */
        public Builder dbClusterDescription(@Nullable Output<String> dbClusterDescription) {
            $.dbClusterDescription = dbClusterDescription;
            return this;
        }

        /**
         * @param dbClusterDescription The DBCluster description.
         * 
         * @return builder
         * 
         */
        public Builder dbClusterDescription(String dbClusterDescription) {
            return dbClusterDescription(Output.of(dbClusterDescription));
        }

        /**
         * @param dbClusterId The id of the cluster.
         * 
         * @return builder
         * 
         */
        public Builder dbClusterId(@Nullable Output<String> dbClusterId) {
            $.dbClusterId = dbClusterId;
            return this;
        }

        /**
         * @param dbClusterId The id of the cluster.
         * 
         * @return builder
         * 
         */
        public Builder dbClusterId(String dbClusterId) {
            return dbClusterId(Output.of(dbClusterId));
        }

        /**
         * @param dbInstanceId The InstanceId of DBInstance for DBCluster. Every DBCluster requires one DBInstance to rely on.
         * 
         * @return builder
         * 
         */
        public Builder dbInstanceId(@Nullable Output<String> dbInstanceId) {
            $.dbInstanceId = dbInstanceId;
            return this;
        }

        /**
         * @param dbInstanceId The InstanceId of DBInstance for DBCluster. Every DBCluster requires one DBInstance to rely on.
         * 
         * @return builder
         * 
         */
        public Builder dbInstanceId(String dbInstanceId) {
            return dbInstanceId(Output.of(dbInstanceId));
        }

        /**
         * @param desiredParams The modified parameter in DBCluster. See `desired_params` below.
         * 
         * @return builder
         * 
         */
        public Builder desiredParams(@Nullable Output<List<DbClusterDesiredParamArgs>> desiredParams) {
            $.desiredParams = desiredParams;
            return this;
        }

        /**
         * @param desiredParams The modified parameter in DBCluster. See `desired_params` below.
         * 
         * @return builder
         * 
         */
        public Builder desiredParams(List<DbClusterDesiredParamArgs> desiredParams) {
            return desiredParams(Output.of(desiredParams));
        }

        /**
         * @param desiredParams The modified parameter in DBCluster. See `desired_params` below.
         * 
         * @return builder
         * 
         */
        public Builder desiredParams(DbClusterDesiredParamArgs... desiredParams) {
            return desiredParams(List.of(desiredParams));
        }

        /**
         * @param desiredStatus The desired status for the resource. Valid values: `ACTIVATION`,`STOPPED`,`STARTING`,`RESTART`.
         * 
         * @return builder
         * 
         */
        public Builder desiredStatus(@Nullable Output<String> desiredStatus) {
            $.desiredStatus = desiredStatus;
            return this;
        }

        /**
         * @param desiredStatus The desired status for the resource. Valid values: `ACTIVATION`,`STOPPED`,`STARTING`,`RESTART`.
         * 
         * @return builder
         * 
         */
        public Builder desiredStatus(String desiredStatus) {
            return desiredStatus(Output.of(desiredStatus));
        }

        /**
         * @param engine The engine of DBCluster. Always `selectdb`.
         * 
         * @return builder
         * 
         */
        public Builder engine(@Nullable Output<String> engine) {
            $.engine = engine;
            return this;
        }

        /**
         * @param engine The engine of DBCluster. Always `selectdb`.
         * 
         * @return builder
         * 
         */
        public Builder engine(String engine) {
            return engine(Output.of(engine));
        }

        /**
         * @param engineVersion The version of DBCluster.
         * 
         * @return builder
         * 
         */
        public Builder engineVersion(@Nullable Output<String> engineVersion) {
            $.engineVersion = engineVersion;
            return this;
        }

        /**
         * @param engineVersion The version of DBCluster.
         * 
         * @return builder
         * 
         */
        public Builder engineVersion(String engineVersion) {
            return engineVersion(Output.of(engineVersion));
        }

        /**
         * @param memory The memory resource amount of DBCluster. Depends on `db_cluster_class`.
         * 
         * @return builder
         * 
         */
        public Builder memory(@Nullable Output<Integer> memory) {
            $.memory = memory;
            return this;
        }

        /**
         * @param memory The memory resource amount of DBCluster. Depends on `db_cluster_class`.
         * 
         * @return builder
         * 
         */
        public Builder memory(Integer memory) {
            return memory(Output.of(memory));
        }

        /**
         * @param paramChangeLogs The details about parameter changelogs in DBCluster returned.
         * 
         * @return builder
         * 
         */
        public Builder paramChangeLogs(@Nullable Output<List<DbClusterParamChangeLogArgs>> paramChangeLogs) {
            $.paramChangeLogs = paramChangeLogs;
            return this;
        }

        /**
         * @param paramChangeLogs The details about parameter changelogs in DBCluster returned.
         * 
         * @return builder
         * 
         */
        public Builder paramChangeLogs(List<DbClusterParamChangeLogArgs> paramChangeLogs) {
            return paramChangeLogs(Output.of(paramChangeLogs));
        }

        /**
         * @param paramChangeLogs The details about parameter changelogs in DBCluster returned.
         * 
         * @return builder
         * 
         */
        public Builder paramChangeLogs(DbClusterParamChangeLogArgs... paramChangeLogs) {
            return paramChangeLogs(List.of(paramChangeLogs));
        }

        /**
         * @param paymentType The payment type of the resource. Valid values: `PayAsYouGo`,`Subscription`.
         * 
         * @return builder
         * 
         */
        public Builder paymentType(@Nullable Output<String> paymentType) {
            $.paymentType = paymentType;
            return this;
        }

        /**
         * @param paymentType The payment type of the resource. Valid values: `PayAsYouGo`,`Subscription`.
         * 
         * @return builder
         * 
         */
        public Builder paymentType(String paymentType) {
            return paymentType(Output.of(paymentType));
        }

        /**
         * @param regionId The ID of region for the cluster.
         * 
         * @return builder
         * 
         */
        public Builder regionId(@Nullable Output<String> regionId) {
            $.regionId = regionId;
            return this;
        }

        /**
         * @param regionId The ID of region for the cluster.
         * 
         * @return builder
         * 
         */
        public Builder regionId(String regionId) {
            return regionId(Output.of(regionId));
        }

        /**
         * @param status The current status of the resource.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status The current status of the resource.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param vpcId The ID of the VPC for the cluster.
         * 
         * @return builder
         * 
         */
        public Builder vpcId(@Nullable Output<String> vpcId) {
            $.vpcId = vpcId;
            return this;
        }

        /**
         * @param vpcId The ID of the VPC for the cluster.
         * 
         * @return builder
         * 
         */
        public Builder vpcId(String vpcId) {
            return vpcId(Output.of(vpcId));
        }

        /**
         * @param zoneId The ID of zone for the cluster.
         * 
         * @return builder
         * 
         */
        public Builder zoneId(@Nullable Output<String> zoneId) {
            $.zoneId = zoneId;
            return this;
        }

        /**
         * @param zoneId The ID of zone for the cluster.
         * 
         * @return builder
         * 
         */
        public Builder zoneId(String zoneId) {
            return zoneId(Output.of(zoneId));
        }

        public DbClusterState build() {
            return $;
        }
    }

}
