// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.clickhouseenterprisedbcluster.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;

@CustomType
public final class AccountDmlAuthSetting {
    /**
     * @return The list of databases that require authorization. If there are more than one, separate them with commas (,).
     * 
     */
    private @Nullable List<String> allowDatabases;
    /**
     * @return List of dictionaries that require authorization. If there are more than one, separate them with commas (,).
     * 
     */
    private @Nullable List<String> allowDictionaries;
    /**
     * @return Whether to grant the DDL permission to the database account. Value description:
     * 
     */
    private Boolean ddlAuthority;
    /**
     * @return Whether to grant the DML permission to the database account. The values are as follows:
     * 
     */
    private Integer dmlAuthority;

    private AccountDmlAuthSetting() {}
    /**
     * @return The list of databases that require authorization. If there are more than one, separate them with commas (,).
     * 
     */
    public List<String> allowDatabases() {
        return this.allowDatabases == null ? List.of() : this.allowDatabases;
    }
    /**
     * @return List of dictionaries that require authorization. If there are more than one, separate them with commas (,).
     * 
     */
    public List<String> allowDictionaries() {
        return this.allowDictionaries == null ? List.of() : this.allowDictionaries;
    }
    /**
     * @return Whether to grant the DDL permission to the database account. Value description:
     * 
     */
    public Boolean ddlAuthority() {
        return this.ddlAuthority;
    }
    /**
     * @return Whether to grant the DML permission to the database account. The values are as follows:
     * 
     */
    public Integer dmlAuthority() {
        return this.dmlAuthority;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AccountDmlAuthSetting defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<String> allowDatabases;
        private @Nullable List<String> allowDictionaries;
        private Boolean ddlAuthority;
        private Integer dmlAuthority;
        public Builder() {}
        public Builder(AccountDmlAuthSetting defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allowDatabases = defaults.allowDatabases;
    	      this.allowDictionaries = defaults.allowDictionaries;
    	      this.ddlAuthority = defaults.ddlAuthority;
    	      this.dmlAuthority = defaults.dmlAuthority;
        }

        @CustomType.Setter
        public Builder allowDatabases(@Nullable List<String> allowDatabases) {

            this.allowDatabases = allowDatabases;
            return this;
        }
        public Builder allowDatabases(String... allowDatabases) {
            return allowDatabases(List.of(allowDatabases));
        }
        @CustomType.Setter
        public Builder allowDictionaries(@Nullable List<String> allowDictionaries) {

            this.allowDictionaries = allowDictionaries;
            return this;
        }
        public Builder allowDictionaries(String... allowDictionaries) {
            return allowDictionaries(List.of(allowDictionaries));
        }
        @CustomType.Setter
        public Builder ddlAuthority(Boolean ddlAuthority) {
            if (ddlAuthority == null) {
              throw new MissingRequiredPropertyException("AccountDmlAuthSetting", "ddlAuthority");
            }
            this.ddlAuthority = ddlAuthority;
            return this;
        }
        @CustomType.Setter
        public Builder dmlAuthority(Integer dmlAuthority) {
            if (dmlAuthority == null) {
              throw new MissingRequiredPropertyException("AccountDmlAuthSetting", "dmlAuthority");
            }
            this.dmlAuthority = dmlAuthority;
            return this;
        }
        public AccountDmlAuthSetting build() {
            final var _resultValue = new AccountDmlAuthSetting();
            _resultValue.allowDatabases = allowDatabases;
            _resultValue.allowDictionaries = allowDictionaries;
            _resultValue.ddlAuthority = ddlAuthority;
            _resultValue.dmlAuthority = dmlAuthority;
            return _resultValue;
        }
    }
}
