// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.ebs.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DiskReplicaPairState extends com.pulumi.resources.ResourceArgs {

    public static final DiskReplicaPairState Empty = new DiskReplicaPairState();

    /**
     * The bandwidth for asynchronous data replication between cloud disks. The unit is Kbps. Value range:-10240 Kbps: equal to 10 Mbps.-20480 Kbps: equal to 20 Mbps.-51200 Kbps: equal to 50 Mbps.-102400 Kbps: equal to 100 Mbps.Default value: 10240.This parameter cannot be specified when the ChargeType value is POSTPAY. The system value is 0, which indicates that the disk is dynamically allocated according to data write changes during asynchronous replication.
     * 
     */
    @Import(name="bandwidth")
    private @Nullable Output<String> bandwidth;

    /**
     * @return The bandwidth for asynchronous data replication between cloud disks. The unit is Kbps. Value range:-10240 Kbps: equal to 10 Mbps.-20480 Kbps: equal to 20 Mbps.-51200 Kbps: equal to 50 Mbps.-102400 Kbps: equal to 100 Mbps.Default value: 10240.This parameter cannot be specified when the ChargeType value is POSTPAY. The system value is 0, which indicates that the disk is dynamically allocated according to data write changes during asynchronous replication.
     * 
     */
    public Optional<Output<String>> bandwidth() {
        return Optional.ofNullable(this.bandwidth);
    }

    /**
     * The creation time of the resource
     * 
     */
    @Import(name="createTime")
    private @Nullable Output<String> createTime;

    /**
     * @return The creation time of the resource
     * 
     */
    public Optional<Output<String>> createTime() {
        return Optional.ofNullable(this.createTime);
    }

    /**
     * The description of the asynchronous replication relationship. 2 to 256 English or Chinese characters in length and cannot start with&#39; http:// &#39;or&#39; https.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The description of the asynchronous replication relationship. 2 to 256 English or Chinese characters in length and cannot start with&#39; http:// &#39;or&#39; https.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The ID of the standby disk.
     * 
     */
    @Import(name="destinationDiskId")
    private @Nullable Output<String> destinationDiskId;

    /**
     * @return The ID of the standby disk.
     * 
     */
    public Optional<Output<String>> destinationDiskId() {
        return Optional.ofNullable(this.destinationDiskId);
    }

    /**
     * The ID of the region to which the disaster recovery site belongs.
     * 
     */
    @Import(name="destinationRegionId")
    private @Nullable Output<String> destinationRegionId;

    /**
     * @return The ID of the region to which the disaster recovery site belongs.
     * 
     */
    public Optional<Output<String>> destinationRegionId() {
        return Optional.ofNullable(this.destinationRegionId);
    }

    /**
     * The ID of the zone to which the disaster recovery site belongs.
     * 
     */
    @Import(name="destinationZoneId")
    private @Nullable Output<String> destinationZoneId;

    /**
     * @return The ID of the zone to which the disaster recovery site belongs.
     * 
     */
    public Optional<Output<String>> destinationZoneId() {
        return Optional.ofNullable(this.destinationZoneId);
    }

    /**
     * The ID of the primary disk.
     * 
     */
    @Import(name="diskId")
    private @Nullable Output<String> diskId;

    /**
     * @return The ID of the primary disk.
     * 
     */
    public Optional<Output<String>> diskId() {
        return Optional.ofNullable(this.diskId);
    }

    /**
     * The name of the asynchronous replication relationship. The length must be 2 to 128 characters in length and must start with a letter or Chinese name. It cannot start with http:// or https. It can contain Chinese, English, numbers, half-width colons (:), underscores (_), half-width periods (.), or dashes (-).
     * 
     */
    @Import(name="pairName")
    private @Nullable Output<String> pairName;

    /**
     * @return The name of the asynchronous replication relationship. The length must be 2 to 128 characters in length and must start with a letter or Chinese name. It cannot start with http:// or https. It can contain Chinese, English, numbers, half-width colons (:), underscores (_), half-width periods (.), or dashes (-).
     * 
     */
    public Optional<Output<String>> pairName() {
        return Optional.ofNullable(this.pairName);
    }

    /**
     * The payment type of the resource
     * 
     */
    @Import(name="paymentType")
    private @Nullable Output<String> paymentType;

    /**
     * @return The payment type of the resource
     * 
     */
    public Optional<Output<String>> paymentType() {
        return Optional.ofNullable(this.paymentType);
    }

    /**
     * The length of the purchase for the asynchronous replication relationship. When ChargeType=PrePay, this parameter is mandatory. The unit of duration is specified by PeriodUnit and takes on a range of values. When PeriodUnit=Week, this parameter takes values in the range `1`, `2`, `3` and `4`. When PeriodUnit=Month, the parameter takes on the values `1`, `2`, `3`, `4`, `5`, `6`, `7`, `8`, `9`, `12`, `24`, `36`, `48`, `60`.
     * 
     */
    @Import(name="period")
    private @Nullable Output<String> period;

    /**
     * @return The length of the purchase for the asynchronous replication relationship. When ChargeType=PrePay, this parameter is mandatory. The unit of duration is specified by PeriodUnit and takes on a range of values. When PeriodUnit=Week, this parameter takes values in the range `1`, `2`, `3` and `4`. When PeriodUnit=Month, the parameter takes on the values `1`, `2`, `3`, `4`, `5`, `6`, `7`, `8`, `9`, `12`, `24`, `36`, `48`, `60`.
     * 
     */
    public Optional<Output<String>> period() {
        return Optional.ofNullable(this.period);
    }

    /**
     * The units of asynchronous replication relationship purchase length. Valid values: `Week` and `Month`. Default value: `Month`.
     * 
     */
    @Import(name="periodUnit")
    private @Nullable Output<String> periodUnit;

    /**
     * @return The units of asynchronous replication relationship purchase length. Valid values: `Week` and `Month`. Default value: `Month`.
     * 
     */
    public Optional<Output<String>> periodUnit() {
        return Optional.ofNullable(this.periodUnit);
    }

    /**
     * The first ID of the resource.
     * 
     */
    @Import(name="replicaPairId")
    private @Nullable Output<String> replicaPairId;

    /**
     * @return The first ID of the resource.
     * 
     */
    public Optional<Output<String>> replicaPairId() {
        return Optional.ofNullable(this.replicaPairId);
    }

    /**
     * The ID of the resource group
     * 
     */
    @Import(name="resourceGroupId")
    private @Nullable Output<String> resourceGroupId;

    /**
     * @return The ID of the resource group
     * 
     */
    public Optional<Output<String>> resourceGroupId() {
        return Optional.ofNullable(this.resourceGroupId);
    }

    /**
     * The RPO value set by the consistency group in seconds. Currently only 900 seconds are supported.
     * 
     */
    @Import(name="rpo")
    private @Nullable Output<String> rpo;

    /**
     * @return The RPO value set by the consistency group in seconds. Currently only 900 seconds are supported.
     * 
     */
    public Optional<Output<String>> rpo() {
        return Optional.ofNullable(this.rpo);
    }

    /**
     * The ID of the zone to which the production site belongs.
     * 
     */
    @Import(name="sourceZoneId")
    private @Nullable Output<String> sourceZoneId;

    /**
     * @return The ID of the zone to which the production site belongs.
     * 
     */
    public Optional<Output<String>> sourceZoneId() {
        return Optional.ofNullable(this.sourceZoneId);
    }

    /**
     * The status of the resource
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return The status of the resource
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    private DiskReplicaPairState() {}

    private DiskReplicaPairState(DiskReplicaPairState $) {
        this.bandwidth = $.bandwidth;
        this.createTime = $.createTime;
        this.description = $.description;
        this.destinationDiskId = $.destinationDiskId;
        this.destinationRegionId = $.destinationRegionId;
        this.destinationZoneId = $.destinationZoneId;
        this.diskId = $.diskId;
        this.pairName = $.pairName;
        this.paymentType = $.paymentType;
        this.period = $.period;
        this.periodUnit = $.periodUnit;
        this.replicaPairId = $.replicaPairId;
        this.resourceGroupId = $.resourceGroupId;
        this.rpo = $.rpo;
        this.sourceZoneId = $.sourceZoneId;
        this.status = $.status;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DiskReplicaPairState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DiskReplicaPairState $;

        public Builder() {
            $ = new DiskReplicaPairState();
        }

        public Builder(DiskReplicaPairState defaults) {
            $ = new DiskReplicaPairState(Objects.requireNonNull(defaults));
        }

        /**
         * @param bandwidth The bandwidth for asynchronous data replication between cloud disks. The unit is Kbps. Value range:-10240 Kbps: equal to 10 Mbps.-20480 Kbps: equal to 20 Mbps.-51200 Kbps: equal to 50 Mbps.-102400 Kbps: equal to 100 Mbps.Default value: 10240.This parameter cannot be specified when the ChargeType value is POSTPAY. The system value is 0, which indicates that the disk is dynamically allocated according to data write changes during asynchronous replication.
         * 
         * @return builder
         * 
         */
        public Builder bandwidth(@Nullable Output<String> bandwidth) {
            $.bandwidth = bandwidth;
            return this;
        }

        /**
         * @param bandwidth The bandwidth for asynchronous data replication between cloud disks. The unit is Kbps. Value range:-10240 Kbps: equal to 10 Mbps.-20480 Kbps: equal to 20 Mbps.-51200 Kbps: equal to 50 Mbps.-102400 Kbps: equal to 100 Mbps.Default value: 10240.This parameter cannot be specified when the ChargeType value is POSTPAY. The system value is 0, which indicates that the disk is dynamically allocated according to data write changes during asynchronous replication.
         * 
         * @return builder
         * 
         */
        public Builder bandwidth(String bandwidth) {
            return bandwidth(Output.of(bandwidth));
        }

        /**
         * @param createTime The creation time of the resource
         * 
         * @return builder
         * 
         */
        public Builder createTime(@Nullable Output<String> createTime) {
            $.createTime = createTime;
            return this;
        }

        /**
         * @param createTime The creation time of the resource
         * 
         * @return builder
         * 
         */
        public Builder createTime(String createTime) {
            return createTime(Output.of(createTime));
        }

        /**
         * @param description The description of the asynchronous replication relationship. 2 to 256 English or Chinese characters in length and cannot start with&#39; http:// &#39;or&#39; https.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The description of the asynchronous replication relationship. 2 to 256 English or Chinese characters in length and cannot start with&#39; http:// &#39;or&#39; https.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param destinationDiskId The ID of the standby disk.
         * 
         * @return builder
         * 
         */
        public Builder destinationDiskId(@Nullable Output<String> destinationDiskId) {
            $.destinationDiskId = destinationDiskId;
            return this;
        }

        /**
         * @param destinationDiskId The ID of the standby disk.
         * 
         * @return builder
         * 
         */
        public Builder destinationDiskId(String destinationDiskId) {
            return destinationDiskId(Output.of(destinationDiskId));
        }

        /**
         * @param destinationRegionId The ID of the region to which the disaster recovery site belongs.
         * 
         * @return builder
         * 
         */
        public Builder destinationRegionId(@Nullable Output<String> destinationRegionId) {
            $.destinationRegionId = destinationRegionId;
            return this;
        }

        /**
         * @param destinationRegionId The ID of the region to which the disaster recovery site belongs.
         * 
         * @return builder
         * 
         */
        public Builder destinationRegionId(String destinationRegionId) {
            return destinationRegionId(Output.of(destinationRegionId));
        }

        /**
         * @param destinationZoneId The ID of the zone to which the disaster recovery site belongs.
         * 
         * @return builder
         * 
         */
        public Builder destinationZoneId(@Nullable Output<String> destinationZoneId) {
            $.destinationZoneId = destinationZoneId;
            return this;
        }

        /**
         * @param destinationZoneId The ID of the zone to which the disaster recovery site belongs.
         * 
         * @return builder
         * 
         */
        public Builder destinationZoneId(String destinationZoneId) {
            return destinationZoneId(Output.of(destinationZoneId));
        }

        /**
         * @param diskId The ID of the primary disk.
         * 
         * @return builder
         * 
         */
        public Builder diskId(@Nullable Output<String> diskId) {
            $.diskId = diskId;
            return this;
        }

        /**
         * @param diskId The ID of the primary disk.
         * 
         * @return builder
         * 
         */
        public Builder diskId(String diskId) {
            return diskId(Output.of(diskId));
        }

        /**
         * @param pairName The name of the asynchronous replication relationship. The length must be 2 to 128 characters in length and must start with a letter or Chinese name. It cannot start with http:// or https. It can contain Chinese, English, numbers, half-width colons (:), underscores (_), half-width periods (.), or dashes (-).
         * 
         * @return builder
         * 
         */
        public Builder pairName(@Nullable Output<String> pairName) {
            $.pairName = pairName;
            return this;
        }

        /**
         * @param pairName The name of the asynchronous replication relationship. The length must be 2 to 128 characters in length and must start with a letter or Chinese name. It cannot start with http:// or https. It can contain Chinese, English, numbers, half-width colons (:), underscores (_), half-width periods (.), or dashes (-).
         * 
         * @return builder
         * 
         */
        public Builder pairName(String pairName) {
            return pairName(Output.of(pairName));
        }

        /**
         * @param paymentType The payment type of the resource
         * 
         * @return builder
         * 
         */
        public Builder paymentType(@Nullable Output<String> paymentType) {
            $.paymentType = paymentType;
            return this;
        }

        /**
         * @param paymentType The payment type of the resource
         * 
         * @return builder
         * 
         */
        public Builder paymentType(String paymentType) {
            return paymentType(Output.of(paymentType));
        }

        /**
         * @param period The length of the purchase for the asynchronous replication relationship. When ChargeType=PrePay, this parameter is mandatory. The unit of duration is specified by PeriodUnit and takes on a range of values. When PeriodUnit=Week, this parameter takes values in the range `1`, `2`, `3` and `4`. When PeriodUnit=Month, the parameter takes on the values `1`, `2`, `3`, `4`, `5`, `6`, `7`, `8`, `9`, `12`, `24`, `36`, `48`, `60`.
         * 
         * @return builder
         * 
         */
        public Builder period(@Nullable Output<String> period) {
            $.period = period;
            return this;
        }

        /**
         * @param period The length of the purchase for the asynchronous replication relationship. When ChargeType=PrePay, this parameter is mandatory. The unit of duration is specified by PeriodUnit and takes on a range of values. When PeriodUnit=Week, this parameter takes values in the range `1`, `2`, `3` and `4`. When PeriodUnit=Month, the parameter takes on the values `1`, `2`, `3`, `4`, `5`, `6`, `7`, `8`, `9`, `12`, `24`, `36`, `48`, `60`.
         * 
         * @return builder
         * 
         */
        public Builder period(String period) {
            return period(Output.of(period));
        }

        /**
         * @param periodUnit The units of asynchronous replication relationship purchase length. Valid values: `Week` and `Month`. Default value: `Month`.
         * 
         * @return builder
         * 
         */
        public Builder periodUnit(@Nullable Output<String> periodUnit) {
            $.periodUnit = periodUnit;
            return this;
        }

        /**
         * @param periodUnit The units of asynchronous replication relationship purchase length. Valid values: `Week` and `Month`. Default value: `Month`.
         * 
         * @return builder
         * 
         */
        public Builder periodUnit(String periodUnit) {
            return periodUnit(Output.of(periodUnit));
        }

        /**
         * @param replicaPairId The first ID of the resource.
         * 
         * @return builder
         * 
         */
        public Builder replicaPairId(@Nullable Output<String> replicaPairId) {
            $.replicaPairId = replicaPairId;
            return this;
        }

        /**
         * @param replicaPairId The first ID of the resource.
         * 
         * @return builder
         * 
         */
        public Builder replicaPairId(String replicaPairId) {
            return replicaPairId(Output.of(replicaPairId));
        }

        /**
         * @param resourceGroupId The ID of the resource group
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupId(@Nullable Output<String> resourceGroupId) {
            $.resourceGroupId = resourceGroupId;
            return this;
        }

        /**
         * @param resourceGroupId The ID of the resource group
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupId(String resourceGroupId) {
            return resourceGroupId(Output.of(resourceGroupId));
        }

        /**
         * @param rpo The RPO value set by the consistency group in seconds. Currently only 900 seconds are supported.
         * 
         * @return builder
         * 
         */
        public Builder rpo(@Nullable Output<String> rpo) {
            $.rpo = rpo;
            return this;
        }

        /**
         * @param rpo The RPO value set by the consistency group in seconds. Currently only 900 seconds are supported.
         * 
         * @return builder
         * 
         */
        public Builder rpo(String rpo) {
            return rpo(Output.of(rpo));
        }

        /**
         * @param sourceZoneId The ID of the zone to which the production site belongs.
         * 
         * @return builder
         * 
         */
        public Builder sourceZoneId(@Nullable Output<String> sourceZoneId) {
            $.sourceZoneId = sourceZoneId;
            return this;
        }

        /**
         * @param sourceZoneId The ID of the zone to which the production site belongs.
         * 
         * @return builder
         * 
         */
        public Builder sourceZoneId(String sourceZoneId) {
            return sourceZoneId(Output.of(sourceZoneId));
        }

        /**
         * @param status The status of the resource
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status The status of the resource
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        public DiskReplicaPairState build() {
            return $;
        }
    }

}
