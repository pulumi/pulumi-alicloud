// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.ebs.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DiskReplicaPairState extends com.pulumi.resources.ResourceArgs {

    public static final DiskReplicaPairState Empty = new DiskReplicaPairState();

    /**
     * The bandwidth for asynchronous data replication between cloud disks. The unit is Kbps. Value range:
     * - 10240 Kbps: equal to 10 Mbps.
     * - 20480 Kbps: equal to 20 Mbps.
     * - 51200 Kbps: equal to 50 Mbps.
     * - 102400 Kbps: equal to 100 Mbps.
     * 
     * Default value: 10240.
     * This parameter cannot be specified when the ChargeType value is PayAsYouGo The system value is 0, which indicates that the disk is dynamically allocated according to data write changes during asynchronous replication.
     * 
     */
    @Import(name="bandwidth")
    private @Nullable Output<Integer> bandwidth;

    /**
     * @return The bandwidth for asynchronous data replication between cloud disks. The unit is Kbps. Value range:
     * - 10240 Kbps: equal to 10 Mbps.
     * - 20480 Kbps: equal to 20 Mbps.
     * - 51200 Kbps: equal to 50 Mbps.
     * - 102400 Kbps: equal to 100 Mbps.
     * 
     * Default value: 10240.
     * This parameter cannot be specified when the ChargeType value is PayAsYouGo The system value is 0, which indicates that the disk is dynamically allocated according to data write changes during asynchronous replication.
     * 
     */
    public Optional<Output<Integer>> bandwidth() {
        return Optional.ofNullable(this.bandwidth);
    }

    /**
     * The creation time of the resource
     * 
     */
    @Import(name="createTime")
    private @Nullable Output<Integer> createTime;

    /**
     * @return The creation time of the resource
     * 
     */
    public Optional<Output<Integer>> createTime() {
        return Optional.ofNullable(this.createTime);
    }

    /**
     * The description of the asynchronous replication relationship. 2 to 256 English or Chinese characters in length and cannot start with&#39; http:// &#39;or&#39; https.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The description of the asynchronous replication relationship. 2 to 256 English or Chinese characters in length and cannot start with&#39; http:// &#39;or&#39; https.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The ID of the standby disk.
     * 
     */
    @Import(name="destinationDiskId")
    private @Nullable Output<String> destinationDiskId;

    /**
     * @return The ID of the standby disk.
     * 
     */
    public Optional<Output<String>> destinationDiskId() {
        return Optional.ofNullable(this.destinationDiskId);
    }

    /**
     * The ID of the region to which the disaster recovery site belongs.
     * 
     */
    @Import(name="destinationRegionId")
    private @Nullable Output<String> destinationRegionId;

    /**
     * @return The ID of the region to which the disaster recovery site belongs.
     * 
     */
    public Optional<Output<String>> destinationRegionId() {
        return Optional.ofNullable(this.destinationRegionId);
    }

    /**
     * The ID of the zone to which the disaster recovery site belongs.
     * 
     */
    @Import(name="destinationZoneId")
    private @Nullable Output<String> destinationZoneId;

    /**
     * @return The ID of the zone to which the disaster recovery site belongs.
     * 
     */
    public Optional<Output<String>> destinationZoneId() {
        return Optional.ofNullable(this.destinationZoneId);
    }

    /**
     * The ID of the primary disk.
     * 
     */
    @Import(name="diskId")
    private @Nullable Output<String> diskId;

    /**
     * @return The ID of the primary disk.
     * 
     */
    public Optional<Output<String>> diskId() {
        return Optional.ofNullable(this.diskId);
    }

    /**
     * The name of the asynchronous replication relationship. The length must be 2 to 128 characters in length and must start with a letter or Chinese name. It cannot start with http:// or https. It can contain Chinese, English, numbers, half-width colons (:), underscores (_), half-width periods (.), or dashes (-).
     * 
     */
    @Import(name="diskReplicaPairName")
    private @Nullable Output<String> diskReplicaPairName;

    /**
     * @return The name of the asynchronous replication relationship. The length must be 2 to 128 characters in length and must start with a letter or Chinese name. It cannot start with http:// or https. It can contain Chinese, English, numbers, half-width colons (:), underscores (_), half-width periods (.), or dashes (-).
     * 
     */
    public Optional<Output<String>> diskReplicaPairName() {
        return Optional.ofNullable(this.diskReplicaPairName);
    }

    /**
     * Whether to synchronize immediately. Value range:
     * - true: Start data synchronization immediately.
     * - false: Data Synchronization starts after the RPO time period.
     * 
     * Default value: false.
     * 
     */
    @Import(name="oneShot")
    private @Nullable Output<Boolean> oneShot;

    /**
     * @return Whether to synchronize immediately. Value range:
     * - true: Start data synchronization immediately.
     * - false: Data Synchronization starts after the RPO time period.
     * 
     * Default value: false.
     * 
     */
    public Optional<Output<Boolean>> oneShot() {
        return Optional.ofNullable(this.oneShot);
    }

    /**
     * . Field &#39;pair_name&#39; has been deprecated from provider version 1.245.0. New field &#39;disk_replica_pair_name&#39; instead.
     * 
     * @deprecated
     * Field &#39;pair_name&#39; has been deprecated since provider version 1.245.0. New field &#39;disk_replica_pair_name&#39; instead.
     * 
     */
    @Deprecated /* Field 'pair_name' has been deprecated since provider version 1.245.0. New field 'disk_replica_pair_name' instead. */
    @Import(name="pairName")
    private @Nullable Output<String> pairName;

    /**
     * @return . Field &#39;pair_name&#39; has been deprecated from provider version 1.245.0. New field &#39;disk_replica_pair_name&#39; instead.
     * 
     * @deprecated
     * Field &#39;pair_name&#39; has been deprecated since provider version 1.245.0. New field &#39;disk_replica_pair_name&#39; instead.
     * 
     */
    @Deprecated /* Field 'pair_name' has been deprecated since provider version 1.245.0. New field 'disk_replica_pair_name' instead. */
    public Optional<Output<String>> pairName() {
        return Optional.ofNullable(this.pairName);
    }

    /**
     * The payment type of the resource
     * 
     */
    @Import(name="paymentType")
    private @Nullable Output<String> paymentType;

    /**
     * @return The payment type of the resource
     * 
     */
    public Optional<Output<String>> paymentType() {
        return Optional.ofNullable(this.paymentType);
    }

    /**
     * The purchase duration of the asynchronous replication relationship. This parameter is required when &#39;ChargeType = PrePay. The duration unit is specified by&#39;periodunit&#39;, and the value range is:
     * - When &#39;PeriodUnit = Week&#39;, the value range of this parameter is 1, 2, 3, and 4.
     * - When &#39;PeriodUnit = Month&#39;, the value range of this parameter is 1, 2, 3, 4, 5, 6, 7, 8, 9, 12, 24, 36, 48, 60.
     * 
     */
    @Import(name="period")
    private @Nullable Output<Integer> period;

    /**
     * @return The purchase duration of the asynchronous replication relationship. This parameter is required when &#39;ChargeType = PrePay. The duration unit is specified by&#39;periodunit&#39;, and the value range is:
     * - When &#39;PeriodUnit = Week&#39;, the value range of this parameter is 1, 2, 3, and 4.
     * - When &#39;PeriodUnit = Month&#39;, the value range of this parameter is 1, 2, 3, 4, 5, 6, 7, 8, 9, 12, 24, 36, 48, 60.
     * 
     */
    public Optional<Output<Integer>> period() {
        return Optional.ofNullable(this.period);
    }

    /**
     * The unit of the purchase time of the asynchronous replication relationship. Value range:
     * - Week: Week.
     * - Month: Month.
     * 
     * Default value: Month.
     * 
     */
    @Import(name="periodUnit")
    private @Nullable Output<String> periodUnit;

    /**
     * @return The unit of the purchase time of the asynchronous replication relationship. Value range:
     * - Week: Week.
     * - Month: Month.
     * 
     * Default value: Month.
     * 
     */
    public Optional<Output<String>> periodUnit() {
        return Optional.ofNullable(this.periodUnit);
    }

    /**
     * The region ID  of the resource
     * 
     */
    @Import(name="regionId")
    private @Nullable Output<String> regionId;

    /**
     * @return The region ID  of the resource
     * 
     */
    public Optional<Output<String>> regionId() {
        return Optional.ofNullable(this.regionId);
    }

    /**
     * The ID of the resource group
     * 
     */
    @Import(name="resourceGroupId")
    private @Nullable Output<String> resourceGroupId;

    /**
     * @return The ID of the resource group
     * 
     */
    public Optional<Output<String>> resourceGroupId() {
        return Optional.ofNullable(this.resourceGroupId);
    }

    /**
     * Specifies whether to enable the reverse replication sub-feature. Valid values: true and false. Default value: true.
     * 
     */
    @Import(name="reverseReplicate")
    private @Nullable Output<Boolean> reverseReplicate;

    /**
     * @return Specifies whether to enable the reverse replication sub-feature. Valid values: true and false. Default value: true.
     * 
     */
    public Optional<Output<Boolean>> reverseReplicate() {
        return Optional.ofNullable(this.reverseReplicate);
    }

    /**
     * The RPO value set by the consistency group in seconds. Currently only 900 seconds are supported.
     * 
     */
    @Import(name="rpo")
    private @Nullable Output<Integer> rpo;

    /**
     * @return The RPO value set by the consistency group in seconds. Currently only 900 seconds are supported.
     * 
     */
    public Optional<Output<Integer>> rpo() {
        return Optional.ofNullable(this.rpo);
    }

    /**
     * The ID of the zone to which the production site belongs.
     * 
     */
    @Import(name="sourceZoneId")
    private @Nullable Output<String> sourceZoneId;

    /**
     * @return The ID of the zone to which the production site belongs.
     * 
     */
    public Optional<Output<String>> sourceZoneId() {
        return Optional.ofNullable(this.sourceZoneId);
    }

    /**
     * The status of the resource
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return The status of the resource
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * The tag of the resource
     * 
     * The following arguments will be discarded. Please use new fields as soon as possible:
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return The tag of the resource
     * 
     * The following arguments will be discarded. Please use new fields as soon as possible:
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private DiskReplicaPairState() {}

    private DiskReplicaPairState(DiskReplicaPairState $) {
        this.bandwidth = $.bandwidth;
        this.createTime = $.createTime;
        this.description = $.description;
        this.destinationDiskId = $.destinationDiskId;
        this.destinationRegionId = $.destinationRegionId;
        this.destinationZoneId = $.destinationZoneId;
        this.diskId = $.diskId;
        this.diskReplicaPairName = $.diskReplicaPairName;
        this.oneShot = $.oneShot;
        this.pairName = $.pairName;
        this.paymentType = $.paymentType;
        this.period = $.period;
        this.periodUnit = $.periodUnit;
        this.regionId = $.regionId;
        this.resourceGroupId = $.resourceGroupId;
        this.reverseReplicate = $.reverseReplicate;
        this.rpo = $.rpo;
        this.sourceZoneId = $.sourceZoneId;
        this.status = $.status;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DiskReplicaPairState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DiskReplicaPairState $;

        public Builder() {
            $ = new DiskReplicaPairState();
        }

        public Builder(DiskReplicaPairState defaults) {
            $ = new DiskReplicaPairState(Objects.requireNonNull(defaults));
        }

        /**
         * @param bandwidth The bandwidth for asynchronous data replication between cloud disks. The unit is Kbps. Value range:
         * - 10240 Kbps: equal to 10 Mbps.
         * - 20480 Kbps: equal to 20 Mbps.
         * - 51200 Kbps: equal to 50 Mbps.
         * - 102400 Kbps: equal to 100 Mbps.
         * 
         * Default value: 10240.
         * This parameter cannot be specified when the ChargeType value is PayAsYouGo The system value is 0, which indicates that the disk is dynamically allocated according to data write changes during asynchronous replication.
         * 
         * @return builder
         * 
         */
        public Builder bandwidth(@Nullable Output<Integer> bandwidth) {
            $.bandwidth = bandwidth;
            return this;
        }

        /**
         * @param bandwidth The bandwidth for asynchronous data replication between cloud disks. The unit is Kbps. Value range:
         * - 10240 Kbps: equal to 10 Mbps.
         * - 20480 Kbps: equal to 20 Mbps.
         * - 51200 Kbps: equal to 50 Mbps.
         * - 102400 Kbps: equal to 100 Mbps.
         * 
         * Default value: 10240.
         * This parameter cannot be specified when the ChargeType value is PayAsYouGo The system value is 0, which indicates that the disk is dynamically allocated according to data write changes during asynchronous replication.
         * 
         * @return builder
         * 
         */
        public Builder bandwidth(Integer bandwidth) {
            return bandwidth(Output.of(bandwidth));
        }

        /**
         * @param createTime The creation time of the resource
         * 
         * @return builder
         * 
         */
        public Builder createTime(@Nullable Output<Integer> createTime) {
            $.createTime = createTime;
            return this;
        }

        /**
         * @param createTime The creation time of the resource
         * 
         * @return builder
         * 
         */
        public Builder createTime(Integer createTime) {
            return createTime(Output.of(createTime));
        }

        /**
         * @param description The description of the asynchronous replication relationship. 2 to 256 English or Chinese characters in length and cannot start with&#39; http:// &#39;or&#39; https.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The description of the asynchronous replication relationship. 2 to 256 English or Chinese characters in length and cannot start with&#39; http:// &#39;or&#39; https.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param destinationDiskId The ID of the standby disk.
         * 
         * @return builder
         * 
         */
        public Builder destinationDiskId(@Nullable Output<String> destinationDiskId) {
            $.destinationDiskId = destinationDiskId;
            return this;
        }

        /**
         * @param destinationDiskId The ID of the standby disk.
         * 
         * @return builder
         * 
         */
        public Builder destinationDiskId(String destinationDiskId) {
            return destinationDiskId(Output.of(destinationDiskId));
        }

        /**
         * @param destinationRegionId The ID of the region to which the disaster recovery site belongs.
         * 
         * @return builder
         * 
         */
        public Builder destinationRegionId(@Nullable Output<String> destinationRegionId) {
            $.destinationRegionId = destinationRegionId;
            return this;
        }

        /**
         * @param destinationRegionId The ID of the region to which the disaster recovery site belongs.
         * 
         * @return builder
         * 
         */
        public Builder destinationRegionId(String destinationRegionId) {
            return destinationRegionId(Output.of(destinationRegionId));
        }

        /**
         * @param destinationZoneId The ID of the zone to which the disaster recovery site belongs.
         * 
         * @return builder
         * 
         */
        public Builder destinationZoneId(@Nullable Output<String> destinationZoneId) {
            $.destinationZoneId = destinationZoneId;
            return this;
        }

        /**
         * @param destinationZoneId The ID of the zone to which the disaster recovery site belongs.
         * 
         * @return builder
         * 
         */
        public Builder destinationZoneId(String destinationZoneId) {
            return destinationZoneId(Output.of(destinationZoneId));
        }

        /**
         * @param diskId The ID of the primary disk.
         * 
         * @return builder
         * 
         */
        public Builder diskId(@Nullable Output<String> diskId) {
            $.diskId = diskId;
            return this;
        }

        /**
         * @param diskId The ID of the primary disk.
         * 
         * @return builder
         * 
         */
        public Builder diskId(String diskId) {
            return diskId(Output.of(diskId));
        }

        /**
         * @param diskReplicaPairName The name of the asynchronous replication relationship. The length must be 2 to 128 characters in length and must start with a letter or Chinese name. It cannot start with http:// or https. It can contain Chinese, English, numbers, half-width colons (:), underscores (_), half-width periods (.), or dashes (-).
         * 
         * @return builder
         * 
         */
        public Builder diskReplicaPairName(@Nullable Output<String> diskReplicaPairName) {
            $.diskReplicaPairName = diskReplicaPairName;
            return this;
        }

        /**
         * @param diskReplicaPairName The name of the asynchronous replication relationship. The length must be 2 to 128 characters in length and must start with a letter or Chinese name. It cannot start with http:// or https. It can contain Chinese, English, numbers, half-width colons (:), underscores (_), half-width periods (.), or dashes (-).
         * 
         * @return builder
         * 
         */
        public Builder diskReplicaPairName(String diskReplicaPairName) {
            return diskReplicaPairName(Output.of(diskReplicaPairName));
        }

        /**
         * @param oneShot Whether to synchronize immediately. Value range:
         * - true: Start data synchronization immediately.
         * - false: Data Synchronization starts after the RPO time period.
         * 
         * Default value: false.
         * 
         * @return builder
         * 
         */
        public Builder oneShot(@Nullable Output<Boolean> oneShot) {
            $.oneShot = oneShot;
            return this;
        }

        /**
         * @param oneShot Whether to synchronize immediately. Value range:
         * - true: Start data synchronization immediately.
         * - false: Data Synchronization starts after the RPO time period.
         * 
         * Default value: false.
         * 
         * @return builder
         * 
         */
        public Builder oneShot(Boolean oneShot) {
            return oneShot(Output.of(oneShot));
        }

        /**
         * @param pairName . Field &#39;pair_name&#39; has been deprecated from provider version 1.245.0. New field &#39;disk_replica_pair_name&#39; instead.
         * 
         * @return builder
         * 
         * @deprecated
         * Field &#39;pair_name&#39; has been deprecated since provider version 1.245.0. New field &#39;disk_replica_pair_name&#39; instead.
         * 
         */
        @Deprecated /* Field 'pair_name' has been deprecated since provider version 1.245.0. New field 'disk_replica_pair_name' instead. */
        public Builder pairName(@Nullable Output<String> pairName) {
            $.pairName = pairName;
            return this;
        }

        /**
         * @param pairName . Field &#39;pair_name&#39; has been deprecated from provider version 1.245.0. New field &#39;disk_replica_pair_name&#39; instead.
         * 
         * @return builder
         * 
         * @deprecated
         * Field &#39;pair_name&#39; has been deprecated since provider version 1.245.0. New field &#39;disk_replica_pair_name&#39; instead.
         * 
         */
        @Deprecated /* Field 'pair_name' has been deprecated since provider version 1.245.0. New field 'disk_replica_pair_name' instead. */
        public Builder pairName(String pairName) {
            return pairName(Output.of(pairName));
        }

        /**
         * @param paymentType The payment type of the resource
         * 
         * @return builder
         * 
         */
        public Builder paymentType(@Nullable Output<String> paymentType) {
            $.paymentType = paymentType;
            return this;
        }

        /**
         * @param paymentType The payment type of the resource
         * 
         * @return builder
         * 
         */
        public Builder paymentType(String paymentType) {
            return paymentType(Output.of(paymentType));
        }

        /**
         * @param period The purchase duration of the asynchronous replication relationship. This parameter is required when &#39;ChargeType = PrePay. The duration unit is specified by&#39;periodunit&#39;, and the value range is:
         * - When &#39;PeriodUnit = Week&#39;, the value range of this parameter is 1, 2, 3, and 4.
         * - When &#39;PeriodUnit = Month&#39;, the value range of this parameter is 1, 2, 3, 4, 5, 6, 7, 8, 9, 12, 24, 36, 48, 60.
         * 
         * @return builder
         * 
         */
        public Builder period(@Nullable Output<Integer> period) {
            $.period = period;
            return this;
        }

        /**
         * @param period The purchase duration of the asynchronous replication relationship. This parameter is required when &#39;ChargeType = PrePay. The duration unit is specified by&#39;periodunit&#39;, and the value range is:
         * - When &#39;PeriodUnit = Week&#39;, the value range of this parameter is 1, 2, 3, and 4.
         * - When &#39;PeriodUnit = Month&#39;, the value range of this parameter is 1, 2, 3, 4, 5, 6, 7, 8, 9, 12, 24, 36, 48, 60.
         * 
         * @return builder
         * 
         */
        public Builder period(Integer period) {
            return period(Output.of(period));
        }

        /**
         * @param periodUnit The unit of the purchase time of the asynchronous replication relationship. Value range:
         * - Week: Week.
         * - Month: Month.
         * 
         * Default value: Month.
         * 
         * @return builder
         * 
         */
        public Builder periodUnit(@Nullable Output<String> periodUnit) {
            $.periodUnit = periodUnit;
            return this;
        }

        /**
         * @param periodUnit The unit of the purchase time of the asynchronous replication relationship. Value range:
         * - Week: Week.
         * - Month: Month.
         * 
         * Default value: Month.
         * 
         * @return builder
         * 
         */
        public Builder periodUnit(String periodUnit) {
            return periodUnit(Output.of(periodUnit));
        }

        /**
         * @param regionId The region ID  of the resource
         * 
         * @return builder
         * 
         */
        public Builder regionId(@Nullable Output<String> regionId) {
            $.regionId = regionId;
            return this;
        }

        /**
         * @param regionId The region ID  of the resource
         * 
         * @return builder
         * 
         */
        public Builder regionId(String regionId) {
            return regionId(Output.of(regionId));
        }

        /**
         * @param resourceGroupId The ID of the resource group
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupId(@Nullable Output<String> resourceGroupId) {
            $.resourceGroupId = resourceGroupId;
            return this;
        }

        /**
         * @param resourceGroupId The ID of the resource group
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupId(String resourceGroupId) {
            return resourceGroupId(Output.of(resourceGroupId));
        }

        /**
         * @param reverseReplicate Specifies whether to enable the reverse replication sub-feature. Valid values: true and false. Default value: true.
         * 
         * @return builder
         * 
         */
        public Builder reverseReplicate(@Nullable Output<Boolean> reverseReplicate) {
            $.reverseReplicate = reverseReplicate;
            return this;
        }

        /**
         * @param reverseReplicate Specifies whether to enable the reverse replication sub-feature. Valid values: true and false. Default value: true.
         * 
         * @return builder
         * 
         */
        public Builder reverseReplicate(Boolean reverseReplicate) {
            return reverseReplicate(Output.of(reverseReplicate));
        }

        /**
         * @param rpo The RPO value set by the consistency group in seconds. Currently only 900 seconds are supported.
         * 
         * @return builder
         * 
         */
        public Builder rpo(@Nullable Output<Integer> rpo) {
            $.rpo = rpo;
            return this;
        }

        /**
         * @param rpo The RPO value set by the consistency group in seconds. Currently only 900 seconds are supported.
         * 
         * @return builder
         * 
         */
        public Builder rpo(Integer rpo) {
            return rpo(Output.of(rpo));
        }

        /**
         * @param sourceZoneId The ID of the zone to which the production site belongs.
         * 
         * @return builder
         * 
         */
        public Builder sourceZoneId(@Nullable Output<String> sourceZoneId) {
            $.sourceZoneId = sourceZoneId;
            return this;
        }

        /**
         * @param sourceZoneId The ID of the zone to which the production site belongs.
         * 
         * @return builder
         * 
         */
        public Builder sourceZoneId(String sourceZoneId) {
            return sourceZoneId(Output.of(sourceZoneId));
        }

        /**
         * @param status The status of the resource
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status The status of the resource
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param tags The tag of the resource
         * 
         * The following arguments will be discarded. Please use new fields as soon as possible:
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags The tag of the resource
         * 
         * The following arguments will be discarded. Please use new fields as soon as possible:
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public DiskReplicaPairState build() {
            return $;
        }
    }

}
