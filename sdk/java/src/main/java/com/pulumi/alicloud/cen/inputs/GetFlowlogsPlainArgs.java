// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.cen.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetFlowlogsPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetFlowlogsPlainArgs Empty = new GetFlowlogsPlainArgs();

    /**
     * The ID of Cen instance.
     * 
     */
    @Import(name="cenId")
    private @Nullable String cenId;

    /**
     * @return The ID of Cen instance.
     * 
     */
    public Optional<String> cenId() {
        return Optional.ofNullable(this.cenId);
    }

    /**
     * The description of the flowlog.
     * 
     */
    @Import(name="description")
    private @Nullable String description;

    /**
     * @return The description of the flowlog.
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The ID of FlowLog.
     * 
     */
    @Import(name="flowLogId")
    private @Nullable String flowLogId;

    /**
     * @return The ID of FlowLog.
     * 
     */
    public Optional<String> flowLogId() {
        return Optional.ofNullable(this.flowLogId);
    }

    /**
     * The name of the flowlog.
     * 
     */
    @Import(name="flowLogName")
    private @Nullable String flowLogName;

    /**
     * @return The name of the flowlog.
     * 
     */
    public Optional<String> flowLogName() {
        return Optional.ofNullable(this.flowLogName);
    }

    /**
     * Flowlog Version.
     * 
     */
    @Import(name="flowLogVersion")
    private @Nullable String flowLogVersion;

    /**
     * @return Flowlog Version.
     * 
     */
    public Optional<String> flowLogVersion() {
        return Optional.ofNullable(this.flowLogVersion);
    }

    /**
     * A list of Flow Log IDs.
     * 
     */
    @Import(name="ids")
    private @Nullable List<String> ids;

    /**
     * @return A list of Flow Log IDs.
     * 
     */
    public Optional<List<String>> ids() {
        return Optional.ofNullable(this.ids);
    }

    /**
     * The duration of the capture window for the flow log to capture traffic. Unit: seconds. Valid values: **60** or **600 * *. Default value: **600 * *.
     * 
     */
    @Import(name="interval")
    private @Nullable Integer interval;

    /**
     * @return The duration of the capture window for the flow log to capture traffic. Unit: seconds. Valid values: **60** or **600 * *. Default value: **600 * *.
     * 
     */
    public Optional<Integer> interval() {
        return Optional.ofNullable(this.interval);
    }

    /**
     * The LogStore that stores the flowlog.
     * 
     */
    @Import(name="logStoreName")
    private @Nullable String logStoreName;

    /**
     * @return The LogStore that stores the flowlog.
     * 
     */
    public Optional<String> logStoreName() {
        return Optional.ofNullable(this.logStoreName);
    }

    /**
     * A regex string to filter results by Group Metric Rule name.
     * 
     */
    @Import(name="nameRegex")
    private @Nullable String nameRegex;

    /**
     * @return A regex string to filter results by Group Metric Rule name.
     * 
     */
    public Optional<String> nameRegex() {
        return Optional.ofNullable(this.nameRegex);
    }

    /**
     * File name where to save data source results (after running `pulumi preview`).
     * 
     */
    @Import(name="outputFile")
    private @Nullable String outputFile;

    /**
     * @return File name where to save data source results (after running `pulumi preview`).
     * 
     */
    public Optional<String> outputFile() {
        return Optional.ofNullable(this.outputFile);
    }

    /**
     * Current page number.
     * 
     */
    @Import(name="pageNumber")
    private @Nullable Integer pageNumber;

    /**
     * @return Current page number.
     * 
     */
    public Optional<Integer> pageNumber() {
        return Optional.ofNullable(this.pageNumber);
    }

    /**
     * Number of records per page.
     * 
     */
    @Import(name="pageSize")
    private @Nullable Integer pageSize;

    /**
     * @return Number of records per page.
     * 
     */
    public Optional<Integer> pageSize() {
        return Optional.ofNullable(this.pageSize);
    }

    /**
     * The Project that stores the flowlog.
     * 
     */
    @Import(name="projectName")
    private @Nullable String projectName;

    /**
     * @return The Project that stores the flowlog.
     * 
     */
    public Optional<String> projectName() {
        return Optional.ofNullable(this.projectName);
    }

    /**
     * Region id
     * 
     */
    @Import(name="regionId")
    private @Nullable String regionId;

    /**
     * @return Region id
     * 
     */
    public Optional<String> regionId() {
        return Optional.ofNullable(this.regionId);
    }

    /**
     * The status of the flow log. Valid values:-**Active**: started.-**InActive**: not started.
     * 
     */
    @Import(name="status")
    private @Nullable String status;

    /**
     * @return The status of the flow log. Valid values:-**Active**: started.-**InActive**: not started.
     * 
     */
    public Optional<String> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * Transit Router ID
     * 
     */
    @Import(name="transitRouterId")
    private @Nullable String transitRouterId;

    /**
     * @return Transit Router ID
     * 
     */
    public Optional<String> transitRouterId() {
        return Optional.ofNullable(this.transitRouterId);
    }

    private GetFlowlogsPlainArgs() {}

    private GetFlowlogsPlainArgs(GetFlowlogsPlainArgs $) {
        this.cenId = $.cenId;
        this.description = $.description;
        this.flowLogId = $.flowLogId;
        this.flowLogName = $.flowLogName;
        this.flowLogVersion = $.flowLogVersion;
        this.ids = $.ids;
        this.interval = $.interval;
        this.logStoreName = $.logStoreName;
        this.nameRegex = $.nameRegex;
        this.outputFile = $.outputFile;
        this.pageNumber = $.pageNumber;
        this.pageSize = $.pageSize;
        this.projectName = $.projectName;
        this.regionId = $.regionId;
        this.status = $.status;
        this.transitRouterId = $.transitRouterId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetFlowlogsPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetFlowlogsPlainArgs $;

        public Builder() {
            $ = new GetFlowlogsPlainArgs();
        }

        public Builder(GetFlowlogsPlainArgs defaults) {
            $ = new GetFlowlogsPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param cenId The ID of Cen instance.
         * 
         * @return builder
         * 
         */
        public Builder cenId(@Nullable String cenId) {
            $.cenId = cenId;
            return this;
        }

        /**
         * @param description The description of the flowlog.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable String description) {
            $.description = description;
            return this;
        }

        /**
         * @param flowLogId The ID of FlowLog.
         * 
         * @return builder
         * 
         */
        public Builder flowLogId(@Nullable String flowLogId) {
            $.flowLogId = flowLogId;
            return this;
        }

        /**
         * @param flowLogName The name of the flowlog.
         * 
         * @return builder
         * 
         */
        public Builder flowLogName(@Nullable String flowLogName) {
            $.flowLogName = flowLogName;
            return this;
        }

        /**
         * @param flowLogVersion Flowlog Version.
         * 
         * @return builder
         * 
         */
        public Builder flowLogVersion(@Nullable String flowLogVersion) {
            $.flowLogVersion = flowLogVersion;
            return this;
        }

        /**
         * @param ids A list of Flow Log IDs.
         * 
         * @return builder
         * 
         */
        public Builder ids(@Nullable List<String> ids) {
            $.ids = ids;
            return this;
        }

        /**
         * @param ids A list of Flow Log IDs.
         * 
         * @return builder
         * 
         */
        public Builder ids(String... ids) {
            return ids(List.of(ids));
        }

        /**
         * @param interval The duration of the capture window for the flow log to capture traffic. Unit: seconds. Valid values: **60** or **600 * *. Default value: **600 * *.
         * 
         * @return builder
         * 
         */
        public Builder interval(@Nullable Integer interval) {
            $.interval = interval;
            return this;
        }

        /**
         * @param logStoreName The LogStore that stores the flowlog.
         * 
         * @return builder
         * 
         */
        public Builder logStoreName(@Nullable String logStoreName) {
            $.logStoreName = logStoreName;
            return this;
        }

        /**
         * @param nameRegex A regex string to filter results by Group Metric Rule name.
         * 
         * @return builder
         * 
         */
        public Builder nameRegex(@Nullable String nameRegex) {
            $.nameRegex = nameRegex;
            return this;
        }

        /**
         * @param outputFile File name where to save data source results (after running `pulumi preview`).
         * 
         * @return builder
         * 
         */
        public Builder outputFile(@Nullable String outputFile) {
            $.outputFile = outputFile;
            return this;
        }

        /**
         * @param pageNumber Current page number.
         * 
         * @return builder
         * 
         */
        public Builder pageNumber(@Nullable Integer pageNumber) {
            $.pageNumber = pageNumber;
            return this;
        }

        /**
         * @param pageSize Number of records per page.
         * 
         * @return builder
         * 
         */
        public Builder pageSize(@Nullable Integer pageSize) {
            $.pageSize = pageSize;
            return this;
        }

        /**
         * @param projectName The Project that stores the flowlog.
         * 
         * @return builder
         * 
         */
        public Builder projectName(@Nullable String projectName) {
            $.projectName = projectName;
            return this;
        }

        /**
         * @param regionId Region id
         * 
         * @return builder
         * 
         */
        public Builder regionId(@Nullable String regionId) {
            $.regionId = regionId;
            return this;
        }

        /**
         * @param status The status of the flow log. Valid values:-**Active**: started.-**InActive**: not started.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable String status) {
            $.status = status;
            return this;
        }

        /**
         * @param transitRouterId Transit Router ID
         * 
         * @return builder
         * 
         */
        public Builder transitRouterId(@Nullable String transitRouterId) {
            $.transitRouterId = transitRouterId;
            return this;
        }

        public GetFlowlogsPlainArgs build() {
            return $;
        }
    }

}
