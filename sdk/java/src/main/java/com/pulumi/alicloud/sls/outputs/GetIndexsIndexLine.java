// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.sls.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetIndexsIndexLine {
    /**
     * @return Is case sensitive.
     * 
     */
    private Boolean caseSensitive;
    /**
     * @return Does it include Chinese.
     * 
     */
    private Boolean chn;
    /**
     * @return List of excluded fields.
     * 
     */
    private List<String> excludeKeys;
    /**
     * @return Include field list.
     * 
     */
    private List<String> includeKeys;
    /**
     * @return Delimiter.
     * 
     */
    private List<String> tokens;

    private GetIndexsIndexLine() {}
    /**
     * @return Is case sensitive.
     * 
     */
    public Boolean caseSensitive() {
        return this.caseSensitive;
    }
    /**
     * @return Does it include Chinese.
     * 
     */
    public Boolean chn() {
        return this.chn;
    }
    /**
     * @return List of excluded fields.
     * 
     */
    public List<String> excludeKeys() {
        return this.excludeKeys;
    }
    /**
     * @return Include field list.
     * 
     */
    public List<String> includeKeys() {
        return this.includeKeys;
    }
    /**
     * @return Delimiter.
     * 
     */
    public List<String> tokens() {
        return this.tokens;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetIndexsIndexLine defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean caseSensitive;
        private Boolean chn;
        private List<String> excludeKeys;
        private List<String> includeKeys;
        private List<String> tokens;
        public Builder() {}
        public Builder(GetIndexsIndexLine defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.caseSensitive = defaults.caseSensitive;
    	      this.chn = defaults.chn;
    	      this.excludeKeys = defaults.excludeKeys;
    	      this.includeKeys = defaults.includeKeys;
    	      this.tokens = defaults.tokens;
        }

        @CustomType.Setter
        public Builder caseSensitive(Boolean caseSensitive) {
            if (caseSensitive == null) {
              throw new MissingRequiredPropertyException("GetIndexsIndexLine", "caseSensitive");
            }
            this.caseSensitive = caseSensitive;
            return this;
        }
        @CustomType.Setter
        public Builder chn(Boolean chn) {
            if (chn == null) {
              throw new MissingRequiredPropertyException("GetIndexsIndexLine", "chn");
            }
            this.chn = chn;
            return this;
        }
        @CustomType.Setter
        public Builder excludeKeys(List<String> excludeKeys) {
            if (excludeKeys == null) {
              throw new MissingRequiredPropertyException("GetIndexsIndexLine", "excludeKeys");
            }
            this.excludeKeys = excludeKeys;
            return this;
        }
        public Builder excludeKeys(String... excludeKeys) {
            return excludeKeys(List.of(excludeKeys));
        }
        @CustomType.Setter
        public Builder includeKeys(List<String> includeKeys) {
            if (includeKeys == null) {
              throw new MissingRequiredPropertyException("GetIndexsIndexLine", "includeKeys");
            }
            this.includeKeys = includeKeys;
            return this;
        }
        public Builder includeKeys(String... includeKeys) {
            return includeKeys(List.of(includeKeys));
        }
        @CustomType.Setter
        public Builder tokens(List<String> tokens) {
            if (tokens == null) {
              throw new MissingRequiredPropertyException("GetIndexsIndexLine", "tokens");
            }
            this.tokens = tokens;
            return this;
        }
        public Builder tokens(String... tokens) {
            return tokens(List.of(tokens));
        }
        public GetIndexsIndexLine build() {
            final var _resultValue = new GetIndexsIndexLine();
            _resultValue.caseSensitive = caseSensitive;
            _resultValue.chn = chn;
            _resultValue.excludeKeys = excludeKeys;
            _resultValue.includeKeys = includeKeys;
            _resultValue.tokens = tokens;
            return _resultValue;
        }
    }
}
