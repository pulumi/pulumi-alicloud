// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.ess.inputs;

import com.pulumi.alicloud.ess.inputs.ScalingRuleStepAdjustmentArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ScalingRuleState extends com.pulumi.resources.ResourceArgs {

    public static final ScalingRuleState Empty = new ScalingRuleState();

    /**
     * Adjustment mode of a scaling rule. Optional values:
     * - QuantityChangeInCapacity: It is used to increase or decrease a specified number of ECS instances.
     * - PercentChangeInCapacity: It is used to increase or decrease a specified proportion of ECS instances.
     * - TotalCapacity: It is used to adjust the quantity of ECS instances in the current scaling group to a specified value.
     * 
     */
    @Import(name="adjustmentType")
    private @Nullable Output<String> adjustmentType;

    /**
     * @return Adjustment mode of a scaling rule. Optional values:
     * - QuantityChangeInCapacity: It is used to increase or decrease a specified number of ECS instances.
     * - PercentChangeInCapacity: It is used to increase or decrease a specified proportion of ECS instances.
     * - TotalCapacity: It is used to adjust the quantity of ECS instances in the current scaling group to a specified value.
     * 
     */
    public Optional<Output<String>> adjustmentType() {
        return Optional.ofNullable(this.adjustmentType);
    }

    /**
     * The number of ECS instances to be adjusted in the scaling rule. This parameter is required and applicable only to simple scaling rules. The number of ECS instances to be adjusted in a single scaling activity cannot exceed 500. Value range:
     * - QuantityChangeInCapacity：(0, 500] U (-500, 0]
     * - PercentChangeInCapacity：[0, 10000] U [-100, 0]
     * - TotalCapacity：[0, 1000]
     * 
     */
    @Import(name="adjustmentValue")
    private @Nullable Output<Integer> adjustmentValue;

    /**
     * @return The number of ECS instances to be adjusted in the scaling rule. This parameter is required and applicable only to simple scaling rules. The number of ECS instances to be adjusted in a single scaling activity cannot exceed 500. Value range:
     * - QuantityChangeInCapacity：(0, 500] U (-500, 0]
     * - PercentChangeInCapacity：[0, 10000] U [-100, 0]
     * - TotalCapacity：[0, 1000]
     * 
     */
    public Optional<Output<Integer>> adjustmentValue() {
        return Optional.ofNullable(this.adjustmentValue);
    }

    /**
     * The unique identifier of the scaling rule.
     * 
     */
    @Import(name="ari")
    private @Nullable Output<String> ari;

    /**
     * @return The unique identifier of the scaling rule.
     * 
     */
    public Optional<Output<String>> ari() {
        return Optional.ofNullable(this.ari);
    }

    /**
     * The cooldown time of the scaling rule. This parameter is applicable only to simple scaling rules. Value range: [0, 86,400], in seconds. The default value is empty，if not set, the return value will be 0, which is the default value of integer.
     * 
     */
    @Import(name="cooldown")
    private @Nullable Output<Integer> cooldown;

    /**
     * @return The cooldown time of the scaling rule. This parameter is applicable only to simple scaling rules. Value range: [0, 86,400], in seconds. The default value is empty，if not set, the return value will be 0, which is the default value of integer.
     * 
     */
    public Optional<Output<Integer>> cooldown() {
        return Optional.ofNullable(this.cooldown);
    }

    /**
     * Indicates whether scale in by the target tracking policy is disabled. Default to false.
     * 
     */
    @Import(name="disableScaleIn")
    private @Nullable Output<Boolean> disableScaleIn;

    /**
     * @return Indicates whether scale in by the target tracking policy is disabled. Default to false.
     * 
     */
    public Optional<Output<Boolean>> disableScaleIn() {
        return Optional.ofNullable(this.disableScaleIn);
    }

    /**
     * The estimated time, in seconds, until a newly launched instance will contribute CloudMonitor metrics. Default to 300.
     * 
     */
    @Import(name="estimatedInstanceWarmup")
    private @Nullable Output<Integer> estimatedInstanceWarmup;

    /**
     * @return The estimated time, in seconds, until a newly launched instance will contribute CloudMonitor metrics. Default to 300.
     * 
     */
    public Optional<Output<Integer>> estimatedInstanceWarmup() {
        return Optional.ofNullable(this.estimatedInstanceWarmup);
    }

    /**
     * A CloudMonitor metric name.
     * 
     */
    @Import(name="metricName")
    private @Nullable Output<String> metricName;

    /**
     * @return A CloudMonitor metric name.
     * 
     */
    public Optional<Output<String>> metricName() {
        return Optional.ofNullable(this.metricName);
    }

    /**
     * ID of the scaling group of a scaling rule.
     * 
     */
    @Import(name="scalingGroupId")
    private @Nullable Output<String> scalingGroupId;

    /**
     * @return ID of the scaling group of a scaling rule.
     * 
     */
    public Optional<Output<String>> scalingGroupId() {
        return Optional.ofNullable(this.scalingGroupId);
    }

    /**
     * Name shown for the scaling rule, which must contain 2-64 characters (English or Chinese), starting with numbers, English letters or Chinese characters, and can contain number, underscores `_`, hypens `-`, and decimal point `.`. If this parameter value is not specified, the default value is scaling rule id.
     * 
     */
    @Import(name="scalingRuleName")
    private @Nullable Output<String> scalingRuleName;

    /**
     * @return Name shown for the scaling rule, which must contain 2-64 characters (English or Chinese), starting with numbers, English letters or Chinese characters, and can contain number, underscores `_`, hypens `-`, and decimal point `.`. If this parameter value is not specified, the default value is scaling rule id.
     * 
     */
    public Optional<Output<String>> scalingRuleName() {
        return Optional.ofNullable(this.scalingRuleName);
    }

    /**
     * The scaling rule type, either &#34;SimpleScalingRule&#34;, &#34;TargetTrackingScalingRule&#34;, &#34;StepScalingRule&#34;. Default to &#34;SimpleScalingRule&#34;.
     * 
     */
    @Import(name="scalingRuleType")
    private @Nullable Output<String> scalingRuleType;

    /**
     * @return The scaling rule type, either &#34;SimpleScalingRule&#34;, &#34;TargetTrackingScalingRule&#34;, &#34;StepScalingRule&#34;. Default to &#34;SimpleScalingRule&#34;.
     * 
     */
    public Optional<Output<String>> scalingRuleType() {
        return Optional.ofNullable(this.scalingRuleType);
    }

    /**
     * Steps for StepScalingRule. See `step_adjustment` below.
     * 
     */
    @Import(name="stepAdjustments")
    private @Nullable Output<List<ScalingRuleStepAdjustmentArgs>> stepAdjustments;

    /**
     * @return Steps for StepScalingRule. See `step_adjustment` below.
     * 
     */
    public Optional<Output<List<ScalingRuleStepAdjustmentArgs>>> stepAdjustments() {
        return Optional.ofNullable(this.stepAdjustments);
    }

    /**
     * The target value for the metric.
     * 
     */
    @Import(name="targetValue")
    private @Nullable Output<Double> targetValue;

    /**
     * @return The target value for the metric.
     * 
     */
    public Optional<Output<Double>> targetValue() {
        return Optional.ofNullable(this.targetValue);
    }

    private ScalingRuleState() {}

    private ScalingRuleState(ScalingRuleState $) {
        this.adjustmentType = $.adjustmentType;
        this.adjustmentValue = $.adjustmentValue;
        this.ari = $.ari;
        this.cooldown = $.cooldown;
        this.disableScaleIn = $.disableScaleIn;
        this.estimatedInstanceWarmup = $.estimatedInstanceWarmup;
        this.metricName = $.metricName;
        this.scalingGroupId = $.scalingGroupId;
        this.scalingRuleName = $.scalingRuleName;
        this.scalingRuleType = $.scalingRuleType;
        this.stepAdjustments = $.stepAdjustments;
        this.targetValue = $.targetValue;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ScalingRuleState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ScalingRuleState $;

        public Builder() {
            $ = new ScalingRuleState();
        }

        public Builder(ScalingRuleState defaults) {
            $ = new ScalingRuleState(Objects.requireNonNull(defaults));
        }

        /**
         * @param adjustmentType Adjustment mode of a scaling rule. Optional values:
         * - QuantityChangeInCapacity: It is used to increase or decrease a specified number of ECS instances.
         * - PercentChangeInCapacity: It is used to increase or decrease a specified proportion of ECS instances.
         * - TotalCapacity: It is used to adjust the quantity of ECS instances in the current scaling group to a specified value.
         * 
         * @return builder
         * 
         */
        public Builder adjustmentType(@Nullable Output<String> adjustmentType) {
            $.adjustmentType = adjustmentType;
            return this;
        }

        /**
         * @param adjustmentType Adjustment mode of a scaling rule. Optional values:
         * - QuantityChangeInCapacity: It is used to increase or decrease a specified number of ECS instances.
         * - PercentChangeInCapacity: It is used to increase or decrease a specified proportion of ECS instances.
         * - TotalCapacity: It is used to adjust the quantity of ECS instances in the current scaling group to a specified value.
         * 
         * @return builder
         * 
         */
        public Builder adjustmentType(String adjustmentType) {
            return adjustmentType(Output.of(adjustmentType));
        }

        /**
         * @param adjustmentValue The number of ECS instances to be adjusted in the scaling rule. This parameter is required and applicable only to simple scaling rules. The number of ECS instances to be adjusted in a single scaling activity cannot exceed 500. Value range:
         * - QuantityChangeInCapacity：(0, 500] U (-500, 0]
         * - PercentChangeInCapacity：[0, 10000] U [-100, 0]
         * - TotalCapacity：[0, 1000]
         * 
         * @return builder
         * 
         */
        public Builder adjustmentValue(@Nullable Output<Integer> adjustmentValue) {
            $.adjustmentValue = adjustmentValue;
            return this;
        }

        /**
         * @param adjustmentValue The number of ECS instances to be adjusted in the scaling rule. This parameter is required and applicable only to simple scaling rules. The number of ECS instances to be adjusted in a single scaling activity cannot exceed 500. Value range:
         * - QuantityChangeInCapacity：(0, 500] U (-500, 0]
         * - PercentChangeInCapacity：[0, 10000] U [-100, 0]
         * - TotalCapacity：[0, 1000]
         * 
         * @return builder
         * 
         */
        public Builder adjustmentValue(Integer adjustmentValue) {
            return adjustmentValue(Output.of(adjustmentValue));
        }

        /**
         * @param ari The unique identifier of the scaling rule.
         * 
         * @return builder
         * 
         */
        public Builder ari(@Nullable Output<String> ari) {
            $.ari = ari;
            return this;
        }

        /**
         * @param ari The unique identifier of the scaling rule.
         * 
         * @return builder
         * 
         */
        public Builder ari(String ari) {
            return ari(Output.of(ari));
        }

        /**
         * @param cooldown The cooldown time of the scaling rule. This parameter is applicable only to simple scaling rules. Value range: [0, 86,400], in seconds. The default value is empty，if not set, the return value will be 0, which is the default value of integer.
         * 
         * @return builder
         * 
         */
        public Builder cooldown(@Nullable Output<Integer> cooldown) {
            $.cooldown = cooldown;
            return this;
        }

        /**
         * @param cooldown The cooldown time of the scaling rule. This parameter is applicable only to simple scaling rules. Value range: [0, 86,400], in seconds. The default value is empty，if not set, the return value will be 0, which is the default value of integer.
         * 
         * @return builder
         * 
         */
        public Builder cooldown(Integer cooldown) {
            return cooldown(Output.of(cooldown));
        }

        /**
         * @param disableScaleIn Indicates whether scale in by the target tracking policy is disabled. Default to false.
         * 
         * @return builder
         * 
         */
        public Builder disableScaleIn(@Nullable Output<Boolean> disableScaleIn) {
            $.disableScaleIn = disableScaleIn;
            return this;
        }

        /**
         * @param disableScaleIn Indicates whether scale in by the target tracking policy is disabled. Default to false.
         * 
         * @return builder
         * 
         */
        public Builder disableScaleIn(Boolean disableScaleIn) {
            return disableScaleIn(Output.of(disableScaleIn));
        }

        /**
         * @param estimatedInstanceWarmup The estimated time, in seconds, until a newly launched instance will contribute CloudMonitor metrics. Default to 300.
         * 
         * @return builder
         * 
         */
        public Builder estimatedInstanceWarmup(@Nullable Output<Integer> estimatedInstanceWarmup) {
            $.estimatedInstanceWarmup = estimatedInstanceWarmup;
            return this;
        }

        /**
         * @param estimatedInstanceWarmup The estimated time, in seconds, until a newly launched instance will contribute CloudMonitor metrics. Default to 300.
         * 
         * @return builder
         * 
         */
        public Builder estimatedInstanceWarmup(Integer estimatedInstanceWarmup) {
            return estimatedInstanceWarmup(Output.of(estimatedInstanceWarmup));
        }

        /**
         * @param metricName A CloudMonitor metric name.
         * 
         * @return builder
         * 
         */
        public Builder metricName(@Nullable Output<String> metricName) {
            $.metricName = metricName;
            return this;
        }

        /**
         * @param metricName A CloudMonitor metric name.
         * 
         * @return builder
         * 
         */
        public Builder metricName(String metricName) {
            return metricName(Output.of(metricName));
        }

        /**
         * @param scalingGroupId ID of the scaling group of a scaling rule.
         * 
         * @return builder
         * 
         */
        public Builder scalingGroupId(@Nullable Output<String> scalingGroupId) {
            $.scalingGroupId = scalingGroupId;
            return this;
        }

        /**
         * @param scalingGroupId ID of the scaling group of a scaling rule.
         * 
         * @return builder
         * 
         */
        public Builder scalingGroupId(String scalingGroupId) {
            return scalingGroupId(Output.of(scalingGroupId));
        }

        /**
         * @param scalingRuleName Name shown for the scaling rule, which must contain 2-64 characters (English or Chinese), starting with numbers, English letters or Chinese characters, and can contain number, underscores `_`, hypens `-`, and decimal point `.`. If this parameter value is not specified, the default value is scaling rule id.
         * 
         * @return builder
         * 
         */
        public Builder scalingRuleName(@Nullable Output<String> scalingRuleName) {
            $.scalingRuleName = scalingRuleName;
            return this;
        }

        /**
         * @param scalingRuleName Name shown for the scaling rule, which must contain 2-64 characters (English or Chinese), starting with numbers, English letters or Chinese characters, and can contain number, underscores `_`, hypens `-`, and decimal point `.`. If this parameter value is not specified, the default value is scaling rule id.
         * 
         * @return builder
         * 
         */
        public Builder scalingRuleName(String scalingRuleName) {
            return scalingRuleName(Output.of(scalingRuleName));
        }

        /**
         * @param scalingRuleType The scaling rule type, either &#34;SimpleScalingRule&#34;, &#34;TargetTrackingScalingRule&#34;, &#34;StepScalingRule&#34;. Default to &#34;SimpleScalingRule&#34;.
         * 
         * @return builder
         * 
         */
        public Builder scalingRuleType(@Nullable Output<String> scalingRuleType) {
            $.scalingRuleType = scalingRuleType;
            return this;
        }

        /**
         * @param scalingRuleType The scaling rule type, either &#34;SimpleScalingRule&#34;, &#34;TargetTrackingScalingRule&#34;, &#34;StepScalingRule&#34;. Default to &#34;SimpleScalingRule&#34;.
         * 
         * @return builder
         * 
         */
        public Builder scalingRuleType(String scalingRuleType) {
            return scalingRuleType(Output.of(scalingRuleType));
        }

        /**
         * @param stepAdjustments Steps for StepScalingRule. See `step_adjustment` below.
         * 
         * @return builder
         * 
         */
        public Builder stepAdjustments(@Nullable Output<List<ScalingRuleStepAdjustmentArgs>> stepAdjustments) {
            $.stepAdjustments = stepAdjustments;
            return this;
        }

        /**
         * @param stepAdjustments Steps for StepScalingRule. See `step_adjustment` below.
         * 
         * @return builder
         * 
         */
        public Builder stepAdjustments(List<ScalingRuleStepAdjustmentArgs> stepAdjustments) {
            return stepAdjustments(Output.of(stepAdjustments));
        }

        /**
         * @param stepAdjustments Steps for StepScalingRule. See `step_adjustment` below.
         * 
         * @return builder
         * 
         */
        public Builder stepAdjustments(ScalingRuleStepAdjustmentArgs... stepAdjustments) {
            return stepAdjustments(List.of(stepAdjustments));
        }

        /**
         * @param targetValue The target value for the metric.
         * 
         * @return builder
         * 
         */
        public Builder targetValue(@Nullable Output<Double> targetValue) {
            $.targetValue = targetValue;
            return this;
        }

        /**
         * @param targetValue The target value for the metric.
         * 
         * @return builder
         * 
         */
        public Builder targetValue(Double targetValue) {
            return targetValue(Output.of(targetValue));
        }

        public ScalingRuleState build() {
            return $;
        }
    }

}
