// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.arms;

import com.pulumi.alicloud.Utilities;
import com.pulumi.alicloud.arms.EnvPodMonitorArgs;
import com.pulumi.alicloud.arms.inputs.EnvPodMonitorState;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Provides a ARMS Env Pod Monitor resource. PodMonitor for the arms environment.
 * 
 * For information about ARMS Env Pod Monitor and how to use it, see [What is Env Pod Monitor](https://www.alibabacloud.com/help/en/arms/developer-reference/api-arms-2019-08-08-createenvpodmonitor).
 * 
 * &gt; **NOTE:** Available since v1.212.0.
 * 
 * ## Example Usage
 * 
 * Basic Usage
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.random.Integer;
 * import com.pulumi.random.IntegerArgs;
 * import com.pulumi.alicloud.vpc.VpcFunctions;
 * import com.pulumi.alicloud.vpc.inputs.GetEnhancedNatAvailableZonesArgs;
 * import com.pulumi.alicloud.vpc.Network;
 * import com.pulumi.alicloud.vpc.NetworkArgs;
 * import com.pulumi.alicloud.vpc.Switch;
 * import com.pulumi.alicloud.vpc.SwitchArgs;
 * import com.pulumi.std.StdFunctions;
 * import com.pulumi.std.inputs.CidrsubnetArgs;
 * import com.pulumi.alicloud.ecs.SnapshotPolicy;
 * import com.pulumi.alicloud.ecs.SnapshotPolicyArgs;
 * import com.pulumi.alicloud.ecs.EcsFunctions;
 * import com.pulumi.alicloud.ecs.inputs.GetInstanceTypesArgs;
 * import com.pulumi.alicloud.cs.ManagedKubernetes;
 * import com.pulumi.alicloud.cs.ManagedKubernetesArgs;
 * import com.pulumi.alicloud.ecs.KeyPair;
 * import com.pulumi.alicloud.ecs.KeyPairArgs;
 * import com.pulumi.alicloud.cs.NodePool;
 * import com.pulumi.alicloud.cs.NodePoolArgs;
 * import com.pulumi.alicloud.arms.Environment;
 * import com.pulumi.alicloud.arms.EnvironmentArgs;
 * import com.pulumi.alicloud.arms.EnvPodMonitor;
 * import com.pulumi.alicloud.arms.EnvPodMonitorArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         final var config = ctx.config();
 *         var defaultInteger = new Integer("defaultInteger", IntegerArgs.builder()
 *             .max(99999)
 *             .min(10000)
 *             .build());
 * 
 *         final var name = config.get("name").orElse("terraform-example");
 *         final var enhanced = VpcFunctions.getEnhancedNatAvailableZones(GetEnhancedNatAvailableZonesArgs.builder()
 *             .build());
 * 
 *         var vpc = new Network("vpc", NetworkArgs.builder()
 *             .description(name)
 *             .cidrBlock("192.168.0.0/16")
 *             .vpcName(name)
 *             .build());
 * 
 *         var vswitch = new Switch("vswitch", SwitchArgs.builder()
 *             .description(name)
 *             .vpcId(vpc.id())
 *             .vswitchName(name)
 *             .zoneId(enhanced.zones()[0].zoneId())
 *             .cidrBlock(vpc.cidrBlock().applyValue(_cidrBlock -> StdFunctions.cidrsubnet(CidrsubnetArgs.builder()
 *                 .input(_cidrBlock)
 *                 .newbits(8)
 *                 .netnum(8)
 *                 .build())).applyValue(_invoke -> _invoke.result()))
 *             .build());
 * 
 *         var defaultSnapshotPolicy = new SnapshotPolicy("defaultSnapshotPolicy", SnapshotPolicyArgs.builder()
 *             .name(name)
 *             .repeatWeekdays(            
 *                 "1",
 *                 "2",
 *                 "3")
 *             .retentionDays(-1)
 *             .timePoints(            
 *                 "1",
 *                 "22",
 *                 "23")
 *             .build());
 * 
 *         final var default = vswitch.zoneId().applyValue(_zoneId -> EcsFunctions.getInstanceTypes(GetInstanceTypesArgs.builder()
 *             .availabilityZone(_zoneId)
 *             .cpuCoreCount(2)
 *             .memorySize(4)
 *             .kubernetesNodeRole("Worker")
 *             .instanceTypeFamily("ecs.n1")
 *             .build()));
 * 
 *         var defaultManagedKubernetes = new ManagedKubernetes("defaultManagedKubernetes", ManagedKubernetesArgs.builder()
 *             .name(String.format("terraform-example-%s", defaultInteger.result()))
 *             .clusterSpec("ack.pro.small")
 *             .version("1.24.6-aliyun.1")
 *             .newNatGateway(true)
 *             .nodeCidrMask(26)
 *             .proxyMode("ipvs")
 *             .serviceCidr("172.23.0.0/16")
 *             .podCidr("10.95.0.0/16")
 *             .workerVswitchIds(vswitch.id())
 *             .build());
 * 
 *         var defaultKeyPair = new KeyPair("defaultKeyPair", KeyPairArgs.builder()
 *             .keyPairName(String.format("terraform-example-%s", defaultInteger.result()))
 *             .build());
 * 
 *         var defaultNodePool = new NodePool("defaultNodePool", NodePoolArgs.builder()
 *             .name("desired_size")
 *             .clusterId(defaultManagedKubernetes.id())
 *             .vswitchIds(vswitch.id())
 *             .instanceTypes(default_.applyValue(_default_ -> _default_.instanceTypes()[0].id()))
 *             .systemDiskCategory("cloud_efficiency")
 *             .systemDiskSize(40)
 *             .keyName(defaultKeyPair.keyName())
 *             .desiredSize("2")
 *             .build());
 * 
 *         var environment_cs = new Environment("environment-cs", EnvironmentArgs.builder()
 *             .environmentType("CS")
 *             .environmentName(String.format("terraform-example-%s", defaultInteger.result()))
 *             .bindResourceId(defaultNodePool.clusterId())
 *             .environmentSubType("ACK")
 *             .build());
 * 
 *         var defaultEnvPodMonitor = new EnvPodMonitor("defaultEnvPodMonitor", EnvPodMonitorArgs.builder()
 *             .aliyunLang("en")
 *             .environmentId(environment_cs.id())
 *             .configYaml("""
 * apiVersion: monitoring.coreos.com/v1
 * kind: PodMonitor
 * metadata:
 *   name: arms-admin-pm1
 *   namespace: arms-prom
 *   annotations:
 *     arms.prometheus.io/discovery: 'true'
 *     o11y.aliyun.com/addon-name: mysql
 *     o11y.aliyun.com/addon-version: 1.0.2
 *     o11y.aliyun.com/release-name: mysql2
 * spec:
 *   selector:
 *     matchLabels:
 *       app: arms-prometheus-ack-arms-prometheus
 *       release: arms-prometheus
 *   namespaceSelector:
 *     any: true    
 *   podMetricsEndpoints:
 *   - interval: 30s
 *     targetPort: 9335
 *     path: /metrics
 *   - interval: 11s
 *     targetPort: 9335
 *     path: /metric
 *             """)
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * 
 * ## Import
 * 
 * ARMS Env Pod Monitor can be imported using the id, e.g.
 * 
 * ```sh
 * $ pulumi import alicloud:arms/envPodMonitor:EnvPodMonitor example &lt;environment_id&gt;:&lt;namespace&gt;:&lt;env_pod_monitor_name&gt;
 * ```
 * 
 */
@ResourceType(type="alicloud:arms/envPodMonitor:EnvPodMonitor")
public class EnvPodMonitor extends com.pulumi.resources.CustomResource {
    /**
     * Language environment, default is Chinese zh | en.
     * 
     */
    @Export(name="aliyunLang", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> aliyunLang;

    /**
     * @return Language environment, default is Chinese zh | en.
     * 
     */
    public Output<Optional<String>> aliyunLang() {
        return Codegen.optional(this.aliyunLang);
    }
    /**
     * Yaml configuration string.
     * 
     */
    @Export(name="configYaml", refs={String.class}, tree="[0]")
    private Output<String> configYaml;

    /**
     * @return Yaml configuration string.
     * 
     */
    public Output<String> configYaml() {
        return this.configYaml;
    }
    /**
     * The name of the resource.
     * 
     */
    @Export(name="envPodMonitorName", refs={String.class}, tree="[0]")
    private Output<String> envPodMonitorName;

    /**
     * @return The name of the resource.
     * 
     */
    public Output<String> envPodMonitorName() {
        return this.envPodMonitorName;
    }
    /**
     * Environment id.
     * 
     */
    @Export(name="environmentId", refs={String.class}, tree="[0]")
    private Output<String> environmentId;

    /**
     * @return Environment id.
     * 
     */
    public Output<String> environmentId() {
        return this.environmentId;
    }
    /**
     * Resource namespace.
     * 
     */
    @Export(name="namespace", refs={String.class}, tree="[0]")
    private Output<String> namespace;

    /**
     * @return Resource namespace.
     * 
     */
    public Output<String> namespace() {
        return this.namespace;
    }
    /**
     * PodMonitor status.
     * 
     */
    @Export(name="status", refs={String.class}, tree="[0]")
    private Output<String> status;

    /**
     * @return PodMonitor status.
     * 
     */
    public Output<String> status() {
        return this.status;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public EnvPodMonitor(java.lang.String name) {
        this(name, EnvPodMonitorArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public EnvPodMonitor(java.lang.String name, EnvPodMonitorArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public EnvPodMonitor(java.lang.String name, EnvPodMonitorArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("alicloud:arms/envPodMonitor:EnvPodMonitor", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private EnvPodMonitor(java.lang.String name, Output<java.lang.String> id, @Nullable EnvPodMonitorState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("alicloud:arms/envPodMonitor:EnvPodMonitor", name, state, makeResourceOptions(options, id), false);
    }

    private static EnvPodMonitorArgs makeArgs(EnvPodMonitorArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? EnvPodMonitorArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static EnvPodMonitor get(java.lang.String name, Output<java.lang.String> id, @Nullable EnvPodMonitorState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new EnvPodMonitor(name, id, state, options);
    }
}
