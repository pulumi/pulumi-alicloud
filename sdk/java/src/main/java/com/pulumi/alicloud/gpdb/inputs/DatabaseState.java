// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.gpdb.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DatabaseState extends com.pulumi.resources.ResourceArgs {

    public static final DatabaseState Empty = new DatabaseState();

    /**
     * Character set, default value is UTF8
     * 
     */
    @Import(name="characterSetName")
    private @Nullable Output<String> characterSetName;

    /**
     * @return Character set, default value is UTF8
     * 
     */
    public Optional<Output<String>> characterSetName() {
        return Optional.ofNullable(this.characterSetName);
    }

    /**
     * Database locale parameters, specifying string comparison/collation
     * 
     */
    @Import(name="collate")
    private @Nullable Output<String> collate;

    /**
     * @return Database locale parameters, specifying string comparison/collation
     * 
     */
    public Optional<Output<String>> collate() {
        return Optional.ofNullable(this.collate);
    }

    /**
     * Database locale parameters, specifying character classification/case conversion rules
     * 
     */
    @Import(name="ctype")
    private @Nullable Output<String> ctype;

    /**
     * @return Database locale parameters, specifying character classification/case conversion rules
     * 
     */
    public Optional<Output<String>> ctype() {
        return Optional.ofNullable(this.ctype);
    }

    /**
     * Database Name
     * 
     */
    @Import(name="databaseName")
    private @Nullable Output<String> databaseName;

    /**
     * @return Database Name
     * 
     */
    public Optional<Output<String>> databaseName() {
        return Optional.ofNullable(this.databaseName);
    }

    /**
     * Instance ID
     * 
     */
    @Import(name="dbInstanceId")
    private @Nullable Output<String> dbInstanceId;

    /**
     * @return Instance ID
     * 
     */
    public Optional<Output<String>> dbInstanceId() {
        return Optional.ofNullable(this.dbInstanceId);
    }

    /**
     * Database Description
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Database Description
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Data Sheet owner
     * 
     */
    @Import(name="owner")
    private @Nullable Output<String> owner;

    /**
     * @return Data Sheet owner
     * 
     */
    public Optional<Output<String>> owner() {
        return Optional.ofNullable(this.owner);
    }

    private DatabaseState() {}

    private DatabaseState(DatabaseState $) {
        this.characterSetName = $.characterSetName;
        this.collate = $.collate;
        this.ctype = $.ctype;
        this.databaseName = $.databaseName;
        this.dbInstanceId = $.dbInstanceId;
        this.description = $.description;
        this.owner = $.owner;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DatabaseState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DatabaseState $;

        public Builder() {
            $ = new DatabaseState();
        }

        public Builder(DatabaseState defaults) {
            $ = new DatabaseState(Objects.requireNonNull(defaults));
        }

        /**
         * @param characterSetName Character set, default value is UTF8
         * 
         * @return builder
         * 
         */
        public Builder characterSetName(@Nullable Output<String> characterSetName) {
            $.characterSetName = characterSetName;
            return this;
        }

        /**
         * @param characterSetName Character set, default value is UTF8
         * 
         * @return builder
         * 
         */
        public Builder characterSetName(String characterSetName) {
            return characterSetName(Output.of(characterSetName));
        }

        /**
         * @param collate Database locale parameters, specifying string comparison/collation
         * 
         * @return builder
         * 
         */
        public Builder collate(@Nullable Output<String> collate) {
            $.collate = collate;
            return this;
        }

        /**
         * @param collate Database locale parameters, specifying string comparison/collation
         * 
         * @return builder
         * 
         */
        public Builder collate(String collate) {
            return collate(Output.of(collate));
        }

        /**
         * @param ctype Database locale parameters, specifying character classification/case conversion rules
         * 
         * @return builder
         * 
         */
        public Builder ctype(@Nullable Output<String> ctype) {
            $.ctype = ctype;
            return this;
        }

        /**
         * @param ctype Database locale parameters, specifying character classification/case conversion rules
         * 
         * @return builder
         * 
         */
        public Builder ctype(String ctype) {
            return ctype(Output.of(ctype));
        }

        /**
         * @param databaseName Database Name
         * 
         * @return builder
         * 
         */
        public Builder databaseName(@Nullable Output<String> databaseName) {
            $.databaseName = databaseName;
            return this;
        }

        /**
         * @param databaseName Database Name
         * 
         * @return builder
         * 
         */
        public Builder databaseName(String databaseName) {
            return databaseName(Output.of(databaseName));
        }

        /**
         * @param dbInstanceId Instance ID
         * 
         * @return builder
         * 
         */
        public Builder dbInstanceId(@Nullable Output<String> dbInstanceId) {
            $.dbInstanceId = dbInstanceId;
            return this;
        }

        /**
         * @param dbInstanceId Instance ID
         * 
         * @return builder
         * 
         */
        public Builder dbInstanceId(String dbInstanceId) {
            return dbInstanceId(Output.of(dbInstanceId));
        }

        /**
         * @param description Database Description
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Database Description
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param owner Data Sheet owner
         * 
         * @return builder
         * 
         */
        public Builder owner(@Nullable Output<String> owner) {
            $.owner = owner;
            return this;
        }

        /**
         * @param owner Data Sheet owner
         * 
         * @return builder
         * 
         */
        public Builder owner(String owner) {
            return owner(Output.of(owner));
        }

        public DatabaseState build() {
            return $;
        }
    }

}
