// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.ess.outputs;

import com.pulumi.alicloud.ess.outputs.ScalingRuleHybridMetricDimension;
import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ScalingRuleHybridMetric {
    /**
     * @return The structure of volumeMounts.
     * See `dimensions` below for details.
     * 
     */
    private @Nullable List<ScalingRuleHybridMetricDimension> dimensions;
    /**
     * @return The metric expression that consists of multiple Hybrid Cloud Monitoring metrics. It calculates a result used to trigger scaling events. The expression must comply with the Reverse Polish Notation (RPN) specification, and the operators can only be + - × /.
     * 
     */
    private @Nullable String expression;
    /**
     * @return The reference ID of the metric in the metric expression.
     * 
     */
    private @Nullable String id;
    /**
     * @return The name of the Hybrid Cloud Monitoring metric.
     * 
     */
    private @Nullable String metricName;
    /**
     * @return The statistical method of the metric value. Valid values: Average, Minimum, Maximum.
     * 
     */
    private @Nullable String statistic;

    private ScalingRuleHybridMetric() {}
    /**
     * @return The structure of volumeMounts.
     * See `dimensions` below for details.
     * 
     */
    public List<ScalingRuleHybridMetricDimension> dimensions() {
        return this.dimensions == null ? List.of() : this.dimensions;
    }
    /**
     * @return The metric expression that consists of multiple Hybrid Cloud Monitoring metrics. It calculates a result used to trigger scaling events. The expression must comply with the Reverse Polish Notation (RPN) specification, and the operators can only be + - × /.
     * 
     */
    public Optional<String> expression() {
        return Optional.ofNullable(this.expression);
    }
    /**
     * @return The reference ID of the metric in the metric expression.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return The name of the Hybrid Cloud Monitoring metric.
     * 
     */
    public Optional<String> metricName() {
        return Optional.ofNullable(this.metricName);
    }
    /**
     * @return The statistical method of the metric value. Valid values: Average, Minimum, Maximum.
     * 
     */
    public Optional<String> statistic() {
        return Optional.ofNullable(this.statistic);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ScalingRuleHybridMetric defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<ScalingRuleHybridMetricDimension> dimensions;
        private @Nullable String expression;
        private @Nullable String id;
        private @Nullable String metricName;
        private @Nullable String statistic;
        public Builder() {}
        public Builder(ScalingRuleHybridMetric defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.dimensions = defaults.dimensions;
    	      this.expression = defaults.expression;
    	      this.id = defaults.id;
    	      this.metricName = defaults.metricName;
    	      this.statistic = defaults.statistic;
        }

        @CustomType.Setter
        public Builder dimensions(@Nullable List<ScalingRuleHybridMetricDimension> dimensions) {

            this.dimensions = dimensions;
            return this;
        }
        public Builder dimensions(ScalingRuleHybridMetricDimension... dimensions) {
            return dimensions(List.of(dimensions));
        }
        @CustomType.Setter
        public Builder expression(@Nullable String expression) {

            this.expression = expression;
            return this;
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {

            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder metricName(@Nullable String metricName) {

            this.metricName = metricName;
            return this;
        }
        @CustomType.Setter
        public Builder statistic(@Nullable String statistic) {

            this.statistic = statistic;
            return this;
        }
        public ScalingRuleHybridMetric build() {
            final var _resultValue = new ScalingRuleHybridMetric();
            _resultValue.dimensions = dimensions;
            _resultValue.expression = expression;
            _resultValue.id = id;
            _resultValue.metricName = metricName;
            _resultValue.statistic = statistic;
            return _resultValue;
        }
    }
}
