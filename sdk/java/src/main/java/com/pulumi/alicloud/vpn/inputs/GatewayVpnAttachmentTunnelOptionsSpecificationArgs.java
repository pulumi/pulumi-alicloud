// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.vpn.inputs;

import com.pulumi.alicloud.vpn.inputs.GatewayVpnAttachmentTunnelOptionsSpecificationTunnelBgpConfigArgs;
import com.pulumi.alicloud.vpn.inputs.GatewayVpnAttachmentTunnelOptionsSpecificationTunnelIkeConfigArgs;
import com.pulumi.alicloud.vpn.inputs.GatewayVpnAttachmentTunnelOptionsSpecificationTunnelIpsecConfigArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GatewayVpnAttachmentTunnelOptionsSpecificationArgs extends com.pulumi.resources.ResourceArgs {

    public static final GatewayVpnAttachmentTunnelOptionsSpecificationArgs Empty = new GatewayVpnAttachmentTunnelOptionsSpecificationArgs();

    /**
     * The ID of the user gateway associated with the tunnel.
     * 
     * &gt; **NOTE:**  This parameter is required when creating a dual-tunnel mode IPsec-VPN connection.
     * 
     */
    @Import(name="customerGatewayId", required=true)
    private Output<String> customerGatewayId;

    /**
     * @return The ID of the user gateway associated with the tunnel.
     * 
     * &gt; **NOTE:**  This parameter is required when creating a dual-tunnel mode IPsec-VPN connection.
     * 
     */
    public Output<String> customerGatewayId() {
        return this.customerGatewayId;
    }

    /**
     * Whether the DPD (peer alive detection) function is enabled for the tunnel. Value:
     * 
     */
    @Import(name="enableDpd")
    private @Nullable Output<Boolean> enableDpd;

    /**
     * @return Whether the DPD (peer alive detection) function is enabled for the tunnel. Value:
     * 
     */
    public Optional<Output<Boolean>> enableDpd() {
        return Optional.ofNullable(this.enableDpd);
    }

    /**
     * Whether the NAT crossing function is enabled for the tunnel. Value:
     * 
     */
    @Import(name="enableNatTraversal")
    private @Nullable Output<Boolean> enableNatTraversal;

    /**
     * @return Whether the NAT crossing function is enabled for the tunnel. Value:
     * 
     */
    public Optional<Output<Boolean>> enableNatTraversal() {
        return Optional.ofNullable(this.enableNatTraversal);
    }

    /**
     * The local internet IP in Tunnel.
     * 
     */
    @Import(name="internetIp")
    private @Nullable Output<String> internetIp;

    /**
     * @return The local internet IP in Tunnel.
     * 
     */
    public Optional<Output<String>> internetIp() {
        return Optional.ofNullable(this.internetIp);
    }

    /**
     * The role of Tunnel.
     * 
     */
    @Import(name="role")
    private @Nullable Output<String> role;

    /**
     * @return The role of Tunnel.
     * 
     */
    public Optional<Output<String>> role() {
        return Optional.ofNullable(this.role);
    }

    /**
     * The state of Tunnel.
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return The state of Tunnel.
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * The negotiation status of Tunnel.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return The negotiation status of Tunnel.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * Add the BGP configuration for the tunnel.
     * 
     * &gt; **NOTE:**  After you enable the BGP function for IPsec connections (that is, specify `EnableTunnelsBgp` as `true`), you must configure this parameter.
     * See `tunnel_bgp_config` below.
     * 
     */
    @Import(name="tunnelBgpConfig")
    private @Nullable Output<GatewayVpnAttachmentTunnelOptionsSpecificationTunnelBgpConfigArgs> tunnelBgpConfig;

    /**
     * @return Add the BGP configuration for the tunnel.
     * 
     * &gt; **NOTE:**  After you enable the BGP function for IPsec connections (that is, specify `EnableTunnelsBgp` as `true`), you must configure this parameter.
     * See `tunnel_bgp_config` below.
     * 
     */
    public Optional<Output<GatewayVpnAttachmentTunnelOptionsSpecificationTunnelBgpConfigArgs>> tunnelBgpConfig() {
        return Optional.ofNullable(this.tunnelBgpConfig);
    }

    /**
     * The tunnel ID of IPsec-VPN connection.
     * 
     */
    @Import(name="tunnelId")
    private @Nullable Output<String> tunnelId;

    /**
     * @return The tunnel ID of IPsec-VPN connection.
     * 
     */
    public Optional<Output<String>> tunnelId() {
        return Optional.ofNullable(this.tunnelId);
    }

    /**
     * Configuration information for the first phase negotiation. See `tunnel_ike_config` below.
     * 
     */
    @Import(name="tunnelIkeConfig")
    private @Nullable Output<GatewayVpnAttachmentTunnelOptionsSpecificationTunnelIkeConfigArgs> tunnelIkeConfig;

    /**
     * @return Configuration information for the first phase negotiation. See `tunnel_ike_config` below.
     * 
     */
    public Optional<Output<GatewayVpnAttachmentTunnelOptionsSpecificationTunnelIkeConfigArgs>> tunnelIkeConfig() {
        return Optional.ofNullable(this.tunnelIkeConfig);
    }

    /**
     * The order in which the tunnel was created.
     * 
     */
    @Import(name="tunnelIndex", required=true)
    private Output<Integer> tunnelIndex;

    /**
     * @return The order in which the tunnel was created.
     * 
     */
    public Output<Integer> tunnelIndex() {
        return this.tunnelIndex;
    }

    /**
     * Configuration information for the second-stage negotiation. See `tunnel_ipsec_config` below.
     * 
     */
    @Import(name="tunnelIpsecConfig")
    private @Nullable Output<GatewayVpnAttachmentTunnelOptionsSpecificationTunnelIpsecConfigArgs> tunnelIpsecConfig;

    /**
     * @return Configuration information for the second-stage negotiation. See `tunnel_ipsec_config` below.
     * 
     */
    public Optional<Output<GatewayVpnAttachmentTunnelOptionsSpecificationTunnelIpsecConfigArgs>> tunnelIpsecConfig() {
        return Optional.ofNullable(this.tunnelIpsecConfig);
    }

    /**
     * The zoneNo of tunnel.
     * 
     */
    @Import(name="zoneNo")
    private @Nullable Output<String> zoneNo;

    /**
     * @return The zoneNo of tunnel.
     * 
     */
    public Optional<Output<String>> zoneNo() {
        return Optional.ofNullable(this.zoneNo);
    }

    private GatewayVpnAttachmentTunnelOptionsSpecificationArgs() {}

    private GatewayVpnAttachmentTunnelOptionsSpecificationArgs(GatewayVpnAttachmentTunnelOptionsSpecificationArgs $) {
        this.customerGatewayId = $.customerGatewayId;
        this.enableDpd = $.enableDpd;
        this.enableNatTraversal = $.enableNatTraversal;
        this.internetIp = $.internetIp;
        this.role = $.role;
        this.state = $.state;
        this.status = $.status;
        this.tunnelBgpConfig = $.tunnelBgpConfig;
        this.tunnelId = $.tunnelId;
        this.tunnelIkeConfig = $.tunnelIkeConfig;
        this.tunnelIndex = $.tunnelIndex;
        this.tunnelIpsecConfig = $.tunnelIpsecConfig;
        this.zoneNo = $.zoneNo;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GatewayVpnAttachmentTunnelOptionsSpecificationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GatewayVpnAttachmentTunnelOptionsSpecificationArgs $;

        public Builder() {
            $ = new GatewayVpnAttachmentTunnelOptionsSpecificationArgs();
        }

        public Builder(GatewayVpnAttachmentTunnelOptionsSpecificationArgs defaults) {
            $ = new GatewayVpnAttachmentTunnelOptionsSpecificationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param customerGatewayId The ID of the user gateway associated with the tunnel.
         * 
         * &gt; **NOTE:**  This parameter is required when creating a dual-tunnel mode IPsec-VPN connection.
         * 
         * @return builder
         * 
         */
        public Builder customerGatewayId(Output<String> customerGatewayId) {
            $.customerGatewayId = customerGatewayId;
            return this;
        }

        /**
         * @param customerGatewayId The ID of the user gateway associated with the tunnel.
         * 
         * &gt; **NOTE:**  This parameter is required when creating a dual-tunnel mode IPsec-VPN connection.
         * 
         * @return builder
         * 
         */
        public Builder customerGatewayId(String customerGatewayId) {
            return customerGatewayId(Output.of(customerGatewayId));
        }

        /**
         * @param enableDpd Whether the DPD (peer alive detection) function is enabled for the tunnel. Value:
         * 
         * @return builder
         * 
         */
        public Builder enableDpd(@Nullable Output<Boolean> enableDpd) {
            $.enableDpd = enableDpd;
            return this;
        }

        /**
         * @param enableDpd Whether the DPD (peer alive detection) function is enabled for the tunnel. Value:
         * 
         * @return builder
         * 
         */
        public Builder enableDpd(Boolean enableDpd) {
            return enableDpd(Output.of(enableDpd));
        }

        /**
         * @param enableNatTraversal Whether the NAT crossing function is enabled for the tunnel. Value:
         * 
         * @return builder
         * 
         */
        public Builder enableNatTraversal(@Nullable Output<Boolean> enableNatTraversal) {
            $.enableNatTraversal = enableNatTraversal;
            return this;
        }

        /**
         * @param enableNatTraversal Whether the NAT crossing function is enabled for the tunnel. Value:
         * 
         * @return builder
         * 
         */
        public Builder enableNatTraversal(Boolean enableNatTraversal) {
            return enableNatTraversal(Output.of(enableNatTraversal));
        }

        /**
         * @param internetIp The local internet IP in Tunnel.
         * 
         * @return builder
         * 
         */
        public Builder internetIp(@Nullable Output<String> internetIp) {
            $.internetIp = internetIp;
            return this;
        }

        /**
         * @param internetIp The local internet IP in Tunnel.
         * 
         * @return builder
         * 
         */
        public Builder internetIp(String internetIp) {
            return internetIp(Output.of(internetIp));
        }

        /**
         * @param role The role of Tunnel.
         * 
         * @return builder
         * 
         */
        public Builder role(@Nullable Output<String> role) {
            $.role = role;
            return this;
        }

        /**
         * @param role The role of Tunnel.
         * 
         * @return builder
         * 
         */
        public Builder role(String role) {
            return role(Output.of(role));
        }

        /**
         * @param state The state of Tunnel.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state The state of Tunnel.
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        /**
         * @param status The negotiation status of Tunnel.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status The negotiation status of Tunnel.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param tunnelBgpConfig Add the BGP configuration for the tunnel.
         * 
         * &gt; **NOTE:**  After you enable the BGP function for IPsec connections (that is, specify `EnableTunnelsBgp` as `true`), you must configure this parameter.
         * See `tunnel_bgp_config` below.
         * 
         * @return builder
         * 
         */
        public Builder tunnelBgpConfig(@Nullable Output<GatewayVpnAttachmentTunnelOptionsSpecificationTunnelBgpConfigArgs> tunnelBgpConfig) {
            $.tunnelBgpConfig = tunnelBgpConfig;
            return this;
        }

        /**
         * @param tunnelBgpConfig Add the BGP configuration for the tunnel.
         * 
         * &gt; **NOTE:**  After you enable the BGP function for IPsec connections (that is, specify `EnableTunnelsBgp` as `true`), you must configure this parameter.
         * See `tunnel_bgp_config` below.
         * 
         * @return builder
         * 
         */
        public Builder tunnelBgpConfig(GatewayVpnAttachmentTunnelOptionsSpecificationTunnelBgpConfigArgs tunnelBgpConfig) {
            return tunnelBgpConfig(Output.of(tunnelBgpConfig));
        }

        /**
         * @param tunnelId The tunnel ID of IPsec-VPN connection.
         * 
         * @return builder
         * 
         */
        public Builder tunnelId(@Nullable Output<String> tunnelId) {
            $.tunnelId = tunnelId;
            return this;
        }

        /**
         * @param tunnelId The tunnel ID of IPsec-VPN connection.
         * 
         * @return builder
         * 
         */
        public Builder tunnelId(String tunnelId) {
            return tunnelId(Output.of(tunnelId));
        }

        /**
         * @param tunnelIkeConfig Configuration information for the first phase negotiation. See `tunnel_ike_config` below.
         * 
         * @return builder
         * 
         */
        public Builder tunnelIkeConfig(@Nullable Output<GatewayVpnAttachmentTunnelOptionsSpecificationTunnelIkeConfigArgs> tunnelIkeConfig) {
            $.tunnelIkeConfig = tunnelIkeConfig;
            return this;
        }

        /**
         * @param tunnelIkeConfig Configuration information for the first phase negotiation. See `tunnel_ike_config` below.
         * 
         * @return builder
         * 
         */
        public Builder tunnelIkeConfig(GatewayVpnAttachmentTunnelOptionsSpecificationTunnelIkeConfigArgs tunnelIkeConfig) {
            return tunnelIkeConfig(Output.of(tunnelIkeConfig));
        }

        /**
         * @param tunnelIndex The order in which the tunnel was created.
         * 
         * @return builder
         * 
         */
        public Builder tunnelIndex(Output<Integer> tunnelIndex) {
            $.tunnelIndex = tunnelIndex;
            return this;
        }

        /**
         * @param tunnelIndex The order in which the tunnel was created.
         * 
         * @return builder
         * 
         */
        public Builder tunnelIndex(Integer tunnelIndex) {
            return tunnelIndex(Output.of(tunnelIndex));
        }

        /**
         * @param tunnelIpsecConfig Configuration information for the second-stage negotiation. See `tunnel_ipsec_config` below.
         * 
         * @return builder
         * 
         */
        public Builder tunnelIpsecConfig(@Nullable Output<GatewayVpnAttachmentTunnelOptionsSpecificationTunnelIpsecConfigArgs> tunnelIpsecConfig) {
            $.tunnelIpsecConfig = tunnelIpsecConfig;
            return this;
        }

        /**
         * @param tunnelIpsecConfig Configuration information for the second-stage negotiation. See `tunnel_ipsec_config` below.
         * 
         * @return builder
         * 
         */
        public Builder tunnelIpsecConfig(GatewayVpnAttachmentTunnelOptionsSpecificationTunnelIpsecConfigArgs tunnelIpsecConfig) {
            return tunnelIpsecConfig(Output.of(tunnelIpsecConfig));
        }

        /**
         * @param zoneNo The zoneNo of tunnel.
         * 
         * @return builder
         * 
         */
        public Builder zoneNo(@Nullable Output<String> zoneNo) {
            $.zoneNo = zoneNo;
            return this;
        }

        /**
         * @param zoneNo The zoneNo of tunnel.
         * 
         * @return builder
         * 
         */
        public Builder zoneNo(String zoneNo) {
            return zoneNo(Output.of(zoneNo));
        }

        public GatewayVpnAttachmentTunnelOptionsSpecificationArgs build() {
            if ($.customerGatewayId == null) {
                throw new MissingRequiredPropertyException("GatewayVpnAttachmentTunnelOptionsSpecificationArgs", "customerGatewayId");
            }
            if ($.tunnelIndex == null) {
                throw new MissingRequiredPropertyException("GatewayVpnAttachmentTunnelOptionsSpecificationArgs", "tunnelIndex");
            }
            return $;
        }
    }

}
