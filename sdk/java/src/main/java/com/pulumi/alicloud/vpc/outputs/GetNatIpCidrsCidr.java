// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.vpc.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetNatIpCidrsCidr {
    /**
     * @return The time when the CIDR block was created.
     * 
     */
    private String createTime;
    /**
     * @return The ID of the Nat Ip Cidr.
     * 
     */
    private String id;
    /**
     * @return Whether it is the default NAT IP ADDRESS. Valid values:`true` or `false`.`true`: is the default NAT IP ADDRESS. `false`: it is not the default NAT IP ADDRESS.
     * 
     */
    private Boolean isDefault;
    /**
     * @return The ID of the VPC NAT gateway.
     * 
     */
    private String natGatewayId;
    /**
     * @return The NAT CIDR block to be created. The CIDR block must meet the following conditions: It must be `10.0.0.0/8`, `172.16.0.0/12`, `192.168.0.0/16`, or one of their subnets. The subnet mask must be `16` to `32` bits in lengths. To use a public CIDR block as the NAT CIDR block, the VPC to which the VPC NAT gateway belongs must be authorized to use public CIDR blocks. For more information, see [Create a VPC NAT gateway](https://www.alibabacloud.com/help/doc-detail/268230.htm).
     * 
     */
    private String natIpCidr;
    /**
     * @return NAT IP ADDRESS range to the description of. Length is from `2` to `256` characters, must start with a letter or the Chinese at the beginning, but not at the`  http:// ` Or `https://` at the beginning.
     * 
     */
    private String natIpCidrDescription;
    /**
     * @return NAT IP ADDRESS instance ID.
     * 
     */
    private String natIpCidrId;
    /**
     * @return NAT IP ADDRESS the name of the root directory. Length is from `2` to `128` characters, must start with a letter or the Chinese at the beginning can contain numbers, half a period (.), underscore (_) and dash (-). But do not start with `http://` or `https://` at the beginning.
     * 
     */
    private String natIpCidrName;
    /**
     * @return The status of the CIDR block of the NAT gateway. If the value is `Available`, the CIDR block is available.
     * 
     */
    private String status;

    private GetNatIpCidrsCidr() {}
    /**
     * @return The time when the CIDR block was created.
     * 
     */
    public String createTime() {
        return this.createTime;
    }
    /**
     * @return The ID of the Nat Ip Cidr.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Whether it is the default NAT IP ADDRESS. Valid values:`true` or `false`.`true`: is the default NAT IP ADDRESS. `false`: it is not the default NAT IP ADDRESS.
     * 
     */
    public Boolean isDefault() {
        return this.isDefault;
    }
    /**
     * @return The ID of the VPC NAT gateway.
     * 
     */
    public String natGatewayId() {
        return this.natGatewayId;
    }
    /**
     * @return The NAT CIDR block to be created. The CIDR block must meet the following conditions: It must be `10.0.0.0/8`, `172.16.0.0/12`, `192.168.0.0/16`, or one of their subnets. The subnet mask must be `16` to `32` bits in lengths. To use a public CIDR block as the NAT CIDR block, the VPC to which the VPC NAT gateway belongs must be authorized to use public CIDR blocks. For more information, see [Create a VPC NAT gateway](https://www.alibabacloud.com/help/doc-detail/268230.htm).
     * 
     */
    public String natIpCidr() {
        return this.natIpCidr;
    }
    /**
     * @return NAT IP ADDRESS range to the description of. Length is from `2` to `256` characters, must start with a letter or the Chinese at the beginning, but not at the`  http:// ` Or `https://` at the beginning.
     * 
     */
    public String natIpCidrDescription() {
        return this.natIpCidrDescription;
    }
    /**
     * @return NAT IP ADDRESS instance ID.
     * 
     */
    public String natIpCidrId() {
        return this.natIpCidrId;
    }
    /**
     * @return NAT IP ADDRESS the name of the root directory. Length is from `2` to `128` characters, must start with a letter or the Chinese at the beginning can contain numbers, half a period (.), underscore (_) and dash (-). But do not start with `http://` or `https://` at the beginning.
     * 
     */
    public String natIpCidrName() {
        return this.natIpCidrName;
    }
    /**
     * @return The status of the CIDR block of the NAT gateway. If the value is `Available`, the CIDR block is available.
     * 
     */
    public String status() {
        return this.status;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetNatIpCidrsCidr defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String createTime;
        private String id;
        private Boolean isDefault;
        private String natGatewayId;
        private String natIpCidr;
        private String natIpCidrDescription;
        private String natIpCidrId;
        private String natIpCidrName;
        private String status;
        public Builder() {}
        public Builder(GetNatIpCidrsCidr defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.createTime = defaults.createTime;
    	      this.id = defaults.id;
    	      this.isDefault = defaults.isDefault;
    	      this.natGatewayId = defaults.natGatewayId;
    	      this.natIpCidr = defaults.natIpCidr;
    	      this.natIpCidrDescription = defaults.natIpCidrDescription;
    	      this.natIpCidrId = defaults.natIpCidrId;
    	      this.natIpCidrName = defaults.natIpCidrName;
    	      this.status = defaults.status;
        }

        @CustomType.Setter
        public Builder createTime(String createTime) {
            if (createTime == null) {
              throw new MissingRequiredPropertyException("GetNatIpCidrsCidr", "createTime");
            }
            this.createTime = createTime;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetNatIpCidrsCidr", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder isDefault(Boolean isDefault) {
            if (isDefault == null) {
              throw new MissingRequiredPropertyException("GetNatIpCidrsCidr", "isDefault");
            }
            this.isDefault = isDefault;
            return this;
        }
        @CustomType.Setter
        public Builder natGatewayId(String natGatewayId) {
            if (natGatewayId == null) {
              throw new MissingRequiredPropertyException("GetNatIpCidrsCidr", "natGatewayId");
            }
            this.natGatewayId = natGatewayId;
            return this;
        }
        @CustomType.Setter
        public Builder natIpCidr(String natIpCidr) {
            if (natIpCidr == null) {
              throw new MissingRequiredPropertyException("GetNatIpCidrsCidr", "natIpCidr");
            }
            this.natIpCidr = natIpCidr;
            return this;
        }
        @CustomType.Setter
        public Builder natIpCidrDescription(String natIpCidrDescription) {
            if (natIpCidrDescription == null) {
              throw new MissingRequiredPropertyException("GetNatIpCidrsCidr", "natIpCidrDescription");
            }
            this.natIpCidrDescription = natIpCidrDescription;
            return this;
        }
        @CustomType.Setter
        public Builder natIpCidrId(String natIpCidrId) {
            if (natIpCidrId == null) {
              throw new MissingRequiredPropertyException("GetNatIpCidrsCidr", "natIpCidrId");
            }
            this.natIpCidrId = natIpCidrId;
            return this;
        }
        @CustomType.Setter
        public Builder natIpCidrName(String natIpCidrName) {
            if (natIpCidrName == null) {
              throw new MissingRequiredPropertyException("GetNatIpCidrsCidr", "natIpCidrName");
            }
            this.natIpCidrName = natIpCidrName;
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            if (status == null) {
              throw new MissingRequiredPropertyException("GetNatIpCidrsCidr", "status");
            }
            this.status = status;
            return this;
        }
        public GetNatIpCidrsCidr build() {
            final var _resultValue = new GetNatIpCidrsCidr();
            _resultValue.createTime = createTime;
            _resultValue.id = id;
            _resultValue.isDefault = isDefault;
            _resultValue.natGatewayId = natGatewayId;
            _resultValue.natIpCidr = natIpCidr;
            _resultValue.natIpCidrDescription = natIpCidrDescription;
            _resultValue.natIpCidrId = natIpCidrId;
            _resultValue.natIpCidrName = natIpCidrName;
            _resultValue.status = status;
            return _resultValue;
        }
    }
}
