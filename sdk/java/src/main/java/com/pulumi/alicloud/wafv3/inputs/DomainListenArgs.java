// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.wafv3.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DomainListenArgs extends com.pulumi.resources.ResourceArgs {

    public static final DomainListenArgs Empty = new DomainListenArgs();

    /**
     * The ID of the certificate to be added. This parameter is used only if the value of `HttpsPorts` is not empty (indicating that the domain name uses the HTTPS protocol).
     * 
     */
    @Import(name="certId")
    private @Nullable Output<String> certId;

    /**
     * @return The ID of the certificate to be added. This parameter is used only if the value of `HttpsPorts` is not empty (indicating that the domain name uses the HTTPS protocol).
     * 
     */
    public Optional<Output<String>> certId() {
        return Optional.ofNullable(this.certId);
    }

    /**
     * The type of the cipher suites that you want to add. This parameter is available only if you specify `HttpsPorts`. Valid values:
     * 
     */
    @Import(name="cipherSuite")
    private @Nullable Output<Integer> cipherSuite;

    /**
     * @return The type of the cipher suites that you want to add. This parameter is available only if you specify `HttpsPorts`. Valid values:
     * 
     */
    public Optional<Output<Integer>> cipherSuite() {
        return Optional.ofNullable(this.cipherSuite);
    }

    /**
     * The specific custom encryption suite to add.
     * 
     */
    @Import(name="customCiphers")
    private @Nullable Output<List<String>> customCiphers;

    /**
     * @return The specific custom encryption suite to add.
     * 
     */
    public Optional<Output<List<String>>> customCiphers() {
        return Optional.ofNullable(this.customCiphers);
    }

    /**
     * Whether TSL1.3 version is supported. This parameter is used only if the value of `HttpsPorts` is not empty (indicating that the domain name uses the HTTPS protocol). Value:
     * 
     */
    @Import(name="enableTlsv3")
    private @Nullable Output<Boolean> enableTlsv3;

    /**
     * @return Whether TSL1.3 version is supported. This parameter is used only if the value of `HttpsPorts` is not empty (indicating that the domain name uses the HTTPS protocol). Value:
     * 
     */
    public Optional<Output<Boolean>> enableTlsv3() {
        return Optional.ofNullable(this.enableTlsv3);
    }

    /**
     * Specifies whether to enable the exclusive IP address feature. This parameter is available only if you set `IPv6Enabled` to false and `ProtectionResource` to `share`. Valid values:
     * 
     */
    @Import(name="exclusiveIp")
    private @Nullable Output<Boolean> exclusiveIp;

    /**
     * @return Specifies whether to enable the exclusive IP address feature. This parameter is available only if you set `IPv6Enabled` to false and `ProtectionResource` to `share`. Valid values:
     * 
     */
    public Optional<Output<Boolean>> exclusiveIp() {
        return Optional.ofNullable(this.exclusiveIp);
    }

    /**
     * Specifies whether to enable force redirect from HTTP to HTTPS for received requests. This parameter is available only if you specify `HttpsPorts` and leave `HttpPorts` empty. Valid values:
     * 
     */
    @Import(name="focusHttps")
    private @Nullable Output<Boolean> focusHttps;

    /**
     * @return Specifies whether to enable force redirect from HTTP to HTTPS for received requests. This parameter is available only if you specify `HttpsPorts` and leave `HttpPorts` empty. Valid values:
     * 
     */
    public Optional<Output<Boolean>> focusHttps() {
        return Optional.ofNullable(this.focusHttps);
    }

    /**
     * Specifies whether to enable HTTP/2. This parameter is available only if you specify `HttpsPorts`. Valid values:
     * 
     */
    @Import(name="http2Enabled")
    private @Nullable Output<Boolean> http2Enabled;

    /**
     * @return Specifies whether to enable HTTP/2. This parameter is available only if you specify `HttpsPorts`. Valid values:
     * 
     */
    public Optional<Output<Boolean>> http2Enabled() {
        return Optional.ofNullable(this.http2Enabled);
    }

    /**
     * The HTTP listener ports. Specify the value in the \[**port1,port2,...**] format.
     * 
     */
    @Import(name="httpPorts")
    private @Nullable Output<List<Integer>> httpPorts;

    /**
     * @return The HTTP listener ports. Specify the value in the \[**port1,port2,...**] format.
     * 
     */
    public Optional<Output<List<Integer>>> httpPorts() {
        return Optional.ofNullable(this.httpPorts);
    }

    /**
     * The HTTPS listener ports. Specify the value in the \[**port1,port2,...**] format.
     * 
     */
    @Import(name="httpsPorts")
    private @Nullable Output<List<Integer>> httpsPorts;

    /**
     * @return The HTTPS listener ports. Specify the value in the \[**port1,port2,...**] format.
     * 
     */
    public Optional<Output<List<Integer>>> httpsPorts() {
        return Optional.ofNullable(this.httpsPorts);
    }

    /**
     * Specifies whether to enable IPv6 protection. Valid values:
     * 
     */
    @Import(name="ipv6Enabled")
    private @Nullable Output<Boolean> ipv6Enabled;

    /**
     * @return Specifies whether to enable IPv6 protection. Valid values:
     * 
     */
    public Optional<Output<Boolean>> ipv6Enabled() {
        return Optional.ofNullable(this.ipv6Enabled);
    }

    /**
     * The type of the protection resource. Valid values:
     * 
     */
    @Import(name="protectionResource")
    private @Nullable Output<String> protectionResource;

    /**
     * @return The type of the protection resource. Valid values:
     * 
     */
    public Optional<Output<String>> protectionResource() {
        return Optional.ofNullable(this.protectionResource);
    }

    /**
     * Specifies whether to allow access only from SM certificate-based clients. This parameter is available only if you set SM2Enabled to true.
     * 
     * - true
     * - false
     * 
     */
    @Import(name="sm2AccessOnly")
    private @Nullable Output<Boolean> sm2AccessOnly;

    /**
     * @return Specifies whether to allow access only from SM certificate-based clients. This parameter is available only if you set SM2Enabled to true.
     * 
     * - true
     * - false
     * 
     */
    public Optional<Output<Boolean>> sm2AccessOnly() {
        return Optional.ofNullable(this.sm2AccessOnly);
    }

    /**
     * The ID of the SM certificate that you want to add. This parameter is available only if you set SM2Enabled to true.
     * 
     */
    @Import(name="sm2CertId")
    private @Nullable Output<String> sm2CertId;

    /**
     * @return The ID of the SM certificate that you want to add. This parameter is available only if you set SM2Enabled to true.
     * 
     */
    public Optional<Output<String>> sm2CertId() {
        return Optional.ofNullable(this.sm2CertId);
    }

    /**
     * Specifies whether to add an SM certificate.
     * 
     */
    @Import(name="sm2Enabled")
    private @Nullable Output<Boolean> sm2Enabled;

    /**
     * @return Specifies whether to add an SM certificate.
     * 
     */
    public Optional<Output<Boolean>> sm2Enabled() {
        return Optional.ofNullable(this.sm2Enabled);
    }

    /**
     * The version of TLS to add. This parameter is used only if the value of `HttpsPorts` is not empty (indicating that the domain name uses the HTTPS protocol). Value:
     * 
     */
    @Import(name="tlsVersion")
    private @Nullable Output<String> tlsVersion;

    /**
     * @return The version of TLS to add. This parameter is used only if the value of `HttpsPorts` is not empty (indicating that the domain name uses the HTTPS protocol). Value:
     * 
     */
    public Optional<Output<String>> tlsVersion() {
        return Optional.ofNullable(this.tlsVersion);
    }

    /**
     * The method that is used to obtain the originating IP address of a client. Valid values:
     * 
     */
    @Import(name="xffHeaderMode")
    private @Nullable Output<Integer> xffHeaderMode;

    /**
     * @return The method that is used to obtain the originating IP address of a client. Valid values:
     * 
     */
    public Optional<Output<Integer>> xffHeaderMode() {
        return Optional.ofNullable(this.xffHeaderMode);
    }

    /**
     * The custom header fields that are used to obtain the originating IP address of a client. Specify the value in the **\[&#34;header1&#34;,&#34;header2&#34;,...]** format.
     * 
     * &gt; **NOTE:**   This parameter is required only if you set `XffHeaderMode` to 2.
     * 
     */
    @Import(name="xffHeaders")
    private @Nullable Output<List<String>> xffHeaders;

    /**
     * @return The custom header fields that are used to obtain the originating IP address of a client. Specify the value in the **\[&#34;header1&#34;,&#34;header2&#34;,...]** format.
     * 
     * &gt; **NOTE:**   This parameter is required only if you set `XffHeaderMode` to 2.
     * 
     */
    public Optional<Output<List<String>>> xffHeaders() {
        return Optional.ofNullable(this.xffHeaders);
    }

    private DomainListenArgs() {}

    private DomainListenArgs(DomainListenArgs $) {
        this.certId = $.certId;
        this.cipherSuite = $.cipherSuite;
        this.customCiphers = $.customCiphers;
        this.enableTlsv3 = $.enableTlsv3;
        this.exclusiveIp = $.exclusiveIp;
        this.focusHttps = $.focusHttps;
        this.http2Enabled = $.http2Enabled;
        this.httpPorts = $.httpPorts;
        this.httpsPorts = $.httpsPorts;
        this.ipv6Enabled = $.ipv6Enabled;
        this.protectionResource = $.protectionResource;
        this.sm2AccessOnly = $.sm2AccessOnly;
        this.sm2CertId = $.sm2CertId;
        this.sm2Enabled = $.sm2Enabled;
        this.tlsVersion = $.tlsVersion;
        this.xffHeaderMode = $.xffHeaderMode;
        this.xffHeaders = $.xffHeaders;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DomainListenArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DomainListenArgs $;

        public Builder() {
            $ = new DomainListenArgs();
        }

        public Builder(DomainListenArgs defaults) {
            $ = new DomainListenArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param certId The ID of the certificate to be added. This parameter is used only if the value of `HttpsPorts` is not empty (indicating that the domain name uses the HTTPS protocol).
         * 
         * @return builder
         * 
         */
        public Builder certId(@Nullable Output<String> certId) {
            $.certId = certId;
            return this;
        }

        /**
         * @param certId The ID of the certificate to be added. This parameter is used only if the value of `HttpsPorts` is not empty (indicating that the domain name uses the HTTPS protocol).
         * 
         * @return builder
         * 
         */
        public Builder certId(String certId) {
            return certId(Output.of(certId));
        }

        /**
         * @param cipherSuite The type of the cipher suites that you want to add. This parameter is available only if you specify `HttpsPorts`. Valid values:
         * 
         * @return builder
         * 
         */
        public Builder cipherSuite(@Nullable Output<Integer> cipherSuite) {
            $.cipherSuite = cipherSuite;
            return this;
        }

        /**
         * @param cipherSuite The type of the cipher suites that you want to add. This parameter is available only if you specify `HttpsPorts`. Valid values:
         * 
         * @return builder
         * 
         */
        public Builder cipherSuite(Integer cipherSuite) {
            return cipherSuite(Output.of(cipherSuite));
        }

        /**
         * @param customCiphers The specific custom encryption suite to add.
         * 
         * @return builder
         * 
         */
        public Builder customCiphers(@Nullable Output<List<String>> customCiphers) {
            $.customCiphers = customCiphers;
            return this;
        }

        /**
         * @param customCiphers The specific custom encryption suite to add.
         * 
         * @return builder
         * 
         */
        public Builder customCiphers(List<String> customCiphers) {
            return customCiphers(Output.of(customCiphers));
        }

        /**
         * @param customCiphers The specific custom encryption suite to add.
         * 
         * @return builder
         * 
         */
        public Builder customCiphers(String... customCiphers) {
            return customCiphers(List.of(customCiphers));
        }

        /**
         * @param enableTlsv3 Whether TSL1.3 version is supported. This parameter is used only if the value of `HttpsPorts` is not empty (indicating that the domain name uses the HTTPS protocol). Value:
         * 
         * @return builder
         * 
         */
        public Builder enableTlsv3(@Nullable Output<Boolean> enableTlsv3) {
            $.enableTlsv3 = enableTlsv3;
            return this;
        }

        /**
         * @param enableTlsv3 Whether TSL1.3 version is supported. This parameter is used only if the value of `HttpsPorts` is not empty (indicating that the domain name uses the HTTPS protocol). Value:
         * 
         * @return builder
         * 
         */
        public Builder enableTlsv3(Boolean enableTlsv3) {
            return enableTlsv3(Output.of(enableTlsv3));
        }

        /**
         * @param exclusiveIp Specifies whether to enable the exclusive IP address feature. This parameter is available only if you set `IPv6Enabled` to false and `ProtectionResource` to `share`. Valid values:
         * 
         * @return builder
         * 
         */
        public Builder exclusiveIp(@Nullable Output<Boolean> exclusiveIp) {
            $.exclusiveIp = exclusiveIp;
            return this;
        }

        /**
         * @param exclusiveIp Specifies whether to enable the exclusive IP address feature. This parameter is available only if you set `IPv6Enabled` to false and `ProtectionResource` to `share`. Valid values:
         * 
         * @return builder
         * 
         */
        public Builder exclusiveIp(Boolean exclusiveIp) {
            return exclusiveIp(Output.of(exclusiveIp));
        }

        /**
         * @param focusHttps Specifies whether to enable force redirect from HTTP to HTTPS for received requests. This parameter is available only if you specify `HttpsPorts` and leave `HttpPorts` empty. Valid values:
         * 
         * @return builder
         * 
         */
        public Builder focusHttps(@Nullable Output<Boolean> focusHttps) {
            $.focusHttps = focusHttps;
            return this;
        }

        /**
         * @param focusHttps Specifies whether to enable force redirect from HTTP to HTTPS for received requests. This parameter is available only if you specify `HttpsPorts` and leave `HttpPorts` empty. Valid values:
         * 
         * @return builder
         * 
         */
        public Builder focusHttps(Boolean focusHttps) {
            return focusHttps(Output.of(focusHttps));
        }

        /**
         * @param http2Enabled Specifies whether to enable HTTP/2. This parameter is available only if you specify `HttpsPorts`. Valid values:
         * 
         * @return builder
         * 
         */
        public Builder http2Enabled(@Nullable Output<Boolean> http2Enabled) {
            $.http2Enabled = http2Enabled;
            return this;
        }

        /**
         * @param http2Enabled Specifies whether to enable HTTP/2. This parameter is available only if you specify `HttpsPorts`. Valid values:
         * 
         * @return builder
         * 
         */
        public Builder http2Enabled(Boolean http2Enabled) {
            return http2Enabled(Output.of(http2Enabled));
        }

        /**
         * @param httpPorts The HTTP listener ports. Specify the value in the \[**port1,port2,...**] format.
         * 
         * @return builder
         * 
         */
        public Builder httpPorts(@Nullable Output<List<Integer>> httpPorts) {
            $.httpPorts = httpPorts;
            return this;
        }

        /**
         * @param httpPorts The HTTP listener ports. Specify the value in the \[**port1,port2,...**] format.
         * 
         * @return builder
         * 
         */
        public Builder httpPorts(List<Integer> httpPorts) {
            return httpPorts(Output.of(httpPorts));
        }

        /**
         * @param httpPorts The HTTP listener ports. Specify the value in the \[**port1,port2,...**] format.
         * 
         * @return builder
         * 
         */
        public Builder httpPorts(Integer... httpPorts) {
            return httpPorts(List.of(httpPorts));
        }

        /**
         * @param httpsPorts The HTTPS listener ports. Specify the value in the \[**port1,port2,...**] format.
         * 
         * @return builder
         * 
         */
        public Builder httpsPorts(@Nullable Output<List<Integer>> httpsPorts) {
            $.httpsPorts = httpsPorts;
            return this;
        }

        /**
         * @param httpsPorts The HTTPS listener ports. Specify the value in the \[**port1,port2,...**] format.
         * 
         * @return builder
         * 
         */
        public Builder httpsPorts(List<Integer> httpsPorts) {
            return httpsPorts(Output.of(httpsPorts));
        }

        /**
         * @param httpsPorts The HTTPS listener ports. Specify the value in the \[**port1,port2,...**] format.
         * 
         * @return builder
         * 
         */
        public Builder httpsPorts(Integer... httpsPorts) {
            return httpsPorts(List.of(httpsPorts));
        }

        /**
         * @param ipv6Enabled Specifies whether to enable IPv6 protection. Valid values:
         * 
         * @return builder
         * 
         */
        public Builder ipv6Enabled(@Nullable Output<Boolean> ipv6Enabled) {
            $.ipv6Enabled = ipv6Enabled;
            return this;
        }

        /**
         * @param ipv6Enabled Specifies whether to enable IPv6 protection. Valid values:
         * 
         * @return builder
         * 
         */
        public Builder ipv6Enabled(Boolean ipv6Enabled) {
            return ipv6Enabled(Output.of(ipv6Enabled));
        }

        /**
         * @param protectionResource The type of the protection resource. Valid values:
         * 
         * @return builder
         * 
         */
        public Builder protectionResource(@Nullable Output<String> protectionResource) {
            $.protectionResource = protectionResource;
            return this;
        }

        /**
         * @param protectionResource The type of the protection resource. Valid values:
         * 
         * @return builder
         * 
         */
        public Builder protectionResource(String protectionResource) {
            return protectionResource(Output.of(protectionResource));
        }

        /**
         * @param sm2AccessOnly Specifies whether to allow access only from SM certificate-based clients. This parameter is available only if you set SM2Enabled to true.
         * 
         * - true
         * - false
         * 
         * @return builder
         * 
         */
        public Builder sm2AccessOnly(@Nullable Output<Boolean> sm2AccessOnly) {
            $.sm2AccessOnly = sm2AccessOnly;
            return this;
        }

        /**
         * @param sm2AccessOnly Specifies whether to allow access only from SM certificate-based clients. This parameter is available only if you set SM2Enabled to true.
         * 
         * - true
         * - false
         * 
         * @return builder
         * 
         */
        public Builder sm2AccessOnly(Boolean sm2AccessOnly) {
            return sm2AccessOnly(Output.of(sm2AccessOnly));
        }

        /**
         * @param sm2CertId The ID of the SM certificate that you want to add. This parameter is available only if you set SM2Enabled to true.
         * 
         * @return builder
         * 
         */
        public Builder sm2CertId(@Nullable Output<String> sm2CertId) {
            $.sm2CertId = sm2CertId;
            return this;
        }

        /**
         * @param sm2CertId The ID of the SM certificate that you want to add. This parameter is available only if you set SM2Enabled to true.
         * 
         * @return builder
         * 
         */
        public Builder sm2CertId(String sm2CertId) {
            return sm2CertId(Output.of(sm2CertId));
        }

        /**
         * @param sm2Enabled Specifies whether to add an SM certificate.
         * 
         * @return builder
         * 
         */
        public Builder sm2Enabled(@Nullable Output<Boolean> sm2Enabled) {
            $.sm2Enabled = sm2Enabled;
            return this;
        }

        /**
         * @param sm2Enabled Specifies whether to add an SM certificate.
         * 
         * @return builder
         * 
         */
        public Builder sm2Enabled(Boolean sm2Enabled) {
            return sm2Enabled(Output.of(sm2Enabled));
        }

        /**
         * @param tlsVersion The version of TLS to add. This parameter is used only if the value of `HttpsPorts` is not empty (indicating that the domain name uses the HTTPS protocol). Value:
         * 
         * @return builder
         * 
         */
        public Builder tlsVersion(@Nullable Output<String> tlsVersion) {
            $.tlsVersion = tlsVersion;
            return this;
        }

        /**
         * @param tlsVersion The version of TLS to add. This parameter is used only if the value of `HttpsPorts` is not empty (indicating that the domain name uses the HTTPS protocol). Value:
         * 
         * @return builder
         * 
         */
        public Builder tlsVersion(String tlsVersion) {
            return tlsVersion(Output.of(tlsVersion));
        }

        /**
         * @param xffHeaderMode The method that is used to obtain the originating IP address of a client. Valid values:
         * 
         * @return builder
         * 
         */
        public Builder xffHeaderMode(@Nullable Output<Integer> xffHeaderMode) {
            $.xffHeaderMode = xffHeaderMode;
            return this;
        }

        /**
         * @param xffHeaderMode The method that is used to obtain the originating IP address of a client. Valid values:
         * 
         * @return builder
         * 
         */
        public Builder xffHeaderMode(Integer xffHeaderMode) {
            return xffHeaderMode(Output.of(xffHeaderMode));
        }

        /**
         * @param xffHeaders The custom header fields that are used to obtain the originating IP address of a client. Specify the value in the **\[&#34;header1&#34;,&#34;header2&#34;,...]** format.
         * 
         * &gt; **NOTE:**   This parameter is required only if you set `XffHeaderMode` to 2.
         * 
         * @return builder
         * 
         */
        public Builder xffHeaders(@Nullable Output<List<String>> xffHeaders) {
            $.xffHeaders = xffHeaders;
            return this;
        }

        /**
         * @param xffHeaders The custom header fields that are used to obtain the originating IP address of a client. Specify the value in the **\[&#34;header1&#34;,&#34;header2&#34;,...]** format.
         * 
         * &gt; **NOTE:**   This parameter is required only if you set `XffHeaderMode` to 2.
         * 
         * @return builder
         * 
         */
        public Builder xffHeaders(List<String> xffHeaders) {
            return xffHeaders(Output.of(xffHeaders));
        }

        /**
         * @param xffHeaders The custom header fields that are used to obtain the originating IP address of a client. Specify the value in the **\[&#34;header1&#34;,&#34;header2&#34;,...]** format.
         * 
         * &gt; **NOTE:**   This parameter is required only if you set `XffHeaderMode` to 2.
         * 
         * @return builder
         * 
         */
        public Builder xffHeaders(String... xffHeaders) {
            return xffHeaders(List.of(xffHeaders));
        }

        public DomainListenArgs build() {
            return $;
        }
    }

}
