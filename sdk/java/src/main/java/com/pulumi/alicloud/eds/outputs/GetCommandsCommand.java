// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.eds.outputs;

import com.pulumi.alicloud.eds.outputs.GetCommandsCommandInvokeDesktop;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetCommandsCommand {
    /**
     * @return The Contents of the Script to Base64 Encoded Transmission.
     * 
     */
    private String commandContent;
    /**
     * @return The Script Type. Valid values: `RunBatScript`, `RunPowerShellScript`.
     * 
     */
    private String commandType;
    /**
     * @return The Task of Creation Time.
     * 
     */
    private String createTime;
    /**
     * @return The ID of the Command.
     * 
     */
    private String id;
    /**
     * @return The Implementation of the Target Cloud Desktop Collection.
     * 
     */
    private List<GetCommandsCommandInvokeDesktop> invokeDesktops;
    /**
     * @return The invoke id of the Command.
     * 
     */
    private String invokeId;
    /**
     * @return Script Is Executed in the Overall Implementation of the State. Valid values: `Pending`, `Failed`, `PartialFailed`, `Running`, `Stopped`, `Stopping`, `Finished`, `Success`.
     * 
     */
    private String status;

    private GetCommandsCommand() {}
    /**
     * @return The Contents of the Script to Base64 Encoded Transmission.
     * 
     */
    public String commandContent() {
        return this.commandContent;
    }
    /**
     * @return The Script Type. Valid values: `RunBatScript`, `RunPowerShellScript`.
     * 
     */
    public String commandType() {
        return this.commandType;
    }
    /**
     * @return The Task of Creation Time.
     * 
     */
    public String createTime() {
        return this.createTime;
    }
    /**
     * @return The ID of the Command.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The Implementation of the Target Cloud Desktop Collection.
     * 
     */
    public List<GetCommandsCommandInvokeDesktop> invokeDesktops() {
        return this.invokeDesktops;
    }
    /**
     * @return The invoke id of the Command.
     * 
     */
    public String invokeId() {
        return this.invokeId;
    }
    /**
     * @return Script Is Executed in the Overall Implementation of the State. Valid values: `Pending`, `Failed`, `PartialFailed`, `Running`, `Stopped`, `Stopping`, `Finished`, `Success`.
     * 
     */
    public String status() {
        return this.status;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetCommandsCommand defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String commandContent;
        private String commandType;
        private String createTime;
        private String id;
        private List<GetCommandsCommandInvokeDesktop> invokeDesktops;
        private String invokeId;
        private String status;
        public Builder() {}
        public Builder(GetCommandsCommand defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.commandContent = defaults.commandContent;
    	      this.commandType = defaults.commandType;
    	      this.createTime = defaults.createTime;
    	      this.id = defaults.id;
    	      this.invokeDesktops = defaults.invokeDesktops;
    	      this.invokeId = defaults.invokeId;
    	      this.status = defaults.status;
        }

        @CustomType.Setter
        public Builder commandContent(String commandContent) {
            if (commandContent == null) {
              throw new MissingRequiredPropertyException("GetCommandsCommand", "commandContent");
            }
            this.commandContent = commandContent;
            return this;
        }
        @CustomType.Setter
        public Builder commandType(String commandType) {
            if (commandType == null) {
              throw new MissingRequiredPropertyException("GetCommandsCommand", "commandType");
            }
            this.commandType = commandType;
            return this;
        }
        @CustomType.Setter
        public Builder createTime(String createTime) {
            if (createTime == null) {
              throw new MissingRequiredPropertyException("GetCommandsCommand", "createTime");
            }
            this.createTime = createTime;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetCommandsCommand", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder invokeDesktops(List<GetCommandsCommandInvokeDesktop> invokeDesktops) {
            if (invokeDesktops == null) {
              throw new MissingRequiredPropertyException("GetCommandsCommand", "invokeDesktops");
            }
            this.invokeDesktops = invokeDesktops;
            return this;
        }
        public Builder invokeDesktops(GetCommandsCommandInvokeDesktop... invokeDesktops) {
            return invokeDesktops(List.of(invokeDesktops));
        }
        @CustomType.Setter
        public Builder invokeId(String invokeId) {
            if (invokeId == null) {
              throw new MissingRequiredPropertyException("GetCommandsCommand", "invokeId");
            }
            this.invokeId = invokeId;
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            if (status == null) {
              throw new MissingRequiredPropertyException("GetCommandsCommand", "status");
            }
            this.status = status;
            return this;
        }
        public GetCommandsCommand build() {
            final var _resultValue = new GetCommandsCommand();
            _resultValue.commandContent = commandContent;
            _resultValue.commandType = commandType;
            _resultValue.createTime = createTime;
            _resultValue.id = id;
            _resultValue.invokeDesktops = invokeDesktops;
            _resultValue.invokeId = invokeId;
            _resultValue.status = status;
            return _resultValue;
        }
    }
}
