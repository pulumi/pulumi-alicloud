// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.rds.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetInstanceClassInfosInfoArgs extends com.pulumi.resources.ResourceArgs {

    public static final GetInstanceClassInfosInfoArgs Empty = new GetInstanceClassInfosInfoArgs();

    /**
     * The code of the instance type.
     * 
     */
    @Import(name="classCode")
    private @Nullable Output<String> classCode;

    /**
     * @return The code of the instance type.
     * 
     */
    public Optional<Output<String>> classCode() {
        return Optional.ofNullable(this.classCode);
    }

    /**
     * The instance family of the instance.
     * 
     */
    @Import(name="classGroup")
    private @Nullable Output<String> classGroup;

    /**
     * @return The instance family of the instance.
     * 
     */
    public Optional<Output<String>> classGroup() {
        return Optional.ofNullable(this.classGroup);
    }

    /**
     * The number of cores that are supported by the instance type. Unit: cores.
     * 
     */
    @Import(name="cpu")
    private @Nullable Output<String> cpu;

    /**
     * @return The number of cores that are supported by the instance type. Unit: cores.
     * 
     */
    public Optional<Output<String>> cpu() {
        return Optional.ofNullable(this.cpu);
    }

    /**
     * The architecture of the instance type.
     * 
     */
    @Import(name="instructionSetArch")
    private @Nullable Output<String> instructionSetArch;

    /**
     * @return The architecture of the instance type.
     * 
     */
    public Optional<Output<String>> instructionSetArch() {
        return Optional.ofNullable(this.instructionSetArch);
    }

    /**
     * The maximum number of connections that are supported by the instance type. Unit: connections.
     * 
     */
    @Import(name="maxConnections")
    private @Nullable Output<String> maxConnections;

    /**
     * @return The maximum number of connections that are supported by the instance type. Unit: connections.
     * 
     */
    public Optional<Output<String>> maxConnections() {
        return Optional.ofNullable(this.maxConnections);
    }

    /**
     * The maximum I/O bandwidth that is supported by the instance type. Unit: Mbit/s.
     * 
     */
    @Import(name="maxIombps")
    private @Nullable Output<String> maxIombps;

    /**
     * @return The maximum I/O bandwidth that is supported by the instance type. Unit: Mbit/s.
     * 
     */
    public Optional<Output<String>> maxIombps() {
        return Optional.ofNullable(this.maxIombps);
    }

    /**
     * The maximum input/output operations per second (IOPS) that is supported by the instance type. Unit: operations per second.
     * 
     */
    @Import(name="maxIops")
    private @Nullable Output<String> maxIops;

    /**
     * @return The maximum input/output operations per second (IOPS) that is supported by the instance type. Unit: operations per second.
     * 
     */
    public Optional<Output<String>> maxIops() {
        return Optional.ofNullable(this.maxIops);
    }

    /**
     * The memory capacity that is supported by the instance type. Unit: GB.
     * 
     */
    @Import(name="memoryClass")
    private @Nullable Output<String> memoryClass;

    /**
     * @return The memory capacity that is supported by the instance type. Unit: GB.
     * 
     */
    public Optional<Output<String>> memoryClass() {
        return Optional.ofNullable(this.memoryClass);
    }

    /**
     * The fee that you must pay for the instance type. Unit: cent (USD).
     * 
     */
    @Import(name="referencePrice")
    private @Nullable Output<String> referencePrice;

    /**
     * @return The fee that you must pay for the instance type. Unit: cent (USD).
     * 
     */
    public Optional<Output<String>> referencePrice() {
        return Optional.ofNullable(this.referencePrice);
    }

    private GetInstanceClassInfosInfoArgs() {}

    private GetInstanceClassInfosInfoArgs(GetInstanceClassInfosInfoArgs $) {
        this.classCode = $.classCode;
        this.classGroup = $.classGroup;
        this.cpu = $.cpu;
        this.instructionSetArch = $.instructionSetArch;
        this.maxConnections = $.maxConnections;
        this.maxIombps = $.maxIombps;
        this.maxIops = $.maxIops;
        this.memoryClass = $.memoryClass;
        this.referencePrice = $.referencePrice;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetInstanceClassInfosInfoArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetInstanceClassInfosInfoArgs $;

        public Builder() {
            $ = new GetInstanceClassInfosInfoArgs();
        }

        public Builder(GetInstanceClassInfosInfoArgs defaults) {
            $ = new GetInstanceClassInfosInfoArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param classCode The code of the instance type.
         * 
         * @return builder
         * 
         */
        public Builder classCode(@Nullable Output<String> classCode) {
            $.classCode = classCode;
            return this;
        }

        /**
         * @param classCode The code of the instance type.
         * 
         * @return builder
         * 
         */
        public Builder classCode(String classCode) {
            return classCode(Output.of(classCode));
        }

        /**
         * @param classGroup The instance family of the instance.
         * 
         * @return builder
         * 
         */
        public Builder classGroup(@Nullable Output<String> classGroup) {
            $.classGroup = classGroup;
            return this;
        }

        /**
         * @param classGroup The instance family of the instance.
         * 
         * @return builder
         * 
         */
        public Builder classGroup(String classGroup) {
            return classGroup(Output.of(classGroup));
        }

        /**
         * @param cpu The number of cores that are supported by the instance type. Unit: cores.
         * 
         * @return builder
         * 
         */
        public Builder cpu(@Nullable Output<String> cpu) {
            $.cpu = cpu;
            return this;
        }

        /**
         * @param cpu The number of cores that are supported by the instance type. Unit: cores.
         * 
         * @return builder
         * 
         */
        public Builder cpu(String cpu) {
            return cpu(Output.of(cpu));
        }

        /**
         * @param instructionSetArch The architecture of the instance type.
         * 
         * @return builder
         * 
         */
        public Builder instructionSetArch(@Nullable Output<String> instructionSetArch) {
            $.instructionSetArch = instructionSetArch;
            return this;
        }

        /**
         * @param instructionSetArch The architecture of the instance type.
         * 
         * @return builder
         * 
         */
        public Builder instructionSetArch(String instructionSetArch) {
            return instructionSetArch(Output.of(instructionSetArch));
        }

        /**
         * @param maxConnections The maximum number of connections that are supported by the instance type. Unit: connections.
         * 
         * @return builder
         * 
         */
        public Builder maxConnections(@Nullable Output<String> maxConnections) {
            $.maxConnections = maxConnections;
            return this;
        }

        /**
         * @param maxConnections The maximum number of connections that are supported by the instance type. Unit: connections.
         * 
         * @return builder
         * 
         */
        public Builder maxConnections(String maxConnections) {
            return maxConnections(Output.of(maxConnections));
        }

        /**
         * @param maxIombps The maximum I/O bandwidth that is supported by the instance type. Unit: Mbit/s.
         * 
         * @return builder
         * 
         */
        public Builder maxIombps(@Nullable Output<String> maxIombps) {
            $.maxIombps = maxIombps;
            return this;
        }

        /**
         * @param maxIombps The maximum I/O bandwidth that is supported by the instance type. Unit: Mbit/s.
         * 
         * @return builder
         * 
         */
        public Builder maxIombps(String maxIombps) {
            return maxIombps(Output.of(maxIombps));
        }

        /**
         * @param maxIops The maximum input/output operations per second (IOPS) that is supported by the instance type. Unit: operations per second.
         * 
         * @return builder
         * 
         */
        public Builder maxIops(@Nullable Output<String> maxIops) {
            $.maxIops = maxIops;
            return this;
        }

        /**
         * @param maxIops The maximum input/output operations per second (IOPS) that is supported by the instance type. Unit: operations per second.
         * 
         * @return builder
         * 
         */
        public Builder maxIops(String maxIops) {
            return maxIops(Output.of(maxIops));
        }

        /**
         * @param memoryClass The memory capacity that is supported by the instance type. Unit: GB.
         * 
         * @return builder
         * 
         */
        public Builder memoryClass(@Nullable Output<String> memoryClass) {
            $.memoryClass = memoryClass;
            return this;
        }

        /**
         * @param memoryClass The memory capacity that is supported by the instance type. Unit: GB.
         * 
         * @return builder
         * 
         */
        public Builder memoryClass(String memoryClass) {
            return memoryClass(Output.of(memoryClass));
        }

        /**
         * @param referencePrice The fee that you must pay for the instance type. Unit: cent (USD).
         * 
         * @return builder
         * 
         */
        public Builder referencePrice(@Nullable Output<String> referencePrice) {
            $.referencePrice = referencePrice;
            return this;
        }

        /**
         * @param referencePrice The fee that you must pay for the instance type. Unit: cent (USD).
         * 
         * @return builder
         * 
         */
        public Builder referencePrice(String referencePrice) {
            return referencePrice(Output.of(referencePrice));
        }

        public GetInstanceClassInfosInfoArgs build() {
            return $;
        }
    }

}
