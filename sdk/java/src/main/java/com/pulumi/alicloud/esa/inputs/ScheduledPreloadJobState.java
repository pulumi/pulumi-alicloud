// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.esa.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ScheduledPreloadJobState extends com.pulumi.resources.ResourceArgs {

    public static final ScheduledPreloadJobState Empty = new ScheduledPreloadJobState();

    /**
     * The time when the task was created.
     * 
     */
    @Import(name="createTime")
    private @Nullable Output<String> createTime;

    /**
     * @return The time when the task was created.
     * 
     */
    public Optional<Output<String>> createTime() {
        return Optional.ofNullable(this.createTime);
    }

    /**
     * The method to submit the URLs to be prefetched.
     * 
     */
    @Import(name="insertWay")
    private @Nullable Output<String> insertWay;

    /**
     * @return The method to submit the URLs to be prefetched.
     * 
     */
    public Optional<Output<String>> insertWay() {
        return Optional.ofNullable(this.insertWay);
    }

    /**
     * Preheat OSS files regularly and fill in the OSS file address. Note: The OSS file contains the URL that you need to warm up.
     * 
     */
    @Import(name="ossUrl")
    private @Nullable Output<String> ossUrl;

    /**
     * @return Preheat OSS files regularly and fill in the OSS file address. Note: The OSS file contains the URL that you need to warm up.
     * 
     */
    public Optional<Output<String>> ossUrl() {
        return Optional.ofNullable(this.ossUrl);
    }

    /**
     * The ID of the prefetch task.
     * 
     */
    @Import(name="scheduledPreloadJobId")
    private @Nullable Output<String> scheduledPreloadJobId;

    /**
     * @return The ID of the prefetch task.
     * 
     */
    public Optional<Output<String>> scheduledPreloadJobId() {
        return Optional.ofNullable(this.scheduledPreloadJobId);
    }

    /**
     * The task name.
     * 
     */
    @Import(name="scheduledPreloadJobName")
    private @Nullable Output<String> scheduledPreloadJobName;

    /**
     * @return The task name.
     * 
     */
    public Optional<Output<String>> scheduledPreloadJobName() {
        return Optional.ofNullable(this.scheduledPreloadJobName);
    }

    /**
     * The site ID.
     * 
     */
    @Import(name="siteId")
    private @Nullable Output<Integer> siteId;

    /**
     * @return The site ID.
     * 
     */
    public Optional<Output<Integer>> siteId() {
        return Optional.ofNullable(this.siteId);
    }

    /**
     * A list of URLs to be preheated, which is used when uploading a preheated file in the text box mode.
     * 
     */
    @Import(name="urlList")
    private @Nullable Output<String> urlList;

    /**
     * @return A list of URLs to be preheated, which is used when uploading a preheated file in the text box mode.
     * 
     */
    public Optional<Output<String>> urlList() {
        return Optional.ofNullable(this.urlList);
    }

    private ScheduledPreloadJobState() {}

    private ScheduledPreloadJobState(ScheduledPreloadJobState $) {
        this.createTime = $.createTime;
        this.insertWay = $.insertWay;
        this.ossUrl = $.ossUrl;
        this.scheduledPreloadJobId = $.scheduledPreloadJobId;
        this.scheduledPreloadJobName = $.scheduledPreloadJobName;
        this.siteId = $.siteId;
        this.urlList = $.urlList;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ScheduledPreloadJobState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ScheduledPreloadJobState $;

        public Builder() {
            $ = new ScheduledPreloadJobState();
        }

        public Builder(ScheduledPreloadJobState defaults) {
            $ = new ScheduledPreloadJobState(Objects.requireNonNull(defaults));
        }

        /**
         * @param createTime The time when the task was created.
         * 
         * @return builder
         * 
         */
        public Builder createTime(@Nullable Output<String> createTime) {
            $.createTime = createTime;
            return this;
        }

        /**
         * @param createTime The time when the task was created.
         * 
         * @return builder
         * 
         */
        public Builder createTime(String createTime) {
            return createTime(Output.of(createTime));
        }

        /**
         * @param insertWay The method to submit the URLs to be prefetched.
         * 
         * @return builder
         * 
         */
        public Builder insertWay(@Nullable Output<String> insertWay) {
            $.insertWay = insertWay;
            return this;
        }

        /**
         * @param insertWay The method to submit the URLs to be prefetched.
         * 
         * @return builder
         * 
         */
        public Builder insertWay(String insertWay) {
            return insertWay(Output.of(insertWay));
        }

        /**
         * @param ossUrl Preheat OSS files regularly and fill in the OSS file address. Note: The OSS file contains the URL that you need to warm up.
         * 
         * @return builder
         * 
         */
        public Builder ossUrl(@Nullable Output<String> ossUrl) {
            $.ossUrl = ossUrl;
            return this;
        }

        /**
         * @param ossUrl Preheat OSS files regularly and fill in the OSS file address. Note: The OSS file contains the URL that you need to warm up.
         * 
         * @return builder
         * 
         */
        public Builder ossUrl(String ossUrl) {
            return ossUrl(Output.of(ossUrl));
        }

        /**
         * @param scheduledPreloadJobId The ID of the prefetch task.
         * 
         * @return builder
         * 
         */
        public Builder scheduledPreloadJobId(@Nullable Output<String> scheduledPreloadJobId) {
            $.scheduledPreloadJobId = scheduledPreloadJobId;
            return this;
        }

        /**
         * @param scheduledPreloadJobId The ID of the prefetch task.
         * 
         * @return builder
         * 
         */
        public Builder scheduledPreloadJobId(String scheduledPreloadJobId) {
            return scheduledPreloadJobId(Output.of(scheduledPreloadJobId));
        }

        /**
         * @param scheduledPreloadJobName The task name.
         * 
         * @return builder
         * 
         */
        public Builder scheduledPreloadJobName(@Nullable Output<String> scheduledPreloadJobName) {
            $.scheduledPreloadJobName = scheduledPreloadJobName;
            return this;
        }

        /**
         * @param scheduledPreloadJobName The task name.
         * 
         * @return builder
         * 
         */
        public Builder scheduledPreloadJobName(String scheduledPreloadJobName) {
            return scheduledPreloadJobName(Output.of(scheduledPreloadJobName));
        }

        /**
         * @param siteId The site ID.
         * 
         * @return builder
         * 
         */
        public Builder siteId(@Nullable Output<Integer> siteId) {
            $.siteId = siteId;
            return this;
        }

        /**
         * @param siteId The site ID.
         * 
         * @return builder
         * 
         */
        public Builder siteId(Integer siteId) {
            return siteId(Output.of(siteId));
        }

        /**
         * @param urlList A list of URLs to be preheated, which is used when uploading a preheated file in the text box mode.
         * 
         * @return builder
         * 
         */
        public Builder urlList(@Nullable Output<String> urlList) {
            $.urlList = urlList;
            return this;
        }

        /**
         * @param urlList A list of URLs to be preheated, which is used when uploading a preheated file in the text box mode.
         * 
         * @return builder
         * 
         */
        public Builder urlList(String urlList) {
            return urlList(Output.of(urlList));
        }

        public ScheduledPreloadJobState build() {
            return $;
        }
    }

}
