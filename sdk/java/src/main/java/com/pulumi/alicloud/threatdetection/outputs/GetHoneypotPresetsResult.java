// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.threatdetection.outputs;

import com.pulumi.alicloud.threatdetection.outputs.GetHoneypotPresetsPreset;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetHoneypotPresetsResult {
    private @Nullable Integer currentPage;
    private @Nullable Boolean enableDetails;
    /**
     * @return Honeypot mirror name.
     * 
     */
    private @Nullable String honeypotImageName;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return A list of Honeypot Preset IDs.
     * 
     */
    private List<String> ids;
    private @Nullable String lang;
    /**
     * @return Unique id of management node.
     * 
     */
    private @Nullable String nodeId;
    private @Nullable String nodeName;
    private @Nullable String outputFile;
    private @Nullable Integer pageNumber;
    private @Nullable Integer pageSize;
    /**
     * @return Honeypot template custom name.
     * 
     */
    private @Nullable String presetName;
    /**
     * @return A list of Honeypot Preset Entries. Each element contains the following attributes:
     * 
     */
    private List<GetHoneypotPresetsPreset> presets;

    private GetHoneypotPresetsResult() {}
    public Optional<Integer> currentPage() {
        return Optional.ofNullable(this.currentPage);
    }
    public Optional<Boolean> enableDetails() {
        return Optional.ofNullable(this.enableDetails);
    }
    /**
     * @return Honeypot mirror name.
     * 
     */
    public Optional<String> honeypotImageName() {
        return Optional.ofNullable(this.honeypotImageName);
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return A list of Honeypot Preset IDs.
     * 
     */
    public List<String> ids() {
        return this.ids;
    }
    public Optional<String> lang() {
        return Optional.ofNullable(this.lang);
    }
    /**
     * @return Unique id of management node.
     * 
     */
    public Optional<String> nodeId() {
        return Optional.ofNullable(this.nodeId);
    }
    public Optional<String> nodeName() {
        return Optional.ofNullable(this.nodeName);
    }
    public Optional<String> outputFile() {
        return Optional.ofNullable(this.outputFile);
    }
    public Optional<Integer> pageNumber() {
        return Optional.ofNullable(this.pageNumber);
    }
    public Optional<Integer> pageSize() {
        return Optional.ofNullable(this.pageSize);
    }
    /**
     * @return Honeypot template custom name.
     * 
     */
    public Optional<String> presetName() {
        return Optional.ofNullable(this.presetName);
    }
    /**
     * @return A list of Honeypot Preset Entries. Each element contains the following attributes:
     * 
     */
    public List<GetHoneypotPresetsPreset> presets() {
        return this.presets;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetHoneypotPresetsResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Integer currentPage;
        private @Nullable Boolean enableDetails;
        private @Nullable String honeypotImageName;
        private String id;
        private List<String> ids;
        private @Nullable String lang;
        private @Nullable String nodeId;
        private @Nullable String nodeName;
        private @Nullable String outputFile;
        private @Nullable Integer pageNumber;
        private @Nullable Integer pageSize;
        private @Nullable String presetName;
        private List<GetHoneypotPresetsPreset> presets;
        public Builder() {}
        public Builder(GetHoneypotPresetsResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.currentPage = defaults.currentPage;
    	      this.enableDetails = defaults.enableDetails;
    	      this.honeypotImageName = defaults.honeypotImageName;
    	      this.id = defaults.id;
    	      this.ids = defaults.ids;
    	      this.lang = defaults.lang;
    	      this.nodeId = defaults.nodeId;
    	      this.nodeName = defaults.nodeName;
    	      this.outputFile = defaults.outputFile;
    	      this.pageNumber = defaults.pageNumber;
    	      this.pageSize = defaults.pageSize;
    	      this.presetName = defaults.presetName;
    	      this.presets = defaults.presets;
        }

        @CustomType.Setter
        public Builder currentPage(@Nullable Integer currentPage) {

            this.currentPage = currentPage;
            return this;
        }
        @CustomType.Setter
        public Builder enableDetails(@Nullable Boolean enableDetails) {

            this.enableDetails = enableDetails;
            return this;
        }
        @CustomType.Setter
        public Builder honeypotImageName(@Nullable String honeypotImageName) {

            this.honeypotImageName = honeypotImageName;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetHoneypotPresetsResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder ids(List<String> ids) {
            if (ids == null) {
              throw new MissingRequiredPropertyException("GetHoneypotPresetsResult", "ids");
            }
            this.ids = ids;
            return this;
        }
        public Builder ids(String... ids) {
            return ids(List.of(ids));
        }
        @CustomType.Setter
        public Builder lang(@Nullable String lang) {

            this.lang = lang;
            return this;
        }
        @CustomType.Setter
        public Builder nodeId(@Nullable String nodeId) {

            this.nodeId = nodeId;
            return this;
        }
        @CustomType.Setter
        public Builder nodeName(@Nullable String nodeName) {

            this.nodeName = nodeName;
            return this;
        }
        @CustomType.Setter
        public Builder outputFile(@Nullable String outputFile) {

            this.outputFile = outputFile;
            return this;
        }
        @CustomType.Setter
        public Builder pageNumber(@Nullable Integer pageNumber) {

            this.pageNumber = pageNumber;
            return this;
        }
        @CustomType.Setter
        public Builder pageSize(@Nullable Integer pageSize) {

            this.pageSize = pageSize;
            return this;
        }
        @CustomType.Setter
        public Builder presetName(@Nullable String presetName) {

            this.presetName = presetName;
            return this;
        }
        @CustomType.Setter
        public Builder presets(List<GetHoneypotPresetsPreset> presets) {
            if (presets == null) {
              throw new MissingRequiredPropertyException("GetHoneypotPresetsResult", "presets");
            }
            this.presets = presets;
            return this;
        }
        public Builder presets(GetHoneypotPresetsPreset... presets) {
            return presets(List.of(presets));
        }
        public GetHoneypotPresetsResult build() {
            final var _resultValue = new GetHoneypotPresetsResult();
            _resultValue.currentPage = currentPage;
            _resultValue.enableDetails = enableDetails;
            _resultValue.honeypotImageName = honeypotImageName;
            _resultValue.id = id;
            _resultValue.ids = ids;
            _resultValue.lang = lang;
            _resultValue.nodeId = nodeId;
            _resultValue.nodeName = nodeName;
            _resultValue.outputFile = outputFile;
            _resultValue.pageNumber = pageNumber;
            _resultValue.pageSize = pageSize;
            _resultValue.presetName = presetName;
            _resultValue.presets = presets;
            return _resultValue;
        }
    }
}
