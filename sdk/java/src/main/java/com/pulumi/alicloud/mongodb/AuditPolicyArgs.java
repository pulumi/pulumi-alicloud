// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.mongodb;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AuditPolicyArgs extends com.pulumi.resources.ResourceArgs {

    public static final AuditPolicyArgs Empty = new AuditPolicyArgs();

    /**
     * The status of the audit log. Valid values: `disabled`, `enable`.
     * 
     */
    @Import(name="auditStatus", required=true)
    private Output<String> auditStatus;

    /**
     * @return The status of the audit log. Valid values: `disabled`, `enable`.
     * 
     */
    public Output<String> auditStatus() {
        return this.auditStatus;
    }

    /**
     * The ID of the instance.
     * 
     */
    @Import(name="dbInstanceId", required=true)
    private Output<String> dbInstanceId;

    /**
     * @return The ID of the instance.
     * 
     */
    public Output<String> dbInstanceId() {
        return this.dbInstanceId;
    }

    /**
     * The retention period of audit logs. Valid values: `1` to `30`. Default value: `30`.
     * 
     */
    @Import(name="storagePeriod")
    private @Nullable Output<Integer> storagePeriod;

    /**
     * @return The retention period of audit logs. Valid values: `1` to `30`. Default value: `30`.
     * 
     */
    public Optional<Output<Integer>> storagePeriod() {
        return Optional.ofNullable(this.storagePeriod);
    }

    private AuditPolicyArgs() {}

    private AuditPolicyArgs(AuditPolicyArgs $) {
        this.auditStatus = $.auditStatus;
        this.dbInstanceId = $.dbInstanceId;
        this.storagePeriod = $.storagePeriod;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AuditPolicyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AuditPolicyArgs $;

        public Builder() {
            $ = new AuditPolicyArgs();
        }

        public Builder(AuditPolicyArgs defaults) {
            $ = new AuditPolicyArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param auditStatus The status of the audit log. Valid values: `disabled`, `enable`.
         * 
         * @return builder
         * 
         */
        public Builder auditStatus(Output<String> auditStatus) {
            $.auditStatus = auditStatus;
            return this;
        }

        /**
         * @param auditStatus The status of the audit log. Valid values: `disabled`, `enable`.
         * 
         * @return builder
         * 
         */
        public Builder auditStatus(String auditStatus) {
            return auditStatus(Output.of(auditStatus));
        }

        /**
         * @param dbInstanceId The ID of the instance.
         * 
         * @return builder
         * 
         */
        public Builder dbInstanceId(Output<String> dbInstanceId) {
            $.dbInstanceId = dbInstanceId;
            return this;
        }

        /**
         * @param dbInstanceId The ID of the instance.
         * 
         * @return builder
         * 
         */
        public Builder dbInstanceId(String dbInstanceId) {
            return dbInstanceId(Output.of(dbInstanceId));
        }

        /**
         * @param storagePeriod The retention period of audit logs. Valid values: `1` to `30`. Default value: `30`.
         * 
         * @return builder
         * 
         */
        public Builder storagePeriod(@Nullable Output<Integer> storagePeriod) {
            $.storagePeriod = storagePeriod;
            return this;
        }

        /**
         * @param storagePeriod The retention period of audit logs. Valid values: `1` to `30`. Default value: `30`.
         * 
         * @return builder
         * 
         */
        public Builder storagePeriod(Integer storagePeriod) {
            return storagePeriod(Output.of(storagePeriod));
        }

        public AuditPolicyArgs build() {
            if ($.auditStatus == null) {
                throw new MissingRequiredPropertyException("AuditPolicyArgs", "auditStatus");
            }
            if ($.dbInstanceId == null) {
                throw new MissingRequiredPropertyException("AuditPolicyArgs", "dbInstanceId");
            }
            return $;
        }
    }

}
