// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.dms.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetEnterpriseDatabasesDatabase {
    /**
     * @return The name of the Database Directory.&gt; PG Series databases will display the database name.
     * 
     */
    private String catalogName;
    /**
     * @return The ID of the physical library.
     * 
     */
    private String databaseId;
    /**
     * @return Database type.
     * 
     */
    private String dbType;
    /**
     * @return The DBA user ID of the target database.
     * 
     */
    private String dbaId;
    /**
     * @return The DBA nickname of the target Library.
     * 
     */
    private String dbaName;
    /**
     * @return Database encoding.
     * 
     */
    private String encoding;
    /**
     * @return The environment type of the database.
     * 
     */
    private String envType;
    /**
     * @return The database connection address.
     * 
     */
    private String host;
    /**
     * @return The Database ID, same value as `database_id`.
     * 
     */
    private String id;
    /**
     * @return The instance ID of the target database.
     * 
     */
    private String instanceId;
    /**
     * @return Library Owner User ID list.
     * 
     */
    private List<String> ownerIdLists;
    /**
     * @return Library Owner nickname list.
     * 
     */
    private List<String> ownerNameLists;
    /**
     * @return The connection port of the database.
     * 
     */
    private Integer port;
    /**
     * @return The name of the database.&gt; PG Series databases will display schema names.
     * 
     */
    private String schemaName;
    /**
     * @return Library search name.
     * 
     */
    private String searchName;
    /**
     * @return Database SID.&gt; only Oracle Database Display.
     * 
     */
    private String sid;
    /**
     * @return Library status, value description:-**NORMAL**: NORMAL-**DISABLE**: Disabled-**OFFLINE**: OFFLINE-**NOT_EXIST**: does not exist
     * 
     */
    private String state;

    private GetEnterpriseDatabasesDatabase() {}
    /**
     * @return The name of the Database Directory.&gt; PG Series databases will display the database name.
     * 
     */
    public String catalogName() {
        return this.catalogName;
    }
    /**
     * @return The ID of the physical library.
     * 
     */
    public String databaseId() {
        return this.databaseId;
    }
    /**
     * @return Database type.
     * 
     */
    public String dbType() {
        return this.dbType;
    }
    /**
     * @return The DBA user ID of the target database.
     * 
     */
    public String dbaId() {
        return this.dbaId;
    }
    /**
     * @return The DBA nickname of the target Library.
     * 
     */
    public String dbaName() {
        return this.dbaName;
    }
    /**
     * @return Database encoding.
     * 
     */
    public String encoding() {
        return this.encoding;
    }
    /**
     * @return The environment type of the database.
     * 
     */
    public String envType() {
        return this.envType;
    }
    /**
     * @return The database connection address.
     * 
     */
    public String host() {
        return this.host;
    }
    /**
     * @return The Database ID, same value as `database_id`.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The instance ID of the target database.
     * 
     */
    public String instanceId() {
        return this.instanceId;
    }
    /**
     * @return Library Owner User ID list.
     * 
     */
    public List<String> ownerIdLists() {
        return this.ownerIdLists;
    }
    /**
     * @return Library Owner nickname list.
     * 
     */
    public List<String> ownerNameLists() {
        return this.ownerNameLists;
    }
    /**
     * @return The connection port of the database.
     * 
     */
    public Integer port() {
        return this.port;
    }
    /**
     * @return The name of the database.&gt; PG Series databases will display schema names.
     * 
     */
    public String schemaName() {
        return this.schemaName;
    }
    /**
     * @return Library search name.
     * 
     */
    public String searchName() {
        return this.searchName;
    }
    /**
     * @return Database SID.&gt; only Oracle Database Display.
     * 
     */
    public String sid() {
        return this.sid;
    }
    /**
     * @return Library status, value description:-**NORMAL**: NORMAL-**DISABLE**: Disabled-**OFFLINE**: OFFLINE-**NOT_EXIST**: does not exist
     * 
     */
    public String state() {
        return this.state;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetEnterpriseDatabasesDatabase defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String catalogName;
        private String databaseId;
        private String dbType;
        private String dbaId;
        private String dbaName;
        private String encoding;
        private String envType;
        private String host;
        private String id;
        private String instanceId;
        private List<String> ownerIdLists;
        private List<String> ownerNameLists;
        private Integer port;
        private String schemaName;
        private String searchName;
        private String sid;
        private String state;
        public Builder() {}
        public Builder(GetEnterpriseDatabasesDatabase defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.catalogName = defaults.catalogName;
    	      this.databaseId = defaults.databaseId;
    	      this.dbType = defaults.dbType;
    	      this.dbaId = defaults.dbaId;
    	      this.dbaName = defaults.dbaName;
    	      this.encoding = defaults.encoding;
    	      this.envType = defaults.envType;
    	      this.host = defaults.host;
    	      this.id = defaults.id;
    	      this.instanceId = defaults.instanceId;
    	      this.ownerIdLists = defaults.ownerIdLists;
    	      this.ownerNameLists = defaults.ownerNameLists;
    	      this.port = defaults.port;
    	      this.schemaName = defaults.schemaName;
    	      this.searchName = defaults.searchName;
    	      this.sid = defaults.sid;
    	      this.state = defaults.state;
        }

        @CustomType.Setter
        public Builder catalogName(String catalogName) {
            if (catalogName == null) {
              throw new MissingRequiredPropertyException("GetEnterpriseDatabasesDatabase", "catalogName");
            }
            this.catalogName = catalogName;
            return this;
        }
        @CustomType.Setter
        public Builder databaseId(String databaseId) {
            if (databaseId == null) {
              throw new MissingRequiredPropertyException("GetEnterpriseDatabasesDatabase", "databaseId");
            }
            this.databaseId = databaseId;
            return this;
        }
        @CustomType.Setter
        public Builder dbType(String dbType) {
            if (dbType == null) {
              throw new MissingRequiredPropertyException("GetEnterpriseDatabasesDatabase", "dbType");
            }
            this.dbType = dbType;
            return this;
        }
        @CustomType.Setter
        public Builder dbaId(String dbaId) {
            if (dbaId == null) {
              throw new MissingRequiredPropertyException("GetEnterpriseDatabasesDatabase", "dbaId");
            }
            this.dbaId = dbaId;
            return this;
        }
        @CustomType.Setter
        public Builder dbaName(String dbaName) {
            if (dbaName == null) {
              throw new MissingRequiredPropertyException("GetEnterpriseDatabasesDatabase", "dbaName");
            }
            this.dbaName = dbaName;
            return this;
        }
        @CustomType.Setter
        public Builder encoding(String encoding) {
            if (encoding == null) {
              throw new MissingRequiredPropertyException("GetEnterpriseDatabasesDatabase", "encoding");
            }
            this.encoding = encoding;
            return this;
        }
        @CustomType.Setter
        public Builder envType(String envType) {
            if (envType == null) {
              throw new MissingRequiredPropertyException("GetEnterpriseDatabasesDatabase", "envType");
            }
            this.envType = envType;
            return this;
        }
        @CustomType.Setter
        public Builder host(String host) {
            if (host == null) {
              throw new MissingRequiredPropertyException("GetEnterpriseDatabasesDatabase", "host");
            }
            this.host = host;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetEnterpriseDatabasesDatabase", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder instanceId(String instanceId) {
            if (instanceId == null) {
              throw new MissingRequiredPropertyException("GetEnterpriseDatabasesDatabase", "instanceId");
            }
            this.instanceId = instanceId;
            return this;
        }
        @CustomType.Setter
        public Builder ownerIdLists(List<String> ownerIdLists) {
            if (ownerIdLists == null) {
              throw new MissingRequiredPropertyException("GetEnterpriseDatabasesDatabase", "ownerIdLists");
            }
            this.ownerIdLists = ownerIdLists;
            return this;
        }
        public Builder ownerIdLists(String... ownerIdLists) {
            return ownerIdLists(List.of(ownerIdLists));
        }
        @CustomType.Setter
        public Builder ownerNameLists(List<String> ownerNameLists) {
            if (ownerNameLists == null) {
              throw new MissingRequiredPropertyException("GetEnterpriseDatabasesDatabase", "ownerNameLists");
            }
            this.ownerNameLists = ownerNameLists;
            return this;
        }
        public Builder ownerNameLists(String... ownerNameLists) {
            return ownerNameLists(List.of(ownerNameLists));
        }
        @CustomType.Setter
        public Builder port(Integer port) {
            if (port == null) {
              throw new MissingRequiredPropertyException("GetEnterpriseDatabasesDatabase", "port");
            }
            this.port = port;
            return this;
        }
        @CustomType.Setter
        public Builder schemaName(String schemaName) {
            if (schemaName == null) {
              throw new MissingRequiredPropertyException("GetEnterpriseDatabasesDatabase", "schemaName");
            }
            this.schemaName = schemaName;
            return this;
        }
        @CustomType.Setter
        public Builder searchName(String searchName) {
            if (searchName == null) {
              throw new MissingRequiredPropertyException("GetEnterpriseDatabasesDatabase", "searchName");
            }
            this.searchName = searchName;
            return this;
        }
        @CustomType.Setter
        public Builder sid(String sid) {
            if (sid == null) {
              throw new MissingRequiredPropertyException("GetEnterpriseDatabasesDatabase", "sid");
            }
            this.sid = sid;
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetEnterpriseDatabasesDatabase", "state");
            }
            this.state = state;
            return this;
        }
        public GetEnterpriseDatabasesDatabase build() {
            final var _resultValue = new GetEnterpriseDatabasesDatabase();
            _resultValue.catalogName = catalogName;
            _resultValue.databaseId = databaseId;
            _resultValue.dbType = dbType;
            _resultValue.dbaId = dbaId;
            _resultValue.dbaName = dbaName;
            _resultValue.encoding = encoding;
            _resultValue.envType = envType;
            _resultValue.host = host;
            _resultValue.id = id;
            _resultValue.instanceId = instanceId;
            _resultValue.ownerIdLists = ownerIdLists;
            _resultValue.ownerNameLists = ownerNameLists;
            _resultValue.port = port;
            _resultValue.schemaName = schemaName;
            _resultValue.searchName = searchName;
            _resultValue.sid = sid;
            _resultValue.state = state;
            return _resultValue;
        }
    }
}
