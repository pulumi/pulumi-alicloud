// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.ecs.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RamRoleAttachmentState extends com.pulumi.resources.ResourceArgs {

    public static final RamRoleAttachmentState Empty = new RamRoleAttachmentState();

    /**
     * The ID of the instance.
     * 
     */
    @Import(name="instanceId")
    private @Nullable Output<String> instanceId;

    /**
     * @return The ID of the instance.
     * 
     */
    public Optional<Output<String>> instanceId() {
        return Optional.ofNullable(this.instanceId);
    }

    /**
     * The additional policy. When you attach an instance RAM role to instances, you can specify an additional policy to further limit the permissions of the role.
     * 
     */
    @Import(name="policy")
    private @Nullable Output<String> policy;

    /**
     * @return The additional policy. When you attach an instance RAM role to instances, you can specify an additional policy to further limit the permissions of the role.
     * 
     */
    public Optional<Output<String>> policy() {
        return Optional.ofNullable(this.policy);
    }

    /**
     * The name of the instance RAM role.
     * 
     */
    @Import(name="ramRoleName")
    private @Nullable Output<String> ramRoleName;

    /**
     * @return The name of the instance RAM role.
     * 
     */
    public Optional<Output<String>> ramRoleName() {
        return Optional.ofNullable(this.ramRoleName);
    }

    private RamRoleAttachmentState() {}

    private RamRoleAttachmentState(RamRoleAttachmentState $) {
        this.instanceId = $.instanceId;
        this.policy = $.policy;
        this.ramRoleName = $.ramRoleName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RamRoleAttachmentState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RamRoleAttachmentState $;

        public Builder() {
            $ = new RamRoleAttachmentState();
        }

        public Builder(RamRoleAttachmentState defaults) {
            $ = new RamRoleAttachmentState(Objects.requireNonNull(defaults));
        }

        /**
         * @param instanceId The ID of the instance.
         * 
         * @return builder
         * 
         */
        public Builder instanceId(@Nullable Output<String> instanceId) {
            $.instanceId = instanceId;
            return this;
        }

        /**
         * @param instanceId The ID of the instance.
         * 
         * @return builder
         * 
         */
        public Builder instanceId(String instanceId) {
            return instanceId(Output.of(instanceId));
        }

        /**
         * @param policy The additional policy. When you attach an instance RAM role to instances, you can specify an additional policy to further limit the permissions of the role.
         * 
         * @return builder
         * 
         */
        public Builder policy(@Nullable Output<String> policy) {
            $.policy = policy;
            return this;
        }

        /**
         * @param policy The additional policy. When you attach an instance RAM role to instances, you can specify an additional policy to further limit the permissions of the role.
         * 
         * @return builder
         * 
         */
        public Builder policy(String policy) {
            return policy(Output.of(policy));
        }

        /**
         * @param ramRoleName The name of the instance RAM role.
         * 
         * @return builder
         * 
         */
        public Builder ramRoleName(@Nullable Output<String> ramRoleName) {
            $.ramRoleName = ramRoleName;
            return this;
        }

        /**
         * @param ramRoleName The name of the instance RAM role.
         * 
         * @return builder
         * 
         */
        public Builder ramRoleName(String ramRoleName) {
            return ramRoleName(Output.of(ramRoleName));
        }

        public RamRoleAttachmentState build() {
            return $;
        }
    }

}
