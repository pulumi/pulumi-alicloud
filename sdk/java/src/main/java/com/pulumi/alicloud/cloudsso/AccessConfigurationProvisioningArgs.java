// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.cloudsso;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AccessConfigurationProvisioningArgs extends com.pulumi.resources.ResourceArgs {

    public static final AccessConfigurationProvisioningArgs Empty = new AccessConfigurationProvisioningArgs();

    /**
     * The Access configuration ID.
     * 
     */
    @Import(name="accessConfigurationId", required=true)
    private Output<String> accessConfigurationId;

    /**
     * @return The Access configuration ID.
     * 
     */
    public Output<String> accessConfigurationId() {
        return this.accessConfigurationId;
    }

    /**
     * The ID of the Directory.
     * 
     */
    @Import(name="directoryId", required=true)
    private Output<String> directoryId;

    /**
     * @return The ID of the Directory.
     * 
     */
    public Output<String> directoryId() {
        return this.directoryId;
    }

    /**
     * The status of the resource. Valid values: `Provisioned`, `ReprovisionRequired` and `DeprovisionFailed`.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return The status of the resource. Valid values: `Provisioned`, `ReprovisionRequired` and `DeprovisionFailed`.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * The ID of the target to create the resource range.
     * 
     */
    @Import(name="targetId", required=true)
    private Output<String> targetId;

    /**
     * @return The ID of the target to create the resource range.
     * 
     */
    public Output<String> targetId() {
        return this.targetId;
    }

    /**
     * The type of the resource range target to be accessed. Valid values: `RD-Account`.
     * 
     */
    @Import(name="targetType", required=true)
    private Output<String> targetType;

    /**
     * @return The type of the resource range target to be accessed. Valid values: `RD-Account`.
     * 
     */
    public Output<String> targetType() {
        return this.targetType;
    }

    private AccessConfigurationProvisioningArgs() {}

    private AccessConfigurationProvisioningArgs(AccessConfigurationProvisioningArgs $) {
        this.accessConfigurationId = $.accessConfigurationId;
        this.directoryId = $.directoryId;
        this.status = $.status;
        this.targetId = $.targetId;
        this.targetType = $.targetType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AccessConfigurationProvisioningArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AccessConfigurationProvisioningArgs $;

        public Builder() {
            $ = new AccessConfigurationProvisioningArgs();
        }

        public Builder(AccessConfigurationProvisioningArgs defaults) {
            $ = new AccessConfigurationProvisioningArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accessConfigurationId The Access configuration ID.
         * 
         * @return builder
         * 
         */
        public Builder accessConfigurationId(Output<String> accessConfigurationId) {
            $.accessConfigurationId = accessConfigurationId;
            return this;
        }

        /**
         * @param accessConfigurationId The Access configuration ID.
         * 
         * @return builder
         * 
         */
        public Builder accessConfigurationId(String accessConfigurationId) {
            return accessConfigurationId(Output.of(accessConfigurationId));
        }

        /**
         * @param directoryId The ID of the Directory.
         * 
         * @return builder
         * 
         */
        public Builder directoryId(Output<String> directoryId) {
            $.directoryId = directoryId;
            return this;
        }

        /**
         * @param directoryId The ID of the Directory.
         * 
         * @return builder
         * 
         */
        public Builder directoryId(String directoryId) {
            return directoryId(Output.of(directoryId));
        }

        /**
         * @param status The status of the resource. Valid values: `Provisioned`, `ReprovisionRequired` and `DeprovisionFailed`.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status The status of the resource. Valid values: `Provisioned`, `ReprovisionRequired` and `DeprovisionFailed`.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param targetId The ID of the target to create the resource range.
         * 
         * @return builder
         * 
         */
        public Builder targetId(Output<String> targetId) {
            $.targetId = targetId;
            return this;
        }

        /**
         * @param targetId The ID of the target to create the resource range.
         * 
         * @return builder
         * 
         */
        public Builder targetId(String targetId) {
            return targetId(Output.of(targetId));
        }

        /**
         * @param targetType The type of the resource range target to be accessed. Valid values: `RD-Account`.
         * 
         * @return builder
         * 
         */
        public Builder targetType(Output<String> targetType) {
            $.targetType = targetType;
            return this;
        }

        /**
         * @param targetType The type of the resource range target to be accessed. Valid values: `RD-Account`.
         * 
         * @return builder
         * 
         */
        public Builder targetType(String targetType) {
            return targetType(Output.of(targetType));
        }

        public AccessConfigurationProvisioningArgs build() {
            if ($.accessConfigurationId == null) {
                throw new MissingRequiredPropertyException("AccessConfigurationProvisioningArgs", "accessConfigurationId");
            }
            if ($.directoryId == null) {
                throw new MissingRequiredPropertyException("AccessConfigurationProvisioningArgs", "directoryId");
            }
            if ($.targetId == null) {
                throw new MissingRequiredPropertyException("AccessConfigurationProvisioningArgs", "targetId");
            }
            if ($.targetType == null) {
                throw new MissingRequiredPropertyException("AccessConfigurationProvisioningArgs", "targetType");
            }
            return $;
        }
    }

}
