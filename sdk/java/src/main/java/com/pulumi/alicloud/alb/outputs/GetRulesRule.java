// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.alb.outputs;

import com.pulumi.alicloud.alb.outputs.GetRulesRuleRuleAction;
import com.pulumi.alicloud.alb.outputs.GetRulesRuleRuleCondition;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetRulesRule {
    /**
     * @return The ID of the Rule.
     * 
     */
    private String id;
    /**
     * @return The ID of the listener to which the forwarding rule belongs.
     * 
     */
    private String listenerId;
    /**
     * @return The ID of the Application Load Balancer (ALB) instance to which the forwarding rule belongs.
     * 
     */
    private String loadBalancerId;
    /**
     * @return The priority of the rule. Valid values: 1 to 10000. A smaller value indicates a higher priority.  Note The priority of each rule within the same listener must be unique.
     * 
     */
    private Integer priority;
    /**
     * @return The actions of the forwarding rules.
     * 
     */
    private List<GetRulesRuleRuleAction> ruleActions;
    /**
     * @return The conditions of the forwarding rule.
     * 
     */
    private List<GetRulesRuleRuleCondition> ruleConditions;
    /**
     * @return The first ID of the resource.
     * 
     */
    private String ruleId;
    /**
     * @return The name of the forwarding rule. The name must be 2 to 128 characters in length, and can contain letters, digits, periods (.), underscores (_), and hyphens (-). The name must start with a letter.
     * 
     */
    private String ruleName;
    /**
     * @return The status of the resource.
     * 
     */
    private String status;

    private GetRulesRule() {}
    /**
     * @return The ID of the Rule.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The ID of the listener to which the forwarding rule belongs.
     * 
     */
    public String listenerId() {
        return this.listenerId;
    }
    /**
     * @return The ID of the Application Load Balancer (ALB) instance to which the forwarding rule belongs.
     * 
     */
    public String loadBalancerId() {
        return this.loadBalancerId;
    }
    /**
     * @return The priority of the rule. Valid values: 1 to 10000. A smaller value indicates a higher priority.  Note The priority of each rule within the same listener must be unique.
     * 
     */
    public Integer priority() {
        return this.priority;
    }
    /**
     * @return The actions of the forwarding rules.
     * 
     */
    public List<GetRulesRuleRuleAction> ruleActions() {
        return this.ruleActions;
    }
    /**
     * @return The conditions of the forwarding rule.
     * 
     */
    public List<GetRulesRuleRuleCondition> ruleConditions() {
        return this.ruleConditions;
    }
    /**
     * @return The first ID of the resource.
     * 
     */
    public String ruleId() {
        return this.ruleId;
    }
    /**
     * @return The name of the forwarding rule. The name must be 2 to 128 characters in length, and can contain letters, digits, periods (.), underscores (_), and hyphens (-). The name must start with a letter.
     * 
     */
    public String ruleName() {
        return this.ruleName;
    }
    /**
     * @return The status of the resource.
     * 
     */
    public String status() {
        return this.status;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetRulesRule defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String id;
        private String listenerId;
        private String loadBalancerId;
        private Integer priority;
        private List<GetRulesRuleRuleAction> ruleActions;
        private List<GetRulesRuleRuleCondition> ruleConditions;
        private String ruleId;
        private String ruleName;
        private String status;
        public Builder() {}
        public Builder(GetRulesRule defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.id = defaults.id;
    	      this.listenerId = defaults.listenerId;
    	      this.loadBalancerId = defaults.loadBalancerId;
    	      this.priority = defaults.priority;
    	      this.ruleActions = defaults.ruleActions;
    	      this.ruleConditions = defaults.ruleConditions;
    	      this.ruleId = defaults.ruleId;
    	      this.ruleName = defaults.ruleName;
    	      this.status = defaults.status;
        }

        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetRulesRule", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder listenerId(String listenerId) {
            if (listenerId == null) {
              throw new MissingRequiredPropertyException("GetRulesRule", "listenerId");
            }
            this.listenerId = listenerId;
            return this;
        }
        @CustomType.Setter
        public Builder loadBalancerId(String loadBalancerId) {
            if (loadBalancerId == null) {
              throw new MissingRequiredPropertyException("GetRulesRule", "loadBalancerId");
            }
            this.loadBalancerId = loadBalancerId;
            return this;
        }
        @CustomType.Setter
        public Builder priority(Integer priority) {
            if (priority == null) {
              throw new MissingRequiredPropertyException("GetRulesRule", "priority");
            }
            this.priority = priority;
            return this;
        }
        @CustomType.Setter
        public Builder ruleActions(List<GetRulesRuleRuleAction> ruleActions) {
            if (ruleActions == null) {
              throw new MissingRequiredPropertyException("GetRulesRule", "ruleActions");
            }
            this.ruleActions = ruleActions;
            return this;
        }
        public Builder ruleActions(GetRulesRuleRuleAction... ruleActions) {
            return ruleActions(List.of(ruleActions));
        }
        @CustomType.Setter
        public Builder ruleConditions(List<GetRulesRuleRuleCondition> ruleConditions) {
            if (ruleConditions == null) {
              throw new MissingRequiredPropertyException("GetRulesRule", "ruleConditions");
            }
            this.ruleConditions = ruleConditions;
            return this;
        }
        public Builder ruleConditions(GetRulesRuleRuleCondition... ruleConditions) {
            return ruleConditions(List.of(ruleConditions));
        }
        @CustomType.Setter
        public Builder ruleId(String ruleId) {
            if (ruleId == null) {
              throw new MissingRequiredPropertyException("GetRulesRule", "ruleId");
            }
            this.ruleId = ruleId;
            return this;
        }
        @CustomType.Setter
        public Builder ruleName(String ruleName) {
            if (ruleName == null) {
              throw new MissingRequiredPropertyException("GetRulesRule", "ruleName");
            }
            this.ruleName = ruleName;
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            if (status == null) {
              throw new MissingRequiredPropertyException("GetRulesRule", "status");
            }
            this.status = status;
            return this;
        }
        public GetRulesRule build() {
            final var _resultValue = new GetRulesRule();
            _resultValue.id = id;
            _resultValue.listenerId = listenerId;
            _resultValue.loadBalancerId = loadBalancerId;
            _resultValue.priority = priority;
            _resultValue.ruleActions = ruleActions;
            _resultValue.ruleConditions = ruleConditions;
            _resultValue.ruleId = ruleId;
            _resultValue.ruleName = ruleName;
            _resultValue.status = status;
            return _resultValue;
        }
    }
}
