// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.nas;

import com.pulumi.alicloud.nas.inputs.FileSystemNfsAclArgs;
import com.pulumi.alicloud.nas.inputs.FileSystemRecycleBinArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class FileSystemArgs extends com.pulumi.resources.ResourceArgs {

    public static final FileSystemArgs Empty = new FileSystemArgs();

    /**
     * The capacity of the file system. Unit: GiB. **Note:** If `file_system_type` is set to `extreme` or `cpfs`, `capacity` must be set.
     * 
     */
    @Import(name="capacity")
    private @Nullable Output<Integer> capacity;

    /**
     * @return The capacity of the file system. Unit: GiB. **Note:** If `file_system_type` is set to `extreme` or `cpfs`, `capacity` must be set.
     * 
     */
    public Optional<Output<Integer>> capacity() {
        return Optional.ofNullable(this.capacity);
    }

    /**
     * The description of the file system.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The description of the file system.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Specifies whether to encrypt data in the file system. Default value: `0`. Valid values:
     * 
     */
    @Import(name="encryptType")
    private @Nullable Output<Integer> encryptType;

    /**
     * @return Specifies whether to encrypt data in the file system. Default value: `0`. Valid values:
     * 
     */
    public Optional<Output<Integer>> encryptType() {
        return Optional.ofNullable(this.encryptType);
    }

    /**
     * The type of the file system. Default value: `standard`. Valid values: `standard`, `extreme`, `cpfs`.
     * 
     */
    @Import(name="fileSystemType")
    private @Nullable Output<String> fileSystemType;

    /**
     * @return The type of the file system. Default value: `standard`. Valid values: `standard`, `extreme`, `cpfs`.
     * 
     */
    public Optional<Output<String>> fileSystemType() {
        return Optional.ofNullable(this.fileSystemType);
    }

    /**
     * The ID of the KMS-managed key. **Note:** If `encrypt_type` is set to `2`, `kms_key_id` must be set.
     * 
     */
    @Import(name="kmsKeyId")
    private @Nullable Output<String> kmsKeyId;

    /**
     * @return The ID of the KMS-managed key. **Note:** If `encrypt_type` is set to `2`, `kms_key_id` must be set.
     * 
     */
    public Optional<Output<String>> kmsKeyId() {
        return Optional.ofNullable(this.kmsKeyId);
    }

    /**
     * The NFS ACL feature of the file system. See `nfs_acl` below.
     * &gt; **NOTE:** `nfs_acl` takes effect only if `file_system_type` is set to `standard`.
     * 
     */
    @Import(name="nfsAcl")
    private @Nullable Output<FileSystemNfsAclArgs> nfsAcl;

    /**
     * @return The NFS ACL feature of the file system. See `nfs_acl` below.
     * &gt; **NOTE:** `nfs_acl` takes effect only if `file_system_type` is set to `standard`.
     * 
     */
    public Optional<Output<FileSystemNfsAclArgs>> nfsAcl() {
        return Optional.ofNullable(this.nfsAcl);
    }

    /**
     * The protocol type of the file system. Valid values:
     * - If `file_system_type` is set to `standard`. Valid values: `NFS`, `SMB`.
     * - If `file_system_type` is set to `extreme`. Valid values: `NFS`.
     * - If `file_system_type` is set to `cpfs`. Valid values: `cpfs`.
     * 
     */
    @Import(name="protocolType", required=true)
    private Output<String> protocolType;

    /**
     * @return The protocol type of the file system. Valid values:
     * - If `file_system_type` is set to `standard`. Valid values: `NFS`, `SMB`.
     * - If `file_system_type` is set to `extreme`. Valid values: `NFS`.
     * - If `file_system_type` is set to `cpfs`. Valid values: `cpfs`.
     * 
     */
    public Output<String> protocolType() {
        return this.protocolType;
    }

    /**
     * The recycle bin feature of the file system. See `recycle_bin` below.
     * &gt; **NOTE:** `recycle_bin` takes effect only if `file_system_type` is set to `standard`.
     * 
     */
    @Import(name="recycleBin")
    private @Nullable Output<FileSystemRecycleBinArgs> recycleBin;

    /**
     * @return The recycle bin feature of the file system. See `recycle_bin` below.
     * &gt; **NOTE:** `recycle_bin` takes effect only if `file_system_type` is set to `standard`.
     * 
     */
    public Optional<Output<FileSystemRecycleBinArgs>> recycleBin() {
        return Optional.ofNullable(this.recycleBin);
    }

    /**
     * The ID of the resource group.
     * 
     */
    @Import(name="resourceGroupId")
    private @Nullable Output<String> resourceGroupId;

    /**
     * @return The ID of the resource group.
     * 
     */
    public Optional<Output<String>> resourceGroupId() {
        return Optional.ofNullable(this.resourceGroupId);
    }

    /**
     * The ID of the snapshot. **NOTE:** `snapshot_id` takes effect only if `file_system_type` is set to `extreme`.
     * 
     */
    @Import(name="snapshotId")
    private @Nullable Output<String> snapshotId;

    /**
     * @return The ID of the snapshot. **NOTE:** `snapshot_id` takes effect only if `file_system_type` is set to `extreme`.
     * 
     */
    public Optional<Output<String>> snapshotId() {
        return Optional.ofNullable(this.snapshotId);
    }

    /**
     * The storage type of the file system. Valid values:
     * - If `file_system_type` is set to `standard`. Valid values: `Performance`, `Capacity`, `Premium`.
     * - If `file_system_type` is set to `extreme`. Valid values: `standard`, `advance`.
     * - If `file_system_type` is set to `cpfs`. Valid values: `advance_100`, `advance_200`.
     * &gt; **NOTE:** From version 1.140.0, `storage_type` can be set to `standard`, `advance`. From version 1.153.0, `storage_type` can be set to `advance_100`, `advance_200`. From version 1.236.0, `storage_type` can be set to `Premium`.
     * 
     */
    @Import(name="storageType", required=true)
    private Output<String> storageType;

    /**
     * @return The storage type of the file system. Valid values:
     * - If `file_system_type` is set to `standard`. Valid values: `Performance`, `Capacity`, `Premium`.
     * - If `file_system_type` is set to `extreme`. Valid values: `standard`, `advance`.
     * - If `file_system_type` is set to `cpfs`. Valid values: `advance_100`, `advance_200`.
     * &gt; **NOTE:** From version 1.140.0, `storage_type` can be set to `standard`, `advance`. From version 1.153.0, `storage_type` can be set to `advance_100`, `advance_200`. From version 1.236.0, `storage_type` can be set to `Premium`.
     * 
     */
    public Output<String> storageType() {
        return this.storageType;
    }

    /**
     * A mapping of tags to assign to the resource.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return A mapping of tags to assign to the resource.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * The ID of the VPC. **NOTE:** `vpc_id` takes effect only if `file_system_type` is set to `cpfs`.
     * 
     */
    @Import(name="vpcId")
    private @Nullable Output<String> vpcId;

    /**
     * @return The ID of the VPC. **NOTE:** `vpc_id` takes effect only if `file_system_type` is set to `cpfs`.
     * 
     */
    public Optional<Output<String>> vpcId() {
        return Optional.ofNullable(this.vpcId);
    }

    /**
     * The ID of the vSwitch. **NOTE:** `vswitch_id` takes effect only if `file_system_type` is set to `cpfs`.
     * 
     */
    @Import(name="vswitchId")
    private @Nullable Output<String> vswitchId;

    /**
     * @return The ID of the vSwitch. **NOTE:** `vswitch_id` takes effect only if `file_system_type` is set to `cpfs`.
     * 
     */
    public Optional<Output<String>> vswitchId() {
        return Optional.ofNullable(this.vswitchId);
    }

    /**
     * The ID of the zone. **Note:** If `file_system_type` is set to `extreme` or `cpfs`, `zone_id` must be set.
     * 
     */
    @Import(name="zoneId")
    private @Nullable Output<String> zoneId;

    /**
     * @return The ID of the zone. **Note:** If `file_system_type` is set to `extreme` or `cpfs`, `zone_id` must be set.
     * 
     */
    public Optional<Output<String>> zoneId() {
        return Optional.ofNullable(this.zoneId);
    }

    private FileSystemArgs() {}

    private FileSystemArgs(FileSystemArgs $) {
        this.capacity = $.capacity;
        this.description = $.description;
        this.encryptType = $.encryptType;
        this.fileSystemType = $.fileSystemType;
        this.kmsKeyId = $.kmsKeyId;
        this.nfsAcl = $.nfsAcl;
        this.protocolType = $.protocolType;
        this.recycleBin = $.recycleBin;
        this.resourceGroupId = $.resourceGroupId;
        this.snapshotId = $.snapshotId;
        this.storageType = $.storageType;
        this.tags = $.tags;
        this.vpcId = $.vpcId;
        this.vswitchId = $.vswitchId;
        this.zoneId = $.zoneId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FileSystemArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FileSystemArgs $;

        public Builder() {
            $ = new FileSystemArgs();
        }

        public Builder(FileSystemArgs defaults) {
            $ = new FileSystemArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param capacity The capacity of the file system. Unit: GiB. **Note:** If `file_system_type` is set to `extreme` or `cpfs`, `capacity` must be set.
         * 
         * @return builder
         * 
         */
        public Builder capacity(@Nullable Output<Integer> capacity) {
            $.capacity = capacity;
            return this;
        }

        /**
         * @param capacity The capacity of the file system. Unit: GiB. **Note:** If `file_system_type` is set to `extreme` or `cpfs`, `capacity` must be set.
         * 
         * @return builder
         * 
         */
        public Builder capacity(Integer capacity) {
            return capacity(Output.of(capacity));
        }

        /**
         * @param description The description of the file system.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The description of the file system.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param encryptType Specifies whether to encrypt data in the file system. Default value: `0`. Valid values:
         * 
         * @return builder
         * 
         */
        public Builder encryptType(@Nullable Output<Integer> encryptType) {
            $.encryptType = encryptType;
            return this;
        }

        /**
         * @param encryptType Specifies whether to encrypt data in the file system. Default value: `0`. Valid values:
         * 
         * @return builder
         * 
         */
        public Builder encryptType(Integer encryptType) {
            return encryptType(Output.of(encryptType));
        }

        /**
         * @param fileSystemType The type of the file system. Default value: `standard`. Valid values: `standard`, `extreme`, `cpfs`.
         * 
         * @return builder
         * 
         */
        public Builder fileSystemType(@Nullable Output<String> fileSystemType) {
            $.fileSystemType = fileSystemType;
            return this;
        }

        /**
         * @param fileSystemType The type of the file system. Default value: `standard`. Valid values: `standard`, `extreme`, `cpfs`.
         * 
         * @return builder
         * 
         */
        public Builder fileSystemType(String fileSystemType) {
            return fileSystemType(Output.of(fileSystemType));
        }

        /**
         * @param kmsKeyId The ID of the KMS-managed key. **Note:** If `encrypt_type` is set to `2`, `kms_key_id` must be set.
         * 
         * @return builder
         * 
         */
        public Builder kmsKeyId(@Nullable Output<String> kmsKeyId) {
            $.kmsKeyId = kmsKeyId;
            return this;
        }

        /**
         * @param kmsKeyId The ID of the KMS-managed key. **Note:** If `encrypt_type` is set to `2`, `kms_key_id` must be set.
         * 
         * @return builder
         * 
         */
        public Builder kmsKeyId(String kmsKeyId) {
            return kmsKeyId(Output.of(kmsKeyId));
        }

        /**
         * @param nfsAcl The NFS ACL feature of the file system. See `nfs_acl` below.
         * &gt; **NOTE:** `nfs_acl` takes effect only if `file_system_type` is set to `standard`.
         * 
         * @return builder
         * 
         */
        public Builder nfsAcl(@Nullable Output<FileSystemNfsAclArgs> nfsAcl) {
            $.nfsAcl = nfsAcl;
            return this;
        }

        /**
         * @param nfsAcl The NFS ACL feature of the file system. See `nfs_acl` below.
         * &gt; **NOTE:** `nfs_acl` takes effect only if `file_system_type` is set to `standard`.
         * 
         * @return builder
         * 
         */
        public Builder nfsAcl(FileSystemNfsAclArgs nfsAcl) {
            return nfsAcl(Output.of(nfsAcl));
        }

        /**
         * @param protocolType The protocol type of the file system. Valid values:
         * - If `file_system_type` is set to `standard`. Valid values: `NFS`, `SMB`.
         * - If `file_system_type` is set to `extreme`. Valid values: `NFS`.
         * - If `file_system_type` is set to `cpfs`. Valid values: `cpfs`.
         * 
         * @return builder
         * 
         */
        public Builder protocolType(Output<String> protocolType) {
            $.protocolType = protocolType;
            return this;
        }

        /**
         * @param protocolType The protocol type of the file system. Valid values:
         * - If `file_system_type` is set to `standard`. Valid values: `NFS`, `SMB`.
         * - If `file_system_type` is set to `extreme`. Valid values: `NFS`.
         * - If `file_system_type` is set to `cpfs`. Valid values: `cpfs`.
         * 
         * @return builder
         * 
         */
        public Builder protocolType(String protocolType) {
            return protocolType(Output.of(protocolType));
        }

        /**
         * @param recycleBin The recycle bin feature of the file system. See `recycle_bin` below.
         * &gt; **NOTE:** `recycle_bin` takes effect only if `file_system_type` is set to `standard`.
         * 
         * @return builder
         * 
         */
        public Builder recycleBin(@Nullable Output<FileSystemRecycleBinArgs> recycleBin) {
            $.recycleBin = recycleBin;
            return this;
        }

        /**
         * @param recycleBin The recycle bin feature of the file system. See `recycle_bin` below.
         * &gt; **NOTE:** `recycle_bin` takes effect only if `file_system_type` is set to `standard`.
         * 
         * @return builder
         * 
         */
        public Builder recycleBin(FileSystemRecycleBinArgs recycleBin) {
            return recycleBin(Output.of(recycleBin));
        }

        /**
         * @param resourceGroupId The ID of the resource group.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupId(@Nullable Output<String> resourceGroupId) {
            $.resourceGroupId = resourceGroupId;
            return this;
        }

        /**
         * @param resourceGroupId The ID of the resource group.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupId(String resourceGroupId) {
            return resourceGroupId(Output.of(resourceGroupId));
        }

        /**
         * @param snapshotId The ID of the snapshot. **NOTE:** `snapshot_id` takes effect only if `file_system_type` is set to `extreme`.
         * 
         * @return builder
         * 
         */
        public Builder snapshotId(@Nullable Output<String> snapshotId) {
            $.snapshotId = snapshotId;
            return this;
        }

        /**
         * @param snapshotId The ID of the snapshot. **NOTE:** `snapshot_id` takes effect only if `file_system_type` is set to `extreme`.
         * 
         * @return builder
         * 
         */
        public Builder snapshotId(String snapshotId) {
            return snapshotId(Output.of(snapshotId));
        }

        /**
         * @param storageType The storage type of the file system. Valid values:
         * - If `file_system_type` is set to `standard`. Valid values: `Performance`, `Capacity`, `Premium`.
         * - If `file_system_type` is set to `extreme`. Valid values: `standard`, `advance`.
         * - If `file_system_type` is set to `cpfs`. Valid values: `advance_100`, `advance_200`.
         * &gt; **NOTE:** From version 1.140.0, `storage_type` can be set to `standard`, `advance`. From version 1.153.0, `storage_type` can be set to `advance_100`, `advance_200`. From version 1.236.0, `storage_type` can be set to `Premium`.
         * 
         * @return builder
         * 
         */
        public Builder storageType(Output<String> storageType) {
            $.storageType = storageType;
            return this;
        }

        /**
         * @param storageType The storage type of the file system. Valid values:
         * - If `file_system_type` is set to `standard`. Valid values: `Performance`, `Capacity`, `Premium`.
         * - If `file_system_type` is set to `extreme`. Valid values: `standard`, `advance`.
         * - If `file_system_type` is set to `cpfs`. Valid values: `advance_100`, `advance_200`.
         * &gt; **NOTE:** From version 1.140.0, `storage_type` can be set to `standard`, `advance`. From version 1.153.0, `storage_type` can be set to `advance_100`, `advance_200`. From version 1.236.0, `storage_type` can be set to `Premium`.
         * 
         * @return builder
         * 
         */
        public Builder storageType(String storageType) {
            return storageType(Output.of(storageType));
        }

        /**
         * @param tags A mapping of tags to assign to the resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags A mapping of tags to assign to the resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param vpcId The ID of the VPC. **NOTE:** `vpc_id` takes effect only if `file_system_type` is set to `cpfs`.
         * 
         * @return builder
         * 
         */
        public Builder vpcId(@Nullable Output<String> vpcId) {
            $.vpcId = vpcId;
            return this;
        }

        /**
         * @param vpcId The ID of the VPC. **NOTE:** `vpc_id` takes effect only if `file_system_type` is set to `cpfs`.
         * 
         * @return builder
         * 
         */
        public Builder vpcId(String vpcId) {
            return vpcId(Output.of(vpcId));
        }

        /**
         * @param vswitchId The ID of the vSwitch. **NOTE:** `vswitch_id` takes effect only if `file_system_type` is set to `cpfs`.
         * 
         * @return builder
         * 
         */
        public Builder vswitchId(@Nullable Output<String> vswitchId) {
            $.vswitchId = vswitchId;
            return this;
        }

        /**
         * @param vswitchId The ID of the vSwitch. **NOTE:** `vswitch_id` takes effect only if `file_system_type` is set to `cpfs`.
         * 
         * @return builder
         * 
         */
        public Builder vswitchId(String vswitchId) {
            return vswitchId(Output.of(vswitchId));
        }

        /**
         * @param zoneId The ID of the zone. **Note:** If `file_system_type` is set to `extreme` or `cpfs`, `zone_id` must be set.
         * 
         * @return builder
         * 
         */
        public Builder zoneId(@Nullable Output<String> zoneId) {
            $.zoneId = zoneId;
            return this;
        }

        /**
         * @param zoneId The ID of the zone. **Note:** If `file_system_type` is set to `extreme` or `cpfs`, `zone_id` must be set.
         * 
         * @return builder
         * 
         */
        public Builder zoneId(String zoneId) {
            return zoneId(Output.of(zoneId));
        }

        public FileSystemArgs build() {
            if ($.protocolType == null) {
                throw new MissingRequiredPropertyException("FileSystemArgs", "protocolType");
            }
            if ($.storageType == null) {
                throw new MissingRequiredPropertyException("FileSystemArgs", "storageType");
            }
            return $;
        }
    }

}
