// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.nas;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class FileSystemArgs extends com.pulumi.resources.ResourceArgs {

    public static final FileSystemArgs Empty = new FileSystemArgs();

    /**
     * The capacity of the file system. The `capacity` is required when the `file_system_type` is `extreme`.
     * Unit: gib; **Note**: The minimum value is 100.
     * 
     */
    @Import(name="capacity")
    private @Nullable Output<Integer> capacity;

    /**
     * @return The capacity of the file system. The `capacity` is required when the `file_system_type` is `extreme`.
     * Unit: gib; **Note**: The minimum value is 100.
     * 
     */
    public Optional<Output<Integer>> capacity() {
        return Optional.ofNullable(this.capacity);
    }

    /**
     * The File System description.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The File System description.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Whether the file system is encrypted. Using kms service escrow key to encrypt and store the file system data. When reading and writing encrypted data, there is no need to decrypt.
     * * Valid values:
     * 
     */
    @Import(name="encryptType")
    private @Nullable Output<Integer> encryptType;

    /**
     * @return Whether the file system is encrypted. Using kms service escrow key to encrypt and store the file system data. When reading and writing encrypted data, there is no need to decrypt.
     * * Valid values:
     * 
     */
    public Optional<Output<Integer>> encryptType() {
        return Optional.ofNullable(this.encryptType);
    }

    /**
     * the type of the file system.
     * Valid values:
     * `standard` (Default),
     * `extreme`,
     * `cpfs`.
     * 
     */
    @Import(name="fileSystemType")
    private @Nullable Output<String> fileSystemType;

    /**
     * @return the type of the file system.
     * Valid values:
     * `standard` (Default),
     * `extreme`,
     * `cpfs`.
     * 
     */
    public Optional<Output<String>> fileSystemType() {
        return Optional.ofNullable(this.fileSystemType);
    }

    /**
     * The id of the KMS key. The `kms_key_id` is required when the `encrypt_type` is `2`.
     * 
     */
    @Import(name="kmsKeyId")
    private @Nullable Output<String> kmsKeyId;

    /**
     * @return The id of the KMS key. The `kms_key_id` is required when the `encrypt_type` is `2`.
     * 
     */
    public Optional<Output<String>> kmsKeyId() {
        return Optional.ofNullable(this.kmsKeyId);
    }

    /**
     * The protocol type of the file system.
     * Valid values:
     * `NFS`,
     * `SMB` (Available when the `file_system_type` is `standard`),
     * `cpfs` (Available when the `file_system_type` is `cpfs`).
     * 
     */
    @Import(name="protocolType", required=true)
    private Output<String> protocolType;

    /**
     * @return The protocol type of the file system.
     * Valid values:
     * `NFS`,
     * `SMB` (Available when the `file_system_type` is `standard`),
     * `cpfs` (Available when the `file_system_type` is `cpfs`).
     * 
     */
    public Output<String> protocolType() {
        return this.protocolType;
    }

    /**
     * The storage type of the file System.
     * * Valid values:
     * 
     */
    @Import(name="storageType", required=true)
    private Output<String> storageType;

    /**
     * @return The storage type of the file System.
     * * Valid values:
     * 
     */
    public Output<String> storageType() {
        return this.storageType;
    }

    /**
     * A mapping of tags to assign to the resource.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,Object>> tags;

    /**
     * @return A mapping of tags to assign to the resource.
     * 
     */
    public Optional<Output<Map<String,Object>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * The id of the VPC. The `vpc_id` is required when the `file_system_type` is `cpfs`.
     * 
     */
    @Import(name="vpcId")
    private @Nullable Output<String> vpcId;

    /**
     * @return The id of the VPC. The `vpc_id` is required when the `file_system_type` is `cpfs`.
     * 
     */
    public Optional<Output<String>> vpcId() {
        return Optional.ofNullable(this.vpcId);
    }

    /**
     * The id of the vSwitch. The `vswitch_id` is required when the `file_system_type` is `cpfs`.
     * 
     */
    @Import(name="vswitchId")
    private @Nullable Output<String> vswitchId;

    /**
     * @return The id of the vSwitch. The `vswitch_id` is required when the `file_system_type` is `cpfs`.
     * 
     */
    public Optional<Output<String>> vswitchId() {
        return Optional.ofNullable(this.vswitchId);
    }

    /**
     * The available zones information that supports nas.When FileSystemType=standard, this parameter is not required. **Note:** By default, a qualified availability zone is randomly selected according to the `protocol_type` and `storage_type` configuration.
     * 
     */
    @Import(name="zoneId")
    private @Nullable Output<String> zoneId;

    /**
     * @return The available zones information that supports nas.When FileSystemType=standard, this parameter is not required. **Note:** By default, a qualified availability zone is randomly selected according to the `protocol_type` and `storage_type` configuration.
     * 
     */
    public Optional<Output<String>> zoneId() {
        return Optional.ofNullable(this.zoneId);
    }

    private FileSystemArgs() {}

    private FileSystemArgs(FileSystemArgs $) {
        this.capacity = $.capacity;
        this.description = $.description;
        this.encryptType = $.encryptType;
        this.fileSystemType = $.fileSystemType;
        this.kmsKeyId = $.kmsKeyId;
        this.protocolType = $.protocolType;
        this.storageType = $.storageType;
        this.tags = $.tags;
        this.vpcId = $.vpcId;
        this.vswitchId = $.vswitchId;
        this.zoneId = $.zoneId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FileSystemArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FileSystemArgs $;

        public Builder() {
            $ = new FileSystemArgs();
        }

        public Builder(FileSystemArgs defaults) {
            $ = new FileSystemArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param capacity The capacity of the file system. The `capacity` is required when the `file_system_type` is `extreme`.
         * Unit: gib; **Note**: The minimum value is 100.
         * 
         * @return builder
         * 
         */
        public Builder capacity(@Nullable Output<Integer> capacity) {
            $.capacity = capacity;
            return this;
        }

        /**
         * @param capacity The capacity of the file system. The `capacity` is required when the `file_system_type` is `extreme`.
         * Unit: gib; **Note**: The minimum value is 100.
         * 
         * @return builder
         * 
         */
        public Builder capacity(Integer capacity) {
            return capacity(Output.of(capacity));
        }

        /**
         * @param description The File System description.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The File System description.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param encryptType Whether the file system is encrypted. Using kms service escrow key to encrypt and store the file system data. When reading and writing encrypted data, there is no need to decrypt.
         * * Valid values:
         * 
         * @return builder
         * 
         */
        public Builder encryptType(@Nullable Output<Integer> encryptType) {
            $.encryptType = encryptType;
            return this;
        }

        /**
         * @param encryptType Whether the file system is encrypted. Using kms service escrow key to encrypt and store the file system data. When reading and writing encrypted data, there is no need to decrypt.
         * * Valid values:
         * 
         * @return builder
         * 
         */
        public Builder encryptType(Integer encryptType) {
            return encryptType(Output.of(encryptType));
        }

        /**
         * @param fileSystemType the type of the file system.
         * Valid values:
         * `standard` (Default),
         * `extreme`,
         * `cpfs`.
         * 
         * @return builder
         * 
         */
        public Builder fileSystemType(@Nullable Output<String> fileSystemType) {
            $.fileSystemType = fileSystemType;
            return this;
        }

        /**
         * @param fileSystemType the type of the file system.
         * Valid values:
         * `standard` (Default),
         * `extreme`,
         * `cpfs`.
         * 
         * @return builder
         * 
         */
        public Builder fileSystemType(String fileSystemType) {
            return fileSystemType(Output.of(fileSystemType));
        }

        /**
         * @param kmsKeyId The id of the KMS key. The `kms_key_id` is required when the `encrypt_type` is `2`.
         * 
         * @return builder
         * 
         */
        public Builder kmsKeyId(@Nullable Output<String> kmsKeyId) {
            $.kmsKeyId = kmsKeyId;
            return this;
        }

        /**
         * @param kmsKeyId The id of the KMS key. The `kms_key_id` is required when the `encrypt_type` is `2`.
         * 
         * @return builder
         * 
         */
        public Builder kmsKeyId(String kmsKeyId) {
            return kmsKeyId(Output.of(kmsKeyId));
        }

        /**
         * @param protocolType The protocol type of the file system.
         * Valid values:
         * `NFS`,
         * `SMB` (Available when the `file_system_type` is `standard`),
         * `cpfs` (Available when the `file_system_type` is `cpfs`).
         * 
         * @return builder
         * 
         */
        public Builder protocolType(Output<String> protocolType) {
            $.protocolType = protocolType;
            return this;
        }

        /**
         * @param protocolType The protocol type of the file system.
         * Valid values:
         * `NFS`,
         * `SMB` (Available when the `file_system_type` is `standard`),
         * `cpfs` (Available when the `file_system_type` is `cpfs`).
         * 
         * @return builder
         * 
         */
        public Builder protocolType(String protocolType) {
            return protocolType(Output.of(protocolType));
        }

        /**
         * @param storageType The storage type of the file System.
         * * Valid values:
         * 
         * @return builder
         * 
         */
        public Builder storageType(Output<String> storageType) {
            $.storageType = storageType;
            return this;
        }

        /**
         * @param storageType The storage type of the file System.
         * * Valid values:
         * 
         * @return builder
         * 
         */
        public Builder storageType(String storageType) {
            return storageType(Output.of(storageType));
        }

        /**
         * @param tags A mapping of tags to assign to the resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,Object>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags A mapping of tags to assign to the resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,Object> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param vpcId The id of the VPC. The `vpc_id` is required when the `file_system_type` is `cpfs`.
         * 
         * @return builder
         * 
         */
        public Builder vpcId(@Nullable Output<String> vpcId) {
            $.vpcId = vpcId;
            return this;
        }

        /**
         * @param vpcId The id of the VPC. The `vpc_id` is required when the `file_system_type` is `cpfs`.
         * 
         * @return builder
         * 
         */
        public Builder vpcId(String vpcId) {
            return vpcId(Output.of(vpcId));
        }

        /**
         * @param vswitchId The id of the vSwitch. The `vswitch_id` is required when the `file_system_type` is `cpfs`.
         * 
         * @return builder
         * 
         */
        public Builder vswitchId(@Nullable Output<String> vswitchId) {
            $.vswitchId = vswitchId;
            return this;
        }

        /**
         * @param vswitchId The id of the vSwitch. The `vswitch_id` is required when the `file_system_type` is `cpfs`.
         * 
         * @return builder
         * 
         */
        public Builder vswitchId(String vswitchId) {
            return vswitchId(Output.of(vswitchId));
        }

        /**
         * @param zoneId The available zones information that supports nas.When FileSystemType=standard, this parameter is not required. **Note:** By default, a qualified availability zone is randomly selected according to the `protocol_type` and `storage_type` configuration.
         * 
         * @return builder
         * 
         */
        public Builder zoneId(@Nullable Output<String> zoneId) {
            $.zoneId = zoneId;
            return this;
        }

        /**
         * @param zoneId The available zones information that supports nas.When FileSystemType=standard, this parameter is not required. **Note:** By default, a qualified availability zone is randomly selected according to the `protocol_type` and `storage_type` configuration.
         * 
         * @return builder
         * 
         */
        public Builder zoneId(String zoneId) {
            return zoneId(Output.of(zoneId));
        }

        public FileSystemArgs build() {
            if ($.protocolType == null) {
                throw new MissingRequiredPropertyException("FileSystemArgs", "protocolType");
            }
            if ($.storageType == null) {
                throw new MissingRequiredPropertyException("FileSystemArgs", "storageType");
            }
            return $;
        }
    }

}
