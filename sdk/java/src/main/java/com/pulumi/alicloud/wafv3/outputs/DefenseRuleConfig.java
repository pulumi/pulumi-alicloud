// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.wafv3.outputs;

import com.pulumi.alicloud.wafv3.outputs.DefenseRuleConfigAccountIdentifier;
import com.pulumi.alicloud.wafv3.outputs.DefenseRuleConfigCondition;
import com.pulumi.alicloud.wafv3.outputs.DefenseRuleConfigRateLimit;
import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class DefenseRuleConfig {
    /**
     * @return The regions outside China from which you want to block requests. Separate multiple region codes with commas (,). You can call the DescribeIpAbroadCountryInfos operation to query the countries and regions outside China that can be blocked.
     * 
     */
    private @Nullable String abroadRegions;
    /**
     * @return The policies for account extraction. Up to five policies are supported. Each policy is a JSON string. For more information, see accountIdentifiers description. See `account_identifiers` below.
     * 
     */
    private @Nullable List<DefenseRuleConfigAccountIdentifier> accountIdentifiers;
    /**
     * @return The list of regular rule IDs that are not detected. The value is in the [&#34;XX1&#34;, &#34;XX2&#34;,...] format. This parameter is required only when the module to which the whitelist applies is set to specific regular rules in basic protection (BypassTags is set to regular_rule).
     * 
     */
    private @Nullable List<String> bypassRegularRules;
    /**
     * @return The regular rule type is not detected. This parameter is configured only when the whitelist module is configured as the Web application regular type (the value of the BypassTags parameter is regular_type). Value:
     * - sqli: Indicates SQL injection.
     * - xss: Indicates cross-site scripting (XSS).
     * - cmdi: Indicates OS command injection.
     * - expression_injection: Indicates expression injection.
     * - java_deserialization: indicates Java deserialization.
     * - dot_net_deserialization: Represents. net deserialization.
     * - php_deserialization: indicates PHP deserialization.
     * - code_exec: Indicates code execution.
     * - ssrf: indicates SSRF (server-side request forgery).
     * - path_traversal: indicates a Path Traversal.
     * - arbitrary_file_uploading: Indicates to upload any file.
     * - webshell: Represents a webshell.
     * - rfilei: Indicates the remote file contains (RFI).
     * - lfilei: Indicates that the local file contains (LFI).
     * - protocol_violation: indicates a protocol violation.
     * - scanner_behavior: Indicates scanner behavior.
     * - logic_flaw: Indicates a business logic defect.
     * - arbitrary_file_reading: Indicates arbitrary file reading.
     * - arbitrary_file_download: Indicates an arbitrary file download.
     * - xxe: Indicates external entity injection.
     * - csrf: indicates cross-site request forgery.
     * - crlf: indicates CRLF.
     * - other: indicates other.
     * 
     */
    private @Nullable List<String> bypassRegularTypes;
    /**
     * @return The modules to which the whitelist applies. The value is in the [&#34;XX1&#34;, &#34;XX2&#34;,...] format. Valid values:
     * - waf: indicates all modules.
     * - customrule: indicates custom rules.
     * - blacklist: indicates IP blacklist.
     * - antiscan: indicates scan protection.
     * - regular: indicates basic protection rules.
     * - regular_rule: indicates specific regular rules in basic protection.
     * - regular_type: indicates specific regular rule types in basic protection.
     * - major_protection: indicates major event support protection.
     * - cc: indicates CC protection.
     * - region_block: indicates Location Blacklist.
     * - antibot_scene: indicates BOT scenario protection.
     * - dlp: indicates information leakage prevention.
     * - tamperproof: indicates web tamper-proofing.
     * - spike_throttle: indicates peak traffic throttling.
     * 
     */
    private @Nullable List<String> bypassTags;
    /**
     * @return Set the effective range of the speed limit. This information is configured only when ccStatus is set to 1. Value:
     * - service: indicates that the effective object is a protected object.
     * - rule: indicates that the effective object is a single rule.
     * 
     */
    private @Nullable String ccEffect;
    /**
     * @return Whether to open the speed limit. Value:
     * - 0: indicates that the speed limit is off.
     * - 1: Indicates that the speed limit is on.
     * 
     */
    private @Nullable Integer ccStatus;
    /**
     * @return The regions in China from which you want to block requests. If you specify &#34;CN&#34;, requests from the Chinese mainland (excluding Hong Kong, Macao, and Taiwan) are blocked. Separate multiple regions with commas (,). For more information about region codes, see Description of region codes in China.
     * 
     */
    private @Nullable String cnRegions;
    /**
     * @return The traffic characteristics of ACL, which are described in JSON format. You can enter up to five matching conditions. For specific configuration information, see detailed configuration of conditions. See `conditions` below.
     * 
     */
    private @Nullable List<DefenseRuleConfigCondition> conditions;
    /**
     * @return The HTTP flood protection mode. Valid values:
     * - 0 (default): indicates normal protection.
     * - 1: indicates emergency protection.
     * 
     */
    private @Nullable Integer mode;
    /**
     * @return The protocol type of the cached page address. Valid values: http, https.
     * 
     */
    private @Nullable String protocol;
    /**
     * @return The detailed speed limit configuration, which is described in the JSON string format. This information is configured only when CcStatus is set to 1. For specific configuration information, see detailed configuration of Ratelimit. See `rate_limit` below.
     * 
     */
    private @Nullable DefenseRuleConfigRateLimit rateLimit;
    /**
     * @return The IP addresses that you want to add to the blacklist. Specify the value of this parameter in the [&#34;ip1&#34;,&#34;ip2&#34;,...] format.
     * 
     */
    private @Nullable List<String> remoteAddrs;
    /**
     * @return Protection rule action. Value:
     * - block: Indicates an intercept.
     * - monitor: indicates observation.
     * - js: indicates JS validation.
     * - captcha: Indicates a slider.
     * - captcha_strict: indicates a strict slider.
     * - filter: filters sensitive information. This action applies only to scenarios that the Information leakage prevention rule include sensitive information match conditions.
     * 
     * &gt; **NOTE:**  For the supported protection rule actions, follow the rule actions displayed in the WAF console.
     * 
     */
    private @Nullable String ruleAction;
    /**
     * @return The throttling threshold. Valid values:
     * - The QPS throttling threshold ranges from 1 to 5000000. If you select QPS throttling (such as 500 QPS), traffic that meets the throttling conditions and exceeds 500 QPS will be blocked.
     * - The percentage throttling threshold ranges from 1 to 99. If you select percentage throttling (such as 80%), only 80% of the traffic that meets the throttling conditions will be allowed.
     * 
     */
    private @Nullable Integer throttleThrehold;
    /**
     * @return The throttling method. Valid values:
     * - qps: indicates throttling based on queries per second (QPS).
     * - ratio (default): indicates throttling based on percentage.
     * 
     */
    private @Nullable String throttleType;
    /**
     * @return The User-Agent string that is allowed for access to the address.
     * 
     */
    private @Nullable String ua;
    /**
     * @return The address of the cached page.
     * 
     */
    private @Nullable String url;

    private DefenseRuleConfig() {}
    /**
     * @return The regions outside China from which you want to block requests. Separate multiple region codes with commas (,). You can call the DescribeIpAbroadCountryInfos operation to query the countries and regions outside China that can be blocked.
     * 
     */
    public Optional<String> abroadRegions() {
        return Optional.ofNullable(this.abroadRegions);
    }
    /**
     * @return The policies for account extraction. Up to five policies are supported. Each policy is a JSON string. For more information, see accountIdentifiers description. See `account_identifiers` below.
     * 
     */
    public List<DefenseRuleConfigAccountIdentifier> accountIdentifiers() {
        return this.accountIdentifiers == null ? List.of() : this.accountIdentifiers;
    }
    /**
     * @return The list of regular rule IDs that are not detected. The value is in the [&#34;XX1&#34;, &#34;XX2&#34;,...] format. This parameter is required only when the module to which the whitelist applies is set to specific regular rules in basic protection (BypassTags is set to regular_rule).
     * 
     */
    public List<String> bypassRegularRules() {
        return this.bypassRegularRules == null ? List.of() : this.bypassRegularRules;
    }
    /**
     * @return The regular rule type is not detected. This parameter is configured only when the whitelist module is configured as the Web application regular type (the value of the BypassTags parameter is regular_type). Value:
     * - sqli: Indicates SQL injection.
     * - xss: Indicates cross-site scripting (XSS).
     * - cmdi: Indicates OS command injection.
     * - expression_injection: Indicates expression injection.
     * - java_deserialization: indicates Java deserialization.
     * - dot_net_deserialization: Represents. net deserialization.
     * - php_deserialization: indicates PHP deserialization.
     * - code_exec: Indicates code execution.
     * - ssrf: indicates SSRF (server-side request forgery).
     * - path_traversal: indicates a Path Traversal.
     * - arbitrary_file_uploading: Indicates to upload any file.
     * - webshell: Represents a webshell.
     * - rfilei: Indicates the remote file contains (RFI).
     * - lfilei: Indicates that the local file contains (LFI).
     * - protocol_violation: indicates a protocol violation.
     * - scanner_behavior: Indicates scanner behavior.
     * - logic_flaw: Indicates a business logic defect.
     * - arbitrary_file_reading: Indicates arbitrary file reading.
     * - arbitrary_file_download: Indicates an arbitrary file download.
     * - xxe: Indicates external entity injection.
     * - csrf: indicates cross-site request forgery.
     * - crlf: indicates CRLF.
     * - other: indicates other.
     * 
     */
    public List<String> bypassRegularTypes() {
        return this.bypassRegularTypes == null ? List.of() : this.bypassRegularTypes;
    }
    /**
     * @return The modules to which the whitelist applies. The value is in the [&#34;XX1&#34;, &#34;XX2&#34;,...] format. Valid values:
     * - waf: indicates all modules.
     * - customrule: indicates custom rules.
     * - blacklist: indicates IP blacklist.
     * - antiscan: indicates scan protection.
     * - regular: indicates basic protection rules.
     * - regular_rule: indicates specific regular rules in basic protection.
     * - regular_type: indicates specific regular rule types in basic protection.
     * - major_protection: indicates major event support protection.
     * - cc: indicates CC protection.
     * - region_block: indicates Location Blacklist.
     * - antibot_scene: indicates BOT scenario protection.
     * - dlp: indicates information leakage prevention.
     * - tamperproof: indicates web tamper-proofing.
     * - spike_throttle: indicates peak traffic throttling.
     * 
     */
    public List<String> bypassTags() {
        return this.bypassTags == null ? List.of() : this.bypassTags;
    }
    /**
     * @return Set the effective range of the speed limit. This information is configured only when ccStatus is set to 1. Value:
     * - service: indicates that the effective object is a protected object.
     * - rule: indicates that the effective object is a single rule.
     * 
     */
    public Optional<String> ccEffect() {
        return Optional.ofNullable(this.ccEffect);
    }
    /**
     * @return Whether to open the speed limit. Value:
     * - 0: indicates that the speed limit is off.
     * - 1: Indicates that the speed limit is on.
     * 
     */
    public Optional<Integer> ccStatus() {
        return Optional.ofNullable(this.ccStatus);
    }
    /**
     * @return The regions in China from which you want to block requests. If you specify &#34;CN&#34;, requests from the Chinese mainland (excluding Hong Kong, Macao, and Taiwan) are blocked. Separate multiple regions with commas (,). For more information about region codes, see Description of region codes in China.
     * 
     */
    public Optional<String> cnRegions() {
        return Optional.ofNullable(this.cnRegions);
    }
    /**
     * @return The traffic characteristics of ACL, which are described in JSON format. You can enter up to five matching conditions. For specific configuration information, see detailed configuration of conditions. See `conditions` below.
     * 
     */
    public List<DefenseRuleConfigCondition> conditions() {
        return this.conditions == null ? List.of() : this.conditions;
    }
    /**
     * @return The HTTP flood protection mode. Valid values:
     * - 0 (default): indicates normal protection.
     * - 1: indicates emergency protection.
     * 
     */
    public Optional<Integer> mode() {
        return Optional.ofNullable(this.mode);
    }
    /**
     * @return The protocol type of the cached page address. Valid values: http, https.
     * 
     */
    public Optional<String> protocol() {
        return Optional.ofNullable(this.protocol);
    }
    /**
     * @return The detailed speed limit configuration, which is described in the JSON string format. This information is configured only when CcStatus is set to 1. For specific configuration information, see detailed configuration of Ratelimit. See `rate_limit` below.
     * 
     */
    public Optional<DefenseRuleConfigRateLimit> rateLimit() {
        return Optional.ofNullable(this.rateLimit);
    }
    /**
     * @return The IP addresses that you want to add to the blacklist. Specify the value of this parameter in the [&#34;ip1&#34;,&#34;ip2&#34;,...] format.
     * 
     */
    public List<String> remoteAddrs() {
        return this.remoteAddrs == null ? List.of() : this.remoteAddrs;
    }
    /**
     * @return Protection rule action. Value:
     * - block: Indicates an intercept.
     * - monitor: indicates observation.
     * - js: indicates JS validation.
     * - captcha: Indicates a slider.
     * - captcha_strict: indicates a strict slider.
     * - filter: filters sensitive information. This action applies only to scenarios that the Information leakage prevention rule include sensitive information match conditions.
     * 
     * &gt; **NOTE:**  For the supported protection rule actions, follow the rule actions displayed in the WAF console.
     * 
     */
    public Optional<String> ruleAction() {
        return Optional.ofNullable(this.ruleAction);
    }
    /**
     * @return The throttling threshold. Valid values:
     * - The QPS throttling threshold ranges from 1 to 5000000. If you select QPS throttling (such as 500 QPS), traffic that meets the throttling conditions and exceeds 500 QPS will be blocked.
     * - The percentage throttling threshold ranges from 1 to 99. If you select percentage throttling (such as 80%), only 80% of the traffic that meets the throttling conditions will be allowed.
     * 
     */
    public Optional<Integer> throttleThrehold() {
        return Optional.ofNullable(this.throttleThrehold);
    }
    /**
     * @return The throttling method. Valid values:
     * - qps: indicates throttling based on queries per second (QPS).
     * - ratio (default): indicates throttling based on percentage.
     * 
     */
    public Optional<String> throttleType() {
        return Optional.ofNullable(this.throttleType);
    }
    /**
     * @return The User-Agent string that is allowed for access to the address.
     * 
     */
    public Optional<String> ua() {
        return Optional.ofNullable(this.ua);
    }
    /**
     * @return The address of the cached page.
     * 
     */
    public Optional<String> url() {
        return Optional.ofNullable(this.url);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DefenseRuleConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String abroadRegions;
        private @Nullable List<DefenseRuleConfigAccountIdentifier> accountIdentifiers;
        private @Nullable List<String> bypassRegularRules;
        private @Nullable List<String> bypassRegularTypes;
        private @Nullable List<String> bypassTags;
        private @Nullable String ccEffect;
        private @Nullable Integer ccStatus;
        private @Nullable String cnRegions;
        private @Nullable List<DefenseRuleConfigCondition> conditions;
        private @Nullable Integer mode;
        private @Nullable String protocol;
        private @Nullable DefenseRuleConfigRateLimit rateLimit;
        private @Nullable List<String> remoteAddrs;
        private @Nullable String ruleAction;
        private @Nullable Integer throttleThrehold;
        private @Nullable String throttleType;
        private @Nullable String ua;
        private @Nullable String url;
        public Builder() {}
        public Builder(DefenseRuleConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.abroadRegions = defaults.abroadRegions;
    	      this.accountIdentifiers = defaults.accountIdentifiers;
    	      this.bypassRegularRules = defaults.bypassRegularRules;
    	      this.bypassRegularTypes = defaults.bypassRegularTypes;
    	      this.bypassTags = defaults.bypassTags;
    	      this.ccEffect = defaults.ccEffect;
    	      this.ccStatus = defaults.ccStatus;
    	      this.cnRegions = defaults.cnRegions;
    	      this.conditions = defaults.conditions;
    	      this.mode = defaults.mode;
    	      this.protocol = defaults.protocol;
    	      this.rateLimit = defaults.rateLimit;
    	      this.remoteAddrs = defaults.remoteAddrs;
    	      this.ruleAction = defaults.ruleAction;
    	      this.throttleThrehold = defaults.throttleThrehold;
    	      this.throttleType = defaults.throttleType;
    	      this.ua = defaults.ua;
    	      this.url = defaults.url;
        }

        @CustomType.Setter
        public Builder abroadRegions(@Nullable String abroadRegions) {

            this.abroadRegions = abroadRegions;
            return this;
        }
        @CustomType.Setter
        public Builder accountIdentifiers(@Nullable List<DefenseRuleConfigAccountIdentifier> accountIdentifiers) {

            this.accountIdentifiers = accountIdentifiers;
            return this;
        }
        public Builder accountIdentifiers(DefenseRuleConfigAccountIdentifier... accountIdentifiers) {
            return accountIdentifiers(List.of(accountIdentifiers));
        }
        @CustomType.Setter
        public Builder bypassRegularRules(@Nullable List<String> bypassRegularRules) {

            this.bypassRegularRules = bypassRegularRules;
            return this;
        }
        public Builder bypassRegularRules(String... bypassRegularRules) {
            return bypassRegularRules(List.of(bypassRegularRules));
        }
        @CustomType.Setter
        public Builder bypassRegularTypes(@Nullable List<String> bypassRegularTypes) {

            this.bypassRegularTypes = bypassRegularTypes;
            return this;
        }
        public Builder bypassRegularTypes(String... bypassRegularTypes) {
            return bypassRegularTypes(List.of(bypassRegularTypes));
        }
        @CustomType.Setter
        public Builder bypassTags(@Nullable List<String> bypassTags) {

            this.bypassTags = bypassTags;
            return this;
        }
        public Builder bypassTags(String... bypassTags) {
            return bypassTags(List.of(bypassTags));
        }
        @CustomType.Setter
        public Builder ccEffect(@Nullable String ccEffect) {

            this.ccEffect = ccEffect;
            return this;
        }
        @CustomType.Setter
        public Builder ccStatus(@Nullable Integer ccStatus) {

            this.ccStatus = ccStatus;
            return this;
        }
        @CustomType.Setter
        public Builder cnRegions(@Nullable String cnRegions) {

            this.cnRegions = cnRegions;
            return this;
        }
        @CustomType.Setter
        public Builder conditions(@Nullable List<DefenseRuleConfigCondition> conditions) {

            this.conditions = conditions;
            return this;
        }
        public Builder conditions(DefenseRuleConfigCondition... conditions) {
            return conditions(List.of(conditions));
        }
        @CustomType.Setter
        public Builder mode(@Nullable Integer mode) {

            this.mode = mode;
            return this;
        }
        @CustomType.Setter
        public Builder protocol(@Nullable String protocol) {

            this.protocol = protocol;
            return this;
        }
        @CustomType.Setter
        public Builder rateLimit(@Nullable DefenseRuleConfigRateLimit rateLimit) {

            this.rateLimit = rateLimit;
            return this;
        }
        @CustomType.Setter
        public Builder remoteAddrs(@Nullable List<String> remoteAddrs) {

            this.remoteAddrs = remoteAddrs;
            return this;
        }
        public Builder remoteAddrs(String... remoteAddrs) {
            return remoteAddrs(List.of(remoteAddrs));
        }
        @CustomType.Setter
        public Builder ruleAction(@Nullable String ruleAction) {

            this.ruleAction = ruleAction;
            return this;
        }
        @CustomType.Setter
        public Builder throttleThrehold(@Nullable Integer throttleThrehold) {

            this.throttleThrehold = throttleThrehold;
            return this;
        }
        @CustomType.Setter
        public Builder throttleType(@Nullable String throttleType) {

            this.throttleType = throttleType;
            return this;
        }
        @CustomType.Setter
        public Builder ua(@Nullable String ua) {

            this.ua = ua;
            return this;
        }
        @CustomType.Setter
        public Builder url(@Nullable String url) {

            this.url = url;
            return this;
        }
        public DefenseRuleConfig build() {
            final var _resultValue = new DefenseRuleConfig();
            _resultValue.abroadRegions = abroadRegions;
            _resultValue.accountIdentifiers = accountIdentifiers;
            _resultValue.bypassRegularRules = bypassRegularRules;
            _resultValue.bypassRegularTypes = bypassRegularTypes;
            _resultValue.bypassTags = bypassTags;
            _resultValue.ccEffect = ccEffect;
            _resultValue.ccStatus = ccStatus;
            _resultValue.cnRegions = cnRegions;
            _resultValue.conditions = conditions;
            _resultValue.mode = mode;
            _resultValue.protocol = protocol;
            _resultValue.rateLimit = rateLimit;
            _resultValue.remoteAddrs = remoteAddrs;
            _resultValue.ruleAction = ruleAction;
            _resultValue.throttleThrehold = throttleThrehold;
            _resultValue.throttleType = throttleType;
            _resultValue.ua = ua;
            _resultValue.url = url;
            return _resultValue;
        }
    }
}
