// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.ehpc;

import com.pulumi.alicloud.Utilities;
import com.pulumi.alicloud.ehpc.ClusterArgs;
import com.pulumi.alicloud.ehpc.inputs.ClusterState;
import com.pulumi.alicloud.ehpc.outputs.ClusterAdditionalVolume;
import com.pulumi.alicloud.ehpc.outputs.ClusterApplication;
import com.pulumi.alicloud.ehpc.outputs.ClusterPostInstallScript;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Provides a Ehpc Cluster resource.
 * 
 * For information about Ehpc Cluster and how to use it, see [What is Cluster](https://www.alibabacloud.com/help/en/e-hpc/developer-reference/api-ehpc-2018-04-12-createcluster).
 * 
 * &gt; **NOTE:** Available since v1.173.0.
 * 
 * ## Example Usage
 * 
 * Basic Usage
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.alicloud.AlicloudFunctions;
 * import com.pulumi.alicloud.inputs.GetZonesArgs;
 * import com.pulumi.alicloud.ecs.EcsFunctions;
 * import com.pulumi.alicloud.ecs.inputs.GetImagesArgs;
 * import com.pulumi.alicloud.ecs.inputs.GetInstanceTypesArgs;
 * import com.pulumi.alicloud.vpc.Network;
 * import com.pulumi.alicloud.vpc.NetworkArgs;
 * import com.pulumi.alicloud.vpc.Switch;
 * import com.pulumi.alicloud.vpc.SwitchArgs;
 * import com.pulumi.alicloud.nas.FileSystem;
 * import com.pulumi.alicloud.nas.FileSystemArgs;
 * import com.pulumi.alicloud.nas.MountTarget;
 * import com.pulumi.alicloud.nas.MountTargetArgs;
 * import com.pulumi.alicloud.ehpc.Cluster;
 * import com.pulumi.alicloud.ehpc.ClusterArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         final var config = ctx.config();
 *         final var name = config.get(&#34;name&#34;).orElse(&#34;tf-example&#34;);
 *         final var defaultZones = AlicloudFunctions.getZones(GetZonesArgs.builder()
 *             .availableResourceCreation(&#34;VSwitch&#34;)
 *             .build());
 * 
 *         final var defaultImages = EcsFunctions.getImages(GetImagesArgs.builder()
 *             .nameRegex(&#34;^centos_7_6_x64*&#34;)
 *             .owners(&#34;system&#34;)
 *             .build());
 * 
 *         final var defaultInstanceTypes = EcsFunctions.getInstanceTypes(GetInstanceTypesArgs.builder()
 *             .availabilityZone(defaultZones.applyValue(getZonesResult -&gt; getZonesResult.zones()[0].id()))
 *             .build());
 * 
 *         var defaultNetwork = new Network(&#34;defaultNetwork&#34;, NetworkArgs.builder()        
 *             .vpcName(name)
 *             .cidrBlock(&#34;10.0.0.0/8&#34;)
 *             .build());
 * 
 *         var defaultSwitch = new Switch(&#34;defaultSwitch&#34;, SwitchArgs.builder()        
 *             .vswitchName(name)
 *             .cidrBlock(&#34;10.1.0.0/16&#34;)
 *             .vpcId(defaultNetwork.id())
 *             .zoneId(defaultZones.applyValue(getZonesResult -&gt; getZonesResult.zones()[0].id()))
 *             .build());
 * 
 *         var defaultFileSystem = new FileSystem(&#34;defaultFileSystem&#34;, FileSystemArgs.builder()        
 *             .storageType(&#34;Performance&#34;)
 *             .protocolType(&#34;NFS&#34;)
 *             .build());
 * 
 *         var defaultMountTarget = new MountTarget(&#34;defaultMountTarget&#34;, MountTargetArgs.builder()        
 *             .fileSystemId(defaultFileSystem.id())
 *             .accessGroupName(&#34;DEFAULT_VPC_GROUP_NAME&#34;)
 *             .vswitchId(defaultSwitch.id())
 *             .build());
 * 
 *         var defaultCluster = new Cluster(&#34;defaultCluster&#34;, ClusterArgs.builder()        
 *             .clusterName(name)
 *             .deployMode(&#34;Simple&#34;)
 *             .description(name)
 *             .haEnable(false)
 *             .imageId(defaultImages.applyValue(getImagesResult -&gt; getImagesResult.images()[0].id()))
 *             .imageOwnerAlias(&#34;system&#34;)
 *             .volumeProtocol(&#34;nfs&#34;)
 *             .volumeId(defaultFileSystem.id())
 *             .volumeMountpoint(defaultMountTarget.mountTargetDomain())
 *             .computeCount(1)
 *             .computeInstanceType(defaultInstanceTypes.applyValue(getInstanceTypesResult -&gt; getInstanceTypesResult.instanceTypes()[0].id()))
 *             .loginCount(1)
 *             .loginInstanceType(defaultInstanceTypes.applyValue(getInstanceTypesResult -&gt; getInstanceTypesResult.instanceTypes()[0].id()))
 *             .managerCount(1)
 *             .managerInstanceType(defaultInstanceTypes.applyValue(getInstanceTypesResult -&gt; getInstanceTypesResult.instanceTypes()[0].id()))
 *             .osTag(&#34;CentOS_7.6_64&#34;)
 *             .schedulerType(&#34;pbs&#34;)
 *             .password(&#34;your-password123&#34;)
 *             .vswitchId(defaultSwitch.id())
 *             .vpcId(defaultNetwork.id())
 *             .zoneId(defaultZones.applyValue(getZonesResult -&gt; getZonesResult.zones()[0].id()))
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 * ## Import
 * 
 * Ehpc Cluster can be imported using the id, e.g.
 * 
 * ```sh
 *  $ pulumi import alicloud:ehpc/cluster:Cluster example &lt;id&gt;
 * ```
 * 
 */
@ResourceType(type="alicloud:ehpc/cluster:Cluster")
public class Cluster extends com.pulumi.resources.CustomResource {
    /**
     * The type of the domain account service. Valid values: `nis`, `ldap`. Default value: `nis`
     * 
     */
    @Export(name="accountType", type=String.class, parameters={})
    private Output<String> accountType;

    /**
     * @return The type of the domain account service. Valid values: `nis`, `ldap`. Default value: `nis`
     * 
     */
    public Output<String> accountType() {
        return this.accountType;
    }
    /**
     * The additional volumes. See `additional_volumes` below.
     * 
     */
    @Export(name="additionalVolumes", type=List.class, parameters={ClusterAdditionalVolume.class})
    private Output</* @Nullable */ List<ClusterAdditionalVolume>> additionalVolumes;

    /**
     * @return The additional volumes. See `additional_volumes` below.
     * 
     */
    public Output<Optional<List<ClusterAdditionalVolume>>> additionalVolumes() {
        return Codegen.optional(this.additionalVolumes);
    }
    /**
     * The application. See `application` below.
     * 
     */
    @Export(name="applications", type=List.class, parameters={ClusterApplication.class})
    private Output<List<ClusterApplication>> applications;

    /**
     * @return The application. See `application` below.
     * 
     */
    public Output<List<ClusterApplication>> applications() {
        return this.applications;
    }
    /**
     * Specifies whether to enable auto-renewal for the subscription. Default value: `false`.
     * 
     */
    @Export(name="autoRenew", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> autoRenew;

    /**
     * @return Specifies whether to enable auto-renewal for the subscription. Default value: `false`.
     * 
     */
    public Output<Optional<Boolean>> autoRenew() {
        return Codegen.optional(this.autoRenew);
    }
    /**
     * The auto-renewal period of the subscription compute nodes. The parameter takes effect when AutoRenew is set to true.
     * 
     */
    @Export(name="autoRenewPeriod", type=Integer.class, parameters={})
    private Output</* @Nullable */ Integer> autoRenewPeriod;

    /**
     * @return The auto-renewal period of the subscription compute nodes. The parameter takes effect when AutoRenew is set to true.
     * 
     */
    public Output<Optional<Integer>> autoRenewPeriod() {
        return Codegen.optional(this.autoRenewPeriod);
    }
    /**
     * The version of the E-HPC client. By default, the parameter is set to the latest version number.
     * 
     */
    @Export(name="clientVersion", type=String.class, parameters={})
    private Output<String> clientVersion;

    /**
     * @return The version of the E-HPC client. By default, the parameter is set to the latest version number.
     * 
     */
    public Output<String> clientVersion() {
        return this.clientVersion;
    }
    /**
     * The name of the cluster. The name must be `2` to `64` characters in length.
     * 
     */
    @Export(name="clusterName", type=String.class, parameters={})
    private Output<String> clusterName;

    /**
     * @return The name of the cluster. The name must be `2` to `64` characters in length.
     * 
     */
    public Output<String> clusterName() {
        return this.clusterName;
    }
    /**
     * The version of the cluster. Default value: `1.0`.
     * 
     */
    @Export(name="clusterVersion", type=String.class, parameters={})
    private Output<String> clusterVersion;

    /**
     * @return The version of the cluster. Default value: `1.0`.
     * 
     */
    public Output<String> clusterVersion() {
        return this.clusterVersion;
    }
    /**
     * The number of the compute nodes. Valid values: `1` to `99`.
     * 
     */
    @Export(name="computeCount", type=Integer.class, parameters={})
    private Output<Integer> computeCount;

    /**
     * @return The number of the compute nodes. Valid values: `1` to `99`.
     * 
     */
    public Output<Integer> computeCount() {
        return this.computeCount;
    }
    /**
     * Specifies whether the compute nodes support hyper-threading. Default value: `true`.
     * 
     */
    @Export(name="computeEnableHt", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> computeEnableHt;

    /**
     * @return Specifies whether the compute nodes support hyper-threading. Default value: `true`.
     * 
     */
    public Output<Optional<Boolean>> computeEnableHt() {
        return Codegen.optional(this.computeEnableHt);
    }
    /**
     * The instance type of the compute nodes.
     * 
     */
    @Export(name="computeInstanceType", type=String.class, parameters={})
    private Output<String> computeInstanceType;

    /**
     * @return The instance type of the compute nodes.
     * 
     */
    public Output<String> computeInstanceType() {
        return this.computeInstanceType;
    }
    /**
     * The maximum hourly price of the compute nodes. A maximum of three decimal places can be used in the value of the parameter. The parameter is valid only when the ComputeSpotStrategy parameter is set to SpotWithPriceLimit.
     * 
     */
    @Export(name="computeSpotPriceLimit", type=String.class, parameters={})
    private Output</* @Nullable */ String> computeSpotPriceLimit;

    /**
     * @return The maximum hourly price of the compute nodes. A maximum of three decimal places can be used in the value of the parameter. The parameter is valid only when the ComputeSpotStrategy parameter is set to SpotWithPriceLimit.
     * 
     */
    public Output<Optional<String>> computeSpotPriceLimit() {
        return Codegen.optional(this.computeSpotPriceLimit);
    }
    /**
     * The bidding method of the compute nodes. Default value: `NoSpot`. Valid values:
     * 
     */
    @Export(name="computeSpotStrategy", type=String.class, parameters={})
    private Output</* @Nullable */ String> computeSpotStrategy;

    /**
     * @return The bidding method of the compute nodes. Default value: `NoSpot`. Valid values:
     * 
     */
    public Output<Optional<String>> computeSpotStrategy() {
        return Codegen.optional(this.computeSpotStrategy);
    }
    /**
     * The mode in which the cluster is deployed. Valid values: `Standard`, `Simple`, `Tiny`. Default value: Standard.
     * 
     */
    @Export(name="deployMode", type=String.class, parameters={})
    private Output<String> deployMode;

    /**
     * @return The mode in which the cluster is deployed. Valid values: `Standard`, `Simple`, `Tiny`. Default value: Standard.
     * 
     */
    public Output<String> deployMode() {
        return this.deployMode;
    }
    /**
     * The description of the cluster. The description must be `2` to `256` characters in length. It cannot start with `http://` or `https://`.
     * 
     */
    @Export(name="description", type=String.class, parameters={})
    private Output<String> description;

    /**
     * @return The description of the cluster. The description must be `2` to `256` characters in length. It cannot start with `http://` or `https://`.
     * 
     */
    public Output<String> description() {
        return this.description;
    }
    /**
     * The domain name of the on-premises cluster. This parameter takes effect only when the AccoutType parameter is set to Idap.
     * 
     */
    @Export(name="domain", type=String.class, parameters={})
    private Output</* @Nullable */ String> domain;

    /**
     * @return The domain name of the on-premises cluster. This parameter takes effect only when the AccoutType parameter is set to Idap.
     * 
     */
    public Output<Optional<String>> domain() {
        return Codegen.optional(this.domain);
    }
    /**
     * The billing method of the nodes.
     * 
     */
    @Export(name="ecsChargeType", type=String.class, parameters={})
    private Output<String> ecsChargeType;

    /**
     * @return The billing method of the nodes.
     * 
     */
    public Output<String> ecsChargeType() {
        return this.ecsChargeType;
    }
    /**
     * The version of E-HPC. By default, the parameter is set to the latest version number.
     * 
     */
    @Export(name="ehpcVersion", type=String.class, parameters={})
    private Output<String> ehpcVersion;

    /**
     * @return The version of E-HPC. By default, the parameter is set to the latest version number.
     * 
     */
    public Output<String> ehpcVersion() {
        return this.ehpcVersion;
    }
    /**
     * Specifies whether to enable the high availability feature. Default value: `false`.  **Note:** If high availability is enabled, a primary management node and a secondary management node are used.
     * 
     */
    @Export(name="haEnable", type=Boolean.class, parameters={})
    private Output<Boolean> haEnable;

    /**
     * @return Specifies whether to enable the high availability feature. Default value: `false`.  **Note:** If high availability is enabled, a primary management node and a secondary management node are used.
     * 
     */
    public Output<Boolean> haEnable() {
        return this.haEnable;
    }
    /**
     * The ID of the image.
     * 
     */
    @Export(name="imageId", type=String.class, parameters={})
    private Output<String> imageId;

    /**
     * @return The ID of the image.
     * 
     */
    public Output<String> imageId() {
        return this.imageId;
    }
    /**
     * The type of the image. Valid values: `others`, `self`, `system`, `marketplace`. Default value: `system`.
     * 
     */
    @Export(name="imageOwnerAlias", type=String.class, parameters={})
    private Output<String> imageOwnerAlias;

    /**
     * @return The type of the image. Valid values: `others`, `self`, `system`, `marketplace`. Default value: `system`.
     * 
     */
    public Output<String> imageOwnerAlias() {
        return this.imageOwnerAlias;
    }
    /**
     * The URL of the job files that are uploaded to an Object Storage Service (OSS) bucket.
     * 
     */
    @Export(name="inputFileUrl", type=String.class, parameters={})
    private Output</* @Nullable */ String> inputFileUrl;

    /**
     * @return The URL of the job files that are uploaded to an Object Storage Service (OSS) bucket.
     * 
     */
    public Output<Optional<String>> inputFileUrl() {
        return Codegen.optional(this.inputFileUrl);
    }
    /**
     * Specifies whether to enable auto scaling. Default value: `false`.
     * 
     */
    @Export(name="isComputeEss", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> isComputeEss;

    /**
     * @return Specifies whether to enable auto scaling. Default value: `false`.
     * 
     */
    public Output<Optional<Boolean>> isComputeEss() {
        return Codegen.optional(this.isComputeEss);
    }
    /**
     * The queue to which the compute nodes are added.
     * 
     */
    @Export(name="jobQueue", type=String.class, parameters={})
    private Output</* @Nullable */ String> jobQueue;

    /**
     * @return The queue to which the compute nodes are added.
     * 
     */
    public Output<Optional<String>> jobQueue() {
        return Codegen.optional(this.jobQueue);
    }
    /**
     * The name of the AccessKey pair.
     * 
     */
    @Export(name="keyPairName", type=String.class, parameters={})
    private Output</* @Nullable */ String> keyPairName;

    /**
     * @return The name of the AccessKey pair.
     * 
     */
    public Output<Optional<String>> keyPairName() {
        return Codegen.optional(this.keyPairName);
    }
    /**
     * The number of the logon nodes. Valid values: `1`.
     * 
     */
    @Export(name="loginCount", type=Integer.class, parameters={})
    private Output<Integer> loginCount;

    /**
     * @return The number of the logon nodes. Valid values: `1`.
     * 
     */
    public Output<Integer> loginCount() {
        return this.loginCount;
    }
    /**
     * The instance type of the logon nodes.
     * 
     */
    @Export(name="loginInstanceType", type=String.class, parameters={})
    private Output<String> loginInstanceType;

    /**
     * @return The instance type of the logon nodes.
     * 
     */
    public Output<String> loginInstanceType() {
        return this.loginInstanceType;
    }
    /**
     * The number of the management nodes. Valid values: 1 and 2.
     * 
     */
    @Export(name="managerCount", type=Integer.class, parameters={})
    private Output<Integer> managerCount;

    /**
     * @return The number of the management nodes. Valid values: 1 and 2.
     * 
     */
    public Output<Integer> managerCount() {
        return this.managerCount;
    }
    /**
     * The instance type of the management nodes.
     * 
     */
    @Export(name="managerInstanceType", type=String.class, parameters={})
    private Output<String> managerInstanceType;

    /**
     * @return The instance type of the management nodes.
     * 
     */
    public Output<String> managerInstanceType() {
        return this.managerInstanceType;
    }
    /**
     * The image tag of the operating system.
     * 
     */
    @Export(name="osTag", type=String.class, parameters={})
    private Output<String> osTag;

    /**
     * @return The image tag of the operating system.
     * 
     */
    public Output<String> osTag() {
        return this.osTag;
    }
    /**
     * The root password of the logon node. The password must be 8 to 30 characters in length and contain at least three of the following items: uppercase letters, lowercase letters, digits, and special characters. The password can contain the following special characters: `( ) ~ ! @ # $ % ^ &amp; * - + = { } [ ] : ; ‘ &lt; &gt; , . ? /`. You must specify either `password` or `key_pair_name`. If both are specified, the Password parameter prevails.
     * 
     */
    @Export(name="password", type=String.class, parameters={})
    private Output</* @Nullable */ String> password;

    /**
     * @return The root password of the logon node. The password must be 8 to 30 characters in length and contain at least three of the following items: uppercase letters, lowercase letters, digits, and special characters. The password can contain the following special characters: `( ) ~ ! @ # $ % ^ &amp; * - + = { } [ ] : ; ‘ &lt; &gt; , . ? /`. You must specify either `password` or `key_pair_name`. If both are specified, the Password parameter prevails.
     * 
     */
    public Output<Optional<String>> password() {
        return Codegen.optional(this.password);
    }
    /**
     * The duration of the subscription. The unit of the duration is specified by the `period_unit` parameter. Default value: `1`.
     * * If you set PriceUnit to Year, the valid values of the Period parameter are 1, 2, and 3.
     * * If you set PriceUnit to Month, the valid values of the Period parameter are 1, 2, 3, 4, 5, 6, 7, 8, and 9.
     * * If you set PriceUnit to Hour, the valid value of the Period parameter is 1.
     * 
     */
    @Export(name="period", type=Integer.class, parameters={})
    private Output</* @Nullable */ Integer> period;

    /**
     * @return The duration of the subscription. The unit of the duration is specified by the `period_unit` parameter. Default value: `1`.
     * * If you set PriceUnit to Year, the valid values of the Period parameter are 1, 2, and 3.
     * * If you set PriceUnit to Month, the valid values of the Period parameter are 1, 2, 3, 4, 5, 6, 7, 8, and 9.
     * * If you set PriceUnit to Hour, the valid value of the Period parameter is 1.
     * 
     */
    public Output<Optional<Integer>> period() {
        return Codegen.optional(this.period);
    }
    /**
     * The unit of the subscription duration. Valid values: `Year`, `Month`, `Hour`. Default value: `Month`.
     * 
     */
    @Export(name="periodUnit", type=String.class, parameters={})
    private Output</* @Nullable */ String> periodUnit;

    /**
     * @return The unit of the subscription duration. Valid values: `Year`, `Month`, `Hour`. Default value: `Month`.
     * 
     */
    public Output<Optional<String>> periodUnit() {
        return Codegen.optional(this.periodUnit);
    }
    /**
     * The mode configurations of the plug-in. This parameter takes effect only when the SchedulerType parameter is set to custom. The value must be a JSON string. The parameter contains the following parameters: pluginMod, pluginLocalPath, and pluginOssPath.
     * - pluginMod: the mode of the plug-in. The following modes are supported:
     * - oss: The plug-in is downloaded and decompressed from OSS to a local path. The local path is specified by the pluginLocalPath parameter.
     * - image: By default, the plug-in is stored in a pre-defined local path. The local path is specified by the pluginLocalPath parameter.
     * - pluginLocalPath: the local path where the plug-in is stored. We recommend that you select a shared directory in oss mode and a non-shared directory in image mode.
     * - pluginOssPath: the remote path where the plug-in is stored in OSS. This parameter takes effect only when the pluginMod parameter is set to oss.
     * 
     */
    @Export(name="plugin", type=String.class, parameters={})
    private Output</* @Nullable */ String> plugin;

    /**
     * @return The mode configurations of the plug-in. This parameter takes effect only when the SchedulerType parameter is set to custom. The value must be a JSON string. The parameter contains the following parameters: pluginMod, pluginLocalPath, and pluginOssPath.
     * - pluginMod: the mode of the plug-in. The following modes are supported:
     * - oss: The plug-in is downloaded and decompressed from OSS to a local path. The local path is specified by the pluginLocalPath parameter.
     * - image: By default, the plug-in is stored in a pre-defined local path. The local path is specified by the pluginLocalPath parameter.
     * - pluginLocalPath: the local path where the plug-in is stored. We recommend that you select a shared directory in oss mode and a non-shared directory in image mode.
     * - pluginOssPath: the remote path where the plug-in is stored in OSS. This parameter takes effect only when the pluginMod parameter is set to oss.
     * 
     */
    public Output<Optional<String>> plugin() {
        return Codegen.optional(this.plugin);
    }
    /**
     * The post install script. See `post_install_script` below.
     * 
     */
    @Export(name="postInstallScripts", type=List.class, parameters={ClusterPostInstallScript.class})
    private Output</* @Nullable */ List<ClusterPostInstallScript>> postInstallScripts;

    /**
     * @return The post install script. See `post_install_script` below.
     * 
     */
    public Output<Optional<List<ClusterPostInstallScript>>> postInstallScripts() {
        return Codegen.optional(this.postInstallScripts);
    }
    /**
     * The node of the RAM role.
     * 
     */
    @Export(name="ramNodeTypes", type=List.class, parameters={String.class})
    private Output</* @Nullable */ List<String>> ramNodeTypes;

    /**
     * @return The node of the RAM role.
     * 
     */
    public Output<Optional<List<String>>> ramNodeTypes() {
        return Codegen.optional(this.ramNodeTypes);
    }
    /**
     * The name of the Resource Access Management (RAM) role.
     * 
     */
    @Export(name="ramRoleName", type=String.class, parameters={})
    private Output</* @Nullable */ String> ramRoleName;

    /**
     * @return The name of the Resource Access Management (RAM) role.
     * 
     */
    public Output<Optional<String>> ramRoleName() {
        return Codegen.optional(this.ramRoleName);
    }
    /**
     * The release instance. Valid values: `true`.
     * 
     */
    @Export(name="releaseInstance", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> releaseInstance;

    /**
     * @return The release instance. Valid values: `true`.
     * 
     */
    public Output<Optional<Boolean>> releaseInstance() {
        return Codegen.optional(this.releaseInstance);
    }
    /**
     * The remote directory to which the file system is mounted.
     * 
     */
    @Export(name="remoteDirectory", type=String.class, parameters={})
    private Output<String> remoteDirectory;

    /**
     * @return The remote directory to which the file system is mounted.
     * 
     */
    public Output<String> remoteDirectory() {
        return this.remoteDirectory;
    }
    /**
     * Specifies whether to enable Virtual Network Computing (VNC). Default value: `false`.
     * 
     */
    @Export(name="remoteVisEnable", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> remoteVisEnable;

    /**
     * @return Specifies whether to enable Virtual Network Computing (VNC). Default value: `false`.
     * 
     */
    public Output<Optional<Boolean>> remoteVisEnable() {
        return Codegen.optional(this.remoteVisEnable);
    }
    /**
     * The ID of the resource group.
     * 
     */
    @Export(name="resourceGroupId", type=String.class, parameters={})
    private Output</* @Nullable */ String> resourceGroupId;

    /**
     * @return The ID of the resource group.
     * 
     */
    public Output<Optional<String>> resourceGroupId() {
        return Codegen.optional(this.resourceGroupId);
    }
    /**
     * The ID of the Super Computing Cluster (SCC) instance. If you specify the parameter, the SCC instance is moved to a new SCC cluster.
     * 
     */
    @Export(name="sccClusterId", type=String.class, parameters={})
    private Output<String> sccClusterId;

    /**
     * @return The ID of the Super Computing Cluster (SCC) instance. If you specify the parameter, the SCC instance is moved to a new SCC cluster.
     * 
     */
    public Output<String> sccClusterId() {
        return this.sccClusterId;
    }
    /**
     * The type of the scheduler. Valid values: `pbs`, `slurm`, `opengridscheduler` and `deadline`. Default value: `pbs`.
     * 
     */
    @Export(name="schedulerType", type=String.class, parameters={})
    private Output<String> schedulerType;

    /**
     * @return The type of the scheduler. Valid values: `pbs`, `slurm`, `opengridscheduler` and `deadline`. Default value: `pbs`.
     * 
     */
    public Output<String> schedulerType() {
        return this.schedulerType;
    }
    /**
     * The ID of the security group to which the cluster belongs.
     * 
     */
    @Export(name="securityGroupId", type=String.class, parameters={})
    private Output<String> securityGroupId;

    /**
     * @return The ID of the security group to which the cluster belongs.
     * 
     */
    public Output<String> securityGroupId() {
        return this.securityGroupId;
    }
    /**
     * If you do not use an existing security group, set the parameter to the name of a new security group. A default policy is applied to the new security group.
     * 
     */
    @Export(name="securityGroupName", type=String.class, parameters={})
    private Output</* @Nullable */ String> securityGroupName;

    /**
     * @return If you do not use an existing security group, set the parameter to the name of a new security group. A default policy is applied to the new security group.
     * 
     */
    public Output<Optional<String>> securityGroupName() {
        return Codegen.optional(this.securityGroupName);
    }
    /**
     * The status of the resource.
     * 
     */
    @Export(name="status", type=String.class, parameters={})
    private Output<String> status;

    /**
     * @return The status of the resource.
     * 
     */
    public Output<String> status() {
        return this.status;
    }
    /**
     * The performance level of the ESSD that is used as the system disk. Default value: `PL1` For more information, see [ESSDs](https://www.alibabacloud.com/help/en/elastic-compute-service/latest/essds). Valid values:
     * 
     */
    @Export(name="systemDiskLevel", type=String.class, parameters={})
    private Output</* @Nullable */ String> systemDiskLevel;

    /**
     * @return The performance level of the ESSD that is used as the system disk. Default value: `PL1` For more information, see [ESSDs](https://www.alibabacloud.com/help/en/elastic-compute-service/latest/essds). Valid values:
     * 
     */
    public Output<Optional<String>> systemDiskLevel() {
        return Codegen.optional(this.systemDiskLevel);
    }
    /**
     * The size of the system disk. Unit: `GB`. Valid values: `40` to `500`. Default value: `40`.
     * 
     */
    @Export(name="systemDiskSize", type=Integer.class, parameters={})
    private Output</* @Nullable */ Integer> systemDiskSize;

    /**
     * @return The size of the system disk. Unit: `GB`. Valid values: `40` to `500`. Default value: `40`.
     * 
     */
    public Output<Optional<Integer>> systemDiskSize() {
        return Codegen.optional(this.systemDiskSize);
    }
    /**
     * The type of the system disk. Valid values: `cloud_efficiency`, `cloud_ssd`, `cloud_essd` or `cloud`. Default value: `cloud_ssd`.
     * 
     */
    @Export(name="systemDiskType", type=String.class, parameters={})
    private Output</* @Nullable */ String> systemDiskType;

    /**
     * @return The type of the system disk. Valid values: `cloud_efficiency`, `cloud_ssd`, `cloud_essd` or `cloud`. Default value: `cloud_ssd`.
     * 
     */
    public Output<Optional<String>> systemDiskType() {
        return Codegen.optional(this.systemDiskType);
    }
    /**
     * The ID of the file system. If you leave the parameter empty, a Performance NAS file system is created by default.
     * 
     */
    @Export(name="volumeId", type=String.class, parameters={})
    private Output<String> volumeId;

    /**
     * @return The ID of the file system. If you leave the parameter empty, a Performance NAS file system is created by default.
     * 
     */
    public Output<String> volumeId() {
        return this.volumeId;
    }
    /**
     * The mount options of the file system.
     * 
     */
    @Export(name="volumeMountOption", type=String.class, parameters={})
    private Output</* @Nullable */ String> volumeMountOption;

    /**
     * @return The mount options of the file system.
     * 
     */
    public Output<Optional<String>> volumeMountOption() {
        return Codegen.optional(this.volumeMountOption);
    }
    /**
     * The mount target of the file system. Take note of the following information:
     * - If you do not specify the VolumeId parameter, you can leave the VolumeMountpoint parameter empty. A mount target is created by default.
     * - If you specify the VolumeId parameter, the VolumeMountpoint parameter is required.
     * 
     */
    @Export(name="volumeMountpoint", type=String.class, parameters={})
    private Output<String> volumeMountpoint;

    /**
     * @return The mount target of the file system. Take note of the following information:
     * - If you do not specify the VolumeId parameter, you can leave the VolumeMountpoint parameter empty. A mount target is created by default.
     * - If you specify the VolumeId parameter, the VolumeMountpoint parameter is required.
     * 
     */
    public Output<String> volumeMountpoint() {
        return this.volumeMountpoint;
    }
    /**
     * The type of the protocol that is used by the file system. Valid values: `NFS`, `SMB`. Default value: `NFS`.
     * 
     */
    @Export(name="volumeProtocol", type=String.class, parameters={})
    private Output<String> volumeProtocol;

    /**
     * @return The type of the protocol that is used by the file system. Valid values: `NFS`, `SMB`. Default value: `NFS`.
     * 
     */
    public Output<String> volumeProtocol() {
        return this.volumeProtocol;
    }
    /**
     * The type of the shared storage. Only Apsara File Storage NAS file systems are supported.
     * 
     */
    @Export(name="volumeType", type=String.class, parameters={})
    private Output<String> volumeType;

    /**
     * @return The type of the shared storage. Only Apsara File Storage NAS file systems are supported.
     * 
     */
    public Output<String> volumeType() {
        return this.volumeType;
    }
    /**
     * The ID of the virtual private cloud (VPC) to which the cluster belongs.
     * 
     */
    @Export(name="vpcId", type=String.class, parameters={})
    private Output<String> vpcId;

    /**
     * @return The ID of the virtual private cloud (VPC) to which the cluster belongs.
     * 
     */
    public Output<String> vpcId() {
        return this.vpcId;
    }
    /**
     * The ID of the vSwitch. E-HPC supports only VPC networks.
     * 
     */
    @Export(name="vswitchId", type=String.class, parameters={})
    private Output<String> vswitchId;

    /**
     * @return The ID of the vSwitch. E-HPC supports only VPC networks.
     * 
     */
    public Output<String> vswitchId() {
        return this.vswitchId;
    }
    /**
     * Specifies whether not to install the agent. Default value: `false`.
     * 
     */
    @Export(name="withoutAgent", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> withoutAgent;

    /**
     * @return Specifies whether not to install the agent. Default value: `false`.
     * 
     */
    public Output<Optional<Boolean>> withoutAgent() {
        return Codegen.optional(this.withoutAgent);
    }
    /**
     * Specifies whether the logon node uses an elastic IP address (EIP). Default value: `false`.
     * 
     */
    @Export(name="withoutElasticIp", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> withoutElasticIp;

    /**
     * @return Specifies whether the logon node uses an elastic IP address (EIP). Default value: `false`.
     * 
     */
    public Output<Optional<Boolean>> withoutElasticIp() {
        return Codegen.optional(this.withoutElasticIp);
    }
    /**
     * The ID of the zone.
     * 
     */
    @Export(name="zoneId", type=String.class, parameters={})
    private Output<String> zoneId;

    /**
     * @return The ID of the zone.
     * 
     */
    public Output<String> zoneId() {
        return this.zoneId;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Cluster(String name) {
        this(name, ClusterArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Cluster(String name, ClusterArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Cluster(String name, ClusterArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("alicloud:ehpc/cluster:Cluster", name, args == null ? ClusterArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private Cluster(String name, Output<String> id, @Nullable ClusterState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("alicloud:ehpc/cluster:Cluster", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .additionalSecretOutputs(List.of(
                "password"
            ))
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Cluster get(String name, Output<String> id, @Nullable ClusterState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Cluster(name, id, state, options);
    }
}
