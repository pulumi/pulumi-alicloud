// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.simpleapplicationserver.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetServerSnapshotsSnapshot {
    /**
     * @return The time when the snapshot was created. The time follows the ISO 8601 standard in the `yyyy-MM-ddTHH:mm:ssZ` format. The time is displayed in UTC.
     * 
     */
    private String createTime;
    /**
     * @return The ID of the source disk. This parameter has a value even after the source disk is released.
     * 
     */
    private String diskId;
    /**
     * @return The ID of the Snapshot.
     * 
     */
    private String id;
    /**
     * @return The progress of snapshot creation.
     * 
     */
    private String progress;
    /**
     * @return The remarks of the snapshot.
     * 
     */
    private String remark;
    /**
     * @return The ID of the snapshot.
     * 
     */
    private String snapshotId;
    /**
     * @return The name of the snapshot.
     * 
     */
    private String snapshotName;
    /**
     * @return A snapshot of the source of a disk type. Possible values: `System`, `Data`.
     * 
     */
    private String sourceDiskType;
    /**
     * @return The status of the snapshots. Valid values: `Progressing`, `Accomplished` and `Failed`.
     * 
     */
    private String status;

    private GetServerSnapshotsSnapshot() {}
    /**
     * @return The time when the snapshot was created. The time follows the ISO 8601 standard in the `yyyy-MM-ddTHH:mm:ssZ` format. The time is displayed in UTC.
     * 
     */
    public String createTime() {
        return this.createTime;
    }
    /**
     * @return The ID of the source disk. This parameter has a value even after the source disk is released.
     * 
     */
    public String diskId() {
        return this.diskId;
    }
    /**
     * @return The ID of the Snapshot.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The progress of snapshot creation.
     * 
     */
    public String progress() {
        return this.progress;
    }
    /**
     * @return The remarks of the snapshot.
     * 
     */
    public String remark() {
        return this.remark;
    }
    /**
     * @return The ID of the snapshot.
     * 
     */
    public String snapshotId() {
        return this.snapshotId;
    }
    /**
     * @return The name of the snapshot.
     * 
     */
    public String snapshotName() {
        return this.snapshotName;
    }
    /**
     * @return A snapshot of the source of a disk type. Possible values: `System`, `Data`.
     * 
     */
    public String sourceDiskType() {
        return this.sourceDiskType;
    }
    /**
     * @return The status of the snapshots. Valid values: `Progressing`, `Accomplished` and `Failed`.
     * 
     */
    public String status() {
        return this.status;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetServerSnapshotsSnapshot defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String createTime;
        private String diskId;
        private String id;
        private String progress;
        private String remark;
        private String snapshotId;
        private String snapshotName;
        private String sourceDiskType;
        private String status;
        public Builder() {}
        public Builder(GetServerSnapshotsSnapshot defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.createTime = defaults.createTime;
    	      this.diskId = defaults.diskId;
    	      this.id = defaults.id;
    	      this.progress = defaults.progress;
    	      this.remark = defaults.remark;
    	      this.snapshotId = defaults.snapshotId;
    	      this.snapshotName = defaults.snapshotName;
    	      this.sourceDiskType = defaults.sourceDiskType;
    	      this.status = defaults.status;
        }

        @CustomType.Setter
        public Builder createTime(String createTime) {
            this.createTime = Objects.requireNonNull(createTime);
            return this;
        }
        @CustomType.Setter
        public Builder diskId(String diskId) {
            this.diskId = Objects.requireNonNull(diskId);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder progress(String progress) {
            this.progress = Objects.requireNonNull(progress);
            return this;
        }
        @CustomType.Setter
        public Builder remark(String remark) {
            this.remark = Objects.requireNonNull(remark);
            return this;
        }
        @CustomType.Setter
        public Builder snapshotId(String snapshotId) {
            this.snapshotId = Objects.requireNonNull(snapshotId);
            return this;
        }
        @CustomType.Setter
        public Builder snapshotName(String snapshotName) {
            this.snapshotName = Objects.requireNonNull(snapshotName);
            return this;
        }
        @CustomType.Setter
        public Builder sourceDiskType(String sourceDiskType) {
            this.sourceDiskType = Objects.requireNonNull(sourceDiskType);
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            this.status = Objects.requireNonNull(status);
            return this;
        }
        public GetServerSnapshotsSnapshot build() {
            final var o = new GetServerSnapshotsSnapshot();
            o.createTime = createTime;
            o.diskId = diskId;
            o.id = id;
            o.progress = progress;
            o.remark = remark;
            o.snapshotId = snapshotId;
            o.snapshotName = snapshotName;
            o.sourceDiskType = sourceDiskType;
            o.status = status;
            return o;
        }
    }
}
