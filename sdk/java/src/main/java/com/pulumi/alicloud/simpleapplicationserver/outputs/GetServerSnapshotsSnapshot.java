// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.simpleapplicationserver.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetServerSnapshotsSnapshot {
    /**
     * @return The time when the snapshot was created. The time follows the ISO 8601 standard in the `yyyy-MM-ddTHH:mm:ssZ` format. The time is displayed in UTC.
     * 
     */
    private String createTime;
    /**
     * @return The ID of the source disk. This parameter has a value even after the source disk is released.
     * 
     */
    private String diskId;
    /**
     * @return The ID of the Snapshot.
     * 
     */
    private String id;
    /**
     * @return The progress of snapshot creation.
     * 
     */
    private String progress;
    /**
     * @return The remarks of the snapshot.
     * 
     */
    private String remark;
    /**
     * @return The ID of the snapshot.
     * 
     */
    private String snapshotId;
    /**
     * @return The name of the snapshot.
     * 
     */
    private String snapshotName;
    /**
     * @return A snapshot of the source of a disk type. Possible values: `System`, `Data`.
     * 
     */
    private String sourceDiskType;
    /**
     * @return The status of the snapshots. Valid values: `Progressing`, `Accomplished` and `Failed`.
     * 
     */
    private String status;

    private GetServerSnapshotsSnapshot() {}
    /**
     * @return The time when the snapshot was created. The time follows the ISO 8601 standard in the `yyyy-MM-ddTHH:mm:ssZ` format. The time is displayed in UTC.
     * 
     */
    public String createTime() {
        return this.createTime;
    }
    /**
     * @return The ID of the source disk. This parameter has a value even after the source disk is released.
     * 
     */
    public String diskId() {
        return this.diskId;
    }
    /**
     * @return The ID of the Snapshot.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The progress of snapshot creation.
     * 
     */
    public String progress() {
        return this.progress;
    }
    /**
     * @return The remarks of the snapshot.
     * 
     */
    public String remark() {
        return this.remark;
    }
    /**
     * @return The ID of the snapshot.
     * 
     */
    public String snapshotId() {
        return this.snapshotId;
    }
    /**
     * @return The name of the snapshot.
     * 
     */
    public String snapshotName() {
        return this.snapshotName;
    }
    /**
     * @return A snapshot of the source of a disk type. Possible values: `System`, `Data`.
     * 
     */
    public String sourceDiskType() {
        return this.sourceDiskType;
    }
    /**
     * @return The status of the snapshots. Valid values: `Progressing`, `Accomplished` and `Failed`.
     * 
     */
    public String status() {
        return this.status;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetServerSnapshotsSnapshot defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String createTime;
        private String diskId;
        private String id;
        private String progress;
        private String remark;
        private String snapshotId;
        private String snapshotName;
        private String sourceDiskType;
        private String status;
        public Builder() {}
        public Builder(GetServerSnapshotsSnapshot defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.createTime = defaults.createTime;
    	      this.diskId = defaults.diskId;
    	      this.id = defaults.id;
    	      this.progress = defaults.progress;
    	      this.remark = defaults.remark;
    	      this.snapshotId = defaults.snapshotId;
    	      this.snapshotName = defaults.snapshotName;
    	      this.sourceDiskType = defaults.sourceDiskType;
    	      this.status = defaults.status;
        }

        @CustomType.Setter
        public Builder createTime(String createTime) {
            if (createTime == null) {
              throw new MissingRequiredPropertyException("GetServerSnapshotsSnapshot", "createTime");
            }
            this.createTime = createTime;
            return this;
        }
        @CustomType.Setter
        public Builder diskId(String diskId) {
            if (diskId == null) {
              throw new MissingRequiredPropertyException("GetServerSnapshotsSnapshot", "diskId");
            }
            this.diskId = diskId;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetServerSnapshotsSnapshot", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder progress(String progress) {
            if (progress == null) {
              throw new MissingRequiredPropertyException("GetServerSnapshotsSnapshot", "progress");
            }
            this.progress = progress;
            return this;
        }
        @CustomType.Setter
        public Builder remark(String remark) {
            if (remark == null) {
              throw new MissingRequiredPropertyException("GetServerSnapshotsSnapshot", "remark");
            }
            this.remark = remark;
            return this;
        }
        @CustomType.Setter
        public Builder snapshotId(String snapshotId) {
            if (snapshotId == null) {
              throw new MissingRequiredPropertyException("GetServerSnapshotsSnapshot", "snapshotId");
            }
            this.snapshotId = snapshotId;
            return this;
        }
        @CustomType.Setter
        public Builder snapshotName(String snapshotName) {
            if (snapshotName == null) {
              throw new MissingRequiredPropertyException("GetServerSnapshotsSnapshot", "snapshotName");
            }
            this.snapshotName = snapshotName;
            return this;
        }
        @CustomType.Setter
        public Builder sourceDiskType(String sourceDiskType) {
            if (sourceDiskType == null) {
              throw new MissingRequiredPropertyException("GetServerSnapshotsSnapshot", "sourceDiskType");
            }
            this.sourceDiskType = sourceDiskType;
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            if (status == null) {
              throw new MissingRequiredPropertyException("GetServerSnapshotsSnapshot", "status");
            }
            this.status = status;
            return this;
        }
        public GetServerSnapshotsSnapshot build() {
            final var _resultValue = new GetServerSnapshotsSnapshot();
            _resultValue.createTime = createTime;
            _resultValue.diskId = diskId;
            _resultValue.id = id;
            _resultValue.progress = progress;
            _resultValue.remark = remark;
            _resultValue.snapshotId = snapshotId;
            _resultValue.snapshotName = snapshotName;
            _resultValue.sourceDiskType = sourceDiskType;
            _resultValue.status = status;
            return _resultValue;
        }
    }
}
