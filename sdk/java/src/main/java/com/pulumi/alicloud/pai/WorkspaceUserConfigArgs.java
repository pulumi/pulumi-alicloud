// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.pai;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class WorkspaceUserConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final WorkspaceUserConfigArgs Empty = new WorkspaceUserConfigArgs();

    /**
     * The category. Valid values: `DataPrivacyConfig`.
     * 
     */
    @Import(name="categoryName", required=true)
    private Output<String> categoryName;

    /**
     * @return The category. Valid values: `DataPrivacyConfig`.
     * 
     */
    public Output<String> categoryName() {
        return this.categoryName;
    }

    /**
     * The key of the configuration.
     * 
     */
    @Import(name="configKey", required=true)
    private Output<String> configKey;

    /**
     * @return The key of the configuration.
     * 
     */
    public Output<String> configKey() {
        return this.configKey;
    }

    /**
     * The value of the configuration.
     * 
     */
    @Import(name="configValue", required=true)
    private Output<String> configValue;

    /**
     * @return The value of the configuration.
     * 
     */
    public Output<String> configValue() {
        return this.configValue;
    }

    /**
     * The scope. Default value: `owner`. Valid values: `owner`, `subUser`.
     * 
     */
    @Import(name="scope")
    private @Nullable Output<String> scope;

    /**
     * @return The scope. Default value: `owner`. Valid values: `owner`, `subUser`.
     * 
     */
    public Optional<Output<String>> scope() {
        return Optional.ofNullable(this.scope);
    }

    private WorkspaceUserConfigArgs() {}

    private WorkspaceUserConfigArgs(WorkspaceUserConfigArgs $) {
        this.categoryName = $.categoryName;
        this.configKey = $.configKey;
        this.configValue = $.configValue;
        this.scope = $.scope;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(WorkspaceUserConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private WorkspaceUserConfigArgs $;

        public Builder() {
            $ = new WorkspaceUserConfigArgs();
        }

        public Builder(WorkspaceUserConfigArgs defaults) {
            $ = new WorkspaceUserConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param categoryName The category. Valid values: `DataPrivacyConfig`.
         * 
         * @return builder
         * 
         */
        public Builder categoryName(Output<String> categoryName) {
            $.categoryName = categoryName;
            return this;
        }

        /**
         * @param categoryName The category. Valid values: `DataPrivacyConfig`.
         * 
         * @return builder
         * 
         */
        public Builder categoryName(String categoryName) {
            return categoryName(Output.of(categoryName));
        }

        /**
         * @param configKey The key of the configuration.
         * 
         * @return builder
         * 
         */
        public Builder configKey(Output<String> configKey) {
            $.configKey = configKey;
            return this;
        }

        /**
         * @param configKey The key of the configuration.
         * 
         * @return builder
         * 
         */
        public Builder configKey(String configKey) {
            return configKey(Output.of(configKey));
        }

        /**
         * @param configValue The value of the configuration.
         * 
         * @return builder
         * 
         */
        public Builder configValue(Output<String> configValue) {
            $.configValue = configValue;
            return this;
        }

        /**
         * @param configValue The value of the configuration.
         * 
         * @return builder
         * 
         */
        public Builder configValue(String configValue) {
            return configValue(Output.of(configValue));
        }

        /**
         * @param scope The scope. Default value: `owner`. Valid values: `owner`, `subUser`.
         * 
         * @return builder
         * 
         */
        public Builder scope(@Nullable Output<String> scope) {
            $.scope = scope;
            return this;
        }

        /**
         * @param scope The scope. Default value: `owner`. Valid values: `owner`, `subUser`.
         * 
         * @return builder
         * 
         */
        public Builder scope(String scope) {
            return scope(Output.of(scope));
        }

        public WorkspaceUserConfigArgs build() {
            if ($.categoryName == null) {
                throw new MissingRequiredPropertyException("WorkspaceUserConfigArgs", "categoryName");
            }
            if ($.configKey == null) {
                throw new MissingRequiredPropertyException("WorkspaceUserConfigArgs", "configKey");
            }
            if ($.configValue == null) {
                throw new MissingRequiredPropertyException("WorkspaceUserConfigArgs", "configValue");
            }
            return $;
        }
    }

}
