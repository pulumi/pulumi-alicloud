// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.edas.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ApplicationScaleState extends com.pulumi.resources.ResourceArgs {

    public static final ApplicationScaleState Empty = new ApplicationScaleState();

    /**
     * The ID of the application that you want to deploy.
     * 
     */
    @Import(name="appId")
    private @Nullable Output<String> appId;

    /**
     * @return The ID of the application that you want to deploy.
     * 
     */
    public Optional<Output<String>> appId() {
        return Optional.ofNullable(this.appId);
    }

    /**
     * The ID of the instance group to which you want to add ECS instances to scale out the application.
     * 
     */
    @Import(name="deployGroup")
    private @Nullable Output<String> deployGroup;

    /**
     * @return The ID of the instance group to which you want to add ECS instances to scale out the application.
     * 
     */
    public Optional<Output<String>> deployGroup() {
        return Optional.ofNullable(this.deployGroup);
    }

    /**
     * The ecc information of the resource supplied above. The value is formulated as `&lt;ecc1,ecc2&gt;`.
     * 
     */
    @Import(name="eccInfo")
    private @Nullable Output<String> eccInfo;

    /**
     * @return The ecc information of the resource supplied above. The value is formulated as `&lt;ecc1,ecc2&gt;`.
     * 
     */
    public Optional<Output<String>> eccInfo() {
        return Optional.ofNullable(this.eccInfo);
    }

    /**
     * The IDs of the Elastic Compute Unit (ECU) where you want to deploy the application. Type: List.
     * 
     */
    @Import(name="ecuInfos")
    private @Nullable Output<List<String>> ecuInfos;

    /**
     * @return The IDs of the Elastic Compute Unit (ECU) where you want to deploy the application. Type: List.
     * 
     */
    public Optional<Output<List<String>>> ecuInfos() {
        return Optional.ofNullable(this.ecuInfos);
    }

    /**
     * This parameter specifies whether to forcibly remove an ECS instance where the application is deployed. It is set as true only after the ECS instance expires. In normal cases, this parameter do not need to be specified.
     * 
     */
    @Import(name="forceStatus")
    private @Nullable Output<Boolean> forceStatus;

    /**
     * @return This parameter specifies whether to forcibly remove an ECS instance where the application is deployed. It is set as true only after the ECS instance expires. In normal cases, this parameter do not need to be specified.
     * 
     */
    public Optional<Output<Boolean>> forceStatus() {
        return Optional.ofNullable(this.forceStatus);
    }

    private ApplicationScaleState() {}

    private ApplicationScaleState(ApplicationScaleState $) {
        this.appId = $.appId;
        this.deployGroup = $.deployGroup;
        this.eccInfo = $.eccInfo;
        this.ecuInfos = $.ecuInfos;
        this.forceStatus = $.forceStatus;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ApplicationScaleState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ApplicationScaleState $;

        public Builder() {
            $ = new ApplicationScaleState();
        }

        public Builder(ApplicationScaleState defaults) {
            $ = new ApplicationScaleState(Objects.requireNonNull(defaults));
        }

        /**
         * @param appId The ID of the application that you want to deploy.
         * 
         * @return builder
         * 
         */
        public Builder appId(@Nullable Output<String> appId) {
            $.appId = appId;
            return this;
        }

        /**
         * @param appId The ID of the application that you want to deploy.
         * 
         * @return builder
         * 
         */
        public Builder appId(String appId) {
            return appId(Output.of(appId));
        }

        /**
         * @param deployGroup The ID of the instance group to which you want to add ECS instances to scale out the application.
         * 
         * @return builder
         * 
         */
        public Builder deployGroup(@Nullable Output<String> deployGroup) {
            $.deployGroup = deployGroup;
            return this;
        }

        /**
         * @param deployGroup The ID of the instance group to which you want to add ECS instances to scale out the application.
         * 
         * @return builder
         * 
         */
        public Builder deployGroup(String deployGroup) {
            return deployGroup(Output.of(deployGroup));
        }

        /**
         * @param eccInfo The ecc information of the resource supplied above. The value is formulated as `&lt;ecc1,ecc2&gt;`.
         * 
         * @return builder
         * 
         */
        public Builder eccInfo(@Nullable Output<String> eccInfo) {
            $.eccInfo = eccInfo;
            return this;
        }

        /**
         * @param eccInfo The ecc information of the resource supplied above. The value is formulated as `&lt;ecc1,ecc2&gt;`.
         * 
         * @return builder
         * 
         */
        public Builder eccInfo(String eccInfo) {
            return eccInfo(Output.of(eccInfo));
        }

        /**
         * @param ecuInfos The IDs of the Elastic Compute Unit (ECU) where you want to deploy the application. Type: List.
         * 
         * @return builder
         * 
         */
        public Builder ecuInfos(@Nullable Output<List<String>> ecuInfos) {
            $.ecuInfos = ecuInfos;
            return this;
        }

        /**
         * @param ecuInfos The IDs of the Elastic Compute Unit (ECU) where you want to deploy the application. Type: List.
         * 
         * @return builder
         * 
         */
        public Builder ecuInfos(List<String> ecuInfos) {
            return ecuInfos(Output.of(ecuInfos));
        }

        /**
         * @param ecuInfos The IDs of the Elastic Compute Unit (ECU) where you want to deploy the application. Type: List.
         * 
         * @return builder
         * 
         */
        public Builder ecuInfos(String... ecuInfos) {
            return ecuInfos(List.of(ecuInfos));
        }

        /**
         * @param forceStatus This parameter specifies whether to forcibly remove an ECS instance where the application is deployed. It is set as true only after the ECS instance expires. In normal cases, this parameter do not need to be specified.
         * 
         * @return builder
         * 
         */
        public Builder forceStatus(@Nullable Output<Boolean> forceStatus) {
            $.forceStatus = forceStatus;
            return this;
        }

        /**
         * @param forceStatus This parameter specifies whether to forcibly remove an ECS instance where the application is deployed. It is set as true only after the ECS instance expires. In normal cases, this parameter do not need to be specified.
         * 
         * @return builder
         * 
         */
        public Builder forceStatus(Boolean forceStatus) {
            return forceStatus(Output.of(forceStatus));
        }

        public ApplicationScaleState build() {
            return $;
        }
    }

}
