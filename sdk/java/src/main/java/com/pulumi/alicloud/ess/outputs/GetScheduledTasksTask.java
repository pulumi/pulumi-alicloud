// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.ess.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetScheduledTasksTask {
    /**
     * @return Description of the scheduled task.
     * 
     */
    private String description;
    /**
     * @return ID of the scheduled task id.
     * 
     */
    private String id;
    /**
     * @return The time period during which a failed scheduled task is retried.
     * 
     */
    private Integer launchExpirationTime;
    /**
     * @return The time at which the scheduled task is triggered.
     * 
     */
    private String launchTime;
    private Integer maxValue;
    private Integer minValue;
    /**
     * @return Name of the scheduled task name.
     * 
     */
    private String name;
    /**
     * @return Specifies the end time after which the scheduled task is no longer repeated.
     * 
     */
    private String recurrenceEndTime;
    /**
     * @return Specifies the recurrence type of the scheduled task.
     * 
     */
    private String recurrenceType;
    /**
     * @return Specifies how often a scheduled task recurs.
     * 
     */
    private String recurrenceValue;
    /**
     * @return The operation to be performed when a scheduled task is triggered.
     * 
     */
    private String scheduledAction;
    private Boolean taskEnabled;

    private GetScheduledTasksTask() {}
    /**
     * @return Description of the scheduled task.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return ID of the scheduled task id.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The time period during which a failed scheduled task is retried.
     * 
     */
    public Integer launchExpirationTime() {
        return this.launchExpirationTime;
    }
    /**
     * @return The time at which the scheduled task is triggered.
     * 
     */
    public String launchTime() {
        return this.launchTime;
    }
    public Integer maxValue() {
        return this.maxValue;
    }
    public Integer minValue() {
        return this.minValue;
    }
    /**
     * @return Name of the scheduled task name.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Specifies the end time after which the scheduled task is no longer repeated.
     * 
     */
    public String recurrenceEndTime() {
        return this.recurrenceEndTime;
    }
    /**
     * @return Specifies the recurrence type of the scheduled task.
     * 
     */
    public String recurrenceType() {
        return this.recurrenceType;
    }
    /**
     * @return Specifies how often a scheduled task recurs.
     * 
     */
    public String recurrenceValue() {
        return this.recurrenceValue;
    }
    /**
     * @return The operation to be performed when a scheduled task is triggered.
     * 
     */
    public String scheduledAction() {
        return this.scheduledAction;
    }
    public Boolean taskEnabled() {
        return this.taskEnabled;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetScheduledTasksTask defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String description;
        private String id;
        private Integer launchExpirationTime;
        private String launchTime;
        private Integer maxValue;
        private Integer minValue;
        private String name;
        private String recurrenceEndTime;
        private String recurrenceType;
        private String recurrenceValue;
        private String scheduledAction;
        private Boolean taskEnabled;
        public Builder() {}
        public Builder(GetScheduledTasksTask defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.description = defaults.description;
    	      this.id = defaults.id;
    	      this.launchExpirationTime = defaults.launchExpirationTime;
    	      this.launchTime = defaults.launchTime;
    	      this.maxValue = defaults.maxValue;
    	      this.minValue = defaults.minValue;
    	      this.name = defaults.name;
    	      this.recurrenceEndTime = defaults.recurrenceEndTime;
    	      this.recurrenceType = defaults.recurrenceType;
    	      this.recurrenceValue = defaults.recurrenceValue;
    	      this.scheduledAction = defaults.scheduledAction;
    	      this.taskEnabled = defaults.taskEnabled;
        }

        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetScheduledTasksTask", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetScheduledTasksTask", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder launchExpirationTime(Integer launchExpirationTime) {
            if (launchExpirationTime == null) {
              throw new MissingRequiredPropertyException("GetScheduledTasksTask", "launchExpirationTime");
            }
            this.launchExpirationTime = launchExpirationTime;
            return this;
        }
        @CustomType.Setter
        public Builder launchTime(String launchTime) {
            if (launchTime == null) {
              throw new MissingRequiredPropertyException("GetScheduledTasksTask", "launchTime");
            }
            this.launchTime = launchTime;
            return this;
        }
        @CustomType.Setter
        public Builder maxValue(Integer maxValue) {
            if (maxValue == null) {
              throw new MissingRequiredPropertyException("GetScheduledTasksTask", "maxValue");
            }
            this.maxValue = maxValue;
            return this;
        }
        @CustomType.Setter
        public Builder minValue(Integer minValue) {
            if (minValue == null) {
              throw new MissingRequiredPropertyException("GetScheduledTasksTask", "minValue");
            }
            this.minValue = minValue;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetScheduledTasksTask", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder recurrenceEndTime(String recurrenceEndTime) {
            if (recurrenceEndTime == null) {
              throw new MissingRequiredPropertyException("GetScheduledTasksTask", "recurrenceEndTime");
            }
            this.recurrenceEndTime = recurrenceEndTime;
            return this;
        }
        @CustomType.Setter
        public Builder recurrenceType(String recurrenceType) {
            if (recurrenceType == null) {
              throw new MissingRequiredPropertyException("GetScheduledTasksTask", "recurrenceType");
            }
            this.recurrenceType = recurrenceType;
            return this;
        }
        @CustomType.Setter
        public Builder recurrenceValue(String recurrenceValue) {
            if (recurrenceValue == null) {
              throw new MissingRequiredPropertyException("GetScheduledTasksTask", "recurrenceValue");
            }
            this.recurrenceValue = recurrenceValue;
            return this;
        }
        @CustomType.Setter
        public Builder scheduledAction(String scheduledAction) {
            if (scheduledAction == null) {
              throw new MissingRequiredPropertyException("GetScheduledTasksTask", "scheduledAction");
            }
            this.scheduledAction = scheduledAction;
            return this;
        }
        @CustomType.Setter
        public Builder taskEnabled(Boolean taskEnabled) {
            if (taskEnabled == null) {
              throw new MissingRequiredPropertyException("GetScheduledTasksTask", "taskEnabled");
            }
            this.taskEnabled = taskEnabled;
            return this;
        }
        public GetScheduledTasksTask build() {
            final var _resultValue = new GetScheduledTasksTask();
            _resultValue.description = description;
            _resultValue.id = id;
            _resultValue.launchExpirationTime = launchExpirationTime;
            _resultValue.launchTime = launchTime;
            _resultValue.maxValue = maxValue;
            _resultValue.minValue = minValue;
            _resultValue.name = name;
            _resultValue.recurrenceEndTime = recurrenceEndTime;
            _resultValue.recurrenceType = recurrenceType;
            _resultValue.recurrenceValue = recurrenceValue;
            _resultValue.scheduledAction = scheduledAction;
            _resultValue.taskEnabled = taskEnabled;
            return _resultValue;
        }
    }
}
