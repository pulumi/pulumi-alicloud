// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.ecs.inputs;

import com.pulumi.alicloud.ecs.inputs.GetDedicatedHostsOperationLockArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetDedicatedHostsArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetDedicatedHostsArgs Empty = new GetDedicatedHostsArgs();

    /**
     * The ID of ECS Dedicated Host.
     * 
     */
    @Import(name="dedicatedHostId")
    private @Nullable Output<String> dedicatedHostId;

    /**
     * @return The ID of ECS Dedicated Host.
     * 
     */
    public Optional<Output<String>> dedicatedHostId() {
        return Optional.ofNullable(this.dedicatedHostId);
    }

    /**
     * The name of ECS Dedicated Host.
     * 
     */
    @Import(name="dedicatedHostName")
    private @Nullable Output<String> dedicatedHostName;

    /**
     * @return The name of ECS Dedicated Host.
     * 
     */
    public Optional<Output<String>> dedicatedHostName() {
        return Optional.ofNullable(this.dedicatedHostName);
    }

    /**
     * The type of the dedicated host.
     * 
     */
    @Import(name="dedicatedHostType")
    private @Nullable Output<String> dedicatedHostType;

    /**
     * @return The type of the dedicated host.
     * 
     */
    public Optional<Output<String>> dedicatedHostType() {
        return Optional.ofNullable(this.dedicatedHostType);
    }

    /**
     * A list of ECS Dedicated Host ids.
     * 
     */
    @Import(name="ids")
    private @Nullable Output<List<String>> ids;

    /**
     * @return A list of ECS Dedicated Host ids.
     * 
     */
    public Optional<Output<List<String>>> ids() {
        return Optional.ofNullable(this.ids);
    }

    /**
     * A regex string to filter results by the ECS Dedicated Host name.
     * 
     */
    @Import(name="nameRegex")
    private @Nullable Output<String> nameRegex;

    /**
     * @return A regex string to filter results by the ECS Dedicated Host name.
     * 
     */
    public Optional<Output<String>> nameRegex() {
        return Optional.ofNullable(this.nameRegex);
    }

    /**
     * The reason why the dedicated host resource is locked.
     * 
     */
    @Import(name="operationLocks")
    private @Nullable Output<List<GetDedicatedHostsOperationLockArgs>> operationLocks;

    /**
     * @return The reason why the dedicated host resource is locked.
     * 
     */
    public Optional<Output<List<GetDedicatedHostsOperationLockArgs>>> operationLocks() {
        return Optional.ofNullable(this.operationLocks);
    }

    /**
     * Save the result to the file.
     * 
     */
    @Import(name="outputFile")
    private @Nullable Output<String> outputFile;

    /**
     * @return Save the result to the file.
     * 
     */
    public Optional<Output<String>> outputFile() {
        return Optional.ofNullable(this.outputFile);
    }

    /**
     * The ID of the resource group to which the ECS Dedicated Host belongs.
     * 
     */
    @Import(name="resourceGroupId")
    private @Nullable Output<String> resourceGroupId;

    /**
     * @return The ID of the resource group to which the ECS Dedicated Host belongs.
     * 
     */
    public Optional<Output<String>> resourceGroupId() {
        return Optional.ofNullable(this.resourceGroupId);
    }

    /**
     * The status of the ECS Dedicated Host. validate value: `Available`, `Creating`, `PermanentFailure`, `Released`, `UnderAssessment`.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return The status of the ECS Dedicated Host. validate value: `Available`, `Creating`, `PermanentFailure`, `Released`, `UnderAssessment`.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * A mapping of tags to assign to the resource.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return A mapping of tags to assign to the resource.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * The zone ID of the ECS Dedicated Host.
     * 
     */
    @Import(name="zoneId")
    private @Nullable Output<String> zoneId;

    /**
     * @return The zone ID of the ECS Dedicated Host.
     * 
     */
    public Optional<Output<String>> zoneId() {
        return Optional.ofNullable(this.zoneId);
    }

    private GetDedicatedHostsArgs() {}

    private GetDedicatedHostsArgs(GetDedicatedHostsArgs $) {
        this.dedicatedHostId = $.dedicatedHostId;
        this.dedicatedHostName = $.dedicatedHostName;
        this.dedicatedHostType = $.dedicatedHostType;
        this.ids = $.ids;
        this.nameRegex = $.nameRegex;
        this.operationLocks = $.operationLocks;
        this.outputFile = $.outputFile;
        this.resourceGroupId = $.resourceGroupId;
        this.status = $.status;
        this.tags = $.tags;
        this.zoneId = $.zoneId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetDedicatedHostsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetDedicatedHostsArgs $;

        public Builder() {
            $ = new GetDedicatedHostsArgs();
        }

        public Builder(GetDedicatedHostsArgs defaults) {
            $ = new GetDedicatedHostsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param dedicatedHostId The ID of ECS Dedicated Host.
         * 
         * @return builder
         * 
         */
        public Builder dedicatedHostId(@Nullable Output<String> dedicatedHostId) {
            $.dedicatedHostId = dedicatedHostId;
            return this;
        }

        /**
         * @param dedicatedHostId The ID of ECS Dedicated Host.
         * 
         * @return builder
         * 
         */
        public Builder dedicatedHostId(String dedicatedHostId) {
            return dedicatedHostId(Output.of(dedicatedHostId));
        }

        /**
         * @param dedicatedHostName The name of ECS Dedicated Host.
         * 
         * @return builder
         * 
         */
        public Builder dedicatedHostName(@Nullable Output<String> dedicatedHostName) {
            $.dedicatedHostName = dedicatedHostName;
            return this;
        }

        /**
         * @param dedicatedHostName The name of ECS Dedicated Host.
         * 
         * @return builder
         * 
         */
        public Builder dedicatedHostName(String dedicatedHostName) {
            return dedicatedHostName(Output.of(dedicatedHostName));
        }

        /**
         * @param dedicatedHostType The type of the dedicated host.
         * 
         * @return builder
         * 
         */
        public Builder dedicatedHostType(@Nullable Output<String> dedicatedHostType) {
            $.dedicatedHostType = dedicatedHostType;
            return this;
        }

        /**
         * @param dedicatedHostType The type of the dedicated host.
         * 
         * @return builder
         * 
         */
        public Builder dedicatedHostType(String dedicatedHostType) {
            return dedicatedHostType(Output.of(dedicatedHostType));
        }

        /**
         * @param ids A list of ECS Dedicated Host ids.
         * 
         * @return builder
         * 
         */
        public Builder ids(@Nullable Output<List<String>> ids) {
            $.ids = ids;
            return this;
        }

        /**
         * @param ids A list of ECS Dedicated Host ids.
         * 
         * @return builder
         * 
         */
        public Builder ids(List<String> ids) {
            return ids(Output.of(ids));
        }

        /**
         * @param ids A list of ECS Dedicated Host ids.
         * 
         * @return builder
         * 
         */
        public Builder ids(String... ids) {
            return ids(List.of(ids));
        }

        /**
         * @param nameRegex A regex string to filter results by the ECS Dedicated Host name.
         * 
         * @return builder
         * 
         */
        public Builder nameRegex(@Nullable Output<String> nameRegex) {
            $.nameRegex = nameRegex;
            return this;
        }

        /**
         * @param nameRegex A regex string to filter results by the ECS Dedicated Host name.
         * 
         * @return builder
         * 
         */
        public Builder nameRegex(String nameRegex) {
            return nameRegex(Output.of(nameRegex));
        }

        /**
         * @param operationLocks The reason why the dedicated host resource is locked.
         * 
         * @return builder
         * 
         */
        public Builder operationLocks(@Nullable Output<List<GetDedicatedHostsOperationLockArgs>> operationLocks) {
            $.operationLocks = operationLocks;
            return this;
        }

        /**
         * @param operationLocks The reason why the dedicated host resource is locked.
         * 
         * @return builder
         * 
         */
        public Builder operationLocks(List<GetDedicatedHostsOperationLockArgs> operationLocks) {
            return operationLocks(Output.of(operationLocks));
        }

        /**
         * @param operationLocks The reason why the dedicated host resource is locked.
         * 
         * @return builder
         * 
         */
        public Builder operationLocks(GetDedicatedHostsOperationLockArgs... operationLocks) {
            return operationLocks(List.of(operationLocks));
        }

        /**
         * @param outputFile Save the result to the file.
         * 
         * @return builder
         * 
         */
        public Builder outputFile(@Nullable Output<String> outputFile) {
            $.outputFile = outputFile;
            return this;
        }

        /**
         * @param outputFile Save the result to the file.
         * 
         * @return builder
         * 
         */
        public Builder outputFile(String outputFile) {
            return outputFile(Output.of(outputFile));
        }

        /**
         * @param resourceGroupId The ID of the resource group to which the ECS Dedicated Host belongs.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupId(@Nullable Output<String> resourceGroupId) {
            $.resourceGroupId = resourceGroupId;
            return this;
        }

        /**
         * @param resourceGroupId The ID of the resource group to which the ECS Dedicated Host belongs.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupId(String resourceGroupId) {
            return resourceGroupId(Output.of(resourceGroupId));
        }

        /**
         * @param status The status of the ECS Dedicated Host. validate value: `Available`, `Creating`, `PermanentFailure`, `Released`, `UnderAssessment`.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status The status of the ECS Dedicated Host. validate value: `Available`, `Creating`, `PermanentFailure`, `Released`, `UnderAssessment`.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param tags A mapping of tags to assign to the resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags A mapping of tags to assign to the resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param zoneId The zone ID of the ECS Dedicated Host.
         * 
         * @return builder
         * 
         */
        public Builder zoneId(@Nullable Output<String> zoneId) {
            $.zoneId = zoneId;
            return this;
        }

        /**
         * @param zoneId The zone ID of the ECS Dedicated Host.
         * 
         * @return builder
         * 
         */
        public Builder zoneId(String zoneId) {
            return zoneId(Output.of(zoneId));
        }

        public GetDedicatedHostsArgs build() {
            return $;
        }
    }

}
