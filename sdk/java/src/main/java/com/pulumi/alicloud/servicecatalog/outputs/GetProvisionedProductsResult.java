// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.servicecatalog.outputs;

import com.pulumi.alicloud.servicecatalog.outputs.GetProvisionedProductsProduct;
import com.pulumi.alicloud.servicecatalog.outputs.GetProvisionedProductsProvisionedProduct;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetProvisionedProductsResult {
    private @Nullable String accessLevelFilter;
    private @Nullable Boolean enableDetails;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return A list of Provisioned Product IDs.
     * 
     */
    private List<String> ids;
    private @Nullable String nameRegex;
    /**
     * @return A list of name of Provisioned Products.
     * 
     */
    private List<String> names;
    private @Nullable String outputFile;
    private @Nullable Integer pageNumber;
    private @Nullable Integer pageSize;
    /**
     * @return (Deprecated since v1.197.0) A list of Provisioned Product Entries. Each element contains the following attributes:
     * 
     * @deprecated
     * Field &#39;products&#39; has been deprecated from provider version 1.197.0.
     * 
     */
    @Deprecated /* Field 'products' has been deprecated from provider version 1.197.0. */
    private List<GetProvisionedProductsProduct> products;
    /**
     * @return (Available since v1.197.0) A list of Provisioned Product Entries. Each element contains the following attributes:
     * 
     */
    private List<GetProvisionedProductsProvisionedProduct> provisionedProducts;
    private @Nullable String sortBy;
    private @Nullable String sortOrder;

    private GetProvisionedProductsResult() {}
    public Optional<String> accessLevelFilter() {
        return Optional.ofNullable(this.accessLevelFilter);
    }
    public Optional<Boolean> enableDetails() {
        return Optional.ofNullable(this.enableDetails);
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return A list of Provisioned Product IDs.
     * 
     */
    public List<String> ids() {
        return this.ids;
    }
    public Optional<String> nameRegex() {
        return Optional.ofNullable(this.nameRegex);
    }
    /**
     * @return A list of name of Provisioned Products.
     * 
     */
    public List<String> names() {
        return this.names;
    }
    public Optional<String> outputFile() {
        return Optional.ofNullable(this.outputFile);
    }
    public Optional<Integer> pageNumber() {
        return Optional.ofNullable(this.pageNumber);
    }
    public Optional<Integer> pageSize() {
        return Optional.ofNullable(this.pageSize);
    }
    /**
     * @return (Deprecated since v1.197.0) A list of Provisioned Product Entries. Each element contains the following attributes:
     * 
     * @deprecated
     * Field &#39;products&#39; has been deprecated from provider version 1.197.0.
     * 
     */
    @Deprecated /* Field 'products' has been deprecated from provider version 1.197.0. */
    public List<GetProvisionedProductsProduct> products() {
        return this.products;
    }
    /**
     * @return (Available since v1.197.0) A list of Provisioned Product Entries. Each element contains the following attributes:
     * 
     */
    public List<GetProvisionedProductsProvisionedProduct> provisionedProducts() {
        return this.provisionedProducts;
    }
    public Optional<String> sortBy() {
        return Optional.ofNullable(this.sortBy);
    }
    public Optional<String> sortOrder() {
        return Optional.ofNullable(this.sortOrder);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetProvisionedProductsResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String accessLevelFilter;
        private @Nullable Boolean enableDetails;
        private String id;
        private List<String> ids;
        private @Nullable String nameRegex;
        private List<String> names;
        private @Nullable String outputFile;
        private @Nullable Integer pageNumber;
        private @Nullable Integer pageSize;
        private List<GetProvisionedProductsProduct> products;
        private List<GetProvisionedProductsProvisionedProduct> provisionedProducts;
        private @Nullable String sortBy;
        private @Nullable String sortOrder;
        public Builder() {}
        public Builder(GetProvisionedProductsResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accessLevelFilter = defaults.accessLevelFilter;
    	      this.enableDetails = defaults.enableDetails;
    	      this.id = defaults.id;
    	      this.ids = defaults.ids;
    	      this.nameRegex = defaults.nameRegex;
    	      this.names = defaults.names;
    	      this.outputFile = defaults.outputFile;
    	      this.pageNumber = defaults.pageNumber;
    	      this.pageSize = defaults.pageSize;
    	      this.products = defaults.products;
    	      this.provisionedProducts = defaults.provisionedProducts;
    	      this.sortBy = defaults.sortBy;
    	      this.sortOrder = defaults.sortOrder;
        }

        @CustomType.Setter
        public Builder accessLevelFilter(@Nullable String accessLevelFilter) {

            this.accessLevelFilter = accessLevelFilter;
            return this;
        }
        @CustomType.Setter
        public Builder enableDetails(@Nullable Boolean enableDetails) {

            this.enableDetails = enableDetails;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetProvisionedProductsResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder ids(List<String> ids) {
            if (ids == null) {
              throw new MissingRequiredPropertyException("GetProvisionedProductsResult", "ids");
            }
            this.ids = ids;
            return this;
        }
        public Builder ids(String... ids) {
            return ids(List.of(ids));
        }
        @CustomType.Setter
        public Builder nameRegex(@Nullable String nameRegex) {

            this.nameRegex = nameRegex;
            return this;
        }
        @CustomType.Setter
        public Builder names(List<String> names) {
            if (names == null) {
              throw new MissingRequiredPropertyException("GetProvisionedProductsResult", "names");
            }
            this.names = names;
            return this;
        }
        public Builder names(String... names) {
            return names(List.of(names));
        }
        @CustomType.Setter
        public Builder outputFile(@Nullable String outputFile) {

            this.outputFile = outputFile;
            return this;
        }
        @CustomType.Setter
        public Builder pageNumber(@Nullable Integer pageNumber) {

            this.pageNumber = pageNumber;
            return this;
        }
        @CustomType.Setter
        public Builder pageSize(@Nullable Integer pageSize) {

            this.pageSize = pageSize;
            return this;
        }
        @CustomType.Setter
        public Builder products(List<GetProvisionedProductsProduct> products) {
            if (products == null) {
              throw new MissingRequiredPropertyException("GetProvisionedProductsResult", "products");
            }
            this.products = products;
            return this;
        }
        public Builder products(GetProvisionedProductsProduct... products) {
            return products(List.of(products));
        }
        @CustomType.Setter
        public Builder provisionedProducts(List<GetProvisionedProductsProvisionedProduct> provisionedProducts) {
            if (provisionedProducts == null) {
              throw new MissingRequiredPropertyException("GetProvisionedProductsResult", "provisionedProducts");
            }
            this.provisionedProducts = provisionedProducts;
            return this;
        }
        public Builder provisionedProducts(GetProvisionedProductsProvisionedProduct... provisionedProducts) {
            return provisionedProducts(List.of(provisionedProducts));
        }
        @CustomType.Setter
        public Builder sortBy(@Nullable String sortBy) {

            this.sortBy = sortBy;
            return this;
        }
        @CustomType.Setter
        public Builder sortOrder(@Nullable String sortOrder) {

            this.sortOrder = sortOrder;
            return this;
        }
        public GetProvisionedProductsResult build() {
            final var _resultValue = new GetProvisionedProductsResult();
            _resultValue.accessLevelFilter = accessLevelFilter;
            _resultValue.enableDetails = enableDetails;
            _resultValue.id = id;
            _resultValue.ids = ids;
            _resultValue.nameRegex = nameRegex;
            _resultValue.names = names;
            _resultValue.outputFile = outputFile;
            _resultValue.pageNumber = pageNumber;
            _resultValue.pageSize = pageSize;
            _resultValue.products = products;
            _resultValue.provisionedProducts = provisionedProducts;
            _resultValue.sortBy = sortBy;
            _resultValue.sortOrder = sortOrder;
            return _resultValue;
        }
    }
}
