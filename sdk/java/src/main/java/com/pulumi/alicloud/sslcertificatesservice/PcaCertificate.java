// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.sslcertificatesservice;

import com.pulumi.alicloud.Utilities;
import com.pulumi.alicloud.sslcertificatesservice.PcaCertificateArgs;
import com.pulumi.alicloud.sslcertificatesservice.inputs.PcaCertificateState;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.Integer;
import java.lang.String;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Provides a SSL Certificates Pca Certificate resource.
 * 
 * For information about SSL Certificates Pca Certificate and how to use it, see [What is Pca Certificate](https://next.api.alibabacloud.com/document/cas/2020-06-30/CreateRootCACertificate).
 * 
 * &gt; **NOTE:** Available since v1.257.0.
 * 
 * ## Example Usage
 * 
 * Basic Usage
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.alicloud.sslcertificatesservice.PcaCertificate;
 * import com.pulumi.alicloud.sslcertificatesservice.PcaCertificateArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var default_ = new PcaCertificate("default", PcaCertificateArgs.builder()
 *             .organization("a")
 *             .years(1)
 *             .locality("a")
 *             .organizationUnit("a")
 *             .state("a")
 *             .countryCode("cn")
 *             .commonName("cbc.certqa.cn")
 *             .algorithm("RSA_2048")
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * 
 * ## Import
 * 
 * SSL Certificates Pca Certificate can be imported using the id, e.g.
 * 
 * ```sh
 * $ pulumi import alicloud:sslcertificatesservice/pcaCertificate:PcaCertificate example &lt;id&gt;
 * ```
 * 
 */
@ResourceType(type="alicloud:sslcertificatesservice/pcaCertificate:PcaCertificate")
public class PcaCertificate extends com.pulumi.resources.CustomResource {
    /**
     * The key algorithm type of the root CA certificate. The key algorithm is expressed using the &#39;_&lt; key length&gt;&#39; format. Value:
     * - `RSA_1024`: The corresponding signature algorithm is Sha256WithRSA.
     * - `RSA_2048`: The corresponding signature algorithm is Sha256WithRSA.
     * - `RSA_4096`: The corresponding signature algorithm is Sha256WithRSA.
     * - `ECC_256`: The signature algorithm is Sha256WithECDSA.
     * - `ECC_384`: The corresponding signature algorithm is Sha256WithECDSA.
     * - `ECC_512`: The signature algorithm is Sha256WithECDSA.
     * - `SM2_256`: The corresponding signature algorithm is SM3WithSM2.
     *   The encryption algorithm of the root CA certificate must be the same as the **certificate algorithm** of the private Root CA you purchased. Example: If the **certificate algorithm** selected when you purchase a private Root CA is `RSA`, the key algorithm of the root CA certificate must be **RSA\_1024**, **RSA\_2048**, or **RSA\_4096**.
     * 
     */
    @Export(name="algorithm", refs={String.class}, tree="[0]")
    private Output<String> algorithm;

    /**
     * @return The key algorithm type of the root CA certificate. The key algorithm is expressed using the &#39;_&lt; key length&gt;&#39; format. Value:
     * - `RSA_1024`: The corresponding signature algorithm is Sha256WithRSA.
     * - `RSA_2048`: The corresponding signature algorithm is Sha256WithRSA.
     * - `RSA_4096`: The corresponding signature algorithm is Sha256WithRSA.
     * - `ECC_256`: The signature algorithm is Sha256WithECDSA.
     * - `ECC_384`: The corresponding signature algorithm is Sha256WithECDSA.
     * - `ECC_512`: The signature algorithm is Sha256WithECDSA.
     * - `SM2_256`: The corresponding signature algorithm is SM3WithSM2.
     *   The encryption algorithm of the root CA certificate must be the same as the **certificate algorithm** of the private Root CA you purchased. Example: If the **certificate algorithm** selected when you purchase a private Root CA is `RSA`, the key algorithm of the root CA certificate must be **RSA\_1024**, **RSA\_2048**, or **RSA\_4096**.
     * 
     */
    public Output<String> algorithm() {
        return this.algorithm;
    }
    /**
     * The common name or abbreviation of the organization. Support the use of Chinese, English characters.
     * 
     */
    @Export(name="commonName", refs={String.class}, tree="[0]")
    private Output<String> commonName;

    /**
     * @return The common name or abbreviation of the organization. Support the use of Chinese, English characters.
     * 
     */
    public Output<String> commonName() {
        return this.commonName;
    }
    /**
     * The code of the country or region in which the organization is located, using a two-digit capital abbreviation. For example, `CN` represents China and `US` represents the United States.
     * 
     */
    @Export(name="countryCode", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> countryCode;

    /**
     * @return The code of the country or region in which the organization is located, using a two-digit capital abbreviation. For example, `CN` represents China and `US` represents the United States.
     * 
     */
    public Output<Optional<String>> countryCode() {
        return Codegen.optional(this.countryCode);
    }
    /**
     * Name of the city where the organization is located. Support the use of Chinese, English characters.
     * 
     */
    @Export(name="locality", refs={String.class}, tree="[0]")
    private Output<String> locality;

    /**
     * @return Name of the city where the organization is located. Support the use of Chinese, English characters.
     * 
     */
    public Output<String> locality() {
        return this.locality;
    }
    /**
     * The name of the organization (corresponding to your enterprise or company) associated with the root CA certificate. Support the use of Chinese, English characters.
     * 
     */
    @Export(name="organization", refs={String.class}, tree="[0]")
    private Output<String> organization;

    /**
     * @return The name of the organization (corresponding to your enterprise or company) associated with the root CA certificate. Support the use of Chinese, English characters.
     * 
     */
    public Output<String> organization() {
        return this.organization;
    }
    /**
     * The name of the department or branch under the organization. Support the use of Chinese, English characters.
     * 
     */
    @Export(name="organizationUnit", refs={String.class}, tree="[0]")
    private Output<String> organizationUnit;

    /**
     * @return The name of the department or branch under the organization. Support the use of Chinese, English characters.
     * 
     */
    public Output<String> organizationUnit() {
        return this.organizationUnit;
    }
    /**
     * The name of the province, municipality, or autonomous region in which the organization is located. Support the use of Chinese, English characters.
     * Name of the province or state where the organization is located. Support the use of Chinese, English characters.
     * 
     */
    @Export(name="state", refs={String.class}, tree="[0]")
    private Output<String> state;

    /**
     * @return The name of the province, municipality, or autonomous region in which the organization is located. Support the use of Chinese, English characters.
     * Name of the province or state where the organization is located. Support the use of Chinese, English characters.
     * 
     */
    public Output<String> state() {
        return this.state;
    }
    /**
     * The status of the CA certificate.
     * 
     */
    @Export(name="status", refs={String.class}, tree="[0]")
    private Output<String> status;

    /**
     * @return The status of the CA certificate.
     * 
     */
    public Output<String> status() {
        return this.status;
    }
    /**
     * The validity period of the root CA certificate, in years.
     * &gt; **NOTE:**  It is recommended to set to `5` to `10` years.
     * 
     */
    @Export(name="years", refs={Integer.class}, tree="[0]")
    private Output<Integer> years;

    /**
     * @return The validity period of the root CA certificate, in years.
     * &gt; **NOTE:**  It is recommended to set to `5` to `10` years.
     * 
     */
    public Output<Integer> years() {
        return this.years;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public PcaCertificate(java.lang.String name) {
        this(name, PcaCertificateArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public PcaCertificate(java.lang.String name, PcaCertificateArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public PcaCertificate(java.lang.String name, PcaCertificateArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("alicloud:sslcertificatesservice/pcaCertificate:PcaCertificate", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private PcaCertificate(java.lang.String name, Output<java.lang.String> id, @Nullable PcaCertificateState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("alicloud:sslcertificatesservice/pcaCertificate:PcaCertificate", name, state, makeResourceOptions(options, id), false);
    }

    private static PcaCertificateArgs makeArgs(PcaCertificateArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? PcaCertificateArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static PcaCertificate get(java.lang.String name, Output<java.lang.String> id, @Nullable PcaCertificateState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new PcaCertificate(name, id, state, options);
    }
}
