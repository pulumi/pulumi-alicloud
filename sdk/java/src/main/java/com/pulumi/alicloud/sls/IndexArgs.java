// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.sls;

import com.pulumi.alicloud.sls.inputs.IndexLineArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class IndexArgs extends com.pulumi.resources.ResourceArgs {

    public static final IndexArgs Empty = new IndexArgs();

    /**
     * Field index
     * 
     */
    @Import(name="keys")
    private @Nullable Output<String> keys;

    /**
     * @return Field index
     * 
     */
    public Optional<Output<String>> keys() {
        return Optional.ofNullable(this.keys);
    }

    /**
     * Full-text index See `line` below.
     * 
     */
    @Import(name="line")
    private @Nullable Output<IndexLineArgs> line;

    /**
     * @return Full-text index See `line` below.
     * 
     */
    public Optional<Output<IndexLineArgs>> line() {
        return Optional.ofNullable(this.line);
    }

    /**
     * Whether log clustering is enabled
     * 
     */
    @Import(name="logReduce")
    private @Nullable Output<Boolean> logReduce;

    /**
     * @return Whether log clustering is enabled
     * 
     */
    public Optional<Output<Boolean>> logReduce() {
        return Optional.ofNullable(this.logReduce);
    }

    /**
     * The blacklist of the cluster fields of log clustering is filtered only when log clustering is enabled.
     * 
     */
    @Import(name="logReduceBlackLists")
    private @Nullable Output<List<String>> logReduceBlackLists;

    /**
     * @return The blacklist of the cluster fields of log clustering is filtered only when log clustering is enabled.
     * 
     */
    public Optional<Output<List<String>>> logReduceBlackLists() {
        return Optional.ofNullable(this.logReduceBlackLists);
    }

    /**
     * The whitelist of the cluster fields for log clustering. This filter is valid only when log clustering is enabled.
     * 
     */
    @Import(name="logReduceWhiteLists")
    private @Nullable Output<List<String>> logReduceWhiteLists;

    /**
     * @return The whitelist of the cluster fields for log clustering. This filter is valid only when log clustering is enabled.
     * 
     */
    public Optional<Output<List<String>>> logReduceWhiteLists() {
        return Optional.ofNullable(this.logReduceWhiteLists);
    }

    /**
     * Logstore name
     * 
     */
    @Import(name="logstoreName", required=true)
    private Output<String> logstoreName;

    /**
     * @return Logstore name
     * 
     */
    public Output<String> logstoreName() {
        return this.logstoreName;
    }

    /**
     * Maximum length of statistical field
     * 
     */
    @Import(name="maxTextLen")
    private @Nullable Output<Integer> maxTextLen;

    /**
     * @return Maximum length of statistical field
     * 
     */
    public Optional<Output<Integer>> maxTextLen() {
        return Optional.ofNullable(this.maxTextLen);
    }

    /**
     * Project name
     * 
     */
    @Import(name="projectName", required=true)
    private Output<String> projectName;

    /**
     * @return Project name
     * 
     */
    public Output<String> projectName() {
        return this.projectName;
    }

    private IndexArgs() {}

    private IndexArgs(IndexArgs $) {
        this.keys = $.keys;
        this.line = $.line;
        this.logReduce = $.logReduce;
        this.logReduceBlackLists = $.logReduceBlackLists;
        this.logReduceWhiteLists = $.logReduceWhiteLists;
        this.logstoreName = $.logstoreName;
        this.maxTextLen = $.maxTextLen;
        this.projectName = $.projectName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(IndexArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private IndexArgs $;

        public Builder() {
            $ = new IndexArgs();
        }

        public Builder(IndexArgs defaults) {
            $ = new IndexArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param keys Field index
         * 
         * @return builder
         * 
         */
        public Builder keys(@Nullable Output<String> keys) {
            $.keys = keys;
            return this;
        }

        /**
         * @param keys Field index
         * 
         * @return builder
         * 
         */
        public Builder keys(String keys) {
            return keys(Output.of(keys));
        }

        /**
         * @param line Full-text index See `line` below.
         * 
         * @return builder
         * 
         */
        public Builder line(@Nullable Output<IndexLineArgs> line) {
            $.line = line;
            return this;
        }

        /**
         * @param line Full-text index See `line` below.
         * 
         * @return builder
         * 
         */
        public Builder line(IndexLineArgs line) {
            return line(Output.of(line));
        }

        /**
         * @param logReduce Whether log clustering is enabled
         * 
         * @return builder
         * 
         */
        public Builder logReduce(@Nullable Output<Boolean> logReduce) {
            $.logReduce = logReduce;
            return this;
        }

        /**
         * @param logReduce Whether log clustering is enabled
         * 
         * @return builder
         * 
         */
        public Builder logReduce(Boolean logReduce) {
            return logReduce(Output.of(logReduce));
        }

        /**
         * @param logReduceBlackLists The blacklist of the cluster fields of log clustering is filtered only when log clustering is enabled.
         * 
         * @return builder
         * 
         */
        public Builder logReduceBlackLists(@Nullable Output<List<String>> logReduceBlackLists) {
            $.logReduceBlackLists = logReduceBlackLists;
            return this;
        }

        /**
         * @param logReduceBlackLists The blacklist of the cluster fields of log clustering is filtered only when log clustering is enabled.
         * 
         * @return builder
         * 
         */
        public Builder logReduceBlackLists(List<String> logReduceBlackLists) {
            return logReduceBlackLists(Output.of(logReduceBlackLists));
        }

        /**
         * @param logReduceBlackLists The blacklist of the cluster fields of log clustering is filtered only when log clustering is enabled.
         * 
         * @return builder
         * 
         */
        public Builder logReduceBlackLists(String... logReduceBlackLists) {
            return logReduceBlackLists(List.of(logReduceBlackLists));
        }

        /**
         * @param logReduceWhiteLists The whitelist of the cluster fields for log clustering. This filter is valid only when log clustering is enabled.
         * 
         * @return builder
         * 
         */
        public Builder logReduceWhiteLists(@Nullable Output<List<String>> logReduceWhiteLists) {
            $.logReduceWhiteLists = logReduceWhiteLists;
            return this;
        }

        /**
         * @param logReduceWhiteLists The whitelist of the cluster fields for log clustering. This filter is valid only when log clustering is enabled.
         * 
         * @return builder
         * 
         */
        public Builder logReduceWhiteLists(List<String> logReduceWhiteLists) {
            return logReduceWhiteLists(Output.of(logReduceWhiteLists));
        }

        /**
         * @param logReduceWhiteLists The whitelist of the cluster fields for log clustering. This filter is valid only when log clustering is enabled.
         * 
         * @return builder
         * 
         */
        public Builder logReduceWhiteLists(String... logReduceWhiteLists) {
            return logReduceWhiteLists(List.of(logReduceWhiteLists));
        }

        /**
         * @param logstoreName Logstore name
         * 
         * @return builder
         * 
         */
        public Builder logstoreName(Output<String> logstoreName) {
            $.logstoreName = logstoreName;
            return this;
        }

        /**
         * @param logstoreName Logstore name
         * 
         * @return builder
         * 
         */
        public Builder logstoreName(String logstoreName) {
            return logstoreName(Output.of(logstoreName));
        }

        /**
         * @param maxTextLen Maximum length of statistical field
         * 
         * @return builder
         * 
         */
        public Builder maxTextLen(@Nullable Output<Integer> maxTextLen) {
            $.maxTextLen = maxTextLen;
            return this;
        }

        /**
         * @param maxTextLen Maximum length of statistical field
         * 
         * @return builder
         * 
         */
        public Builder maxTextLen(Integer maxTextLen) {
            return maxTextLen(Output.of(maxTextLen));
        }

        /**
         * @param projectName Project name
         * 
         * @return builder
         * 
         */
        public Builder projectName(Output<String> projectName) {
            $.projectName = projectName;
            return this;
        }

        /**
         * @param projectName Project name
         * 
         * @return builder
         * 
         */
        public Builder projectName(String projectName) {
            return projectName(Output.of(projectName));
        }

        public IndexArgs build() {
            if ($.logstoreName == null) {
                throw new MissingRequiredPropertyException("IndexArgs", "logstoreName");
            }
            if ($.projectName == null) {
                throw new MissingRequiredPropertyException("IndexArgs", "projectName");
            }
            return $;
        }
    }

}
