// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.alb.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ServerGroupHealthCheckConfig {
    /**
     * @return The HTTP status codes that are used to indicate whether the backend server passes the health check. Valid values:
     * - If `health_check_protocol` is set to `HTTP` or `HTTPS`. Valid values: `http_2xx`, `http_3xx`, `http_4xx`, and `http_5xx`. Default value: `http_2xx`.
     * - If `health_check_protocol` is set to `gRPC`. Valid values: `0` to `99`. Default value: `0`.
     * 
     */
    private @Nullable List<String> healthCheckCodes;
    /**
     * @return The backend port that is used for health checks. Default value: `0`. Valid values: `0` to `65535`. A value of 0 indicates that a backend server port is used for health checks.
     * 
     */
    private @Nullable Integer healthCheckConnectPort;
    /**
     * @return Specifies whether to enable the health check feature. Valid values: `true`, `false`.
     * 
     */
    private Boolean healthCheckEnabled;
    /**
     * @return The domain name that is used for health checks.
     * 
     */
    private @Nullable String healthCheckHost;
    /**
     * @return The version of the HTTP protocol. Default value: `HTTP1.1`. Valid values: `HTTP1.0` and `HTTP1.1`. **NOTE:** This parameter takes effect only when `health_check_protocol` is set to `HTTP` or `HTTPS`.
     * 
     */
    private @Nullable String healthCheckHttpVersion;
    /**
     * @return The interval at which health checks are performed. Unit: seconds. Default value: `2`. Valid values: `1` to `50`.
     * 
     */
    private @Nullable Integer healthCheckInterval;
    /**
     * @return The HTTP method that is used for health checks. Default value: `GET`. Valid values: `GET`, `POST`, `HEAD`. **NOTE:** This parameter takes effect only when `health_check_protocol` is set to `HTTP`, `HTTPS`, or `gRPC`. From version 1.215.0, `health_check_method` can be set to `POST`.
     * 
     */
    private @Nullable String healthCheckMethod;
    /**
     * @return The path that is used for health checks. **NOTE:** This parameter takes effect only when `health_check_protocol` is set to `HTTP` or `HTTPS`.
     * 
     */
    private @Nullable String healthCheckPath;
    /**
     * @return The protocol that is used for health checks. Valid values: `HTTP`, `HTTPS`, `TCP` and `gRPC`.
     * 
     */
    private @Nullable String healthCheckProtocol;
    /**
     * @return The timeout period for a health check response. If a backend Elastic Compute Service (ECS) instance does not send an expected response within the specified period of time, the ECS instance is considered unhealthy. Unit: seconds. Default value: `5`. Valid values: `1` to `300`. **NOTE:** If the value of `health_check_timeout` is smaller than the value of `health_check_interval`, the value of `health_check_timeout` is ignored and the value of `health_check_interval` is used.
     * 
     */
    private @Nullable Integer healthCheckTimeout;
    /**
     * @return The number of times that an unhealthy backend server must consecutively pass health checks before it is declared healthy. Default value: `3`. Valid values: `2` to `10`.
     * 
     */
    private @Nullable Integer healthyThreshold;
    /**
     * @return The number of times that a healthy backend server must consecutively fail health checks before it is declared unhealthy. Default value: `3`. Valid values: `2` to `10`.
     * 
     */
    private @Nullable Integer unhealthyThreshold;

    private ServerGroupHealthCheckConfig() {}
    /**
     * @return The HTTP status codes that are used to indicate whether the backend server passes the health check. Valid values:
     * - If `health_check_protocol` is set to `HTTP` or `HTTPS`. Valid values: `http_2xx`, `http_3xx`, `http_4xx`, and `http_5xx`. Default value: `http_2xx`.
     * - If `health_check_protocol` is set to `gRPC`. Valid values: `0` to `99`. Default value: `0`.
     * 
     */
    public List<String> healthCheckCodes() {
        return this.healthCheckCodes == null ? List.of() : this.healthCheckCodes;
    }
    /**
     * @return The backend port that is used for health checks. Default value: `0`. Valid values: `0` to `65535`. A value of 0 indicates that a backend server port is used for health checks.
     * 
     */
    public Optional<Integer> healthCheckConnectPort() {
        return Optional.ofNullable(this.healthCheckConnectPort);
    }
    /**
     * @return Specifies whether to enable the health check feature. Valid values: `true`, `false`.
     * 
     */
    public Boolean healthCheckEnabled() {
        return this.healthCheckEnabled;
    }
    /**
     * @return The domain name that is used for health checks.
     * 
     */
    public Optional<String> healthCheckHost() {
        return Optional.ofNullable(this.healthCheckHost);
    }
    /**
     * @return The version of the HTTP protocol. Default value: `HTTP1.1`. Valid values: `HTTP1.0` and `HTTP1.1`. **NOTE:** This parameter takes effect only when `health_check_protocol` is set to `HTTP` or `HTTPS`.
     * 
     */
    public Optional<String> healthCheckHttpVersion() {
        return Optional.ofNullable(this.healthCheckHttpVersion);
    }
    /**
     * @return The interval at which health checks are performed. Unit: seconds. Default value: `2`. Valid values: `1` to `50`.
     * 
     */
    public Optional<Integer> healthCheckInterval() {
        return Optional.ofNullable(this.healthCheckInterval);
    }
    /**
     * @return The HTTP method that is used for health checks. Default value: `GET`. Valid values: `GET`, `POST`, `HEAD`. **NOTE:** This parameter takes effect only when `health_check_protocol` is set to `HTTP`, `HTTPS`, or `gRPC`. From version 1.215.0, `health_check_method` can be set to `POST`.
     * 
     */
    public Optional<String> healthCheckMethod() {
        return Optional.ofNullable(this.healthCheckMethod);
    }
    /**
     * @return The path that is used for health checks. **NOTE:** This parameter takes effect only when `health_check_protocol` is set to `HTTP` or `HTTPS`.
     * 
     */
    public Optional<String> healthCheckPath() {
        return Optional.ofNullable(this.healthCheckPath);
    }
    /**
     * @return The protocol that is used for health checks. Valid values: `HTTP`, `HTTPS`, `TCP` and `gRPC`.
     * 
     */
    public Optional<String> healthCheckProtocol() {
        return Optional.ofNullable(this.healthCheckProtocol);
    }
    /**
     * @return The timeout period for a health check response. If a backend Elastic Compute Service (ECS) instance does not send an expected response within the specified period of time, the ECS instance is considered unhealthy. Unit: seconds. Default value: `5`. Valid values: `1` to `300`. **NOTE:** If the value of `health_check_timeout` is smaller than the value of `health_check_interval`, the value of `health_check_timeout` is ignored and the value of `health_check_interval` is used.
     * 
     */
    public Optional<Integer> healthCheckTimeout() {
        return Optional.ofNullable(this.healthCheckTimeout);
    }
    /**
     * @return The number of times that an unhealthy backend server must consecutively pass health checks before it is declared healthy. Default value: `3`. Valid values: `2` to `10`.
     * 
     */
    public Optional<Integer> healthyThreshold() {
        return Optional.ofNullable(this.healthyThreshold);
    }
    /**
     * @return The number of times that a healthy backend server must consecutively fail health checks before it is declared unhealthy. Default value: `3`. Valid values: `2` to `10`.
     * 
     */
    public Optional<Integer> unhealthyThreshold() {
        return Optional.ofNullable(this.unhealthyThreshold);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ServerGroupHealthCheckConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<String> healthCheckCodes;
        private @Nullable Integer healthCheckConnectPort;
        private Boolean healthCheckEnabled;
        private @Nullable String healthCheckHost;
        private @Nullable String healthCheckHttpVersion;
        private @Nullable Integer healthCheckInterval;
        private @Nullable String healthCheckMethod;
        private @Nullable String healthCheckPath;
        private @Nullable String healthCheckProtocol;
        private @Nullable Integer healthCheckTimeout;
        private @Nullable Integer healthyThreshold;
        private @Nullable Integer unhealthyThreshold;
        public Builder() {}
        public Builder(ServerGroupHealthCheckConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.healthCheckCodes = defaults.healthCheckCodes;
    	      this.healthCheckConnectPort = defaults.healthCheckConnectPort;
    	      this.healthCheckEnabled = defaults.healthCheckEnabled;
    	      this.healthCheckHost = defaults.healthCheckHost;
    	      this.healthCheckHttpVersion = defaults.healthCheckHttpVersion;
    	      this.healthCheckInterval = defaults.healthCheckInterval;
    	      this.healthCheckMethod = defaults.healthCheckMethod;
    	      this.healthCheckPath = defaults.healthCheckPath;
    	      this.healthCheckProtocol = defaults.healthCheckProtocol;
    	      this.healthCheckTimeout = defaults.healthCheckTimeout;
    	      this.healthyThreshold = defaults.healthyThreshold;
    	      this.unhealthyThreshold = defaults.unhealthyThreshold;
        }

        @CustomType.Setter
        public Builder healthCheckCodes(@Nullable List<String> healthCheckCodes) {

            this.healthCheckCodes = healthCheckCodes;
            return this;
        }
        public Builder healthCheckCodes(String... healthCheckCodes) {
            return healthCheckCodes(List.of(healthCheckCodes));
        }
        @CustomType.Setter
        public Builder healthCheckConnectPort(@Nullable Integer healthCheckConnectPort) {

            this.healthCheckConnectPort = healthCheckConnectPort;
            return this;
        }
        @CustomType.Setter
        public Builder healthCheckEnabled(Boolean healthCheckEnabled) {
            if (healthCheckEnabled == null) {
              throw new MissingRequiredPropertyException("ServerGroupHealthCheckConfig", "healthCheckEnabled");
            }
            this.healthCheckEnabled = healthCheckEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder healthCheckHost(@Nullable String healthCheckHost) {

            this.healthCheckHost = healthCheckHost;
            return this;
        }
        @CustomType.Setter
        public Builder healthCheckHttpVersion(@Nullable String healthCheckHttpVersion) {

            this.healthCheckHttpVersion = healthCheckHttpVersion;
            return this;
        }
        @CustomType.Setter
        public Builder healthCheckInterval(@Nullable Integer healthCheckInterval) {

            this.healthCheckInterval = healthCheckInterval;
            return this;
        }
        @CustomType.Setter
        public Builder healthCheckMethod(@Nullable String healthCheckMethod) {

            this.healthCheckMethod = healthCheckMethod;
            return this;
        }
        @CustomType.Setter
        public Builder healthCheckPath(@Nullable String healthCheckPath) {

            this.healthCheckPath = healthCheckPath;
            return this;
        }
        @CustomType.Setter
        public Builder healthCheckProtocol(@Nullable String healthCheckProtocol) {

            this.healthCheckProtocol = healthCheckProtocol;
            return this;
        }
        @CustomType.Setter
        public Builder healthCheckTimeout(@Nullable Integer healthCheckTimeout) {

            this.healthCheckTimeout = healthCheckTimeout;
            return this;
        }
        @CustomType.Setter
        public Builder healthyThreshold(@Nullable Integer healthyThreshold) {

            this.healthyThreshold = healthyThreshold;
            return this;
        }
        @CustomType.Setter
        public Builder unhealthyThreshold(@Nullable Integer unhealthyThreshold) {

            this.unhealthyThreshold = unhealthyThreshold;
            return this;
        }
        public ServerGroupHealthCheckConfig build() {
            final var _resultValue = new ServerGroupHealthCheckConfig();
            _resultValue.healthCheckCodes = healthCheckCodes;
            _resultValue.healthCheckConnectPort = healthCheckConnectPort;
            _resultValue.healthCheckEnabled = healthCheckEnabled;
            _resultValue.healthCheckHost = healthCheckHost;
            _resultValue.healthCheckHttpVersion = healthCheckHttpVersion;
            _resultValue.healthCheckInterval = healthCheckInterval;
            _resultValue.healthCheckMethod = healthCheckMethod;
            _resultValue.healthCheckPath = healthCheckPath;
            _resultValue.healthCheckProtocol = healthCheckProtocol;
            _resultValue.healthCheckTimeout = healthCheckTimeout;
            _resultValue.healthyThreshold = healthyThreshold;
            _resultValue.unhealthyThreshold = unhealthyThreshold;
            return _resultValue;
        }
    }
}
