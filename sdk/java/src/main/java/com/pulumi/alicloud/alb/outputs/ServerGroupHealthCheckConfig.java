// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.alb.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ServerGroupHealthCheckConfig {
    /**
     * @return The status code for a successful health check
     * 
     */
    private @Nullable List<String> healthCheckCodes;
    /**
     * @return The backend port that is used for health checks.
     * 
     * Valid values: `0` to `65535`.
     * 
     * If you set the value to `0`, the backend port is used for health checks.
     * 
     * &gt; **NOTE:**   This parameter takes effect only if you set `HealthCheckEnabled` to `true`.
     * 
     */
    private @Nullable Integer healthCheckConnectPort;
    /**
     * @return Specifies whether to enable the health check feature. Valid values:
     * 
     */
    private Boolean healthCheckEnabled;
    /**
     * @return The domain name that is used for health checks.
     * 
     * *   **Backend Server Internal IP** (default): Use the internal IP address of backend servers as the health check domain name.
     * 
     * *   **Custom Domain Name**: Enter a domain name.
     * 
     * *   The domain name must be 1 to 80 characters in length.
     * *   The domain name can contain lowercase letters, digits, hyphens (-), and periods (.).
     * *   The domain name must contain at least one period (.) but cannot start or end with a period (.).
     * *   The rightmost domain label of the domain name can contain only letters, and cannot contain digits or hyphens (-).
     * *   The domain name cannot start or end with a hyphen (-).
     * 
     * &gt; **NOTE:**   This parameter takes effect only if `HealthCheckProtocol` is set to `HTTP`, `HTTPS`, or `gRPC`.
     * 
     */
    private @Nullable String healthCheckHost;
    /**
     * @return The HTTP version that is used for health checks. Valid values:
     * 
     * *   **HTTP1.0**
     * 
     * *   **HTTP1.1**
     * 
     * &gt; **NOTE:**   This parameter takes effect only if you set `HealthCheckEnabled` to true and `HealthCheckProtocol` to `HTTP` or `HTTPS`.
     * 
     */
    private @Nullable String healthCheckHttpVersion;
    /**
     * @return The interval at which health checks are performed. Unit: seconds.
     * 
     * Valid values: `1` to `50`.
     * 
     * &gt; **NOTE:**   This parameter takes effect only if you set `HealthCheckEnabled` to `true`.
     * 
     */
    private @Nullable Integer healthCheckInterval;
    /**
     * @return The HTTP method that is used for health checks. Valid values:
     * 
     * *   `GET`: If the length of a response exceeds 8 KB, the response is truncated. However, the health check result is not affected.
     * 
     * *   `POST`: gRPC health checks use the POST method by default.
     * 
     * *   `HEAD`: HTTP and HTTPS health checks use the HEAD method by default.
     * 
     * &gt; **NOTE:**   This parameter takes effect only if you set `HealthCheckEnabled` to true and `HealthCheckProtocol` to `HTTP`, `HTTPS`, or `gRPC`.
     * 
     */
    private @Nullable String healthCheckMethod;
    /**
     * @return The URL that is used for health checks.
     * 
     * The URL must be 1 to 80 characters in length, and can contain letters, digits, and the following special characters: `- / . % ? # &amp; =`. It can also contain the following extended characters: `_ ; ~ ! ( ) * [ ] {@literal @} $ ^ : &#39; , +`. The URL must start with a forward slash (`/`).
     * 
     * &gt; **NOTE:**   This parameter takes effect only if you set `HealthCheckEnabled` to `true` and `HealthCheckProtocol` to `HTTP` or `HTTPS`.
     * 
     */
    private @Nullable String healthCheckPath;
    /**
     * @return The protocol that is used for health checks. Valid values:
     * 
     * - `HTTP`: HTTP health checks simulate browser behaviors by sending HEAD or GET requests to probe the availability of backend servers.
     * - `HTTPS`: HTTPS health checks simulate browser behaviors by sending HEAD or GET requests to probe the availability of backend servers. HTTPS provides higher security than HTTP because HTTPS supports data encryption.
     * - `TCP`: TCP health checks send TCP SYN packets to a backend server to probe the availability of backend servers.
     * - `gRPC`: gRPC health checks send POST or GET requests to a backend server to check whether the backend server is healthy.
     * 
     */
    private @Nullable String healthCheckProtocol;
    /**
     * @return The timeout period of a health check response. If a backend ECS instance does not respond within the specified timeout period, the ECS instance fails the health check. Unit: seconds.
     * 
     * Valid values: `1` to `300`.
     * 
     * &gt; **NOTE:**   This parameter takes effect only if you set `HealthCheckEnabled` to `true`.
     * 
     */
    private @Nullable Integer healthCheckTimeout;
    /**
     * @return The number of times that an unhealthy backend server must consecutively pass health checks before it is declared healthy. In this case, the health check status of the backend server changes from `fail` to `success`.
     * 
     * Valid values: `2` to `10`.
     * 
     * Default value: `3`.
     * 
     */
    private @Nullable Integer healthyThreshold;
    /**
     * @return The number of times that a healthy backend server must consecutively fail health checks before it is declared unhealthy. In this case, the health check status of the backend server changes from `success` to `fail`.
     * 
     * Valid values: `2` to `10`.
     * 
     * Default value: `3`.
     * 
     */
    private @Nullable Integer unhealthyThreshold;

    private ServerGroupHealthCheckConfig() {}
    /**
     * @return The status code for a successful health check
     * 
     */
    public List<String> healthCheckCodes() {
        return this.healthCheckCodes == null ? List.of() : this.healthCheckCodes;
    }
    /**
     * @return The backend port that is used for health checks.
     * 
     * Valid values: `0` to `65535`.
     * 
     * If you set the value to `0`, the backend port is used for health checks.
     * 
     * &gt; **NOTE:**   This parameter takes effect only if you set `HealthCheckEnabled` to `true`.
     * 
     */
    public Optional<Integer> healthCheckConnectPort() {
        return Optional.ofNullable(this.healthCheckConnectPort);
    }
    /**
     * @return Specifies whether to enable the health check feature. Valid values:
     * 
     */
    public Boolean healthCheckEnabled() {
        return this.healthCheckEnabled;
    }
    /**
     * @return The domain name that is used for health checks.
     * 
     * *   **Backend Server Internal IP** (default): Use the internal IP address of backend servers as the health check domain name.
     * 
     * *   **Custom Domain Name**: Enter a domain name.
     * 
     * *   The domain name must be 1 to 80 characters in length.
     * *   The domain name can contain lowercase letters, digits, hyphens (-), and periods (.).
     * *   The domain name must contain at least one period (.) but cannot start or end with a period (.).
     * *   The rightmost domain label of the domain name can contain only letters, and cannot contain digits or hyphens (-).
     * *   The domain name cannot start or end with a hyphen (-).
     * 
     * &gt; **NOTE:**   This parameter takes effect only if `HealthCheckProtocol` is set to `HTTP`, `HTTPS`, or `gRPC`.
     * 
     */
    public Optional<String> healthCheckHost() {
        return Optional.ofNullable(this.healthCheckHost);
    }
    /**
     * @return The HTTP version that is used for health checks. Valid values:
     * 
     * *   **HTTP1.0**
     * 
     * *   **HTTP1.1**
     * 
     * &gt; **NOTE:**   This parameter takes effect only if you set `HealthCheckEnabled` to true and `HealthCheckProtocol` to `HTTP` or `HTTPS`.
     * 
     */
    public Optional<String> healthCheckHttpVersion() {
        return Optional.ofNullable(this.healthCheckHttpVersion);
    }
    /**
     * @return The interval at which health checks are performed. Unit: seconds.
     * 
     * Valid values: `1` to `50`.
     * 
     * &gt; **NOTE:**   This parameter takes effect only if you set `HealthCheckEnabled` to `true`.
     * 
     */
    public Optional<Integer> healthCheckInterval() {
        return Optional.ofNullable(this.healthCheckInterval);
    }
    /**
     * @return The HTTP method that is used for health checks. Valid values:
     * 
     * *   `GET`: If the length of a response exceeds 8 KB, the response is truncated. However, the health check result is not affected.
     * 
     * *   `POST`: gRPC health checks use the POST method by default.
     * 
     * *   `HEAD`: HTTP and HTTPS health checks use the HEAD method by default.
     * 
     * &gt; **NOTE:**   This parameter takes effect only if you set `HealthCheckEnabled` to true and `HealthCheckProtocol` to `HTTP`, `HTTPS`, or `gRPC`.
     * 
     */
    public Optional<String> healthCheckMethod() {
        return Optional.ofNullable(this.healthCheckMethod);
    }
    /**
     * @return The URL that is used for health checks.
     * 
     * The URL must be 1 to 80 characters in length, and can contain letters, digits, and the following special characters: `- / . % ? # &amp; =`. It can also contain the following extended characters: `_ ; ~ ! ( ) * [ ] {@literal @} $ ^ : &#39; , +`. The URL must start with a forward slash (`/`).
     * 
     * &gt; **NOTE:**   This parameter takes effect only if you set `HealthCheckEnabled` to `true` and `HealthCheckProtocol` to `HTTP` or `HTTPS`.
     * 
     */
    public Optional<String> healthCheckPath() {
        return Optional.ofNullable(this.healthCheckPath);
    }
    /**
     * @return The protocol that is used for health checks. Valid values:
     * 
     * - `HTTP`: HTTP health checks simulate browser behaviors by sending HEAD or GET requests to probe the availability of backend servers.
     * - `HTTPS`: HTTPS health checks simulate browser behaviors by sending HEAD or GET requests to probe the availability of backend servers. HTTPS provides higher security than HTTP because HTTPS supports data encryption.
     * - `TCP`: TCP health checks send TCP SYN packets to a backend server to probe the availability of backend servers.
     * - `gRPC`: gRPC health checks send POST or GET requests to a backend server to check whether the backend server is healthy.
     * 
     */
    public Optional<String> healthCheckProtocol() {
        return Optional.ofNullable(this.healthCheckProtocol);
    }
    /**
     * @return The timeout period of a health check response. If a backend ECS instance does not respond within the specified timeout period, the ECS instance fails the health check. Unit: seconds.
     * 
     * Valid values: `1` to `300`.
     * 
     * &gt; **NOTE:**   This parameter takes effect only if you set `HealthCheckEnabled` to `true`.
     * 
     */
    public Optional<Integer> healthCheckTimeout() {
        return Optional.ofNullable(this.healthCheckTimeout);
    }
    /**
     * @return The number of times that an unhealthy backend server must consecutively pass health checks before it is declared healthy. In this case, the health check status of the backend server changes from `fail` to `success`.
     * 
     * Valid values: `2` to `10`.
     * 
     * Default value: `3`.
     * 
     */
    public Optional<Integer> healthyThreshold() {
        return Optional.ofNullable(this.healthyThreshold);
    }
    /**
     * @return The number of times that a healthy backend server must consecutively fail health checks before it is declared unhealthy. In this case, the health check status of the backend server changes from `success` to `fail`.
     * 
     * Valid values: `2` to `10`.
     * 
     * Default value: `3`.
     * 
     */
    public Optional<Integer> unhealthyThreshold() {
        return Optional.ofNullable(this.unhealthyThreshold);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ServerGroupHealthCheckConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<String> healthCheckCodes;
        private @Nullable Integer healthCheckConnectPort;
        private Boolean healthCheckEnabled;
        private @Nullable String healthCheckHost;
        private @Nullable String healthCheckHttpVersion;
        private @Nullable Integer healthCheckInterval;
        private @Nullable String healthCheckMethod;
        private @Nullable String healthCheckPath;
        private @Nullable String healthCheckProtocol;
        private @Nullable Integer healthCheckTimeout;
        private @Nullable Integer healthyThreshold;
        private @Nullable Integer unhealthyThreshold;
        public Builder() {}
        public Builder(ServerGroupHealthCheckConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.healthCheckCodes = defaults.healthCheckCodes;
    	      this.healthCheckConnectPort = defaults.healthCheckConnectPort;
    	      this.healthCheckEnabled = defaults.healthCheckEnabled;
    	      this.healthCheckHost = defaults.healthCheckHost;
    	      this.healthCheckHttpVersion = defaults.healthCheckHttpVersion;
    	      this.healthCheckInterval = defaults.healthCheckInterval;
    	      this.healthCheckMethod = defaults.healthCheckMethod;
    	      this.healthCheckPath = defaults.healthCheckPath;
    	      this.healthCheckProtocol = defaults.healthCheckProtocol;
    	      this.healthCheckTimeout = defaults.healthCheckTimeout;
    	      this.healthyThreshold = defaults.healthyThreshold;
    	      this.unhealthyThreshold = defaults.unhealthyThreshold;
        }

        @CustomType.Setter
        public Builder healthCheckCodes(@Nullable List<String> healthCheckCodes) {

            this.healthCheckCodes = healthCheckCodes;
            return this;
        }
        public Builder healthCheckCodes(String... healthCheckCodes) {
            return healthCheckCodes(List.of(healthCheckCodes));
        }
        @CustomType.Setter
        public Builder healthCheckConnectPort(@Nullable Integer healthCheckConnectPort) {

            this.healthCheckConnectPort = healthCheckConnectPort;
            return this;
        }
        @CustomType.Setter
        public Builder healthCheckEnabled(Boolean healthCheckEnabled) {
            if (healthCheckEnabled == null) {
              throw new MissingRequiredPropertyException("ServerGroupHealthCheckConfig", "healthCheckEnabled");
            }
            this.healthCheckEnabled = healthCheckEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder healthCheckHost(@Nullable String healthCheckHost) {

            this.healthCheckHost = healthCheckHost;
            return this;
        }
        @CustomType.Setter
        public Builder healthCheckHttpVersion(@Nullable String healthCheckHttpVersion) {

            this.healthCheckHttpVersion = healthCheckHttpVersion;
            return this;
        }
        @CustomType.Setter
        public Builder healthCheckInterval(@Nullable Integer healthCheckInterval) {

            this.healthCheckInterval = healthCheckInterval;
            return this;
        }
        @CustomType.Setter
        public Builder healthCheckMethod(@Nullable String healthCheckMethod) {

            this.healthCheckMethod = healthCheckMethod;
            return this;
        }
        @CustomType.Setter
        public Builder healthCheckPath(@Nullable String healthCheckPath) {

            this.healthCheckPath = healthCheckPath;
            return this;
        }
        @CustomType.Setter
        public Builder healthCheckProtocol(@Nullable String healthCheckProtocol) {

            this.healthCheckProtocol = healthCheckProtocol;
            return this;
        }
        @CustomType.Setter
        public Builder healthCheckTimeout(@Nullable Integer healthCheckTimeout) {

            this.healthCheckTimeout = healthCheckTimeout;
            return this;
        }
        @CustomType.Setter
        public Builder healthyThreshold(@Nullable Integer healthyThreshold) {

            this.healthyThreshold = healthyThreshold;
            return this;
        }
        @CustomType.Setter
        public Builder unhealthyThreshold(@Nullable Integer unhealthyThreshold) {

            this.unhealthyThreshold = unhealthyThreshold;
            return this;
        }
        public ServerGroupHealthCheckConfig build() {
            final var _resultValue = new ServerGroupHealthCheckConfig();
            _resultValue.healthCheckCodes = healthCheckCodes;
            _resultValue.healthCheckConnectPort = healthCheckConnectPort;
            _resultValue.healthCheckEnabled = healthCheckEnabled;
            _resultValue.healthCheckHost = healthCheckHost;
            _resultValue.healthCheckHttpVersion = healthCheckHttpVersion;
            _resultValue.healthCheckInterval = healthCheckInterval;
            _resultValue.healthCheckMethod = healthCheckMethod;
            _resultValue.healthCheckPath = healthCheckPath;
            _resultValue.healthCheckProtocol = healthCheckProtocol;
            _resultValue.healthCheckTimeout = healthCheckTimeout;
            _resultValue.healthyThreshold = healthyThreshold;
            _resultValue.unhealthyThreshold = unhealthyThreshold;
            return _resultValue;
        }
    }
}
