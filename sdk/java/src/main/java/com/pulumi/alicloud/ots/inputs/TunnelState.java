// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.ots.inputs;

import com.pulumi.alicloud.ots.inputs.TunnelChannelArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TunnelState extends com.pulumi.resources.ResourceArgs {

    public static final TunnelState Empty = new TunnelState();

    /**
     * The channels of OTS tunnel. Each element contains the following attributes:
     * 
     */
    @Import(name="channels")
    private @Nullable Output<List<TunnelChannelArgs>> channels;

    /**
     * @return The channels of OTS tunnel. Each element contains the following attributes:
     * 
     */
    public Optional<Output<List<TunnelChannelArgs>>> channels() {
        return Optional.ofNullable(this.channels);
    }

    /**
     * The creation time of the Tunnel.
     * 
     */
    @Import(name="createTime")
    private @Nullable Output<Integer> createTime;

    /**
     * @return The creation time of the Tunnel.
     * 
     */
    public Optional<Output<Integer>> createTime() {
        return Optional.ofNullable(this.createTime);
    }

    /**
     * Whether the tunnel has expired.
     * 
     */
    @Import(name="expired")
    private @Nullable Output<Boolean> expired;

    /**
     * @return Whether the tunnel has expired.
     * 
     */
    public Optional<Output<Boolean>> expired() {
        return Optional.ofNullable(this.expired);
    }

    /**
     * The name of the OTS instance in which table will located.
     * 
     */
    @Import(name="instanceName")
    private @Nullable Output<String> instanceName;

    /**
     * @return The name of the OTS instance in which table will located.
     * 
     */
    public Optional<Output<String>> instanceName() {
        return Optional.ofNullable(this.instanceName);
    }

    /**
     * The name of the OTS table. If changed, a new table would be created.
     * 
     */
    @Import(name="tableName")
    private @Nullable Output<String> tableName;

    /**
     * @return The name of the OTS table. If changed, a new table would be created.
     * 
     */
    public Optional<Output<String>> tableName() {
        return Optional.ofNullable(this.tableName);
    }

    /**
     * The tunnel id of the OTS which could not be changed.
     * 
     */
    @Import(name="tunnelId")
    private @Nullable Output<String> tunnelId;

    /**
     * @return The tunnel id of the OTS which could not be changed.
     * 
     */
    public Optional<Output<String>> tunnelId() {
        return Optional.ofNullable(this.tunnelId);
    }

    /**
     * The name of the OTS tunnel. If changed, a new tunnel would be created.
     * 
     */
    @Import(name="tunnelName")
    private @Nullable Output<String> tunnelName;

    /**
     * @return The name of the OTS tunnel. If changed, a new tunnel would be created.
     * 
     */
    public Optional<Output<String>> tunnelName() {
        return Optional.ofNullable(this.tunnelName);
    }

    /**
     * The latest consumption time of the tunnel, unix time in nanosecond.
     * 
     */
    @Import(name="tunnelRpo")
    private @Nullable Output<Integer> tunnelRpo;

    /**
     * @return The latest consumption time of the tunnel, unix time in nanosecond.
     * 
     */
    public Optional<Output<Integer>> tunnelRpo() {
        return Optional.ofNullable(this.tunnelRpo);
    }

    /**
     * The stage of OTS tunnel, valid values: `InitBaseDataAndStreamShard`, `ProcessBaseData`, `ProcessStream`.
     * 
     */
    @Import(name="tunnelStage")
    private @Nullable Output<String> tunnelStage;

    /**
     * @return The stage of OTS tunnel, valid values: `InitBaseDataAndStreamShard`, `ProcessBaseData`, `ProcessStream`.
     * 
     */
    public Optional<Output<String>> tunnelStage() {
        return Optional.ofNullable(this.tunnelStage);
    }

    /**
     * The type of the OTS tunnel. Only `BaseAndStream`, `BaseData` or `Stream` is allowed.
     * 
     */
    @Import(name="tunnelType")
    private @Nullable Output<String> tunnelType;

    /**
     * @return The type of the OTS tunnel. Only `BaseAndStream`, `BaseData` or `Stream` is allowed.
     * 
     */
    public Optional<Output<String>> tunnelType() {
        return Optional.ofNullable(this.tunnelType);
    }

    private TunnelState() {}

    private TunnelState(TunnelState $) {
        this.channels = $.channels;
        this.createTime = $.createTime;
        this.expired = $.expired;
        this.instanceName = $.instanceName;
        this.tableName = $.tableName;
        this.tunnelId = $.tunnelId;
        this.tunnelName = $.tunnelName;
        this.tunnelRpo = $.tunnelRpo;
        this.tunnelStage = $.tunnelStage;
        this.tunnelType = $.tunnelType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TunnelState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TunnelState $;

        public Builder() {
            $ = new TunnelState();
        }

        public Builder(TunnelState defaults) {
            $ = new TunnelState(Objects.requireNonNull(defaults));
        }

        /**
         * @param channels The channels of OTS tunnel. Each element contains the following attributes:
         * 
         * @return builder
         * 
         */
        public Builder channels(@Nullable Output<List<TunnelChannelArgs>> channels) {
            $.channels = channels;
            return this;
        }

        /**
         * @param channels The channels of OTS tunnel. Each element contains the following attributes:
         * 
         * @return builder
         * 
         */
        public Builder channels(List<TunnelChannelArgs> channels) {
            return channels(Output.of(channels));
        }

        /**
         * @param channels The channels of OTS tunnel. Each element contains the following attributes:
         * 
         * @return builder
         * 
         */
        public Builder channels(TunnelChannelArgs... channels) {
            return channels(List.of(channels));
        }

        /**
         * @param createTime The creation time of the Tunnel.
         * 
         * @return builder
         * 
         */
        public Builder createTime(@Nullable Output<Integer> createTime) {
            $.createTime = createTime;
            return this;
        }

        /**
         * @param createTime The creation time of the Tunnel.
         * 
         * @return builder
         * 
         */
        public Builder createTime(Integer createTime) {
            return createTime(Output.of(createTime));
        }

        /**
         * @param expired Whether the tunnel has expired.
         * 
         * @return builder
         * 
         */
        public Builder expired(@Nullable Output<Boolean> expired) {
            $.expired = expired;
            return this;
        }

        /**
         * @param expired Whether the tunnel has expired.
         * 
         * @return builder
         * 
         */
        public Builder expired(Boolean expired) {
            return expired(Output.of(expired));
        }

        /**
         * @param instanceName The name of the OTS instance in which table will located.
         * 
         * @return builder
         * 
         */
        public Builder instanceName(@Nullable Output<String> instanceName) {
            $.instanceName = instanceName;
            return this;
        }

        /**
         * @param instanceName The name of the OTS instance in which table will located.
         * 
         * @return builder
         * 
         */
        public Builder instanceName(String instanceName) {
            return instanceName(Output.of(instanceName));
        }

        /**
         * @param tableName The name of the OTS table. If changed, a new table would be created.
         * 
         * @return builder
         * 
         */
        public Builder tableName(@Nullable Output<String> tableName) {
            $.tableName = tableName;
            return this;
        }

        /**
         * @param tableName The name of the OTS table. If changed, a new table would be created.
         * 
         * @return builder
         * 
         */
        public Builder tableName(String tableName) {
            return tableName(Output.of(tableName));
        }

        /**
         * @param tunnelId The tunnel id of the OTS which could not be changed.
         * 
         * @return builder
         * 
         */
        public Builder tunnelId(@Nullable Output<String> tunnelId) {
            $.tunnelId = tunnelId;
            return this;
        }

        /**
         * @param tunnelId The tunnel id of the OTS which could not be changed.
         * 
         * @return builder
         * 
         */
        public Builder tunnelId(String tunnelId) {
            return tunnelId(Output.of(tunnelId));
        }

        /**
         * @param tunnelName The name of the OTS tunnel. If changed, a new tunnel would be created.
         * 
         * @return builder
         * 
         */
        public Builder tunnelName(@Nullable Output<String> tunnelName) {
            $.tunnelName = tunnelName;
            return this;
        }

        /**
         * @param tunnelName The name of the OTS tunnel. If changed, a new tunnel would be created.
         * 
         * @return builder
         * 
         */
        public Builder tunnelName(String tunnelName) {
            return tunnelName(Output.of(tunnelName));
        }

        /**
         * @param tunnelRpo The latest consumption time of the tunnel, unix time in nanosecond.
         * 
         * @return builder
         * 
         */
        public Builder tunnelRpo(@Nullable Output<Integer> tunnelRpo) {
            $.tunnelRpo = tunnelRpo;
            return this;
        }

        /**
         * @param tunnelRpo The latest consumption time of the tunnel, unix time in nanosecond.
         * 
         * @return builder
         * 
         */
        public Builder tunnelRpo(Integer tunnelRpo) {
            return tunnelRpo(Output.of(tunnelRpo));
        }

        /**
         * @param tunnelStage The stage of OTS tunnel, valid values: `InitBaseDataAndStreamShard`, `ProcessBaseData`, `ProcessStream`.
         * 
         * @return builder
         * 
         */
        public Builder tunnelStage(@Nullable Output<String> tunnelStage) {
            $.tunnelStage = tunnelStage;
            return this;
        }

        /**
         * @param tunnelStage The stage of OTS tunnel, valid values: `InitBaseDataAndStreamShard`, `ProcessBaseData`, `ProcessStream`.
         * 
         * @return builder
         * 
         */
        public Builder tunnelStage(String tunnelStage) {
            return tunnelStage(Output.of(tunnelStage));
        }

        /**
         * @param tunnelType The type of the OTS tunnel. Only `BaseAndStream`, `BaseData` or `Stream` is allowed.
         * 
         * @return builder
         * 
         */
        public Builder tunnelType(@Nullable Output<String> tunnelType) {
            $.tunnelType = tunnelType;
            return this;
        }

        /**
         * @param tunnelType The type of the OTS tunnel. Only `BaseAndStream`, `BaseData` or `Stream` is allowed.
         * 
         * @return builder
         * 
         */
        public Builder tunnelType(String tunnelType) {
            return tunnelType(Output.of(tunnelType));
        }

        public TunnelState build() {
            return $;
        }
    }

}
