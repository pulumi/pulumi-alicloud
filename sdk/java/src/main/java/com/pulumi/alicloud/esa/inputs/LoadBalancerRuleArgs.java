// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.esa.inputs;

import com.pulumi.alicloud.esa.inputs.LoadBalancerRuleFixedResponseArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class LoadBalancerRuleArgs extends com.pulumi.resources.ResourceArgs {

    public static final LoadBalancerRuleArgs Empty = new LoadBalancerRuleArgs();

    /**
     * Executes a specified response after matching the rule. See `fixedResponse` below.
     * 
     */
    @Import(name="fixedResponse")
    private @Nullable Output<LoadBalancerRuleFixedResponseArgs> fixedResponse;

    /**
     * @return Executes a specified response after matching the rule. See `fixedResponse` below.
     * 
     */
    public Optional<Output<LoadBalancerRuleFixedResponseArgs>> fixedResponse() {
        return Optional.ofNullable(this.fixedResponse);
    }

    /**
     * Modifies the load balancer configuration for the corresponding request after matching the rule. The fields in this configuration will override the corresponding fields in the load balancer configuration.
     * 
     */
    @Import(name="overrides")
    private @Nullable Output<String> overrides;

    /**
     * @return Modifies the load balancer configuration for the corresponding request after matching the rule. The fields in this configuration will override the corresponding fields in the load balancer configuration.
     * 
     */
    public Optional<Output<String>> overrides() {
        return Optional.ofNullable(this.overrides);
    }

    /**
     * Rule content, using conditional expressions to match user requests. When adding global configuration, this parameter does not need to be set. There are two usage scenarios:
     * - Match all incoming requests: value set to true
     * - Match specified request: Set the value to a custom expression, for example: (http.host eq \&#34;video.example.com\&#34;)
     * 
     */
    @Import(name="rule")
    private @Nullable Output<String> rule;

    /**
     * @return Rule content, using conditional expressions to match user requests. When adding global configuration, this parameter does not need to be set. There are two usage scenarios:
     * - Match all incoming requests: value set to true
     * - Match specified request: Set the value to a custom expression, for example: (http.host eq \&#34;video.example.com\&#34;)
     * 
     */
    public Optional<Output<String>> rule() {
        return Optional.ofNullable(this.rule);
    }

    /**
     * Rule switch. When adding global configuration, this parameter does not need to be set. Value range:
     * - on: open.
     * - off: close.
     * 
     */
    @Import(name="ruleEnable")
    private @Nullable Output<String> ruleEnable;

    /**
     * @return Rule switch. When adding global configuration, this parameter does not need to be set. Value range:
     * - on: open.
     * - off: close.
     * 
     */
    public Optional<Output<String>> ruleEnable() {
        return Optional.ofNullable(this.ruleEnable);
    }

    /**
     * Rule name. When adding global configuration, this parameter does not need to be set.
     * 
     */
    @Import(name="ruleName")
    private @Nullable Output<String> ruleName;

    /**
     * @return Rule name. When adding global configuration, this parameter does not need to be set.
     * 
     */
    public Optional<Output<String>> ruleName() {
        return Optional.ofNullable(this.ruleName);
    }

    /**
     * Order of rule execution. The smaller the value, the higher the priority for execution.
     * 
     */
    @Import(name="sequence")
    private @Nullable Output<Integer> sequence;

    /**
     * @return Order of rule execution. The smaller the value, the higher the priority for execution.
     * 
     */
    public Optional<Output<Integer>> sequence() {
        return Optional.ofNullable(this.sequence);
    }

    /**
     * Whether to terminate the execution of subsequent rules.
     * 
     */
    @Import(name="terminates")
    private @Nullable Output<Boolean> terminates;

    /**
     * @return Whether to terminate the execution of subsequent rules.
     * 
     */
    public Optional<Output<Boolean>> terminates() {
        return Optional.ofNullable(this.terminates);
    }

    private LoadBalancerRuleArgs() {}

    private LoadBalancerRuleArgs(LoadBalancerRuleArgs $) {
        this.fixedResponse = $.fixedResponse;
        this.overrides = $.overrides;
        this.rule = $.rule;
        this.ruleEnable = $.ruleEnable;
        this.ruleName = $.ruleName;
        this.sequence = $.sequence;
        this.terminates = $.terminates;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LoadBalancerRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LoadBalancerRuleArgs $;

        public Builder() {
            $ = new LoadBalancerRuleArgs();
        }

        public Builder(LoadBalancerRuleArgs defaults) {
            $ = new LoadBalancerRuleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param fixedResponse Executes a specified response after matching the rule. See `fixedResponse` below.
         * 
         * @return builder
         * 
         */
        public Builder fixedResponse(@Nullable Output<LoadBalancerRuleFixedResponseArgs> fixedResponse) {
            $.fixedResponse = fixedResponse;
            return this;
        }

        /**
         * @param fixedResponse Executes a specified response after matching the rule. See `fixedResponse` below.
         * 
         * @return builder
         * 
         */
        public Builder fixedResponse(LoadBalancerRuleFixedResponseArgs fixedResponse) {
            return fixedResponse(Output.of(fixedResponse));
        }

        /**
         * @param overrides Modifies the load balancer configuration for the corresponding request after matching the rule. The fields in this configuration will override the corresponding fields in the load balancer configuration.
         * 
         * @return builder
         * 
         */
        public Builder overrides(@Nullable Output<String> overrides) {
            $.overrides = overrides;
            return this;
        }

        /**
         * @param overrides Modifies the load balancer configuration for the corresponding request after matching the rule. The fields in this configuration will override the corresponding fields in the load balancer configuration.
         * 
         * @return builder
         * 
         */
        public Builder overrides(String overrides) {
            return overrides(Output.of(overrides));
        }

        /**
         * @param rule Rule content, using conditional expressions to match user requests. When adding global configuration, this parameter does not need to be set. There are two usage scenarios:
         * - Match all incoming requests: value set to true
         * - Match specified request: Set the value to a custom expression, for example: (http.host eq \&#34;video.example.com\&#34;)
         * 
         * @return builder
         * 
         */
        public Builder rule(@Nullable Output<String> rule) {
            $.rule = rule;
            return this;
        }

        /**
         * @param rule Rule content, using conditional expressions to match user requests. When adding global configuration, this parameter does not need to be set. There are two usage scenarios:
         * - Match all incoming requests: value set to true
         * - Match specified request: Set the value to a custom expression, for example: (http.host eq \&#34;video.example.com\&#34;)
         * 
         * @return builder
         * 
         */
        public Builder rule(String rule) {
            return rule(Output.of(rule));
        }

        /**
         * @param ruleEnable Rule switch. When adding global configuration, this parameter does not need to be set. Value range:
         * - on: open.
         * - off: close.
         * 
         * @return builder
         * 
         */
        public Builder ruleEnable(@Nullable Output<String> ruleEnable) {
            $.ruleEnable = ruleEnable;
            return this;
        }

        /**
         * @param ruleEnable Rule switch. When adding global configuration, this parameter does not need to be set. Value range:
         * - on: open.
         * - off: close.
         * 
         * @return builder
         * 
         */
        public Builder ruleEnable(String ruleEnable) {
            return ruleEnable(Output.of(ruleEnable));
        }

        /**
         * @param ruleName Rule name. When adding global configuration, this parameter does not need to be set.
         * 
         * @return builder
         * 
         */
        public Builder ruleName(@Nullable Output<String> ruleName) {
            $.ruleName = ruleName;
            return this;
        }

        /**
         * @param ruleName Rule name. When adding global configuration, this parameter does not need to be set.
         * 
         * @return builder
         * 
         */
        public Builder ruleName(String ruleName) {
            return ruleName(Output.of(ruleName));
        }

        /**
         * @param sequence Order of rule execution. The smaller the value, the higher the priority for execution.
         * 
         * @return builder
         * 
         */
        public Builder sequence(@Nullable Output<Integer> sequence) {
            $.sequence = sequence;
            return this;
        }

        /**
         * @param sequence Order of rule execution. The smaller the value, the higher the priority for execution.
         * 
         * @return builder
         * 
         */
        public Builder sequence(Integer sequence) {
            return sequence(Output.of(sequence));
        }

        /**
         * @param terminates Whether to terminate the execution of subsequent rules.
         * 
         * @return builder
         * 
         */
        public Builder terminates(@Nullable Output<Boolean> terminates) {
            $.terminates = terminates;
            return this;
        }

        /**
         * @param terminates Whether to terminate the execution of subsequent rules.
         * 
         * @return builder
         * 
         */
        public Builder terminates(Boolean terminates) {
            return terminates(Output.of(terminates));
        }

        public LoadBalancerRuleArgs build() {
            return $;
        }
    }

}
