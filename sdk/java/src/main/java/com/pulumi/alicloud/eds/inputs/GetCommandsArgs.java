// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.eds.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetCommandsArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetCommandsArgs Empty = new GetCommandsArgs();

    /**
     * The Script Type. Valid values: `RunBatScript`, `RunPowerShellScript`.
     * 
     */
    @Import(name="commandType")
    private @Nullable Output<String> commandType;

    /**
     * @return The Script Type. Valid values: `RunBatScript`, `RunPowerShellScript`.
     * 
     */
    public Optional<Output<String>> commandType() {
        return Optional.ofNullable(this.commandType);
    }

    /**
     * That Returns the Data Encoding Method. Valid values: `Base64`, `PlainText`.
     * 
     */
    @Import(name="contentEncoding")
    private @Nullable Output<String> contentEncoding;

    /**
     * @return That Returns the Data Encoding Method. Valid values: `Base64`, `PlainText`.
     * 
     */
    public Optional<Output<String>> contentEncoding() {
        return Optional.ofNullable(this.contentEncoding);
    }

    /**
     * The desktop id of the Desktop.
     * 
     */
    @Import(name="desktopId")
    private @Nullable Output<String> desktopId;

    /**
     * @return The desktop id of the Desktop.
     * 
     */
    public Optional<Output<String>> desktopId() {
        return Optional.ofNullable(this.desktopId);
    }

    /**
     * A list of Command IDs.
     * 
     */
    @Import(name="ids")
    private @Nullable Output<List<String>> ids;

    /**
     * @return A list of Command IDs.
     * 
     */
    public Optional<Output<List<String>>> ids() {
        return Optional.ofNullable(this.ids);
    }

    /**
     * File name where to save data source results (after running `pulumi preview`).
     * 
     */
    @Import(name="outputFile")
    private @Nullable Output<String> outputFile;

    /**
     * @return File name where to save data source results (after running `pulumi preview`).
     * 
     */
    public Optional<Output<String>> outputFile() {
        return Optional.ofNullable(this.outputFile);
    }

    /**
     * Script Is Executed in the Overall Implementation of the State. Valid values: `Pending`, `Failed`, `PartialFailed`, `Running`, `Stopped`, `Stopping`, `Finished`, `Success`.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return Script Is Executed in the Overall Implementation of the State. Valid values: `Pending`, `Failed`, `PartialFailed`, `Running`, `Stopped`, `Stopping`, `Finished`, `Success`.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    private GetCommandsArgs() {}

    private GetCommandsArgs(GetCommandsArgs $) {
        this.commandType = $.commandType;
        this.contentEncoding = $.contentEncoding;
        this.desktopId = $.desktopId;
        this.ids = $.ids;
        this.outputFile = $.outputFile;
        this.status = $.status;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetCommandsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetCommandsArgs $;

        public Builder() {
            $ = new GetCommandsArgs();
        }

        public Builder(GetCommandsArgs defaults) {
            $ = new GetCommandsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param commandType The Script Type. Valid values: `RunBatScript`, `RunPowerShellScript`.
         * 
         * @return builder
         * 
         */
        public Builder commandType(@Nullable Output<String> commandType) {
            $.commandType = commandType;
            return this;
        }

        /**
         * @param commandType The Script Type. Valid values: `RunBatScript`, `RunPowerShellScript`.
         * 
         * @return builder
         * 
         */
        public Builder commandType(String commandType) {
            return commandType(Output.of(commandType));
        }

        /**
         * @param contentEncoding That Returns the Data Encoding Method. Valid values: `Base64`, `PlainText`.
         * 
         * @return builder
         * 
         */
        public Builder contentEncoding(@Nullable Output<String> contentEncoding) {
            $.contentEncoding = contentEncoding;
            return this;
        }

        /**
         * @param contentEncoding That Returns the Data Encoding Method. Valid values: `Base64`, `PlainText`.
         * 
         * @return builder
         * 
         */
        public Builder contentEncoding(String contentEncoding) {
            return contentEncoding(Output.of(contentEncoding));
        }

        /**
         * @param desktopId The desktop id of the Desktop.
         * 
         * @return builder
         * 
         */
        public Builder desktopId(@Nullable Output<String> desktopId) {
            $.desktopId = desktopId;
            return this;
        }

        /**
         * @param desktopId The desktop id of the Desktop.
         * 
         * @return builder
         * 
         */
        public Builder desktopId(String desktopId) {
            return desktopId(Output.of(desktopId));
        }

        /**
         * @param ids A list of Command IDs.
         * 
         * @return builder
         * 
         */
        public Builder ids(@Nullable Output<List<String>> ids) {
            $.ids = ids;
            return this;
        }

        /**
         * @param ids A list of Command IDs.
         * 
         * @return builder
         * 
         */
        public Builder ids(List<String> ids) {
            return ids(Output.of(ids));
        }

        /**
         * @param ids A list of Command IDs.
         * 
         * @return builder
         * 
         */
        public Builder ids(String... ids) {
            return ids(List.of(ids));
        }

        /**
         * @param outputFile File name where to save data source results (after running `pulumi preview`).
         * 
         * @return builder
         * 
         */
        public Builder outputFile(@Nullable Output<String> outputFile) {
            $.outputFile = outputFile;
            return this;
        }

        /**
         * @param outputFile File name where to save data source results (after running `pulumi preview`).
         * 
         * @return builder
         * 
         */
        public Builder outputFile(String outputFile) {
            return outputFile(Output.of(outputFile));
        }

        /**
         * @param status Script Is Executed in the Overall Implementation of the State. Valid values: `Pending`, `Failed`, `PartialFailed`, `Running`, `Stopped`, `Stopping`, `Finished`, `Success`.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status Script Is Executed in the Overall Implementation of the State. Valid values: `Pending`, `Failed`, `PartialFailed`, `Running`, `Stopped`, `Stopping`, `Finished`, `Success`.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        public GetCommandsArgs build() {
            return $;
        }
    }

}
