// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.esa;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CertificateArgs extends com.pulumi.resources.ResourceArgs {

    public static final CertificateArgs Empty = new CertificateArgs();

    /**
     * Cloud certificate ID.
     * 
     */
    @Import(name="casId")
    private @Nullable Output<String> casId;

    /**
     * @return Cloud certificate ID.
     * 
     */
    public Optional<Output<String>> casId() {
        return Optional.ofNullable(this.casId);
    }

    /**
     * The certificate Id.
     * 
     */
    @Import(name="certId")
    private @Nullable Output<String> certId;

    /**
     * @return The certificate Id.
     * 
     */
    public Optional<Output<String>> certId() {
        return Optional.ofNullable(this.certId);
    }

    /**
     * The certificate name.
     * 
     */
    @Import(name="certName")
    private @Nullable Output<String> certName;

    /**
     * @return The certificate name.
     * 
     */
    public Optional<Output<String>> certName() {
        return Optional.ofNullable(this.certName);
    }

    /**
     * Certificate content.
     * 
     */
    @Import(name="certificate")
    private @Nullable Output<String> certificate;

    /**
     * @return Certificate content.
     * 
     */
    public Optional<Output<String>> certificate() {
        return Optional.ofNullable(this.certificate);
    }

    /**
     * The certificate type.
     * - cas (Certificate Center Certificate)
     * - upload (custom upload certificate)
     * - free( Free certificate).
     * 
     */
    @Import(name="createdType", required=true)
    private Output<String> createdType;

    /**
     * @return The certificate type.
     * - cas (Certificate Center Certificate)
     * - upload (custom upload certificate)
     * - free( Free certificate).
     * 
     */
    public Output<String> createdType() {
        return this.createdType;
    }

    /**
     * A list of domain names. Multiple domain names are separated by commas.
     * 
     */
    @Import(name="domains")
    private @Nullable Output<String> domains;

    /**
     * @return A list of domain names. Multiple domain names are separated by commas.
     * 
     */
    public Optional<Output<String>> domains() {
        return Optional.ofNullable(this.domains);
    }

    /**
     * The certificate private key.
     * 
     */
    @Import(name="privateKey")
    private @Nullable Output<String> privateKey;

    /**
     * @return The certificate private key.
     * 
     */
    public Optional<Output<String>> privateKey() {
        return Optional.ofNullable(this.privateKey);
    }

    /**
     * Geographical information.
     * 
     */
    @Import(name="region")
    private @Nullable Output<String> region;

    /**
     * @return Geographical information.
     * 
     */
    public Optional<Output<String>> region() {
        return Optional.ofNullable(this.region);
    }

    /**
     * The site ID, which can be obtained by calling the ListSites interface.
     * 
     */
    @Import(name="siteId", required=true)
    private Output<Integer> siteId;

    /**
     * @return The site ID, which can be obtained by calling the ListSites interface.
     * 
     */
    public Output<Integer> siteId() {
        return this.siteId;
    }

    /**
     * Certificate type. Possible values: lets_encrypt: Let&#39;s Encrypt certificate;
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return Certificate type. Possible values: lets_encrypt: Let&#39;s Encrypt certificate;
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    private CertificateArgs() {}

    private CertificateArgs(CertificateArgs $) {
        this.casId = $.casId;
        this.certId = $.certId;
        this.certName = $.certName;
        this.certificate = $.certificate;
        this.createdType = $.createdType;
        this.domains = $.domains;
        this.privateKey = $.privateKey;
        this.region = $.region;
        this.siteId = $.siteId;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CertificateArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CertificateArgs $;

        public Builder() {
            $ = new CertificateArgs();
        }

        public Builder(CertificateArgs defaults) {
            $ = new CertificateArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param casId Cloud certificate ID.
         * 
         * @return builder
         * 
         */
        public Builder casId(@Nullable Output<String> casId) {
            $.casId = casId;
            return this;
        }

        /**
         * @param casId Cloud certificate ID.
         * 
         * @return builder
         * 
         */
        public Builder casId(String casId) {
            return casId(Output.of(casId));
        }

        /**
         * @param certId The certificate Id.
         * 
         * @return builder
         * 
         */
        public Builder certId(@Nullable Output<String> certId) {
            $.certId = certId;
            return this;
        }

        /**
         * @param certId The certificate Id.
         * 
         * @return builder
         * 
         */
        public Builder certId(String certId) {
            return certId(Output.of(certId));
        }

        /**
         * @param certName The certificate name.
         * 
         * @return builder
         * 
         */
        public Builder certName(@Nullable Output<String> certName) {
            $.certName = certName;
            return this;
        }

        /**
         * @param certName The certificate name.
         * 
         * @return builder
         * 
         */
        public Builder certName(String certName) {
            return certName(Output.of(certName));
        }

        /**
         * @param certificate Certificate content.
         * 
         * @return builder
         * 
         */
        public Builder certificate(@Nullable Output<String> certificate) {
            $.certificate = certificate;
            return this;
        }

        /**
         * @param certificate Certificate content.
         * 
         * @return builder
         * 
         */
        public Builder certificate(String certificate) {
            return certificate(Output.of(certificate));
        }

        /**
         * @param createdType The certificate type.
         * - cas (Certificate Center Certificate)
         * - upload (custom upload certificate)
         * - free( Free certificate).
         * 
         * @return builder
         * 
         */
        public Builder createdType(Output<String> createdType) {
            $.createdType = createdType;
            return this;
        }

        /**
         * @param createdType The certificate type.
         * - cas (Certificate Center Certificate)
         * - upload (custom upload certificate)
         * - free( Free certificate).
         * 
         * @return builder
         * 
         */
        public Builder createdType(String createdType) {
            return createdType(Output.of(createdType));
        }

        /**
         * @param domains A list of domain names. Multiple domain names are separated by commas.
         * 
         * @return builder
         * 
         */
        public Builder domains(@Nullable Output<String> domains) {
            $.domains = domains;
            return this;
        }

        /**
         * @param domains A list of domain names. Multiple domain names are separated by commas.
         * 
         * @return builder
         * 
         */
        public Builder domains(String domains) {
            return domains(Output.of(domains));
        }

        /**
         * @param privateKey The certificate private key.
         * 
         * @return builder
         * 
         */
        public Builder privateKey(@Nullable Output<String> privateKey) {
            $.privateKey = privateKey;
            return this;
        }

        /**
         * @param privateKey The certificate private key.
         * 
         * @return builder
         * 
         */
        public Builder privateKey(String privateKey) {
            return privateKey(Output.of(privateKey));
        }

        /**
         * @param region Geographical information.
         * 
         * @return builder
         * 
         */
        public Builder region(@Nullable Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region Geographical information.
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        /**
         * @param siteId The site ID, which can be obtained by calling the ListSites interface.
         * 
         * @return builder
         * 
         */
        public Builder siteId(Output<Integer> siteId) {
            $.siteId = siteId;
            return this;
        }

        /**
         * @param siteId The site ID, which can be obtained by calling the ListSites interface.
         * 
         * @return builder
         * 
         */
        public Builder siteId(Integer siteId) {
            return siteId(Output.of(siteId));
        }

        /**
         * @param type Certificate type. Possible values: lets_encrypt: Let&#39;s Encrypt certificate;
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Certificate type. Possible values: lets_encrypt: Let&#39;s Encrypt certificate;
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public CertificateArgs build() {
            if ($.createdType == null) {
                throw new MissingRequiredPropertyException("CertificateArgs", "createdType");
            }
            if ($.siteId == null) {
                throw new MissingRequiredPropertyException("CertificateArgs", "siteId");
            }
            return $;
        }
    }

}
