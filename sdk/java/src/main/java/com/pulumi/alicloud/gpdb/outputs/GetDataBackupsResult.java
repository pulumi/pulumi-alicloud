// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.gpdb.outputs;

import com.pulumi.alicloud.gpdb.outputs.GetDataBackupsBackup;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetDataBackupsResult {
    /**
     * @return Backup mode.Full Backup Value Description:-**Automated**: The system is automatically backed up.-**Manual**: Manual backup.Recovery point value description:-**Automated**: The recovery point after a full backup.-**Manual**: The recovery point triggered manually by the user.-**Period**: The recovery point triggered periodically because of the backup policy.
     * 
     */
    private @Nullable String backupMode;
    /**
     * @return A list of Data Backup Entries. Each element contains the following attributes:
     * 
     */
    private List<GetDataBackupsBackup> backups;
    private @Nullable String dataBackupId;
    /**
     * @return The backup type. Value Description:-**DATA**: Full backup.-**RESTOREPOI**: Recoverable point.
     * 
     */
    private @Nullable String dataType;
    /**
     * @return The instance ID.
     * 
     */
    private String dbInstanceId;
    private @Nullable String endTime;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return A list of Data Backup IDs.
     * 
     */
    private List<String> ids;
    private @Nullable String outputFile;
    private @Nullable Integer pageNumber;
    private @Nullable Integer pageSize;
    private @Nullable String startTime;
    /**
     * @return Backup set status. Value Description:-Success: The backup has been completed.-Failed: Backup Failed.If not, return all.
     * 
     */
    private @Nullable String status;

    private GetDataBackupsResult() {}
    /**
     * @return Backup mode.Full Backup Value Description:-**Automated**: The system is automatically backed up.-**Manual**: Manual backup.Recovery point value description:-**Automated**: The recovery point after a full backup.-**Manual**: The recovery point triggered manually by the user.-**Period**: The recovery point triggered periodically because of the backup policy.
     * 
     */
    public Optional<String> backupMode() {
        return Optional.ofNullable(this.backupMode);
    }
    /**
     * @return A list of Data Backup Entries. Each element contains the following attributes:
     * 
     */
    public List<GetDataBackupsBackup> backups() {
        return this.backups;
    }
    public Optional<String> dataBackupId() {
        return Optional.ofNullable(this.dataBackupId);
    }
    /**
     * @return The backup type. Value Description:-**DATA**: Full backup.-**RESTOREPOI**: Recoverable point.
     * 
     */
    public Optional<String> dataType() {
        return Optional.ofNullable(this.dataType);
    }
    /**
     * @return The instance ID.
     * 
     */
    public String dbInstanceId() {
        return this.dbInstanceId;
    }
    public Optional<String> endTime() {
        return Optional.ofNullable(this.endTime);
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return A list of Data Backup IDs.
     * 
     */
    public List<String> ids() {
        return this.ids;
    }
    public Optional<String> outputFile() {
        return Optional.ofNullable(this.outputFile);
    }
    public Optional<Integer> pageNumber() {
        return Optional.ofNullable(this.pageNumber);
    }
    public Optional<Integer> pageSize() {
        return Optional.ofNullable(this.pageSize);
    }
    public Optional<String> startTime() {
        return Optional.ofNullable(this.startTime);
    }
    /**
     * @return Backup set status. Value Description:-Success: The backup has been completed.-Failed: Backup Failed.If not, return all.
     * 
     */
    public Optional<String> status() {
        return Optional.ofNullable(this.status);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDataBackupsResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String backupMode;
        private List<GetDataBackupsBackup> backups;
        private @Nullable String dataBackupId;
        private @Nullable String dataType;
        private String dbInstanceId;
        private @Nullable String endTime;
        private String id;
        private List<String> ids;
        private @Nullable String outputFile;
        private @Nullable Integer pageNumber;
        private @Nullable Integer pageSize;
        private @Nullable String startTime;
        private @Nullable String status;
        public Builder() {}
        public Builder(GetDataBackupsResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.backupMode = defaults.backupMode;
    	      this.backups = defaults.backups;
    	      this.dataBackupId = defaults.dataBackupId;
    	      this.dataType = defaults.dataType;
    	      this.dbInstanceId = defaults.dbInstanceId;
    	      this.endTime = defaults.endTime;
    	      this.id = defaults.id;
    	      this.ids = defaults.ids;
    	      this.outputFile = defaults.outputFile;
    	      this.pageNumber = defaults.pageNumber;
    	      this.pageSize = defaults.pageSize;
    	      this.startTime = defaults.startTime;
    	      this.status = defaults.status;
        }

        @CustomType.Setter
        public Builder backupMode(@Nullable String backupMode) {

            this.backupMode = backupMode;
            return this;
        }
        @CustomType.Setter
        public Builder backups(List<GetDataBackupsBackup> backups) {
            if (backups == null) {
              throw new MissingRequiredPropertyException("GetDataBackupsResult", "backups");
            }
            this.backups = backups;
            return this;
        }
        public Builder backups(GetDataBackupsBackup... backups) {
            return backups(List.of(backups));
        }
        @CustomType.Setter
        public Builder dataBackupId(@Nullable String dataBackupId) {

            this.dataBackupId = dataBackupId;
            return this;
        }
        @CustomType.Setter
        public Builder dataType(@Nullable String dataType) {

            this.dataType = dataType;
            return this;
        }
        @CustomType.Setter
        public Builder dbInstanceId(String dbInstanceId) {
            if (dbInstanceId == null) {
              throw new MissingRequiredPropertyException("GetDataBackupsResult", "dbInstanceId");
            }
            this.dbInstanceId = dbInstanceId;
            return this;
        }
        @CustomType.Setter
        public Builder endTime(@Nullable String endTime) {

            this.endTime = endTime;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetDataBackupsResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder ids(List<String> ids) {
            if (ids == null) {
              throw new MissingRequiredPropertyException("GetDataBackupsResult", "ids");
            }
            this.ids = ids;
            return this;
        }
        public Builder ids(String... ids) {
            return ids(List.of(ids));
        }
        @CustomType.Setter
        public Builder outputFile(@Nullable String outputFile) {

            this.outputFile = outputFile;
            return this;
        }
        @CustomType.Setter
        public Builder pageNumber(@Nullable Integer pageNumber) {

            this.pageNumber = pageNumber;
            return this;
        }
        @CustomType.Setter
        public Builder pageSize(@Nullable Integer pageSize) {

            this.pageSize = pageSize;
            return this;
        }
        @CustomType.Setter
        public Builder startTime(@Nullable String startTime) {

            this.startTime = startTime;
            return this;
        }
        @CustomType.Setter
        public Builder status(@Nullable String status) {

            this.status = status;
            return this;
        }
        public GetDataBackupsResult build() {
            final var _resultValue = new GetDataBackupsResult();
            _resultValue.backupMode = backupMode;
            _resultValue.backups = backups;
            _resultValue.dataBackupId = dataBackupId;
            _resultValue.dataType = dataType;
            _resultValue.dbInstanceId = dbInstanceId;
            _resultValue.endTime = endTime;
            _resultValue.id = id;
            _resultValue.ids = ids;
            _resultValue.outputFile = outputFile;
            _resultValue.pageNumber = pageNumber;
            _resultValue.pageSize = pageSize;
            _resultValue.startTime = startTime;
            _resultValue.status = status;
            return _resultValue;
        }
    }
}
