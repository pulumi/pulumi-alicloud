// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.threatdetection.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ImageEventOperationState extends com.pulumi.resources.ResourceArgs {

    public static final ImageEventOperationState Empty = new ImageEventOperationState();

    /**
     * The rule conditions. The value is in the JSON format. For more information, see [How to use it](https://www.alibabacloud.com/help/en/security-center/developer-reference/api-sas-2018-12-03-addimageeventoperation). **NOTE:** From version 1.255.0, `conditions` can be modified.
     * 
     */
    @Import(name="conditions")
    private @Nullable Output<String> conditions;

    /**
     * @return The rule conditions. The value is in the JSON format. For more information, see [How to use it](https://www.alibabacloud.com/help/en/security-center/developer-reference/api-sas-2018-12-03-addimageeventoperation). **NOTE:** From version 1.255.0, `conditions` can be modified.
     * 
     */
    public Optional<Output<String>> conditions() {
        return Optional.ofNullable(this.conditions);
    }

    /**
     * The keyword of the alert item.
     * 
     */
    @Import(name="eventKey")
    private @Nullable Output<String> eventKey;

    /**
     * @return The keyword of the alert item.
     * 
     */
    public Optional<Output<String>> eventKey() {
        return Optional.ofNullable(this.eventKey);
    }

    /**
     * The name of the alert item.
     * 
     */
    @Import(name="eventName")
    private @Nullable Output<String> eventName;

    /**
     * @return The name of the alert item.
     * 
     */
    public Optional<Output<String>> eventName() {
        return Optional.ofNullable(this.eventName);
    }

    /**
     * The alert type.
     * 
     */
    @Import(name="eventType")
    private @Nullable Output<String> eventType;

    /**
     * @return The alert type.
     * 
     */
    public Optional<Output<String>> eventType() {
        return Optional.ofNullable(this.eventType);
    }

    /**
     * The remarks.
     * 
     */
    @Import(name="note")
    private @Nullable Output<String> note;

    /**
     * @return The remarks.
     * 
     */
    public Optional<Output<String>> note() {
        return Optional.ofNullable(this.note);
    }

    /**
     * The operation code.
     * 
     */
    @Import(name="operationCode")
    private @Nullable Output<String> operationCode;

    /**
     * @return The operation code.
     * 
     */
    public Optional<Output<String>> operationCode() {
        return Optional.ofNullable(this.operationCode);
    }

    /**
     * The application scope of the rule.
     * 
     */
    @Import(name="scenarios")
    private @Nullable Output<String> scenarios;

    /**
     * @return The application scope of the rule.
     * 
     */
    public Optional<Output<String>> scenarios() {
        return Optional.ofNullable(this.scenarios);
    }

    /**
     * The source of the whitelist. Valid values:
     * 
     */
    @Import(name="source")
    private @Nullable Output<String> source;

    /**
     * @return The source of the whitelist. Valid values:
     * 
     */
    public Optional<Output<String>> source() {
        return Optional.ofNullable(this.source);
    }

    private ImageEventOperationState() {}

    private ImageEventOperationState(ImageEventOperationState $) {
        this.conditions = $.conditions;
        this.eventKey = $.eventKey;
        this.eventName = $.eventName;
        this.eventType = $.eventType;
        this.note = $.note;
        this.operationCode = $.operationCode;
        this.scenarios = $.scenarios;
        this.source = $.source;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ImageEventOperationState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ImageEventOperationState $;

        public Builder() {
            $ = new ImageEventOperationState();
        }

        public Builder(ImageEventOperationState defaults) {
            $ = new ImageEventOperationState(Objects.requireNonNull(defaults));
        }

        /**
         * @param conditions The rule conditions. The value is in the JSON format. For more information, see [How to use it](https://www.alibabacloud.com/help/en/security-center/developer-reference/api-sas-2018-12-03-addimageeventoperation). **NOTE:** From version 1.255.0, `conditions` can be modified.
         * 
         * @return builder
         * 
         */
        public Builder conditions(@Nullable Output<String> conditions) {
            $.conditions = conditions;
            return this;
        }

        /**
         * @param conditions The rule conditions. The value is in the JSON format. For more information, see [How to use it](https://www.alibabacloud.com/help/en/security-center/developer-reference/api-sas-2018-12-03-addimageeventoperation). **NOTE:** From version 1.255.0, `conditions` can be modified.
         * 
         * @return builder
         * 
         */
        public Builder conditions(String conditions) {
            return conditions(Output.of(conditions));
        }

        /**
         * @param eventKey The keyword of the alert item.
         * 
         * @return builder
         * 
         */
        public Builder eventKey(@Nullable Output<String> eventKey) {
            $.eventKey = eventKey;
            return this;
        }

        /**
         * @param eventKey The keyword of the alert item.
         * 
         * @return builder
         * 
         */
        public Builder eventKey(String eventKey) {
            return eventKey(Output.of(eventKey));
        }

        /**
         * @param eventName The name of the alert item.
         * 
         * @return builder
         * 
         */
        public Builder eventName(@Nullable Output<String> eventName) {
            $.eventName = eventName;
            return this;
        }

        /**
         * @param eventName The name of the alert item.
         * 
         * @return builder
         * 
         */
        public Builder eventName(String eventName) {
            return eventName(Output.of(eventName));
        }

        /**
         * @param eventType The alert type.
         * 
         * @return builder
         * 
         */
        public Builder eventType(@Nullable Output<String> eventType) {
            $.eventType = eventType;
            return this;
        }

        /**
         * @param eventType The alert type.
         * 
         * @return builder
         * 
         */
        public Builder eventType(String eventType) {
            return eventType(Output.of(eventType));
        }

        /**
         * @param note The remarks.
         * 
         * @return builder
         * 
         */
        public Builder note(@Nullable Output<String> note) {
            $.note = note;
            return this;
        }

        /**
         * @param note The remarks.
         * 
         * @return builder
         * 
         */
        public Builder note(String note) {
            return note(Output.of(note));
        }

        /**
         * @param operationCode The operation code.
         * 
         * @return builder
         * 
         */
        public Builder operationCode(@Nullable Output<String> operationCode) {
            $.operationCode = operationCode;
            return this;
        }

        /**
         * @param operationCode The operation code.
         * 
         * @return builder
         * 
         */
        public Builder operationCode(String operationCode) {
            return operationCode(Output.of(operationCode));
        }

        /**
         * @param scenarios The application scope of the rule.
         * 
         * @return builder
         * 
         */
        public Builder scenarios(@Nullable Output<String> scenarios) {
            $.scenarios = scenarios;
            return this;
        }

        /**
         * @param scenarios The application scope of the rule.
         * 
         * @return builder
         * 
         */
        public Builder scenarios(String scenarios) {
            return scenarios(Output.of(scenarios));
        }

        /**
         * @param source The source of the whitelist. Valid values:
         * 
         * @return builder
         * 
         */
        public Builder source(@Nullable Output<String> source) {
            $.source = source;
            return this;
        }

        /**
         * @param source The source of the whitelist. Valid values:
         * 
         * @return builder
         * 
         */
        public Builder source(String source) {
            return source(Output.of(source));
        }

        public ImageEventOperationState build() {
            return $;
        }
    }

}
