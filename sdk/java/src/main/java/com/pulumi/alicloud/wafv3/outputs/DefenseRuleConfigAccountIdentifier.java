// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.wafv3.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class DefenseRuleConfigAccountIdentifier {
    /**
     * @return The authentication mode. Valid values:
     * - plain: indicates plaintext.
     * - basic: indicates Basic authentication.
     * - jwt: indicates JWT authentication. For JWT authentication, you must specify the field that stores the decoded account information (position).
     * 
     */
    private @Nullable String decodeType;
    /**
     * @return Match field. Valid values: URL, URLPath, IP, Referer, User-Agent, Params, Cookie, Content-Type, Content-Length, X-Forwarded-For, Post-Body, Http-Method, Header, Host, HttpCode, and SensitiveInfo.
     * 
     * &gt; **NOTE:**  Support for matching fields is based on the display in the WAF console. HttpCode and SensitiveInfo are the matching fields supported by the information leakage prevention rule (dlp).
     * 
     */
    private @Nullable String key;
    /**
     * @return The field that stores the decoded account information.
     * 
     */
    private @Nullable String position;
    /**
     * @return The priority of the current extraction configuration. Each traffic can match at most one extraction policy. Valid values: [0,20]. A smaller value indicates a higher priority. The priority value must be unique.
     * 
     */
    private @Nullable Integer priority;
    /**
     * @return The characteristics of the statistical object. When the Target parameter is set to cookie, header, or queryarg, you must specify the corresponding information in the Subkey parameter.
     * 
     */
    private @Nullable String subKey;

    private DefenseRuleConfigAccountIdentifier() {}
    /**
     * @return The authentication mode. Valid values:
     * - plain: indicates plaintext.
     * - basic: indicates Basic authentication.
     * - jwt: indicates JWT authentication. For JWT authentication, you must specify the field that stores the decoded account information (position).
     * 
     */
    public Optional<String> decodeType() {
        return Optional.ofNullable(this.decodeType);
    }
    /**
     * @return Match field. Valid values: URL, URLPath, IP, Referer, User-Agent, Params, Cookie, Content-Type, Content-Length, X-Forwarded-For, Post-Body, Http-Method, Header, Host, HttpCode, and SensitiveInfo.
     * 
     * &gt; **NOTE:**  Support for matching fields is based on the display in the WAF console. HttpCode and SensitiveInfo are the matching fields supported by the information leakage prevention rule (dlp).
     * 
     */
    public Optional<String> key() {
        return Optional.ofNullable(this.key);
    }
    /**
     * @return The field that stores the decoded account information.
     * 
     */
    public Optional<String> position() {
        return Optional.ofNullable(this.position);
    }
    /**
     * @return The priority of the current extraction configuration. Each traffic can match at most one extraction policy. Valid values: [0,20]. A smaller value indicates a higher priority. The priority value must be unique.
     * 
     */
    public Optional<Integer> priority() {
        return Optional.ofNullable(this.priority);
    }
    /**
     * @return The characteristics of the statistical object. When the Target parameter is set to cookie, header, or queryarg, you must specify the corresponding information in the Subkey parameter.
     * 
     */
    public Optional<String> subKey() {
        return Optional.ofNullable(this.subKey);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DefenseRuleConfigAccountIdentifier defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String decodeType;
        private @Nullable String key;
        private @Nullable String position;
        private @Nullable Integer priority;
        private @Nullable String subKey;
        public Builder() {}
        public Builder(DefenseRuleConfigAccountIdentifier defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.decodeType = defaults.decodeType;
    	      this.key = defaults.key;
    	      this.position = defaults.position;
    	      this.priority = defaults.priority;
    	      this.subKey = defaults.subKey;
        }

        @CustomType.Setter
        public Builder decodeType(@Nullable String decodeType) {

            this.decodeType = decodeType;
            return this;
        }
        @CustomType.Setter
        public Builder key(@Nullable String key) {

            this.key = key;
            return this;
        }
        @CustomType.Setter
        public Builder position(@Nullable String position) {

            this.position = position;
            return this;
        }
        @CustomType.Setter
        public Builder priority(@Nullable Integer priority) {

            this.priority = priority;
            return this;
        }
        @CustomType.Setter
        public Builder subKey(@Nullable String subKey) {

            this.subKey = subKey;
            return this;
        }
        public DefenseRuleConfigAccountIdentifier build() {
            final var _resultValue = new DefenseRuleConfigAccountIdentifier();
            _resultValue.decodeType = decodeType;
            _resultValue.key = key;
            _resultValue.position = position;
            _resultValue.priority = priority;
            _resultValue.subKey = subKey;
            return _resultValue;
        }
    }
}
