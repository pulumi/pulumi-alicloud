// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.ess.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ScheduleState extends com.pulumi.resources.ResourceArgs {

    public static final ScheduleState Empty = new ScheduleState();

    @Import(name="description")
    private @Nullable Output<String> description;

    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    @Import(name="desiredCapacity")
    private @Nullable Output<Integer> desiredCapacity;

    public Optional<Output<Integer>> desiredCapacity() {
        return Optional.ofNullable(this.desiredCapacity);
    }

    @Import(name="launchExpirationTime")
    private @Nullable Output<Integer> launchExpirationTime;

    public Optional<Output<Integer>> launchExpirationTime() {
        return Optional.ofNullable(this.launchExpirationTime);
    }

    @Import(name="launchTime")
    private @Nullable Output<String> launchTime;

    public Optional<Output<String>> launchTime() {
        return Optional.ofNullable(this.launchTime);
    }

    @Import(name="maxValue")
    private @Nullable Output<Integer> maxValue;

    public Optional<Output<Integer>> maxValue() {
        return Optional.ofNullable(this.maxValue);
    }

    @Import(name="minValue")
    private @Nullable Output<Integer> minValue;

    public Optional<Output<Integer>> minValue() {
        return Optional.ofNullable(this.minValue);
    }

    @Import(name="recurrenceEndTime")
    private @Nullable Output<String> recurrenceEndTime;

    public Optional<Output<String>> recurrenceEndTime() {
        return Optional.ofNullable(this.recurrenceEndTime);
    }

    @Import(name="recurrenceType")
    private @Nullable Output<String> recurrenceType;

    public Optional<Output<String>> recurrenceType() {
        return Optional.ofNullable(this.recurrenceType);
    }

    @Import(name="recurrenceValue")
    private @Nullable Output<String> recurrenceValue;

    public Optional<Output<String>> recurrenceValue() {
        return Optional.ofNullable(this.recurrenceValue);
    }

    @Import(name="scalingGroupId")
    private @Nullable Output<String> scalingGroupId;

    public Optional<Output<String>> scalingGroupId() {
        return Optional.ofNullable(this.scalingGroupId);
    }

    @Import(name="scheduledAction")
    private @Nullable Output<String> scheduledAction;

    public Optional<Output<String>> scheduledAction() {
        return Optional.ofNullable(this.scheduledAction);
    }

    @Import(name="scheduledTaskName")
    private @Nullable Output<String> scheduledTaskName;

    public Optional<Output<String>> scheduledTaskName() {
        return Optional.ofNullable(this.scheduledTaskName);
    }

    @Import(name="taskEnabled")
    private @Nullable Output<Boolean> taskEnabled;

    public Optional<Output<Boolean>> taskEnabled() {
        return Optional.ofNullable(this.taskEnabled);
    }

    private ScheduleState() {}

    private ScheduleState(ScheduleState $) {
        this.description = $.description;
        this.desiredCapacity = $.desiredCapacity;
        this.launchExpirationTime = $.launchExpirationTime;
        this.launchTime = $.launchTime;
        this.maxValue = $.maxValue;
        this.minValue = $.minValue;
        this.recurrenceEndTime = $.recurrenceEndTime;
        this.recurrenceType = $.recurrenceType;
        this.recurrenceValue = $.recurrenceValue;
        this.scalingGroupId = $.scalingGroupId;
        this.scheduledAction = $.scheduledAction;
        this.scheduledTaskName = $.scheduledTaskName;
        this.taskEnabled = $.taskEnabled;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ScheduleState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ScheduleState $;

        public Builder() {
            $ = new ScheduleState();
        }

        public Builder(ScheduleState defaults) {
            $ = new ScheduleState(Objects.requireNonNull(defaults));
        }

        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        public Builder description(String description) {
            return description(Output.of(description));
        }

        public Builder desiredCapacity(@Nullable Output<Integer> desiredCapacity) {
            $.desiredCapacity = desiredCapacity;
            return this;
        }

        public Builder desiredCapacity(Integer desiredCapacity) {
            return desiredCapacity(Output.of(desiredCapacity));
        }

        public Builder launchExpirationTime(@Nullable Output<Integer> launchExpirationTime) {
            $.launchExpirationTime = launchExpirationTime;
            return this;
        }

        public Builder launchExpirationTime(Integer launchExpirationTime) {
            return launchExpirationTime(Output.of(launchExpirationTime));
        }

        public Builder launchTime(@Nullable Output<String> launchTime) {
            $.launchTime = launchTime;
            return this;
        }

        public Builder launchTime(String launchTime) {
            return launchTime(Output.of(launchTime));
        }

        public Builder maxValue(@Nullable Output<Integer> maxValue) {
            $.maxValue = maxValue;
            return this;
        }

        public Builder maxValue(Integer maxValue) {
            return maxValue(Output.of(maxValue));
        }

        public Builder minValue(@Nullable Output<Integer> minValue) {
            $.minValue = minValue;
            return this;
        }

        public Builder minValue(Integer minValue) {
            return minValue(Output.of(minValue));
        }

        public Builder recurrenceEndTime(@Nullable Output<String> recurrenceEndTime) {
            $.recurrenceEndTime = recurrenceEndTime;
            return this;
        }

        public Builder recurrenceEndTime(String recurrenceEndTime) {
            return recurrenceEndTime(Output.of(recurrenceEndTime));
        }

        public Builder recurrenceType(@Nullable Output<String> recurrenceType) {
            $.recurrenceType = recurrenceType;
            return this;
        }

        public Builder recurrenceType(String recurrenceType) {
            return recurrenceType(Output.of(recurrenceType));
        }

        public Builder recurrenceValue(@Nullable Output<String> recurrenceValue) {
            $.recurrenceValue = recurrenceValue;
            return this;
        }

        public Builder recurrenceValue(String recurrenceValue) {
            return recurrenceValue(Output.of(recurrenceValue));
        }

        public Builder scalingGroupId(@Nullable Output<String> scalingGroupId) {
            $.scalingGroupId = scalingGroupId;
            return this;
        }

        public Builder scalingGroupId(String scalingGroupId) {
            return scalingGroupId(Output.of(scalingGroupId));
        }

        public Builder scheduledAction(@Nullable Output<String> scheduledAction) {
            $.scheduledAction = scheduledAction;
            return this;
        }

        public Builder scheduledAction(String scheduledAction) {
            return scheduledAction(Output.of(scheduledAction));
        }

        public Builder scheduledTaskName(@Nullable Output<String> scheduledTaskName) {
            $.scheduledTaskName = scheduledTaskName;
            return this;
        }

        public Builder scheduledTaskName(String scheduledTaskName) {
            return scheduledTaskName(Output.of(scheduledTaskName));
        }

        public Builder taskEnabled(@Nullable Output<Boolean> taskEnabled) {
            $.taskEnabled = taskEnabled;
            return this;
        }

        public Builder taskEnabled(Boolean taskEnabled) {
            return taskEnabled(Output.of(taskEnabled));
        }

        public ScheduleState build() {
            return $;
        }
    }

}
