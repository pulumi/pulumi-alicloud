// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.esa.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;


public final class WaitingRoomHostNameAndPathArgs extends com.pulumi.resources.ResourceArgs {

    public static final WaitingRoomHostNameAndPathArgs Empty = new WaitingRoomHostNameAndPathArgs();

    /**
     * The domain name.
     * 
     */
    @Import(name="domain", required=true)
    private Output<String> domain;

    /**
     * @return The domain name.
     * 
     */
    public Output<String> domain() {
        return this.domain;
    }

    /**
     * The path.
     * 
     */
    @Import(name="path", required=true)
    private Output<String> path;

    /**
     * @return The path.
     * 
     */
    public Output<String> path() {
        return this.path;
    }

    /**
     * The subdomain.
     * 
     */
    @Import(name="subdomain", required=true)
    private Output<String> subdomain;

    /**
     * @return The subdomain.
     * 
     */
    public Output<String> subdomain() {
        return this.subdomain;
    }

    private WaitingRoomHostNameAndPathArgs() {}

    private WaitingRoomHostNameAndPathArgs(WaitingRoomHostNameAndPathArgs $) {
        this.domain = $.domain;
        this.path = $.path;
        this.subdomain = $.subdomain;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(WaitingRoomHostNameAndPathArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private WaitingRoomHostNameAndPathArgs $;

        public Builder() {
            $ = new WaitingRoomHostNameAndPathArgs();
        }

        public Builder(WaitingRoomHostNameAndPathArgs defaults) {
            $ = new WaitingRoomHostNameAndPathArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param domain The domain name.
         * 
         * @return builder
         * 
         */
        public Builder domain(Output<String> domain) {
            $.domain = domain;
            return this;
        }

        /**
         * @param domain The domain name.
         * 
         * @return builder
         * 
         */
        public Builder domain(String domain) {
            return domain(Output.of(domain));
        }

        /**
         * @param path The path.
         * 
         * @return builder
         * 
         */
        public Builder path(Output<String> path) {
            $.path = path;
            return this;
        }

        /**
         * @param path The path.
         * 
         * @return builder
         * 
         */
        public Builder path(String path) {
            return path(Output.of(path));
        }

        /**
         * @param subdomain The subdomain.
         * 
         * @return builder
         * 
         */
        public Builder subdomain(Output<String> subdomain) {
            $.subdomain = subdomain;
            return this;
        }

        /**
         * @param subdomain The subdomain.
         * 
         * @return builder
         * 
         */
        public Builder subdomain(String subdomain) {
            return subdomain(Output.of(subdomain));
        }

        public WaitingRoomHostNameAndPathArgs build() {
            if ($.domain == null) {
                throw new MissingRequiredPropertyException("WaitingRoomHostNameAndPathArgs", "domain");
            }
            if ($.path == null) {
                throw new MissingRequiredPropertyException("WaitingRoomHostNameAndPathArgs", "path");
            }
            if ($.subdomain == null) {
                throw new MissingRequiredPropertyException("WaitingRoomHostNameAndPathArgs", "subdomain");
            }
            return $;
        }
    }

}
