// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.ddos;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class BasicDefenseThresholdArgs extends com.pulumi.resources.ResourceArgs {

    public static final BasicDefenseThresholdArgs Empty = new BasicDefenseThresholdArgs();

    /**
     * Specifies the traffic scrubbing threshold. Unit: Mbit/s. The traffic scrubbing threshold cannot exceed the peak inbound or outbound Internet traffic, whichever is larger, of the asset.
     * 
     */
    @Import(name="bps")
    private @Nullable Output<Integer> bps;

    /**
     * @return Specifies the traffic scrubbing threshold. Unit: Mbit/s. The traffic scrubbing threshold cannot exceed the peak inbound or outbound Internet traffic, whichever is larger, of the asset.
     * 
     */
    public Optional<Output<Integer>> bps() {
        return Optional.ofNullable(this.bps);
    }

    /**
     * The type of the threshold to query. Valid values: `defense`,`blackhole`.
     * 
     */
    @Import(name="ddosType", required=true)
    private Output<String> ddosType;

    /**
     * @return The type of the threshold to query. Valid values: `defense`,`blackhole`.
     * 
     */
    public Output<String> ddosType() {
        return this.ddosType;
    }

    /**
     * The ID of the instance.
     * 
     */
    @Import(name="instanceId", required=true)
    private Output<String> instanceId;

    /**
     * @return The ID of the instance.
     * 
     */
    public Output<String> instanceId() {
        return this.instanceId;
    }

    /**
     * The instance type of the public IP address asset. Value: `ecs`,`slb`,`eip`.
     * 
     */
    @Import(name="instanceType", required=true)
    private Output<String> instanceType;

    /**
     * @return The instance type of the public IP address asset. Value: `ecs`,`slb`,`eip`.
     * 
     */
    public Output<String> instanceType() {
        return this.instanceType;
    }

    /**
     * The Internet IP address.
     * 
     */
    @Import(name="internetIp")
    private @Nullable Output<String> internetIp;

    /**
     * @return The Internet IP address.
     * 
     */
    public Optional<Output<String>> internetIp() {
        return Optional.ofNullable(this.internetIp);
    }

    /**
     * Whether it is the system default threshold. Value:
     * 
     */
    @Import(name="isAuto")
    private @Nullable Output<Boolean> isAuto;

    /**
     * @return Whether it is the system default threshold. Value:
     * 
     */
    public Optional<Output<Boolean>> isAuto() {
        return Optional.ofNullable(this.isAuto);
    }

    /**
     * The current message number cleaning threshold. Unit: pps.
     * 
     */
    @Import(name="pps")
    private @Nullable Output<Integer> pps;

    /**
     * @return The current message number cleaning threshold. Unit: pps.
     * 
     */
    public Optional<Output<Integer>> pps() {
        return Optional.ofNullable(this.pps);
    }

    private BasicDefenseThresholdArgs() {}

    private BasicDefenseThresholdArgs(BasicDefenseThresholdArgs $) {
        this.bps = $.bps;
        this.ddosType = $.ddosType;
        this.instanceId = $.instanceId;
        this.instanceType = $.instanceType;
        this.internetIp = $.internetIp;
        this.isAuto = $.isAuto;
        this.pps = $.pps;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BasicDefenseThresholdArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BasicDefenseThresholdArgs $;

        public Builder() {
            $ = new BasicDefenseThresholdArgs();
        }

        public Builder(BasicDefenseThresholdArgs defaults) {
            $ = new BasicDefenseThresholdArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param bps Specifies the traffic scrubbing threshold. Unit: Mbit/s. The traffic scrubbing threshold cannot exceed the peak inbound or outbound Internet traffic, whichever is larger, of the asset.
         * 
         * @return builder
         * 
         */
        public Builder bps(@Nullable Output<Integer> bps) {
            $.bps = bps;
            return this;
        }

        /**
         * @param bps Specifies the traffic scrubbing threshold. Unit: Mbit/s. The traffic scrubbing threshold cannot exceed the peak inbound or outbound Internet traffic, whichever is larger, of the asset.
         * 
         * @return builder
         * 
         */
        public Builder bps(Integer bps) {
            return bps(Output.of(bps));
        }

        /**
         * @param ddosType The type of the threshold to query. Valid values: `defense`,`blackhole`.
         * 
         * @return builder
         * 
         */
        public Builder ddosType(Output<String> ddosType) {
            $.ddosType = ddosType;
            return this;
        }

        /**
         * @param ddosType The type of the threshold to query. Valid values: `defense`,`blackhole`.
         * 
         * @return builder
         * 
         */
        public Builder ddosType(String ddosType) {
            return ddosType(Output.of(ddosType));
        }

        /**
         * @param instanceId The ID of the instance.
         * 
         * @return builder
         * 
         */
        public Builder instanceId(Output<String> instanceId) {
            $.instanceId = instanceId;
            return this;
        }

        /**
         * @param instanceId The ID of the instance.
         * 
         * @return builder
         * 
         */
        public Builder instanceId(String instanceId) {
            return instanceId(Output.of(instanceId));
        }

        /**
         * @param instanceType The instance type of the public IP address asset. Value: `ecs`,`slb`,`eip`.
         * 
         * @return builder
         * 
         */
        public Builder instanceType(Output<String> instanceType) {
            $.instanceType = instanceType;
            return this;
        }

        /**
         * @param instanceType The instance type of the public IP address asset. Value: `ecs`,`slb`,`eip`.
         * 
         * @return builder
         * 
         */
        public Builder instanceType(String instanceType) {
            return instanceType(Output.of(instanceType));
        }

        /**
         * @param internetIp The Internet IP address.
         * 
         * @return builder
         * 
         */
        public Builder internetIp(@Nullable Output<String> internetIp) {
            $.internetIp = internetIp;
            return this;
        }

        /**
         * @param internetIp The Internet IP address.
         * 
         * @return builder
         * 
         */
        public Builder internetIp(String internetIp) {
            return internetIp(Output.of(internetIp));
        }

        /**
         * @param isAuto Whether it is the system default threshold. Value:
         * 
         * @return builder
         * 
         */
        public Builder isAuto(@Nullable Output<Boolean> isAuto) {
            $.isAuto = isAuto;
            return this;
        }

        /**
         * @param isAuto Whether it is the system default threshold. Value:
         * 
         * @return builder
         * 
         */
        public Builder isAuto(Boolean isAuto) {
            return isAuto(Output.of(isAuto));
        }

        /**
         * @param pps The current message number cleaning threshold. Unit: pps.
         * 
         * @return builder
         * 
         */
        public Builder pps(@Nullable Output<Integer> pps) {
            $.pps = pps;
            return this;
        }

        /**
         * @param pps The current message number cleaning threshold. Unit: pps.
         * 
         * @return builder
         * 
         */
        public Builder pps(Integer pps) {
            return pps(Output.of(pps));
        }

        public BasicDefenseThresholdArgs build() {
            if ($.ddosType == null) {
                throw new MissingRequiredPropertyException("BasicDefenseThresholdArgs", "ddosType");
            }
            if ($.instanceId == null) {
                throw new MissingRequiredPropertyException("BasicDefenseThresholdArgs", "instanceId");
            }
            if ($.instanceType == null) {
                throw new MissingRequiredPropertyException("BasicDefenseThresholdArgs", "instanceType");
            }
            return $;
        }
    }

}
