// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.alb.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ServerGroupStickySessionConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final ServerGroupStickySessionConfigArgs Empty = new ServerGroupStickySessionConfigArgs();

    /**
     * The cookie to be configured on the server. **NOTE:** This parameter takes effect when the `sticky_session_enabled` parameter is set to `true` and the `sticky_session_type` parameter is set to `Server`.
     * 
     */
    @Import(name="cookie")
    private @Nullable Output<String> cookie;

    /**
     * @return The cookie to be configured on the server. **NOTE:** This parameter takes effect when the `sticky_session_enabled` parameter is set to `true` and the `sticky_session_type` parameter is set to `Server`.
     * 
     */
    public Optional<Output<String>> cookie() {
        return Optional.ofNullable(this.cookie);
    }

    /**
     * The timeout period of a cookie. Unit: seconds. Default value: `1000`. Valid values: `1` to `86400`. **NOTE:** This parameter takes effect when the `sticky_session_enabled` parameter is set to `true` and the `sticky_session_type` parameter is set to `Insert`.
     * 
     */
    @Import(name="cookieTimeout")
    private @Nullable Output<Integer> cookieTimeout;

    /**
     * @return The timeout period of a cookie. Unit: seconds. Default value: `1000`. Valid values: `1` to `86400`. **NOTE:** This parameter takes effect when the `sticky_session_enabled` parameter is set to `true` and the `sticky_session_type` parameter is set to `Insert`.
     * 
     */
    public Optional<Output<Integer>> cookieTimeout() {
        return Optional.ofNullable(this.cookieTimeout);
    }

    /**
     * Specifies whether to enable session persistence. Default value: `false`. Valid values: `true`, `false`. **NOTE:** This parameter takes effect when the `server_group_type` parameter is set to `Instance` or `Ip`.
     * 
     */
    @Import(name="stickySessionEnabled")
    private @Nullable Output<Boolean> stickySessionEnabled;

    /**
     * @return Specifies whether to enable session persistence. Default value: `false`. Valid values: `true`, `false`. **NOTE:** This parameter takes effect when the `server_group_type` parameter is set to `Instance` or `Ip`.
     * 
     */
    public Optional<Output<Boolean>> stickySessionEnabled() {
        return Optional.ofNullable(this.stickySessionEnabled);
    }

    /**
     * The method that is used to handle a cookie. Valid values: `Server`, `Insert`.
     * 
     */
    @Import(name="stickySessionType")
    private @Nullable Output<String> stickySessionType;

    /**
     * @return The method that is used to handle a cookie. Valid values: `Server`, `Insert`.
     * 
     */
    public Optional<Output<String>> stickySessionType() {
        return Optional.ofNullable(this.stickySessionType);
    }

    private ServerGroupStickySessionConfigArgs() {}

    private ServerGroupStickySessionConfigArgs(ServerGroupStickySessionConfigArgs $) {
        this.cookie = $.cookie;
        this.cookieTimeout = $.cookieTimeout;
        this.stickySessionEnabled = $.stickySessionEnabled;
        this.stickySessionType = $.stickySessionType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServerGroupStickySessionConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServerGroupStickySessionConfigArgs $;

        public Builder() {
            $ = new ServerGroupStickySessionConfigArgs();
        }

        public Builder(ServerGroupStickySessionConfigArgs defaults) {
            $ = new ServerGroupStickySessionConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param cookie The cookie to be configured on the server. **NOTE:** This parameter takes effect when the `sticky_session_enabled` parameter is set to `true` and the `sticky_session_type` parameter is set to `Server`.
         * 
         * @return builder
         * 
         */
        public Builder cookie(@Nullable Output<String> cookie) {
            $.cookie = cookie;
            return this;
        }

        /**
         * @param cookie The cookie to be configured on the server. **NOTE:** This parameter takes effect when the `sticky_session_enabled` parameter is set to `true` and the `sticky_session_type` parameter is set to `Server`.
         * 
         * @return builder
         * 
         */
        public Builder cookie(String cookie) {
            return cookie(Output.of(cookie));
        }

        /**
         * @param cookieTimeout The timeout period of a cookie. Unit: seconds. Default value: `1000`. Valid values: `1` to `86400`. **NOTE:** This parameter takes effect when the `sticky_session_enabled` parameter is set to `true` and the `sticky_session_type` parameter is set to `Insert`.
         * 
         * @return builder
         * 
         */
        public Builder cookieTimeout(@Nullable Output<Integer> cookieTimeout) {
            $.cookieTimeout = cookieTimeout;
            return this;
        }

        /**
         * @param cookieTimeout The timeout period of a cookie. Unit: seconds. Default value: `1000`. Valid values: `1` to `86400`. **NOTE:** This parameter takes effect when the `sticky_session_enabled` parameter is set to `true` and the `sticky_session_type` parameter is set to `Insert`.
         * 
         * @return builder
         * 
         */
        public Builder cookieTimeout(Integer cookieTimeout) {
            return cookieTimeout(Output.of(cookieTimeout));
        }

        /**
         * @param stickySessionEnabled Specifies whether to enable session persistence. Default value: `false`. Valid values: `true`, `false`. **NOTE:** This parameter takes effect when the `server_group_type` parameter is set to `Instance` or `Ip`.
         * 
         * @return builder
         * 
         */
        public Builder stickySessionEnabled(@Nullable Output<Boolean> stickySessionEnabled) {
            $.stickySessionEnabled = stickySessionEnabled;
            return this;
        }

        /**
         * @param stickySessionEnabled Specifies whether to enable session persistence. Default value: `false`. Valid values: `true`, `false`. **NOTE:** This parameter takes effect when the `server_group_type` parameter is set to `Instance` or `Ip`.
         * 
         * @return builder
         * 
         */
        public Builder stickySessionEnabled(Boolean stickySessionEnabled) {
            return stickySessionEnabled(Output.of(stickySessionEnabled));
        }

        /**
         * @param stickySessionType The method that is used to handle a cookie. Valid values: `Server`, `Insert`.
         * 
         * @return builder
         * 
         */
        public Builder stickySessionType(@Nullable Output<String> stickySessionType) {
            $.stickySessionType = stickySessionType;
            return this;
        }

        /**
         * @param stickySessionType The method that is used to handle a cookie. Valid values: `Server`, `Insert`.
         * 
         * @return builder
         * 
         */
        public Builder stickySessionType(String stickySessionType) {
            return stickySessionType(Output.of(stickySessionType));
        }

        public ServerGroupStickySessionConfigArgs build() {
            return $;
        }
    }

}
