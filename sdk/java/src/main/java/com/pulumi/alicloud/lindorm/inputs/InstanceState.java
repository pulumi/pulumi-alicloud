// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.lindorm.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class InstanceState extends com.pulumi.resources.ResourceArgs {

    public static final InstanceState Empty = new InstanceState();

    /**
     * The multi-availability zone instance, coordinating the virtual switch ID of the availability zone, the switch must be located under the availability zone corresponding to the ArbiterZoneId. This parameter is required if you need to create multiple availability zone instances.
     * 
     */
    @Import(name="arbiterVswitchId")
    private @Nullable Output<String> arbiterVswitchId;

    /**
     * @return The multi-availability zone instance, coordinating the virtual switch ID of the availability zone, the switch must be located under the availability zone corresponding to the ArbiterZoneId. This parameter is required if you need to create multiple availability zone instances.
     * 
     */
    public Optional<Output<String>> arbiterVswitchId() {
        return Optional.ofNullable(this.arbiterVswitchId);
    }

    /**
     * The multiple Availability Zone Instance, the availability zone ID of the coordinating availability zone. required if you need to create multiple availability zone instances.
     * 
     */
    @Import(name="arbiterZoneId")
    private @Nullable Output<String> arbiterZoneId;

    /**
     * @return The multiple Availability Zone Instance, the availability zone ID of the coordinating availability zone. required if you need to create multiple availability zone instances.
     * 
     */
    public Optional<Output<String>> arbiterZoneId() {
        return Optional.ofNullable(this.arbiterZoneId);
    }

    /**
     * The deployment architecture. If you do not fill in this parameter, the default is 1.0. to create multiple availability instances, fill in 2.0. if you need to create multiple availability instances, this parameter is required. Valid values: `1.0` to `2.0`.
     * 
     */
    @Import(name="archVersion")
    private @Nullable Output<String> archVersion;

    /**
     * @return The deployment architecture. If you do not fill in this parameter, the default is 1.0. to create multiple availability instances, fill in 2.0. if you need to create multiple availability instances, this parameter is required. Valid values: `1.0` to `2.0`.
     * 
     */
    public Optional<Output<String>> archVersion() {
        return Optional.ofNullable(this.archVersion);
    }

    /**
     * The cold storage capacity of the instance. Unit: GB.
     * 
     */
    @Import(name="coldStorage")
    private @Nullable Output<Integer> coldStorage;

    /**
     * @return The cold storage capacity of the instance. Unit: GB.
     * 
     */
    public Optional<Output<Integer>> coldStorage() {
        return Optional.ofNullable(this.coldStorage);
    }

    /**
     * The multiple availability zone instances, CORE single node capacity. required if you want to create multiple availability zone instances. Valid values: `400` to `64000`.
     * 
     */
    @Import(name="coreSingleStorage")
    private @Nullable Output<Integer> coreSingleStorage;

    /**
     * @return The multiple availability zone instances, CORE single node capacity. required if you want to create multiple availability zone instances. Valid values: `400` to `64000`.
     * 
     */
    public Optional<Output<Integer>> coreSingleStorage() {
        return Optional.ofNullable(this.coreSingleStorage);
    }

    /**
     * The core spec. When `disk_category` is `local_ssd_pro` or `local_hdd_pro`, this filed is valid.
     * - When `disk_category` is `local_ssd_pro`, the valid values is `lindorm.i2.xlarge`, `lindorm.i2.2xlarge`, `lindorm.i2.4xlarge`, `lindorm.i2.8xlarge`.
     * - When `disk_category` is `local_hdd_pro`, the valid values is `lindorm.d2c.6xlarge`, `lindorm.d2c.12xlarge`, `lindorm.d2c.24xlarge`, `lindorm.d2s.5xlarge`, `lindorm.d2s.10xlarge`, `lindorm.d1.2xlarge`, `lindorm.d1.4xlarge`, `lindorm.d1.6xlarge`.
     * 
     */
    @Import(name="coreSpec")
    private @Nullable Output<String> coreSpec;

    /**
     * @return The core spec. When `disk_category` is `local_ssd_pro` or `local_hdd_pro`, this filed is valid.
     * - When `disk_category` is `local_ssd_pro`, the valid values is `lindorm.i2.xlarge`, `lindorm.i2.2xlarge`, `lindorm.i2.4xlarge`, `lindorm.i2.8xlarge`.
     * - When `disk_category` is `local_hdd_pro`, the valid values is `lindorm.d2c.6xlarge`, `lindorm.d2c.12xlarge`, `lindorm.d2c.24xlarge`, `lindorm.d2s.5xlarge`, `lindorm.d2s.10xlarge`, `lindorm.d1.2xlarge`, `lindorm.d1.4xlarge`, `lindorm.d1.6xlarge`.
     * 
     */
    public Optional<Output<String>> coreSpec() {
        return Optional.ofNullable(this.coreSpec);
    }

    /**
     * The deletion protection of instance.
     * 
     */
    @Import(name="deletionProection")
    private @Nullable Output<Boolean> deletionProection;

    /**
     * @return The deletion protection of instance.
     * 
     */
    public Optional<Output<Boolean>> deletionProection() {
        return Optional.ofNullable(this.deletionProection);
    }

    /**
     * The disk type of instance. Valid values: `cloud_efficiency`, `cloud_ssd`, `cloud_essd`, `cloud_essd_pl0`, `capacity_cloud_storage`, `local_ssd_pro`, `local_hdd_pro`. **NOTE:** From version 1.207.0, `disk_category` can be set to `cloud_essd_pl0`.
     * 
     */
    @Import(name="diskCategory")
    private @Nullable Output<String> diskCategory;

    /**
     * @return The disk type of instance. Valid values: `cloud_efficiency`, `cloud_ssd`, `cloud_essd`, `cloud_essd_pl0`, `capacity_cloud_storage`, `local_ssd_pro`, `local_hdd_pro`. **NOTE:** From version 1.207.0, `disk_category` can be set to `cloud_essd_pl0`.
     * 
     */
    public Optional<Output<String>> diskCategory() {
        return Optional.ofNullable(this.diskCategory);
    }

    /**
     * The duration of paid. Valid when the `payment_type` is `Subscription`.  When `pricing_cycle` set to `Month`, the valid value id `1` to `9`.  When `pricing_cycle` set to `Year`, the valid value id `1` to `3`.
     * 
     */
    @Import(name="duration")
    private @Nullable Output<String> duration;

    /**
     * @return The duration of paid. Valid when the `payment_type` is `Subscription`.  When `pricing_cycle` set to `Month`, the valid value id `1` to `9`.  When `pricing_cycle` set to `Year`, the valid value id `1` to `3`.
     * 
     */
    public Optional<Output<String>> duration() {
        return Optional.ofNullable(this.duration);
    }

    /**
     * (Available since v1.163.0) Whether to enable file engine.
     * 
     */
    @Import(name="enabledFileEngine")
    private @Nullable Output<Boolean> enabledFileEngine;

    /**
     * @return (Available since v1.163.0) Whether to enable file engine.
     * 
     */
    public Optional<Output<Boolean>> enabledFileEngine() {
        return Optional.ofNullable(this.enabledFileEngine);
    }

    /**
     * (Available since v1.163.0) Whether to enable lts engine.
     * 
     */
    @Import(name="enabledLtsEngine")
    private @Nullable Output<Boolean> enabledLtsEngine;

    /**
     * @return (Available since v1.163.0) Whether to enable lts engine.
     * 
     */
    public Optional<Output<Boolean>> enabledLtsEngine() {
        return Optional.ofNullable(this.enabledLtsEngine);
    }

    /**
     * (Available since v1.163.0) Whether to enable search engine.
     * 
     */
    @Import(name="enabledSearchEngine")
    private @Nullable Output<Boolean> enabledSearchEngine;

    /**
     * @return (Available since v1.163.0) Whether to enable search engine.
     * 
     */
    public Optional<Output<Boolean>> enabledSearchEngine() {
        return Optional.ofNullable(this.enabledSearchEngine);
    }

    /**
     * (Available since v1.163.0) Whether to enable table engine.
     * 
     */
    @Import(name="enabledTableEngine")
    private @Nullable Output<Boolean> enabledTableEngine;

    /**
     * @return (Available since v1.163.0) Whether to enable table engine.
     * 
     */
    public Optional<Output<Boolean>> enabledTableEngine() {
        return Optional.ofNullable(this.enabledTableEngine);
    }

    /**
     * (Available since v1.163.0) Whether to enable time serires engine.
     * 
     */
    @Import(name="enabledTimeSeriresEngine")
    private @Nullable Output<Boolean> enabledTimeSeriresEngine;

    /**
     * @return (Available since v1.163.0) Whether to enable time serires engine.
     * 
     */
    public Optional<Output<Boolean>> enabledTimeSeriresEngine() {
        return Optional.ofNullable(this.enabledTimeSeriresEngine);
    }

    /**
     * The count of file engine.
     * 
     */
    @Import(name="fileEngineNodeCount")
    private @Nullable Output<Integer> fileEngineNodeCount;

    /**
     * @return The count of file engine.
     * 
     */
    public Optional<Output<Integer>> fileEngineNodeCount() {
        return Optional.ofNullable(this.fileEngineNodeCount);
    }

    /**
     * The specification of file engine. Valid values: `lindorm.c.xlarge`.
     * 
     */
    @Import(name="fileEngineSpecification")
    private @Nullable Output<String> fileEngineSpecification;

    /**
     * @return The specification of file engine. Valid values: `lindorm.c.xlarge`.
     * 
     */
    public Optional<Output<String>> fileEngineSpecification() {
        return Optional.ofNullable(this.fileEngineSpecification);
    }

    /**
     * The group name.
     * 
     */
    @Import(name="groupName")
    private @Nullable Output<String> groupName;

    /**
     * @return The group name.
     * 
     */
    public Optional<Output<String>> groupName() {
        return Optional.ofNullable(this.groupName);
    }

    /**
     * The name of the instance.
     * 
     */
    @Import(name="instanceName")
    private @Nullable Output<String> instanceName;

    /**
     * @return The name of the instance.
     * 
     */
    public Optional<Output<String>> instanceName() {
        return Optional.ofNullable(this.instanceName);
    }

    /**
     * The storage capacity of the instance. Unit: GB. For example, the value 50 indicates 50 GB.
     * 
     */
    @Import(name="instanceStorage")
    private @Nullable Output<String> instanceStorage;

    /**
     * @return The storage capacity of the instance. Unit: GB. For example, the value 50 indicates 50 GB.
     * 
     */
    public Optional<Output<String>> instanceStorage() {
        return Optional.ofNullable(this.instanceStorage);
    }

    /**
     * The ip white list of instance.
     * 
     */
    @Import(name="ipWhiteLists")
    private @Nullable Output<List<String>> ipWhiteLists;

    /**
     * @return The ip white list of instance.
     * 
     */
    public Optional<Output<List<String>>> ipWhiteLists() {
        return Optional.ofNullable(this.ipWhiteLists);
    }

    /**
     * The multi-available zone instance, log node disk type. required if you need to create multiple availability zone instances. Valid values: `cloud_efficiency`, `cloud_ssd`.
     * 
     */
    @Import(name="logDiskCategory")
    private @Nullable Output<String> logDiskCategory;

    /**
     * @return The multi-available zone instance, log node disk type. required if you need to create multiple availability zone instances. Valid values: `cloud_efficiency`, `cloud_ssd`.
     * 
     */
    public Optional<Output<String>> logDiskCategory() {
        return Optional.ofNullable(this.logDiskCategory);
    }

    /**
     * The multiple Availability Zone Instance, number of log nodes. this parameter is required if you want to create multiple availability zone instances. Valid values: `4` to `400`.
     * 
     */
    @Import(name="logNum")
    private @Nullable Output<Integer> logNum;

    /**
     * @return The multiple Availability Zone Instance, number of log nodes. this parameter is required if you want to create multiple availability zone instances. Valid values: `4` to `400`.
     * 
     */
    public Optional<Output<Integer>> logNum() {
        return Optional.ofNullable(this.logNum);
    }

    /**
     * The multi-availability instance, log single-node disk capacity. This parameter is required if you want to create multiple availability zone instances. Valid values: `400` to `64000`.
     * 
     */
    @Import(name="logSingleStorage")
    private @Nullable Output<Integer> logSingleStorage;

    /**
     * @return The multi-availability instance, log single-node disk capacity. This parameter is required if you want to create multiple availability zone instances. Valid values: `400` to `64000`.
     * 
     */
    public Optional<Output<Integer>> logSingleStorage() {
        return Optional.ofNullable(this.logSingleStorage);
    }

    /**
     * The multiple availability zone instances, log node specification. required if you need to create multiple availability zone instances. Valid values: `lindorm.sn1.large`, `lindorm.sn1.2xlarge`.
     * 
     */
    @Import(name="logSpec")
    private @Nullable Output<String> logSpec;

    /**
     * @return The multiple availability zone instances, log node specification. required if you need to create multiple availability zone instances. Valid values: `lindorm.sn1.large`, `lindorm.sn1.2xlarge`.
     * 
     */
    public Optional<Output<String>> logSpec() {
        return Optional.ofNullable(this.logSpec);
    }

    /**
     * The count of lindorm tunnel service.
     * 
     */
    @Import(name="ltsNodeCount")
    private @Nullable Output<Integer> ltsNodeCount;

    /**
     * @return The count of lindorm tunnel service.
     * 
     */
    public Optional<Output<Integer>> ltsNodeCount() {
        return Optional.ofNullable(this.ltsNodeCount);
    }

    /**
     * The specification of lindorm tunnel service. Valid values: `lindorm.g.2xlarge`, `lindorm.g.xlarge`.
     * 
     */
    @Import(name="ltsNodeSpecification")
    private @Nullable Output<String> ltsNodeSpecification;

    /**
     * @return The specification of lindorm tunnel service. Valid values: `lindorm.g.2xlarge`, `lindorm.g.xlarge`.
     * 
     */
    public Optional<Output<String>> ltsNodeSpecification() {
        return Optional.ofNullable(this.ltsNodeSpecification);
    }

    /**
     * The multi-zone combinations. Availability zone combinations are supported on the sale page. required if you need to create multiple availability zone instances. Valid values: `ap-southeast-5abc-aliyun`, `cn-hangzhou-ehi-aliyun`, `cn-beijing-acd-aliyun`, `ap-southeast-1-abc-aliyun`, `cn-zhangjiakou-abc-aliyun`, `cn-shanghai-efg-aliyun`, `cn-shanghai-abd-aliyun`, `cn-hangzhou-bef-aliyun`, `cn-hangzhou-bce-aliyun`, `cn-beijing-fgh-aliyun`, `cn-shenzhen-abc-aliyun`.
     * 
     */
    @Import(name="multiZoneCombination")
    private @Nullable Output<String> multiZoneCombination;

    /**
     * @return The multi-zone combinations. Availability zone combinations are supported on the sale page. required if you need to create multiple availability zone instances. Valid values: `ap-southeast-5abc-aliyun`, `cn-hangzhou-ehi-aliyun`, `cn-beijing-acd-aliyun`, `ap-southeast-1-abc-aliyun`, `cn-zhangjiakou-abc-aliyun`, `cn-shanghai-efg-aliyun`, `cn-shanghai-abd-aliyun`, `cn-hangzhou-bef-aliyun`, `cn-hangzhou-bce-aliyun`, `cn-beijing-fgh-aliyun`, `cn-shenzhen-abc-aliyun`.
     * 
     */
    public Optional<Output<String>> multiZoneCombination() {
        return Optional.ofNullable(this.multiZoneCombination);
    }

    /**
     * The billing method. Valid values: `PayAsYouGo` and `Subscription`.
     * 
     */
    @Import(name="paymentType")
    private @Nullable Output<String> paymentType;

    /**
     * @return The billing method. Valid values: `PayAsYouGo` and `Subscription`.
     * 
     */
    public Optional<Output<String>> paymentType() {
        return Optional.ofNullable(this.paymentType);
    }

    /**
     * The count of phoenix.
     * 
     */
    @Import(name="phoenixNodeCount")
    private @Nullable Output<Integer> phoenixNodeCount;

    /**
     * @return The count of phoenix.
     * 
     */
    public Optional<Output<Integer>> phoenixNodeCount() {
        return Optional.ofNullable(this.phoenixNodeCount);
    }

    /**
     * The specification of phoenix. Valid values: `lindorm.c.2xlarge`, `lindorm.c.4xlarge`, `lindorm.c.8xlarge`, `lindorm.c.xlarge`, `lindorm.g.2xlarge`, `lindorm.g.4xlarge`, `lindorm.g.8xlarge`, `lindorm.g.xlarge`.
     * 
     */
    @Import(name="phoenixNodeSpecification")
    private @Nullable Output<String> phoenixNodeSpecification;

    /**
     * @return The specification of phoenix. Valid values: `lindorm.c.2xlarge`, `lindorm.c.4xlarge`, `lindorm.c.8xlarge`, `lindorm.c.xlarge`, `lindorm.g.2xlarge`, `lindorm.g.4xlarge`, `lindorm.g.8xlarge`, `lindorm.g.xlarge`.
     * 
     */
    public Optional<Output<String>> phoenixNodeSpecification() {
        return Optional.ofNullable(this.phoenixNodeSpecification);
    }

    /**
     * The pricing cycle. Valid when the `payment_type` is `Subscription`. Valid values: `Month` and `Year`.
     * 
     */
    @Import(name="pricingCycle")
    private @Nullable Output<String> pricingCycle;

    /**
     * @return The pricing cycle. Valid when the `payment_type` is `Subscription`. Valid values: `Month` and `Year`.
     * 
     */
    public Optional<Output<String>> pricingCycle() {
        return Optional.ofNullable(this.pricingCycle);
    }

    /**
     * Multi-available zone instances, the virtual switch ID of the primary available zone, must be under the available zone corresponding to the PrimaryZoneId. required if you need to create multiple availability zone instances.
     * 
     */
    @Import(name="primaryVswitchId")
    private @Nullable Output<String> primaryVswitchId;

    /**
     * @return Multi-available zone instances, the virtual switch ID of the primary available zone, must be under the available zone corresponding to the PrimaryZoneId. required if you need to create multiple availability zone instances.
     * 
     */
    public Optional<Output<String>> primaryVswitchId() {
        return Optional.ofNullable(this.primaryVswitchId);
    }

    /**
     * Multi-availability zone instance with the availability zone ID of the main availability zone. required if you need to create multiple availability zone instances.
     * 
     */
    @Import(name="primaryZoneId")
    private @Nullable Output<String> primaryZoneId;

    /**
     * @return Multi-availability zone instance with the availability zone ID of the main availability zone. required if you need to create multiple availability zone instances.
     * 
     */
    public Optional<Output<String>> primaryZoneId() {
        return Optional.ofNullable(this.primaryZoneId);
    }

    /**
     * The ID of the resource group.
     * 
     */
    @Import(name="resourceGroupId")
    private @Nullable Output<String> resourceGroupId;

    /**
     * @return The ID of the resource group.
     * 
     */
    public Optional<Output<String>> resourceGroupId() {
        return Optional.ofNullable(this.resourceGroupId);
    }

    /**
     * The count of search engine.
     * 
     */
    @Import(name="searchEngineNodeCount")
    private @Nullable Output<Integer> searchEngineNodeCount;

    /**
     * @return The count of search engine.
     * 
     */
    public Optional<Output<Integer>> searchEngineNodeCount() {
        return Optional.ofNullable(this.searchEngineNodeCount);
    }

    /**
     * The specification of search engine. Valid values: `lindorm.g.2xlarge`, `lindorm.g.4xlarge`, `lindorm.g.8xlarge`, `lindorm.g.xlarge`.
     * 
     */
    @Import(name="searchEngineSpecification")
    private @Nullable Output<String> searchEngineSpecification;

    /**
     * @return The specification of search engine. Valid values: `lindorm.g.2xlarge`, `lindorm.g.4xlarge`, `lindorm.g.8xlarge`, `lindorm.g.xlarge`.
     * 
     */
    public Optional<Output<String>> searchEngineSpecification() {
        return Optional.ofNullable(this.searchEngineSpecification);
    }

    /**
     * (Available since v1.196.0) The instance type.
     * 
     */
    @Import(name="serviceType")
    private @Nullable Output<String> serviceType;

    /**
     * @return (Available since v1.196.0) The instance type.
     * 
     */
    public Optional<Output<String>> serviceType() {
        return Optional.ofNullable(this.serviceType);
    }

    /**
     * The multiple availability zone instances, the virtual switch ID of the ready availability zone must be under the availability zone corresponding to the StandbyZoneId. required if you need to create multiple availability zone instances.
     * 
     */
    @Import(name="standbyVswitchId")
    private @Nullable Output<String> standbyVswitchId;

    /**
     * @return The multiple availability zone instances, the virtual switch ID of the ready availability zone must be under the availability zone corresponding to the StandbyZoneId. required if you need to create multiple availability zone instances.
     * 
     */
    public Optional<Output<String>> standbyVswitchId() {
        return Optional.ofNullable(this.standbyVswitchId);
    }

    /**
     * The multiple availability zone instances with availability zone IDs for the prepared availability zones. required if you need to create multiple availability zone instances.
     * 
     */
    @Import(name="standbyZoneId")
    private @Nullable Output<String> standbyZoneId;

    /**
     * @return The multiple availability zone instances with availability zone IDs for the prepared availability zones. required if you need to create multiple availability zone instances.
     * 
     */
    public Optional<Output<String>> standbyZoneId() {
        return Optional.ofNullable(this.standbyZoneId);
    }

    /**
     * The status of Instance.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return The status of Instance.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * The count of table engine.
     * 
     */
    @Import(name="tableEngineNodeCount")
    private @Nullable Output<Integer> tableEngineNodeCount;

    /**
     * @return The count of table engine.
     * 
     */
    public Optional<Output<Integer>> tableEngineNodeCount() {
        return Optional.ofNullable(this.tableEngineNodeCount);
    }

    /**
     * The specification of  table engine. Valid values: `lindorm.c.2xlarge`, `lindorm.c.4xlarge`, `lindorm.c.8xlarge`, `lindorm.g.xlarge`, `lindorm.g.2xlarge`, `lindorm.g.4xlarge`, `lindorm.g.8xlarge`.
     * 
     */
    @Import(name="tableEngineSpecification")
    private @Nullable Output<String> tableEngineSpecification;

    /**
     * @return The specification of  table engine. Valid values: `lindorm.c.2xlarge`, `lindorm.c.4xlarge`, `lindorm.c.8xlarge`, `lindorm.g.xlarge`, `lindorm.g.2xlarge`, `lindorm.g.4xlarge`, `lindorm.g.8xlarge`.
     * 
     */
    public Optional<Output<String>> tableEngineSpecification() {
        return Optional.ofNullable(this.tableEngineSpecification);
    }

    /**
     * A mapping of tags to assign to the resource.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,Object>> tags;

    /**
     * @return A mapping of tags to assign to the resource.
     * 
     */
    public Optional<Output<Map<String,Object>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * The count of time series engine.
     * 
     */
    @Import(name="timeSeriesEngineNodeCount")
    private @Nullable Output<Integer> timeSeriesEngineNodeCount;

    /**
     * @return The count of time series engine.
     * 
     */
    public Optional<Output<Integer>> timeSeriesEngineNodeCount() {
        return Optional.ofNullable(this.timeSeriesEngineNodeCount);
    }

    /**
     * The specification of time series engine. Valid values: `lindorm.g.xlarge`, `lindorm.g.2xlarge`, `lindorm.g.4xlarge`, `lindorm.g.8xlarge`, `lindorm.r.8xlarge`.
     * 
     */
    @Import(name="timeSeriesEngineSpecification")
    private @Nullable Output<String> timeSeriesEngineSpecification;

    /**
     * @return The specification of time series engine. Valid values: `lindorm.g.xlarge`, `lindorm.g.2xlarge`, `lindorm.g.4xlarge`, `lindorm.g.8xlarge`, `lindorm.r.8xlarge`.
     * 
     */
    public Optional<Output<String>> timeSeriesEngineSpecification() {
        return Optional.ofNullable(this.timeSeriesEngineSpecification);
    }

    /**
     * Field `time_serires_engine_specification` has been deprecated from provider version 1.182.0. New field `time_series_engine_specification` instead.
     * 
     * @deprecated
     * Field &#39;time_serires_engine_specification&#39; has been deprecated from provider version 1.182.0. New field &#39;time_series_engine_specification&#39; instead.
     * 
     */
    @Deprecated /* Field 'time_serires_engine_specification' has been deprecated from provider version 1.182.0. New field 'time_series_engine_specification' instead. */
    @Import(name="timeSeriresEngineSpecification")
    private @Nullable Output<String> timeSeriresEngineSpecification;

    /**
     * @return Field `time_serires_engine_specification` has been deprecated from provider version 1.182.0. New field `time_series_engine_specification` instead.
     * 
     * @deprecated
     * Field &#39;time_serires_engine_specification&#39; has been deprecated from provider version 1.182.0. New field &#39;time_series_engine_specification&#39; instead.
     * 
     */
    @Deprecated /* Field 'time_serires_engine_specification' has been deprecated from provider version 1.182.0. New field 'time_series_engine_specification' instead. */
    public Optional<Output<String>> timeSeriresEngineSpecification() {
        return Optional.ofNullable(this.timeSeriresEngineSpecification);
    }

    /**
     * The VPC ID of the instance.
     * 
     */
    @Import(name="vpcId")
    private @Nullable Output<String> vpcId;

    /**
     * @return The VPC ID of the instance.
     * 
     */
    public Optional<Output<String>> vpcId() {
        return Optional.ofNullable(this.vpcId);
    }

    /**
     * The vswitch id.
     * 
     */
    @Import(name="vswitchId")
    private @Nullable Output<String> vswitchId;

    /**
     * @return The vswitch id.
     * 
     */
    public Optional<Output<String>> vswitchId() {
        return Optional.ofNullable(this.vswitchId);
    }

    /**
     * The zone ID of the instance.
     * 
     */
    @Import(name="zoneId")
    private @Nullable Output<String> zoneId;

    /**
     * @return The zone ID of the instance.
     * 
     */
    public Optional<Output<String>> zoneId() {
        return Optional.ofNullable(this.zoneId);
    }

    private InstanceState() {}

    private InstanceState(InstanceState $) {
        this.arbiterVswitchId = $.arbiterVswitchId;
        this.arbiterZoneId = $.arbiterZoneId;
        this.archVersion = $.archVersion;
        this.coldStorage = $.coldStorage;
        this.coreSingleStorage = $.coreSingleStorage;
        this.coreSpec = $.coreSpec;
        this.deletionProection = $.deletionProection;
        this.diskCategory = $.diskCategory;
        this.duration = $.duration;
        this.enabledFileEngine = $.enabledFileEngine;
        this.enabledLtsEngine = $.enabledLtsEngine;
        this.enabledSearchEngine = $.enabledSearchEngine;
        this.enabledTableEngine = $.enabledTableEngine;
        this.enabledTimeSeriresEngine = $.enabledTimeSeriresEngine;
        this.fileEngineNodeCount = $.fileEngineNodeCount;
        this.fileEngineSpecification = $.fileEngineSpecification;
        this.groupName = $.groupName;
        this.instanceName = $.instanceName;
        this.instanceStorage = $.instanceStorage;
        this.ipWhiteLists = $.ipWhiteLists;
        this.logDiskCategory = $.logDiskCategory;
        this.logNum = $.logNum;
        this.logSingleStorage = $.logSingleStorage;
        this.logSpec = $.logSpec;
        this.ltsNodeCount = $.ltsNodeCount;
        this.ltsNodeSpecification = $.ltsNodeSpecification;
        this.multiZoneCombination = $.multiZoneCombination;
        this.paymentType = $.paymentType;
        this.phoenixNodeCount = $.phoenixNodeCount;
        this.phoenixNodeSpecification = $.phoenixNodeSpecification;
        this.pricingCycle = $.pricingCycle;
        this.primaryVswitchId = $.primaryVswitchId;
        this.primaryZoneId = $.primaryZoneId;
        this.resourceGroupId = $.resourceGroupId;
        this.searchEngineNodeCount = $.searchEngineNodeCount;
        this.searchEngineSpecification = $.searchEngineSpecification;
        this.serviceType = $.serviceType;
        this.standbyVswitchId = $.standbyVswitchId;
        this.standbyZoneId = $.standbyZoneId;
        this.status = $.status;
        this.tableEngineNodeCount = $.tableEngineNodeCount;
        this.tableEngineSpecification = $.tableEngineSpecification;
        this.tags = $.tags;
        this.timeSeriesEngineNodeCount = $.timeSeriesEngineNodeCount;
        this.timeSeriesEngineSpecification = $.timeSeriesEngineSpecification;
        this.timeSeriresEngineSpecification = $.timeSeriresEngineSpecification;
        this.vpcId = $.vpcId;
        this.vswitchId = $.vswitchId;
        this.zoneId = $.zoneId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(InstanceState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private InstanceState $;

        public Builder() {
            $ = new InstanceState();
        }

        public Builder(InstanceState defaults) {
            $ = new InstanceState(Objects.requireNonNull(defaults));
        }

        /**
         * @param arbiterVswitchId The multi-availability zone instance, coordinating the virtual switch ID of the availability zone, the switch must be located under the availability zone corresponding to the ArbiterZoneId. This parameter is required if you need to create multiple availability zone instances.
         * 
         * @return builder
         * 
         */
        public Builder arbiterVswitchId(@Nullable Output<String> arbiterVswitchId) {
            $.arbiterVswitchId = arbiterVswitchId;
            return this;
        }

        /**
         * @param arbiterVswitchId The multi-availability zone instance, coordinating the virtual switch ID of the availability zone, the switch must be located under the availability zone corresponding to the ArbiterZoneId. This parameter is required if you need to create multiple availability zone instances.
         * 
         * @return builder
         * 
         */
        public Builder arbiterVswitchId(String arbiterVswitchId) {
            return arbiterVswitchId(Output.of(arbiterVswitchId));
        }

        /**
         * @param arbiterZoneId The multiple Availability Zone Instance, the availability zone ID of the coordinating availability zone. required if you need to create multiple availability zone instances.
         * 
         * @return builder
         * 
         */
        public Builder arbiterZoneId(@Nullable Output<String> arbiterZoneId) {
            $.arbiterZoneId = arbiterZoneId;
            return this;
        }

        /**
         * @param arbiterZoneId The multiple Availability Zone Instance, the availability zone ID of the coordinating availability zone. required if you need to create multiple availability zone instances.
         * 
         * @return builder
         * 
         */
        public Builder arbiterZoneId(String arbiterZoneId) {
            return arbiterZoneId(Output.of(arbiterZoneId));
        }

        /**
         * @param archVersion The deployment architecture. If you do not fill in this parameter, the default is 1.0. to create multiple availability instances, fill in 2.0. if you need to create multiple availability instances, this parameter is required. Valid values: `1.0` to `2.0`.
         * 
         * @return builder
         * 
         */
        public Builder archVersion(@Nullable Output<String> archVersion) {
            $.archVersion = archVersion;
            return this;
        }

        /**
         * @param archVersion The deployment architecture. If you do not fill in this parameter, the default is 1.0. to create multiple availability instances, fill in 2.0. if you need to create multiple availability instances, this parameter is required. Valid values: `1.0` to `2.0`.
         * 
         * @return builder
         * 
         */
        public Builder archVersion(String archVersion) {
            return archVersion(Output.of(archVersion));
        }

        /**
         * @param coldStorage The cold storage capacity of the instance. Unit: GB.
         * 
         * @return builder
         * 
         */
        public Builder coldStorage(@Nullable Output<Integer> coldStorage) {
            $.coldStorage = coldStorage;
            return this;
        }

        /**
         * @param coldStorage The cold storage capacity of the instance. Unit: GB.
         * 
         * @return builder
         * 
         */
        public Builder coldStorage(Integer coldStorage) {
            return coldStorage(Output.of(coldStorage));
        }

        /**
         * @param coreSingleStorage The multiple availability zone instances, CORE single node capacity. required if you want to create multiple availability zone instances. Valid values: `400` to `64000`.
         * 
         * @return builder
         * 
         */
        public Builder coreSingleStorage(@Nullable Output<Integer> coreSingleStorage) {
            $.coreSingleStorage = coreSingleStorage;
            return this;
        }

        /**
         * @param coreSingleStorage The multiple availability zone instances, CORE single node capacity. required if you want to create multiple availability zone instances. Valid values: `400` to `64000`.
         * 
         * @return builder
         * 
         */
        public Builder coreSingleStorage(Integer coreSingleStorage) {
            return coreSingleStorage(Output.of(coreSingleStorage));
        }

        /**
         * @param coreSpec The core spec. When `disk_category` is `local_ssd_pro` or `local_hdd_pro`, this filed is valid.
         * - When `disk_category` is `local_ssd_pro`, the valid values is `lindorm.i2.xlarge`, `lindorm.i2.2xlarge`, `lindorm.i2.4xlarge`, `lindorm.i2.8xlarge`.
         * - When `disk_category` is `local_hdd_pro`, the valid values is `lindorm.d2c.6xlarge`, `lindorm.d2c.12xlarge`, `lindorm.d2c.24xlarge`, `lindorm.d2s.5xlarge`, `lindorm.d2s.10xlarge`, `lindorm.d1.2xlarge`, `lindorm.d1.4xlarge`, `lindorm.d1.6xlarge`.
         * 
         * @return builder
         * 
         */
        public Builder coreSpec(@Nullable Output<String> coreSpec) {
            $.coreSpec = coreSpec;
            return this;
        }

        /**
         * @param coreSpec The core spec. When `disk_category` is `local_ssd_pro` or `local_hdd_pro`, this filed is valid.
         * - When `disk_category` is `local_ssd_pro`, the valid values is `lindorm.i2.xlarge`, `lindorm.i2.2xlarge`, `lindorm.i2.4xlarge`, `lindorm.i2.8xlarge`.
         * - When `disk_category` is `local_hdd_pro`, the valid values is `lindorm.d2c.6xlarge`, `lindorm.d2c.12xlarge`, `lindorm.d2c.24xlarge`, `lindorm.d2s.5xlarge`, `lindorm.d2s.10xlarge`, `lindorm.d1.2xlarge`, `lindorm.d1.4xlarge`, `lindorm.d1.6xlarge`.
         * 
         * @return builder
         * 
         */
        public Builder coreSpec(String coreSpec) {
            return coreSpec(Output.of(coreSpec));
        }

        /**
         * @param deletionProection The deletion protection of instance.
         * 
         * @return builder
         * 
         */
        public Builder deletionProection(@Nullable Output<Boolean> deletionProection) {
            $.deletionProection = deletionProection;
            return this;
        }

        /**
         * @param deletionProection The deletion protection of instance.
         * 
         * @return builder
         * 
         */
        public Builder deletionProection(Boolean deletionProection) {
            return deletionProection(Output.of(deletionProection));
        }

        /**
         * @param diskCategory The disk type of instance. Valid values: `cloud_efficiency`, `cloud_ssd`, `cloud_essd`, `cloud_essd_pl0`, `capacity_cloud_storage`, `local_ssd_pro`, `local_hdd_pro`. **NOTE:** From version 1.207.0, `disk_category` can be set to `cloud_essd_pl0`.
         * 
         * @return builder
         * 
         */
        public Builder diskCategory(@Nullable Output<String> diskCategory) {
            $.diskCategory = diskCategory;
            return this;
        }

        /**
         * @param diskCategory The disk type of instance. Valid values: `cloud_efficiency`, `cloud_ssd`, `cloud_essd`, `cloud_essd_pl0`, `capacity_cloud_storage`, `local_ssd_pro`, `local_hdd_pro`. **NOTE:** From version 1.207.0, `disk_category` can be set to `cloud_essd_pl0`.
         * 
         * @return builder
         * 
         */
        public Builder diskCategory(String diskCategory) {
            return diskCategory(Output.of(diskCategory));
        }

        /**
         * @param duration The duration of paid. Valid when the `payment_type` is `Subscription`.  When `pricing_cycle` set to `Month`, the valid value id `1` to `9`.  When `pricing_cycle` set to `Year`, the valid value id `1` to `3`.
         * 
         * @return builder
         * 
         */
        public Builder duration(@Nullable Output<String> duration) {
            $.duration = duration;
            return this;
        }

        /**
         * @param duration The duration of paid. Valid when the `payment_type` is `Subscription`.  When `pricing_cycle` set to `Month`, the valid value id `1` to `9`.  When `pricing_cycle` set to `Year`, the valid value id `1` to `3`.
         * 
         * @return builder
         * 
         */
        public Builder duration(String duration) {
            return duration(Output.of(duration));
        }

        /**
         * @param enabledFileEngine (Available since v1.163.0) Whether to enable file engine.
         * 
         * @return builder
         * 
         */
        public Builder enabledFileEngine(@Nullable Output<Boolean> enabledFileEngine) {
            $.enabledFileEngine = enabledFileEngine;
            return this;
        }

        /**
         * @param enabledFileEngine (Available since v1.163.0) Whether to enable file engine.
         * 
         * @return builder
         * 
         */
        public Builder enabledFileEngine(Boolean enabledFileEngine) {
            return enabledFileEngine(Output.of(enabledFileEngine));
        }

        /**
         * @param enabledLtsEngine (Available since v1.163.0) Whether to enable lts engine.
         * 
         * @return builder
         * 
         */
        public Builder enabledLtsEngine(@Nullable Output<Boolean> enabledLtsEngine) {
            $.enabledLtsEngine = enabledLtsEngine;
            return this;
        }

        /**
         * @param enabledLtsEngine (Available since v1.163.0) Whether to enable lts engine.
         * 
         * @return builder
         * 
         */
        public Builder enabledLtsEngine(Boolean enabledLtsEngine) {
            return enabledLtsEngine(Output.of(enabledLtsEngine));
        }

        /**
         * @param enabledSearchEngine (Available since v1.163.0) Whether to enable search engine.
         * 
         * @return builder
         * 
         */
        public Builder enabledSearchEngine(@Nullable Output<Boolean> enabledSearchEngine) {
            $.enabledSearchEngine = enabledSearchEngine;
            return this;
        }

        /**
         * @param enabledSearchEngine (Available since v1.163.0) Whether to enable search engine.
         * 
         * @return builder
         * 
         */
        public Builder enabledSearchEngine(Boolean enabledSearchEngine) {
            return enabledSearchEngine(Output.of(enabledSearchEngine));
        }

        /**
         * @param enabledTableEngine (Available since v1.163.0) Whether to enable table engine.
         * 
         * @return builder
         * 
         */
        public Builder enabledTableEngine(@Nullable Output<Boolean> enabledTableEngine) {
            $.enabledTableEngine = enabledTableEngine;
            return this;
        }

        /**
         * @param enabledTableEngine (Available since v1.163.0) Whether to enable table engine.
         * 
         * @return builder
         * 
         */
        public Builder enabledTableEngine(Boolean enabledTableEngine) {
            return enabledTableEngine(Output.of(enabledTableEngine));
        }

        /**
         * @param enabledTimeSeriresEngine (Available since v1.163.0) Whether to enable time serires engine.
         * 
         * @return builder
         * 
         */
        public Builder enabledTimeSeriresEngine(@Nullable Output<Boolean> enabledTimeSeriresEngine) {
            $.enabledTimeSeriresEngine = enabledTimeSeriresEngine;
            return this;
        }

        /**
         * @param enabledTimeSeriresEngine (Available since v1.163.0) Whether to enable time serires engine.
         * 
         * @return builder
         * 
         */
        public Builder enabledTimeSeriresEngine(Boolean enabledTimeSeriresEngine) {
            return enabledTimeSeriresEngine(Output.of(enabledTimeSeriresEngine));
        }

        /**
         * @param fileEngineNodeCount The count of file engine.
         * 
         * @return builder
         * 
         */
        public Builder fileEngineNodeCount(@Nullable Output<Integer> fileEngineNodeCount) {
            $.fileEngineNodeCount = fileEngineNodeCount;
            return this;
        }

        /**
         * @param fileEngineNodeCount The count of file engine.
         * 
         * @return builder
         * 
         */
        public Builder fileEngineNodeCount(Integer fileEngineNodeCount) {
            return fileEngineNodeCount(Output.of(fileEngineNodeCount));
        }

        /**
         * @param fileEngineSpecification The specification of file engine. Valid values: `lindorm.c.xlarge`.
         * 
         * @return builder
         * 
         */
        public Builder fileEngineSpecification(@Nullable Output<String> fileEngineSpecification) {
            $.fileEngineSpecification = fileEngineSpecification;
            return this;
        }

        /**
         * @param fileEngineSpecification The specification of file engine. Valid values: `lindorm.c.xlarge`.
         * 
         * @return builder
         * 
         */
        public Builder fileEngineSpecification(String fileEngineSpecification) {
            return fileEngineSpecification(Output.of(fileEngineSpecification));
        }

        /**
         * @param groupName The group name.
         * 
         * @return builder
         * 
         */
        public Builder groupName(@Nullable Output<String> groupName) {
            $.groupName = groupName;
            return this;
        }

        /**
         * @param groupName The group name.
         * 
         * @return builder
         * 
         */
        public Builder groupName(String groupName) {
            return groupName(Output.of(groupName));
        }

        /**
         * @param instanceName The name of the instance.
         * 
         * @return builder
         * 
         */
        public Builder instanceName(@Nullable Output<String> instanceName) {
            $.instanceName = instanceName;
            return this;
        }

        /**
         * @param instanceName The name of the instance.
         * 
         * @return builder
         * 
         */
        public Builder instanceName(String instanceName) {
            return instanceName(Output.of(instanceName));
        }

        /**
         * @param instanceStorage The storage capacity of the instance. Unit: GB. For example, the value 50 indicates 50 GB.
         * 
         * @return builder
         * 
         */
        public Builder instanceStorage(@Nullable Output<String> instanceStorage) {
            $.instanceStorage = instanceStorage;
            return this;
        }

        /**
         * @param instanceStorage The storage capacity of the instance. Unit: GB. For example, the value 50 indicates 50 GB.
         * 
         * @return builder
         * 
         */
        public Builder instanceStorage(String instanceStorage) {
            return instanceStorage(Output.of(instanceStorage));
        }

        /**
         * @param ipWhiteLists The ip white list of instance.
         * 
         * @return builder
         * 
         */
        public Builder ipWhiteLists(@Nullable Output<List<String>> ipWhiteLists) {
            $.ipWhiteLists = ipWhiteLists;
            return this;
        }

        /**
         * @param ipWhiteLists The ip white list of instance.
         * 
         * @return builder
         * 
         */
        public Builder ipWhiteLists(List<String> ipWhiteLists) {
            return ipWhiteLists(Output.of(ipWhiteLists));
        }

        /**
         * @param ipWhiteLists The ip white list of instance.
         * 
         * @return builder
         * 
         */
        public Builder ipWhiteLists(String... ipWhiteLists) {
            return ipWhiteLists(List.of(ipWhiteLists));
        }

        /**
         * @param logDiskCategory The multi-available zone instance, log node disk type. required if you need to create multiple availability zone instances. Valid values: `cloud_efficiency`, `cloud_ssd`.
         * 
         * @return builder
         * 
         */
        public Builder logDiskCategory(@Nullable Output<String> logDiskCategory) {
            $.logDiskCategory = logDiskCategory;
            return this;
        }

        /**
         * @param logDiskCategory The multi-available zone instance, log node disk type. required if you need to create multiple availability zone instances. Valid values: `cloud_efficiency`, `cloud_ssd`.
         * 
         * @return builder
         * 
         */
        public Builder logDiskCategory(String logDiskCategory) {
            return logDiskCategory(Output.of(logDiskCategory));
        }

        /**
         * @param logNum The multiple Availability Zone Instance, number of log nodes. this parameter is required if you want to create multiple availability zone instances. Valid values: `4` to `400`.
         * 
         * @return builder
         * 
         */
        public Builder logNum(@Nullable Output<Integer> logNum) {
            $.logNum = logNum;
            return this;
        }

        /**
         * @param logNum The multiple Availability Zone Instance, number of log nodes. this parameter is required if you want to create multiple availability zone instances. Valid values: `4` to `400`.
         * 
         * @return builder
         * 
         */
        public Builder logNum(Integer logNum) {
            return logNum(Output.of(logNum));
        }

        /**
         * @param logSingleStorage The multi-availability instance, log single-node disk capacity. This parameter is required if you want to create multiple availability zone instances. Valid values: `400` to `64000`.
         * 
         * @return builder
         * 
         */
        public Builder logSingleStorage(@Nullable Output<Integer> logSingleStorage) {
            $.logSingleStorage = logSingleStorage;
            return this;
        }

        /**
         * @param logSingleStorage The multi-availability instance, log single-node disk capacity. This parameter is required if you want to create multiple availability zone instances. Valid values: `400` to `64000`.
         * 
         * @return builder
         * 
         */
        public Builder logSingleStorage(Integer logSingleStorage) {
            return logSingleStorage(Output.of(logSingleStorage));
        }

        /**
         * @param logSpec The multiple availability zone instances, log node specification. required if you need to create multiple availability zone instances. Valid values: `lindorm.sn1.large`, `lindorm.sn1.2xlarge`.
         * 
         * @return builder
         * 
         */
        public Builder logSpec(@Nullable Output<String> logSpec) {
            $.logSpec = logSpec;
            return this;
        }

        /**
         * @param logSpec The multiple availability zone instances, log node specification. required if you need to create multiple availability zone instances. Valid values: `lindorm.sn1.large`, `lindorm.sn1.2xlarge`.
         * 
         * @return builder
         * 
         */
        public Builder logSpec(String logSpec) {
            return logSpec(Output.of(logSpec));
        }

        /**
         * @param ltsNodeCount The count of lindorm tunnel service.
         * 
         * @return builder
         * 
         */
        public Builder ltsNodeCount(@Nullable Output<Integer> ltsNodeCount) {
            $.ltsNodeCount = ltsNodeCount;
            return this;
        }

        /**
         * @param ltsNodeCount The count of lindorm tunnel service.
         * 
         * @return builder
         * 
         */
        public Builder ltsNodeCount(Integer ltsNodeCount) {
            return ltsNodeCount(Output.of(ltsNodeCount));
        }

        /**
         * @param ltsNodeSpecification The specification of lindorm tunnel service. Valid values: `lindorm.g.2xlarge`, `lindorm.g.xlarge`.
         * 
         * @return builder
         * 
         */
        public Builder ltsNodeSpecification(@Nullable Output<String> ltsNodeSpecification) {
            $.ltsNodeSpecification = ltsNodeSpecification;
            return this;
        }

        /**
         * @param ltsNodeSpecification The specification of lindorm tunnel service. Valid values: `lindorm.g.2xlarge`, `lindorm.g.xlarge`.
         * 
         * @return builder
         * 
         */
        public Builder ltsNodeSpecification(String ltsNodeSpecification) {
            return ltsNodeSpecification(Output.of(ltsNodeSpecification));
        }

        /**
         * @param multiZoneCombination The multi-zone combinations. Availability zone combinations are supported on the sale page. required if you need to create multiple availability zone instances. Valid values: `ap-southeast-5abc-aliyun`, `cn-hangzhou-ehi-aliyun`, `cn-beijing-acd-aliyun`, `ap-southeast-1-abc-aliyun`, `cn-zhangjiakou-abc-aliyun`, `cn-shanghai-efg-aliyun`, `cn-shanghai-abd-aliyun`, `cn-hangzhou-bef-aliyun`, `cn-hangzhou-bce-aliyun`, `cn-beijing-fgh-aliyun`, `cn-shenzhen-abc-aliyun`.
         * 
         * @return builder
         * 
         */
        public Builder multiZoneCombination(@Nullable Output<String> multiZoneCombination) {
            $.multiZoneCombination = multiZoneCombination;
            return this;
        }

        /**
         * @param multiZoneCombination The multi-zone combinations. Availability zone combinations are supported on the sale page. required if you need to create multiple availability zone instances. Valid values: `ap-southeast-5abc-aliyun`, `cn-hangzhou-ehi-aliyun`, `cn-beijing-acd-aliyun`, `ap-southeast-1-abc-aliyun`, `cn-zhangjiakou-abc-aliyun`, `cn-shanghai-efg-aliyun`, `cn-shanghai-abd-aliyun`, `cn-hangzhou-bef-aliyun`, `cn-hangzhou-bce-aliyun`, `cn-beijing-fgh-aliyun`, `cn-shenzhen-abc-aliyun`.
         * 
         * @return builder
         * 
         */
        public Builder multiZoneCombination(String multiZoneCombination) {
            return multiZoneCombination(Output.of(multiZoneCombination));
        }

        /**
         * @param paymentType The billing method. Valid values: `PayAsYouGo` and `Subscription`.
         * 
         * @return builder
         * 
         */
        public Builder paymentType(@Nullable Output<String> paymentType) {
            $.paymentType = paymentType;
            return this;
        }

        /**
         * @param paymentType The billing method. Valid values: `PayAsYouGo` and `Subscription`.
         * 
         * @return builder
         * 
         */
        public Builder paymentType(String paymentType) {
            return paymentType(Output.of(paymentType));
        }

        /**
         * @param phoenixNodeCount The count of phoenix.
         * 
         * @return builder
         * 
         */
        public Builder phoenixNodeCount(@Nullable Output<Integer> phoenixNodeCount) {
            $.phoenixNodeCount = phoenixNodeCount;
            return this;
        }

        /**
         * @param phoenixNodeCount The count of phoenix.
         * 
         * @return builder
         * 
         */
        public Builder phoenixNodeCount(Integer phoenixNodeCount) {
            return phoenixNodeCount(Output.of(phoenixNodeCount));
        }

        /**
         * @param phoenixNodeSpecification The specification of phoenix. Valid values: `lindorm.c.2xlarge`, `lindorm.c.4xlarge`, `lindorm.c.8xlarge`, `lindorm.c.xlarge`, `lindorm.g.2xlarge`, `lindorm.g.4xlarge`, `lindorm.g.8xlarge`, `lindorm.g.xlarge`.
         * 
         * @return builder
         * 
         */
        public Builder phoenixNodeSpecification(@Nullable Output<String> phoenixNodeSpecification) {
            $.phoenixNodeSpecification = phoenixNodeSpecification;
            return this;
        }

        /**
         * @param phoenixNodeSpecification The specification of phoenix. Valid values: `lindorm.c.2xlarge`, `lindorm.c.4xlarge`, `lindorm.c.8xlarge`, `lindorm.c.xlarge`, `lindorm.g.2xlarge`, `lindorm.g.4xlarge`, `lindorm.g.8xlarge`, `lindorm.g.xlarge`.
         * 
         * @return builder
         * 
         */
        public Builder phoenixNodeSpecification(String phoenixNodeSpecification) {
            return phoenixNodeSpecification(Output.of(phoenixNodeSpecification));
        }

        /**
         * @param pricingCycle The pricing cycle. Valid when the `payment_type` is `Subscription`. Valid values: `Month` and `Year`.
         * 
         * @return builder
         * 
         */
        public Builder pricingCycle(@Nullable Output<String> pricingCycle) {
            $.pricingCycle = pricingCycle;
            return this;
        }

        /**
         * @param pricingCycle The pricing cycle. Valid when the `payment_type` is `Subscription`. Valid values: `Month` and `Year`.
         * 
         * @return builder
         * 
         */
        public Builder pricingCycle(String pricingCycle) {
            return pricingCycle(Output.of(pricingCycle));
        }

        /**
         * @param primaryVswitchId Multi-available zone instances, the virtual switch ID of the primary available zone, must be under the available zone corresponding to the PrimaryZoneId. required if you need to create multiple availability zone instances.
         * 
         * @return builder
         * 
         */
        public Builder primaryVswitchId(@Nullable Output<String> primaryVswitchId) {
            $.primaryVswitchId = primaryVswitchId;
            return this;
        }

        /**
         * @param primaryVswitchId Multi-available zone instances, the virtual switch ID of the primary available zone, must be under the available zone corresponding to the PrimaryZoneId. required if you need to create multiple availability zone instances.
         * 
         * @return builder
         * 
         */
        public Builder primaryVswitchId(String primaryVswitchId) {
            return primaryVswitchId(Output.of(primaryVswitchId));
        }

        /**
         * @param primaryZoneId Multi-availability zone instance with the availability zone ID of the main availability zone. required if you need to create multiple availability zone instances.
         * 
         * @return builder
         * 
         */
        public Builder primaryZoneId(@Nullable Output<String> primaryZoneId) {
            $.primaryZoneId = primaryZoneId;
            return this;
        }

        /**
         * @param primaryZoneId Multi-availability zone instance with the availability zone ID of the main availability zone. required if you need to create multiple availability zone instances.
         * 
         * @return builder
         * 
         */
        public Builder primaryZoneId(String primaryZoneId) {
            return primaryZoneId(Output.of(primaryZoneId));
        }

        /**
         * @param resourceGroupId The ID of the resource group.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupId(@Nullable Output<String> resourceGroupId) {
            $.resourceGroupId = resourceGroupId;
            return this;
        }

        /**
         * @param resourceGroupId The ID of the resource group.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupId(String resourceGroupId) {
            return resourceGroupId(Output.of(resourceGroupId));
        }

        /**
         * @param searchEngineNodeCount The count of search engine.
         * 
         * @return builder
         * 
         */
        public Builder searchEngineNodeCount(@Nullable Output<Integer> searchEngineNodeCount) {
            $.searchEngineNodeCount = searchEngineNodeCount;
            return this;
        }

        /**
         * @param searchEngineNodeCount The count of search engine.
         * 
         * @return builder
         * 
         */
        public Builder searchEngineNodeCount(Integer searchEngineNodeCount) {
            return searchEngineNodeCount(Output.of(searchEngineNodeCount));
        }

        /**
         * @param searchEngineSpecification The specification of search engine. Valid values: `lindorm.g.2xlarge`, `lindorm.g.4xlarge`, `lindorm.g.8xlarge`, `lindorm.g.xlarge`.
         * 
         * @return builder
         * 
         */
        public Builder searchEngineSpecification(@Nullable Output<String> searchEngineSpecification) {
            $.searchEngineSpecification = searchEngineSpecification;
            return this;
        }

        /**
         * @param searchEngineSpecification The specification of search engine. Valid values: `lindorm.g.2xlarge`, `lindorm.g.4xlarge`, `lindorm.g.8xlarge`, `lindorm.g.xlarge`.
         * 
         * @return builder
         * 
         */
        public Builder searchEngineSpecification(String searchEngineSpecification) {
            return searchEngineSpecification(Output.of(searchEngineSpecification));
        }

        /**
         * @param serviceType (Available since v1.196.0) The instance type.
         * 
         * @return builder
         * 
         */
        public Builder serviceType(@Nullable Output<String> serviceType) {
            $.serviceType = serviceType;
            return this;
        }

        /**
         * @param serviceType (Available since v1.196.0) The instance type.
         * 
         * @return builder
         * 
         */
        public Builder serviceType(String serviceType) {
            return serviceType(Output.of(serviceType));
        }

        /**
         * @param standbyVswitchId The multiple availability zone instances, the virtual switch ID of the ready availability zone must be under the availability zone corresponding to the StandbyZoneId. required if you need to create multiple availability zone instances.
         * 
         * @return builder
         * 
         */
        public Builder standbyVswitchId(@Nullable Output<String> standbyVswitchId) {
            $.standbyVswitchId = standbyVswitchId;
            return this;
        }

        /**
         * @param standbyVswitchId The multiple availability zone instances, the virtual switch ID of the ready availability zone must be under the availability zone corresponding to the StandbyZoneId. required if you need to create multiple availability zone instances.
         * 
         * @return builder
         * 
         */
        public Builder standbyVswitchId(String standbyVswitchId) {
            return standbyVswitchId(Output.of(standbyVswitchId));
        }

        /**
         * @param standbyZoneId The multiple availability zone instances with availability zone IDs for the prepared availability zones. required if you need to create multiple availability zone instances.
         * 
         * @return builder
         * 
         */
        public Builder standbyZoneId(@Nullable Output<String> standbyZoneId) {
            $.standbyZoneId = standbyZoneId;
            return this;
        }

        /**
         * @param standbyZoneId The multiple availability zone instances with availability zone IDs for the prepared availability zones. required if you need to create multiple availability zone instances.
         * 
         * @return builder
         * 
         */
        public Builder standbyZoneId(String standbyZoneId) {
            return standbyZoneId(Output.of(standbyZoneId));
        }

        /**
         * @param status The status of Instance.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status The status of Instance.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param tableEngineNodeCount The count of table engine.
         * 
         * @return builder
         * 
         */
        public Builder tableEngineNodeCount(@Nullable Output<Integer> tableEngineNodeCount) {
            $.tableEngineNodeCount = tableEngineNodeCount;
            return this;
        }

        /**
         * @param tableEngineNodeCount The count of table engine.
         * 
         * @return builder
         * 
         */
        public Builder tableEngineNodeCount(Integer tableEngineNodeCount) {
            return tableEngineNodeCount(Output.of(tableEngineNodeCount));
        }

        /**
         * @param tableEngineSpecification The specification of  table engine. Valid values: `lindorm.c.2xlarge`, `lindorm.c.4xlarge`, `lindorm.c.8xlarge`, `lindorm.g.xlarge`, `lindorm.g.2xlarge`, `lindorm.g.4xlarge`, `lindorm.g.8xlarge`.
         * 
         * @return builder
         * 
         */
        public Builder tableEngineSpecification(@Nullable Output<String> tableEngineSpecification) {
            $.tableEngineSpecification = tableEngineSpecification;
            return this;
        }

        /**
         * @param tableEngineSpecification The specification of  table engine. Valid values: `lindorm.c.2xlarge`, `lindorm.c.4xlarge`, `lindorm.c.8xlarge`, `lindorm.g.xlarge`, `lindorm.g.2xlarge`, `lindorm.g.4xlarge`, `lindorm.g.8xlarge`.
         * 
         * @return builder
         * 
         */
        public Builder tableEngineSpecification(String tableEngineSpecification) {
            return tableEngineSpecification(Output.of(tableEngineSpecification));
        }

        /**
         * @param tags A mapping of tags to assign to the resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,Object>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags A mapping of tags to assign to the resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,Object> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param timeSeriesEngineNodeCount The count of time series engine.
         * 
         * @return builder
         * 
         */
        public Builder timeSeriesEngineNodeCount(@Nullable Output<Integer> timeSeriesEngineNodeCount) {
            $.timeSeriesEngineNodeCount = timeSeriesEngineNodeCount;
            return this;
        }

        /**
         * @param timeSeriesEngineNodeCount The count of time series engine.
         * 
         * @return builder
         * 
         */
        public Builder timeSeriesEngineNodeCount(Integer timeSeriesEngineNodeCount) {
            return timeSeriesEngineNodeCount(Output.of(timeSeriesEngineNodeCount));
        }

        /**
         * @param timeSeriesEngineSpecification The specification of time series engine. Valid values: `lindorm.g.xlarge`, `lindorm.g.2xlarge`, `lindorm.g.4xlarge`, `lindorm.g.8xlarge`, `lindorm.r.8xlarge`.
         * 
         * @return builder
         * 
         */
        public Builder timeSeriesEngineSpecification(@Nullable Output<String> timeSeriesEngineSpecification) {
            $.timeSeriesEngineSpecification = timeSeriesEngineSpecification;
            return this;
        }

        /**
         * @param timeSeriesEngineSpecification The specification of time series engine. Valid values: `lindorm.g.xlarge`, `lindorm.g.2xlarge`, `lindorm.g.4xlarge`, `lindorm.g.8xlarge`, `lindorm.r.8xlarge`.
         * 
         * @return builder
         * 
         */
        public Builder timeSeriesEngineSpecification(String timeSeriesEngineSpecification) {
            return timeSeriesEngineSpecification(Output.of(timeSeriesEngineSpecification));
        }

        /**
         * @param timeSeriresEngineSpecification Field `time_serires_engine_specification` has been deprecated from provider version 1.182.0. New field `time_series_engine_specification` instead.
         * 
         * @return builder
         * 
         * @deprecated
         * Field &#39;time_serires_engine_specification&#39; has been deprecated from provider version 1.182.0. New field &#39;time_series_engine_specification&#39; instead.
         * 
         */
        @Deprecated /* Field 'time_serires_engine_specification' has been deprecated from provider version 1.182.0. New field 'time_series_engine_specification' instead. */
        public Builder timeSeriresEngineSpecification(@Nullable Output<String> timeSeriresEngineSpecification) {
            $.timeSeriresEngineSpecification = timeSeriresEngineSpecification;
            return this;
        }

        /**
         * @param timeSeriresEngineSpecification Field `time_serires_engine_specification` has been deprecated from provider version 1.182.0. New field `time_series_engine_specification` instead.
         * 
         * @return builder
         * 
         * @deprecated
         * Field &#39;time_serires_engine_specification&#39; has been deprecated from provider version 1.182.0. New field &#39;time_series_engine_specification&#39; instead.
         * 
         */
        @Deprecated /* Field 'time_serires_engine_specification' has been deprecated from provider version 1.182.0. New field 'time_series_engine_specification' instead. */
        public Builder timeSeriresEngineSpecification(String timeSeriresEngineSpecification) {
            return timeSeriresEngineSpecification(Output.of(timeSeriresEngineSpecification));
        }

        /**
         * @param vpcId The VPC ID of the instance.
         * 
         * @return builder
         * 
         */
        public Builder vpcId(@Nullable Output<String> vpcId) {
            $.vpcId = vpcId;
            return this;
        }

        /**
         * @param vpcId The VPC ID of the instance.
         * 
         * @return builder
         * 
         */
        public Builder vpcId(String vpcId) {
            return vpcId(Output.of(vpcId));
        }

        /**
         * @param vswitchId The vswitch id.
         * 
         * @return builder
         * 
         */
        public Builder vswitchId(@Nullable Output<String> vswitchId) {
            $.vswitchId = vswitchId;
            return this;
        }

        /**
         * @param vswitchId The vswitch id.
         * 
         * @return builder
         * 
         */
        public Builder vswitchId(String vswitchId) {
            return vswitchId(Output.of(vswitchId));
        }

        /**
         * @param zoneId The zone ID of the instance.
         * 
         * @return builder
         * 
         */
        public Builder zoneId(@Nullable Output<String> zoneId) {
            $.zoneId = zoneId;
            return this;
        }

        /**
         * @param zoneId The zone ID of the instance.
         * 
         * @return builder
         * 
         */
        public Builder zoneId(String zoneId) {
            return zoneId(Output.of(zoneId));
        }

        public InstanceState build() {
            return $;
        }
    }

}
