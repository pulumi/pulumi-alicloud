// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.pvtz.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetZoneRecordsArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetZoneRecordsArgs Empty = new GetZoneRecordsArgs();

    /**
     * A list of Private Zone Record IDs.
     * 
     */
    @Import(name="ids")
    private @Nullable Output<List<String>> ids;

    /**
     * @return A list of Private Zone Record IDs.
     * 
     */
    public Optional<Output<List<String>>> ids() {
        return Optional.ofNullable(this.ids);
    }

    /**
     * The keyword for record rr and value.
     * 
     */
    @Import(name="keyword")
    private @Nullable Output<String> keyword;

    /**
     * @return The keyword for record rr and value.
     * 
     */
    public Optional<Output<String>> keyword() {
        return Optional.ofNullable(this.keyword);
    }

    /**
     * The language of the response. Default value: `en`. Valid values: `en`, `zh`.
     * 
     */
    @Import(name="lang")
    private @Nullable Output<String> lang;

    /**
     * @return The language of the response. Default value: `en`. Valid values: `en`, `zh`.
     * 
     */
    public Optional<Output<String>> lang() {
        return Optional.ofNullable(this.lang);
    }

    /**
     * File name where to save data source results (after running `pulumi preview`).
     * 
     */
    @Import(name="outputFile")
    private @Nullable Output<String> outputFile;

    /**
     * @return File name where to save data source results (after running `pulumi preview`).
     * 
     */
    public Optional<Output<String>> outputFile() {
        return Optional.ofNullable(this.outputFile);
    }

    /**
     * The search mode. Default value: `EXACT`. Valid values:
     * - `LIKE`: Fuzzy search.
     * - `EXACT`: Exact search.
     * 
     */
    @Import(name="searchMode")
    private @Nullable Output<String> searchMode;

    /**
     * @return The search mode. Default value: `EXACT`. Valid values:
     * - `LIKE`: Fuzzy search.
     * - `EXACT`: Exact search.
     * 
     */
    public Optional<Output<String>> searchMode() {
        return Optional.ofNullable(this.searchMode);
    }

    /**
     * The status of the Resolve record. Valid values:
     * - `ENABLE`: Enable resolution.
     * - `DISABLE`: Pause parsing.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return The status of the Resolve record. Valid values:
     * - `ENABLE`: Enable resolution.
     * - `DISABLE`: Pause parsing.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * The tag used to search for DNS records.
     * 
     */
    @Import(name="tag")
    private @Nullable Output<String> tag;

    /**
     * @return The tag used to search for DNS records.
     * 
     */
    public Optional<Output<String>> tag() {
        return Optional.ofNullable(this.tag);
    }

    /**
     * The IP address of the client.
     * 
     */
    @Import(name="userClientIp")
    private @Nullable Output<String> userClientIp;

    /**
     * @return The IP address of the client.
     * 
     */
    public Optional<Output<String>> userClientIp() {
        return Optional.ofNullable(this.userClientIp);
    }

    /**
     * The ID of the private zone.
     * 
     */
    @Import(name="zoneId", required=true)
    private Output<String> zoneId;

    /**
     * @return The ID of the private zone.
     * 
     */
    public Output<String> zoneId() {
        return this.zoneId;
    }

    private GetZoneRecordsArgs() {}

    private GetZoneRecordsArgs(GetZoneRecordsArgs $) {
        this.ids = $.ids;
        this.keyword = $.keyword;
        this.lang = $.lang;
        this.outputFile = $.outputFile;
        this.searchMode = $.searchMode;
        this.status = $.status;
        this.tag = $.tag;
        this.userClientIp = $.userClientIp;
        this.zoneId = $.zoneId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetZoneRecordsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetZoneRecordsArgs $;

        public Builder() {
            $ = new GetZoneRecordsArgs();
        }

        public Builder(GetZoneRecordsArgs defaults) {
            $ = new GetZoneRecordsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param ids A list of Private Zone Record IDs.
         * 
         * @return builder
         * 
         */
        public Builder ids(@Nullable Output<List<String>> ids) {
            $.ids = ids;
            return this;
        }

        /**
         * @param ids A list of Private Zone Record IDs.
         * 
         * @return builder
         * 
         */
        public Builder ids(List<String> ids) {
            return ids(Output.of(ids));
        }

        /**
         * @param ids A list of Private Zone Record IDs.
         * 
         * @return builder
         * 
         */
        public Builder ids(String... ids) {
            return ids(List.of(ids));
        }

        /**
         * @param keyword The keyword for record rr and value.
         * 
         * @return builder
         * 
         */
        public Builder keyword(@Nullable Output<String> keyword) {
            $.keyword = keyword;
            return this;
        }

        /**
         * @param keyword The keyword for record rr and value.
         * 
         * @return builder
         * 
         */
        public Builder keyword(String keyword) {
            return keyword(Output.of(keyword));
        }

        /**
         * @param lang The language of the response. Default value: `en`. Valid values: `en`, `zh`.
         * 
         * @return builder
         * 
         */
        public Builder lang(@Nullable Output<String> lang) {
            $.lang = lang;
            return this;
        }

        /**
         * @param lang The language of the response. Default value: `en`. Valid values: `en`, `zh`.
         * 
         * @return builder
         * 
         */
        public Builder lang(String lang) {
            return lang(Output.of(lang));
        }

        /**
         * @param outputFile File name where to save data source results (after running `pulumi preview`).
         * 
         * @return builder
         * 
         */
        public Builder outputFile(@Nullable Output<String> outputFile) {
            $.outputFile = outputFile;
            return this;
        }

        /**
         * @param outputFile File name where to save data source results (after running `pulumi preview`).
         * 
         * @return builder
         * 
         */
        public Builder outputFile(String outputFile) {
            return outputFile(Output.of(outputFile));
        }

        /**
         * @param searchMode The search mode. Default value: `EXACT`. Valid values:
         * - `LIKE`: Fuzzy search.
         * - `EXACT`: Exact search.
         * 
         * @return builder
         * 
         */
        public Builder searchMode(@Nullable Output<String> searchMode) {
            $.searchMode = searchMode;
            return this;
        }

        /**
         * @param searchMode The search mode. Default value: `EXACT`. Valid values:
         * - `LIKE`: Fuzzy search.
         * - `EXACT`: Exact search.
         * 
         * @return builder
         * 
         */
        public Builder searchMode(String searchMode) {
            return searchMode(Output.of(searchMode));
        }

        /**
         * @param status The status of the Resolve record. Valid values:
         * - `ENABLE`: Enable resolution.
         * - `DISABLE`: Pause parsing.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status The status of the Resolve record. Valid values:
         * - `ENABLE`: Enable resolution.
         * - `DISABLE`: Pause parsing.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param tag The tag used to search for DNS records.
         * 
         * @return builder
         * 
         */
        public Builder tag(@Nullable Output<String> tag) {
            $.tag = tag;
            return this;
        }

        /**
         * @param tag The tag used to search for DNS records.
         * 
         * @return builder
         * 
         */
        public Builder tag(String tag) {
            return tag(Output.of(tag));
        }

        /**
         * @param userClientIp The IP address of the client.
         * 
         * @return builder
         * 
         */
        public Builder userClientIp(@Nullable Output<String> userClientIp) {
            $.userClientIp = userClientIp;
            return this;
        }

        /**
         * @param userClientIp The IP address of the client.
         * 
         * @return builder
         * 
         */
        public Builder userClientIp(String userClientIp) {
            return userClientIp(Output.of(userClientIp));
        }

        /**
         * @param zoneId The ID of the private zone.
         * 
         * @return builder
         * 
         */
        public Builder zoneId(Output<String> zoneId) {
            $.zoneId = zoneId;
            return this;
        }

        /**
         * @param zoneId The ID of the private zone.
         * 
         * @return builder
         * 
         */
        public Builder zoneId(String zoneId) {
            return zoneId(Output.of(zoneId));
        }

        public GetZoneRecordsArgs build() {
            if ($.zoneId == null) {
                throw new MissingRequiredPropertyException("GetZoneRecordsArgs", "zoneId");
            }
            return $;
        }
    }

}
