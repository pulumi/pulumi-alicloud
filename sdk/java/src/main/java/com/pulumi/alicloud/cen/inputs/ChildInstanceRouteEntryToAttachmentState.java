// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.cen.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ChildInstanceRouteEntryToAttachmentState extends com.pulumi.resources.ResourceArgs {

    public static final ChildInstanceRouteEntryToAttachmentState Empty = new ChildInstanceRouteEntryToAttachmentState();

    /**
     * The ID of the CEN instance.
     * 
     */
    @Import(name="cenId")
    private @Nullable Output<String> cenId;

    /**
     * @return The ID of the CEN instance.
     * 
     */
    public Optional<Output<String>> cenId() {
        return Optional.ofNullable(this.cenId);
    }

    /**
     * The first ID of the resource
     * 
     */
    @Import(name="childInstanceRouteTableId")
    private @Nullable Output<String> childInstanceRouteTableId;

    /**
     * @return The first ID of the resource
     * 
     */
    public Optional<Output<String>> childInstanceRouteTableId() {
        return Optional.ofNullable(this.childInstanceRouteTableId);
    }

    /**
     * DestinationCidrBlock
     * 
     */
    @Import(name="destinationCidrBlock")
    private @Nullable Output<String> destinationCidrBlock;

    /**
     * @return DestinationCidrBlock
     * 
     */
    public Optional<Output<String>> destinationCidrBlock() {
        return Optional.ofNullable(this.destinationCidrBlock);
    }

    /**
     * Whether to perform pre-check on this request, including permission and instance status verification.
     * 
     */
    @Import(name="dryRun")
    private @Nullable Output<Boolean> dryRun;

    /**
     * @return Whether to perform pre-check on this request, including permission and instance status verification.
     * 
     */
    public Optional<Output<Boolean>> dryRun() {
        return Optional.ofNullable(this.dryRun);
    }

    /**
     * ServiceType
     * 
     */
    @Import(name="serviceType")
    private @Nullable Output<String> serviceType;

    /**
     * @return ServiceType
     * 
     */
    public Optional<Output<String>> serviceType() {
        return Optional.ofNullable(this.serviceType);
    }

    /**
     * The status of the resource
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return The status of the resource
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * TransitRouterAttachmentId
     * 
     */
    @Import(name="transitRouterAttachmentId")
    private @Nullable Output<String> transitRouterAttachmentId;

    /**
     * @return TransitRouterAttachmentId
     * 
     */
    public Optional<Output<String>> transitRouterAttachmentId() {
        return Optional.ofNullable(this.transitRouterAttachmentId);
    }

    private ChildInstanceRouteEntryToAttachmentState() {}

    private ChildInstanceRouteEntryToAttachmentState(ChildInstanceRouteEntryToAttachmentState $) {
        this.cenId = $.cenId;
        this.childInstanceRouteTableId = $.childInstanceRouteTableId;
        this.destinationCidrBlock = $.destinationCidrBlock;
        this.dryRun = $.dryRun;
        this.serviceType = $.serviceType;
        this.status = $.status;
        this.transitRouterAttachmentId = $.transitRouterAttachmentId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ChildInstanceRouteEntryToAttachmentState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ChildInstanceRouteEntryToAttachmentState $;

        public Builder() {
            $ = new ChildInstanceRouteEntryToAttachmentState();
        }

        public Builder(ChildInstanceRouteEntryToAttachmentState defaults) {
            $ = new ChildInstanceRouteEntryToAttachmentState(Objects.requireNonNull(defaults));
        }

        /**
         * @param cenId The ID of the CEN instance.
         * 
         * @return builder
         * 
         */
        public Builder cenId(@Nullable Output<String> cenId) {
            $.cenId = cenId;
            return this;
        }

        /**
         * @param cenId The ID of the CEN instance.
         * 
         * @return builder
         * 
         */
        public Builder cenId(String cenId) {
            return cenId(Output.of(cenId));
        }

        /**
         * @param childInstanceRouteTableId The first ID of the resource
         * 
         * @return builder
         * 
         */
        public Builder childInstanceRouteTableId(@Nullable Output<String> childInstanceRouteTableId) {
            $.childInstanceRouteTableId = childInstanceRouteTableId;
            return this;
        }

        /**
         * @param childInstanceRouteTableId The first ID of the resource
         * 
         * @return builder
         * 
         */
        public Builder childInstanceRouteTableId(String childInstanceRouteTableId) {
            return childInstanceRouteTableId(Output.of(childInstanceRouteTableId));
        }

        /**
         * @param destinationCidrBlock DestinationCidrBlock
         * 
         * @return builder
         * 
         */
        public Builder destinationCidrBlock(@Nullable Output<String> destinationCidrBlock) {
            $.destinationCidrBlock = destinationCidrBlock;
            return this;
        }

        /**
         * @param destinationCidrBlock DestinationCidrBlock
         * 
         * @return builder
         * 
         */
        public Builder destinationCidrBlock(String destinationCidrBlock) {
            return destinationCidrBlock(Output.of(destinationCidrBlock));
        }

        /**
         * @param dryRun Whether to perform pre-check on this request, including permission and instance status verification.
         * 
         * @return builder
         * 
         */
        public Builder dryRun(@Nullable Output<Boolean> dryRun) {
            $.dryRun = dryRun;
            return this;
        }

        /**
         * @param dryRun Whether to perform pre-check on this request, including permission and instance status verification.
         * 
         * @return builder
         * 
         */
        public Builder dryRun(Boolean dryRun) {
            return dryRun(Output.of(dryRun));
        }

        /**
         * @param serviceType ServiceType
         * 
         * @return builder
         * 
         */
        public Builder serviceType(@Nullable Output<String> serviceType) {
            $.serviceType = serviceType;
            return this;
        }

        /**
         * @param serviceType ServiceType
         * 
         * @return builder
         * 
         */
        public Builder serviceType(String serviceType) {
            return serviceType(Output.of(serviceType));
        }

        /**
         * @param status The status of the resource
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status The status of the resource
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param transitRouterAttachmentId TransitRouterAttachmentId
         * 
         * @return builder
         * 
         */
        public Builder transitRouterAttachmentId(@Nullable Output<String> transitRouterAttachmentId) {
            $.transitRouterAttachmentId = transitRouterAttachmentId;
            return this;
        }

        /**
         * @param transitRouterAttachmentId TransitRouterAttachmentId
         * 
         * @return builder
         * 
         */
        public Builder transitRouterAttachmentId(String transitRouterAttachmentId) {
            return transitRouterAttachmentId(Output.of(transitRouterAttachmentId));
        }

        public ChildInstanceRouteEntryToAttachmentState build() {
            return $;
        }
    }

}
