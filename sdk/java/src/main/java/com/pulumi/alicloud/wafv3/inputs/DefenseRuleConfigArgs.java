// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.wafv3.inputs;

import com.pulumi.alicloud.wafv3.inputs.DefenseRuleConfigAccountIdentifierArgs;
import com.pulumi.alicloud.wafv3.inputs.DefenseRuleConfigConditionArgs;
import com.pulumi.alicloud.wafv3.inputs.DefenseRuleConfigRateLimitArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DefenseRuleConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final DefenseRuleConfigArgs Empty = new DefenseRuleConfigArgs();

    /**
     * The regions outside China from which you want to block requests. Separate multiple region codes with commas (,). You can call the DescribeIpAbroadCountryInfos operation to query the countries and regions outside China that can be blocked.
     * 
     */
    @Import(name="abroadRegions")
    private @Nullable Output<String> abroadRegions;

    /**
     * @return The regions outside China from which you want to block requests. Separate multiple region codes with commas (,). You can call the DescribeIpAbroadCountryInfos operation to query the countries and regions outside China that can be blocked.
     * 
     */
    public Optional<Output<String>> abroadRegions() {
        return Optional.ofNullable(this.abroadRegions);
    }

    /**
     * The policies for account extraction. Up to five policies are supported. Each policy is a JSON string. For more information, see accountIdentifiers description. See `accountIdentifiers` below.
     * 
     */
    @Import(name="accountIdentifiers")
    private @Nullable Output<List<DefenseRuleConfigAccountIdentifierArgs>> accountIdentifiers;

    /**
     * @return The policies for account extraction. Up to five policies are supported. Each policy is a JSON string. For more information, see accountIdentifiers description. See `accountIdentifiers` below.
     * 
     */
    public Optional<Output<List<DefenseRuleConfigAccountIdentifierArgs>>> accountIdentifiers() {
        return Optional.ofNullable(this.accountIdentifiers);
    }

    /**
     * The list of regular rule IDs that are not detected. The value is in the [&#34;XX1&#34;, &#34;XX2&#34;,...] format. This parameter is required only when the module to which the whitelist applies is set to specific regular rules in basic protection (BypassTags is set to regular_rule).
     * 
     */
    @Import(name="bypassRegularRules")
    private @Nullable Output<List<String>> bypassRegularRules;

    /**
     * @return The list of regular rule IDs that are not detected. The value is in the [&#34;XX1&#34;, &#34;XX2&#34;,...] format. This parameter is required only when the module to which the whitelist applies is set to specific regular rules in basic protection (BypassTags is set to regular_rule).
     * 
     */
    public Optional<Output<List<String>>> bypassRegularRules() {
        return Optional.ofNullable(this.bypassRegularRules);
    }

    /**
     * The regular rule type is not detected. This parameter is configured only when the whitelist module is configured as the Web application regular type (the value of the BypassTags parameter is regular_type). Value:
     * - sqli: Indicates SQL injection.
     * - xss: Indicates cross-site scripting (XSS).
     * - cmdi: Indicates OS command injection.
     * - expression_injection: Indicates expression injection.
     * - java_deserialization: indicates Java deserialization.
     * - dot_net_deserialization: Represents. net deserialization.
     * - php_deserialization: indicates PHP deserialization.
     * - code_exec: Indicates code execution.
     * - ssrf: indicates SSRF (server-side request forgery).
     * - path_traversal: indicates a Path Traversal.
     * - arbitrary_file_uploading: Indicates to upload any file.
     * - webshell: Represents a webshell.
     * - rfilei: Indicates the remote file contains (RFI).
     * - lfilei: Indicates that the local file contains (LFI).
     * - protocol_violation: indicates a protocol violation.
     * - scanner_behavior: Indicates scanner behavior.
     * - logic_flaw: Indicates a business logic defect.
     * - arbitrary_file_reading: Indicates arbitrary file reading.
     * - arbitrary_file_download: Indicates an arbitrary file download.
     * - xxe: Indicates external entity injection.
     * - csrf: indicates cross-site request forgery.
     * - crlf: indicates CRLF.
     * - other: indicates other.
     * 
     */
    @Import(name="bypassRegularTypes")
    private @Nullable Output<List<String>> bypassRegularTypes;

    /**
     * @return The regular rule type is not detected. This parameter is configured only when the whitelist module is configured as the Web application regular type (the value of the BypassTags parameter is regular_type). Value:
     * - sqli: Indicates SQL injection.
     * - xss: Indicates cross-site scripting (XSS).
     * - cmdi: Indicates OS command injection.
     * - expression_injection: Indicates expression injection.
     * - java_deserialization: indicates Java deserialization.
     * - dot_net_deserialization: Represents. net deserialization.
     * - php_deserialization: indicates PHP deserialization.
     * - code_exec: Indicates code execution.
     * - ssrf: indicates SSRF (server-side request forgery).
     * - path_traversal: indicates a Path Traversal.
     * - arbitrary_file_uploading: Indicates to upload any file.
     * - webshell: Represents a webshell.
     * - rfilei: Indicates the remote file contains (RFI).
     * - lfilei: Indicates that the local file contains (LFI).
     * - protocol_violation: indicates a protocol violation.
     * - scanner_behavior: Indicates scanner behavior.
     * - logic_flaw: Indicates a business logic defect.
     * - arbitrary_file_reading: Indicates arbitrary file reading.
     * - arbitrary_file_download: Indicates an arbitrary file download.
     * - xxe: Indicates external entity injection.
     * - csrf: indicates cross-site request forgery.
     * - crlf: indicates CRLF.
     * - other: indicates other.
     * 
     */
    public Optional<Output<List<String>>> bypassRegularTypes() {
        return Optional.ofNullable(this.bypassRegularTypes);
    }

    /**
     * The modules to which the whitelist applies. The value is in the [&#34;XX1&#34;, &#34;XX2&#34;,...] format. Valid values:
     * - waf: indicates all modules.
     * - customrule: indicates custom rules.
     * - blacklist: indicates IP blacklist.
     * - antiscan: indicates scan protection.
     * - regular: indicates basic protection rules.
     * - regular_rule: indicates specific regular rules in basic protection.
     * - regular_type: indicates specific regular rule types in basic protection.
     * - major_protection: indicates major event support protection.
     * - cc: indicates CC protection.
     * - region_block: indicates Location Blacklist.
     * - antibot_scene: indicates BOT scenario protection.
     * - dlp: indicates information leakage prevention.
     * - tamperproof: indicates web tamper-proofing.
     * - spike_throttle: indicates peak traffic throttling.
     * 
     */
    @Import(name="bypassTags")
    private @Nullable Output<List<String>> bypassTags;

    /**
     * @return The modules to which the whitelist applies. The value is in the [&#34;XX1&#34;, &#34;XX2&#34;,...] format. Valid values:
     * - waf: indicates all modules.
     * - customrule: indicates custom rules.
     * - blacklist: indicates IP blacklist.
     * - antiscan: indicates scan protection.
     * - regular: indicates basic protection rules.
     * - regular_rule: indicates specific regular rules in basic protection.
     * - regular_type: indicates specific regular rule types in basic protection.
     * - major_protection: indicates major event support protection.
     * - cc: indicates CC protection.
     * - region_block: indicates Location Blacklist.
     * - antibot_scene: indicates BOT scenario protection.
     * - dlp: indicates information leakage prevention.
     * - tamperproof: indicates web tamper-proofing.
     * - spike_throttle: indicates peak traffic throttling.
     * 
     */
    public Optional<Output<List<String>>> bypassTags() {
        return Optional.ofNullable(this.bypassTags);
    }

    /**
     * Set the effective range of the speed limit. This information is configured only when ccStatus is set to 1. Value:
     * - service: indicates that the effective object is a protected object.
     * - rule: indicates that the effective object is a single rule.
     * 
     */
    @Import(name="ccEffect")
    private @Nullable Output<String> ccEffect;

    /**
     * @return Set the effective range of the speed limit. This information is configured only when ccStatus is set to 1. Value:
     * - service: indicates that the effective object is a protected object.
     * - rule: indicates that the effective object is a single rule.
     * 
     */
    public Optional<Output<String>> ccEffect() {
        return Optional.ofNullable(this.ccEffect);
    }

    /**
     * Whether to open the speed limit. Value:
     * - 0: indicates that the speed limit is off.
     * - 1: Indicates that the speed limit is on.
     * 
     */
    @Import(name="ccStatus")
    private @Nullable Output<Integer> ccStatus;

    /**
     * @return Whether to open the speed limit. Value:
     * - 0: indicates that the speed limit is off.
     * - 1: Indicates that the speed limit is on.
     * 
     */
    public Optional<Output<Integer>> ccStatus() {
        return Optional.ofNullable(this.ccStatus);
    }

    /**
     * The regions in China from which you want to block requests. If you specify &#34;CN&#34;, requests from the Chinese mainland (excluding Hong Kong, Macao, and Taiwan) are blocked. Separate multiple regions with commas (,). For more information about region codes, see Description of region codes in China.
     * 
     */
    @Import(name="cnRegions")
    private @Nullable Output<String> cnRegions;

    /**
     * @return The regions in China from which you want to block requests. If you specify &#34;CN&#34;, requests from the Chinese mainland (excluding Hong Kong, Macao, and Taiwan) are blocked. Separate multiple regions with commas (,). For more information about region codes, see Description of region codes in China.
     * 
     */
    public Optional<Output<String>> cnRegions() {
        return Optional.ofNullable(this.cnRegions);
    }

    /**
     * The traffic characteristics of ACL, which are described in JSON format. You can enter up to five matching conditions. For specific configuration information, see detailed configuration of conditions. See `conditions` below.
     * 
     */
    @Import(name="conditions")
    private @Nullable Output<List<DefenseRuleConfigConditionArgs>> conditions;

    /**
     * @return The traffic characteristics of ACL, which are described in JSON format. You can enter up to five matching conditions. For specific configuration information, see detailed configuration of conditions. See `conditions` below.
     * 
     */
    public Optional<Output<List<DefenseRuleConfigConditionArgs>>> conditions() {
        return Optional.ofNullable(this.conditions);
    }

    /**
     * The HTTP flood protection mode. Valid values:
     * - 0 (default): indicates normal protection.
     * - 1: indicates emergency protection.
     * 
     */
    @Import(name="mode")
    private @Nullable Output<Integer> mode;

    /**
     * @return The HTTP flood protection mode. Valid values:
     * - 0 (default): indicates normal protection.
     * - 1: indicates emergency protection.
     * 
     */
    public Optional<Output<Integer>> mode() {
        return Optional.ofNullable(this.mode);
    }

    /**
     * The protocol type of the cached page address. Valid values: http, https.
     * 
     */
    @Import(name="protocol")
    private @Nullable Output<String> protocol;

    /**
     * @return The protocol type of the cached page address. Valid values: http, https.
     * 
     */
    public Optional<Output<String>> protocol() {
        return Optional.ofNullable(this.protocol);
    }

    /**
     * The detailed speed limit configuration, which is described in the JSON string format. This information is configured only when CcStatus is set to 1. For specific configuration information, see detailed configuration of Ratelimit. See `rateLimit` below.
     * 
     */
    @Import(name="rateLimit")
    private @Nullable Output<DefenseRuleConfigRateLimitArgs> rateLimit;

    /**
     * @return The detailed speed limit configuration, which is described in the JSON string format. This information is configured only when CcStatus is set to 1. For specific configuration information, see detailed configuration of Ratelimit. See `rateLimit` below.
     * 
     */
    public Optional<Output<DefenseRuleConfigRateLimitArgs>> rateLimit() {
        return Optional.ofNullable(this.rateLimit);
    }

    /**
     * The IP addresses that you want to add to the blacklist. Specify the value of this parameter in the [&#34;ip1&#34;,&#34;ip2&#34;,...] format.
     * 
     */
    @Import(name="remoteAddrs")
    private @Nullable Output<List<String>> remoteAddrs;

    /**
     * @return The IP addresses that you want to add to the blacklist. Specify the value of this parameter in the [&#34;ip1&#34;,&#34;ip2&#34;,...] format.
     * 
     */
    public Optional<Output<List<String>>> remoteAddrs() {
        return Optional.ofNullable(this.remoteAddrs);
    }

    /**
     * Protection rule action. Value:
     * - block: Indicates an intercept.
     * - monitor: indicates observation.
     * - js: indicates JS validation.
     * - captcha: Indicates a slider.
     * - captcha_strict: indicates a strict slider.
     * - filter: filters sensitive information. This action applies only to scenarios that the Information leakage prevention rule include sensitive information match conditions.
     * 
     * &gt; **NOTE:**  For the supported protection rule actions, follow the rule actions displayed in the WAF console.
     * 
     */
    @Import(name="ruleAction")
    private @Nullable Output<String> ruleAction;

    /**
     * @return Protection rule action. Value:
     * - block: Indicates an intercept.
     * - monitor: indicates observation.
     * - js: indicates JS validation.
     * - captcha: Indicates a slider.
     * - captcha_strict: indicates a strict slider.
     * - filter: filters sensitive information. This action applies only to scenarios that the Information leakage prevention rule include sensitive information match conditions.
     * 
     * &gt; **NOTE:**  For the supported protection rule actions, follow the rule actions displayed in the WAF console.
     * 
     */
    public Optional<Output<String>> ruleAction() {
        return Optional.ofNullable(this.ruleAction);
    }

    /**
     * The throttling threshold. Valid values:
     * - The QPS throttling threshold ranges from 1 to 5000000. If you select QPS throttling (such as 500 QPS), traffic that meets the throttling conditions and exceeds 500 QPS will be blocked.
     * - The percentage throttling threshold ranges from 1 to 99. If you select percentage throttling (such as 80%), only 80% of the traffic that meets the throttling conditions will be allowed.
     * 
     */
    @Import(name="throttleThrehold")
    private @Nullable Output<Integer> throttleThrehold;

    /**
     * @return The throttling threshold. Valid values:
     * - The QPS throttling threshold ranges from 1 to 5000000. If you select QPS throttling (such as 500 QPS), traffic that meets the throttling conditions and exceeds 500 QPS will be blocked.
     * - The percentage throttling threshold ranges from 1 to 99. If you select percentage throttling (such as 80%), only 80% of the traffic that meets the throttling conditions will be allowed.
     * 
     */
    public Optional<Output<Integer>> throttleThrehold() {
        return Optional.ofNullable(this.throttleThrehold);
    }

    /**
     * The throttling method. Valid values:
     * - qps: indicates throttling based on queries per second (QPS).
     * - ratio (default): indicates throttling based on percentage.
     * 
     */
    @Import(name="throttleType")
    private @Nullable Output<String> throttleType;

    /**
     * @return The throttling method. Valid values:
     * - qps: indicates throttling based on queries per second (QPS).
     * - ratio (default): indicates throttling based on percentage.
     * 
     */
    public Optional<Output<String>> throttleType() {
        return Optional.ofNullable(this.throttleType);
    }

    /**
     * The User-Agent string that is allowed for access to the address.
     * 
     */
    @Import(name="ua")
    private @Nullable Output<String> ua;

    /**
     * @return The User-Agent string that is allowed for access to the address.
     * 
     */
    public Optional<Output<String>> ua() {
        return Optional.ofNullable(this.ua);
    }

    /**
     * The address of the cached page.
     * 
     */
    @Import(name="url")
    private @Nullable Output<String> url;

    /**
     * @return The address of the cached page.
     * 
     */
    public Optional<Output<String>> url() {
        return Optional.ofNullable(this.url);
    }

    private DefenseRuleConfigArgs() {}

    private DefenseRuleConfigArgs(DefenseRuleConfigArgs $) {
        this.abroadRegions = $.abroadRegions;
        this.accountIdentifiers = $.accountIdentifiers;
        this.bypassRegularRules = $.bypassRegularRules;
        this.bypassRegularTypes = $.bypassRegularTypes;
        this.bypassTags = $.bypassTags;
        this.ccEffect = $.ccEffect;
        this.ccStatus = $.ccStatus;
        this.cnRegions = $.cnRegions;
        this.conditions = $.conditions;
        this.mode = $.mode;
        this.protocol = $.protocol;
        this.rateLimit = $.rateLimit;
        this.remoteAddrs = $.remoteAddrs;
        this.ruleAction = $.ruleAction;
        this.throttleThrehold = $.throttleThrehold;
        this.throttleType = $.throttleType;
        this.ua = $.ua;
        this.url = $.url;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DefenseRuleConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DefenseRuleConfigArgs $;

        public Builder() {
            $ = new DefenseRuleConfigArgs();
        }

        public Builder(DefenseRuleConfigArgs defaults) {
            $ = new DefenseRuleConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param abroadRegions The regions outside China from which you want to block requests. Separate multiple region codes with commas (,). You can call the DescribeIpAbroadCountryInfos operation to query the countries and regions outside China that can be blocked.
         * 
         * @return builder
         * 
         */
        public Builder abroadRegions(@Nullable Output<String> abroadRegions) {
            $.abroadRegions = abroadRegions;
            return this;
        }

        /**
         * @param abroadRegions The regions outside China from which you want to block requests. Separate multiple region codes with commas (,). You can call the DescribeIpAbroadCountryInfos operation to query the countries and regions outside China that can be blocked.
         * 
         * @return builder
         * 
         */
        public Builder abroadRegions(String abroadRegions) {
            return abroadRegions(Output.of(abroadRegions));
        }

        /**
         * @param accountIdentifiers The policies for account extraction. Up to five policies are supported. Each policy is a JSON string. For more information, see accountIdentifiers description. See `accountIdentifiers` below.
         * 
         * @return builder
         * 
         */
        public Builder accountIdentifiers(@Nullable Output<List<DefenseRuleConfigAccountIdentifierArgs>> accountIdentifiers) {
            $.accountIdentifiers = accountIdentifiers;
            return this;
        }

        /**
         * @param accountIdentifiers The policies for account extraction. Up to five policies are supported. Each policy is a JSON string. For more information, see accountIdentifiers description. See `accountIdentifiers` below.
         * 
         * @return builder
         * 
         */
        public Builder accountIdentifiers(List<DefenseRuleConfigAccountIdentifierArgs> accountIdentifiers) {
            return accountIdentifiers(Output.of(accountIdentifiers));
        }

        /**
         * @param accountIdentifiers The policies for account extraction. Up to five policies are supported. Each policy is a JSON string. For more information, see accountIdentifiers description. See `accountIdentifiers` below.
         * 
         * @return builder
         * 
         */
        public Builder accountIdentifiers(DefenseRuleConfigAccountIdentifierArgs... accountIdentifiers) {
            return accountIdentifiers(List.of(accountIdentifiers));
        }

        /**
         * @param bypassRegularRules The list of regular rule IDs that are not detected. The value is in the [&#34;XX1&#34;, &#34;XX2&#34;,...] format. This parameter is required only when the module to which the whitelist applies is set to specific regular rules in basic protection (BypassTags is set to regular_rule).
         * 
         * @return builder
         * 
         */
        public Builder bypassRegularRules(@Nullable Output<List<String>> bypassRegularRules) {
            $.bypassRegularRules = bypassRegularRules;
            return this;
        }

        /**
         * @param bypassRegularRules The list of regular rule IDs that are not detected. The value is in the [&#34;XX1&#34;, &#34;XX2&#34;,...] format. This parameter is required only when the module to which the whitelist applies is set to specific regular rules in basic protection (BypassTags is set to regular_rule).
         * 
         * @return builder
         * 
         */
        public Builder bypassRegularRules(List<String> bypassRegularRules) {
            return bypassRegularRules(Output.of(bypassRegularRules));
        }

        /**
         * @param bypassRegularRules The list of regular rule IDs that are not detected. The value is in the [&#34;XX1&#34;, &#34;XX2&#34;,...] format. This parameter is required only when the module to which the whitelist applies is set to specific regular rules in basic protection (BypassTags is set to regular_rule).
         * 
         * @return builder
         * 
         */
        public Builder bypassRegularRules(String... bypassRegularRules) {
            return bypassRegularRules(List.of(bypassRegularRules));
        }

        /**
         * @param bypassRegularTypes The regular rule type is not detected. This parameter is configured only when the whitelist module is configured as the Web application regular type (the value of the BypassTags parameter is regular_type). Value:
         * - sqli: Indicates SQL injection.
         * - xss: Indicates cross-site scripting (XSS).
         * - cmdi: Indicates OS command injection.
         * - expression_injection: Indicates expression injection.
         * - java_deserialization: indicates Java deserialization.
         * - dot_net_deserialization: Represents. net deserialization.
         * - php_deserialization: indicates PHP deserialization.
         * - code_exec: Indicates code execution.
         * - ssrf: indicates SSRF (server-side request forgery).
         * - path_traversal: indicates a Path Traversal.
         * - arbitrary_file_uploading: Indicates to upload any file.
         * - webshell: Represents a webshell.
         * - rfilei: Indicates the remote file contains (RFI).
         * - lfilei: Indicates that the local file contains (LFI).
         * - protocol_violation: indicates a protocol violation.
         * - scanner_behavior: Indicates scanner behavior.
         * - logic_flaw: Indicates a business logic defect.
         * - arbitrary_file_reading: Indicates arbitrary file reading.
         * - arbitrary_file_download: Indicates an arbitrary file download.
         * - xxe: Indicates external entity injection.
         * - csrf: indicates cross-site request forgery.
         * - crlf: indicates CRLF.
         * - other: indicates other.
         * 
         * @return builder
         * 
         */
        public Builder bypassRegularTypes(@Nullable Output<List<String>> bypassRegularTypes) {
            $.bypassRegularTypes = bypassRegularTypes;
            return this;
        }

        /**
         * @param bypassRegularTypes The regular rule type is not detected. This parameter is configured only when the whitelist module is configured as the Web application regular type (the value of the BypassTags parameter is regular_type). Value:
         * - sqli: Indicates SQL injection.
         * - xss: Indicates cross-site scripting (XSS).
         * - cmdi: Indicates OS command injection.
         * - expression_injection: Indicates expression injection.
         * - java_deserialization: indicates Java deserialization.
         * - dot_net_deserialization: Represents. net deserialization.
         * - php_deserialization: indicates PHP deserialization.
         * - code_exec: Indicates code execution.
         * - ssrf: indicates SSRF (server-side request forgery).
         * - path_traversal: indicates a Path Traversal.
         * - arbitrary_file_uploading: Indicates to upload any file.
         * - webshell: Represents a webshell.
         * - rfilei: Indicates the remote file contains (RFI).
         * - lfilei: Indicates that the local file contains (LFI).
         * - protocol_violation: indicates a protocol violation.
         * - scanner_behavior: Indicates scanner behavior.
         * - logic_flaw: Indicates a business logic defect.
         * - arbitrary_file_reading: Indicates arbitrary file reading.
         * - arbitrary_file_download: Indicates an arbitrary file download.
         * - xxe: Indicates external entity injection.
         * - csrf: indicates cross-site request forgery.
         * - crlf: indicates CRLF.
         * - other: indicates other.
         * 
         * @return builder
         * 
         */
        public Builder bypassRegularTypes(List<String> bypassRegularTypes) {
            return bypassRegularTypes(Output.of(bypassRegularTypes));
        }

        /**
         * @param bypassRegularTypes The regular rule type is not detected. This parameter is configured only when the whitelist module is configured as the Web application regular type (the value of the BypassTags parameter is regular_type). Value:
         * - sqli: Indicates SQL injection.
         * - xss: Indicates cross-site scripting (XSS).
         * - cmdi: Indicates OS command injection.
         * - expression_injection: Indicates expression injection.
         * - java_deserialization: indicates Java deserialization.
         * - dot_net_deserialization: Represents. net deserialization.
         * - php_deserialization: indicates PHP deserialization.
         * - code_exec: Indicates code execution.
         * - ssrf: indicates SSRF (server-side request forgery).
         * - path_traversal: indicates a Path Traversal.
         * - arbitrary_file_uploading: Indicates to upload any file.
         * - webshell: Represents a webshell.
         * - rfilei: Indicates the remote file contains (RFI).
         * - lfilei: Indicates that the local file contains (LFI).
         * - protocol_violation: indicates a protocol violation.
         * - scanner_behavior: Indicates scanner behavior.
         * - logic_flaw: Indicates a business logic defect.
         * - arbitrary_file_reading: Indicates arbitrary file reading.
         * - arbitrary_file_download: Indicates an arbitrary file download.
         * - xxe: Indicates external entity injection.
         * - csrf: indicates cross-site request forgery.
         * - crlf: indicates CRLF.
         * - other: indicates other.
         * 
         * @return builder
         * 
         */
        public Builder bypassRegularTypes(String... bypassRegularTypes) {
            return bypassRegularTypes(List.of(bypassRegularTypes));
        }

        /**
         * @param bypassTags The modules to which the whitelist applies. The value is in the [&#34;XX1&#34;, &#34;XX2&#34;,...] format. Valid values:
         * - waf: indicates all modules.
         * - customrule: indicates custom rules.
         * - blacklist: indicates IP blacklist.
         * - antiscan: indicates scan protection.
         * - regular: indicates basic protection rules.
         * - regular_rule: indicates specific regular rules in basic protection.
         * - regular_type: indicates specific regular rule types in basic protection.
         * - major_protection: indicates major event support protection.
         * - cc: indicates CC protection.
         * - region_block: indicates Location Blacklist.
         * - antibot_scene: indicates BOT scenario protection.
         * - dlp: indicates information leakage prevention.
         * - tamperproof: indicates web tamper-proofing.
         * - spike_throttle: indicates peak traffic throttling.
         * 
         * @return builder
         * 
         */
        public Builder bypassTags(@Nullable Output<List<String>> bypassTags) {
            $.bypassTags = bypassTags;
            return this;
        }

        /**
         * @param bypassTags The modules to which the whitelist applies. The value is in the [&#34;XX1&#34;, &#34;XX2&#34;,...] format. Valid values:
         * - waf: indicates all modules.
         * - customrule: indicates custom rules.
         * - blacklist: indicates IP blacklist.
         * - antiscan: indicates scan protection.
         * - regular: indicates basic protection rules.
         * - regular_rule: indicates specific regular rules in basic protection.
         * - regular_type: indicates specific regular rule types in basic protection.
         * - major_protection: indicates major event support protection.
         * - cc: indicates CC protection.
         * - region_block: indicates Location Blacklist.
         * - antibot_scene: indicates BOT scenario protection.
         * - dlp: indicates information leakage prevention.
         * - tamperproof: indicates web tamper-proofing.
         * - spike_throttle: indicates peak traffic throttling.
         * 
         * @return builder
         * 
         */
        public Builder bypassTags(List<String> bypassTags) {
            return bypassTags(Output.of(bypassTags));
        }

        /**
         * @param bypassTags The modules to which the whitelist applies. The value is in the [&#34;XX1&#34;, &#34;XX2&#34;,...] format. Valid values:
         * - waf: indicates all modules.
         * - customrule: indicates custom rules.
         * - blacklist: indicates IP blacklist.
         * - antiscan: indicates scan protection.
         * - regular: indicates basic protection rules.
         * - regular_rule: indicates specific regular rules in basic protection.
         * - regular_type: indicates specific regular rule types in basic protection.
         * - major_protection: indicates major event support protection.
         * - cc: indicates CC protection.
         * - region_block: indicates Location Blacklist.
         * - antibot_scene: indicates BOT scenario protection.
         * - dlp: indicates information leakage prevention.
         * - tamperproof: indicates web tamper-proofing.
         * - spike_throttle: indicates peak traffic throttling.
         * 
         * @return builder
         * 
         */
        public Builder bypassTags(String... bypassTags) {
            return bypassTags(List.of(bypassTags));
        }

        /**
         * @param ccEffect Set the effective range of the speed limit. This information is configured only when ccStatus is set to 1. Value:
         * - service: indicates that the effective object is a protected object.
         * - rule: indicates that the effective object is a single rule.
         * 
         * @return builder
         * 
         */
        public Builder ccEffect(@Nullable Output<String> ccEffect) {
            $.ccEffect = ccEffect;
            return this;
        }

        /**
         * @param ccEffect Set the effective range of the speed limit. This information is configured only when ccStatus is set to 1. Value:
         * - service: indicates that the effective object is a protected object.
         * - rule: indicates that the effective object is a single rule.
         * 
         * @return builder
         * 
         */
        public Builder ccEffect(String ccEffect) {
            return ccEffect(Output.of(ccEffect));
        }

        /**
         * @param ccStatus Whether to open the speed limit. Value:
         * - 0: indicates that the speed limit is off.
         * - 1: Indicates that the speed limit is on.
         * 
         * @return builder
         * 
         */
        public Builder ccStatus(@Nullable Output<Integer> ccStatus) {
            $.ccStatus = ccStatus;
            return this;
        }

        /**
         * @param ccStatus Whether to open the speed limit. Value:
         * - 0: indicates that the speed limit is off.
         * - 1: Indicates that the speed limit is on.
         * 
         * @return builder
         * 
         */
        public Builder ccStatus(Integer ccStatus) {
            return ccStatus(Output.of(ccStatus));
        }

        /**
         * @param cnRegions The regions in China from which you want to block requests. If you specify &#34;CN&#34;, requests from the Chinese mainland (excluding Hong Kong, Macao, and Taiwan) are blocked. Separate multiple regions with commas (,). For more information about region codes, see Description of region codes in China.
         * 
         * @return builder
         * 
         */
        public Builder cnRegions(@Nullable Output<String> cnRegions) {
            $.cnRegions = cnRegions;
            return this;
        }

        /**
         * @param cnRegions The regions in China from which you want to block requests. If you specify &#34;CN&#34;, requests from the Chinese mainland (excluding Hong Kong, Macao, and Taiwan) are blocked. Separate multiple regions with commas (,). For more information about region codes, see Description of region codes in China.
         * 
         * @return builder
         * 
         */
        public Builder cnRegions(String cnRegions) {
            return cnRegions(Output.of(cnRegions));
        }

        /**
         * @param conditions The traffic characteristics of ACL, which are described in JSON format. You can enter up to five matching conditions. For specific configuration information, see detailed configuration of conditions. See `conditions` below.
         * 
         * @return builder
         * 
         */
        public Builder conditions(@Nullable Output<List<DefenseRuleConfigConditionArgs>> conditions) {
            $.conditions = conditions;
            return this;
        }

        /**
         * @param conditions The traffic characteristics of ACL, which are described in JSON format. You can enter up to five matching conditions. For specific configuration information, see detailed configuration of conditions. See `conditions` below.
         * 
         * @return builder
         * 
         */
        public Builder conditions(List<DefenseRuleConfigConditionArgs> conditions) {
            return conditions(Output.of(conditions));
        }

        /**
         * @param conditions The traffic characteristics of ACL, which are described in JSON format. You can enter up to five matching conditions. For specific configuration information, see detailed configuration of conditions. See `conditions` below.
         * 
         * @return builder
         * 
         */
        public Builder conditions(DefenseRuleConfigConditionArgs... conditions) {
            return conditions(List.of(conditions));
        }

        /**
         * @param mode The HTTP flood protection mode. Valid values:
         * - 0 (default): indicates normal protection.
         * - 1: indicates emergency protection.
         * 
         * @return builder
         * 
         */
        public Builder mode(@Nullable Output<Integer> mode) {
            $.mode = mode;
            return this;
        }

        /**
         * @param mode The HTTP flood protection mode. Valid values:
         * - 0 (default): indicates normal protection.
         * - 1: indicates emergency protection.
         * 
         * @return builder
         * 
         */
        public Builder mode(Integer mode) {
            return mode(Output.of(mode));
        }

        /**
         * @param protocol The protocol type of the cached page address. Valid values: http, https.
         * 
         * @return builder
         * 
         */
        public Builder protocol(@Nullable Output<String> protocol) {
            $.protocol = protocol;
            return this;
        }

        /**
         * @param protocol The protocol type of the cached page address. Valid values: http, https.
         * 
         * @return builder
         * 
         */
        public Builder protocol(String protocol) {
            return protocol(Output.of(protocol));
        }

        /**
         * @param rateLimit The detailed speed limit configuration, which is described in the JSON string format. This information is configured only when CcStatus is set to 1. For specific configuration information, see detailed configuration of Ratelimit. See `rateLimit` below.
         * 
         * @return builder
         * 
         */
        public Builder rateLimit(@Nullable Output<DefenseRuleConfigRateLimitArgs> rateLimit) {
            $.rateLimit = rateLimit;
            return this;
        }

        /**
         * @param rateLimit The detailed speed limit configuration, which is described in the JSON string format. This information is configured only when CcStatus is set to 1. For specific configuration information, see detailed configuration of Ratelimit. See `rateLimit` below.
         * 
         * @return builder
         * 
         */
        public Builder rateLimit(DefenseRuleConfigRateLimitArgs rateLimit) {
            return rateLimit(Output.of(rateLimit));
        }

        /**
         * @param remoteAddrs The IP addresses that you want to add to the blacklist. Specify the value of this parameter in the [&#34;ip1&#34;,&#34;ip2&#34;,...] format.
         * 
         * @return builder
         * 
         */
        public Builder remoteAddrs(@Nullable Output<List<String>> remoteAddrs) {
            $.remoteAddrs = remoteAddrs;
            return this;
        }

        /**
         * @param remoteAddrs The IP addresses that you want to add to the blacklist. Specify the value of this parameter in the [&#34;ip1&#34;,&#34;ip2&#34;,...] format.
         * 
         * @return builder
         * 
         */
        public Builder remoteAddrs(List<String> remoteAddrs) {
            return remoteAddrs(Output.of(remoteAddrs));
        }

        /**
         * @param remoteAddrs The IP addresses that you want to add to the blacklist. Specify the value of this parameter in the [&#34;ip1&#34;,&#34;ip2&#34;,...] format.
         * 
         * @return builder
         * 
         */
        public Builder remoteAddrs(String... remoteAddrs) {
            return remoteAddrs(List.of(remoteAddrs));
        }

        /**
         * @param ruleAction Protection rule action. Value:
         * - block: Indicates an intercept.
         * - monitor: indicates observation.
         * - js: indicates JS validation.
         * - captcha: Indicates a slider.
         * - captcha_strict: indicates a strict slider.
         * - filter: filters sensitive information. This action applies only to scenarios that the Information leakage prevention rule include sensitive information match conditions.
         * 
         * &gt; **NOTE:**  For the supported protection rule actions, follow the rule actions displayed in the WAF console.
         * 
         * @return builder
         * 
         */
        public Builder ruleAction(@Nullable Output<String> ruleAction) {
            $.ruleAction = ruleAction;
            return this;
        }

        /**
         * @param ruleAction Protection rule action. Value:
         * - block: Indicates an intercept.
         * - monitor: indicates observation.
         * - js: indicates JS validation.
         * - captcha: Indicates a slider.
         * - captcha_strict: indicates a strict slider.
         * - filter: filters sensitive information. This action applies only to scenarios that the Information leakage prevention rule include sensitive information match conditions.
         * 
         * &gt; **NOTE:**  For the supported protection rule actions, follow the rule actions displayed in the WAF console.
         * 
         * @return builder
         * 
         */
        public Builder ruleAction(String ruleAction) {
            return ruleAction(Output.of(ruleAction));
        }

        /**
         * @param throttleThrehold The throttling threshold. Valid values:
         * - The QPS throttling threshold ranges from 1 to 5000000. If you select QPS throttling (such as 500 QPS), traffic that meets the throttling conditions and exceeds 500 QPS will be blocked.
         * - The percentage throttling threshold ranges from 1 to 99. If you select percentage throttling (such as 80%), only 80% of the traffic that meets the throttling conditions will be allowed.
         * 
         * @return builder
         * 
         */
        public Builder throttleThrehold(@Nullable Output<Integer> throttleThrehold) {
            $.throttleThrehold = throttleThrehold;
            return this;
        }

        /**
         * @param throttleThrehold The throttling threshold. Valid values:
         * - The QPS throttling threshold ranges from 1 to 5000000. If you select QPS throttling (such as 500 QPS), traffic that meets the throttling conditions and exceeds 500 QPS will be blocked.
         * - The percentage throttling threshold ranges from 1 to 99. If you select percentage throttling (such as 80%), only 80% of the traffic that meets the throttling conditions will be allowed.
         * 
         * @return builder
         * 
         */
        public Builder throttleThrehold(Integer throttleThrehold) {
            return throttleThrehold(Output.of(throttleThrehold));
        }

        /**
         * @param throttleType The throttling method. Valid values:
         * - qps: indicates throttling based on queries per second (QPS).
         * - ratio (default): indicates throttling based on percentage.
         * 
         * @return builder
         * 
         */
        public Builder throttleType(@Nullable Output<String> throttleType) {
            $.throttleType = throttleType;
            return this;
        }

        /**
         * @param throttleType The throttling method. Valid values:
         * - qps: indicates throttling based on queries per second (QPS).
         * - ratio (default): indicates throttling based on percentage.
         * 
         * @return builder
         * 
         */
        public Builder throttleType(String throttleType) {
            return throttleType(Output.of(throttleType));
        }

        /**
         * @param ua The User-Agent string that is allowed for access to the address.
         * 
         * @return builder
         * 
         */
        public Builder ua(@Nullable Output<String> ua) {
            $.ua = ua;
            return this;
        }

        /**
         * @param ua The User-Agent string that is allowed for access to the address.
         * 
         * @return builder
         * 
         */
        public Builder ua(String ua) {
            return ua(Output.of(ua));
        }

        /**
         * @param url The address of the cached page.
         * 
         * @return builder
         * 
         */
        public Builder url(@Nullable Output<String> url) {
            $.url = url;
            return this;
        }

        /**
         * @param url The address of the cached page.
         * 
         * @return builder
         * 
         */
        public Builder url(String url) {
            return url(Output.of(url));
        }

        public DefenseRuleConfigArgs build() {
            return $;
        }
    }

}
