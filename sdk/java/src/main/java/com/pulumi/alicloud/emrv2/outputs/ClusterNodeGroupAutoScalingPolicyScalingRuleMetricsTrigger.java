// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.emrv2.outputs;

import com.pulumi.alicloud.emrv2.outputs.ClusterNodeGroupAutoScalingPolicyScalingRuleMetricsTriggerCondition;
import com.pulumi.alicloud.emrv2.outputs.ClusterNodeGroupAutoScalingPolicyScalingRuleMetricsTriggerTimeConstraint;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ClusterNodeGroupAutoScalingPolicyScalingRuleMetricsTrigger {
    /**
     * @return The condition logic operator for this scaling rule specific metrics trigger. Valid values: `And` and `Or`.
     * 
     */
    private @Nullable String conditionLogicOperator;
    /**
     * @return The conditions for this scaling rule specific metrics trigger. See `conditions` below.
     * 
     */
    private @Nullable List<ClusterNodeGroupAutoScalingPolicyScalingRuleMetricsTriggerCondition> conditions;
    /**
     * @return The time of cool down interval for this scaling rule specific metrics trigger.
     * 
     */
    private @Nullable Integer coolDownInterval;
    /**
     * @return The evaluation count for this scaling rule specific metrics trigger.
     * 
     */
    private Integer evaluationCount;
    /**
     * @return The time constraints for this scaling rule specific metrics trigger. See `time_constraints` below.
     * 
     */
    private @Nullable List<ClusterNodeGroupAutoScalingPolicyScalingRuleMetricsTriggerTimeConstraint> timeConstraints;
    /**
     * @return The time window for this scaling rule specific metrics trigger.
     * 
     */
    private Integer timeWindow;

    private ClusterNodeGroupAutoScalingPolicyScalingRuleMetricsTrigger() {}
    /**
     * @return The condition logic operator for this scaling rule specific metrics trigger. Valid values: `And` and `Or`.
     * 
     */
    public Optional<String> conditionLogicOperator() {
        return Optional.ofNullable(this.conditionLogicOperator);
    }
    /**
     * @return The conditions for this scaling rule specific metrics trigger. See `conditions` below.
     * 
     */
    public List<ClusterNodeGroupAutoScalingPolicyScalingRuleMetricsTriggerCondition> conditions() {
        return this.conditions == null ? List.of() : this.conditions;
    }
    /**
     * @return The time of cool down interval for this scaling rule specific metrics trigger.
     * 
     */
    public Optional<Integer> coolDownInterval() {
        return Optional.ofNullable(this.coolDownInterval);
    }
    /**
     * @return The evaluation count for this scaling rule specific metrics trigger.
     * 
     */
    public Integer evaluationCount() {
        return this.evaluationCount;
    }
    /**
     * @return The time constraints for this scaling rule specific metrics trigger. See `time_constraints` below.
     * 
     */
    public List<ClusterNodeGroupAutoScalingPolicyScalingRuleMetricsTriggerTimeConstraint> timeConstraints() {
        return this.timeConstraints == null ? List.of() : this.timeConstraints;
    }
    /**
     * @return The time window for this scaling rule specific metrics trigger.
     * 
     */
    public Integer timeWindow() {
        return this.timeWindow;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ClusterNodeGroupAutoScalingPolicyScalingRuleMetricsTrigger defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String conditionLogicOperator;
        private @Nullable List<ClusterNodeGroupAutoScalingPolicyScalingRuleMetricsTriggerCondition> conditions;
        private @Nullable Integer coolDownInterval;
        private Integer evaluationCount;
        private @Nullable List<ClusterNodeGroupAutoScalingPolicyScalingRuleMetricsTriggerTimeConstraint> timeConstraints;
        private Integer timeWindow;
        public Builder() {}
        public Builder(ClusterNodeGroupAutoScalingPolicyScalingRuleMetricsTrigger defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.conditionLogicOperator = defaults.conditionLogicOperator;
    	      this.conditions = defaults.conditions;
    	      this.coolDownInterval = defaults.coolDownInterval;
    	      this.evaluationCount = defaults.evaluationCount;
    	      this.timeConstraints = defaults.timeConstraints;
    	      this.timeWindow = defaults.timeWindow;
        }

        @CustomType.Setter
        public Builder conditionLogicOperator(@Nullable String conditionLogicOperator) {

            this.conditionLogicOperator = conditionLogicOperator;
            return this;
        }
        @CustomType.Setter
        public Builder conditions(@Nullable List<ClusterNodeGroupAutoScalingPolicyScalingRuleMetricsTriggerCondition> conditions) {

            this.conditions = conditions;
            return this;
        }
        public Builder conditions(ClusterNodeGroupAutoScalingPolicyScalingRuleMetricsTriggerCondition... conditions) {
            return conditions(List.of(conditions));
        }
        @CustomType.Setter
        public Builder coolDownInterval(@Nullable Integer coolDownInterval) {

            this.coolDownInterval = coolDownInterval;
            return this;
        }
        @CustomType.Setter
        public Builder evaluationCount(Integer evaluationCount) {
            if (evaluationCount == null) {
              throw new MissingRequiredPropertyException("ClusterNodeGroupAutoScalingPolicyScalingRuleMetricsTrigger", "evaluationCount");
            }
            this.evaluationCount = evaluationCount;
            return this;
        }
        @CustomType.Setter
        public Builder timeConstraints(@Nullable List<ClusterNodeGroupAutoScalingPolicyScalingRuleMetricsTriggerTimeConstraint> timeConstraints) {

            this.timeConstraints = timeConstraints;
            return this;
        }
        public Builder timeConstraints(ClusterNodeGroupAutoScalingPolicyScalingRuleMetricsTriggerTimeConstraint... timeConstraints) {
            return timeConstraints(List.of(timeConstraints));
        }
        @CustomType.Setter
        public Builder timeWindow(Integer timeWindow) {
            if (timeWindow == null) {
              throw new MissingRequiredPropertyException("ClusterNodeGroupAutoScalingPolicyScalingRuleMetricsTrigger", "timeWindow");
            }
            this.timeWindow = timeWindow;
            return this;
        }
        public ClusterNodeGroupAutoScalingPolicyScalingRuleMetricsTrigger build() {
            final var _resultValue = new ClusterNodeGroupAutoScalingPolicyScalingRuleMetricsTrigger();
            _resultValue.conditionLogicOperator = conditionLogicOperator;
            _resultValue.conditions = conditions;
            _resultValue.coolDownInterval = coolDownInterval;
            _resultValue.evaluationCount = evaluationCount;
            _resultValue.timeConstraints = timeConstraints;
            _resultValue.timeWindow = timeWindow;
            return _resultValue;
        }
    }
}
