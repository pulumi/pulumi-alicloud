// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.nas.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetLifecyclePoliciesPolicy {
    /**
     * @return The time when the lifecycle management policy was created.
     * 
     */
    private String createTime;
    /**
     * @return The ID of the file system.
     * 
     */
    private String fileSystemId;
    /**
     * @return The ID of the Lifecycle Policy. Its value is same as Queue Name.
     * 
     */
    private String id;
    /**
     * @return The name of the lifecycle management policy.
     * 
     */
    private String lifecyclePolicyName;
    /**
     * @return The rules in the lifecycle management policy.
     * 
     */
    private String lifecycleRuleName;
    /**
     * @return The list of absolute paths for multiple directories. In this case, you can associate a lifecycle management policy with each directory.
     * 
     */
    private List<String> paths;
    /**
     * @return The storage type of the data that is dumped to the IA storage medium.
     * 
     */
    private String storageType;

    private GetLifecyclePoliciesPolicy() {}
    /**
     * @return The time when the lifecycle management policy was created.
     * 
     */
    public String createTime() {
        return this.createTime;
    }
    /**
     * @return The ID of the file system.
     * 
     */
    public String fileSystemId() {
        return this.fileSystemId;
    }
    /**
     * @return The ID of the Lifecycle Policy. Its value is same as Queue Name.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The name of the lifecycle management policy.
     * 
     */
    public String lifecyclePolicyName() {
        return this.lifecyclePolicyName;
    }
    /**
     * @return The rules in the lifecycle management policy.
     * 
     */
    public String lifecycleRuleName() {
        return this.lifecycleRuleName;
    }
    /**
     * @return The list of absolute paths for multiple directories. In this case, you can associate a lifecycle management policy with each directory.
     * 
     */
    public List<String> paths() {
        return this.paths;
    }
    /**
     * @return The storage type of the data that is dumped to the IA storage medium.
     * 
     */
    public String storageType() {
        return this.storageType;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetLifecyclePoliciesPolicy defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String createTime;
        private String fileSystemId;
        private String id;
        private String lifecyclePolicyName;
        private String lifecycleRuleName;
        private List<String> paths;
        private String storageType;
        public Builder() {}
        public Builder(GetLifecyclePoliciesPolicy defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.createTime = defaults.createTime;
    	      this.fileSystemId = defaults.fileSystemId;
    	      this.id = defaults.id;
    	      this.lifecyclePolicyName = defaults.lifecyclePolicyName;
    	      this.lifecycleRuleName = defaults.lifecycleRuleName;
    	      this.paths = defaults.paths;
    	      this.storageType = defaults.storageType;
        }

        @CustomType.Setter
        public Builder createTime(String createTime) {
            if (createTime == null) {
              throw new MissingRequiredPropertyException("GetLifecyclePoliciesPolicy", "createTime");
            }
            this.createTime = createTime;
            return this;
        }
        @CustomType.Setter
        public Builder fileSystemId(String fileSystemId) {
            if (fileSystemId == null) {
              throw new MissingRequiredPropertyException("GetLifecyclePoliciesPolicy", "fileSystemId");
            }
            this.fileSystemId = fileSystemId;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetLifecyclePoliciesPolicy", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder lifecyclePolicyName(String lifecyclePolicyName) {
            if (lifecyclePolicyName == null) {
              throw new MissingRequiredPropertyException("GetLifecyclePoliciesPolicy", "lifecyclePolicyName");
            }
            this.lifecyclePolicyName = lifecyclePolicyName;
            return this;
        }
        @CustomType.Setter
        public Builder lifecycleRuleName(String lifecycleRuleName) {
            if (lifecycleRuleName == null) {
              throw new MissingRequiredPropertyException("GetLifecyclePoliciesPolicy", "lifecycleRuleName");
            }
            this.lifecycleRuleName = lifecycleRuleName;
            return this;
        }
        @CustomType.Setter
        public Builder paths(List<String> paths) {
            if (paths == null) {
              throw new MissingRequiredPropertyException("GetLifecyclePoliciesPolicy", "paths");
            }
            this.paths = paths;
            return this;
        }
        public Builder paths(String... paths) {
            return paths(List.of(paths));
        }
        @CustomType.Setter
        public Builder storageType(String storageType) {
            if (storageType == null) {
              throw new MissingRequiredPropertyException("GetLifecyclePoliciesPolicy", "storageType");
            }
            this.storageType = storageType;
            return this;
        }
        public GetLifecyclePoliciesPolicy build() {
            final var _resultValue = new GetLifecyclePoliciesPolicy();
            _resultValue.createTime = createTime;
            _resultValue.fileSystemId = fileSystemId;
            _resultValue.id = id;
            _resultValue.lifecyclePolicyName = lifecyclePolicyName;
            _resultValue.lifecycleRuleName = lifecycleRuleName;
            _resultValue.paths = paths;
            _resultValue.storageType = storageType;
            return _resultValue;
        }
    }
}
