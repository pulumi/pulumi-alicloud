// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.kms;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;


public final class AliasArgs extends com.pulumi.resources.ResourceArgs {

    public static final AliasArgs Empty = new AliasArgs();

    /**
     * The alias of CMK. `Encrypt`、`GenerateDataKey`、`DescribeKey` can be called using aliases. Length of characters other than prefixes: minimum length of 1 character and maximum length of 255 characters. Must contain prefix `alias/`.
     * 
     */
    @Import(name="aliasName", required=true)
    private Output<String> aliasName;

    /**
     * @return The alias of CMK. `Encrypt`、`GenerateDataKey`、`DescribeKey` can be called using aliases. Length of characters other than prefixes: minimum length of 1 character and maximum length of 255 characters. Must contain prefix `alias/`.
     * 
     */
    public Output<String> aliasName() {
        return this.aliasName;
    }

    /**
     * The id of the key.
     * 
     * &gt; **NOTE:** Each alias represents only one master key(CMK).
     * 
     * &gt; **NOTE:** Within an area of the same user, alias is not reproducible.
     * 
     * &gt; **NOTE:** UpdateAlias can be used to update the mapping relationship between alias and master key(CMK).
     * 
     */
    @Import(name="keyId", required=true)
    private Output<String> keyId;

    /**
     * @return The id of the key.
     * 
     * &gt; **NOTE:** Each alias represents only one master key(CMK).
     * 
     * &gt; **NOTE:** Within an area of the same user, alias is not reproducible.
     * 
     * &gt; **NOTE:** UpdateAlias can be used to update the mapping relationship between alias and master key(CMK).
     * 
     */
    public Output<String> keyId() {
        return this.keyId;
    }

    private AliasArgs() {}

    private AliasArgs(AliasArgs $) {
        this.aliasName = $.aliasName;
        this.keyId = $.keyId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AliasArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AliasArgs $;

        public Builder() {
            $ = new AliasArgs();
        }

        public Builder(AliasArgs defaults) {
            $ = new AliasArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param aliasName The alias of CMK. `Encrypt`、`GenerateDataKey`、`DescribeKey` can be called using aliases. Length of characters other than prefixes: minimum length of 1 character and maximum length of 255 characters. Must contain prefix `alias/`.
         * 
         * @return builder
         * 
         */
        public Builder aliasName(Output<String> aliasName) {
            $.aliasName = aliasName;
            return this;
        }

        /**
         * @param aliasName The alias of CMK. `Encrypt`、`GenerateDataKey`、`DescribeKey` can be called using aliases. Length of characters other than prefixes: minimum length of 1 character and maximum length of 255 characters. Must contain prefix `alias/`.
         * 
         * @return builder
         * 
         */
        public Builder aliasName(String aliasName) {
            return aliasName(Output.of(aliasName));
        }

        /**
         * @param keyId The id of the key.
         * 
         * &gt; **NOTE:** Each alias represents only one master key(CMK).
         * 
         * &gt; **NOTE:** Within an area of the same user, alias is not reproducible.
         * 
         * &gt; **NOTE:** UpdateAlias can be used to update the mapping relationship between alias and master key(CMK).
         * 
         * @return builder
         * 
         */
        public Builder keyId(Output<String> keyId) {
            $.keyId = keyId;
            return this;
        }

        /**
         * @param keyId The id of the key.
         * 
         * &gt; **NOTE:** Each alias represents only one master key(CMK).
         * 
         * &gt; **NOTE:** Within an area of the same user, alias is not reproducible.
         * 
         * &gt; **NOTE:** UpdateAlias can be used to update the mapping relationship between alias and master key(CMK).
         * 
         * @return builder
         * 
         */
        public Builder keyId(String keyId) {
            return keyId(Output.of(keyId));
        }

        public AliasArgs build() {
            if ($.aliasName == null) {
                throw new MissingRequiredPropertyException("AliasArgs", "aliasName");
            }
            if ($.keyId == null) {
                throw new MissingRequiredPropertyException("AliasArgs", "keyId");
            }
            return $;
        }
    }

}
