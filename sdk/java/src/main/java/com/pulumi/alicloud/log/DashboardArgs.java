// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.log;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DashboardArgs extends com.pulumi.resources.ResourceArgs {

    public static final DashboardArgs Empty = new DashboardArgs();

    /**
     * Dashboard attribute.
     * 
     */
    @Import(name="attribute")
    private @Nullable Output<String> attribute;

    /**
     * @return Dashboard attribute.
     * 
     */
    public Optional<Output<String>> attribute() {
        return Optional.ofNullable(this.attribute);
    }

    /**
     * Configuration of charts in the dashboard.
     * **Note:** From version 1.164.0, `char_list` can set parameter &#34;action&#34;.
     * 
     */
    @Import(name="charList", required=true)
    private Output<String> charList;

    /**
     * @return Configuration of charts in the dashboard.
     * **Note:** From version 1.164.0, `char_list` can set parameter &#34;action&#34;.
     * 
     */
    public Output<String> charList() {
        return this.charList;
    }

    /**
     * The name of the Log Dashboard.
     * 
     */
    @Import(name="dashboardName", required=true)
    private Output<String> dashboardName;

    /**
     * @return The name of the Log Dashboard.
     * 
     */
    public Output<String> dashboardName() {
        return this.dashboardName;
    }

    /**
     * Dashboard alias.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return Dashboard alias.
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * The name of the log project. It is the only in one Alicloud account.
     * 
     */
    @Import(name="projectName", required=true)
    private Output<String> projectName;

    /**
     * @return The name of the log project. It is the only in one Alicloud account.
     * 
     */
    public Output<String> projectName() {
        return this.projectName;
    }

    private DashboardArgs() {}

    private DashboardArgs(DashboardArgs $) {
        this.attribute = $.attribute;
        this.charList = $.charList;
        this.dashboardName = $.dashboardName;
        this.displayName = $.displayName;
        this.projectName = $.projectName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DashboardArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DashboardArgs $;

        public Builder() {
            $ = new DashboardArgs();
        }

        public Builder(DashboardArgs defaults) {
            $ = new DashboardArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param attribute Dashboard attribute.
         * 
         * @return builder
         * 
         */
        public Builder attribute(@Nullable Output<String> attribute) {
            $.attribute = attribute;
            return this;
        }

        /**
         * @param attribute Dashboard attribute.
         * 
         * @return builder
         * 
         */
        public Builder attribute(String attribute) {
            return attribute(Output.of(attribute));
        }

        /**
         * @param charList Configuration of charts in the dashboard.
         * **Note:** From version 1.164.0, `char_list` can set parameter &#34;action&#34;.
         * 
         * @return builder
         * 
         */
        public Builder charList(Output<String> charList) {
            $.charList = charList;
            return this;
        }

        /**
         * @param charList Configuration of charts in the dashboard.
         * **Note:** From version 1.164.0, `char_list` can set parameter &#34;action&#34;.
         * 
         * @return builder
         * 
         */
        public Builder charList(String charList) {
            return charList(Output.of(charList));
        }

        /**
         * @param dashboardName The name of the Log Dashboard.
         * 
         * @return builder
         * 
         */
        public Builder dashboardName(Output<String> dashboardName) {
            $.dashboardName = dashboardName;
            return this;
        }

        /**
         * @param dashboardName The name of the Log Dashboard.
         * 
         * @return builder
         * 
         */
        public Builder dashboardName(String dashboardName) {
            return dashboardName(Output.of(dashboardName));
        }

        /**
         * @param displayName Dashboard alias.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName Dashboard alias.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param projectName The name of the log project. It is the only in one Alicloud account.
         * 
         * @return builder
         * 
         */
        public Builder projectName(Output<String> projectName) {
            $.projectName = projectName;
            return this;
        }

        /**
         * @param projectName The name of the log project. It is the only in one Alicloud account.
         * 
         * @return builder
         * 
         */
        public Builder projectName(String projectName) {
            return projectName(Output.of(projectName));
        }

        public DashboardArgs build() {
            if ($.charList == null) {
                throw new MissingRequiredPropertyException("DashboardArgs", "charList");
            }
            if ($.dashboardName == null) {
                throw new MissingRequiredPropertyException("DashboardArgs", "dashboardName");
            }
            if ($.projectName == null) {
                throw new MissingRequiredPropertyException("DashboardArgs", "projectName");
            }
            return $;
        }
    }

}
