// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.ocean.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class BaseInstanceState extends com.pulumi.resources.ResourceArgs {

    public static final BaseInstanceState Empty = new BaseInstanceState();

    /**
     * Whether to automatically renew.It takes effect when the parameter ChargeType is PrePaid. Value range:
     * - true: automatic renewal.
     * - false (default): no automatic renewal.
     * 
     */
    @Import(name="autoRenew")
    private @Nullable Output<Boolean> autoRenew;

    /**
     * @return Whether to automatically renew.It takes effect when the parameter ChargeType is PrePaid. Value range:
     * - true: automatic renewal.
     * - false (default): no automatic renewal.
     * 
     */
    public Optional<Output<Boolean>> autoRenew() {
        return Optional.ofNullable(this.autoRenew);
    }

    /**
     * The duration of each auto-renewal. When the value of the AutoRenew parameter is True, this parameter is required.-PeriodUnit is Week, AutoRenewPeriod is {&#34;1&#34;, &#34;2&#34;, &#34;3&#34;}.-PeriodUnit is Month, AutoRenewPeriod is {&#34;1&#34;, &#34;2&#34;, &#34;3&#34;, &#34;6&#34;, &#34;12&#34;}.
     * 
     */
    @Import(name="autoRenewPeriod")
    private @Nullable Output<Integer> autoRenewPeriod;

    /**
     * @return The duration of each auto-renewal. When the value of the AutoRenew parameter is True, this parameter is required.-PeriodUnit is Week, AutoRenewPeriod is {&#34;1&#34;, &#34;2&#34;, &#34;3&#34;}.-PeriodUnit is Month, AutoRenewPeriod is {&#34;1&#34;, &#34;2&#34;, &#34;3&#34;, &#34;6&#34;, &#34;12&#34;}.
     * 
     */
    public Optional<Output<Integer>> autoRenewPeriod() {
        return Optional.ofNullable(this.autoRenewPeriod);
    }

    /**
     * The backup retain mode.
     * 
     */
    @Import(name="backupRetainMode")
    private @Nullable Output<String> backupRetainMode;

    /**
     * @return The backup retain mode.
     * 
     */
    public Optional<Output<String>> backupRetainMode() {
        return Optional.ofNullable(this.backupRetainMode);
    }

    /**
     * The product code of the OceanBase cluster.
     * - oceanbase_oceanbasepre_public_cn: Domestic station cloud database package Year-to-month package.
     * - oceanbase_oceanbasepost_public_cn: The domestic station cloud database is paid by the hour.
     * - oceanbase_obpre_public_intl: International Station Cloud Database Package Monthly Package.
     * 
     */
    @Import(name="commodityCode")
    private @Nullable Output<String> commodityCode;

    /**
     * @return The product code of the OceanBase cluster.
     * - oceanbase_oceanbasepre_public_cn: Domestic station cloud database package Year-to-month package.
     * - oceanbase_oceanbasepost_public_cn: The domestic station cloud database is paid by the hour.
     * - oceanbase_obpre_public_intl: International Station Cloud Database Package Monthly Package.
     * 
     */
    public Optional<Output<String>> commodityCode() {
        return Optional.ofNullable(this.commodityCode);
    }

    /**
     * The number of CPU cores of the cluster.
     * 
     */
    @Import(name="cpu")
    private @Nullable Output<Integer> cpu;

    /**
     * @return The number of CPU cores of the cluster.
     * 
     */
    public Optional<Output<Integer>> cpu() {
        return Optional.ofNullable(this.cpu);
    }

    /**
     * The creation time of the resource
     * 
     */
    @Import(name="createTime")
    private @Nullable Output<String> createTime;

    /**
     * @return The creation time of the resource
     * 
     */
    public Optional<Output<String>> createTime() {
        return Optional.ofNullable(this.createTime);
    }

    /**
     * The size of the storage space, in GB.The limits of storage space vary according to the cluster specifications, as follows:
     * - 8C32GB:100GB ~ 10000GB
     * - 14C70GB:200GB ~ 10000GB
     * - 30C180GB:400GB ~ 10000GB
     * - 62C400G:800GB-10000GB.
     * - The default value of each package is its minimum value.
     * 
     */
    @Import(name="diskSize")
    private @Nullable Output<Integer> diskSize;

    /**
     * @return The size of the storage space, in GB.The limits of storage space vary according to the cluster specifications, as follows:
     * - 8C32GB:100GB ~ 10000GB
     * - 14C70GB:200GB ~ 10000GB
     * - 30C180GB:400GB ~ 10000GB
     * - 62C400G:800GB-10000GB.
     * - The default value of each package is its minimum value.
     * 
     */
    public Optional<Output<Integer>> diskSize() {
        return Optional.ofNullable(this.diskSize);
    }

    /**
     * Cluster specification information. Valid values: `14C70GB` (default), `30C180GB`, `62C400GB`, `8C32GB`.
     * 
     */
    @Import(name="instanceClass")
    private @Nullable Output<String> instanceClass;

    /**
     * @return Cluster specification information. Valid values: `14C70GB` (default), `30C180GB`, `62C400GB`, `8C32GB`.
     * 
     */
    public Optional<Output<String>> instanceClass() {
        return Optional.ofNullable(this.instanceClass);
    }

    /**
     * OceanBase cluster name. The length is 1 to 20 English or Chinese characters. If this parameter is not specified, the default value is the InstanceId of the cluster.
     * 
     */
    @Import(name="instanceName")
    private @Nullable Output<String> instanceName;

    /**
     * @return OceanBase cluster name. The length is 1 to 20 English or Chinese characters. If this parameter is not specified, the default value is the InstanceId of the cluster.
     * 
     */
    public Optional<Output<String>> instanceName() {
        return Optional.ofNullable(this.instanceName);
    }

    /**
     * The number of nodes in the cluster.
     * 
     */
    @Import(name="nodeNum")
    private @Nullable Output<String> nodeNum;

    /**
     * @return The number of nodes in the cluster.
     * 
     */
    public Optional<Output<String>> nodeNum() {
        return Optional.ofNullable(this.nodeNum);
    }

    /**
     * The payment method of the instance. Valid values: `PayAsYouGo`, `Subscription`.
     * 
     */
    @Import(name="paymentType")
    private @Nullable Output<String> paymentType;

    /**
     * @return The payment method of the instance. Valid values: `PayAsYouGo`, `Subscription`.
     * 
     */
    public Optional<Output<String>> paymentType() {
        return Optional.ofNullable(this.paymentType);
    }

    /**
     * The duration of the resource purchase. The unit is specified by the PeriodUnit. The parameter `payment_type` takes effect only when the value is `Subscription` and is required. Once the DedicatedHostId is specified, the value cannot exceed the subscription duration of the dedicated host. When `period_unit` = Year, Period values: {&#34;1&#34;, &#34;2&#34;, &#34;3&#34;}. When `period_unit` = Month, Period values: {&#34;1&#34;, &#34;2&#34;, &#34;3&#34;, &#34;4&#34;, &#34;5&#34;, &#34;6&#34;, &#34;7&#34;, &#34;8&#34;, &#34;9&#34;}.
     * 
     */
    @Import(name="period")
    private @Nullable Output<Integer> period;

    /**
     * @return The duration of the resource purchase. The unit is specified by the PeriodUnit. The parameter `payment_type` takes effect only when the value is `Subscription` and is required. Once the DedicatedHostId is specified, the value cannot exceed the subscription duration of the dedicated host. When `period_unit` = Year, Period values: {&#34;1&#34;, &#34;2&#34;, &#34;3&#34;}. When `period_unit` = Month, Period values: {&#34;1&#34;, &#34;2&#34;, &#34;3&#34;, &#34;4&#34;, &#34;5&#34;, &#34;6&#34;, &#34;7&#34;, &#34;8&#34;, &#34;9&#34;}.
     * 
     */
    public Optional<Output<Integer>> period() {
        return Optional.ofNullable(this.period);
    }

    /**
     * The period unit. Valid values: `Month`,`Year`.
     * 
     */
    @Import(name="periodUnit")
    private @Nullable Output<String> periodUnit;

    /**
     * @return The period unit. Valid values: `Month`,`Year`.
     * 
     */
    public Optional<Output<String>> periodUnit() {
        return Optional.ofNullable(this.periodUnit);
    }

    /**
     * The ID of the enterprise resource group to which the instance resides.
     * 
     */
    @Import(name="resourceGroupId")
    private @Nullable Output<String> resourceGroupId;

    /**
     * @return The ID of the enterprise resource group to which the instance resides.
     * 
     */
    public Optional<Output<String>> resourceGroupId() {
        return Optional.ofNullable(this.resourceGroupId);
    }

    /**
     * Series of OceanBase clusters. Valid values: `normal`(default), `history`, `normal_ssd`.
     * 
     */
    @Import(name="series")
    private @Nullable Output<String> series;

    /**
     * @return Series of OceanBase clusters. Valid values: `normal`(default), `history`, `normal_ssd`.
     * 
     */
    public Optional<Output<String>> series() {
        return Optional.ofNullable(this.series);
    }

    /**
     * The status of the resource.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return The status of the resource.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * Information about the zone where the cluster is deployed.
     * 
     */
    @Import(name="zones")
    private @Nullable Output<List<String>> zones;

    /**
     * @return Information about the zone where the cluster is deployed.
     * 
     */
    public Optional<Output<List<String>>> zones() {
        return Optional.ofNullable(this.zones);
    }

    private BaseInstanceState() {}

    private BaseInstanceState(BaseInstanceState $) {
        this.autoRenew = $.autoRenew;
        this.autoRenewPeriod = $.autoRenewPeriod;
        this.backupRetainMode = $.backupRetainMode;
        this.commodityCode = $.commodityCode;
        this.cpu = $.cpu;
        this.createTime = $.createTime;
        this.diskSize = $.diskSize;
        this.instanceClass = $.instanceClass;
        this.instanceName = $.instanceName;
        this.nodeNum = $.nodeNum;
        this.paymentType = $.paymentType;
        this.period = $.period;
        this.periodUnit = $.periodUnit;
        this.resourceGroupId = $.resourceGroupId;
        this.series = $.series;
        this.status = $.status;
        this.zones = $.zones;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BaseInstanceState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BaseInstanceState $;

        public Builder() {
            $ = new BaseInstanceState();
        }

        public Builder(BaseInstanceState defaults) {
            $ = new BaseInstanceState(Objects.requireNonNull(defaults));
        }

        /**
         * @param autoRenew Whether to automatically renew.It takes effect when the parameter ChargeType is PrePaid. Value range:
         * - true: automatic renewal.
         * - false (default): no automatic renewal.
         * 
         * @return builder
         * 
         */
        public Builder autoRenew(@Nullable Output<Boolean> autoRenew) {
            $.autoRenew = autoRenew;
            return this;
        }

        /**
         * @param autoRenew Whether to automatically renew.It takes effect when the parameter ChargeType is PrePaid. Value range:
         * - true: automatic renewal.
         * - false (default): no automatic renewal.
         * 
         * @return builder
         * 
         */
        public Builder autoRenew(Boolean autoRenew) {
            return autoRenew(Output.of(autoRenew));
        }

        /**
         * @param autoRenewPeriod The duration of each auto-renewal. When the value of the AutoRenew parameter is True, this parameter is required.-PeriodUnit is Week, AutoRenewPeriod is {&#34;1&#34;, &#34;2&#34;, &#34;3&#34;}.-PeriodUnit is Month, AutoRenewPeriod is {&#34;1&#34;, &#34;2&#34;, &#34;3&#34;, &#34;6&#34;, &#34;12&#34;}.
         * 
         * @return builder
         * 
         */
        public Builder autoRenewPeriod(@Nullable Output<Integer> autoRenewPeriod) {
            $.autoRenewPeriod = autoRenewPeriod;
            return this;
        }

        /**
         * @param autoRenewPeriod The duration of each auto-renewal. When the value of the AutoRenew parameter is True, this parameter is required.-PeriodUnit is Week, AutoRenewPeriod is {&#34;1&#34;, &#34;2&#34;, &#34;3&#34;}.-PeriodUnit is Month, AutoRenewPeriod is {&#34;1&#34;, &#34;2&#34;, &#34;3&#34;, &#34;6&#34;, &#34;12&#34;}.
         * 
         * @return builder
         * 
         */
        public Builder autoRenewPeriod(Integer autoRenewPeriod) {
            return autoRenewPeriod(Output.of(autoRenewPeriod));
        }

        /**
         * @param backupRetainMode The backup retain mode.
         * 
         * @return builder
         * 
         */
        public Builder backupRetainMode(@Nullable Output<String> backupRetainMode) {
            $.backupRetainMode = backupRetainMode;
            return this;
        }

        /**
         * @param backupRetainMode The backup retain mode.
         * 
         * @return builder
         * 
         */
        public Builder backupRetainMode(String backupRetainMode) {
            return backupRetainMode(Output.of(backupRetainMode));
        }

        /**
         * @param commodityCode The product code of the OceanBase cluster.
         * - oceanbase_oceanbasepre_public_cn: Domestic station cloud database package Year-to-month package.
         * - oceanbase_oceanbasepost_public_cn: The domestic station cloud database is paid by the hour.
         * - oceanbase_obpre_public_intl: International Station Cloud Database Package Monthly Package.
         * 
         * @return builder
         * 
         */
        public Builder commodityCode(@Nullable Output<String> commodityCode) {
            $.commodityCode = commodityCode;
            return this;
        }

        /**
         * @param commodityCode The product code of the OceanBase cluster.
         * - oceanbase_oceanbasepre_public_cn: Domestic station cloud database package Year-to-month package.
         * - oceanbase_oceanbasepost_public_cn: The domestic station cloud database is paid by the hour.
         * - oceanbase_obpre_public_intl: International Station Cloud Database Package Monthly Package.
         * 
         * @return builder
         * 
         */
        public Builder commodityCode(String commodityCode) {
            return commodityCode(Output.of(commodityCode));
        }

        /**
         * @param cpu The number of CPU cores of the cluster.
         * 
         * @return builder
         * 
         */
        public Builder cpu(@Nullable Output<Integer> cpu) {
            $.cpu = cpu;
            return this;
        }

        /**
         * @param cpu The number of CPU cores of the cluster.
         * 
         * @return builder
         * 
         */
        public Builder cpu(Integer cpu) {
            return cpu(Output.of(cpu));
        }

        /**
         * @param createTime The creation time of the resource
         * 
         * @return builder
         * 
         */
        public Builder createTime(@Nullable Output<String> createTime) {
            $.createTime = createTime;
            return this;
        }

        /**
         * @param createTime The creation time of the resource
         * 
         * @return builder
         * 
         */
        public Builder createTime(String createTime) {
            return createTime(Output.of(createTime));
        }

        /**
         * @param diskSize The size of the storage space, in GB.The limits of storage space vary according to the cluster specifications, as follows:
         * - 8C32GB:100GB ~ 10000GB
         * - 14C70GB:200GB ~ 10000GB
         * - 30C180GB:400GB ~ 10000GB
         * - 62C400G:800GB-10000GB.
         * - The default value of each package is its minimum value.
         * 
         * @return builder
         * 
         */
        public Builder diskSize(@Nullable Output<Integer> diskSize) {
            $.diskSize = diskSize;
            return this;
        }

        /**
         * @param diskSize The size of the storage space, in GB.The limits of storage space vary according to the cluster specifications, as follows:
         * - 8C32GB:100GB ~ 10000GB
         * - 14C70GB:200GB ~ 10000GB
         * - 30C180GB:400GB ~ 10000GB
         * - 62C400G:800GB-10000GB.
         * - The default value of each package is its minimum value.
         * 
         * @return builder
         * 
         */
        public Builder diskSize(Integer diskSize) {
            return diskSize(Output.of(diskSize));
        }

        /**
         * @param instanceClass Cluster specification information. Valid values: `14C70GB` (default), `30C180GB`, `62C400GB`, `8C32GB`.
         * 
         * @return builder
         * 
         */
        public Builder instanceClass(@Nullable Output<String> instanceClass) {
            $.instanceClass = instanceClass;
            return this;
        }

        /**
         * @param instanceClass Cluster specification information. Valid values: `14C70GB` (default), `30C180GB`, `62C400GB`, `8C32GB`.
         * 
         * @return builder
         * 
         */
        public Builder instanceClass(String instanceClass) {
            return instanceClass(Output.of(instanceClass));
        }

        /**
         * @param instanceName OceanBase cluster name. The length is 1 to 20 English or Chinese characters. If this parameter is not specified, the default value is the InstanceId of the cluster.
         * 
         * @return builder
         * 
         */
        public Builder instanceName(@Nullable Output<String> instanceName) {
            $.instanceName = instanceName;
            return this;
        }

        /**
         * @param instanceName OceanBase cluster name. The length is 1 to 20 English or Chinese characters. If this parameter is not specified, the default value is the InstanceId of the cluster.
         * 
         * @return builder
         * 
         */
        public Builder instanceName(String instanceName) {
            return instanceName(Output.of(instanceName));
        }

        /**
         * @param nodeNum The number of nodes in the cluster.
         * 
         * @return builder
         * 
         */
        public Builder nodeNum(@Nullable Output<String> nodeNum) {
            $.nodeNum = nodeNum;
            return this;
        }

        /**
         * @param nodeNum The number of nodes in the cluster.
         * 
         * @return builder
         * 
         */
        public Builder nodeNum(String nodeNum) {
            return nodeNum(Output.of(nodeNum));
        }

        /**
         * @param paymentType The payment method of the instance. Valid values: `PayAsYouGo`, `Subscription`.
         * 
         * @return builder
         * 
         */
        public Builder paymentType(@Nullable Output<String> paymentType) {
            $.paymentType = paymentType;
            return this;
        }

        /**
         * @param paymentType The payment method of the instance. Valid values: `PayAsYouGo`, `Subscription`.
         * 
         * @return builder
         * 
         */
        public Builder paymentType(String paymentType) {
            return paymentType(Output.of(paymentType));
        }

        /**
         * @param period The duration of the resource purchase. The unit is specified by the PeriodUnit. The parameter `payment_type` takes effect only when the value is `Subscription` and is required. Once the DedicatedHostId is specified, the value cannot exceed the subscription duration of the dedicated host. When `period_unit` = Year, Period values: {&#34;1&#34;, &#34;2&#34;, &#34;3&#34;}. When `period_unit` = Month, Period values: {&#34;1&#34;, &#34;2&#34;, &#34;3&#34;, &#34;4&#34;, &#34;5&#34;, &#34;6&#34;, &#34;7&#34;, &#34;8&#34;, &#34;9&#34;}.
         * 
         * @return builder
         * 
         */
        public Builder period(@Nullable Output<Integer> period) {
            $.period = period;
            return this;
        }

        /**
         * @param period The duration of the resource purchase. The unit is specified by the PeriodUnit. The parameter `payment_type` takes effect only when the value is `Subscription` and is required. Once the DedicatedHostId is specified, the value cannot exceed the subscription duration of the dedicated host. When `period_unit` = Year, Period values: {&#34;1&#34;, &#34;2&#34;, &#34;3&#34;}. When `period_unit` = Month, Period values: {&#34;1&#34;, &#34;2&#34;, &#34;3&#34;, &#34;4&#34;, &#34;5&#34;, &#34;6&#34;, &#34;7&#34;, &#34;8&#34;, &#34;9&#34;}.
         * 
         * @return builder
         * 
         */
        public Builder period(Integer period) {
            return period(Output.of(period));
        }

        /**
         * @param periodUnit The period unit. Valid values: `Month`,`Year`.
         * 
         * @return builder
         * 
         */
        public Builder periodUnit(@Nullable Output<String> periodUnit) {
            $.periodUnit = periodUnit;
            return this;
        }

        /**
         * @param periodUnit The period unit. Valid values: `Month`,`Year`.
         * 
         * @return builder
         * 
         */
        public Builder periodUnit(String periodUnit) {
            return periodUnit(Output.of(periodUnit));
        }

        /**
         * @param resourceGroupId The ID of the enterprise resource group to which the instance resides.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupId(@Nullable Output<String> resourceGroupId) {
            $.resourceGroupId = resourceGroupId;
            return this;
        }

        /**
         * @param resourceGroupId The ID of the enterprise resource group to which the instance resides.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupId(String resourceGroupId) {
            return resourceGroupId(Output.of(resourceGroupId));
        }

        /**
         * @param series Series of OceanBase clusters. Valid values: `normal`(default), `history`, `normal_ssd`.
         * 
         * @return builder
         * 
         */
        public Builder series(@Nullable Output<String> series) {
            $.series = series;
            return this;
        }

        /**
         * @param series Series of OceanBase clusters. Valid values: `normal`(default), `history`, `normal_ssd`.
         * 
         * @return builder
         * 
         */
        public Builder series(String series) {
            return series(Output.of(series));
        }

        /**
         * @param status The status of the resource.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status The status of the resource.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param zones Information about the zone where the cluster is deployed.
         * 
         * @return builder
         * 
         */
        public Builder zones(@Nullable Output<List<String>> zones) {
            $.zones = zones;
            return this;
        }

        /**
         * @param zones Information about the zone where the cluster is deployed.
         * 
         * @return builder
         * 
         */
        public Builder zones(List<String> zones) {
            return zones(Output.of(zones));
        }

        /**
         * @param zones Information about the zone where the cluster is deployed.
         * 
         * @return builder
         * 
         */
        public Builder zones(String... zones) {
            return zones(List.of(zones));
        }

        public BaseInstanceState build() {
            return $;
        }
    }

}
