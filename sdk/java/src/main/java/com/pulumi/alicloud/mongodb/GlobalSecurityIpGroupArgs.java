// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.mongodb;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;


public final class GlobalSecurityIpGroupArgs extends com.pulumi.resources.ResourceArgs {

    public static final GlobalSecurityIpGroupArgs Empty = new GlobalSecurityIpGroupArgs();

    /**
     * The name of the IP whitelist template.
     * 
     */
    @Import(name="globalIgName", required=true)
    private Output<String> globalIgName;

    /**
     * @return The name of the IP whitelist template.
     * 
     */
    public Output<String> globalIgName() {
        return this.globalIgName;
    }

    /**
     * The IP address in the whitelist template.
     * 
     * &gt; **NOTE:** Separate multiple IP addresses with commas (,). You can create up to 1000 IP addresses or CIDR blocks for all IP address whitelists.
     * 
     */
    @Import(name="globalSecurityIpList", required=true)
    private Output<String> globalSecurityIpList;

    /**
     * @return The IP address in the whitelist template.
     * 
     * &gt; **NOTE:** Separate multiple IP addresses with commas (,). You can create up to 1000 IP addresses or CIDR blocks for all IP address whitelists.
     * 
     */
    public Output<String> globalSecurityIpList() {
        return this.globalSecurityIpList;
    }

    private GlobalSecurityIpGroupArgs() {}

    private GlobalSecurityIpGroupArgs(GlobalSecurityIpGroupArgs $) {
        this.globalIgName = $.globalIgName;
        this.globalSecurityIpList = $.globalSecurityIpList;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GlobalSecurityIpGroupArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GlobalSecurityIpGroupArgs $;

        public Builder() {
            $ = new GlobalSecurityIpGroupArgs();
        }

        public Builder(GlobalSecurityIpGroupArgs defaults) {
            $ = new GlobalSecurityIpGroupArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param globalIgName The name of the IP whitelist template.
         * 
         * @return builder
         * 
         */
        public Builder globalIgName(Output<String> globalIgName) {
            $.globalIgName = globalIgName;
            return this;
        }

        /**
         * @param globalIgName The name of the IP whitelist template.
         * 
         * @return builder
         * 
         */
        public Builder globalIgName(String globalIgName) {
            return globalIgName(Output.of(globalIgName));
        }

        /**
         * @param globalSecurityIpList The IP address in the whitelist template.
         * 
         * &gt; **NOTE:** Separate multiple IP addresses with commas (,). You can create up to 1000 IP addresses or CIDR blocks for all IP address whitelists.
         * 
         * @return builder
         * 
         */
        public Builder globalSecurityIpList(Output<String> globalSecurityIpList) {
            $.globalSecurityIpList = globalSecurityIpList;
            return this;
        }

        /**
         * @param globalSecurityIpList The IP address in the whitelist template.
         * 
         * &gt; **NOTE:** Separate multiple IP addresses with commas (,). You can create up to 1000 IP addresses or CIDR blocks for all IP address whitelists.
         * 
         * @return builder
         * 
         */
        public Builder globalSecurityIpList(String globalSecurityIpList) {
            return globalSecurityIpList(Output.of(globalSecurityIpList));
        }

        public GlobalSecurityIpGroupArgs build() {
            if ($.globalIgName == null) {
                throw new MissingRequiredPropertyException("GlobalSecurityIpGroupArgs", "globalIgName");
            }
            if ($.globalSecurityIpList == null) {
                throw new MissingRequiredPropertyException("GlobalSecurityIpGroupArgs", "globalSecurityIpList");
            }
            return $;
        }
    }

}
