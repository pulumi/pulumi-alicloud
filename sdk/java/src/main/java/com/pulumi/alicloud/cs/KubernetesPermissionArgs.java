// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.cs;

import com.pulumi.alicloud.cs.inputs.KubernetesPermissionPermissionArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class KubernetesPermissionArgs extends com.pulumi.resources.ResourceArgs {

    public static final KubernetesPermissionArgs Empty = new KubernetesPermissionArgs();

    /**
     * A list of user permission. See `permissions` below.
     * 
     */
    @Import(name="permissions")
    private @Nullable Output<List<KubernetesPermissionPermissionArgs>> permissions;

    /**
     * @return A list of user permission. See `permissions` below.
     * 
     */
    public Optional<Output<List<KubernetesPermissionPermissionArgs>>> permissions() {
        return Optional.ofNullable(this.permissions);
    }

    /**
     * The ID of the Ram user, and it can also be the id of the Ram Role. If you use Ram Role id, you need to set `is_ram_role` to `true` during authorization.
     * 
     */
    @Import(name="uid", required=true)
    private Output<String> uid;

    /**
     * @return The ID of the Ram user, and it can also be the id of the Ram Role. If you use Ram Role id, you need to set `is_ram_role` to `true` during authorization.
     * 
     */
    public Output<String> uid() {
        return this.uid;
    }

    private KubernetesPermissionArgs() {}

    private KubernetesPermissionArgs(KubernetesPermissionArgs $) {
        this.permissions = $.permissions;
        this.uid = $.uid;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(KubernetesPermissionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private KubernetesPermissionArgs $;

        public Builder() {
            $ = new KubernetesPermissionArgs();
        }

        public Builder(KubernetesPermissionArgs defaults) {
            $ = new KubernetesPermissionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param permissions A list of user permission. See `permissions` below.
         * 
         * @return builder
         * 
         */
        public Builder permissions(@Nullable Output<List<KubernetesPermissionPermissionArgs>> permissions) {
            $.permissions = permissions;
            return this;
        }

        /**
         * @param permissions A list of user permission. See `permissions` below.
         * 
         * @return builder
         * 
         */
        public Builder permissions(List<KubernetesPermissionPermissionArgs> permissions) {
            return permissions(Output.of(permissions));
        }

        /**
         * @param permissions A list of user permission. See `permissions` below.
         * 
         * @return builder
         * 
         */
        public Builder permissions(KubernetesPermissionPermissionArgs... permissions) {
            return permissions(List.of(permissions));
        }

        /**
         * @param uid The ID of the Ram user, and it can also be the id of the Ram Role. If you use Ram Role id, you need to set `is_ram_role` to `true` during authorization.
         * 
         * @return builder
         * 
         */
        public Builder uid(Output<String> uid) {
            $.uid = uid;
            return this;
        }

        /**
         * @param uid The ID of the Ram user, and it can also be the id of the Ram Role. If you use Ram Role id, you need to set `is_ram_role` to `true` during authorization.
         * 
         * @return builder
         * 
         */
        public Builder uid(String uid) {
            return uid(Output.of(uid));
        }

        public KubernetesPermissionArgs build() {
            if ($.uid == null) {
                throw new MissingRequiredPropertyException("KubernetesPermissionArgs", "uid");
            }
            return $;
        }
    }

}
