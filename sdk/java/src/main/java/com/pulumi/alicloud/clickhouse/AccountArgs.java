// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.clickhouse;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AccountArgs extends com.pulumi.resources.ResourceArgs {

    public static final AccountArgs Empty = new AccountArgs();

    /**
     * In Chinese, English letter. May contain Chinese and English characters, lowercase letters, numbers, and underscores (_), the dash (-). Cannot start with http:// and https:// at the beginning. Length is from 2 to 256 characters.
     * 
     */
    @Import(name="accountDescription")
    private @Nullable Output<String> accountDescription;

    /**
     * @return In Chinese, English letter. May contain Chinese and English characters, lowercase letters, numbers, and underscores (_), the dash (-). Cannot start with http:// and https:// at the beginning. Length is from 2 to 256 characters.
     * 
     */
    public Optional<Output<String>> accountDescription() {
        return Optional.ofNullable(this.accountDescription);
    }

    /**
     * Account name: lowercase letters, numbers, underscores, lowercase letter; length no more than 16 characters.
     * 
     */
    @Import(name="accountName", required=true)
    private Output<String> accountName;

    /**
     * @return Account name: lowercase letters, numbers, underscores, lowercase letter; length no more than 16 characters.
     * 
     */
    public Output<String> accountName() {
        return this.accountName;
    }

    /**
     * The account password: uppercase letters, lowercase letters, lowercase letters, numbers, and special characters (special character! #$%^&amp; author (s):_+-=) in a length of 8-32 bit.
     * 
     */
    @Import(name="accountPassword", required=true)
    private Output<String> accountPassword;

    /**
     * @return The account password: uppercase letters, lowercase letters, lowercase letters, numbers, and special characters (special character! #$%^&amp; author (s):_+-=) in a length of 8-32 bit.
     * 
     */
    public Output<String> accountPassword() {
        return this.accountPassword;
    }

    /**
     * The list of databases to which you want to grant permissions. Separate databases with commas (,).
     * 
     */
    @Import(name="allowDatabases")
    private @Nullable Output<String> allowDatabases;

    /**
     * @return The list of databases to which you want to grant permissions. Separate databases with commas (,).
     * 
     */
    public Optional<Output<String>> allowDatabases() {
        return Optional.ofNullable(this.allowDatabases);
    }

    /**
     * The list of dictionaries to which you want to grant permissions. Separate dictionaries with commas (,).
     * 
     */
    @Import(name="allowDictionaries")
    private @Nullable Output<String> allowDictionaries;

    /**
     * @return The list of dictionaries to which you want to grant permissions. Separate dictionaries with commas (,).
     * 
     */
    public Optional<Output<String>> allowDictionaries() {
        return Optional.ofNullable(this.allowDictionaries);
    }

    /**
     * The db cluster id.
     * 
     */
    @Import(name="dbClusterId", required=true)
    private Output<String> dbClusterId;

    /**
     * @return The db cluster id.
     * 
     */
    public Output<String> dbClusterId() {
        return this.dbClusterId;
    }

    /**
     * Specifies whether to grant DDL permissions to the database account. Valid values: `true` and `false`.
     * 
     */
    @Import(name="ddlAuthority")
    private @Nullable Output<Boolean> ddlAuthority;

    /**
     * @return Specifies whether to grant DDL permissions to the database account. Valid values: `true` and `false`.
     * 
     */
    public Optional<Output<Boolean>> ddlAuthority() {
        return Optional.ofNullable(this.ddlAuthority);
    }

    /**
     * Specifies whether to grant DML permissions to the database account. Valid values: `all` and `readOnly,modify`.
     * 
     */
    @Import(name="dmlAuthority")
    private @Nullable Output<String> dmlAuthority;

    /**
     * @return Specifies whether to grant DML permissions to the database account. Valid values: `all` and `readOnly,modify`.
     * 
     */
    public Optional<Output<String>> dmlAuthority() {
        return Optional.ofNullable(this.dmlAuthority);
    }

    /**
     * The list of all databases. Separate databases with commas (,).
     * 
     */
    @Import(name="totalDatabases")
    private @Nullable Output<String> totalDatabases;

    /**
     * @return The list of all databases. Separate databases with commas (,).
     * 
     */
    public Optional<Output<String>> totalDatabases() {
        return Optional.ofNullable(this.totalDatabases);
    }

    /**
     * The list of all dictionaries. Separate dictionaries with commas (,).
     * 
     */
    @Import(name="totalDictionaries")
    private @Nullable Output<String> totalDictionaries;

    /**
     * @return The list of all dictionaries. Separate dictionaries with commas (,).
     * 
     */
    public Optional<Output<String>> totalDictionaries() {
        return Optional.ofNullable(this.totalDictionaries);
    }

    private AccountArgs() {}

    private AccountArgs(AccountArgs $) {
        this.accountDescription = $.accountDescription;
        this.accountName = $.accountName;
        this.accountPassword = $.accountPassword;
        this.allowDatabases = $.allowDatabases;
        this.allowDictionaries = $.allowDictionaries;
        this.dbClusterId = $.dbClusterId;
        this.ddlAuthority = $.ddlAuthority;
        this.dmlAuthority = $.dmlAuthority;
        this.totalDatabases = $.totalDatabases;
        this.totalDictionaries = $.totalDictionaries;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AccountArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AccountArgs $;

        public Builder() {
            $ = new AccountArgs();
        }

        public Builder(AccountArgs defaults) {
            $ = new AccountArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accountDescription In Chinese, English letter. May contain Chinese and English characters, lowercase letters, numbers, and underscores (_), the dash (-). Cannot start with http:// and https:// at the beginning. Length is from 2 to 256 characters.
         * 
         * @return builder
         * 
         */
        public Builder accountDescription(@Nullable Output<String> accountDescription) {
            $.accountDescription = accountDescription;
            return this;
        }

        /**
         * @param accountDescription In Chinese, English letter. May contain Chinese and English characters, lowercase letters, numbers, and underscores (_), the dash (-). Cannot start with http:// and https:// at the beginning. Length is from 2 to 256 characters.
         * 
         * @return builder
         * 
         */
        public Builder accountDescription(String accountDescription) {
            return accountDescription(Output.of(accountDescription));
        }

        /**
         * @param accountName Account name: lowercase letters, numbers, underscores, lowercase letter; length no more than 16 characters.
         * 
         * @return builder
         * 
         */
        public Builder accountName(Output<String> accountName) {
            $.accountName = accountName;
            return this;
        }

        /**
         * @param accountName Account name: lowercase letters, numbers, underscores, lowercase letter; length no more than 16 characters.
         * 
         * @return builder
         * 
         */
        public Builder accountName(String accountName) {
            return accountName(Output.of(accountName));
        }

        /**
         * @param accountPassword The account password: uppercase letters, lowercase letters, lowercase letters, numbers, and special characters (special character! #$%^&amp; author (s):_+-=) in a length of 8-32 bit.
         * 
         * @return builder
         * 
         */
        public Builder accountPassword(Output<String> accountPassword) {
            $.accountPassword = accountPassword;
            return this;
        }

        /**
         * @param accountPassword The account password: uppercase letters, lowercase letters, lowercase letters, numbers, and special characters (special character! #$%^&amp; author (s):_+-=) in a length of 8-32 bit.
         * 
         * @return builder
         * 
         */
        public Builder accountPassword(String accountPassword) {
            return accountPassword(Output.of(accountPassword));
        }

        /**
         * @param allowDatabases The list of databases to which you want to grant permissions. Separate databases with commas (,).
         * 
         * @return builder
         * 
         */
        public Builder allowDatabases(@Nullable Output<String> allowDatabases) {
            $.allowDatabases = allowDatabases;
            return this;
        }

        /**
         * @param allowDatabases The list of databases to which you want to grant permissions. Separate databases with commas (,).
         * 
         * @return builder
         * 
         */
        public Builder allowDatabases(String allowDatabases) {
            return allowDatabases(Output.of(allowDatabases));
        }

        /**
         * @param allowDictionaries The list of dictionaries to which you want to grant permissions. Separate dictionaries with commas (,).
         * 
         * @return builder
         * 
         */
        public Builder allowDictionaries(@Nullable Output<String> allowDictionaries) {
            $.allowDictionaries = allowDictionaries;
            return this;
        }

        /**
         * @param allowDictionaries The list of dictionaries to which you want to grant permissions. Separate dictionaries with commas (,).
         * 
         * @return builder
         * 
         */
        public Builder allowDictionaries(String allowDictionaries) {
            return allowDictionaries(Output.of(allowDictionaries));
        }

        /**
         * @param dbClusterId The db cluster id.
         * 
         * @return builder
         * 
         */
        public Builder dbClusterId(Output<String> dbClusterId) {
            $.dbClusterId = dbClusterId;
            return this;
        }

        /**
         * @param dbClusterId The db cluster id.
         * 
         * @return builder
         * 
         */
        public Builder dbClusterId(String dbClusterId) {
            return dbClusterId(Output.of(dbClusterId));
        }

        /**
         * @param ddlAuthority Specifies whether to grant DDL permissions to the database account. Valid values: `true` and `false`.
         * 
         * @return builder
         * 
         */
        public Builder ddlAuthority(@Nullable Output<Boolean> ddlAuthority) {
            $.ddlAuthority = ddlAuthority;
            return this;
        }

        /**
         * @param ddlAuthority Specifies whether to grant DDL permissions to the database account. Valid values: `true` and `false`.
         * 
         * @return builder
         * 
         */
        public Builder ddlAuthority(Boolean ddlAuthority) {
            return ddlAuthority(Output.of(ddlAuthority));
        }

        /**
         * @param dmlAuthority Specifies whether to grant DML permissions to the database account. Valid values: `all` and `readOnly,modify`.
         * 
         * @return builder
         * 
         */
        public Builder dmlAuthority(@Nullable Output<String> dmlAuthority) {
            $.dmlAuthority = dmlAuthority;
            return this;
        }

        /**
         * @param dmlAuthority Specifies whether to grant DML permissions to the database account. Valid values: `all` and `readOnly,modify`.
         * 
         * @return builder
         * 
         */
        public Builder dmlAuthority(String dmlAuthority) {
            return dmlAuthority(Output.of(dmlAuthority));
        }

        /**
         * @param totalDatabases The list of all databases. Separate databases with commas (,).
         * 
         * @return builder
         * 
         */
        public Builder totalDatabases(@Nullable Output<String> totalDatabases) {
            $.totalDatabases = totalDatabases;
            return this;
        }

        /**
         * @param totalDatabases The list of all databases. Separate databases with commas (,).
         * 
         * @return builder
         * 
         */
        public Builder totalDatabases(String totalDatabases) {
            return totalDatabases(Output.of(totalDatabases));
        }

        /**
         * @param totalDictionaries The list of all dictionaries. Separate dictionaries with commas (,).
         * 
         * @return builder
         * 
         */
        public Builder totalDictionaries(@Nullable Output<String> totalDictionaries) {
            $.totalDictionaries = totalDictionaries;
            return this;
        }

        /**
         * @param totalDictionaries The list of all dictionaries. Separate dictionaries with commas (,).
         * 
         * @return builder
         * 
         */
        public Builder totalDictionaries(String totalDictionaries) {
            return totalDictionaries(Output.of(totalDictionaries));
        }

        public AccountArgs build() {
            if ($.accountName == null) {
                throw new MissingRequiredPropertyException("AccountArgs", "accountName");
            }
            if ($.accountPassword == null) {
                throw new MissingRequiredPropertyException("AccountArgs", "accountPassword");
            }
            if ($.dbClusterId == null) {
                throw new MissingRequiredPropertyException("AccountArgs", "dbClusterId");
            }
            return $;
        }
    }

}
