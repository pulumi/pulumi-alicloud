// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.ga;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AcceleratorSpareIpAttachmentArgs extends com.pulumi.resources.ResourceArgs {

    public static final AcceleratorSpareIpAttachmentArgs Empty = new AcceleratorSpareIpAttachmentArgs();

    /**
     * The ID of the global acceleration instance.
     * 
     */
    @Import(name="acceleratorId", required=true)
    private Output<String> acceleratorId;

    /**
     * @return The ID of the global acceleration instance.
     * 
     */
    public Output<String> acceleratorId() {
        return this.acceleratorId;
    }

    /**
     * The dry run.
     * 
     */
    @Import(name="dryRun")
    private @Nullable Output<Boolean> dryRun;

    /**
     * @return The dry run.
     * 
     */
    public Optional<Output<Boolean>> dryRun() {
        return Optional.ofNullable(this.dryRun);
    }

    /**
     * The standby IP address of CNAME. When the acceleration area is abnormal, the traffic is switched to the standby IP address.
     * 
     */
    @Import(name="spareIp", required=true)
    private Output<String> spareIp;

    /**
     * @return The standby IP address of CNAME. When the acceleration area is abnormal, the traffic is switched to the standby IP address.
     * 
     */
    public Output<String> spareIp() {
        return this.spareIp;
    }

    private AcceleratorSpareIpAttachmentArgs() {}

    private AcceleratorSpareIpAttachmentArgs(AcceleratorSpareIpAttachmentArgs $) {
        this.acceleratorId = $.acceleratorId;
        this.dryRun = $.dryRun;
        this.spareIp = $.spareIp;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AcceleratorSpareIpAttachmentArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AcceleratorSpareIpAttachmentArgs $;

        public Builder() {
            $ = new AcceleratorSpareIpAttachmentArgs();
        }

        public Builder(AcceleratorSpareIpAttachmentArgs defaults) {
            $ = new AcceleratorSpareIpAttachmentArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param acceleratorId The ID of the global acceleration instance.
         * 
         * @return builder
         * 
         */
        public Builder acceleratorId(Output<String> acceleratorId) {
            $.acceleratorId = acceleratorId;
            return this;
        }

        /**
         * @param acceleratorId The ID of the global acceleration instance.
         * 
         * @return builder
         * 
         */
        public Builder acceleratorId(String acceleratorId) {
            return acceleratorId(Output.of(acceleratorId));
        }

        /**
         * @param dryRun The dry run.
         * 
         * @return builder
         * 
         */
        public Builder dryRun(@Nullable Output<Boolean> dryRun) {
            $.dryRun = dryRun;
            return this;
        }

        /**
         * @param dryRun The dry run.
         * 
         * @return builder
         * 
         */
        public Builder dryRun(Boolean dryRun) {
            return dryRun(Output.of(dryRun));
        }

        /**
         * @param spareIp The standby IP address of CNAME. When the acceleration area is abnormal, the traffic is switched to the standby IP address.
         * 
         * @return builder
         * 
         */
        public Builder spareIp(Output<String> spareIp) {
            $.spareIp = spareIp;
            return this;
        }

        /**
         * @param spareIp The standby IP address of CNAME. When the acceleration area is abnormal, the traffic is switched to the standby IP address.
         * 
         * @return builder
         * 
         */
        public Builder spareIp(String spareIp) {
            return spareIp(Output.of(spareIp));
        }

        public AcceleratorSpareIpAttachmentArgs build() {
            if ($.acceleratorId == null) {
                throw new MissingRequiredPropertyException("AcceleratorSpareIpAttachmentArgs", "acceleratorId");
            }
            if ($.spareIp == null) {
                throw new MissingRequiredPropertyException("AcceleratorSpareIpAttachmentArgs", "spareIp");
            }
            return $;
        }
    }

}
