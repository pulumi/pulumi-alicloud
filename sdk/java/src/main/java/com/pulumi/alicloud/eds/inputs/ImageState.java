// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.eds.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ImageState extends com.pulumi.resources.ResourceArgs {

    public static final ImageState Empty = new ImageState();

    /**
     * The description of the image.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The description of the image.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The desktop id of the desktop.
     * 
     */
    @Import(name="desktopId")
    private @Nullable Output<String> desktopId;

    /**
     * @return The desktop id of the desktop.
     * 
     */
    public Optional<Output<String>> desktopId() {
        return Optional.ofNullable(this.desktopId);
    }

    /**
     * The name of the image.
     * 
     */
    @Import(name="imageName")
    private @Nullable Output<String> imageName;

    /**
     * @return The name of the image.
     * 
     */
    public Optional<Output<String>> imageName() {
        return Optional.ofNullable(this.imageName);
    }

    /**
     * The status of the image. Valid values: `Creating`, `Available`, `CreateFailed`.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return The status of the image. Valid values: `Creating`, `Available`, `CreateFailed`.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    private ImageState() {}

    private ImageState(ImageState $) {
        this.description = $.description;
        this.desktopId = $.desktopId;
        this.imageName = $.imageName;
        this.status = $.status;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ImageState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ImageState $;

        public Builder() {
            $ = new ImageState();
        }

        public Builder(ImageState defaults) {
            $ = new ImageState(Objects.requireNonNull(defaults));
        }

        /**
         * @param description The description of the image.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The description of the image.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param desktopId The desktop id of the desktop.
         * 
         * @return builder
         * 
         */
        public Builder desktopId(@Nullable Output<String> desktopId) {
            $.desktopId = desktopId;
            return this;
        }

        /**
         * @param desktopId The desktop id of the desktop.
         * 
         * @return builder
         * 
         */
        public Builder desktopId(String desktopId) {
            return desktopId(Output.of(desktopId));
        }

        /**
         * @param imageName The name of the image.
         * 
         * @return builder
         * 
         */
        public Builder imageName(@Nullable Output<String> imageName) {
            $.imageName = imageName;
            return this;
        }

        /**
         * @param imageName The name of the image.
         * 
         * @return builder
         * 
         */
        public Builder imageName(String imageName) {
            return imageName(Output.of(imageName));
        }

        /**
         * @param status The status of the image. Valid values: `Creating`, `Available`, `CreateFailed`.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status The status of the image. Valid values: `Creating`, `Available`, `CreateFailed`.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        public ImageState build() {
            return $;
        }
    }

}
