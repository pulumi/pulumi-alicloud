// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.pai.inputs;

import com.pulumi.alicloud.pai.inputs.WorkspaceDatasetversionLabelArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class WorkspaceDatasetversionState extends com.pulumi.resources.ResourceArgs {

    public static final WorkspaceDatasetversionState Empty = new WorkspaceDatasetversionState();

    /**
     * Update time.
     * 
     */
    @Import(name="createTime")
    private @Nullable Output<String> createTime;

    /**
     * @return Update time.
     * 
     */
    public Optional<Output<String>> createTime() {
        return Optional.ofNullable(this.createTime);
    }

    /**
     * Data count.
     * 
     */
    @Import(name="dataCount")
    private @Nullable Output<Integer> dataCount;

    /**
     * @return Data count.
     * 
     */
    public Optional<Output<Integer>> dataCount() {
        return Optional.ofNullable(this.dataCount);
    }

    /**
     * Data size.
     * 
     */
    @Import(name="dataSize")
    private @Nullable Output<Integer> dataSize;

    /**
     * @return Data size.
     * 
     */
    public Optional<Output<Integer>> dataSize() {
        return Optional.ofNullable(this.dataSize);
    }

    /**
     * The data source type. The following values are supported:
     * - OSS: Alibaba Cloud Object Storage (OSS).
     * - NAS: Alibaba cloud file storage (NAS).
     * 
     */
    @Import(name="dataSourceType")
    private @Nullable Output<String> dataSourceType;

    /**
     * @return The data source type. The following values are supported:
     * - OSS: Alibaba Cloud Object Storage (OSS).
     * - NAS: Alibaba cloud file storage (NAS).
     * 
     */
    public Optional<Output<String>> dataSourceType() {
        return Optional.ofNullable(this.dataSourceType);
    }

    /**
     * The first ID of the resource
     * 
     */
    @Import(name="datasetId")
    private @Nullable Output<String> datasetId;

    /**
     * @return The first ID of the resource
     * 
     */
    public Optional<Output<String>> datasetId() {
        return Optional.ofNullable(this.datasetId);
    }

    /**
     * Description of dataset version.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Description of dataset version.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The tag of the resource See `labels` below.
     * 
     */
    @Import(name="labels")
    private @Nullable Output<List<WorkspaceDatasetversionLabelArgs>> labels;

    /**
     * @return The tag of the resource See `labels` below.
     * 
     */
    public Optional<Output<List<WorkspaceDatasetversionLabelArgs>>> labels() {
        return Optional.ofNullable(this.labels);
    }

    /**
     * The extended field, which is of the JsonString type.
     * 
     * When DLC uses a dataset, you can specify the default Mount path for the dataset by configuring the mountPath field.
     * 
     */
    @Import(name="options")
    private @Nullable Output<String> options;

    /**
     * @return The extended field, which is of the JsonString type.
     * 
     * When DLC uses a dataset, you can specify the default Mount path for the dataset by configuring the mountPath field.
     * 
     */
    public Optional<Output<String>> options() {
        return Optional.ofNullable(this.options);
    }

    /**
     * The properties of the dataset. The following values are supported:
     * - FILE: FILE.
     * - DIRECTORY: folder.
     * 
     */
    @Import(name="property")
    private @Nullable Output<String> property;

    /**
     * @return The properties of the dataset. The following values are supported:
     * - FILE: FILE.
     * - DIRECTORY: folder.
     * 
     */
    public Optional<Output<String>> property() {
        return Optional.ofNullable(this.property);
    }

    /**
     * The data source ID.
     * 
     */
    @Import(name="sourceId")
    private @Nullable Output<String> sourceId;

    /**
     * @return The data source ID.
     * 
     */
    public Optional<Output<String>> sourceId() {
        return Optional.ofNullable(this.sourceId);
    }

    /**
     * The data source type. The default value is USER.
     * 
     */
    @Import(name="sourceType")
    private @Nullable Output<String> sourceType;

    /**
     * @return The data source type. The default value is USER.
     * 
     */
    public Optional<Output<String>> sourceType() {
        return Optional.ofNullable(this.sourceType);
    }

    /**
     * The Uri configuration sample is as follows:
     * - The data source type is OSS:&#39;oss:// bucket.endpoint/object&#39;
     * - The data source type is NAS:
     * 
     * The general NAS format is: &#39;nas://.region/subpath/to/dir/&#39;;
     * 
     * CPFS1.0:&#39;nas://.region/subpath/to/dir /&#39;;
     * 
     * CPFS2.0:&#39;nas://.region//&#39;.
     * 
     * CPFS1.0 and CPFS2.0 are distinguished by the format of fsid: CPFS1.0 is cpfs-;CPFS2.0 is cpfs-.
     * 
     */
    @Import(name="uri")
    private @Nullable Output<String> uri;

    /**
     * @return The Uri configuration sample is as follows:
     * - The data source type is OSS:&#39;oss:// bucket.endpoint/object&#39;
     * - The data source type is NAS:
     * 
     * The general NAS format is: &#39;nas://.region/subpath/to/dir/&#39;;
     * 
     * CPFS1.0:&#39;nas://.region/subpath/to/dir /&#39;;
     * 
     * CPFS2.0:&#39;nas://.region//&#39;.
     * 
     * CPFS1.0 and CPFS2.0 are distinguished by the format of fsid: CPFS1.0 is cpfs-;CPFS2.0 is cpfs-.
     * 
     */
    public Optional<Output<String>> uri() {
        return Optional.ofNullable(this.uri);
    }

    /**
     * The name of the resource
     * 
     */
    @Import(name="versionName")
    private @Nullable Output<String> versionName;

    /**
     * @return The name of the resource
     * 
     */
    public Optional<Output<String>> versionName() {
        return Optional.ofNullable(this.versionName);
    }

    private WorkspaceDatasetversionState() {}

    private WorkspaceDatasetversionState(WorkspaceDatasetversionState $) {
        this.createTime = $.createTime;
        this.dataCount = $.dataCount;
        this.dataSize = $.dataSize;
        this.dataSourceType = $.dataSourceType;
        this.datasetId = $.datasetId;
        this.description = $.description;
        this.labels = $.labels;
        this.options = $.options;
        this.property = $.property;
        this.sourceId = $.sourceId;
        this.sourceType = $.sourceType;
        this.uri = $.uri;
        this.versionName = $.versionName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(WorkspaceDatasetversionState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private WorkspaceDatasetversionState $;

        public Builder() {
            $ = new WorkspaceDatasetversionState();
        }

        public Builder(WorkspaceDatasetversionState defaults) {
            $ = new WorkspaceDatasetversionState(Objects.requireNonNull(defaults));
        }

        /**
         * @param createTime Update time.
         * 
         * @return builder
         * 
         */
        public Builder createTime(@Nullable Output<String> createTime) {
            $.createTime = createTime;
            return this;
        }

        /**
         * @param createTime Update time.
         * 
         * @return builder
         * 
         */
        public Builder createTime(String createTime) {
            return createTime(Output.of(createTime));
        }

        /**
         * @param dataCount Data count.
         * 
         * @return builder
         * 
         */
        public Builder dataCount(@Nullable Output<Integer> dataCount) {
            $.dataCount = dataCount;
            return this;
        }

        /**
         * @param dataCount Data count.
         * 
         * @return builder
         * 
         */
        public Builder dataCount(Integer dataCount) {
            return dataCount(Output.of(dataCount));
        }

        /**
         * @param dataSize Data size.
         * 
         * @return builder
         * 
         */
        public Builder dataSize(@Nullable Output<Integer> dataSize) {
            $.dataSize = dataSize;
            return this;
        }

        /**
         * @param dataSize Data size.
         * 
         * @return builder
         * 
         */
        public Builder dataSize(Integer dataSize) {
            return dataSize(Output.of(dataSize));
        }

        /**
         * @param dataSourceType The data source type. The following values are supported:
         * - OSS: Alibaba Cloud Object Storage (OSS).
         * - NAS: Alibaba cloud file storage (NAS).
         * 
         * @return builder
         * 
         */
        public Builder dataSourceType(@Nullable Output<String> dataSourceType) {
            $.dataSourceType = dataSourceType;
            return this;
        }

        /**
         * @param dataSourceType The data source type. The following values are supported:
         * - OSS: Alibaba Cloud Object Storage (OSS).
         * - NAS: Alibaba cloud file storage (NAS).
         * 
         * @return builder
         * 
         */
        public Builder dataSourceType(String dataSourceType) {
            return dataSourceType(Output.of(dataSourceType));
        }

        /**
         * @param datasetId The first ID of the resource
         * 
         * @return builder
         * 
         */
        public Builder datasetId(@Nullable Output<String> datasetId) {
            $.datasetId = datasetId;
            return this;
        }

        /**
         * @param datasetId The first ID of the resource
         * 
         * @return builder
         * 
         */
        public Builder datasetId(String datasetId) {
            return datasetId(Output.of(datasetId));
        }

        /**
         * @param description Description of dataset version.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Description of dataset version.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param labels The tag of the resource See `labels` below.
         * 
         * @return builder
         * 
         */
        public Builder labels(@Nullable Output<List<WorkspaceDatasetversionLabelArgs>> labels) {
            $.labels = labels;
            return this;
        }

        /**
         * @param labels The tag of the resource See `labels` below.
         * 
         * @return builder
         * 
         */
        public Builder labels(List<WorkspaceDatasetversionLabelArgs> labels) {
            return labels(Output.of(labels));
        }

        /**
         * @param labels The tag of the resource See `labels` below.
         * 
         * @return builder
         * 
         */
        public Builder labels(WorkspaceDatasetversionLabelArgs... labels) {
            return labels(List.of(labels));
        }

        /**
         * @param options The extended field, which is of the JsonString type.
         * 
         * When DLC uses a dataset, you can specify the default Mount path for the dataset by configuring the mountPath field.
         * 
         * @return builder
         * 
         */
        public Builder options(@Nullable Output<String> options) {
            $.options = options;
            return this;
        }

        /**
         * @param options The extended field, which is of the JsonString type.
         * 
         * When DLC uses a dataset, you can specify the default Mount path for the dataset by configuring the mountPath field.
         * 
         * @return builder
         * 
         */
        public Builder options(String options) {
            return options(Output.of(options));
        }

        /**
         * @param property The properties of the dataset. The following values are supported:
         * - FILE: FILE.
         * - DIRECTORY: folder.
         * 
         * @return builder
         * 
         */
        public Builder property(@Nullable Output<String> property) {
            $.property = property;
            return this;
        }

        /**
         * @param property The properties of the dataset. The following values are supported:
         * - FILE: FILE.
         * - DIRECTORY: folder.
         * 
         * @return builder
         * 
         */
        public Builder property(String property) {
            return property(Output.of(property));
        }

        /**
         * @param sourceId The data source ID.
         * 
         * @return builder
         * 
         */
        public Builder sourceId(@Nullable Output<String> sourceId) {
            $.sourceId = sourceId;
            return this;
        }

        /**
         * @param sourceId The data source ID.
         * 
         * @return builder
         * 
         */
        public Builder sourceId(String sourceId) {
            return sourceId(Output.of(sourceId));
        }

        /**
         * @param sourceType The data source type. The default value is USER.
         * 
         * @return builder
         * 
         */
        public Builder sourceType(@Nullable Output<String> sourceType) {
            $.sourceType = sourceType;
            return this;
        }

        /**
         * @param sourceType The data source type. The default value is USER.
         * 
         * @return builder
         * 
         */
        public Builder sourceType(String sourceType) {
            return sourceType(Output.of(sourceType));
        }

        /**
         * @param uri The Uri configuration sample is as follows:
         * - The data source type is OSS:&#39;oss:// bucket.endpoint/object&#39;
         * - The data source type is NAS:
         * 
         * The general NAS format is: &#39;nas://.region/subpath/to/dir/&#39;;
         * 
         * CPFS1.0:&#39;nas://.region/subpath/to/dir /&#39;;
         * 
         * CPFS2.0:&#39;nas://.region//&#39;.
         * 
         * CPFS1.0 and CPFS2.0 are distinguished by the format of fsid: CPFS1.0 is cpfs-;CPFS2.0 is cpfs-.
         * 
         * @return builder
         * 
         */
        public Builder uri(@Nullable Output<String> uri) {
            $.uri = uri;
            return this;
        }

        /**
         * @param uri The Uri configuration sample is as follows:
         * - The data source type is OSS:&#39;oss:// bucket.endpoint/object&#39;
         * - The data source type is NAS:
         * 
         * The general NAS format is: &#39;nas://.region/subpath/to/dir/&#39;;
         * 
         * CPFS1.0:&#39;nas://.region/subpath/to/dir /&#39;;
         * 
         * CPFS2.0:&#39;nas://.region//&#39;.
         * 
         * CPFS1.0 and CPFS2.0 are distinguished by the format of fsid: CPFS1.0 is cpfs-;CPFS2.0 is cpfs-.
         * 
         * @return builder
         * 
         */
        public Builder uri(String uri) {
            return uri(Output.of(uri));
        }

        /**
         * @param versionName The name of the resource
         * 
         * @return builder
         * 
         */
        public Builder versionName(@Nullable Output<String> versionName) {
            $.versionName = versionName;
            return this;
        }

        /**
         * @param versionName The name of the resource
         * 
         * @return builder
         * 
         */
        public Builder versionName(String versionName) {
            return versionName(Output.of(versionName));
        }

        public WorkspaceDatasetversionState build() {
            return $;
        }
    }

}
