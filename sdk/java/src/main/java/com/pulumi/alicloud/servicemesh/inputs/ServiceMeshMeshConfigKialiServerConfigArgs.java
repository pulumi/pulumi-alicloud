// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.servicemesh.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ServiceMeshMeshConfigKialiServerConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final ServiceMeshMeshConfigKialiServerConfigArgs Empty = new ServiceMeshMeshConfigKialiServerConfigArgs();

    /**
     * The domain name or address used when accessing the mesh topology in a custom way
     * 
     */
    @Import(name="webFqdn")
    private @Nullable Output<String> webFqdn;

    /**
     * @return The domain name or address used when accessing the mesh topology in a custom way
     * 
     */
    public Optional<Output<String>> webFqdn() {
        return Optional.ofNullable(this.webFqdn);
    }

    /**
     * The port used when accessing the mesh topology in a custom way
     * 
     */
    @Import(name="webPort")
    private @Nullable Output<Integer> webPort;

    /**
     * @return The port used when accessing the mesh topology in a custom way
     * 
     */
    public Optional<Output<Integer>> webPort() {
        return Optional.ofNullable(this.webPort);
    }

    /**
     * The root path of the service when accessing the mesh topology in a custom way
     * 
     */
    @Import(name="webRoot")
    private @Nullable Output<String> webRoot;

    /**
     * @return The root path of the service when accessing the mesh topology in a custom way
     * 
     */
    public Optional<Output<String>> webRoot() {
        return Optional.ofNullable(this.webRoot);
    }

    /**
     * The protocol used when accessing the mesh topology in a custom way. Can only be http or https
     * 
     */
    @Import(name="webSchema")
    private @Nullable Output<String> webSchema;

    /**
     * @return The protocol used when accessing the mesh topology in a custom way. Can only be http or https
     * 
     */
    public Optional<Output<String>> webSchema() {
        return Optional.ofNullable(this.webSchema);
    }

    private ServiceMeshMeshConfigKialiServerConfigArgs() {}

    private ServiceMeshMeshConfigKialiServerConfigArgs(ServiceMeshMeshConfigKialiServerConfigArgs $) {
        this.webFqdn = $.webFqdn;
        this.webPort = $.webPort;
        this.webRoot = $.webRoot;
        this.webSchema = $.webSchema;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServiceMeshMeshConfigKialiServerConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServiceMeshMeshConfigKialiServerConfigArgs $;

        public Builder() {
            $ = new ServiceMeshMeshConfigKialiServerConfigArgs();
        }

        public Builder(ServiceMeshMeshConfigKialiServerConfigArgs defaults) {
            $ = new ServiceMeshMeshConfigKialiServerConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param webFqdn The domain name or address used when accessing the mesh topology in a custom way
         * 
         * @return builder
         * 
         */
        public Builder webFqdn(@Nullable Output<String> webFqdn) {
            $.webFqdn = webFqdn;
            return this;
        }

        /**
         * @param webFqdn The domain name or address used when accessing the mesh topology in a custom way
         * 
         * @return builder
         * 
         */
        public Builder webFqdn(String webFqdn) {
            return webFqdn(Output.of(webFqdn));
        }

        /**
         * @param webPort The port used when accessing the mesh topology in a custom way
         * 
         * @return builder
         * 
         */
        public Builder webPort(@Nullable Output<Integer> webPort) {
            $.webPort = webPort;
            return this;
        }

        /**
         * @param webPort The port used when accessing the mesh topology in a custom way
         * 
         * @return builder
         * 
         */
        public Builder webPort(Integer webPort) {
            return webPort(Output.of(webPort));
        }

        /**
         * @param webRoot The root path of the service when accessing the mesh topology in a custom way
         * 
         * @return builder
         * 
         */
        public Builder webRoot(@Nullable Output<String> webRoot) {
            $.webRoot = webRoot;
            return this;
        }

        /**
         * @param webRoot The root path of the service when accessing the mesh topology in a custom way
         * 
         * @return builder
         * 
         */
        public Builder webRoot(String webRoot) {
            return webRoot(Output.of(webRoot));
        }

        /**
         * @param webSchema The protocol used when accessing the mesh topology in a custom way. Can only be http or https
         * 
         * @return builder
         * 
         */
        public Builder webSchema(@Nullable Output<String> webSchema) {
            $.webSchema = webSchema;
            return this;
        }

        /**
         * @param webSchema The protocol used when accessing the mesh topology in a custom way. Can only be http or https
         * 
         * @return builder
         * 
         */
        public Builder webSchema(String webSchema) {
            return webSchema(Output.of(webSchema));
        }

        public ServiceMeshMeshConfigKialiServerConfigArgs build() {
            return $;
        }
    }

}
