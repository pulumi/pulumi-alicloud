// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.vpn.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SslVpnServerState extends com.pulumi.resources.ResourceArgs {

    public static final SslVpnServerState Empty = new SslVpnServerState();

    /**
     * The encryption algorithm that is used in the SSL-VPN connection. Valid values: `AES-128-CBC`,`AES-192-CBC`,`AES-256-CBC`,`none`. Default value: `AES-128-CBC`.
     * * `AES-128-CBC` - the AES-128-CBC algorithm.
     * * `AES-192-CBC` - the AES-192-CBC algorithm.
     * * `AES-256-CBC` - the AES-256-CBC algorithm.
     * 
     */
    @Import(name="cipher")
    private @Nullable Output<String> cipher;

    /**
     * @return The encryption algorithm that is used in the SSL-VPN connection. Valid values: `AES-128-CBC`,`AES-192-CBC`,`AES-256-CBC`,`none`. Default value: `AES-128-CBC`.
     * * `AES-128-CBC` - the AES-128-CBC algorithm.
     * * `AES-192-CBC` - the AES-192-CBC algorithm.
     * * `AES-256-CBC` - the AES-256-CBC algorithm.
     * 
     */
    public Optional<Output<String>> cipher() {
        return Optional.ofNullable(this.cipher);
    }

    /**
     * The CIDR block from which access addresses are allocated to the virtual network interface card of the client.
     * 
     */
    @Import(name="clientIpPool")
    private @Nullable Output<String> clientIpPool;

    /**
     * @return The CIDR block from which access addresses are allocated to the virtual network interface card of the client.
     * 
     */
    public Optional<Output<String>> clientIpPool() {
        return Optional.ofNullable(this.clientIpPool);
    }

    /**
     * Specifies whether to enable data compression. Valid values: `true`,`false`. Default value: `false`
     * 
     */
    @Import(name="compress")
    private @Nullable Output<Boolean> compress;

    /**
     * @return Specifies whether to enable data compression. Valid values: `true`,`false`. Default value: `false`
     * 
     */
    public Optional<Output<Boolean>> compress() {
        return Optional.ofNullable(this.compress);
    }

    /**
     * The number of current connections.
     * 
     */
    @Import(name="connections")
    private @Nullable Output<Integer> connections;

    /**
     * @return The number of current connections.
     * 
     */
    public Optional<Output<Integer>> connections() {
        return Optional.ofNullable(this.connections);
    }

    /**
     * The internet IP of the SSL-VPN server.
     * 
     */
    @Import(name="internetIp")
    private @Nullable Output<String> internetIp;

    /**
     * @return The internet IP of the SSL-VPN server.
     * 
     */
    public Optional<Output<String>> internetIp() {
        return Optional.ofNullable(this.internetIp);
    }

    /**
     * The CIDR block to be accessed by the client through the SSL-VPN connection. It supports to set multi CIDRs by comma join ways, like `10.0.1.0/24,10.0.2.0/24,10.0.3.0/24`.
     * 
     */
    @Import(name="localSubnet")
    private @Nullable Output<String> localSubnet;

    /**
     * @return The CIDR block to be accessed by the client through the SSL-VPN connection. It supports to set multi CIDRs by comma join ways, like `10.0.1.0/24,10.0.2.0/24,10.0.3.0/24`.
     * 
     */
    public Optional<Output<String>> localSubnet() {
        return Optional.ofNullable(this.localSubnet);
    }

    /**
     * The maximum number of connections.
     * 
     */
    @Import(name="maxConnections")
    private @Nullable Output<Integer> maxConnections;

    /**
     * @return The maximum number of connections.
     * 
     */
    public Optional<Output<Integer>> maxConnections() {
        return Optional.ofNullable(this.maxConnections);
    }

    /**
     * The name of the SSL-VPN server.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the SSL-VPN server.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The port used by the SSL-VPN server. The default value is `1194`.The following ports cannot be used: [22, 2222, 22222, 9000, 9001, 9002, 7505, 80, 443, 53, 68, 123, 4510, 4560, 500, 4500].
     * 
     */
    @Import(name="port")
    private @Nullable Output<Integer> port;

    /**
     * @return The port used by the SSL-VPN server. The default value is `1194`.The following ports cannot be used: [22, 2222, 22222, 9000, 9001, 9002, 7505, 80, 443, 53, 68, 123, 4510, 4560, 500, 4500].
     * 
     */
    public Optional<Output<Integer>> port() {
        return Optional.ofNullable(this.port);
    }

    /**
     * The protocol used by the SSL-VPN server. Valid value: UDP(default) |TCP
     * 
     */
    @Import(name="protocol")
    private @Nullable Output<String> protocol;

    /**
     * @return The protocol used by the SSL-VPN server. Valid value: UDP(default) |TCP
     * 
     */
    public Optional<Output<String>> protocol() {
        return Optional.ofNullable(this.protocol);
    }

    /**
     * The ID of the VPN gateway.
     * 
     */
    @Import(name="vpnGatewayId")
    private @Nullable Output<String> vpnGatewayId;

    /**
     * @return The ID of the VPN gateway.
     * 
     */
    public Optional<Output<String>> vpnGatewayId() {
        return Optional.ofNullable(this.vpnGatewayId);
    }

    private SslVpnServerState() {}

    private SslVpnServerState(SslVpnServerState $) {
        this.cipher = $.cipher;
        this.clientIpPool = $.clientIpPool;
        this.compress = $.compress;
        this.connections = $.connections;
        this.internetIp = $.internetIp;
        this.localSubnet = $.localSubnet;
        this.maxConnections = $.maxConnections;
        this.name = $.name;
        this.port = $.port;
        this.protocol = $.protocol;
        this.vpnGatewayId = $.vpnGatewayId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SslVpnServerState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SslVpnServerState $;

        public Builder() {
            $ = new SslVpnServerState();
        }

        public Builder(SslVpnServerState defaults) {
            $ = new SslVpnServerState(Objects.requireNonNull(defaults));
        }

        /**
         * @param cipher The encryption algorithm that is used in the SSL-VPN connection. Valid values: `AES-128-CBC`,`AES-192-CBC`,`AES-256-CBC`,`none`. Default value: `AES-128-CBC`.
         * * `AES-128-CBC` - the AES-128-CBC algorithm.
         * * `AES-192-CBC` - the AES-192-CBC algorithm.
         * * `AES-256-CBC` - the AES-256-CBC algorithm.
         * 
         * @return builder
         * 
         */
        public Builder cipher(@Nullable Output<String> cipher) {
            $.cipher = cipher;
            return this;
        }

        /**
         * @param cipher The encryption algorithm that is used in the SSL-VPN connection. Valid values: `AES-128-CBC`,`AES-192-CBC`,`AES-256-CBC`,`none`. Default value: `AES-128-CBC`.
         * * `AES-128-CBC` - the AES-128-CBC algorithm.
         * * `AES-192-CBC` - the AES-192-CBC algorithm.
         * * `AES-256-CBC` - the AES-256-CBC algorithm.
         * 
         * @return builder
         * 
         */
        public Builder cipher(String cipher) {
            return cipher(Output.of(cipher));
        }

        /**
         * @param clientIpPool The CIDR block from which access addresses are allocated to the virtual network interface card of the client.
         * 
         * @return builder
         * 
         */
        public Builder clientIpPool(@Nullable Output<String> clientIpPool) {
            $.clientIpPool = clientIpPool;
            return this;
        }

        /**
         * @param clientIpPool The CIDR block from which access addresses are allocated to the virtual network interface card of the client.
         * 
         * @return builder
         * 
         */
        public Builder clientIpPool(String clientIpPool) {
            return clientIpPool(Output.of(clientIpPool));
        }

        /**
         * @param compress Specifies whether to enable data compression. Valid values: `true`,`false`. Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder compress(@Nullable Output<Boolean> compress) {
            $.compress = compress;
            return this;
        }

        /**
         * @param compress Specifies whether to enable data compression. Valid values: `true`,`false`. Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder compress(Boolean compress) {
            return compress(Output.of(compress));
        }

        /**
         * @param connections The number of current connections.
         * 
         * @return builder
         * 
         */
        public Builder connections(@Nullable Output<Integer> connections) {
            $.connections = connections;
            return this;
        }

        /**
         * @param connections The number of current connections.
         * 
         * @return builder
         * 
         */
        public Builder connections(Integer connections) {
            return connections(Output.of(connections));
        }

        /**
         * @param internetIp The internet IP of the SSL-VPN server.
         * 
         * @return builder
         * 
         */
        public Builder internetIp(@Nullable Output<String> internetIp) {
            $.internetIp = internetIp;
            return this;
        }

        /**
         * @param internetIp The internet IP of the SSL-VPN server.
         * 
         * @return builder
         * 
         */
        public Builder internetIp(String internetIp) {
            return internetIp(Output.of(internetIp));
        }

        /**
         * @param localSubnet The CIDR block to be accessed by the client through the SSL-VPN connection. It supports to set multi CIDRs by comma join ways, like `10.0.1.0/24,10.0.2.0/24,10.0.3.0/24`.
         * 
         * @return builder
         * 
         */
        public Builder localSubnet(@Nullable Output<String> localSubnet) {
            $.localSubnet = localSubnet;
            return this;
        }

        /**
         * @param localSubnet The CIDR block to be accessed by the client through the SSL-VPN connection. It supports to set multi CIDRs by comma join ways, like `10.0.1.0/24,10.0.2.0/24,10.0.3.0/24`.
         * 
         * @return builder
         * 
         */
        public Builder localSubnet(String localSubnet) {
            return localSubnet(Output.of(localSubnet));
        }

        /**
         * @param maxConnections The maximum number of connections.
         * 
         * @return builder
         * 
         */
        public Builder maxConnections(@Nullable Output<Integer> maxConnections) {
            $.maxConnections = maxConnections;
            return this;
        }

        /**
         * @param maxConnections The maximum number of connections.
         * 
         * @return builder
         * 
         */
        public Builder maxConnections(Integer maxConnections) {
            return maxConnections(Output.of(maxConnections));
        }

        /**
         * @param name The name of the SSL-VPN server.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the SSL-VPN server.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param port The port used by the SSL-VPN server. The default value is `1194`.The following ports cannot be used: [22, 2222, 22222, 9000, 9001, 9002, 7505, 80, 443, 53, 68, 123, 4510, 4560, 500, 4500].
         * 
         * @return builder
         * 
         */
        public Builder port(@Nullable Output<Integer> port) {
            $.port = port;
            return this;
        }

        /**
         * @param port The port used by the SSL-VPN server. The default value is `1194`.The following ports cannot be used: [22, 2222, 22222, 9000, 9001, 9002, 7505, 80, 443, 53, 68, 123, 4510, 4560, 500, 4500].
         * 
         * @return builder
         * 
         */
        public Builder port(Integer port) {
            return port(Output.of(port));
        }

        /**
         * @param protocol The protocol used by the SSL-VPN server. Valid value: UDP(default) |TCP
         * 
         * @return builder
         * 
         */
        public Builder protocol(@Nullable Output<String> protocol) {
            $.protocol = protocol;
            return this;
        }

        /**
         * @param protocol The protocol used by the SSL-VPN server. Valid value: UDP(default) |TCP
         * 
         * @return builder
         * 
         */
        public Builder protocol(String protocol) {
            return protocol(Output.of(protocol));
        }

        /**
         * @param vpnGatewayId The ID of the VPN gateway.
         * 
         * @return builder
         * 
         */
        public Builder vpnGatewayId(@Nullable Output<String> vpnGatewayId) {
            $.vpnGatewayId = vpnGatewayId;
            return this;
        }

        /**
         * @param vpnGatewayId The ID of the VPN gateway.
         * 
         * @return builder
         * 
         */
        public Builder vpnGatewayId(String vpnGatewayId) {
            return vpnGatewayId(Output.of(vpnGatewayId));
        }

        public SslVpnServerState build() {
            return $;
        }
    }

}
