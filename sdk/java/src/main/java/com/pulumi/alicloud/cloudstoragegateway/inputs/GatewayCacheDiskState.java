// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.cloudstoragegateway.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GatewayCacheDiskState extends com.pulumi.resources.ResourceArgs {

    public static final GatewayCacheDiskState Empty = new GatewayCacheDiskState();

    /**
     * The type of the cache disk. Valid values: `cloud_efficiency`, `cloud_ssd`, `cloud_essd`. **NOTE:** From version 1.227.0, `cache_disk_category` can be set to `cloud_essd`.
     * 
     */
    @Import(name="cacheDiskCategory")
    private @Nullable Output<String> cacheDiskCategory;

    /**
     * @return The type of the cache disk. Valid values: `cloud_efficiency`, `cloud_ssd`, `cloud_essd`. **NOTE:** From version 1.227.0, `cache_disk_category` can be set to `cloud_essd`.
     * 
     */
    public Optional<Output<String>> cacheDiskCategory() {
        return Optional.ofNullable(this.cacheDiskCategory);
    }

    /**
     * The capacity of the cache disk.
     * 
     */
    @Import(name="cacheDiskSizeInGb")
    private @Nullable Output<Integer> cacheDiskSizeInGb;

    /**
     * @return The capacity of the cache disk.
     * 
     */
    public Optional<Output<Integer>> cacheDiskSizeInGb() {
        return Optional.ofNullable(this.cacheDiskSizeInGb);
    }

    /**
     * The ID of the cache disk.
     * 
     */
    @Import(name="cacheId")
    private @Nullable Output<String> cacheId;

    /**
     * @return The ID of the cache disk.
     * 
     */
    public Optional<Output<String>> cacheId() {
        return Optional.ofNullable(this.cacheId);
    }

    /**
     * The ID of the gateway.
     * 
     */
    @Import(name="gatewayId")
    private @Nullable Output<String> gatewayId;

    /**
     * @return The ID of the gateway.
     * 
     */
    public Optional<Output<String>> gatewayId() {
        return Optional.ofNullable(this.gatewayId);
    }

    /**
     * The path of the cache disk.
     * 
     */
    @Import(name="localFilePath")
    private @Nullable Output<String> localFilePath;

    /**
     * @return The path of the cache disk.
     * 
     */
    public Optional<Output<String>> localFilePath() {
        return Optional.ofNullable(this.localFilePath);
    }

    /**
     * The performance level (PL) of the Enterprise SSD (ESSD). Valid values: `PL1`, `PL2`, `PL3`. **NOTE:** If `cache_disk_category` is set to `cloud_essd`, `performance_level` is required.
     * 
     */
    @Import(name="performanceLevel")
    private @Nullable Output<String> performanceLevel;

    /**
     * @return The performance level (PL) of the Enterprise SSD (ESSD). Valid values: `PL1`, `PL2`, `PL3`. **NOTE:** If `cache_disk_category` is set to `cloud_essd`, `performance_level` is required.
     * 
     */
    public Optional<Output<String>> performanceLevel() {
        return Optional.ofNullable(this.performanceLevel);
    }

    /**
     * The status of the Gateway Cache Disk.
     * 
     */
    @Import(name="status")
    private @Nullable Output<Integer> status;

    /**
     * @return The status of the Gateway Cache Disk.
     * 
     */
    public Optional<Output<Integer>> status() {
        return Optional.ofNullable(this.status);
    }

    private GatewayCacheDiskState() {}

    private GatewayCacheDiskState(GatewayCacheDiskState $) {
        this.cacheDiskCategory = $.cacheDiskCategory;
        this.cacheDiskSizeInGb = $.cacheDiskSizeInGb;
        this.cacheId = $.cacheId;
        this.gatewayId = $.gatewayId;
        this.localFilePath = $.localFilePath;
        this.performanceLevel = $.performanceLevel;
        this.status = $.status;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GatewayCacheDiskState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GatewayCacheDiskState $;

        public Builder() {
            $ = new GatewayCacheDiskState();
        }

        public Builder(GatewayCacheDiskState defaults) {
            $ = new GatewayCacheDiskState(Objects.requireNonNull(defaults));
        }

        /**
         * @param cacheDiskCategory The type of the cache disk. Valid values: `cloud_efficiency`, `cloud_ssd`, `cloud_essd`. **NOTE:** From version 1.227.0, `cache_disk_category` can be set to `cloud_essd`.
         * 
         * @return builder
         * 
         */
        public Builder cacheDiskCategory(@Nullable Output<String> cacheDiskCategory) {
            $.cacheDiskCategory = cacheDiskCategory;
            return this;
        }

        /**
         * @param cacheDiskCategory The type of the cache disk. Valid values: `cloud_efficiency`, `cloud_ssd`, `cloud_essd`. **NOTE:** From version 1.227.0, `cache_disk_category` can be set to `cloud_essd`.
         * 
         * @return builder
         * 
         */
        public Builder cacheDiskCategory(String cacheDiskCategory) {
            return cacheDiskCategory(Output.of(cacheDiskCategory));
        }

        /**
         * @param cacheDiskSizeInGb The capacity of the cache disk.
         * 
         * @return builder
         * 
         */
        public Builder cacheDiskSizeInGb(@Nullable Output<Integer> cacheDiskSizeInGb) {
            $.cacheDiskSizeInGb = cacheDiskSizeInGb;
            return this;
        }

        /**
         * @param cacheDiskSizeInGb The capacity of the cache disk.
         * 
         * @return builder
         * 
         */
        public Builder cacheDiskSizeInGb(Integer cacheDiskSizeInGb) {
            return cacheDiskSizeInGb(Output.of(cacheDiskSizeInGb));
        }

        /**
         * @param cacheId The ID of the cache disk.
         * 
         * @return builder
         * 
         */
        public Builder cacheId(@Nullable Output<String> cacheId) {
            $.cacheId = cacheId;
            return this;
        }

        /**
         * @param cacheId The ID of the cache disk.
         * 
         * @return builder
         * 
         */
        public Builder cacheId(String cacheId) {
            return cacheId(Output.of(cacheId));
        }

        /**
         * @param gatewayId The ID of the gateway.
         * 
         * @return builder
         * 
         */
        public Builder gatewayId(@Nullable Output<String> gatewayId) {
            $.gatewayId = gatewayId;
            return this;
        }

        /**
         * @param gatewayId The ID of the gateway.
         * 
         * @return builder
         * 
         */
        public Builder gatewayId(String gatewayId) {
            return gatewayId(Output.of(gatewayId));
        }

        /**
         * @param localFilePath The path of the cache disk.
         * 
         * @return builder
         * 
         */
        public Builder localFilePath(@Nullable Output<String> localFilePath) {
            $.localFilePath = localFilePath;
            return this;
        }

        /**
         * @param localFilePath The path of the cache disk.
         * 
         * @return builder
         * 
         */
        public Builder localFilePath(String localFilePath) {
            return localFilePath(Output.of(localFilePath));
        }

        /**
         * @param performanceLevel The performance level (PL) of the Enterprise SSD (ESSD). Valid values: `PL1`, `PL2`, `PL3`. **NOTE:** If `cache_disk_category` is set to `cloud_essd`, `performance_level` is required.
         * 
         * @return builder
         * 
         */
        public Builder performanceLevel(@Nullable Output<String> performanceLevel) {
            $.performanceLevel = performanceLevel;
            return this;
        }

        /**
         * @param performanceLevel The performance level (PL) of the Enterprise SSD (ESSD). Valid values: `PL1`, `PL2`, `PL3`. **NOTE:** If `cache_disk_category` is set to `cloud_essd`, `performance_level` is required.
         * 
         * @return builder
         * 
         */
        public Builder performanceLevel(String performanceLevel) {
            return performanceLevel(Output.of(performanceLevel));
        }

        /**
         * @param status The status of the Gateway Cache Disk.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<Integer> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status The status of the Gateway Cache Disk.
         * 
         * @return builder
         * 
         */
        public Builder status(Integer status) {
            return status(Output.of(status));
        }

        public GatewayCacheDiskState build() {
            return $;
        }
    }

}
