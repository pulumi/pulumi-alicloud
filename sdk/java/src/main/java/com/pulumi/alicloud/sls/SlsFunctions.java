// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.sls;

import com.pulumi.alicloud.Utilities;
import com.pulumi.alicloud.sls.inputs.GetAlertsArgs;
import com.pulumi.alicloud.sls.inputs.GetAlertsPlainArgs;
import com.pulumi.alicloud.sls.outputs.GetAlertsResult;
import com.pulumi.core.Output;
import com.pulumi.core.TypeShape;
import com.pulumi.deployment.Deployment;
import com.pulumi.deployment.InvokeOptions;
import com.pulumi.deployment.InvokeOutputOptions;
import java.util.concurrent.CompletableFuture;

public final class SlsFunctions {
    /**
     * This data source provides Sls Alert available to the user.[What is Alert](https://next.api.alibabacloud.com/document/Sls/2020-12-30/CreateAlert)
     * 
     * &gt; **NOTE:** Available since v1.250.0.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.alicloud.log.Project;
     * import com.pulumi.alicloud.log.ProjectArgs;
     * import com.pulumi.alicloud.sls.Alert;
     * import com.pulumi.alicloud.sls.AlertArgs;
     * import com.pulumi.alicloud.sls.inputs.AlertConfigurationArgs;
     * import com.pulumi.alicloud.sls.inputs.AlertConfigurationGroupConfigurationArgs;
     * import com.pulumi.alicloud.sls.inputs.AlertConfigurationSinkEventStoreArgs;
     * import com.pulumi.alicloud.sls.inputs.AlertConfigurationSinkCmsArgs;
     * import com.pulumi.alicloud.sls.inputs.AlertConfigurationSinkAlerthubArgs;
     * import com.pulumi.alicloud.sls.inputs.AlertConfigurationTemplateConfigurationArgs;
     * import com.pulumi.alicloud.sls.inputs.AlertConfigurationConditionConfigurationArgs;
     * import com.pulumi.alicloud.sls.inputs.AlertConfigurationPolicyConfigurationArgs;
     * import com.pulumi.alicloud.sls.inputs.AlertScheduleArgs;
     * import com.pulumi.alicloud.sls.SlsFunctions;
     * import com.pulumi.alicloud.sls.inputs.GetAlertsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var config = ctx.config();
     *         final var name = config.get("name").orElse("terraform-example");
     *         final var alertName = config.get("alertName").orElse("openapi-terraform-alert");
     *         final var projectName = config.get("projectName").orElse("terraform-alert-example");
     *         var defaultINsMgl = new Project("defaultINsMgl", ProjectArgs.builder()
     *             .description("terraform-alert-example")
     *             .name("terraform-alert-example")
     *             .build());
     * 
     *         var defaultAlert = new Alert("defaultAlert", AlertArgs.builder()
     *             .configuration(AlertConfigurationArgs.builder()
     *                 .type("tpl")
     *                 .version("2")
     *                 .queryLists(                
     *                     AlertConfigurationQueryListArgs.builder()
     *                         .query("* | select *")
     *                         .timeSpanType("Relative")
     *                         .start("-15m")
     *                         .end("now")
     *                         .storeType("log")
     *                         .project(defaultINsMgl.id())
     *                         .store("alert")
     *                         .region("cn-beijing")
     *                         .powerSqlMode("disable")
     *                         .chartTitle("wkb-chart")
     *                         .dashboardId("wkb-dashboard")
     *                         .ui("{}")
     *                         .roleArn("acs:ram::1654218965343050:role/aliyunslsalertmonitorrole")
     *                         .build(),
     *                     AlertConfigurationQueryListArgs.builder()
     *                         .storeType("meta")
     *                         .store("user.rds_ip_whitelist")
     *                         .build(),
     *                     AlertConfigurationQueryListArgs.builder()
     *                         .storeType("meta")
     *                         .store("myexample1")
     *                         .build())
     *                 .groupConfiguration(AlertConfigurationGroupConfigurationArgs.builder()
     *                     .type("no_group")
     *                     .fields(                    
     *                         "a",
     *                         "b")
     *                     .build())
     *                 .joinConfigurations(                
     *                     AlertConfigurationJoinConfigurationArgs.builder()
     *                         .type("no_join")
     *                         .condition("aa")
     *                         .build(),
     *                     AlertConfigurationJoinConfigurationArgs.builder()
     *                         .type("cross_join")
     *                         .condition("qqq")
     *                         .build(),
     *                     AlertConfigurationJoinConfigurationArgs.builder()
     *                         .type("inner_join")
     *                         .condition("fefefe")
     *                         .build())
     *                 .severityConfigurations(AlertConfigurationSeverityConfigurationArgs.builder()
     *                     .severity(6)
     *                     .evalCondition(AlertConfigurationSeverityConfigurationEvalConditionArgs.builder()
     *                         .condition("__count__ > 1")
     *                         .countCondition("cnt > 0")
     *                         .build())
     *                     .build())
     *                 .labels(AlertConfigurationLabelArgs.builder()
     *                     .key("a")
     *                     .value("b")
     *                     .build())
     *                 .annotations(AlertConfigurationAnnotationArgs.builder()
     *                     .key("x")
     *                     .value("y")
     *                     .build())
     *                 .autoAnnotation(true)
     *                 .sendResolved(false)
     *                 .threshold(1)
     *                 .noDataFire(false)
     *                 .sinkEventStore(AlertConfigurationSinkEventStoreArgs.builder()
     *                     .enabled(true)
     *                     .endpoint("cn-shanghai-intranet.log.aliyuncs.com")
     *                     .project("wkb-wangren")
     *                     .eventStore("alert")
     *                     .roleArn("acs:ram::1654218965343050:role/aliyunlogetlrole")
     *                     .build())
     *                 .sinkCms(AlertConfigurationSinkCmsArgs.builder()
     *                     .enabled(false)
     *                     .build())
     *                 .sinkAlerthub(AlertConfigurationSinkAlerthubArgs.builder()
     *                     .enabled(false)
     *                     .build())
     *                 .templateConfiguration(AlertConfigurationTemplateConfigurationArgs.builder()
     *                     .templateId("sls.app.ack.autoscaler.cluster_unhealthy")
     *                     .type("sys")
     *                     .version("1.0")
     *                     .lang("cn")
     *                     .build())
     *                 .conditionConfiguration(AlertConfigurationConditionConfigurationArgs.builder()
     *                     .condition("cnt > 3")
     *                     .countCondition("__count__ < 3")
     *                     .build())
     *                 .policyConfiguration(AlertConfigurationPolicyConfigurationArgs.builder()
     *                     .alertPolicyId("sls.builtin.dynamic")
     *                     .actionPolicyId("wkb-action")
     *                     .repeatInterval("1m")
     *                     .build())
     *                 .dashboard("internal-alert")
     *                 .muteUntil(0)
     *                 .noDataSeverity(6)
     *                 .tags(                
     *                     "wkb",
     *                     "wangren",
     *                     "sls")
     *                 .build())
     *             .alertName(alertName)
     *             .projectName(defaultINsMgl.id())
     *             .schedule(AlertScheduleArgs.builder()
     *                 .type("Cron")
     *                 .runImmdiately(true)
     *                 .timeZone("+0800")
     *                 .delay(10)
     *                 .cronExpression("0/5 * * * *")
     *                 .build())
     *             .displayName("openapi-terraform")
     *             .description("create alert")
     *             .build());
     * 
     *         final var default = SlsFunctions.getAlerts(GetAlertsArgs.builder()
     *             .ids(defaultAlert.id())
     *             .nameRegex(defaultAlert.alertName())
     *             .projectName(defaultINsMgl.id())
     *             .build());
     * 
     *         ctx.export("alicloudSlsAlertExampleId", default_.applyValue(_default_ -> _default_.alerts()[0].id()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetAlertsResult> getAlerts(GetAlertsArgs args) {
        return getAlerts(args, InvokeOptions.Empty);
    }
    /**
     * This data source provides Sls Alert available to the user.[What is Alert](https://next.api.alibabacloud.com/document/Sls/2020-12-30/CreateAlert)
     * 
     * &gt; **NOTE:** Available since v1.250.0.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.alicloud.log.Project;
     * import com.pulumi.alicloud.log.ProjectArgs;
     * import com.pulumi.alicloud.sls.Alert;
     * import com.pulumi.alicloud.sls.AlertArgs;
     * import com.pulumi.alicloud.sls.inputs.AlertConfigurationArgs;
     * import com.pulumi.alicloud.sls.inputs.AlertConfigurationGroupConfigurationArgs;
     * import com.pulumi.alicloud.sls.inputs.AlertConfigurationSinkEventStoreArgs;
     * import com.pulumi.alicloud.sls.inputs.AlertConfigurationSinkCmsArgs;
     * import com.pulumi.alicloud.sls.inputs.AlertConfigurationSinkAlerthubArgs;
     * import com.pulumi.alicloud.sls.inputs.AlertConfigurationTemplateConfigurationArgs;
     * import com.pulumi.alicloud.sls.inputs.AlertConfigurationConditionConfigurationArgs;
     * import com.pulumi.alicloud.sls.inputs.AlertConfigurationPolicyConfigurationArgs;
     * import com.pulumi.alicloud.sls.inputs.AlertScheduleArgs;
     * import com.pulumi.alicloud.sls.SlsFunctions;
     * import com.pulumi.alicloud.sls.inputs.GetAlertsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var config = ctx.config();
     *         final var name = config.get("name").orElse("terraform-example");
     *         final var alertName = config.get("alertName").orElse("openapi-terraform-alert");
     *         final var projectName = config.get("projectName").orElse("terraform-alert-example");
     *         var defaultINsMgl = new Project("defaultINsMgl", ProjectArgs.builder()
     *             .description("terraform-alert-example")
     *             .name("terraform-alert-example")
     *             .build());
     * 
     *         var defaultAlert = new Alert("defaultAlert", AlertArgs.builder()
     *             .configuration(AlertConfigurationArgs.builder()
     *                 .type("tpl")
     *                 .version("2")
     *                 .queryLists(                
     *                     AlertConfigurationQueryListArgs.builder()
     *                         .query("* | select *")
     *                         .timeSpanType("Relative")
     *                         .start("-15m")
     *                         .end("now")
     *                         .storeType("log")
     *                         .project(defaultINsMgl.id())
     *                         .store("alert")
     *                         .region("cn-beijing")
     *                         .powerSqlMode("disable")
     *                         .chartTitle("wkb-chart")
     *                         .dashboardId("wkb-dashboard")
     *                         .ui("{}")
     *                         .roleArn("acs:ram::1654218965343050:role/aliyunslsalertmonitorrole")
     *                         .build(),
     *                     AlertConfigurationQueryListArgs.builder()
     *                         .storeType("meta")
     *                         .store("user.rds_ip_whitelist")
     *                         .build(),
     *                     AlertConfigurationQueryListArgs.builder()
     *                         .storeType("meta")
     *                         .store("myexample1")
     *                         .build())
     *                 .groupConfiguration(AlertConfigurationGroupConfigurationArgs.builder()
     *                     .type("no_group")
     *                     .fields(                    
     *                         "a",
     *                         "b")
     *                     .build())
     *                 .joinConfigurations(                
     *                     AlertConfigurationJoinConfigurationArgs.builder()
     *                         .type("no_join")
     *                         .condition("aa")
     *                         .build(),
     *                     AlertConfigurationJoinConfigurationArgs.builder()
     *                         .type("cross_join")
     *                         .condition("qqq")
     *                         .build(),
     *                     AlertConfigurationJoinConfigurationArgs.builder()
     *                         .type("inner_join")
     *                         .condition("fefefe")
     *                         .build())
     *                 .severityConfigurations(AlertConfigurationSeverityConfigurationArgs.builder()
     *                     .severity(6)
     *                     .evalCondition(AlertConfigurationSeverityConfigurationEvalConditionArgs.builder()
     *                         .condition("__count__ > 1")
     *                         .countCondition("cnt > 0")
     *                         .build())
     *                     .build())
     *                 .labels(AlertConfigurationLabelArgs.builder()
     *                     .key("a")
     *                     .value("b")
     *                     .build())
     *                 .annotations(AlertConfigurationAnnotationArgs.builder()
     *                     .key("x")
     *                     .value("y")
     *                     .build())
     *                 .autoAnnotation(true)
     *                 .sendResolved(false)
     *                 .threshold(1)
     *                 .noDataFire(false)
     *                 .sinkEventStore(AlertConfigurationSinkEventStoreArgs.builder()
     *                     .enabled(true)
     *                     .endpoint("cn-shanghai-intranet.log.aliyuncs.com")
     *                     .project("wkb-wangren")
     *                     .eventStore("alert")
     *                     .roleArn("acs:ram::1654218965343050:role/aliyunlogetlrole")
     *                     .build())
     *                 .sinkCms(AlertConfigurationSinkCmsArgs.builder()
     *                     .enabled(false)
     *                     .build())
     *                 .sinkAlerthub(AlertConfigurationSinkAlerthubArgs.builder()
     *                     .enabled(false)
     *                     .build())
     *                 .templateConfiguration(AlertConfigurationTemplateConfigurationArgs.builder()
     *                     .templateId("sls.app.ack.autoscaler.cluster_unhealthy")
     *                     .type("sys")
     *                     .version("1.0")
     *                     .lang("cn")
     *                     .build())
     *                 .conditionConfiguration(AlertConfigurationConditionConfigurationArgs.builder()
     *                     .condition("cnt > 3")
     *                     .countCondition("__count__ < 3")
     *                     .build())
     *                 .policyConfiguration(AlertConfigurationPolicyConfigurationArgs.builder()
     *                     .alertPolicyId("sls.builtin.dynamic")
     *                     .actionPolicyId("wkb-action")
     *                     .repeatInterval("1m")
     *                     .build())
     *                 .dashboard("internal-alert")
     *                 .muteUntil(0)
     *                 .noDataSeverity(6)
     *                 .tags(                
     *                     "wkb",
     *                     "wangren",
     *                     "sls")
     *                 .build())
     *             .alertName(alertName)
     *             .projectName(defaultINsMgl.id())
     *             .schedule(AlertScheduleArgs.builder()
     *                 .type("Cron")
     *                 .runImmdiately(true)
     *                 .timeZone("+0800")
     *                 .delay(10)
     *                 .cronExpression("0/5 * * * *")
     *                 .build())
     *             .displayName("openapi-terraform")
     *             .description("create alert")
     *             .build());
     * 
     *         final var default = SlsFunctions.getAlerts(GetAlertsArgs.builder()
     *             .ids(defaultAlert.id())
     *             .nameRegex(defaultAlert.alertName())
     *             .projectName(defaultINsMgl.id())
     *             .build());
     * 
     *         ctx.export("alicloudSlsAlertExampleId", default_.applyValue(_default_ -> _default_.alerts()[0].id()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetAlertsResult> getAlertsPlain(GetAlertsPlainArgs args) {
        return getAlertsPlain(args, InvokeOptions.Empty);
    }
    /**
     * This data source provides Sls Alert available to the user.[What is Alert](https://next.api.alibabacloud.com/document/Sls/2020-12-30/CreateAlert)
     * 
     * &gt; **NOTE:** Available since v1.250.0.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.alicloud.log.Project;
     * import com.pulumi.alicloud.log.ProjectArgs;
     * import com.pulumi.alicloud.sls.Alert;
     * import com.pulumi.alicloud.sls.AlertArgs;
     * import com.pulumi.alicloud.sls.inputs.AlertConfigurationArgs;
     * import com.pulumi.alicloud.sls.inputs.AlertConfigurationGroupConfigurationArgs;
     * import com.pulumi.alicloud.sls.inputs.AlertConfigurationSinkEventStoreArgs;
     * import com.pulumi.alicloud.sls.inputs.AlertConfigurationSinkCmsArgs;
     * import com.pulumi.alicloud.sls.inputs.AlertConfigurationSinkAlerthubArgs;
     * import com.pulumi.alicloud.sls.inputs.AlertConfigurationTemplateConfigurationArgs;
     * import com.pulumi.alicloud.sls.inputs.AlertConfigurationConditionConfigurationArgs;
     * import com.pulumi.alicloud.sls.inputs.AlertConfigurationPolicyConfigurationArgs;
     * import com.pulumi.alicloud.sls.inputs.AlertScheduleArgs;
     * import com.pulumi.alicloud.sls.SlsFunctions;
     * import com.pulumi.alicloud.sls.inputs.GetAlertsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var config = ctx.config();
     *         final var name = config.get("name").orElse("terraform-example");
     *         final var alertName = config.get("alertName").orElse("openapi-terraform-alert");
     *         final var projectName = config.get("projectName").orElse("terraform-alert-example");
     *         var defaultINsMgl = new Project("defaultINsMgl", ProjectArgs.builder()
     *             .description("terraform-alert-example")
     *             .name("terraform-alert-example")
     *             .build());
     * 
     *         var defaultAlert = new Alert("defaultAlert", AlertArgs.builder()
     *             .configuration(AlertConfigurationArgs.builder()
     *                 .type("tpl")
     *                 .version("2")
     *                 .queryLists(                
     *                     AlertConfigurationQueryListArgs.builder()
     *                         .query("* | select *")
     *                         .timeSpanType("Relative")
     *                         .start("-15m")
     *                         .end("now")
     *                         .storeType("log")
     *                         .project(defaultINsMgl.id())
     *                         .store("alert")
     *                         .region("cn-beijing")
     *                         .powerSqlMode("disable")
     *                         .chartTitle("wkb-chart")
     *                         .dashboardId("wkb-dashboard")
     *                         .ui("{}")
     *                         .roleArn("acs:ram::1654218965343050:role/aliyunslsalertmonitorrole")
     *                         .build(),
     *                     AlertConfigurationQueryListArgs.builder()
     *                         .storeType("meta")
     *                         .store("user.rds_ip_whitelist")
     *                         .build(),
     *                     AlertConfigurationQueryListArgs.builder()
     *                         .storeType("meta")
     *                         .store("myexample1")
     *                         .build())
     *                 .groupConfiguration(AlertConfigurationGroupConfigurationArgs.builder()
     *                     .type("no_group")
     *                     .fields(                    
     *                         "a",
     *                         "b")
     *                     .build())
     *                 .joinConfigurations(                
     *                     AlertConfigurationJoinConfigurationArgs.builder()
     *                         .type("no_join")
     *                         .condition("aa")
     *                         .build(),
     *                     AlertConfigurationJoinConfigurationArgs.builder()
     *                         .type("cross_join")
     *                         .condition("qqq")
     *                         .build(),
     *                     AlertConfigurationJoinConfigurationArgs.builder()
     *                         .type("inner_join")
     *                         .condition("fefefe")
     *                         .build())
     *                 .severityConfigurations(AlertConfigurationSeverityConfigurationArgs.builder()
     *                     .severity(6)
     *                     .evalCondition(AlertConfigurationSeverityConfigurationEvalConditionArgs.builder()
     *                         .condition("__count__ > 1")
     *                         .countCondition("cnt > 0")
     *                         .build())
     *                     .build())
     *                 .labels(AlertConfigurationLabelArgs.builder()
     *                     .key("a")
     *                     .value("b")
     *                     .build())
     *                 .annotations(AlertConfigurationAnnotationArgs.builder()
     *                     .key("x")
     *                     .value("y")
     *                     .build())
     *                 .autoAnnotation(true)
     *                 .sendResolved(false)
     *                 .threshold(1)
     *                 .noDataFire(false)
     *                 .sinkEventStore(AlertConfigurationSinkEventStoreArgs.builder()
     *                     .enabled(true)
     *                     .endpoint("cn-shanghai-intranet.log.aliyuncs.com")
     *                     .project("wkb-wangren")
     *                     .eventStore("alert")
     *                     .roleArn("acs:ram::1654218965343050:role/aliyunlogetlrole")
     *                     .build())
     *                 .sinkCms(AlertConfigurationSinkCmsArgs.builder()
     *                     .enabled(false)
     *                     .build())
     *                 .sinkAlerthub(AlertConfigurationSinkAlerthubArgs.builder()
     *                     .enabled(false)
     *                     .build())
     *                 .templateConfiguration(AlertConfigurationTemplateConfigurationArgs.builder()
     *                     .templateId("sls.app.ack.autoscaler.cluster_unhealthy")
     *                     .type("sys")
     *                     .version("1.0")
     *                     .lang("cn")
     *                     .build())
     *                 .conditionConfiguration(AlertConfigurationConditionConfigurationArgs.builder()
     *                     .condition("cnt > 3")
     *                     .countCondition("__count__ < 3")
     *                     .build())
     *                 .policyConfiguration(AlertConfigurationPolicyConfigurationArgs.builder()
     *                     .alertPolicyId("sls.builtin.dynamic")
     *                     .actionPolicyId("wkb-action")
     *                     .repeatInterval("1m")
     *                     .build())
     *                 .dashboard("internal-alert")
     *                 .muteUntil(0)
     *                 .noDataSeverity(6)
     *                 .tags(                
     *                     "wkb",
     *                     "wangren",
     *                     "sls")
     *                 .build())
     *             .alertName(alertName)
     *             .projectName(defaultINsMgl.id())
     *             .schedule(AlertScheduleArgs.builder()
     *                 .type("Cron")
     *                 .runImmdiately(true)
     *                 .timeZone("+0800")
     *                 .delay(10)
     *                 .cronExpression("0/5 * * * *")
     *                 .build())
     *             .displayName("openapi-terraform")
     *             .description("create alert")
     *             .build());
     * 
     *         final var default = SlsFunctions.getAlerts(GetAlertsArgs.builder()
     *             .ids(defaultAlert.id())
     *             .nameRegex(defaultAlert.alertName())
     *             .projectName(defaultINsMgl.id())
     *             .build());
     * 
     *         ctx.export("alicloudSlsAlertExampleId", default_.applyValue(_default_ -> _default_.alerts()[0].id()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetAlertsResult> getAlerts(GetAlertsArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("alicloud:sls/getAlerts:getAlerts", TypeShape.of(GetAlertsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * This data source provides Sls Alert available to the user.[What is Alert](https://next.api.alibabacloud.com/document/Sls/2020-12-30/CreateAlert)
     * 
     * &gt; **NOTE:** Available since v1.250.0.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.alicloud.log.Project;
     * import com.pulumi.alicloud.log.ProjectArgs;
     * import com.pulumi.alicloud.sls.Alert;
     * import com.pulumi.alicloud.sls.AlertArgs;
     * import com.pulumi.alicloud.sls.inputs.AlertConfigurationArgs;
     * import com.pulumi.alicloud.sls.inputs.AlertConfigurationGroupConfigurationArgs;
     * import com.pulumi.alicloud.sls.inputs.AlertConfigurationSinkEventStoreArgs;
     * import com.pulumi.alicloud.sls.inputs.AlertConfigurationSinkCmsArgs;
     * import com.pulumi.alicloud.sls.inputs.AlertConfigurationSinkAlerthubArgs;
     * import com.pulumi.alicloud.sls.inputs.AlertConfigurationTemplateConfigurationArgs;
     * import com.pulumi.alicloud.sls.inputs.AlertConfigurationConditionConfigurationArgs;
     * import com.pulumi.alicloud.sls.inputs.AlertConfigurationPolicyConfigurationArgs;
     * import com.pulumi.alicloud.sls.inputs.AlertScheduleArgs;
     * import com.pulumi.alicloud.sls.SlsFunctions;
     * import com.pulumi.alicloud.sls.inputs.GetAlertsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var config = ctx.config();
     *         final var name = config.get("name").orElse("terraform-example");
     *         final var alertName = config.get("alertName").orElse("openapi-terraform-alert");
     *         final var projectName = config.get("projectName").orElse("terraform-alert-example");
     *         var defaultINsMgl = new Project("defaultINsMgl", ProjectArgs.builder()
     *             .description("terraform-alert-example")
     *             .name("terraform-alert-example")
     *             .build());
     * 
     *         var defaultAlert = new Alert("defaultAlert", AlertArgs.builder()
     *             .configuration(AlertConfigurationArgs.builder()
     *                 .type("tpl")
     *                 .version("2")
     *                 .queryLists(                
     *                     AlertConfigurationQueryListArgs.builder()
     *                         .query("* | select *")
     *                         .timeSpanType("Relative")
     *                         .start("-15m")
     *                         .end("now")
     *                         .storeType("log")
     *                         .project(defaultINsMgl.id())
     *                         .store("alert")
     *                         .region("cn-beijing")
     *                         .powerSqlMode("disable")
     *                         .chartTitle("wkb-chart")
     *                         .dashboardId("wkb-dashboard")
     *                         .ui("{}")
     *                         .roleArn("acs:ram::1654218965343050:role/aliyunslsalertmonitorrole")
     *                         .build(),
     *                     AlertConfigurationQueryListArgs.builder()
     *                         .storeType("meta")
     *                         .store("user.rds_ip_whitelist")
     *                         .build(),
     *                     AlertConfigurationQueryListArgs.builder()
     *                         .storeType("meta")
     *                         .store("myexample1")
     *                         .build())
     *                 .groupConfiguration(AlertConfigurationGroupConfigurationArgs.builder()
     *                     .type("no_group")
     *                     .fields(                    
     *                         "a",
     *                         "b")
     *                     .build())
     *                 .joinConfigurations(                
     *                     AlertConfigurationJoinConfigurationArgs.builder()
     *                         .type("no_join")
     *                         .condition("aa")
     *                         .build(),
     *                     AlertConfigurationJoinConfigurationArgs.builder()
     *                         .type("cross_join")
     *                         .condition("qqq")
     *                         .build(),
     *                     AlertConfigurationJoinConfigurationArgs.builder()
     *                         .type("inner_join")
     *                         .condition("fefefe")
     *                         .build())
     *                 .severityConfigurations(AlertConfigurationSeverityConfigurationArgs.builder()
     *                     .severity(6)
     *                     .evalCondition(AlertConfigurationSeverityConfigurationEvalConditionArgs.builder()
     *                         .condition("__count__ > 1")
     *                         .countCondition("cnt > 0")
     *                         .build())
     *                     .build())
     *                 .labels(AlertConfigurationLabelArgs.builder()
     *                     .key("a")
     *                     .value("b")
     *                     .build())
     *                 .annotations(AlertConfigurationAnnotationArgs.builder()
     *                     .key("x")
     *                     .value("y")
     *                     .build())
     *                 .autoAnnotation(true)
     *                 .sendResolved(false)
     *                 .threshold(1)
     *                 .noDataFire(false)
     *                 .sinkEventStore(AlertConfigurationSinkEventStoreArgs.builder()
     *                     .enabled(true)
     *                     .endpoint("cn-shanghai-intranet.log.aliyuncs.com")
     *                     .project("wkb-wangren")
     *                     .eventStore("alert")
     *                     .roleArn("acs:ram::1654218965343050:role/aliyunlogetlrole")
     *                     .build())
     *                 .sinkCms(AlertConfigurationSinkCmsArgs.builder()
     *                     .enabled(false)
     *                     .build())
     *                 .sinkAlerthub(AlertConfigurationSinkAlerthubArgs.builder()
     *                     .enabled(false)
     *                     .build())
     *                 .templateConfiguration(AlertConfigurationTemplateConfigurationArgs.builder()
     *                     .templateId("sls.app.ack.autoscaler.cluster_unhealthy")
     *                     .type("sys")
     *                     .version("1.0")
     *                     .lang("cn")
     *                     .build())
     *                 .conditionConfiguration(AlertConfigurationConditionConfigurationArgs.builder()
     *                     .condition("cnt > 3")
     *                     .countCondition("__count__ < 3")
     *                     .build())
     *                 .policyConfiguration(AlertConfigurationPolicyConfigurationArgs.builder()
     *                     .alertPolicyId("sls.builtin.dynamic")
     *                     .actionPolicyId("wkb-action")
     *                     .repeatInterval("1m")
     *                     .build())
     *                 .dashboard("internal-alert")
     *                 .muteUntil(0)
     *                 .noDataSeverity(6)
     *                 .tags(                
     *                     "wkb",
     *                     "wangren",
     *                     "sls")
     *                 .build())
     *             .alertName(alertName)
     *             .projectName(defaultINsMgl.id())
     *             .schedule(AlertScheduleArgs.builder()
     *                 .type("Cron")
     *                 .runImmdiately(true)
     *                 .timeZone("+0800")
     *                 .delay(10)
     *                 .cronExpression("0/5 * * * *")
     *                 .build())
     *             .displayName("openapi-terraform")
     *             .description("create alert")
     *             .build());
     * 
     *         final var default = SlsFunctions.getAlerts(GetAlertsArgs.builder()
     *             .ids(defaultAlert.id())
     *             .nameRegex(defaultAlert.alertName())
     *             .projectName(defaultINsMgl.id())
     *             .build());
     * 
     *         ctx.export("alicloudSlsAlertExampleId", default_.applyValue(_default_ -> _default_.alerts()[0].id()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetAlertsResult> getAlerts(GetAlertsArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("alicloud:sls/getAlerts:getAlerts", TypeShape.of(GetAlertsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * This data source provides Sls Alert available to the user.[What is Alert](https://next.api.alibabacloud.com/document/Sls/2020-12-30/CreateAlert)
     * 
     * &gt; **NOTE:** Available since v1.250.0.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.alicloud.log.Project;
     * import com.pulumi.alicloud.log.ProjectArgs;
     * import com.pulumi.alicloud.sls.Alert;
     * import com.pulumi.alicloud.sls.AlertArgs;
     * import com.pulumi.alicloud.sls.inputs.AlertConfigurationArgs;
     * import com.pulumi.alicloud.sls.inputs.AlertConfigurationGroupConfigurationArgs;
     * import com.pulumi.alicloud.sls.inputs.AlertConfigurationSinkEventStoreArgs;
     * import com.pulumi.alicloud.sls.inputs.AlertConfigurationSinkCmsArgs;
     * import com.pulumi.alicloud.sls.inputs.AlertConfigurationSinkAlerthubArgs;
     * import com.pulumi.alicloud.sls.inputs.AlertConfigurationTemplateConfigurationArgs;
     * import com.pulumi.alicloud.sls.inputs.AlertConfigurationConditionConfigurationArgs;
     * import com.pulumi.alicloud.sls.inputs.AlertConfigurationPolicyConfigurationArgs;
     * import com.pulumi.alicloud.sls.inputs.AlertScheduleArgs;
     * import com.pulumi.alicloud.sls.SlsFunctions;
     * import com.pulumi.alicloud.sls.inputs.GetAlertsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var config = ctx.config();
     *         final var name = config.get("name").orElse("terraform-example");
     *         final var alertName = config.get("alertName").orElse("openapi-terraform-alert");
     *         final var projectName = config.get("projectName").orElse("terraform-alert-example");
     *         var defaultINsMgl = new Project("defaultINsMgl", ProjectArgs.builder()
     *             .description("terraform-alert-example")
     *             .name("terraform-alert-example")
     *             .build());
     * 
     *         var defaultAlert = new Alert("defaultAlert", AlertArgs.builder()
     *             .configuration(AlertConfigurationArgs.builder()
     *                 .type("tpl")
     *                 .version("2")
     *                 .queryLists(                
     *                     AlertConfigurationQueryListArgs.builder()
     *                         .query("* | select *")
     *                         .timeSpanType("Relative")
     *                         .start("-15m")
     *                         .end("now")
     *                         .storeType("log")
     *                         .project(defaultINsMgl.id())
     *                         .store("alert")
     *                         .region("cn-beijing")
     *                         .powerSqlMode("disable")
     *                         .chartTitle("wkb-chart")
     *                         .dashboardId("wkb-dashboard")
     *                         .ui("{}")
     *                         .roleArn("acs:ram::1654218965343050:role/aliyunslsalertmonitorrole")
     *                         .build(),
     *                     AlertConfigurationQueryListArgs.builder()
     *                         .storeType("meta")
     *                         .store("user.rds_ip_whitelist")
     *                         .build(),
     *                     AlertConfigurationQueryListArgs.builder()
     *                         .storeType("meta")
     *                         .store("myexample1")
     *                         .build())
     *                 .groupConfiguration(AlertConfigurationGroupConfigurationArgs.builder()
     *                     .type("no_group")
     *                     .fields(                    
     *                         "a",
     *                         "b")
     *                     .build())
     *                 .joinConfigurations(                
     *                     AlertConfigurationJoinConfigurationArgs.builder()
     *                         .type("no_join")
     *                         .condition("aa")
     *                         .build(),
     *                     AlertConfigurationJoinConfigurationArgs.builder()
     *                         .type("cross_join")
     *                         .condition("qqq")
     *                         .build(),
     *                     AlertConfigurationJoinConfigurationArgs.builder()
     *                         .type("inner_join")
     *                         .condition("fefefe")
     *                         .build())
     *                 .severityConfigurations(AlertConfigurationSeverityConfigurationArgs.builder()
     *                     .severity(6)
     *                     .evalCondition(AlertConfigurationSeverityConfigurationEvalConditionArgs.builder()
     *                         .condition("__count__ > 1")
     *                         .countCondition("cnt > 0")
     *                         .build())
     *                     .build())
     *                 .labels(AlertConfigurationLabelArgs.builder()
     *                     .key("a")
     *                     .value("b")
     *                     .build())
     *                 .annotations(AlertConfigurationAnnotationArgs.builder()
     *                     .key("x")
     *                     .value("y")
     *                     .build())
     *                 .autoAnnotation(true)
     *                 .sendResolved(false)
     *                 .threshold(1)
     *                 .noDataFire(false)
     *                 .sinkEventStore(AlertConfigurationSinkEventStoreArgs.builder()
     *                     .enabled(true)
     *                     .endpoint("cn-shanghai-intranet.log.aliyuncs.com")
     *                     .project("wkb-wangren")
     *                     .eventStore("alert")
     *                     .roleArn("acs:ram::1654218965343050:role/aliyunlogetlrole")
     *                     .build())
     *                 .sinkCms(AlertConfigurationSinkCmsArgs.builder()
     *                     .enabled(false)
     *                     .build())
     *                 .sinkAlerthub(AlertConfigurationSinkAlerthubArgs.builder()
     *                     .enabled(false)
     *                     .build())
     *                 .templateConfiguration(AlertConfigurationTemplateConfigurationArgs.builder()
     *                     .templateId("sls.app.ack.autoscaler.cluster_unhealthy")
     *                     .type("sys")
     *                     .version("1.0")
     *                     .lang("cn")
     *                     .build())
     *                 .conditionConfiguration(AlertConfigurationConditionConfigurationArgs.builder()
     *                     .condition("cnt > 3")
     *                     .countCondition("__count__ < 3")
     *                     .build())
     *                 .policyConfiguration(AlertConfigurationPolicyConfigurationArgs.builder()
     *                     .alertPolicyId("sls.builtin.dynamic")
     *                     .actionPolicyId("wkb-action")
     *                     .repeatInterval("1m")
     *                     .build())
     *                 .dashboard("internal-alert")
     *                 .muteUntil(0)
     *                 .noDataSeverity(6)
     *                 .tags(                
     *                     "wkb",
     *                     "wangren",
     *                     "sls")
     *                 .build())
     *             .alertName(alertName)
     *             .projectName(defaultINsMgl.id())
     *             .schedule(AlertScheduleArgs.builder()
     *                 .type("Cron")
     *                 .runImmdiately(true)
     *                 .timeZone("+0800")
     *                 .delay(10)
     *                 .cronExpression("0/5 * * * *")
     *                 .build())
     *             .displayName("openapi-terraform")
     *             .description("create alert")
     *             .build());
     * 
     *         final var default = SlsFunctions.getAlerts(GetAlertsArgs.builder()
     *             .ids(defaultAlert.id())
     *             .nameRegex(defaultAlert.alertName())
     *             .projectName(defaultINsMgl.id())
     *             .build());
     * 
     *         ctx.export("alicloudSlsAlertExampleId", default_.applyValue(_default_ -> _default_.alerts()[0].id()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetAlertsResult> getAlertsPlain(GetAlertsPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("alicloud:sls/getAlerts:getAlerts", TypeShape.of(GetAlertsResult.class), args, Utilities.withVersion(options));
    }
}
