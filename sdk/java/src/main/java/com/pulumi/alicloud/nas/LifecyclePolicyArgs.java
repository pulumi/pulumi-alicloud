// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.nas;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class LifecyclePolicyArgs extends com.pulumi.resources.ResourceArgs {

    public static final LifecyclePolicyArgs Empty = new LifecyclePolicyArgs();

    /**
     * The ID of the file system.
     * 
     */
    @Import(name="fileSystemId", required=true)
    private Output<String> fileSystemId;

    /**
     * @return The ID of the file system.
     * 
     */
    public Output<String> fileSystemId() {
        return this.fileSystemId;
    }

    /**
     * The name of the lifecycle management policy.
     * 
     */
    @Import(name="lifecyclePolicyName", required=true)
    private Output<String> lifecyclePolicyName;

    /**
     * @return The name of the lifecycle management policy.
     * 
     */
    public Output<String> lifecyclePolicyName() {
        return this.lifecyclePolicyName;
    }

    /**
     * The rules in the lifecycle management policy. Valid values: `DEFAULT_ATIME_14`, `DEFAULT_ATIME_30`, `DEFAULT_ATIME_60`, `DEFAULT_ATIME_90`.
     * 
     */
    @Import(name="lifecycleRuleName", required=true)
    private Output<String> lifecycleRuleName;

    /**
     * @return The rules in the lifecycle management policy. Valid values: `DEFAULT_ATIME_14`, `DEFAULT_ATIME_30`, `DEFAULT_ATIME_60`, `DEFAULT_ATIME_90`.
     * 
     */
    public Output<String> lifecycleRuleName() {
        return this.lifecycleRuleName;
    }

    /**
     * The absolute path of the directory for which the lifecycle management policy is configured. Set a maximum of `10` path. The path value must be prefixed by a forward slash (/) and must be an existing path in the mount target.
     * 
     */
    @Import(name="paths", required=true)
    private Output<List<String>> paths;

    /**
     * @return The absolute path of the directory for which the lifecycle management policy is configured. Set a maximum of `10` path. The path value must be prefixed by a forward slash (/) and must be an existing path in the mount target.
     * 
     */
    public Output<List<String>> paths() {
        return this.paths;
    }

    /**
     * The storage type of the data that is dumped to the IA storage medium. Valid values: `InfrequentAccess`.
     * 
     */
    @Import(name="storageType", required=true)
    private Output<String> storageType;

    /**
     * @return The storage type of the data that is dumped to the IA storage medium. Valid values: `InfrequentAccess`.
     * 
     */
    public Output<String> storageType() {
        return this.storageType;
    }

    private LifecyclePolicyArgs() {}

    private LifecyclePolicyArgs(LifecyclePolicyArgs $) {
        this.fileSystemId = $.fileSystemId;
        this.lifecyclePolicyName = $.lifecyclePolicyName;
        this.lifecycleRuleName = $.lifecycleRuleName;
        this.paths = $.paths;
        this.storageType = $.storageType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LifecyclePolicyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LifecyclePolicyArgs $;

        public Builder() {
            $ = new LifecyclePolicyArgs();
        }

        public Builder(LifecyclePolicyArgs defaults) {
            $ = new LifecyclePolicyArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param fileSystemId The ID of the file system.
         * 
         * @return builder
         * 
         */
        public Builder fileSystemId(Output<String> fileSystemId) {
            $.fileSystemId = fileSystemId;
            return this;
        }

        /**
         * @param fileSystemId The ID of the file system.
         * 
         * @return builder
         * 
         */
        public Builder fileSystemId(String fileSystemId) {
            return fileSystemId(Output.of(fileSystemId));
        }

        /**
         * @param lifecyclePolicyName The name of the lifecycle management policy.
         * 
         * @return builder
         * 
         */
        public Builder lifecyclePolicyName(Output<String> lifecyclePolicyName) {
            $.lifecyclePolicyName = lifecyclePolicyName;
            return this;
        }

        /**
         * @param lifecyclePolicyName The name of the lifecycle management policy.
         * 
         * @return builder
         * 
         */
        public Builder lifecyclePolicyName(String lifecyclePolicyName) {
            return lifecyclePolicyName(Output.of(lifecyclePolicyName));
        }

        /**
         * @param lifecycleRuleName The rules in the lifecycle management policy. Valid values: `DEFAULT_ATIME_14`, `DEFAULT_ATIME_30`, `DEFAULT_ATIME_60`, `DEFAULT_ATIME_90`.
         * 
         * @return builder
         * 
         */
        public Builder lifecycleRuleName(Output<String> lifecycleRuleName) {
            $.lifecycleRuleName = lifecycleRuleName;
            return this;
        }

        /**
         * @param lifecycleRuleName The rules in the lifecycle management policy. Valid values: `DEFAULT_ATIME_14`, `DEFAULT_ATIME_30`, `DEFAULT_ATIME_60`, `DEFAULT_ATIME_90`.
         * 
         * @return builder
         * 
         */
        public Builder lifecycleRuleName(String lifecycleRuleName) {
            return lifecycleRuleName(Output.of(lifecycleRuleName));
        }

        /**
         * @param paths The absolute path of the directory for which the lifecycle management policy is configured. Set a maximum of `10` path. The path value must be prefixed by a forward slash (/) and must be an existing path in the mount target.
         * 
         * @return builder
         * 
         */
        public Builder paths(Output<List<String>> paths) {
            $.paths = paths;
            return this;
        }

        /**
         * @param paths The absolute path of the directory for which the lifecycle management policy is configured. Set a maximum of `10` path. The path value must be prefixed by a forward slash (/) and must be an existing path in the mount target.
         * 
         * @return builder
         * 
         */
        public Builder paths(List<String> paths) {
            return paths(Output.of(paths));
        }

        /**
         * @param paths The absolute path of the directory for which the lifecycle management policy is configured. Set a maximum of `10` path. The path value must be prefixed by a forward slash (/) and must be an existing path in the mount target.
         * 
         * @return builder
         * 
         */
        public Builder paths(String... paths) {
            return paths(List.of(paths));
        }

        /**
         * @param storageType The storage type of the data that is dumped to the IA storage medium. Valid values: `InfrequentAccess`.
         * 
         * @return builder
         * 
         */
        public Builder storageType(Output<String> storageType) {
            $.storageType = storageType;
            return this;
        }

        /**
         * @param storageType The storage type of the data that is dumped to the IA storage medium. Valid values: `InfrequentAccess`.
         * 
         * @return builder
         * 
         */
        public Builder storageType(String storageType) {
            return storageType(Output.of(storageType));
        }

        public LifecyclePolicyArgs build() {
            if ($.fileSystemId == null) {
                throw new MissingRequiredPropertyException("LifecyclePolicyArgs", "fileSystemId");
            }
            if ($.lifecyclePolicyName == null) {
                throw new MissingRequiredPropertyException("LifecyclePolicyArgs", "lifecyclePolicyName");
            }
            if ($.lifecycleRuleName == null) {
                throw new MissingRequiredPropertyException("LifecyclePolicyArgs", "lifecycleRuleName");
            }
            if ($.paths == null) {
                throw new MissingRequiredPropertyException("LifecyclePolicyArgs", "paths");
            }
            if ($.storageType == null) {
                throw new MissingRequiredPropertyException("LifecyclePolicyArgs", "storageType");
            }
            return $;
        }
    }

}
