// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.arms.inputs;

import com.pulumi.alicloud.arms.inputs.SyntheticTaskMonitorConfApiHttpArgs;
import com.pulumi.alicloud.arms.inputs.SyntheticTaskMonitorConfFileDownloadArgs;
import com.pulumi.alicloud.arms.inputs.SyntheticTaskMonitorConfNetDnsArgs;
import com.pulumi.alicloud.arms.inputs.SyntheticTaskMonitorConfNetIcmpArgs;
import com.pulumi.alicloud.arms.inputs.SyntheticTaskMonitorConfNetTcpArgs;
import com.pulumi.alicloud.arms.inputs.SyntheticTaskMonitorConfStreamArgs;
import com.pulumi.alicloud.arms.inputs.SyntheticTaskMonitorConfWebsiteArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SyntheticTaskMonitorConfArgs extends com.pulumi.resources.ResourceArgs {

    public static final SyntheticTaskMonitorConfArgs Empty = new SyntheticTaskMonitorConfArgs();

    /**
     * HTTP(S) task configuration information. See `api_http` below.
     * 
     */
    @Import(name="apiHttp")
    private @Nullable Output<SyntheticTaskMonitorConfApiHttpArgs> apiHttp;

    /**
     * @return HTTP(S) task configuration information. See `api_http` below.
     * 
     */
    public Optional<Output<SyntheticTaskMonitorConfApiHttpArgs>> apiHttp() {
        return Optional.ofNullable(this.apiHttp);
    }

    /**
     * File download type task configuration. See `file_download` below.
     * 
     */
    @Import(name="fileDownload")
    private @Nullable Output<SyntheticTaskMonitorConfFileDownloadArgs> fileDownload;

    /**
     * @return File download type task configuration. See `file_download` below.
     * 
     */
    public Optional<Output<SyntheticTaskMonitorConfFileDownloadArgs>> fileDownload() {
        return Optional.ofNullable(this.fileDownload);
    }

    /**
     * The configuration parameters of the DNS dial test. Required when TaskType is 3. See `net_dns` below.
     * 
     */
    @Import(name="netDns")
    private @Nullable Output<SyntheticTaskMonitorConfNetDnsArgs> netDns;

    /**
     * @return The configuration parameters of the DNS dial test. Required when TaskType is 3. See `net_dns` below.
     * 
     */
    public Optional<Output<SyntheticTaskMonitorConfNetDnsArgs>> netDns() {
        return Optional.ofNullable(this.netDns);
    }

    /**
     * ICMP dialing configuration parameters. Required when TaskType is 1. See `net_icmp` below.
     * 
     */
    @Import(name="netIcmp")
    private @Nullable Output<SyntheticTaskMonitorConfNetIcmpArgs> netIcmp;

    /**
     * @return ICMP dialing configuration parameters. Required when TaskType is 1. See `net_icmp` below.
     * 
     */
    public Optional<Output<SyntheticTaskMonitorConfNetIcmpArgs>> netIcmp() {
        return Optional.ofNullable(this.netIcmp);
    }

    /**
     * The configuration parameters of TCP dial test. Required when TaskType is 2. See `net_tcp` below.
     * 
     */
    @Import(name="netTcp")
    private @Nullable Output<SyntheticTaskMonitorConfNetTcpArgs> netTcp;

    /**
     * @return The configuration parameters of TCP dial test. Required when TaskType is 2. See `net_tcp` below.
     * 
     */
    public Optional<Output<SyntheticTaskMonitorConfNetTcpArgs>> netTcp() {
        return Optional.ofNullable(this.netTcp);
    }

    /**
     * Streaming Media Dial Test Configuration. See `stream` below.
     * 
     */
    @Import(name="stream")
    private @Nullable Output<SyntheticTaskMonitorConfStreamArgs> stream;

    /**
     * @return Streaming Media Dial Test Configuration. See `stream` below.
     * 
     */
    public Optional<Output<SyntheticTaskMonitorConfStreamArgs>> stream() {
        return Optional.ofNullable(this.stream);
    }

    /**
     * Website speed measurement type task configuration. See `website` below.
     * 
     */
    @Import(name="website")
    private @Nullable Output<SyntheticTaskMonitorConfWebsiteArgs> website;

    /**
     * @return Website speed measurement type task configuration. See `website` below.
     * 
     */
    public Optional<Output<SyntheticTaskMonitorConfWebsiteArgs>> website() {
        return Optional.ofNullable(this.website);
    }

    private SyntheticTaskMonitorConfArgs() {}

    private SyntheticTaskMonitorConfArgs(SyntheticTaskMonitorConfArgs $) {
        this.apiHttp = $.apiHttp;
        this.fileDownload = $.fileDownload;
        this.netDns = $.netDns;
        this.netIcmp = $.netIcmp;
        this.netTcp = $.netTcp;
        this.stream = $.stream;
        this.website = $.website;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SyntheticTaskMonitorConfArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SyntheticTaskMonitorConfArgs $;

        public Builder() {
            $ = new SyntheticTaskMonitorConfArgs();
        }

        public Builder(SyntheticTaskMonitorConfArgs defaults) {
            $ = new SyntheticTaskMonitorConfArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param apiHttp HTTP(S) task configuration information. See `api_http` below.
         * 
         * @return builder
         * 
         */
        public Builder apiHttp(@Nullable Output<SyntheticTaskMonitorConfApiHttpArgs> apiHttp) {
            $.apiHttp = apiHttp;
            return this;
        }

        /**
         * @param apiHttp HTTP(S) task configuration information. See `api_http` below.
         * 
         * @return builder
         * 
         */
        public Builder apiHttp(SyntheticTaskMonitorConfApiHttpArgs apiHttp) {
            return apiHttp(Output.of(apiHttp));
        }

        /**
         * @param fileDownload File download type task configuration. See `file_download` below.
         * 
         * @return builder
         * 
         */
        public Builder fileDownload(@Nullable Output<SyntheticTaskMonitorConfFileDownloadArgs> fileDownload) {
            $.fileDownload = fileDownload;
            return this;
        }

        /**
         * @param fileDownload File download type task configuration. See `file_download` below.
         * 
         * @return builder
         * 
         */
        public Builder fileDownload(SyntheticTaskMonitorConfFileDownloadArgs fileDownload) {
            return fileDownload(Output.of(fileDownload));
        }

        /**
         * @param netDns The configuration parameters of the DNS dial test. Required when TaskType is 3. See `net_dns` below.
         * 
         * @return builder
         * 
         */
        public Builder netDns(@Nullable Output<SyntheticTaskMonitorConfNetDnsArgs> netDns) {
            $.netDns = netDns;
            return this;
        }

        /**
         * @param netDns The configuration parameters of the DNS dial test. Required when TaskType is 3. See `net_dns` below.
         * 
         * @return builder
         * 
         */
        public Builder netDns(SyntheticTaskMonitorConfNetDnsArgs netDns) {
            return netDns(Output.of(netDns));
        }

        /**
         * @param netIcmp ICMP dialing configuration parameters. Required when TaskType is 1. See `net_icmp` below.
         * 
         * @return builder
         * 
         */
        public Builder netIcmp(@Nullable Output<SyntheticTaskMonitorConfNetIcmpArgs> netIcmp) {
            $.netIcmp = netIcmp;
            return this;
        }

        /**
         * @param netIcmp ICMP dialing configuration parameters. Required when TaskType is 1. See `net_icmp` below.
         * 
         * @return builder
         * 
         */
        public Builder netIcmp(SyntheticTaskMonitorConfNetIcmpArgs netIcmp) {
            return netIcmp(Output.of(netIcmp));
        }

        /**
         * @param netTcp The configuration parameters of TCP dial test. Required when TaskType is 2. See `net_tcp` below.
         * 
         * @return builder
         * 
         */
        public Builder netTcp(@Nullable Output<SyntheticTaskMonitorConfNetTcpArgs> netTcp) {
            $.netTcp = netTcp;
            return this;
        }

        /**
         * @param netTcp The configuration parameters of TCP dial test. Required when TaskType is 2. See `net_tcp` below.
         * 
         * @return builder
         * 
         */
        public Builder netTcp(SyntheticTaskMonitorConfNetTcpArgs netTcp) {
            return netTcp(Output.of(netTcp));
        }

        /**
         * @param stream Streaming Media Dial Test Configuration. See `stream` below.
         * 
         * @return builder
         * 
         */
        public Builder stream(@Nullable Output<SyntheticTaskMonitorConfStreamArgs> stream) {
            $.stream = stream;
            return this;
        }

        /**
         * @param stream Streaming Media Dial Test Configuration. See `stream` below.
         * 
         * @return builder
         * 
         */
        public Builder stream(SyntheticTaskMonitorConfStreamArgs stream) {
            return stream(Output.of(stream));
        }

        /**
         * @param website Website speed measurement type task configuration. See `website` below.
         * 
         * @return builder
         * 
         */
        public Builder website(@Nullable Output<SyntheticTaskMonitorConfWebsiteArgs> website) {
            $.website = website;
            return this;
        }

        /**
         * @param website Website speed measurement type task configuration. See `website` below.
         * 
         * @return builder
         * 
         */
        public Builder website(SyntheticTaskMonitorConfWebsiteArgs website) {
            return website(Output.of(website));
        }

        public SyntheticTaskMonitorConfArgs build() {
            return $;
        }
    }

}
