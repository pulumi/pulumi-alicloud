// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.vpc.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetNatGatewaysGateway {
    /**
     * @return The state of the NAT gateway.
     * 
     */
    private String businessStatus;
    /**
     * @return Indicates whether deletion protection is enabled.
     * 
     */
    private Boolean deletionProtection;
    /**
     * @return The description of the NAT gateway.
     * 
     */
    private String description;
    /**
     * @return Indicates whether the traffic monitoring feature is enabled.
     * 
     */
    private Boolean ecsMetricEnabled;
    /**
     * @return The time when the NAT gateway expires.
     * 
     */
    private String expiredTime;
    /**
     * @return The ID of the DNAT table.
     * 
     */
    private List<String> forwardTableIds;
    /**
     * @return The ID of the NAT gateway.
     * 
     */
    private String id;
    /**
     * @return The metering method of the NAT gateway.
     * 
     */
    private String internetChargeType;
    /**
     * @return The ip address of the bind eip.
     * 
     */
    private List<String> ipLists;
    /**
     * @return Name of the NAT gateway.
     * 
     */
    private String name;
    /**
     * @return The ID of the NAT gateway.
     * 
     */
    private String natGatewayId;
    /**
     * @return The name of NAT gateway.
     * 
     */
    private String natGatewayName;
    /**
     * @return The nat type of NAT gateway. Valid values `Enhanced` and `Normal`.
     * 
     */
    private String natType;
    /**
     * @return (Available in 1.137.0+) Indicates the type of the created NAT gateway. Valid values `internet` and `intranet`.
     * 
     */
    private String networkType;
    /**
     * @return The payment type of NAT gateway. Valid values `PayAsYouGo` and `Subscription`.
     * 
     */
    private String paymentType;
    /**
     * @return The resource group id of NAT gateway.
     * 
     */
    private String resourceGroupId;
    /**
     * @return The ID of the SNAT table that is associated with the NAT gateway.
     * 
     */
    private List<String> snatTableIds;
    /**
     * @return The specification of the NAT gateway.
     * 
     */
    private String spec;
    /**
     * @return The specification of NAT gateway. Valid values `Middle`, `Large`, `Small` and `XLarge.1`. Default value is `Small`.
     * 
     */
    private String specification;
    /**
     * @return The status of NAT gateway. Valid values `Available`, `Converting`, `Creating`, `Deleting` and `Modifying`.
     * 
     */
    private String status;
    /**
     * @return The tags of NAT gateway.
     * 
     */
    private Map<String,Object> tags;
    /**
     * @return The ID of the VPC.
     * 
     */
    private String vpcId;
    /**
     * @return The ID of the vSwitch to which the NAT gateway belongs.
     * 
     */
    private String vswitchId;

    private GetNatGatewaysGateway() {}
    /**
     * @return The state of the NAT gateway.
     * 
     */
    public String businessStatus() {
        return this.businessStatus;
    }
    /**
     * @return Indicates whether deletion protection is enabled.
     * 
     */
    public Boolean deletionProtection() {
        return this.deletionProtection;
    }
    /**
     * @return The description of the NAT gateway.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return Indicates whether the traffic monitoring feature is enabled.
     * 
     */
    public Boolean ecsMetricEnabled() {
        return this.ecsMetricEnabled;
    }
    /**
     * @return The time when the NAT gateway expires.
     * 
     */
    public String expiredTime() {
        return this.expiredTime;
    }
    /**
     * @return The ID of the DNAT table.
     * 
     */
    public List<String> forwardTableIds() {
        return this.forwardTableIds;
    }
    /**
     * @return The ID of the NAT gateway.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The metering method of the NAT gateway.
     * 
     */
    public String internetChargeType() {
        return this.internetChargeType;
    }
    /**
     * @return The ip address of the bind eip.
     * 
     */
    public List<String> ipLists() {
        return this.ipLists;
    }
    /**
     * @return Name of the NAT gateway.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The ID of the NAT gateway.
     * 
     */
    public String natGatewayId() {
        return this.natGatewayId;
    }
    /**
     * @return The name of NAT gateway.
     * 
     */
    public String natGatewayName() {
        return this.natGatewayName;
    }
    /**
     * @return The nat type of NAT gateway. Valid values `Enhanced` and `Normal`.
     * 
     */
    public String natType() {
        return this.natType;
    }
    /**
     * @return (Available in 1.137.0+) Indicates the type of the created NAT gateway. Valid values `internet` and `intranet`.
     * 
     */
    public String networkType() {
        return this.networkType;
    }
    /**
     * @return The payment type of NAT gateway. Valid values `PayAsYouGo` and `Subscription`.
     * 
     */
    public String paymentType() {
        return this.paymentType;
    }
    /**
     * @return The resource group id of NAT gateway.
     * 
     */
    public String resourceGroupId() {
        return this.resourceGroupId;
    }
    /**
     * @return The ID of the SNAT table that is associated with the NAT gateway.
     * 
     */
    public List<String> snatTableIds() {
        return this.snatTableIds;
    }
    /**
     * @return The specification of the NAT gateway.
     * 
     */
    public String spec() {
        return this.spec;
    }
    /**
     * @return The specification of NAT gateway. Valid values `Middle`, `Large`, `Small` and `XLarge.1`. Default value is `Small`.
     * 
     */
    public String specification() {
        return this.specification;
    }
    /**
     * @return The status of NAT gateway. Valid values `Available`, `Converting`, `Creating`, `Deleting` and `Modifying`.
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return The tags of NAT gateway.
     * 
     */
    public Map<String,Object> tags() {
        return this.tags;
    }
    /**
     * @return The ID of the VPC.
     * 
     */
    public String vpcId() {
        return this.vpcId;
    }
    /**
     * @return The ID of the vSwitch to which the NAT gateway belongs.
     * 
     */
    public String vswitchId() {
        return this.vswitchId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetNatGatewaysGateway defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String businessStatus;
        private Boolean deletionProtection;
        private String description;
        private Boolean ecsMetricEnabled;
        private String expiredTime;
        private List<String> forwardTableIds;
        private String id;
        private String internetChargeType;
        private List<String> ipLists;
        private String name;
        private String natGatewayId;
        private String natGatewayName;
        private String natType;
        private String networkType;
        private String paymentType;
        private String resourceGroupId;
        private List<String> snatTableIds;
        private String spec;
        private String specification;
        private String status;
        private Map<String,Object> tags;
        private String vpcId;
        private String vswitchId;
        public Builder() {}
        public Builder(GetNatGatewaysGateway defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.businessStatus = defaults.businessStatus;
    	      this.deletionProtection = defaults.deletionProtection;
    	      this.description = defaults.description;
    	      this.ecsMetricEnabled = defaults.ecsMetricEnabled;
    	      this.expiredTime = defaults.expiredTime;
    	      this.forwardTableIds = defaults.forwardTableIds;
    	      this.id = defaults.id;
    	      this.internetChargeType = defaults.internetChargeType;
    	      this.ipLists = defaults.ipLists;
    	      this.name = defaults.name;
    	      this.natGatewayId = defaults.natGatewayId;
    	      this.natGatewayName = defaults.natGatewayName;
    	      this.natType = defaults.natType;
    	      this.networkType = defaults.networkType;
    	      this.paymentType = defaults.paymentType;
    	      this.resourceGroupId = defaults.resourceGroupId;
    	      this.snatTableIds = defaults.snatTableIds;
    	      this.spec = defaults.spec;
    	      this.specification = defaults.specification;
    	      this.status = defaults.status;
    	      this.tags = defaults.tags;
    	      this.vpcId = defaults.vpcId;
    	      this.vswitchId = defaults.vswitchId;
        }

        @CustomType.Setter
        public Builder businessStatus(String businessStatus) {
            this.businessStatus = Objects.requireNonNull(businessStatus);
            return this;
        }
        @CustomType.Setter
        public Builder deletionProtection(Boolean deletionProtection) {
            this.deletionProtection = Objects.requireNonNull(deletionProtection);
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }
        @CustomType.Setter
        public Builder ecsMetricEnabled(Boolean ecsMetricEnabled) {
            this.ecsMetricEnabled = Objects.requireNonNull(ecsMetricEnabled);
            return this;
        }
        @CustomType.Setter
        public Builder expiredTime(String expiredTime) {
            this.expiredTime = Objects.requireNonNull(expiredTime);
            return this;
        }
        @CustomType.Setter
        public Builder forwardTableIds(List<String> forwardTableIds) {
            this.forwardTableIds = Objects.requireNonNull(forwardTableIds);
            return this;
        }
        public Builder forwardTableIds(String... forwardTableIds) {
            return forwardTableIds(List.of(forwardTableIds));
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder internetChargeType(String internetChargeType) {
            this.internetChargeType = Objects.requireNonNull(internetChargeType);
            return this;
        }
        @CustomType.Setter
        public Builder ipLists(List<String> ipLists) {
            this.ipLists = Objects.requireNonNull(ipLists);
            return this;
        }
        public Builder ipLists(String... ipLists) {
            return ipLists(List.of(ipLists));
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder natGatewayId(String natGatewayId) {
            this.natGatewayId = Objects.requireNonNull(natGatewayId);
            return this;
        }
        @CustomType.Setter
        public Builder natGatewayName(String natGatewayName) {
            this.natGatewayName = Objects.requireNonNull(natGatewayName);
            return this;
        }
        @CustomType.Setter
        public Builder natType(String natType) {
            this.natType = Objects.requireNonNull(natType);
            return this;
        }
        @CustomType.Setter
        public Builder networkType(String networkType) {
            this.networkType = Objects.requireNonNull(networkType);
            return this;
        }
        @CustomType.Setter
        public Builder paymentType(String paymentType) {
            this.paymentType = Objects.requireNonNull(paymentType);
            return this;
        }
        @CustomType.Setter
        public Builder resourceGroupId(String resourceGroupId) {
            this.resourceGroupId = Objects.requireNonNull(resourceGroupId);
            return this;
        }
        @CustomType.Setter
        public Builder snatTableIds(List<String> snatTableIds) {
            this.snatTableIds = Objects.requireNonNull(snatTableIds);
            return this;
        }
        public Builder snatTableIds(String... snatTableIds) {
            return snatTableIds(List.of(snatTableIds));
        }
        @CustomType.Setter
        public Builder spec(String spec) {
            this.spec = Objects.requireNonNull(spec);
            return this;
        }
        @CustomType.Setter
        public Builder specification(String specification) {
            this.specification = Objects.requireNonNull(specification);
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            this.status = Objects.requireNonNull(status);
            return this;
        }
        @CustomType.Setter
        public Builder tags(Map<String,Object> tags) {
            this.tags = Objects.requireNonNull(tags);
            return this;
        }
        @CustomType.Setter
        public Builder vpcId(String vpcId) {
            this.vpcId = Objects.requireNonNull(vpcId);
            return this;
        }
        @CustomType.Setter
        public Builder vswitchId(String vswitchId) {
            this.vswitchId = Objects.requireNonNull(vswitchId);
            return this;
        }
        public GetNatGatewaysGateway build() {
            final var o = new GetNatGatewaysGateway();
            o.businessStatus = businessStatus;
            o.deletionProtection = deletionProtection;
            o.description = description;
            o.ecsMetricEnabled = ecsMetricEnabled;
            o.expiredTime = expiredTime;
            o.forwardTableIds = forwardTableIds;
            o.id = id;
            o.internetChargeType = internetChargeType;
            o.ipLists = ipLists;
            o.name = name;
            o.natGatewayId = natGatewayId;
            o.natGatewayName = natGatewayName;
            o.natType = natType;
            o.networkType = networkType;
            o.paymentType = paymentType;
            o.resourceGroupId = resourceGroupId;
            o.snatTableIds = snatTableIds;
            o.spec = spec;
            o.specification = specification;
            o.status = status;
            o.tags = tags;
            o.vpcId = vpcId;
            o.vswitchId = vswitchId;
            return o;
        }
    }
}
