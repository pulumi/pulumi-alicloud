// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.wafv3.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DefenseRuleConfigConditionArgs extends com.pulumi.resources.ResourceArgs {

    public static final DefenseRuleConfigConditionArgs Empty = new DefenseRuleConfigConditionArgs();

    /**
     * Match field. Valid values: URL, URLPath, IP, Referer, User-Agent, Params, Cookie, Content-Type, Content-Length, X-Forwarded-For, Post-Body, Http-Method, Header, Host, HttpCode, and SensitiveInfo.
     * 
     * &gt; **NOTE:**  Support for matching fields is based on the display in the WAF console. HttpCode and SensitiveInfo are the matching fields supported by the information leakage prevention rule (dlp).
     * 
     */
    @Import(name="key")
    private @Nullable Output<String> key;

    /**
     * @return Match field. Valid values: URL, URLPath, IP, Referer, User-Agent, Params, Cookie, Content-Type, Content-Length, X-Forwarded-For, Post-Body, Http-Method, Header, Host, HttpCode, and SensitiveInfo.
     * 
     * &gt; **NOTE:**  Support for matching fields is based on the display in the WAF console. HttpCode and SensitiveInfo are the matching fields supported by the information leakage prevention rule (dlp).
     * 
     */
    public Optional<Output<String>> key() {
        return Optional.ofNullable(this.key);
    }

    /**
     * Logical character. Value:
     * - not-contain: does not contain.
     * - contain: Indicates to contain.
     * - none: It does not exist.
     * - ne: means not equal.
     * - eq: means equal.
     * - lt: indicates that the value is less.
     * - gt: indicates that the value is greater.
     * - len-lt: indicates that the length is less.
     * - len-eq: indicates that the length is equal.
     * - len-gt: indicates that the length is greater.
     * - not-match: indicates a mismatch.
     * - match-one: means equal to one of the multiple values.
     * - all-not-match: means not equal to any value.
     * - all-not-contain: does not contain any value.
     * - contain-one: Indicates that one of the multiple values is contained.
     * - not-regex: Indicates a regular mismatch.
     * - regex: Indicates a regular match.
     * - all-not-regex: indicates that the regular expressions do not match.
     * - regex-one: Represents a regular match for one of them.
     * - prefix-match: Indicates a prefix match.
     * - suffix-match: indicates a suffix match.
     * - mpty: Indicates that the content is empty.
     * - exists: Indicates that the field exists.
     * - inl: indicates in the list.
     * 
     * &gt; **NOTE:**  Not all logical characters (opvalues) can be configured for the match field (key) of each custom rule. For the logical characters supported by different matching fields, please refer to the association relationship between the matching fields and the logical characters in the custom rules of the WAF console.
     * 
     */
    @Import(name="opValue")
    private @Nullable Output<String> opValue;

    /**
     * @return Logical character. Value:
     * - not-contain: does not contain.
     * - contain: Indicates to contain.
     * - none: It does not exist.
     * - ne: means not equal.
     * - eq: means equal.
     * - lt: indicates that the value is less.
     * - gt: indicates that the value is greater.
     * - len-lt: indicates that the length is less.
     * - len-eq: indicates that the length is equal.
     * - len-gt: indicates that the length is greater.
     * - not-match: indicates a mismatch.
     * - match-one: means equal to one of the multiple values.
     * - all-not-match: means not equal to any value.
     * - all-not-contain: does not contain any value.
     * - contain-one: Indicates that one of the multiple values is contained.
     * - not-regex: Indicates a regular mismatch.
     * - regex: Indicates a regular match.
     * - all-not-regex: indicates that the regular expressions do not match.
     * - regex-one: Represents a regular match for one of them.
     * - prefix-match: Indicates a prefix match.
     * - suffix-match: indicates a suffix match.
     * - mpty: Indicates that the content is empty.
     * - exists: Indicates that the field exists.
     * - inl: indicates in the list.
     * 
     * &gt; **NOTE:**  Not all logical characters (opvalues) can be configured for the match field (key) of each custom rule. For the logical characters supported by different matching fields, please refer to the association relationship between the matching fields and the logical characters in the custom rules of the WAF console.
     * 
     */
    public Optional<Output<String>> opValue() {
        return Optional.ofNullable(this.opValue);
    }

    /**
     * The characteristics of the statistical object. When the Target parameter is set to cookie, header, or queryarg, you must specify the corresponding information in the Subkey parameter.
     * 
     */
    @Import(name="subKey")
    private @Nullable Output<String> subKey;

    /**
     * @return The characteristics of the statistical object. When the Target parameter is set to cookie, header, or queryarg, you must specify the corresponding information in the Subkey parameter.
     * 
     */
    public Optional<Output<String>> subKey() {
        return Optional.ofNullable(this.subKey);
    }

    /**
     * Match the content and fill in the corresponding content as needed.
     * 
     * &gt; **NOTE:**  The value range of the logical (opValue) and matching content (values) parameters in the matching condition parameter is related to the specified matching field (key).
     * 
     */
    @Import(name="values")
    private @Nullable Output<String> values;

    /**
     * @return Match the content and fill in the corresponding content as needed.
     * 
     * &gt; **NOTE:**  The value range of the logical (opValue) and matching content (values) parameters in the matching condition parameter is related to the specified matching field (key).
     * 
     */
    public Optional<Output<String>> values() {
        return Optional.ofNullable(this.values);
    }

    private DefenseRuleConfigConditionArgs() {}

    private DefenseRuleConfigConditionArgs(DefenseRuleConfigConditionArgs $) {
        this.key = $.key;
        this.opValue = $.opValue;
        this.subKey = $.subKey;
        this.values = $.values;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DefenseRuleConfigConditionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DefenseRuleConfigConditionArgs $;

        public Builder() {
            $ = new DefenseRuleConfigConditionArgs();
        }

        public Builder(DefenseRuleConfigConditionArgs defaults) {
            $ = new DefenseRuleConfigConditionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param key Match field. Valid values: URL, URLPath, IP, Referer, User-Agent, Params, Cookie, Content-Type, Content-Length, X-Forwarded-For, Post-Body, Http-Method, Header, Host, HttpCode, and SensitiveInfo.
         * 
         * &gt; **NOTE:**  Support for matching fields is based on the display in the WAF console. HttpCode and SensitiveInfo are the matching fields supported by the information leakage prevention rule (dlp).
         * 
         * @return builder
         * 
         */
        public Builder key(@Nullable Output<String> key) {
            $.key = key;
            return this;
        }

        /**
         * @param key Match field. Valid values: URL, URLPath, IP, Referer, User-Agent, Params, Cookie, Content-Type, Content-Length, X-Forwarded-For, Post-Body, Http-Method, Header, Host, HttpCode, and SensitiveInfo.
         * 
         * &gt; **NOTE:**  Support for matching fields is based on the display in the WAF console. HttpCode and SensitiveInfo are the matching fields supported by the information leakage prevention rule (dlp).
         * 
         * @return builder
         * 
         */
        public Builder key(String key) {
            return key(Output.of(key));
        }

        /**
         * @param opValue Logical character. Value:
         * - not-contain: does not contain.
         * - contain: Indicates to contain.
         * - none: It does not exist.
         * - ne: means not equal.
         * - eq: means equal.
         * - lt: indicates that the value is less.
         * - gt: indicates that the value is greater.
         * - len-lt: indicates that the length is less.
         * - len-eq: indicates that the length is equal.
         * - len-gt: indicates that the length is greater.
         * - not-match: indicates a mismatch.
         * - match-one: means equal to one of the multiple values.
         * - all-not-match: means not equal to any value.
         * - all-not-contain: does not contain any value.
         * - contain-one: Indicates that one of the multiple values is contained.
         * - not-regex: Indicates a regular mismatch.
         * - regex: Indicates a regular match.
         * - all-not-regex: indicates that the regular expressions do not match.
         * - regex-one: Represents a regular match for one of them.
         * - prefix-match: Indicates a prefix match.
         * - suffix-match: indicates a suffix match.
         * - mpty: Indicates that the content is empty.
         * - exists: Indicates that the field exists.
         * - inl: indicates in the list.
         * 
         * &gt; **NOTE:**  Not all logical characters (opvalues) can be configured for the match field (key) of each custom rule. For the logical characters supported by different matching fields, please refer to the association relationship between the matching fields and the logical characters in the custom rules of the WAF console.
         * 
         * @return builder
         * 
         */
        public Builder opValue(@Nullable Output<String> opValue) {
            $.opValue = opValue;
            return this;
        }

        /**
         * @param opValue Logical character. Value:
         * - not-contain: does not contain.
         * - contain: Indicates to contain.
         * - none: It does not exist.
         * - ne: means not equal.
         * - eq: means equal.
         * - lt: indicates that the value is less.
         * - gt: indicates that the value is greater.
         * - len-lt: indicates that the length is less.
         * - len-eq: indicates that the length is equal.
         * - len-gt: indicates that the length is greater.
         * - not-match: indicates a mismatch.
         * - match-one: means equal to one of the multiple values.
         * - all-not-match: means not equal to any value.
         * - all-not-contain: does not contain any value.
         * - contain-one: Indicates that one of the multiple values is contained.
         * - not-regex: Indicates a regular mismatch.
         * - regex: Indicates a regular match.
         * - all-not-regex: indicates that the regular expressions do not match.
         * - regex-one: Represents a regular match for one of them.
         * - prefix-match: Indicates a prefix match.
         * - suffix-match: indicates a suffix match.
         * - mpty: Indicates that the content is empty.
         * - exists: Indicates that the field exists.
         * - inl: indicates in the list.
         * 
         * &gt; **NOTE:**  Not all logical characters (opvalues) can be configured for the match field (key) of each custom rule. For the logical characters supported by different matching fields, please refer to the association relationship between the matching fields and the logical characters in the custom rules of the WAF console.
         * 
         * @return builder
         * 
         */
        public Builder opValue(String opValue) {
            return opValue(Output.of(opValue));
        }

        /**
         * @param subKey The characteristics of the statistical object. When the Target parameter is set to cookie, header, or queryarg, you must specify the corresponding information in the Subkey parameter.
         * 
         * @return builder
         * 
         */
        public Builder subKey(@Nullable Output<String> subKey) {
            $.subKey = subKey;
            return this;
        }

        /**
         * @param subKey The characteristics of the statistical object. When the Target parameter is set to cookie, header, or queryarg, you must specify the corresponding information in the Subkey parameter.
         * 
         * @return builder
         * 
         */
        public Builder subKey(String subKey) {
            return subKey(Output.of(subKey));
        }

        /**
         * @param values Match the content and fill in the corresponding content as needed.
         * 
         * &gt; **NOTE:**  The value range of the logical (opValue) and matching content (values) parameters in the matching condition parameter is related to the specified matching field (key).
         * 
         * @return builder
         * 
         */
        public Builder values(@Nullable Output<String> values) {
            $.values = values;
            return this;
        }

        /**
         * @param values Match the content and fill in the corresponding content as needed.
         * 
         * &gt; **NOTE:**  The value range of the logical (opValue) and matching content (values) parameters in the matching condition parameter is related to the specified matching field (key).
         * 
         * @return builder
         * 
         */
        public Builder values(String values) {
            return values(Output.of(values));
        }

        public DefenseRuleConfigConditionArgs build() {
            return $;
        }
    }

}
