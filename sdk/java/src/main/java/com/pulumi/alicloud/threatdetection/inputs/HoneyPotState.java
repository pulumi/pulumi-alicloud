// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.threatdetection.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class HoneyPotState extends com.pulumi.resources.ResourceArgs {

    public static final HoneyPotState Empty = new HoneyPotState();

    /**
     * Honeypot ID.
     * 
     */
    @Import(name="honeypotId")
    private @Nullable Output<String> honeypotId;

    /**
     * @return Honeypot ID.
     * 
     */
    public Optional<Output<String>> honeypotId() {
        return Optional.ofNullable(this.honeypotId);
    }

    /**
     * The image ID of the honeypot.
     * 
     */
    @Import(name="honeypotImageId")
    private @Nullable Output<String> honeypotImageId;

    /**
     * @return The image ID of the honeypot.
     * 
     */
    public Optional<Output<String>> honeypotImageId() {
        return Optional.ofNullable(this.honeypotImageId);
    }

    /**
     * Honeypot mirror name.
     * 
     */
    @Import(name="honeypotImageName")
    private @Nullable Output<String> honeypotImageName;

    /**
     * @return Honeypot mirror name.
     * 
     */
    public Optional<Output<String>> honeypotImageName() {
        return Optional.ofNullable(this.honeypotImageName);
    }

    /**
     * Honeypot custom name.
     * 
     */
    @Import(name="honeypotName")
    private @Nullable Output<String> honeypotName;

    /**
     * @return Honeypot custom name.
     * 
     */
    public Optional<Output<String>> honeypotName() {
        return Optional.ofNullable(this.honeypotName);
    }

    /**
     * The ID of the honeypot management node.
     * 
     */
    @Import(name="nodeId")
    private @Nullable Output<String> nodeId;

    /**
     * @return The ID of the honeypot management node.
     * 
     */
    public Optional<Output<String>> nodeId() {
        return Optional.ofNullable(this.nodeId);
    }

    /**
     * The custom parameter ID of honeypot.
     * 
     */
    @Import(name="presetId")
    private @Nullable Output<String> presetId;

    /**
     * @return The custom parameter ID of honeypot.
     * 
     */
    public Optional<Output<String>> presetId() {
        return Optional.ofNullable(this.presetId);
    }

    /**
     * Honeypot status.
     * 
     */
    @Import(name="states")
    private @Nullable Output<List<String>> states;

    /**
     * @return Honeypot status.
     * 
     */
    public Optional<Output<List<String>>> states() {
        return Optional.ofNullable(this.states);
    }

    /**
     * The status of the resource.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return The status of the resource.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    private HoneyPotState() {}

    private HoneyPotState(HoneyPotState $) {
        this.honeypotId = $.honeypotId;
        this.honeypotImageId = $.honeypotImageId;
        this.honeypotImageName = $.honeypotImageName;
        this.honeypotName = $.honeypotName;
        this.nodeId = $.nodeId;
        this.presetId = $.presetId;
        this.states = $.states;
        this.status = $.status;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(HoneyPotState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private HoneyPotState $;

        public Builder() {
            $ = new HoneyPotState();
        }

        public Builder(HoneyPotState defaults) {
            $ = new HoneyPotState(Objects.requireNonNull(defaults));
        }

        /**
         * @param honeypotId Honeypot ID.
         * 
         * @return builder
         * 
         */
        public Builder honeypotId(@Nullable Output<String> honeypotId) {
            $.honeypotId = honeypotId;
            return this;
        }

        /**
         * @param honeypotId Honeypot ID.
         * 
         * @return builder
         * 
         */
        public Builder honeypotId(String honeypotId) {
            return honeypotId(Output.of(honeypotId));
        }

        /**
         * @param honeypotImageId The image ID of the honeypot.
         * 
         * @return builder
         * 
         */
        public Builder honeypotImageId(@Nullable Output<String> honeypotImageId) {
            $.honeypotImageId = honeypotImageId;
            return this;
        }

        /**
         * @param honeypotImageId The image ID of the honeypot.
         * 
         * @return builder
         * 
         */
        public Builder honeypotImageId(String honeypotImageId) {
            return honeypotImageId(Output.of(honeypotImageId));
        }

        /**
         * @param honeypotImageName Honeypot mirror name.
         * 
         * @return builder
         * 
         */
        public Builder honeypotImageName(@Nullable Output<String> honeypotImageName) {
            $.honeypotImageName = honeypotImageName;
            return this;
        }

        /**
         * @param honeypotImageName Honeypot mirror name.
         * 
         * @return builder
         * 
         */
        public Builder honeypotImageName(String honeypotImageName) {
            return honeypotImageName(Output.of(honeypotImageName));
        }

        /**
         * @param honeypotName Honeypot custom name.
         * 
         * @return builder
         * 
         */
        public Builder honeypotName(@Nullable Output<String> honeypotName) {
            $.honeypotName = honeypotName;
            return this;
        }

        /**
         * @param honeypotName Honeypot custom name.
         * 
         * @return builder
         * 
         */
        public Builder honeypotName(String honeypotName) {
            return honeypotName(Output.of(honeypotName));
        }

        /**
         * @param nodeId The ID of the honeypot management node.
         * 
         * @return builder
         * 
         */
        public Builder nodeId(@Nullable Output<String> nodeId) {
            $.nodeId = nodeId;
            return this;
        }

        /**
         * @param nodeId The ID of the honeypot management node.
         * 
         * @return builder
         * 
         */
        public Builder nodeId(String nodeId) {
            return nodeId(Output.of(nodeId));
        }

        /**
         * @param presetId The custom parameter ID of honeypot.
         * 
         * @return builder
         * 
         */
        public Builder presetId(@Nullable Output<String> presetId) {
            $.presetId = presetId;
            return this;
        }

        /**
         * @param presetId The custom parameter ID of honeypot.
         * 
         * @return builder
         * 
         */
        public Builder presetId(String presetId) {
            return presetId(Output.of(presetId));
        }

        /**
         * @param states Honeypot status.
         * 
         * @return builder
         * 
         */
        public Builder states(@Nullable Output<List<String>> states) {
            $.states = states;
            return this;
        }

        /**
         * @param states Honeypot status.
         * 
         * @return builder
         * 
         */
        public Builder states(List<String> states) {
            return states(Output.of(states));
        }

        /**
         * @param states Honeypot status.
         * 
         * @return builder
         * 
         */
        public Builder states(String... states) {
            return states(List.of(states));
        }

        /**
         * @param status The status of the resource.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status The status of the resource.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        public HoneyPotState build() {
            return $;
        }
    }

}
