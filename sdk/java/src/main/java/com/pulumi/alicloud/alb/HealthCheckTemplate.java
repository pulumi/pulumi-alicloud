// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.alb;

import com.pulumi.alicloud.Utilities;
import com.pulumi.alicloud.alb.HealthCheckTemplateArgs;
import com.pulumi.alicloud.alb.inputs.HealthCheckTemplateState;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Provides a Application Load Balancer (ALB) Health Check Template resource.
 * 
 * Health check template.
 * 
 * For information about Application Load Balancer (ALB) Health Check Template and how to use it, see [What is Health Check Template](https://www.alibabacloud.com/help/en/slb/application-load-balancer/developer-reference/api-alb-2020-06-16-createhealthchecktemplate).
 * 
 * &gt; **NOTE:** Available since v1.134.0.
 * 
 * ## Example Usage
 * 
 * Basic Usage
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.alicloud.alb.HealthCheckTemplate;
 * import com.pulumi.alicloud.alb.HealthCheckTemplateArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         final var config = ctx.config();
 *         final var name = config.get("name").orElse("terraform-example");
 *         var example = new HealthCheckTemplate("example", HealthCheckTemplateArgs.builder()
 *             .healthCheckTemplateName(name)
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * 
 * ## Import
 * 
 * Application Load Balancer (ALB) Health Check Template can be imported using the id, e.g.
 * 
 * ```sh
 * $ pulumi import alicloud:alb/healthCheckTemplate:HealthCheckTemplate example &lt;id&gt;
 * ```
 * 
 */
@ResourceType(type="alicloud:alb/healthCheckTemplate:HealthCheckTemplate")
public class HealthCheckTemplate extends com.pulumi.resources.CustomResource {
    /**
     * Whether to PreCheck only this request, value:
     * true: sends a check request and does not create a resource. Check items include whether required parameters, request format, and business restrictions have been filled in. If the check fails, the corresponding error is returned. If the check passes, the error code DryRunOperation is returned.
     * false (default): Sends a normal request, returns the http2xx status code after the check, and directly performs the operation.
     * 
     */
    @Export(name="dryRun", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> dryRun;

    /**
     * @return Whether to PreCheck only this request, value:
     * true: sends a check request and does not create a resource. Check items include whether required parameters, request format, and business restrictions have been filled in. If the check fails, the corresponding error is returned. If the check passes, the error code DryRunOperation is returned.
     * false (default): Sends a normal request, returns the http2xx status code after the check, and directly performs the operation.
     * 
     */
    public Output<Optional<Boolean>> dryRun() {
        return Codegen.optional(this.dryRun);
    }
    /**
     * The HTTP code of the health check. The default value is http_2xx. The normal HTTP code for health check. Separate multiple codes with commas (,). Valid values: http_2xx, http_3xx, http_4xx, or http_5xx.
     * 
     */
    @Export(name="healthCheckCodes", refs={List.class,String.class}, tree="[0,1]")
    private Output<List<String>> healthCheckCodes;

    /**
     * @return The HTTP code of the health check. The default value is http_2xx. The normal HTTP code for health check. Separate multiple codes with commas (,). Valid values: http_2xx, http_3xx, http_4xx, or http_5xx.
     * 
     */
    public Output<List<String>> healthCheckCodes() {
        return this.healthCheckCodes;
    }
    /**
     * The number of the port that is used for health checks.  Valid values: 0 to 65535.  Default value: 0. This value indicates that the backend server is used for health checks.
     * 
     */
    @Export(name="healthCheckConnectPort", refs={Integer.class}, tree="[0]")
    private Output<Integer> healthCheckConnectPort;

    /**
     * @return The number of the port that is used for health checks.  Valid values: 0 to 65535.  Default value: 0. This value indicates that the backend server is used for health checks.
     * 
     */
    public Output<Integer> healthCheckConnectPort() {
        return this.healthCheckConnectPort;
    }
    /**
     * The domain name that is used for health checks. Valid values:  $SERVER_IP (default value): The private IP addresses of backend servers. If the $_ip parameter is set or the HealthCheckHost parameter is not set, SLB uses the private IP addresses of backend servers as the domain names for health checks.  domain: The domain name must be 1 to 80 characters in length, and can contain only letters, digits, periods (.),and hyphens (-).
     * 
     */
    @Export(name="healthCheckHost", refs={String.class}, tree="[0]")
    private Output<String> healthCheckHost;

    /**
     * @return The domain name that is used for health checks. Valid values:  $SERVER_IP (default value): The private IP addresses of backend servers. If the $_ip parameter is set or the HealthCheckHost parameter is not set, SLB uses the private IP addresses of backend servers as the domain names for health checks.  domain: The domain name must be 1 to 80 characters in length, and can contain only letters, digits, periods (.),and hyphens (-).
     * 
     */
    public Output<String> healthCheckHost() {
        return this.healthCheckHost;
    }
    /**
     * The version of the HTTP protocol.  Valid values: HTTP 1.0 and HTTP 1.1.  Default value: HTTP 1.1.
     * 
     */
    @Export(name="healthCheckHttpVersion", refs={String.class}, tree="[0]")
    private Output<String> healthCheckHttpVersion;

    /**
     * @return The version of the HTTP protocol.  Valid values: HTTP 1.0 and HTTP 1.1.  Default value: HTTP 1.1.
     * 
     */
    public Output<String> healthCheckHttpVersion() {
        return this.healthCheckHttpVersion;
    }
    /**
     * The time interval between two consecutive health checks.  Valid values: 1 to 50. Unit: seconds.  Default value: 2.
     * 
     */
    @Export(name="healthCheckInterval", refs={Integer.class}, tree="[0]")
    private Output<Integer> healthCheckInterval;

    /**
     * @return The time interval between two consecutive health checks.  Valid values: 1 to 50. Unit: seconds.  Default value: 2.
     * 
     */
    public Output<Integer> healthCheckInterval() {
        return this.healthCheckInterval;
    }
    /**
     * The health check method.  Valid values: GET and HEAD.  Default value: HEAD.
     * 
     */
    @Export(name="healthCheckMethod", refs={String.class}, tree="[0]")
    private Output<String> healthCheckMethod;

    /**
     * @return The health check method.  Valid values: GET and HEAD.  Default value: HEAD.
     * 
     */
    public Output<String> healthCheckMethod() {
        return this.healthCheckMethod;
    }
    /**
     * The URL that is used for health checks.  The URL must be 1 to 80 characters in length, and can contain letters, digits, hyphens (-), forward slashes (/), periods (.), percent signs (%), question marks (?), number signs (#), and ampersands (&amp;). The URL can also contain the following extended characters: _ ; ~ ! ( )* [ ] {@literal @} $ ^ : &#39; , +. The URL must start with a forward slash (/).
     * 
     */
    @Export(name="healthCheckPath", refs={String.class}, tree="[0]")
    private Output<String> healthCheckPath;

    /**
     * @return The URL that is used for health checks.  The URL must be 1 to 80 characters in length, and can contain letters, digits, hyphens (-), forward slashes (/), periods (.), percent signs (%), question marks (?), number signs (#), and ampersands (&amp;). The URL can also contain the following extended characters: _ ; ~ ! ( )* [ ] {@literal @} $ ^ : &#39; , +. The URL must start with a forward slash (/).
     * 
     */
    public Output<String> healthCheckPath() {
        return this.healthCheckPath;
    }
    /**
     * The protocol used for the health check. Value:
     * HTTP (default): Sends a HEAD or GET request to simulate the browser&#39;s access behavior to check whether the server application is healthy.
     * HTTPS: Sends a HEAD or GET request to simulate the browser&#39;s access behavior to check whether the server application is healthy. (Data encryption is more secure than HTTP.)
     * TCP: Sends a SYN handshake packet to check whether the server port is alive.
     * gRPC: Check whether the server application is healthy by sending a POST or GET request.
     * 
     */
    @Export(name="healthCheckProtocol", refs={String.class}, tree="[0]")
    private Output<String> healthCheckProtocol;

    /**
     * @return The protocol used for the health check. Value:
     * HTTP (default): Sends a HEAD or GET request to simulate the browser&#39;s access behavior to check whether the server application is healthy.
     * HTTPS: Sends a HEAD or GET request to simulate the browser&#39;s access behavior to check whether the server application is healthy. (Data encryption is more secure than HTTP.)
     * TCP: Sends a SYN handshake packet to check whether the server port is alive.
     * gRPC: Check whether the server application is healthy by sending a POST or GET request.
     * 
     */
    public Output<String> healthCheckProtocol() {
        return this.healthCheckProtocol;
    }
    /**
     * The name of the health check template.  The name must be 2 to 128 characters in length, and can contain letters, digits, periods (.), underscores (_), and hyphens (-). The name must start with a letter.
     * 
     */
    @Export(name="healthCheckTemplateName", refs={String.class}, tree="[0]")
    private Output<String> healthCheckTemplateName;

    /**
     * @return The name of the health check template.  The name must be 2 to 128 characters in length, and can contain letters, digits, periods (.), underscores (_), and hyphens (-). The name must start with a letter.
     * 
     */
    public Output<String> healthCheckTemplateName() {
        return this.healthCheckTemplateName;
    }
    /**
     * The timeout period of a health check response. If the backend Elastic Compute Service (ECS) instance does not send an expected response within the specified period of time, the health check fails.  Valid values: 1 to 300. Unit: seconds.  Default value: 5.
     * 
     */
    @Export(name="healthCheckTimeout", refs={Integer.class}, tree="[0]")
    private Output<Integer> healthCheckTimeout;

    /**
     * @return The timeout period of a health check response. If the backend Elastic Compute Service (ECS) instance does not send an expected response within the specified period of time, the health check fails.  Valid values: 1 to 300. Unit: seconds.  Default value: 5.
     * 
     */
    public Output<Integer> healthCheckTimeout() {
        return this.healthCheckTimeout;
    }
    /**
     * The number of times that an unhealthy backend server must consecutively pass health checks before it is declared healthy (from fail to success).
     * 
     */
    @Export(name="healthyThreshold", refs={Integer.class}, tree="[0]")
    private Output<Integer> healthyThreshold;

    /**
     * @return The number of times that an unhealthy backend server must consecutively pass health checks before it is declared healthy (from fail to success).
     * 
     */
    public Output<Integer> healthyThreshold() {
        return this.healthyThreshold;
    }
    /**
     * The ID of the resource group
     * 
     */
    @Export(name="resourceGroupId", refs={String.class}, tree="[0]")
    private Output<String> resourceGroupId;

    /**
     * @return The ID of the resource group
     * 
     */
    public Output<String> resourceGroupId() {
        return this.resourceGroupId;
    }
    /**
     * The tag of the resource
     * 
     */
    @Export(name="tags", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output</* @Nullable */ Map<String,String>> tags;

    /**
     * @return The tag of the resource
     * 
     */
    public Output<Optional<Map<String,String>>> tags() {
        return Codegen.optional(this.tags);
    }
    /**
     * Specifies the number of times that an healthy backend server must consecutively fail health checks before it is declared unhealthy (from success to fail).
     * 
     */
    @Export(name="unhealthyThreshold", refs={Integer.class}, tree="[0]")
    private Output<Integer> unhealthyThreshold;

    /**
     * @return Specifies the number of times that an healthy backend server must consecutively fail health checks before it is declared unhealthy (from success to fail).
     * 
     */
    public Output<Integer> unhealthyThreshold() {
        return this.unhealthyThreshold;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public HealthCheckTemplate(java.lang.String name) {
        this(name, HealthCheckTemplateArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public HealthCheckTemplate(java.lang.String name, HealthCheckTemplateArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public HealthCheckTemplate(java.lang.String name, HealthCheckTemplateArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("alicloud:alb/healthCheckTemplate:HealthCheckTemplate", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private HealthCheckTemplate(java.lang.String name, Output<java.lang.String> id, @Nullable HealthCheckTemplateState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("alicloud:alb/healthCheckTemplate:HealthCheckTemplate", name, state, makeResourceOptions(options, id), false);
    }

    private static HealthCheckTemplateArgs makeArgs(HealthCheckTemplateArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? HealthCheckTemplateArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static HealthCheckTemplate get(java.lang.String name, Output<java.lang.String> id, @Nullable HealthCheckTemplateState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new HealthCheckTemplate(name, id, state, options);
    }
}
