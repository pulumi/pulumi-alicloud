// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.alb;

import com.pulumi.alicloud.Utilities;
import com.pulumi.alicloud.alb.HealthCheckTemplateArgs;
import com.pulumi.alicloud.alb.inputs.HealthCheckTemplateState;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Provides an Application Load Balancer (ALB) Health Check Template resource.
 * 
 * For information about Application Load Balancer (ALB) Health Check Template and how to use it, see [What is Health Check Template](https://www.alibabacloud.com/help/en/slb/application-load-balancer/developer-reference/api-alb-2020-06-16-createhealthchecktemplate).
 * 
 * &gt; **NOTE:** Available since v1.134.0.
 * 
 * ## Example Usage
 * 
 * Basic Usage
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.alicloud.alb.HealthCheckTemplate;
 * import com.pulumi.alicloud.alb.HealthCheckTemplateArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         final var config = ctx.config();
 *         final var name = config.get("name").orElse("terraform-example");
 *         var example = new HealthCheckTemplate("example", HealthCheckTemplateArgs.builder()
 *             .healthCheckTemplateName(name)
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * Application Load Balancer (ALB) Health Check Template can be imported using the id, e.g.
 * 
 * ```sh
 * $ pulumi import alicloud:alb/healthCheckTemplate:HealthCheckTemplate example &lt;id&gt;
 * ```
 * 
 */
@ResourceType(type="alicloud:alb/healthCheckTemplate:HealthCheckTemplate")
public class HealthCheckTemplate extends com.pulumi.resources.CustomResource {
    /**
     * Whether to precheck the API request.
     * 
     */
    @Export(name="dryRun", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> dryRun;

    /**
     * @return Whether to precheck the API request.
     * 
     */
    public Output<Optional<Boolean>> dryRun() {
        return Codegen.optional(this.dryRun);
    }
    /**
     * The HTTP status codes that are used to indicate whether the backend server passes the health check. Default value: `http_2xx`. Valid values: `http_2xx`, `http_3xx`, `http_4xx`, and `http_5xx`. **NOTE:** `health_check_codes` takes effect only if `health_check_protocol` is set to `HTTP`.
     * 
     */
    @Export(name="healthCheckCodes", refs={List.class,String.class}, tree="[0,1]")
    private Output<List<String>> healthCheckCodes;

    /**
     * @return The HTTP status codes that are used to indicate whether the backend server passes the health check. Default value: `http_2xx`. Valid values: `http_2xx`, `http_3xx`, `http_4xx`, and `http_5xx`. **NOTE:** `health_check_codes` takes effect only if `health_check_protocol` is set to `HTTP`.
     * 
     */
    public Output<List<String>> healthCheckCodes() {
        return this.healthCheckCodes;
    }
    /**
     * The port that is used for health checks. Default value: `0`. Valid values: `0` to `65535`.
     * 
     */
    @Export(name="healthCheckConnectPort", refs={Integer.class}, tree="[0]")
    private Output<Integer> healthCheckConnectPort;

    /**
     * @return The port that is used for health checks. Default value: `0`. Valid values: `0` to `65535`.
     * 
     */
    public Output<Integer> healthCheckConnectPort() {
        return this.healthCheckConnectPort;
    }
    /**
     * The domain name that is used for health checks. **NOTE:** `health_check_host` takes effect only if `health_check_protocol` is set to `HTTP`.
     * 
     */
    @Export(name="healthCheckHost", refs={String.class}, tree="[0]")
    private Output<String> healthCheckHost;

    /**
     * @return The domain name that is used for health checks. **NOTE:** `health_check_host` takes effect only if `health_check_protocol` is set to `HTTP`.
     * 
     */
    public Output<String> healthCheckHost() {
        return this.healthCheckHost;
    }
    /**
     * The version of the HTTP protocol. Default value: `HTTP1.1`. Valid values: `HTTP1.0`, `HTTP1.1`. **NOTE:** `health_check_http_version` takes effect only if `health_check_protocol` is set to `HTTP`.
     * 
     */
    @Export(name="healthCheckHttpVersion", refs={String.class}, tree="[0]")
    private Output<String> healthCheckHttpVersion;

    /**
     * @return The version of the HTTP protocol. Default value: `HTTP1.1`. Valid values: `HTTP1.0`, `HTTP1.1`. **NOTE:** `health_check_http_version` takes effect only if `health_check_protocol` is set to `HTTP`.
     * 
     */
    public Output<String> healthCheckHttpVersion() {
        return this.healthCheckHttpVersion;
    }
    /**
     * The interval at which health checks are performed. Unit: seconds. Default value: `2`. Valid values: `1` to `50`.
     * 
     */
    @Export(name="healthCheckInterval", refs={Integer.class}, tree="[0]")
    private Output<Integer> healthCheckInterval;

    /**
     * @return The interval at which health checks are performed. Unit: seconds. Default value: `2`. Valid values: `1` to `50`.
     * 
     */
    public Output<Integer> healthCheckInterval() {
        return this.healthCheckInterval;
    }
    /**
     * The HTTP method that is used for health checks. Default value: `HEAD`. Valid values: `HEAD`, `GET`. **NOTE:** `health_check_method` takes effect only if `health_check_protocol` is set to `HTTP`.
     * 
     */
    @Export(name="healthCheckMethod", refs={String.class}, tree="[0]")
    private Output<String> healthCheckMethod;

    /**
     * @return The HTTP method that is used for health checks. Default value: `HEAD`. Valid values: `HEAD`, `GET`. **NOTE:** `health_check_method` takes effect only if `health_check_protocol` is set to `HTTP`.
     * 
     */
    public Output<String> healthCheckMethod() {
        return this.healthCheckMethod;
    }
    /**
     * The URL that is used for health checks. **NOTE:** `health_check_path` takes effect only if `health_check_protocol` is set to `HTTP`.
     * 
     */
    @Export(name="healthCheckPath", refs={String.class}, tree="[0]")
    private Output<String> healthCheckPath;

    /**
     * @return The URL that is used for health checks. **NOTE:** `health_check_path` takes effect only if `health_check_protocol` is set to `HTTP`.
     * 
     */
    public Output<String> healthCheckPath() {
        return this.healthCheckPath;
    }
    /**
     * The protocol that is used for health checks. Default value: `HTTP`. Valid values: `HTTP`, `TCP`.
     * 
     */
    @Export(name="healthCheckProtocol", refs={String.class}, tree="[0]")
    private Output<String> healthCheckProtocol;

    /**
     * @return The protocol that is used for health checks. Default value: `HTTP`. Valid values: `HTTP`, `TCP`.
     * 
     */
    public Output<String> healthCheckProtocol() {
        return this.healthCheckProtocol;
    }
    /**
     * The name of the health check template. The name must be `2` to `128` characters in length, and can contain letters, digits, periods (.), underscores (_), and hyphens (-). The name must start with a letter.
     * 
     */
    @Export(name="healthCheckTemplateName", refs={String.class}, tree="[0]")
    private Output<String> healthCheckTemplateName;

    /**
     * @return The name of the health check template. The name must be `2` to `128` characters in length, and can contain letters, digits, periods (.), underscores (_), and hyphens (-). The name must start with a letter.
     * 
     */
    public Output<String> healthCheckTemplateName() {
        return this.healthCheckTemplateName;
    }
    /**
     * The timeout period of a health check. Default value: `5`. Valid values: `1` to `300`.
     * 
     */
    @Export(name="healthCheckTimeout", refs={Integer.class}, tree="[0]")
    private Output<Integer> healthCheckTimeout;

    /**
     * @return The timeout period of a health check. Default value: `5`. Valid values: `1` to `300`.
     * 
     */
    public Output<Integer> healthCheckTimeout() {
        return this.healthCheckTimeout;
    }
    /**
     * The number of times that an unhealthy backend server must consecutively pass health checks before it is declared healthy. Default value: `3`. Valid values: `2` to `10`.
     * 
     */
    @Export(name="healthyThreshold", refs={Integer.class}, tree="[0]")
    private Output<Integer> healthyThreshold;

    /**
     * @return The number of times that an unhealthy backend server must consecutively pass health checks before it is declared healthy. Default value: `3`. Valid values: `2` to `10`.
     * 
     */
    public Output<Integer> healthyThreshold() {
        return this.healthyThreshold;
    }
    /**
     * The number of times that a healthy backend server must consecutively fail health checks before it is declared unhealthy. Default value: `3`. Valid values: `2` to `10`.
     * 
     */
    @Export(name="unhealthyThreshold", refs={Integer.class}, tree="[0]")
    private Output<Integer> unhealthyThreshold;

    /**
     * @return The number of times that a healthy backend server must consecutively fail health checks before it is declared unhealthy. Default value: `3`. Valid values: `2` to `10`.
     * 
     */
    public Output<Integer> unhealthyThreshold() {
        return this.unhealthyThreshold;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public HealthCheckTemplate(java.lang.String name) {
        this(name, HealthCheckTemplateArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public HealthCheckTemplate(java.lang.String name, HealthCheckTemplateArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public HealthCheckTemplate(java.lang.String name, HealthCheckTemplateArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("alicloud:alb/healthCheckTemplate:HealthCheckTemplate", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private HealthCheckTemplate(java.lang.String name, Output<java.lang.String> id, @Nullable HealthCheckTemplateState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("alicloud:alb/healthCheckTemplate:HealthCheckTemplate", name, state, makeResourceOptions(options, id), false);
    }

    private static HealthCheckTemplateArgs makeArgs(HealthCheckTemplateArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? HealthCheckTemplateArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static HealthCheckTemplate get(java.lang.String name, Output<java.lang.String> id, @Nullable HealthCheckTemplateState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new HealthCheckTemplate(name, id, state, options);
    }
}
