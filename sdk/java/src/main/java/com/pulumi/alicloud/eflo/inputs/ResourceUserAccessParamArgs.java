// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.eflo.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;


public final class ResourceUserAccessParamArgs extends com.pulumi.resources.ResourceArgs {

    public static final ResourceUserAccessParamArgs Empty = new ResourceUserAccessParamArgs();

    /**
     * Access keys are important credentials for authentication.
     * 
     */
    @Import(name="accessId", required=true)
    private Output<String> accessId;

    /**
     * @return Access keys are important credentials for authentication.
     * 
     */
    public Output<String> accessId() {
        return this.accessId;
    }

    /**
     * A Secret Key is a Secret credential paired with an access Key to verify a user&#39;s identity and protect the security of an interface.
     * 
     */
    @Import(name="accessKey", required=true)
    private Output<String> accessKey;

    /**
     * @return A Secret Key is a Secret credential paired with an access Key to verify a user&#39;s identity and protect the security of an interface.
     * 
     */
    public Output<String> accessKey() {
        return this.accessKey;
    }

    /**
     * An Endpoint is a network address for accessing a service or API, usually a URL to a specific service instance.
     * 
     */
    @Import(name="endpoint", required=true)
    private Output<String> endpoint;

    /**
     * @return An Endpoint is a network address for accessing a service or API, usually a URL to a specific service instance.
     * 
     */
    public Output<String> endpoint() {
        return this.endpoint;
    }

    /**
     * A Workspace generally refers to a separate space created by a user on a particular computing environment or platform.
     * 
     */
    @Import(name="workspaceId", required=true)
    private Output<String> workspaceId;

    /**
     * @return A Workspace generally refers to a separate space created by a user on a particular computing environment or platform.
     * 
     */
    public Output<String> workspaceId() {
        return this.workspaceId;
    }

    private ResourceUserAccessParamArgs() {}

    private ResourceUserAccessParamArgs(ResourceUserAccessParamArgs $) {
        this.accessId = $.accessId;
        this.accessKey = $.accessKey;
        this.endpoint = $.endpoint;
        this.workspaceId = $.workspaceId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ResourceUserAccessParamArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ResourceUserAccessParamArgs $;

        public Builder() {
            $ = new ResourceUserAccessParamArgs();
        }

        public Builder(ResourceUserAccessParamArgs defaults) {
            $ = new ResourceUserAccessParamArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accessId Access keys are important credentials for authentication.
         * 
         * @return builder
         * 
         */
        public Builder accessId(Output<String> accessId) {
            $.accessId = accessId;
            return this;
        }

        /**
         * @param accessId Access keys are important credentials for authentication.
         * 
         * @return builder
         * 
         */
        public Builder accessId(String accessId) {
            return accessId(Output.of(accessId));
        }

        /**
         * @param accessKey A Secret Key is a Secret credential paired with an access Key to verify a user&#39;s identity and protect the security of an interface.
         * 
         * @return builder
         * 
         */
        public Builder accessKey(Output<String> accessKey) {
            $.accessKey = accessKey;
            return this;
        }

        /**
         * @param accessKey A Secret Key is a Secret credential paired with an access Key to verify a user&#39;s identity and protect the security of an interface.
         * 
         * @return builder
         * 
         */
        public Builder accessKey(String accessKey) {
            return accessKey(Output.of(accessKey));
        }

        /**
         * @param endpoint An Endpoint is a network address for accessing a service or API, usually a URL to a specific service instance.
         * 
         * @return builder
         * 
         */
        public Builder endpoint(Output<String> endpoint) {
            $.endpoint = endpoint;
            return this;
        }

        /**
         * @param endpoint An Endpoint is a network address for accessing a service or API, usually a URL to a specific service instance.
         * 
         * @return builder
         * 
         */
        public Builder endpoint(String endpoint) {
            return endpoint(Output.of(endpoint));
        }

        /**
         * @param workspaceId A Workspace generally refers to a separate space created by a user on a particular computing environment or platform.
         * 
         * @return builder
         * 
         */
        public Builder workspaceId(Output<String> workspaceId) {
            $.workspaceId = workspaceId;
            return this;
        }

        /**
         * @param workspaceId A Workspace generally refers to a separate space created by a user on a particular computing environment or platform.
         * 
         * @return builder
         * 
         */
        public Builder workspaceId(String workspaceId) {
            return workspaceId(Output.of(workspaceId));
        }

        public ResourceUserAccessParamArgs build() {
            if ($.accessId == null) {
                throw new MissingRequiredPropertyException("ResourceUserAccessParamArgs", "accessId");
            }
            if ($.accessKey == null) {
                throw new MissingRequiredPropertyException("ResourceUserAccessParamArgs", "accessKey");
            }
            if ($.endpoint == null) {
                throw new MissingRequiredPropertyException("ResourceUserAccessParamArgs", "endpoint");
            }
            if ($.workspaceId == null) {
                throw new MissingRequiredPropertyException("ResourceUserAccessParamArgs", "workspaceId");
            }
            return $;
        }
    }

}
