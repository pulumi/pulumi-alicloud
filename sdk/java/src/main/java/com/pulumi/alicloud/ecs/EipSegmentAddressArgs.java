// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.ecs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class EipSegmentAddressArgs extends com.pulumi.resources.ResourceArgs {

    public static final EipSegmentAddressArgs Empty = new EipSegmentAddressArgs();

    /**
     * The peak bandwidth of the EIP. Unit: Mbps. When the value of instancargetype is PostPaid and the value of InternetChargeType is PayByBandwidth, the range of Bandwidth is 1 to 500. If the value of instancargetype is PostPaid and the value of InternetChargeType is PayByTraffic, the range of Bandwidth is 1 to 200. When instancargetype is set to PrePaid, the range of Bandwidth is 1 to 1000. The default value is 5 Mbps.
     * 
     */
    @Import(name="bandwidth")
    private @Nullable Output<String> bandwidth;

    /**
     * @return The peak bandwidth of the EIP. Unit: Mbps. When the value of instancargetype is PostPaid and the value of InternetChargeType is PayByBandwidth, the range of Bandwidth is 1 to 500. If the value of instancargetype is PostPaid and the value of InternetChargeType is PayByTraffic, the range of Bandwidth is 1 to 200. When instancargetype is set to PrePaid, the range of Bandwidth is 1 to 1000. The default value is 5 Mbps.
     * 
     */
    public Optional<Output<String>> bandwidth() {
        return Optional.ofNullable(this.bandwidth);
    }

    /**
     * Mask of consecutive EIPs. Value:28: For a single call, the system will allocate 16 consecutive EIPs.27: For a single call, the system will allocate 32 consecutive EIPs.26: For a single call, the system will allocate 64 consecutive EIPs.25: For a single call, the system will allocate 128 consecutive EIPs.24: For a single call, the system will allocate 256 consecutive EIPs.
     * 
     */
    @Import(name="eipMask", required=true)
    private Output<String> eipMask;

    /**
     * @return Mask of consecutive EIPs. Value:28: For a single call, the system will allocate 16 consecutive EIPs.27: For a single call, the system will allocate 32 consecutive EIPs.26: For a single call, the system will allocate 64 consecutive EIPs.25: For a single call, the system will allocate 128 consecutive EIPs.24: For a single call, the system will allocate 256 consecutive EIPs.
     * 
     */
    public Output<String> eipMask() {
        return this.eipMask;
    }

    /**
     * Continuous EIP billing method, valid values:
     * - **PayByBandwidth** (default): Billing based on fixed bandwidth.
     * - **PayByTraffic**: Billing by usage flow.
     * 
     */
    @Import(name="internetChargeType")
    private @Nullable Output<String> internetChargeType;

    /**
     * @return Continuous EIP billing method, valid values:
     * - **PayByBandwidth** (default): Billing based on fixed bandwidth.
     * - **PayByTraffic**: Billing by usage flow.
     * 
     */
    public Optional<Output<String>> internetChargeType() {
        return Optional.ofNullable(this.internetChargeType);
    }

    /**
     * Line type. Valid values:
     * - **BGP** (default):BGP (multi-line) line. BGP (multi-line) EIP is supported in all regions.
     * - **BGP_PRO** :BGP (multi-line)_boutique line. Currently, only Hong Kong, Singapore, Japan (Tokyo), Malaysia (Kuala Lumpur), the Philippines (Manila), Indonesia (Jakarta), and Thailand (Bangkok) regions support BGP (multi-line)_boutique route EIP.
     *   For more information about BGP (multi-line) lines and BGP (multi-line) premium lines, see EIP line types.
     *   If you are a whitelist user with single-line bandwidth, you can also select the following types:
     * - **ChinaTelecom** : China Telecom
     * - **ChinaUnicom** : China Unicom
     * - **ChinaMobile** : China Mobile
     * - **ChinaTelecom_L2** : China Telecom L2
     * - **ChinaUnicom_L2** : China Unicom L2
     * - **ChinaMobile_L2** : China Mobile L2
     *   If you are a user of Hangzhou Financial Cloud, this field is required. The value is `BGP_FinanceCloud`.
     * 
     */
    @Import(name="isp")
    private @Nullable Output<String> isp;

    /**
     * @return Line type. Valid values:
     * - **BGP** (default):BGP (multi-line) line. BGP (multi-line) EIP is supported in all regions.
     * - **BGP_PRO** :BGP (multi-line)_boutique line. Currently, only Hong Kong, Singapore, Japan (Tokyo), Malaysia (Kuala Lumpur), the Philippines (Manila), Indonesia (Jakarta), and Thailand (Bangkok) regions support BGP (multi-line)_boutique route EIP.
     *   For more information about BGP (multi-line) lines and BGP (multi-line) premium lines, see EIP line types.
     *   If you are a whitelist user with single-line bandwidth, you can also select the following types:
     * - **ChinaTelecom** : China Telecom
     * - **ChinaUnicom** : China Unicom
     * - **ChinaMobile** : China Mobile
     * - **ChinaTelecom_L2** : China Telecom L2
     * - **ChinaUnicom_L2** : China Unicom L2
     * - **ChinaMobile_L2** : China Mobile L2
     *   If you are a user of Hangzhou Financial Cloud, this field is required. The value is `BGP_FinanceCloud`.
     * 
     */
    public Optional<Output<String>> isp() {
        return Optional.ofNullable(this.isp);
    }

    /**
     * The network type. Set the value to **public**.
     * 
     */
    @Import(name="netmode")
    private @Nullable Output<String> netmode;

    /**
     * @return The network type. Set the value to **public**.
     * 
     */
    public Optional<Output<String>> netmode() {
        return Optional.ofNullable(this.netmode);
    }

    private EipSegmentAddressArgs() {}

    private EipSegmentAddressArgs(EipSegmentAddressArgs $) {
        this.bandwidth = $.bandwidth;
        this.eipMask = $.eipMask;
        this.internetChargeType = $.internetChargeType;
        this.isp = $.isp;
        this.netmode = $.netmode;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(EipSegmentAddressArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private EipSegmentAddressArgs $;

        public Builder() {
            $ = new EipSegmentAddressArgs();
        }

        public Builder(EipSegmentAddressArgs defaults) {
            $ = new EipSegmentAddressArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param bandwidth The peak bandwidth of the EIP. Unit: Mbps. When the value of instancargetype is PostPaid and the value of InternetChargeType is PayByBandwidth, the range of Bandwidth is 1 to 500. If the value of instancargetype is PostPaid and the value of InternetChargeType is PayByTraffic, the range of Bandwidth is 1 to 200. When instancargetype is set to PrePaid, the range of Bandwidth is 1 to 1000. The default value is 5 Mbps.
         * 
         * @return builder
         * 
         */
        public Builder bandwidth(@Nullable Output<String> bandwidth) {
            $.bandwidth = bandwidth;
            return this;
        }

        /**
         * @param bandwidth The peak bandwidth of the EIP. Unit: Mbps. When the value of instancargetype is PostPaid and the value of InternetChargeType is PayByBandwidth, the range of Bandwidth is 1 to 500. If the value of instancargetype is PostPaid and the value of InternetChargeType is PayByTraffic, the range of Bandwidth is 1 to 200. When instancargetype is set to PrePaid, the range of Bandwidth is 1 to 1000. The default value is 5 Mbps.
         * 
         * @return builder
         * 
         */
        public Builder bandwidth(String bandwidth) {
            return bandwidth(Output.of(bandwidth));
        }

        /**
         * @param eipMask Mask of consecutive EIPs. Value:28: For a single call, the system will allocate 16 consecutive EIPs.27: For a single call, the system will allocate 32 consecutive EIPs.26: For a single call, the system will allocate 64 consecutive EIPs.25: For a single call, the system will allocate 128 consecutive EIPs.24: For a single call, the system will allocate 256 consecutive EIPs.
         * 
         * @return builder
         * 
         */
        public Builder eipMask(Output<String> eipMask) {
            $.eipMask = eipMask;
            return this;
        }

        /**
         * @param eipMask Mask of consecutive EIPs. Value:28: For a single call, the system will allocate 16 consecutive EIPs.27: For a single call, the system will allocate 32 consecutive EIPs.26: For a single call, the system will allocate 64 consecutive EIPs.25: For a single call, the system will allocate 128 consecutive EIPs.24: For a single call, the system will allocate 256 consecutive EIPs.
         * 
         * @return builder
         * 
         */
        public Builder eipMask(String eipMask) {
            return eipMask(Output.of(eipMask));
        }

        /**
         * @param internetChargeType Continuous EIP billing method, valid values:
         * - **PayByBandwidth** (default): Billing based on fixed bandwidth.
         * - **PayByTraffic**: Billing by usage flow.
         * 
         * @return builder
         * 
         */
        public Builder internetChargeType(@Nullable Output<String> internetChargeType) {
            $.internetChargeType = internetChargeType;
            return this;
        }

        /**
         * @param internetChargeType Continuous EIP billing method, valid values:
         * - **PayByBandwidth** (default): Billing based on fixed bandwidth.
         * - **PayByTraffic**: Billing by usage flow.
         * 
         * @return builder
         * 
         */
        public Builder internetChargeType(String internetChargeType) {
            return internetChargeType(Output.of(internetChargeType));
        }

        /**
         * @param isp Line type. Valid values:
         * - **BGP** (default):BGP (multi-line) line. BGP (multi-line) EIP is supported in all regions.
         * - **BGP_PRO** :BGP (multi-line)_boutique line. Currently, only Hong Kong, Singapore, Japan (Tokyo), Malaysia (Kuala Lumpur), the Philippines (Manila), Indonesia (Jakarta), and Thailand (Bangkok) regions support BGP (multi-line)_boutique route EIP.
         *   For more information about BGP (multi-line) lines and BGP (multi-line) premium lines, see EIP line types.
         *   If you are a whitelist user with single-line bandwidth, you can also select the following types:
         * - **ChinaTelecom** : China Telecom
         * - **ChinaUnicom** : China Unicom
         * - **ChinaMobile** : China Mobile
         * - **ChinaTelecom_L2** : China Telecom L2
         * - **ChinaUnicom_L2** : China Unicom L2
         * - **ChinaMobile_L2** : China Mobile L2
         *   If you are a user of Hangzhou Financial Cloud, this field is required. The value is `BGP_FinanceCloud`.
         * 
         * @return builder
         * 
         */
        public Builder isp(@Nullable Output<String> isp) {
            $.isp = isp;
            return this;
        }

        /**
         * @param isp Line type. Valid values:
         * - **BGP** (default):BGP (multi-line) line. BGP (multi-line) EIP is supported in all regions.
         * - **BGP_PRO** :BGP (multi-line)_boutique line. Currently, only Hong Kong, Singapore, Japan (Tokyo), Malaysia (Kuala Lumpur), the Philippines (Manila), Indonesia (Jakarta), and Thailand (Bangkok) regions support BGP (multi-line)_boutique route EIP.
         *   For more information about BGP (multi-line) lines and BGP (multi-line) premium lines, see EIP line types.
         *   If you are a whitelist user with single-line bandwidth, you can also select the following types:
         * - **ChinaTelecom** : China Telecom
         * - **ChinaUnicom** : China Unicom
         * - **ChinaMobile** : China Mobile
         * - **ChinaTelecom_L2** : China Telecom L2
         * - **ChinaUnicom_L2** : China Unicom L2
         * - **ChinaMobile_L2** : China Mobile L2
         *   If you are a user of Hangzhou Financial Cloud, this field is required. The value is `BGP_FinanceCloud`.
         * 
         * @return builder
         * 
         */
        public Builder isp(String isp) {
            return isp(Output.of(isp));
        }

        /**
         * @param netmode The network type. Set the value to **public**.
         * 
         * @return builder
         * 
         */
        public Builder netmode(@Nullable Output<String> netmode) {
            $.netmode = netmode;
            return this;
        }

        /**
         * @param netmode The network type. Set the value to **public**.
         * 
         * @return builder
         * 
         */
        public Builder netmode(String netmode) {
            return netmode(Output.of(netmode));
        }

        public EipSegmentAddressArgs build() {
            $.eipMask = Objects.requireNonNull($.eipMask, "expected parameter 'eipMask' to be non-null");
            return $;
        }
    }

}
