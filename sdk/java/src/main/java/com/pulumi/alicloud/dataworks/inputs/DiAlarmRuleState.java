// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.dataworks.inputs;

import com.pulumi.alicloud.dataworks.inputs.DiAlarmRuleNotificationSettingsArgs;
import com.pulumi.alicloud.dataworks.inputs.DiAlarmRuleTriggerConditionArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DiAlarmRuleState extends com.pulumi.resources.ResourceArgs {

    public static final DiAlarmRuleState Empty = new DiAlarmRuleState();

    @Import(name="description")
    private @Nullable Output<String> description;

    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Resource attribute field representing resource level ID
     * 
     */
    @Import(name="diAlarmRuleId")
    private @Nullable Output<Integer> diAlarmRuleId;

    /**
     * @return Resource attribute field representing resource level ID
     * 
     */
    public Optional<Output<Integer>> diAlarmRuleId() {
        return Optional.ofNullable(this.diAlarmRuleId);
    }

    /**
     * Data Integration alarm rule name
     * 
     */
    @Import(name="diAlarmRuleName")
    private @Nullable Output<String> diAlarmRuleName;

    /**
     * @return Data Integration alarm rule name
     * 
     */
    public Optional<Output<String>> diAlarmRuleName() {
        return Optional.ofNullable(this.diAlarmRuleName);
    }

    /**
     * Task ID: the ID of the task associated with the alert rule.
     * 
     */
    @Import(name="diJobId")
    private @Nullable Output<Integer> diJobId;

    /**
     * @return Task ID: the ID of the task associated with the alert rule.
     * 
     */
    public Optional<Output<Integer>> diJobId() {
        return Optional.ofNullable(this.diJobId);
    }

    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * Alarm indicator type. Optional enumerated values:
     * - Heartbeat (task status alarm)
     * - FailoverCount(failover times alarm)
     * - Delay (task Delay alarm)
     * 
     */
    @Import(name="metricType")
    private @Nullable Output<String> metricType;

    /**
     * @return Alarm indicator type. Optional enumerated values:
     * - Heartbeat (task status alarm)
     * - FailoverCount(failover times alarm)
     * - Delay (task Delay alarm)
     * 
     */
    public Optional<Output<String>> metricType() {
        return Optional.ofNullable(this.metricType);
    }

    /**
     * Alarm notification settings See `notification_settings` below.
     * 
     */
    @Import(name="notificationSettings")
    private @Nullable Output<DiAlarmRuleNotificationSettingsArgs> notificationSettings;

    /**
     * @return Alarm notification settings See `notification_settings` below.
     * 
     */
    public Optional<Output<DiAlarmRuleNotificationSettingsArgs>> notificationSettings() {
        return Optional.ofNullable(this.notificationSettings);
    }

    /**
     * Alarm trigger condition list, supporting multiple conditions See `trigger_conditions` below.
     * 
     */
    @Import(name="triggerConditions")
    private @Nullable Output<List<DiAlarmRuleTriggerConditionArgs>> triggerConditions;

    /**
     * @return Alarm trigger condition list, supporting multiple conditions See `trigger_conditions` below.
     * 
     */
    public Optional<Output<List<DiAlarmRuleTriggerConditionArgs>>> triggerConditions() {
        return Optional.ofNullable(this.triggerConditions);
    }

    private DiAlarmRuleState() {}

    private DiAlarmRuleState(DiAlarmRuleState $) {
        this.description = $.description;
        this.diAlarmRuleId = $.diAlarmRuleId;
        this.diAlarmRuleName = $.diAlarmRuleName;
        this.diJobId = $.diJobId;
        this.enabled = $.enabled;
        this.metricType = $.metricType;
        this.notificationSettings = $.notificationSettings;
        this.triggerConditions = $.triggerConditions;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DiAlarmRuleState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DiAlarmRuleState $;

        public Builder() {
            $ = new DiAlarmRuleState();
        }

        public Builder(DiAlarmRuleState defaults) {
            $ = new DiAlarmRuleState(Objects.requireNonNull(defaults));
        }

        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param diAlarmRuleId Resource attribute field representing resource level ID
         * 
         * @return builder
         * 
         */
        public Builder diAlarmRuleId(@Nullable Output<Integer> diAlarmRuleId) {
            $.diAlarmRuleId = diAlarmRuleId;
            return this;
        }

        /**
         * @param diAlarmRuleId Resource attribute field representing resource level ID
         * 
         * @return builder
         * 
         */
        public Builder diAlarmRuleId(Integer diAlarmRuleId) {
            return diAlarmRuleId(Output.of(diAlarmRuleId));
        }

        /**
         * @param diAlarmRuleName Data Integration alarm rule name
         * 
         * @return builder
         * 
         */
        public Builder diAlarmRuleName(@Nullable Output<String> diAlarmRuleName) {
            $.diAlarmRuleName = diAlarmRuleName;
            return this;
        }

        /**
         * @param diAlarmRuleName Data Integration alarm rule name
         * 
         * @return builder
         * 
         */
        public Builder diAlarmRuleName(String diAlarmRuleName) {
            return diAlarmRuleName(Output.of(diAlarmRuleName));
        }

        /**
         * @param diJobId Task ID: the ID of the task associated with the alert rule.
         * 
         * @return builder
         * 
         */
        public Builder diJobId(@Nullable Output<Integer> diJobId) {
            $.diJobId = diJobId;
            return this;
        }

        /**
         * @param diJobId Task ID: the ID of the task associated with the alert rule.
         * 
         * @return builder
         * 
         */
        public Builder diJobId(Integer diJobId) {
            return diJobId(Output.of(diJobId));
        }

        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param metricType Alarm indicator type. Optional enumerated values:
         * - Heartbeat (task status alarm)
         * - FailoverCount(failover times alarm)
         * - Delay (task Delay alarm)
         * 
         * @return builder
         * 
         */
        public Builder metricType(@Nullable Output<String> metricType) {
            $.metricType = metricType;
            return this;
        }

        /**
         * @param metricType Alarm indicator type. Optional enumerated values:
         * - Heartbeat (task status alarm)
         * - FailoverCount(failover times alarm)
         * - Delay (task Delay alarm)
         * 
         * @return builder
         * 
         */
        public Builder metricType(String metricType) {
            return metricType(Output.of(metricType));
        }

        /**
         * @param notificationSettings Alarm notification settings See `notification_settings` below.
         * 
         * @return builder
         * 
         */
        public Builder notificationSettings(@Nullable Output<DiAlarmRuleNotificationSettingsArgs> notificationSettings) {
            $.notificationSettings = notificationSettings;
            return this;
        }

        /**
         * @param notificationSettings Alarm notification settings See `notification_settings` below.
         * 
         * @return builder
         * 
         */
        public Builder notificationSettings(DiAlarmRuleNotificationSettingsArgs notificationSettings) {
            return notificationSettings(Output.of(notificationSettings));
        }

        /**
         * @param triggerConditions Alarm trigger condition list, supporting multiple conditions See `trigger_conditions` below.
         * 
         * @return builder
         * 
         */
        public Builder triggerConditions(@Nullable Output<List<DiAlarmRuleTriggerConditionArgs>> triggerConditions) {
            $.triggerConditions = triggerConditions;
            return this;
        }

        /**
         * @param triggerConditions Alarm trigger condition list, supporting multiple conditions See `trigger_conditions` below.
         * 
         * @return builder
         * 
         */
        public Builder triggerConditions(List<DiAlarmRuleTriggerConditionArgs> triggerConditions) {
            return triggerConditions(Output.of(triggerConditions));
        }

        /**
         * @param triggerConditions Alarm trigger condition list, supporting multiple conditions See `trigger_conditions` below.
         * 
         * @return builder
         * 
         */
        public Builder triggerConditions(DiAlarmRuleTriggerConditionArgs... triggerConditions) {
            return triggerConditions(List.of(triggerConditions));
        }

        public DiAlarmRuleState build() {
            return $;
        }
    }

}
