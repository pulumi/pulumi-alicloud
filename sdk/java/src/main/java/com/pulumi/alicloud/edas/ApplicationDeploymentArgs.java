// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.edas;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ApplicationDeploymentArgs extends com.pulumi.resources.ResourceArgs {

    public static final ApplicationDeploymentArgs Empty = new ApplicationDeploymentArgs();

    /**
     * The ID of the application that you want to deploy.
     * 
     */
    @Import(name="appId", required=true)
    private Output<String> appId;

    /**
     * @return The ID of the application that you want to deploy.
     * 
     */
    public Output<String> appId() {
        return this.appId;
    }

    /**
     * The ID of the instance group where the application is going to be deployed. Set this parameter to all if you want to deploy the application to all groups.
     * 
     */
    @Import(name="groupId", required=true)
    private Output<String> groupId;

    /**
     * @return The ID of the instance group where the application is going to be deployed. Set this parameter to all if you want to deploy the application to all groups.
     * 
     */
    public Output<String> groupId() {
        return this.groupId;
    }

    /**
     * The version of the application that you want to deploy. It must be unique for every application. The length cannot exceed 64 characters. We recommended you to use a timestamp.
     * 
     */
    @Import(name="packageVersion")
    private @Nullable Output<String> packageVersion;

    /**
     * @return The version of the application that you want to deploy. It must be unique for every application. The length cannot exceed 64 characters. We recommended you to use a timestamp.
     * 
     */
    public Optional<Output<String>> packageVersion() {
        return Optional.ofNullable(this.packageVersion);
    }

    /**
     * The address to store the uploaded web application (WAR) package for application deployment. This parameter is required when the deployType parameter is set as url.
     * 
     */
    @Import(name="warUrl", required=true)
    private Output<String> warUrl;

    /**
     * @return The address to store the uploaded web application (WAR) package for application deployment. This parameter is required when the deployType parameter is set as url.
     * 
     */
    public Output<String> warUrl() {
        return this.warUrl;
    }

    private ApplicationDeploymentArgs() {}

    private ApplicationDeploymentArgs(ApplicationDeploymentArgs $) {
        this.appId = $.appId;
        this.groupId = $.groupId;
        this.packageVersion = $.packageVersion;
        this.warUrl = $.warUrl;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ApplicationDeploymentArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ApplicationDeploymentArgs $;

        public Builder() {
            $ = new ApplicationDeploymentArgs();
        }

        public Builder(ApplicationDeploymentArgs defaults) {
            $ = new ApplicationDeploymentArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param appId The ID of the application that you want to deploy.
         * 
         * @return builder
         * 
         */
        public Builder appId(Output<String> appId) {
            $.appId = appId;
            return this;
        }

        /**
         * @param appId The ID of the application that you want to deploy.
         * 
         * @return builder
         * 
         */
        public Builder appId(String appId) {
            return appId(Output.of(appId));
        }

        /**
         * @param groupId The ID of the instance group where the application is going to be deployed. Set this parameter to all if you want to deploy the application to all groups.
         * 
         * @return builder
         * 
         */
        public Builder groupId(Output<String> groupId) {
            $.groupId = groupId;
            return this;
        }

        /**
         * @param groupId The ID of the instance group where the application is going to be deployed. Set this parameter to all if you want to deploy the application to all groups.
         * 
         * @return builder
         * 
         */
        public Builder groupId(String groupId) {
            return groupId(Output.of(groupId));
        }

        /**
         * @param packageVersion The version of the application that you want to deploy. It must be unique for every application. The length cannot exceed 64 characters. We recommended you to use a timestamp.
         * 
         * @return builder
         * 
         */
        public Builder packageVersion(@Nullable Output<String> packageVersion) {
            $.packageVersion = packageVersion;
            return this;
        }

        /**
         * @param packageVersion The version of the application that you want to deploy. It must be unique for every application. The length cannot exceed 64 characters. We recommended you to use a timestamp.
         * 
         * @return builder
         * 
         */
        public Builder packageVersion(String packageVersion) {
            return packageVersion(Output.of(packageVersion));
        }

        /**
         * @param warUrl The address to store the uploaded web application (WAR) package for application deployment. This parameter is required when the deployType parameter is set as url.
         * 
         * @return builder
         * 
         */
        public Builder warUrl(Output<String> warUrl) {
            $.warUrl = warUrl;
            return this;
        }

        /**
         * @param warUrl The address to store the uploaded web application (WAR) package for application deployment. This parameter is required when the deployType parameter is set as url.
         * 
         * @return builder
         * 
         */
        public Builder warUrl(String warUrl) {
            return warUrl(Output.of(warUrl));
        }

        public ApplicationDeploymentArgs build() {
            if ($.appId == null) {
                throw new MissingRequiredPropertyException("ApplicationDeploymentArgs", "appId");
            }
            if ($.groupId == null) {
                throw new MissingRequiredPropertyException("ApplicationDeploymentArgs", "groupId");
            }
            if ($.warUrl == null) {
                throw new MissingRequiredPropertyException("ApplicationDeploymentArgs", "warUrl");
            }
            return $;
        }
    }

}
