// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.vpc.inputs;

import com.pulumi.alicloud.vpc.inputs.TrafficMirrorFilterEgressRuleArgs;
import com.pulumi.alicloud.vpc.inputs.TrafficMirrorFilterIngressRuleArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TrafficMirrorFilterState extends com.pulumi.resources.ResourceArgs {

    public static final TrafficMirrorFilterState Empty = new TrafficMirrorFilterState();

    /**
     * Whether to PreCheck only this request. Value:
     * - **true**: The check request is sent without creating traffic Image filter conditions. Check items include whether required parameters, request format, and business restrictions are filled in. If the check does not pass, the corresponding error is returned. If the check passes, the error code &#39;DryRunOperation&#39; is returned &#39;.
     * - **false** (default): Sends a normal request, returns a 2xx HTTP status code after passing the check, and directly creates a filter condition.
     * 
     */
    @Import(name="dryRun")
    private @Nullable Output<Boolean> dryRun;

    /**
     * @return Whether to PreCheck only this request. Value:
     * - **true**: The check request is sent without creating traffic Image filter conditions. Check items include whether required parameters, request format, and business restrictions are filled in. If the check does not pass, the corresponding error is returned. If the check passes, the error code &#39;DryRunOperation&#39; is returned &#39;.
     * - **false** (default): Sends a normal request, returns a 2xx HTTP status code after passing the check, and directly creates a filter condition.
     * 
     */
    public Optional<Output<Boolean>> dryRun() {
        return Optional.ofNullable(this.dryRun);
    }

    /**
     * Information about the outbound rule. See the following `Block EgressRules`.
     * 
     */
    @Import(name="egressRules")
    private @Nullable Output<List<TrafficMirrorFilterEgressRuleArgs>> egressRules;

    /**
     * @return Information about the outbound rule. See the following `Block EgressRules`.
     * 
     */
    public Optional<Output<List<TrafficMirrorFilterEgressRuleArgs>>> egressRules() {
        return Optional.ofNullable(this.egressRules);
    }

    /**
     * Inward direction rule information. See the following `Block IngressRules`.
     * 
     */
    @Import(name="ingressRules")
    private @Nullable Output<List<TrafficMirrorFilterIngressRuleArgs>> ingressRules;

    /**
     * @return Inward direction rule information. See the following `Block IngressRules`.
     * 
     */
    public Optional<Output<List<TrafficMirrorFilterIngressRuleArgs>>> ingressRules() {
        return Optional.ofNullable(this.ingressRules);
    }

    /**
     * The ID of the resource group to which the VPC belongs.
     * 
     */
    @Import(name="resourceGroupId")
    private @Nullable Output<String> resourceGroupId;

    /**
     * @return The ID of the resource group to which the VPC belongs.
     * 
     */
    public Optional<Output<String>> resourceGroupId() {
        return Optional.ofNullable(this.resourceGroupId);
    }

    /**
     * The status of the resource.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return The status of the resource.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * The tags of this resource.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return The tags of this resource.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * The description of the TrafficMirrorFilter.
     * 
     */
    @Import(name="trafficMirrorFilterDescription")
    private @Nullable Output<String> trafficMirrorFilterDescription;

    /**
     * @return The description of the TrafficMirrorFilter.
     * 
     */
    public Optional<Output<String>> trafficMirrorFilterDescription() {
        return Optional.ofNullable(this.trafficMirrorFilterDescription);
    }

    /**
     * The name of the TrafficMirrorFilter.
     * 
     */
    @Import(name="trafficMirrorFilterName")
    private @Nullable Output<String> trafficMirrorFilterName;

    /**
     * @return The name of the TrafficMirrorFilter.
     * 
     */
    public Optional<Output<String>> trafficMirrorFilterName() {
        return Optional.ofNullable(this.trafficMirrorFilterName);
    }

    private TrafficMirrorFilterState() {}

    private TrafficMirrorFilterState(TrafficMirrorFilterState $) {
        this.dryRun = $.dryRun;
        this.egressRules = $.egressRules;
        this.ingressRules = $.ingressRules;
        this.resourceGroupId = $.resourceGroupId;
        this.status = $.status;
        this.tags = $.tags;
        this.trafficMirrorFilterDescription = $.trafficMirrorFilterDescription;
        this.trafficMirrorFilterName = $.trafficMirrorFilterName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TrafficMirrorFilterState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TrafficMirrorFilterState $;

        public Builder() {
            $ = new TrafficMirrorFilterState();
        }

        public Builder(TrafficMirrorFilterState defaults) {
            $ = new TrafficMirrorFilterState(Objects.requireNonNull(defaults));
        }

        /**
         * @param dryRun Whether to PreCheck only this request. Value:
         * - **true**: The check request is sent without creating traffic Image filter conditions. Check items include whether required parameters, request format, and business restrictions are filled in. If the check does not pass, the corresponding error is returned. If the check passes, the error code &#39;DryRunOperation&#39; is returned &#39;.
         * - **false** (default): Sends a normal request, returns a 2xx HTTP status code after passing the check, and directly creates a filter condition.
         * 
         * @return builder
         * 
         */
        public Builder dryRun(@Nullable Output<Boolean> dryRun) {
            $.dryRun = dryRun;
            return this;
        }

        /**
         * @param dryRun Whether to PreCheck only this request. Value:
         * - **true**: The check request is sent without creating traffic Image filter conditions. Check items include whether required parameters, request format, and business restrictions are filled in. If the check does not pass, the corresponding error is returned. If the check passes, the error code &#39;DryRunOperation&#39; is returned &#39;.
         * - **false** (default): Sends a normal request, returns a 2xx HTTP status code after passing the check, and directly creates a filter condition.
         * 
         * @return builder
         * 
         */
        public Builder dryRun(Boolean dryRun) {
            return dryRun(Output.of(dryRun));
        }

        /**
         * @param egressRules Information about the outbound rule. See the following `Block EgressRules`.
         * 
         * @return builder
         * 
         */
        public Builder egressRules(@Nullable Output<List<TrafficMirrorFilterEgressRuleArgs>> egressRules) {
            $.egressRules = egressRules;
            return this;
        }

        /**
         * @param egressRules Information about the outbound rule. See the following `Block EgressRules`.
         * 
         * @return builder
         * 
         */
        public Builder egressRules(List<TrafficMirrorFilterEgressRuleArgs> egressRules) {
            return egressRules(Output.of(egressRules));
        }

        /**
         * @param egressRules Information about the outbound rule. See the following `Block EgressRules`.
         * 
         * @return builder
         * 
         */
        public Builder egressRules(TrafficMirrorFilterEgressRuleArgs... egressRules) {
            return egressRules(List.of(egressRules));
        }

        /**
         * @param ingressRules Inward direction rule information. See the following `Block IngressRules`.
         * 
         * @return builder
         * 
         */
        public Builder ingressRules(@Nullable Output<List<TrafficMirrorFilterIngressRuleArgs>> ingressRules) {
            $.ingressRules = ingressRules;
            return this;
        }

        /**
         * @param ingressRules Inward direction rule information. See the following `Block IngressRules`.
         * 
         * @return builder
         * 
         */
        public Builder ingressRules(List<TrafficMirrorFilterIngressRuleArgs> ingressRules) {
            return ingressRules(Output.of(ingressRules));
        }

        /**
         * @param ingressRules Inward direction rule information. See the following `Block IngressRules`.
         * 
         * @return builder
         * 
         */
        public Builder ingressRules(TrafficMirrorFilterIngressRuleArgs... ingressRules) {
            return ingressRules(List.of(ingressRules));
        }

        /**
         * @param resourceGroupId The ID of the resource group to which the VPC belongs.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupId(@Nullable Output<String> resourceGroupId) {
            $.resourceGroupId = resourceGroupId;
            return this;
        }

        /**
         * @param resourceGroupId The ID of the resource group to which the VPC belongs.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupId(String resourceGroupId) {
            return resourceGroupId(Output.of(resourceGroupId));
        }

        /**
         * @param status The status of the resource.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status The status of the resource.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param tags The tags of this resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags The tags of this resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param trafficMirrorFilterDescription The description of the TrafficMirrorFilter.
         * 
         * @return builder
         * 
         */
        public Builder trafficMirrorFilterDescription(@Nullable Output<String> trafficMirrorFilterDescription) {
            $.trafficMirrorFilterDescription = trafficMirrorFilterDescription;
            return this;
        }

        /**
         * @param trafficMirrorFilterDescription The description of the TrafficMirrorFilter.
         * 
         * @return builder
         * 
         */
        public Builder trafficMirrorFilterDescription(String trafficMirrorFilterDescription) {
            return trafficMirrorFilterDescription(Output.of(trafficMirrorFilterDescription));
        }

        /**
         * @param trafficMirrorFilterName The name of the TrafficMirrorFilter.
         * 
         * @return builder
         * 
         */
        public Builder trafficMirrorFilterName(@Nullable Output<String> trafficMirrorFilterName) {
            $.trafficMirrorFilterName = trafficMirrorFilterName;
            return this;
        }

        /**
         * @param trafficMirrorFilterName The name of the TrafficMirrorFilter.
         * 
         * @return builder
         * 
         */
        public Builder trafficMirrorFilterName(String trafficMirrorFilterName) {
            return trafficMirrorFilterName(Output.of(trafficMirrorFilterName));
        }

        public TrafficMirrorFilterState build() {
            return $;
        }
    }

}
