// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.dts;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SubscriptionJobArgs extends com.pulumi.resources.ResourceArgs {

    public static final SubscriptionJobArgs Empty = new SubscriptionJobArgs();

    /**
     * Subscription start time in Unix timestamp format.
     * 
     */
    @Import(name="checkpoint")
    private @Nullable Output<String> checkpoint;

    /**
     * @return Subscription start time in Unix timestamp format.
     * 
     */
    public Optional<Output<String>> checkpoint() {
        return Optional.ofNullable(this.checkpoint);
    }

    /**
     * [ETL specifications](https://help.aliyun.com/document_detail/212324.html). The unit is the computing unit ComputeUnit (CU), 1CU=1vCPU+4 GB memory. The value range is an integer greater than or equal to 2.
     * 
     */
    @Import(name="computeUnit")
    private @Nullable Output<Integer> computeUnit;

    /**
     * @return [ETL specifications](https://help.aliyun.com/document_detail/212324.html). The unit is the computing unit ComputeUnit (CU), 1CU=1vCPU+4 GB memory. The value range is an integer greater than or equal to 2.
     * 
     */
    public Optional<Output<Integer>> computeUnit() {
        return Optional.ofNullable(this.computeUnit);
    }

    /**
     * The number of private customized RDS instances under PolarDB-X. The default value is 1. This parameter needs to be passed only when `source_endpoint_engine_name` equals `drds`.
     * 
     */
    @Import(name="databaseCount")
    private @Nullable Output<Integer> databaseCount;

    /**
     * @return The number of private customized RDS instances under PolarDB-X. The default value is 1. This parameter needs to be passed only when `source_endpoint_engine_name` equals `drds`.
     * 
     */
    public Optional<Output<Integer>> databaseCount() {
        return Optional.ofNullable(this.databaseCount);
    }

    /**
     * Subscription object, in the format of JSON strings. For detailed definitions, please refer to the description of migration, synchronization or subscription objects [document](https://help.aliyun.com/document_detail/209545.html).
     * 
     */
    @Import(name="dbList")
    private @Nullable Output<String> dbList;

    /**
     * @return Subscription object, in the format of JSON strings. For detailed definitions, please refer to the description of migration, synchronization or subscription objects [document](https://help.aliyun.com/document_detail/209545.html).
     * 
     */
    public Optional<Output<String>> dbList() {
        return Optional.ofNullable(this.dbList);
    }

    /**
     * This parameter decides whether to monitor the delay status. Valid values: `true`, `false`.
     * 
     */
    @Import(name="delayNotice")
    private @Nullable Output<Boolean> delayNotice;

    /**
     * @return This parameter decides whether to monitor the delay status. Valid values: `true`, `false`.
     * 
     */
    public Optional<Output<Boolean>> delayNotice() {
        return Optional.ofNullable(this.delayNotice);
    }

    /**
     * The mobile phone number of the contact who delayed the alarm. Multiple mobile phone numbers separated by English commas `,`. This parameter currently only supports China stations, and only supports mainland mobile phone numbers, and up to 10 mobile phone numbers can be passed in.
     * 
     */
    @Import(name="delayPhone")
    private @Nullable Output<String> delayPhone;

    /**
     * @return The mobile phone number of the contact who delayed the alarm. Multiple mobile phone numbers separated by English commas `,`. This parameter currently only supports China stations, and only supports mainland mobile phone numbers, and up to 10 mobile phone numbers can be passed in.
     * 
     */
    public Optional<Output<String>> delayPhone() {
        return Optional.ofNullable(this.delayPhone);
    }

    /**
     * When `delay_notice` is set to `true`, this parameter must be passed in. The threshold for triggering the delay alarm. The unit is second and needs to be an integer. The threshold can be set according to business needs. It is recommended to set it above 10 seconds to avoid delay fluctuations caused by network and database load.
     * 
     */
    @Import(name="delayRuleTime")
    private @Nullable Output<String> delayRuleTime;

    /**
     * @return When `delay_notice` is set to `true`, this parameter must be passed in. The threshold for triggering the delay alarm. The unit is second and needs to be an integer. The threshold can be set according to business needs. It is recommended to set it above 10 seconds to avoid delay fluctuations caused by network and database load.
     * 
     */
    public Optional<Output<String>> delayRuleTime() {
        return Optional.ofNullable(this.delayRuleTime);
    }

    /**
     * The destination endpoint engine name. Valid values: `ADS`, `DB2`, `DRDS`, `DataHub`, `Greenplum`, `MSSQL`, `MySQL`, `PolarDB`, `PostgreSQL`, `Redis`, `Tablestore`, `as400`, `clickhouse`, `kafka`, `mongodb`, `odps`, `oracle`, `polardb_o`, `polardb_pg`, `tidb`.
     * 
     */
    @Import(name="destinationEndpointEngineName")
    private @Nullable Output<String> destinationEndpointEngineName;

    /**
     * @return The destination endpoint engine name. Valid values: `ADS`, `DB2`, `DRDS`, `DataHub`, `Greenplum`, `MSSQL`, `MySQL`, `PolarDB`, `PostgreSQL`, `Redis`, `Tablestore`, `as400`, `clickhouse`, `kafka`, `mongodb`, `odps`, `oracle`, `polardb_o`, `polardb_pg`, `tidb`.
     * 
     */
    public Optional<Output<String>> destinationEndpointEngineName() {
        return Optional.ofNullable(this.destinationEndpointEngineName);
    }

    /**
     * The destination region. List of [supported regions](https://help.aliyun.com/document_detail/141033.html).
     * 
     */
    @Import(name="destinationRegion")
    private @Nullable Output<String> destinationRegion;

    /**
     * @return The destination region. List of [supported regions](https://help.aliyun.com/document_detail/141033.html).
     * 
     */
    public Optional<Output<String>> destinationRegion() {
        return Optional.ofNullable(this.destinationRegion);
    }

    /**
     * The ID of subscription instance.
     * 
     */
    @Import(name="dtsInstanceId")
    private @Nullable Output<String> dtsInstanceId;

    /**
     * @return The ID of subscription instance.
     * 
     */
    public Optional<Output<String>> dtsInstanceId() {
        return Optional.ofNullable(this.dtsInstanceId);
    }

    /**
     * The name of subscription task.
     * 
     */
    @Import(name="dtsJobName")
    private @Nullable Output<String> dtsJobName;

    /**
     * @return The name of subscription task.
     * 
     */
    public Optional<Output<String>> dtsJobName() {
        return Optional.ofNullable(this.dtsJobName);
    }

    /**
     * This parameter decides whether to monitor abnormal status. Valid values: `true`, `false`.
     * 
     */
    @Import(name="errorNotice")
    private @Nullable Output<Boolean> errorNotice;

    /**
     * @return This parameter decides whether to monitor abnormal status. Valid values: `true`, `false`.
     * 
     */
    public Optional<Output<Boolean>> errorNotice() {
        return Optional.ofNullable(this.errorNotice);
    }

    /**
     * The mobile phone number of the contact for abnormal alarm. Multiple mobile phone numbers separated by English commas `,`. This parameter currently only supports China stations, and only supports mainland mobile phone numbers, and up to 10 mobile phone numbers can be passed in.
     * 
     */
    @Import(name="errorPhone")
    private @Nullable Output<String> errorPhone;

    /**
     * @return The mobile phone number of the contact for abnormal alarm. Multiple mobile phone numbers separated by English commas `,`. This parameter currently only supports China stations, and only supports mainland mobile phone numbers, and up to 10 mobile phone numbers can be passed in.
     * 
     */
    public Optional<Output<String>> errorPhone() {
        return Optional.ofNullable(this.errorPhone);
    }

    /**
     * The instance class. Valid values: `large`, `medium`, `micro`, `small`, `xlarge`, `xxlarge`.
     * 
     */
    @Import(name="instanceClass")
    private @Nullable Output<String> instanceClass;

    /**
     * @return The instance class. Valid values: `large`, `medium`, `micro`, `small`, `xlarge`, `xxlarge`.
     * 
     */
    public Optional<Output<String>> instanceClass() {
        return Optional.ofNullable(this.instanceClass);
    }

    /**
     * The duration of prepaid instance purchase. When `payment_type` is `Subscription`, this parameter is valid and must be passed in.
     * 
     */
    @Import(name="paymentDuration")
    private @Nullable Output<Integer> paymentDuration;

    /**
     * @return The duration of prepaid instance purchase. When `payment_type` is `Subscription`, this parameter is valid and must be passed in.
     * 
     */
    public Optional<Output<Integer>> paymentDuration() {
        return Optional.ofNullable(this.paymentDuration);
    }

    /**
     * The payment duration unit. Valid values: `Month`, `Year`. When `payment_type` is `Subscription`, this parameter is valid and must be passed in.
     * 
     */
    @Import(name="paymentDurationUnit")
    private @Nullable Output<String> paymentDurationUnit;

    /**
     * @return The payment duration unit. Valid values: `Month`, `Year`. When `payment_type` is `Subscription`, this parameter is valid and must be passed in.
     * 
     */
    public Optional<Output<String>> paymentDurationUnit() {
        return Optional.ofNullable(this.paymentDurationUnit);
    }

    /**
     * The payment type of the resource. Valid values: `Subscription`, `PayAsYouGo`.
     * 
     */
    @Import(name="paymentType", required=true)
    private Output<String> paymentType;

    /**
     * @return The payment type of the resource. Valid values: `Subscription`, `PayAsYouGo`.
     * 
     */
    public Output<String> paymentType() {
        return this.paymentType;
    }

    /**
     * DTS reserves parameters, the format is a JSON string, you can pass in this parameter to complete the source and target database information (such as the data storage format of the target Kafka database, the instance ID of the cloud enterprise network CEN). For more information, please refer to the parameter description of the [Reserve parameter](https://help.aliyun.com/document_detail/176470.html).
     * 
     */
    @Import(name="reserve")
    private @Nullable Output<String> reserve;

    /**
     * @return DTS reserves parameters, the format is a JSON string, you can pass in this parameter to complete the source and target database information (such as the data storage format of the target Kafka database, the instance ID of the cloud enterprise network CEN). For more information, please refer to the parameter description of the [Reserve parameter](https://help.aliyun.com/document_detail/176470.html).
     * 
     */
    public Optional<Output<String>> reserve() {
        return Optional.ofNullable(this.reserve);
    }

    /**
     * To subscribe to the name of the database.
     * 
     */
    @Import(name="sourceEndpointDatabaseName")
    private @Nullable Output<String> sourceEndpointDatabaseName;

    /**
     * @return To subscribe to the name of the database.
     * 
     */
    public Optional<Output<String>> sourceEndpointDatabaseName() {
        return Optional.ofNullable(this.sourceEndpointDatabaseName);
    }

    /**
     * The source database type value is MySQL or Oracle. Valid values: `MySQL`, `Oracle`.
     * 
     */
    @Import(name="sourceEndpointEngineName", required=true)
    private Output<String> sourceEndpointEngineName;

    /**
     * @return The source database type value is MySQL or Oracle. Valid values: `MySQL`, `Oracle`.
     * 
     */
    public Output<String> sourceEndpointEngineName() {
        return this.sourceEndpointEngineName;
    }

    /**
     * The ID of source instance. Only when the type of source database instance was RDS MySQL, PolarDB-X 1.0, PolarDB MySQL, this parameter can be available and must be set.
     * 
     */
    @Import(name="sourceEndpointInstanceId")
    private @Nullable Output<String> sourceEndpointInstanceId;

    /**
     * @return The ID of source instance. Only when the type of source database instance was RDS MySQL, PolarDB-X 1.0, PolarDB MySQL, this parameter can be available and must be set.
     * 
     */
    public Optional<Output<String>> sourceEndpointInstanceId() {
        return Optional.ofNullable(this.sourceEndpointInstanceId);
    }

    /**
     * The type of source instance. Valid values: `RDS`, `PolarDB`, `DRDS`, `LocalInstance`, `ECS`, `Express`, `CEN`, `dg`.
     * 
     */
    @Import(name="sourceEndpointInstanceType", required=true)
    private Output<String> sourceEndpointInstanceType;

    /**
     * @return The type of source instance. Valid values: `RDS`, `PolarDB`, `DRDS`, `LocalInstance`, `ECS`, `Express`, `CEN`, `dg`.
     * 
     */
    public Output<String> sourceEndpointInstanceType() {
        return this.sourceEndpointInstanceType;
    }

    /**
     * The IP of source endpoint.
     * 
     */
    @Import(name="sourceEndpointIp")
    private @Nullable Output<String> sourceEndpointIp;

    /**
     * @return The IP of source endpoint.
     * 
     */
    public Optional<Output<String>> sourceEndpointIp() {
        return Optional.ofNullable(this.sourceEndpointIp);
    }

    /**
     * The SID of Oracle Database. When the source database is self-built Oracle and the Oracle database is a non-RAC instance, this parameter is available and must be passed in.
     * 
     */
    @Import(name="sourceEndpointOracleSid")
    private @Nullable Output<String> sourceEndpointOracleSid;

    /**
     * @return The SID of Oracle Database. When the source database is self-built Oracle and the Oracle database is a non-RAC instance, this parameter is available and must be passed in.
     * 
     */
    public Optional<Output<String>> sourceEndpointOracleSid() {
        return Optional.ofNullable(this.sourceEndpointOracleSid);
    }

    /**
     * The Alibaba Cloud account ID to which the source instance belongs. This parameter is only available when configuring data subscriptions across Alibaba Cloud accounts and must be passed in.
     * 
     */
    @Import(name="sourceEndpointOwnerId")
    private @Nullable Output<String> sourceEndpointOwnerId;

    /**
     * @return The Alibaba Cloud account ID to which the source instance belongs. This parameter is only available when configuring data subscriptions across Alibaba Cloud accounts and must be passed in.
     * 
     */
    public Optional<Output<String>> sourceEndpointOwnerId() {
        return Optional.ofNullable(this.sourceEndpointOwnerId);
    }

    /**
     * The password of source database instance account.
     * 
     */
    @Import(name="sourceEndpointPassword")
    private @Nullable Output<String> sourceEndpointPassword;

    /**
     * @return The password of source database instance account.
     * 
     */
    public Optional<Output<String>> sourceEndpointPassword() {
        return Optional.ofNullable(this.sourceEndpointPassword);
    }

    /**
     * The port of source database.
     * 
     */
    @Import(name="sourceEndpointPort")
    private @Nullable Output<String> sourceEndpointPort;

    /**
     * @return The port of source database.
     * 
     */
    public Optional<Output<String>> sourceEndpointPort() {
        return Optional.ofNullable(this.sourceEndpointPort);
    }

    /**
     * The region of source database.
     * 
     */
    @Import(name="sourceEndpointRegion", required=true)
    private Output<String> sourceEndpointRegion;

    /**
     * @return The region of source database.
     * 
     */
    public Output<String> sourceEndpointRegion() {
        return this.sourceEndpointRegion;
    }

    /**
     * Both the authorization roles. When the source instance and configure subscriptions task of the Alibaba Cloud account is not the same as the need to pass the parameter, to specify the source of the authorization roles, to allow configuration subscription task of the Alibaba Cloud account to access the source of the source instance information.
     * 
     */
    @Import(name="sourceEndpointRole")
    private @Nullable Output<String> sourceEndpointRole;

    /**
     * @return Both the authorization roles. When the source instance and configure subscriptions task of the Alibaba Cloud account is not the same as the need to pass the parameter, to specify the source of the authorization roles, to allow configuration subscription task of the Alibaba Cloud account to access the source of the source instance information.
     * 
     */
    public Optional<Output<String>> sourceEndpointRole() {
        return Optional.ofNullable(this.sourceEndpointRole);
    }

    /**
     * The username of source database instance account.
     * 
     */
    @Import(name="sourceEndpointUserName")
    private @Nullable Output<String> sourceEndpointUserName;

    /**
     * @return The username of source database instance account.
     * 
     */
    public Optional<Output<String>> sourceEndpointUserName() {
        return Optional.ofNullable(this.sourceEndpointUserName);
    }

    /**
     * The status of the task. Valid values: `Normal`, `Abnormal`. When a task created, it is in this state of `NotStarted`. You can specify this state to `Normal` to start the job, and specify this state of `Abnormal` to stop the job. **Note: We treat the state `Starting` as the state of `Normal`, and consider the two states to be consistent on the user side.**
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return The status of the task. Valid values: `Normal`, `Abnormal`. When a task created, it is in this state of `NotStarted`. You can specify this state to `Normal` to start the job, and specify this state of `Abnormal` to stop the job. **Note: We treat the state `Starting` as the state of `Normal`, and consider the two states to be consistent on the user side.**
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * Whether to subscribe the DDL type of data. Valid values: `true`, `false`.
     * 
     */
    @Import(name="subscriptionDataTypeDdl")
    private @Nullable Output<Boolean> subscriptionDataTypeDdl;

    /**
     * @return Whether to subscribe the DDL type of data. Valid values: `true`, `false`.
     * 
     */
    public Optional<Output<Boolean>> subscriptionDataTypeDdl() {
        return Optional.ofNullable(this.subscriptionDataTypeDdl);
    }

    /**
     * Whether to subscribe the DML type of data. Valid values: `true`, `false`.
     * 
     */
    @Import(name="subscriptionDataTypeDml")
    private @Nullable Output<Boolean> subscriptionDataTypeDml;

    /**
     * @return Whether to subscribe the DML type of data. Valid values: `true`, `false`.
     * 
     */
    public Optional<Output<Boolean>> subscriptionDataTypeDml() {
        return Optional.ofNullable(this.subscriptionDataTypeDml);
    }

    /**
     * Subscription task type of network value: classic: classic Network. Virtual Private Cloud (vpc): a vpc. Valid values: `classic`, `vpc`.
     * 
     */
    @Import(name="subscriptionInstanceNetworkType")
    private @Nullable Output<String> subscriptionInstanceNetworkType;

    /**
     * @return Subscription task type of network value: classic: classic Network. Virtual Private Cloud (vpc): a vpc. Valid values: `classic`, `vpc`.
     * 
     */
    public Optional<Output<String>> subscriptionInstanceNetworkType() {
        return Optional.ofNullable(this.subscriptionInstanceNetworkType);
    }

    /**
     * The ID of subscription vpc instance. When the value of `subscription_instance_network_type` is vpc, this parameter is available and must be passed in.
     * 
     */
    @Import(name="subscriptionInstanceVpcId")
    private @Nullable Output<String> subscriptionInstanceVpcId;

    /**
     * @return The ID of subscription vpc instance. When the value of `subscription_instance_network_type` is vpc, this parameter is available and must be passed in.
     * 
     */
    public Optional<Output<String>> subscriptionInstanceVpcId() {
        return Optional.ofNullable(this.subscriptionInstanceVpcId);
    }

    /**
     * The ID of subscription VSwitch instance. When the value of `subscription_instance_network_type` is vpc, this parameter is available and must be passed in.
     * 
     */
    @Import(name="subscriptionInstanceVswitchId")
    private @Nullable Output<String> subscriptionInstanceVswitchId;

    /**
     * @return The ID of subscription VSwitch instance. When the value of `subscription_instance_network_type` is vpc, this parameter is available and must be passed in.
     * 
     */
    public Optional<Output<String>> subscriptionInstanceVswitchId() {
        return Optional.ofNullable(this.subscriptionInstanceVswitchId);
    }

    /**
     * The sync architecture. Valid values: `bidirectional`, `oneway`.
     * 
     */
    @Import(name="syncArchitecture")
    private @Nullable Output<String> syncArchitecture;

    /**
     * @return The sync architecture. Valid values: `bidirectional`, `oneway`.
     * 
     */
    public Optional<Output<String>> syncArchitecture() {
        return Optional.ofNullable(this.syncArchitecture);
    }

    /**
     * The synchronization direction. Valid values: `Forward`, `Reverse`. When the topology type of the data synchronization instance is bidirectional, it can be passed in to reverse to start the reverse synchronization link.
     * 
     */
    @Import(name="synchronizationDirection")
    private @Nullable Output<String> synchronizationDirection;

    /**
     * @return The synchronization direction. Valid values: `Forward`, `Reverse`. When the topology type of the data synchronization instance is bidirectional, it can be passed in to reverse to start the reverse synchronization link.
     * 
     */
    public Optional<Output<String>> synchronizationDirection() {
        return Optional.ofNullable(this.synchronizationDirection);
    }

    /**
     * A mapping of tags to assign to the resource.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,Object>> tags;

    /**
     * @return A mapping of tags to assign to the resource.
     * 
     */
    public Optional<Output<Map<String,Object>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private SubscriptionJobArgs() {}

    private SubscriptionJobArgs(SubscriptionJobArgs $) {
        this.checkpoint = $.checkpoint;
        this.computeUnit = $.computeUnit;
        this.databaseCount = $.databaseCount;
        this.dbList = $.dbList;
        this.delayNotice = $.delayNotice;
        this.delayPhone = $.delayPhone;
        this.delayRuleTime = $.delayRuleTime;
        this.destinationEndpointEngineName = $.destinationEndpointEngineName;
        this.destinationRegion = $.destinationRegion;
        this.dtsInstanceId = $.dtsInstanceId;
        this.dtsJobName = $.dtsJobName;
        this.errorNotice = $.errorNotice;
        this.errorPhone = $.errorPhone;
        this.instanceClass = $.instanceClass;
        this.paymentDuration = $.paymentDuration;
        this.paymentDurationUnit = $.paymentDurationUnit;
        this.paymentType = $.paymentType;
        this.reserve = $.reserve;
        this.sourceEndpointDatabaseName = $.sourceEndpointDatabaseName;
        this.sourceEndpointEngineName = $.sourceEndpointEngineName;
        this.sourceEndpointInstanceId = $.sourceEndpointInstanceId;
        this.sourceEndpointInstanceType = $.sourceEndpointInstanceType;
        this.sourceEndpointIp = $.sourceEndpointIp;
        this.sourceEndpointOracleSid = $.sourceEndpointOracleSid;
        this.sourceEndpointOwnerId = $.sourceEndpointOwnerId;
        this.sourceEndpointPassword = $.sourceEndpointPassword;
        this.sourceEndpointPort = $.sourceEndpointPort;
        this.sourceEndpointRegion = $.sourceEndpointRegion;
        this.sourceEndpointRole = $.sourceEndpointRole;
        this.sourceEndpointUserName = $.sourceEndpointUserName;
        this.status = $.status;
        this.subscriptionDataTypeDdl = $.subscriptionDataTypeDdl;
        this.subscriptionDataTypeDml = $.subscriptionDataTypeDml;
        this.subscriptionInstanceNetworkType = $.subscriptionInstanceNetworkType;
        this.subscriptionInstanceVpcId = $.subscriptionInstanceVpcId;
        this.subscriptionInstanceVswitchId = $.subscriptionInstanceVswitchId;
        this.syncArchitecture = $.syncArchitecture;
        this.synchronizationDirection = $.synchronizationDirection;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SubscriptionJobArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SubscriptionJobArgs $;

        public Builder() {
            $ = new SubscriptionJobArgs();
        }

        public Builder(SubscriptionJobArgs defaults) {
            $ = new SubscriptionJobArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param checkpoint Subscription start time in Unix timestamp format.
         * 
         * @return builder
         * 
         */
        public Builder checkpoint(@Nullable Output<String> checkpoint) {
            $.checkpoint = checkpoint;
            return this;
        }

        /**
         * @param checkpoint Subscription start time in Unix timestamp format.
         * 
         * @return builder
         * 
         */
        public Builder checkpoint(String checkpoint) {
            return checkpoint(Output.of(checkpoint));
        }

        /**
         * @param computeUnit [ETL specifications](https://help.aliyun.com/document_detail/212324.html). The unit is the computing unit ComputeUnit (CU), 1CU=1vCPU+4 GB memory. The value range is an integer greater than or equal to 2.
         * 
         * @return builder
         * 
         */
        public Builder computeUnit(@Nullable Output<Integer> computeUnit) {
            $.computeUnit = computeUnit;
            return this;
        }

        /**
         * @param computeUnit [ETL specifications](https://help.aliyun.com/document_detail/212324.html). The unit is the computing unit ComputeUnit (CU), 1CU=1vCPU+4 GB memory. The value range is an integer greater than or equal to 2.
         * 
         * @return builder
         * 
         */
        public Builder computeUnit(Integer computeUnit) {
            return computeUnit(Output.of(computeUnit));
        }

        /**
         * @param databaseCount The number of private customized RDS instances under PolarDB-X. The default value is 1. This parameter needs to be passed only when `source_endpoint_engine_name` equals `drds`.
         * 
         * @return builder
         * 
         */
        public Builder databaseCount(@Nullable Output<Integer> databaseCount) {
            $.databaseCount = databaseCount;
            return this;
        }

        /**
         * @param databaseCount The number of private customized RDS instances under PolarDB-X. The default value is 1. This parameter needs to be passed only when `source_endpoint_engine_name` equals `drds`.
         * 
         * @return builder
         * 
         */
        public Builder databaseCount(Integer databaseCount) {
            return databaseCount(Output.of(databaseCount));
        }

        /**
         * @param dbList Subscription object, in the format of JSON strings. For detailed definitions, please refer to the description of migration, synchronization or subscription objects [document](https://help.aliyun.com/document_detail/209545.html).
         * 
         * @return builder
         * 
         */
        public Builder dbList(@Nullable Output<String> dbList) {
            $.dbList = dbList;
            return this;
        }

        /**
         * @param dbList Subscription object, in the format of JSON strings. For detailed definitions, please refer to the description of migration, synchronization or subscription objects [document](https://help.aliyun.com/document_detail/209545.html).
         * 
         * @return builder
         * 
         */
        public Builder dbList(String dbList) {
            return dbList(Output.of(dbList));
        }

        /**
         * @param delayNotice This parameter decides whether to monitor the delay status. Valid values: `true`, `false`.
         * 
         * @return builder
         * 
         */
        public Builder delayNotice(@Nullable Output<Boolean> delayNotice) {
            $.delayNotice = delayNotice;
            return this;
        }

        /**
         * @param delayNotice This parameter decides whether to monitor the delay status. Valid values: `true`, `false`.
         * 
         * @return builder
         * 
         */
        public Builder delayNotice(Boolean delayNotice) {
            return delayNotice(Output.of(delayNotice));
        }

        /**
         * @param delayPhone The mobile phone number of the contact who delayed the alarm. Multiple mobile phone numbers separated by English commas `,`. This parameter currently only supports China stations, and only supports mainland mobile phone numbers, and up to 10 mobile phone numbers can be passed in.
         * 
         * @return builder
         * 
         */
        public Builder delayPhone(@Nullable Output<String> delayPhone) {
            $.delayPhone = delayPhone;
            return this;
        }

        /**
         * @param delayPhone The mobile phone number of the contact who delayed the alarm. Multiple mobile phone numbers separated by English commas `,`. This parameter currently only supports China stations, and only supports mainland mobile phone numbers, and up to 10 mobile phone numbers can be passed in.
         * 
         * @return builder
         * 
         */
        public Builder delayPhone(String delayPhone) {
            return delayPhone(Output.of(delayPhone));
        }

        /**
         * @param delayRuleTime When `delay_notice` is set to `true`, this parameter must be passed in. The threshold for triggering the delay alarm. The unit is second and needs to be an integer. The threshold can be set according to business needs. It is recommended to set it above 10 seconds to avoid delay fluctuations caused by network and database load.
         * 
         * @return builder
         * 
         */
        public Builder delayRuleTime(@Nullable Output<String> delayRuleTime) {
            $.delayRuleTime = delayRuleTime;
            return this;
        }

        /**
         * @param delayRuleTime When `delay_notice` is set to `true`, this parameter must be passed in. The threshold for triggering the delay alarm. The unit is second and needs to be an integer. The threshold can be set according to business needs. It is recommended to set it above 10 seconds to avoid delay fluctuations caused by network and database load.
         * 
         * @return builder
         * 
         */
        public Builder delayRuleTime(String delayRuleTime) {
            return delayRuleTime(Output.of(delayRuleTime));
        }

        /**
         * @param destinationEndpointEngineName The destination endpoint engine name. Valid values: `ADS`, `DB2`, `DRDS`, `DataHub`, `Greenplum`, `MSSQL`, `MySQL`, `PolarDB`, `PostgreSQL`, `Redis`, `Tablestore`, `as400`, `clickhouse`, `kafka`, `mongodb`, `odps`, `oracle`, `polardb_o`, `polardb_pg`, `tidb`.
         * 
         * @return builder
         * 
         */
        public Builder destinationEndpointEngineName(@Nullable Output<String> destinationEndpointEngineName) {
            $.destinationEndpointEngineName = destinationEndpointEngineName;
            return this;
        }

        /**
         * @param destinationEndpointEngineName The destination endpoint engine name. Valid values: `ADS`, `DB2`, `DRDS`, `DataHub`, `Greenplum`, `MSSQL`, `MySQL`, `PolarDB`, `PostgreSQL`, `Redis`, `Tablestore`, `as400`, `clickhouse`, `kafka`, `mongodb`, `odps`, `oracle`, `polardb_o`, `polardb_pg`, `tidb`.
         * 
         * @return builder
         * 
         */
        public Builder destinationEndpointEngineName(String destinationEndpointEngineName) {
            return destinationEndpointEngineName(Output.of(destinationEndpointEngineName));
        }

        /**
         * @param destinationRegion The destination region. List of [supported regions](https://help.aliyun.com/document_detail/141033.html).
         * 
         * @return builder
         * 
         */
        public Builder destinationRegion(@Nullable Output<String> destinationRegion) {
            $.destinationRegion = destinationRegion;
            return this;
        }

        /**
         * @param destinationRegion The destination region. List of [supported regions](https://help.aliyun.com/document_detail/141033.html).
         * 
         * @return builder
         * 
         */
        public Builder destinationRegion(String destinationRegion) {
            return destinationRegion(Output.of(destinationRegion));
        }

        /**
         * @param dtsInstanceId The ID of subscription instance.
         * 
         * @return builder
         * 
         */
        public Builder dtsInstanceId(@Nullable Output<String> dtsInstanceId) {
            $.dtsInstanceId = dtsInstanceId;
            return this;
        }

        /**
         * @param dtsInstanceId The ID of subscription instance.
         * 
         * @return builder
         * 
         */
        public Builder dtsInstanceId(String dtsInstanceId) {
            return dtsInstanceId(Output.of(dtsInstanceId));
        }

        /**
         * @param dtsJobName The name of subscription task.
         * 
         * @return builder
         * 
         */
        public Builder dtsJobName(@Nullable Output<String> dtsJobName) {
            $.dtsJobName = dtsJobName;
            return this;
        }

        /**
         * @param dtsJobName The name of subscription task.
         * 
         * @return builder
         * 
         */
        public Builder dtsJobName(String dtsJobName) {
            return dtsJobName(Output.of(dtsJobName));
        }

        /**
         * @param errorNotice This parameter decides whether to monitor abnormal status. Valid values: `true`, `false`.
         * 
         * @return builder
         * 
         */
        public Builder errorNotice(@Nullable Output<Boolean> errorNotice) {
            $.errorNotice = errorNotice;
            return this;
        }

        /**
         * @param errorNotice This parameter decides whether to monitor abnormal status. Valid values: `true`, `false`.
         * 
         * @return builder
         * 
         */
        public Builder errorNotice(Boolean errorNotice) {
            return errorNotice(Output.of(errorNotice));
        }

        /**
         * @param errorPhone The mobile phone number of the contact for abnormal alarm. Multiple mobile phone numbers separated by English commas `,`. This parameter currently only supports China stations, and only supports mainland mobile phone numbers, and up to 10 mobile phone numbers can be passed in.
         * 
         * @return builder
         * 
         */
        public Builder errorPhone(@Nullable Output<String> errorPhone) {
            $.errorPhone = errorPhone;
            return this;
        }

        /**
         * @param errorPhone The mobile phone number of the contact for abnormal alarm. Multiple mobile phone numbers separated by English commas `,`. This parameter currently only supports China stations, and only supports mainland mobile phone numbers, and up to 10 mobile phone numbers can be passed in.
         * 
         * @return builder
         * 
         */
        public Builder errorPhone(String errorPhone) {
            return errorPhone(Output.of(errorPhone));
        }

        /**
         * @param instanceClass The instance class. Valid values: `large`, `medium`, `micro`, `small`, `xlarge`, `xxlarge`.
         * 
         * @return builder
         * 
         */
        public Builder instanceClass(@Nullable Output<String> instanceClass) {
            $.instanceClass = instanceClass;
            return this;
        }

        /**
         * @param instanceClass The instance class. Valid values: `large`, `medium`, `micro`, `small`, `xlarge`, `xxlarge`.
         * 
         * @return builder
         * 
         */
        public Builder instanceClass(String instanceClass) {
            return instanceClass(Output.of(instanceClass));
        }

        /**
         * @param paymentDuration The duration of prepaid instance purchase. When `payment_type` is `Subscription`, this parameter is valid and must be passed in.
         * 
         * @return builder
         * 
         */
        public Builder paymentDuration(@Nullable Output<Integer> paymentDuration) {
            $.paymentDuration = paymentDuration;
            return this;
        }

        /**
         * @param paymentDuration The duration of prepaid instance purchase. When `payment_type` is `Subscription`, this parameter is valid and must be passed in.
         * 
         * @return builder
         * 
         */
        public Builder paymentDuration(Integer paymentDuration) {
            return paymentDuration(Output.of(paymentDuration));
        }

        /**
         * @param paymentDurationUnit The payment duration unit. Valid values: `Month`, `Year`. When `payment_type` is `Subscription`, this parameter is valid and must be passed in.
         * 
         * @return builder
         * 
         */
        public Builder paymentDurationUnit(@Nullable Output<String> paymentDurationUnit) {
            $.paymentDurationUnit = paymentDurationUnit;
            return this;
        }

        /**
         * @param paymentDurationUnit The payment duration unit. Valid values: `Month`, `Year`. When `payment_type` is `Subscription`, this parameter is valid and must be passed in.
         * 
         * @return builder
         * 
         */
        public Builder paymentDurationUnit(String paymentDurationUnit) {
            return paymentDurationUnit(Output.of(paymentDurationUnit));
        }

        /**
         * @param paymentType The payment type of the resource. Valid values: `Subscription`, `PayAsYouGo`.
         * 
         * @return builder
         * 
         */
        public Builder paymentType(Output<String> paymentType) {
            $.paymentType = paymentType;
            return this;
        }

        /**
         * @param paymentType The payment type of the resource. Valid values: `Subscription`, `PayAsYouGo`.
         * 
         * @return builder
         * 
         */
        public Builder paymentType(String paymentType) {
            return paymentType(Output.of(paymentType));
        }

        /**
         * @param reserve DTS reserves parameters, the format is a JSON string, you can pass in this parameter to complete the source and target database information (such as the data storage format of the target Kafka database, the instance ID of the cloud enterprise network CEN). For more information, please refer to the parameter description of the [Reserve parameter](https://help.aliyun.com/document_detail/176470.html).
         * 
         * @return builder
         * 
         */
        public Builder reserve(@Nullable Output<String> reserve) {
            $.reserve = reserve;
            return this;
        }

        /**
         * @param reserve DTS reserves parameters, the format is a JSON string, you can pass in this parameter to complete the source and target database information (such as the data storage format of the target Kafka database, the instance ID of the cloud enterprise network CEN). For more information, please refer to the parameter description of the [Reserve parameter](https://help.aliyun.com/document_detail/176470.html).
         * 
         * @return builder
         * 
         */
        public Builder reserve(String reserve) {
            return reserve(Output.of(reserve));
        }

        /**
         * @param sourceEndpointDatabaseName To subscribe to the name of the database.
         * 
         * @return builder
         * 
         */
        public Builder sourceEndpointDatabaseName(@Nullable Output<String> sourceEndpointDatabaseName) {
            $.sourceEndpointDatabaseName = sourceEndpointDatabaseName;
            return this;
        }

        /**
         * @param sourceEndpointDatabaseName To subscribe to the name of the database.
         * 
         * @return builder
         * 
         */
        public Builder sourceEndpointDatabaseName(String sourceEndpointDatabaseName) {
            return sourceEndpointDatabaseName(Output.of(sourceEndpointDatabaseName));
        }

        /**
         * @param sourceEndpointEngineName The source database type value is MySQL or Oracle. Valid values: `MySQL`, `Oracle`.
         * 
         * @return builder
         * 
         */
        public Builder sourceEndpointEngineName(Output<String> sourceEndpointEngineName) {
            $.sourceEndpointEngineName = sourceEndpointEngineName;
            return this;
        }

        /**
         * @param sourceEndpointEngineName The source database type value is MySQL or Oracle. Valid values: `MySQL`, `Oracle`.
         * 
         * @return builder
         * 
         */
        public Builder sourceEndpointEngineName(String sourceEndpointEngineName) {
            return sourceEndpointEngineName(Output.of(sourceEndpointEngineName));
        }

        /**
         * @param sourceEndpointInstanceId The ID of source instance. Only when the type of source database instance was RDS MySQL, PolarDB-X 1.0, PolarDB MySQL, this parameter can be available and must be set.
         * 
         * @return builder
         * 
         */
        public Builder sourceEndpointInstanceId(@Nullable Output<String> sourceEndpointInstanceId) {
            $.sourceEndpointInstanceId = sourceEndpointInstanceId;
            return this;
        }

        /**
         * @param sourceEndpointInstanceId The ID of source instance. Only when the type of source database instance was RDS MySQL, PolarDB-X 1.0, PolarDB MySQL, this parameter can be available and must be set.
         * 
         * @return builder
         * 
         */
        public Builder sourceEndpointInstanceId(String sourceEndpointInstanceId) {
            return sourceEndpointInstanceId(Output.of(sourceEndpointInstanceId));
        }

        /**
         * @param sourceEndpointInstanceType The type of source instance. Valid values: `RDS`, `PolarDB`, `DRDS`, `LocalInstance`, `ECS`, `Express`, `CEN`, `dg`.
         * 
         * @return builder
         * 
         */
        public Builder sourceEndpointInstanceType(Output<String> sourceEndpointInstanceType) {
            $.sourceEndpointInstanceType = sourceEndpointInstanceType;
            return this;
        }

        /**
         * @param sourceEndpointInstanceType The type of source instance. Valid values: `RDS`, `PolarDB`, `DRDS`, `LocalInstance`, `ECS`, `Express`, `CEN`, `dg`.
         * 
         * @return builder
         * 
         */
        public Builder sourceEndpointInstanceType(String sourceEndpointInstanceType) {
            return sourceEndpointInstanceType(Output.of(sourceEndpointInstanceType));
        }

        /**
         * @param sourceEndpointIp The IP of source endpoint.
         * 
         * @return builder
         * 
         */
        public Builder sourceEndpointIp(@Nullable Output<String> sourceEndpointIp) {
            $.sourceEndpointIp = sourceEndpointIp;
            return this;
        }

        /**
         * @param sourceEndpointIp The IP of source endpoint.
         * 
         * @return builder
         * 
         */
        public Builder sourceEndpointIp(String sourceEndpointIp) {
            return sourceEndpointIp(Output.of(sourceEndpointIp));
        }

        /**
         * @param sourceEndpointOracleSid The SID of Oracle Database. When the source database is self-built Oracle and the Oracle database is a non-RAC instance, this parameter is available and must be passed in.
         * 
         * @return builder
         * 
         */
        public Builder sourceEndpointOracleSid(@Nullable Output<String> sourceEndpointOracleSid) {
            $.sourceEndpointOracleSid = sourceEndpointOracleSid;
            return this;
        }

        /**
         * @param sourceEndpointOracleSid The SID of Oracle Database. When the source database is self-built Oracle and the Oracle database is a non-RAC instance, this parameter is available and must be passed in.
         * 
         * @return builder
         * 
         */
        public Builder sourceEndpointOracleSid(String sourceEndpointOracleSid) {
            return sourceEndpointOracleSid(Output.of(sourceEndpointOracleSid));
        }

        /**
         * @param sourceEndpointOwnerId The Alibaba Cloud account ID to which the source instance belongs. This parameter is only available when configuring data subscriptions across Alibaba Cloud accounts and must be passed in.
         * 
         * @return builder
         * 
         */
        public Builder sourceEndpointOwnerId(@Nullable Output<String> sourceEndpointOwnerId) {
            $.sourceEndpointOwnerId = sourceEndpointOwnerId;
            return this;
        }

        /**
         * @param sourceEndpointOwnerId The Alibaba Cloud account ID to which the source instance belongs. This parameter is only available when configuring data subscriptions across Alibaba Cloud accounts and must be passed in.
         * 
         * @return builder
         * 
         */
        public Builder sourceEndpointOwnerId(String sourceEndpointOwnerId) {
            return sourceEndpointOwnerId(Output.of(sourceEndpointOwnerId));
        }

        /**
         * @param sourceEndpointPassword The password of source database instance account.
         * 
         * @return builder
         * 
         */
        public Builder sourceEndpointPassword(@Nullable Output<String> sourceEndpointPassword) {
            $.sourceEndpointPassword = sourceEndpointPassword;
            return this;
        }

        /**
         * @param sourceEndpointPassword The password of source database instance account.
         * 
         * @return builder
         * 
         */
        public Builder sourceEndpointPassword(String sourceEndpointPassword) {
            return sourceEndpointPassword(Output.of(sourceEndpointPassword));
        }

        /**
         * @param sourceEndpointPort The port of source database.
         * 
         * @return builder
         * 
         */
        public Builder sourceEndpointPort(@Nullable Output<String> sourceEndpointPort) {
            $.sourceEndpointPort = sourceEndpointPort;
            return this;
        }

        /**
         * @param sourceEndpointPort The port of source database.
         * 
         * @return builder
         * 
         */
        public Builder sourceEndpointPort(String sourceEndpointPort) {
            return sourceEndpointPort(Output.of(sourceEndpointPort));
        }

        /**
         * @param sourceEndpointRegion The region of source database.
         * 
         * @return builder
         * 
         */
        public Builder sourceEndpointRegion(Output<String> sourceEndpointRegion) {
            $.sourceEndpointRegion = sourceEndpointRegion;
            return this;
        }

        /**
         * @param sourceEndpointRegion The region of source database.
         * 
         * @return builder
         * 
         */
        public Builder sourceEndpointRegion(String sourceEndpointRegion) {
            return sourceEndpointRegion(Output.of(sourceEndpointRegion));
        }

        /**
         * @param sourceEndpointRole Both the authorization roles. When the source instance and configure subscriptions task of the Alibaba Cloud account is not the same as the need to pass the parameter, to specify the source of the authorization roles, to allow configuration subscription task of the Alibaba Cloud account to access the source of the source instance information.
         * 
         * @return builder
         * 
         */
        public Builder sourceEndpointRole(@Nullable Output<String> sourceEndpointRole) {
            $.sourceEndpointRole = sourceEndpointRole;
            return this;
        }

        /**
         * @param sourceEndpointRole Both the authorization roles. When the source instance and configure subscriptions task of the Alibaba Cloud account is not the same as the need to pass the parameter, to specify the source of the authorization roles, to allow configuration subscription task of the Alibaba Cloud account to access the source of the source instance information.
         * 
         * @return builder
         * 
         */
        public Builder sourceEndpointRole(String sourceEndpointRole) {
            return sourceEndpointRole(Output.of(sourceEndpointRole));
        }

        /**
         * @param sourceEndpointUserName The username of source database instance account.
         * 
         * @return builder
         * 
         */
        public Builder sourceEndpointUserName(@Nullable Output<String> sourceEndpointUserName) {
            $.sourceEndpointUserName = sourceEndpointUserName;
            return this;
        }

        /**
         * @param sourceEndpointUserName The username of source database instance account.
         * 
         * @return builder
         * 
         */
        public Builder sourceEndpointUserName(String sourceEndpointUserName) {
            return sourceEndpointUserName(Output.of(sourceEndpointUserName));
        }

        /**
         * @param status The status of the task. Valid values: `Normal`, `Abnormal`. When a task created, it is in this state of `NotStarted`. You can specify this state to `Normal` to start the job, and specify this state of `Abnormal` to stop the job. **Note: We treat the state `Starting` as the state of `Normal`, and consider the two states to be consistent on the user side.**
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status The status of the task. Valid values: `Normal`, `Abnormal`. When a task created, it is in this state of `NotStarted`. You can specify this state to `Normal` to start the job, and specify this state of `Abnormal` to stop the job. **Note: We treat the state `Starting` as the state of `Normal`, and consider the two states to be consistent on the user side.**
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param subscriptionDataTypeDdl Whether to subscribe the DDL type of data. Valid values: `true`, `false`.
         * 
         * @return builder
         * 
         */
        public Builder subscriptionDataTypeDdl(@Nullable Output<Boolean> subscriptionDataTypeDdl) {
            $.subscriptionDataTypeDdl = subscriptionDataTypeDdl;
            return this;
        }

        /**
         * @param subscriptionDataTypeDdl Whether to subscribe the DDL type of data. Valid values: `true`, `false`.
         * 
         * @return builder
         * 
         */
        public Builder subscriptionDataTypeDdl(Boolean subscriptionDataTypeDdl) {
            return subscriptionDataTypeDdl(Output.of(subscriptionDataTypeDdl));
        }

        /**
         * @param subscriptionDataTypeDml Whether to subscribe the DML type of data. Valid values: `true`, `false`.
         * 
         * @return builder
         * 
         */
        public Builder subscriptionDataTypeDml(@Nullable Output<Boolean> subscriptionDataTypeDml) {
            $.subscriptionDataTypeDml = subscriptionDataTypeDml;
            return this;
        }

        /**
         * @param subscriptionDataTypeDml Whether to subscribe the DML type of data. Valid values: `true`, `false`.
         * 
         * @return builder
         * 
         */
        public Builder subscriptionDataTypeDml(Boolean subscriptionDataTypeDml) {
            return subscriptionDataTypeDml(Output.of(subscriptionDataTypeDml));
        }

        /**
         * @param subscriptionInstanceNetworkType Subscription task type of network value: classic: classic Network. Virtual Private Cloud (vpc): a vpc. Valid values: `classic`, `vpc`.
         * 
         * @return builder
         * 
         */
        public Builder subscriptionInstanceNetworkType(@Nullable Output<String> subscriptionInstanceNetworkType) {
            $.subscriptionInstanceNetworkType = subscriptionInstanceNetworkType;
            return this;
        }

        /**
         * @param subscriptionInstanceNetworkType Subscription task type of network value: classic: classic Network. Virtual Private Cloud (vpc): a vpc. Valid values: `classic`, `vpc`.
         * 
         * @return builder
         * 
         */
        public Builder subscriptionInstanceNetworkType(String subscriptionInstanceNetworkType) {
            return subscriptionInstanceNetworkType(Output.of(subscriptionInstanceNetworkType));
        }

        /**
         * @param subscriptionInstanceVpcId The ID of subscription vpc instance. When the value of `subscription_instance_network_type` is vpc, this parameter is available and must be passed in.
         * 
         * @return builder
         * 
         */
        public Builder subscriptionInstanceVpcId(@Nullable Output<String> subscriptionInstanceVpcId) {
            $.subscriptionInstanceVpcId = subscriptionInstanceVpcId;
            return this;
        }

        /**
         * @param subscriptionInstanceVpcId The ID of subscription vpc instance. When the value of `subscription_instance_network_type` is vpc, this parameter is available and must be passed in.
         * 
         * @return builder
         * 
         */
        public Builder subscriptionInstanceVpcId(String subscriptionInstanceVpcId) {
            return subscriptionInstanceVpcId(Output.of(subscriptionInstanceVpcId));
        }

        /**
         * @param subscriptionInstanceVswitchId The ID of subscription VSwitch instance. When the value of `subscription_instance_network_type` is vpc, this parameter is available and must be passed in.
         * 
         * @return builder
         * 
         */
        public Builder subscriptionInstanceVswitchId(@Nullable Output<String> subscriptionInstanceVswitchId) {
            $.subscriptionInstanceVswitchId = subscriptionInstanceVswitchId;
            return this;
        }

        /**
         * @param subscriptionInstanceVswitchId The ID of subscription VSwitch instance. When the value of `subscription_instance_network_type` is vpc, this parameter is available and must be passed in.
         * 
         * @return builder
         * 
         */
        public Builder subscriptionInstanceVswitchId(String subscriptionInstanceVswitchId) {
            return subscriptionInstanceVswitchId(Output.of(subscriptionInstanceVswitchId));
        }

        /**
         * @param syncArchitecture The sync architecture. Valid values: `bidirectional`, `oneway`.
         * 
         * @return builder
         * 
         */
        public Builder syncArchitecture(@Nullable Output<String> syncArchitecture) {
            $.syncArchitecture = syncArchitecture;
            return this;
        }

        /**
         * @param syncArchitecture The sync architecture. Valid values: `bidirectional`, `oneway`.
         * 
         * @return builder
         * 
         */
        public Builder syncArchitecture(String syncArchitecture) {
            return syncArchitecture(Output.of(syncArchitecture));
        }

        /**
         * @param synchronizationDirection The synchronization direction. Valid values: `Forward`, `Reverse`. When the topology type of the data synchronization instance is bidirectional, it can be passed in to reverse to start the reverse synchronization link.
         * 
         * @return builder
         * 
         */
        public Builder synchronizationDirection(@Nullable Output<String> synchronizationDirection) {
            $.synchronizationDirection = synchronizationDirection;
            return this;
        }

        /**
         * @param synchronizationDirection The synchronization direction. Valid values: `Forward`, `Reverse`. When the topology type of the data synchronization instance is bidirectional, it can be passed in to reverse to start the reverse synchronization link.
         * 
         * @return builder
         * 
         */
        public Builder synchronizationDirection(String synchronizationDirection) {
            return synchronizationDirection(Output.of(synchronizationDirection));
        }

        /**
         * @param tags A mapping of tags to assign to the resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,Object>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags A mapping of tags to assign to the resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,Object> tags) {
            return tags(Output.of(tags));
        }

        public SubscriptionJobArgs build() {
            if ($.paymentType == null) {
                throw new MissingRequiredPropertyException("SubscriptionJobArgs", "paymentType");
            }
            if ($.sourceEndpointEngineName == null) {
                throw new MissingRequiredPropertyException("SubscriptionJobArgs", "sourceEndpointEngineName");
            }
            if ($.sourceEndpointInstanceType == null) {
                throw new MissingRequiredPropertyException("SubscriptionJobArgs", "sourceEndpointInstanceType");
            }
            if ($.sourceEndpointRegion == null) {
                throw new MissingRequiredPropertyException("SubscriptionJobArgs", "sourceEndpointRegion");
            }
            return $;
        }
    }

}
