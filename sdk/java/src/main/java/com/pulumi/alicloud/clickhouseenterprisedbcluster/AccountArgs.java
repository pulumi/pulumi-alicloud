// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.clickhouseenterprisedbcluster;

import com.pulumi.alicloud.clickhouseenterprisedbcluster.inputs.AccountDmlAuthSettingArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AccountArgs extends com.pulumi.resources.ResourceArgs {

    public static final AccountArgs Empty = new AccountArgs();

    /**
     * The name of the database account.
     * 
     */
    @Import(name="account", required=true)
    private Output<String> account;

    /**
     * @return The name of the database account.
     * 
     */
    public Output<String> account() {
        return this.account;
    }

    /**
     * The type of the database account. Valid values:
     * - `NormalAccount`: Normal account number.
     * - `SuperAccount`: The privileged account.
     * 
     */
    @Import(name="accountType", required=true)
    private Output<String> accountType;

    /**
     * @return The type of the database account. Valid values:
     * - `NormalAccount`: Normal account number.
     * - `SuperAccount`: The privileged account.
     * 
     */
    public Output<String> accountType() {
        return this.accountType;
    }

    /**
     * The cluster ID.
     * 
     */
    @Import(name="dbInstanceId", required=true)
    private Output<String> dbInstanceId;

    /**
     * @return The cluster ID.
     * 
     */
    public Output<String> dbInstanceId() {
        return this.dbInstanceId;
    }

    /**
     * Note information.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Note information.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Authorization information. See `dml_auth_setting` below.
     * 
     */
    @Import(name="dmlAuthSetting")
    private @Nullable Output<AccountDmlAuthSettingArgs> dmlAuthSetting;

    /**
     * @return Authorization information. See `dml_auth_setting` below.
     * 
     */
    public Optional<Output<AccountDmlAuthSettingArgs>> dmlAuthSetting() {
        return Optional.ofNullable(this.dmlAuthSetting);
    }

    /**
     * Database account password. Set the following rules.
     * - Consists of at least three of uppercase letters, lowercase letters, numbers, and special characters.
     * - Oh-! {@literal @}#$%^&amp; *()_+-= is a special character.
     * - Length is 8~32 characters.
     * 
     */
    @Import(name="password", required=true)
    private Output<String> password;

    /**
     * @return Database account password. Set the following rules.
     * - Consists of at least three of uppercase letters, lowercase letters, numbers, and special characters.
     * - Oh-! {@literal @}#$%^&amp; *()_+-= is a special character.
     * - Length is 8~32 characters.
     * 
     */
    public Output<String> password() {
        return this.password;
    }

    private AccountArgs() {}

    private AccountArgs(AccountArgs $) {
        this.account = $.account;
        this.accountType = $.accountType;
        this.dbInstanceId = $.dbInstanceId;
        this.description = $.description;
        this.dmlAuthSetting = $.dmlAuthSetting;
        this.password = $.password;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AccountArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AccountArgs $;

        public Builder() {
            $ = new AccountArgs();
        }

        public Builder(AccountArgs defaults) {
            $ = new AccountArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param account The name of the database account.
         * 
         * @return builder
         * 
         */
        public Builder account(Output<String> account) {
            $.account = account;
            return this;
        }

        /**
         * @param account The name of the database account.
         * 
         * @return builder
         * 
         */
        public Builder account(String account) {
            return account(Output.of(account));
        }

        /**
         * @param accountType The type of the database account. Valid values:
         * - `NormalAccount`: Normal account number.
         * - `SuperAccount`: The privileged account.
         * 
         * @return builder
         * 
         */
        public Builder accountType(Output<String> accountType) {
            $.accountType = accountType;
            return this;
        }

        /**
         * @param accountType The type of the database account. Valid values:
         * - `NormalAccount`: Normal account number.
         * - `SuperAccount`: The privileged account.
         * 
         * @return builder
         * 
         */
        public Builder accountType(String accountType) {
            return accountType(Output.of(accountType));
        }

        /**
         * @param dbInstanceId The cluster ID.
         * 
         * @return builder
         * 
         */
        public Builder dbInstanceId(Output<String> dbInstanceId) {
            $.dbInstanceId = dbInstanceId;
            return this;
        }

        /**
         * @param dbInstanceId The cluster ID.
         * 
         * @return builder
         * 
         */
        public Builder dbInstanceId(String dbInstanceId) {
            return dbInstanceId(Output.of(dbInstanceId));
        }

        /**
         * @param description Note information.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Note information.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param dmlAuthSetting Authorization information. See `dml_auth_setting` below.
         * 
         * @return builder
         * 
         */
        public Builder dmlAuthSetting(@Nullable Output<AccountDmlAuthSettingArgs> dmlAuthSetting) {
            $.dmlAuthSetting = dmlAuthSetting;
            return this;
        }

        /**
         * @param dmlAuthSetting Authorization information. See `dml_auth_setting` below.
         * 
         * @return builder
         * 
         */
        public Builder dmlAuthSetting(AccountDmlAuthSettingArgs dmlAuthSetting) {
            return dmlAuthSetting(Output.of(dmlAuthSetting));
        }

        /**
         * @param password Database account password. Set the following rules.
         * - Consists of at least three of uppercase letters, lowercase letters, numbers, and special characters.
         * - Oh-! {@literal @}#$%^&amp; *()_+-= is a special character.
         * - Length is 8~32 characters.
         * 
         * @return builder
         * 
         */
        public Builder password(Output<String> password) {
            $.password = password;
            return this;
        }

        /**
         * @param password Database account password. Set the following rules.
         * - Consists of at least three of uppercase letters, lowercase letters, numbers, and special characters.
         * - Oh-! {@literal @}#$%^&amp; *()_+-= is a special character.
         * - Length is 8~32 characters.
         * 
         * @return builder
         * 
         */
        public Builder password(String password) {
            return password(Output.of(password));
        }

        public AccountArgs build() {
            if ($.account == null) {
                throw new MissingRequiredPropertyException("AccountArgs", "account");
            }
            if ($.accountType == null) {
                throw new MissingRequiredPropertyException("AccountArgs", "accountType");
            }
            if ($.dbInstanceId == null) {
                throw new MissingRequiredPropertyException("AccountArgs", "dbInstanceId");
            }
            if ($.password == null) {
                throw new MissingRequiredPropertyException("AccountArgs", "password");
            }
            return $;
        }
    }

}
