// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.wafv3.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class DomainListen {
    /**
     * @return The ID of the certificate to be added. This parameter is used only if the value of `HttpsPorts` is not empty (indicating that the domain name uses the HTTPS protocol).
     * 
     */
    private @Nullable String certId;
    /**
     * @return The type of the cipher suites that you want to add. This parameter is available only if you specify `HttpsPorts`. Valid values:
     * 
     */
    private @Nullable Integer cipherSuite;
    /**
     * @return The specific custom encryption suite to add.
     * 
     */
    private @Nullable List<String> customCiphers;
    /**
     * @return Whether TSL1.3 version is supported. This parameter is used only if the value of `HttpsPorts` is not empty (indicating that the domain name uses the HTTPS protocol). Value:
     * 
     */
    private @Nullable Boolean enableTlsv3;
    /**
     * @return Specifies whether to enable the exclusive IP address feature. This parameter is available only if you set `IPv6Enabled` to false and `ProtectionResource` to `share`. Valid values:
     * 
     */
    private @Nullable Boolean exclusiveIp;
    /**
     * @return Specifies whether to enable force redirect from HTTP to HTTPS for received requests. This parameter is available only if you specify `HttpsPorts` and leave `HttpPorts` empty. Valid values:
     * 
     */
    private @Nullable Boolean focusHttps;
    /**
     * @return Specifies whether to enable HTTP/2. This parameter is available only if you specify `HttpsPorts`. Valid values:
     * 
     */
    private @Nullable Boolean http2Enabled;
    /**
     * @return The HTTP listener ports. Specify the value in the \[**port1,port2,...**] format.
     * 
     */
    private @Nullable List<Integer> httpPorts;
    /**
     * @return The HTTPS listener ports. Specify the value in the \[**port1,port2,...**] format.
     * 
     */
    private @Nullable List<Integer> httpsPorts;
    /**
     * @return Specifies whether to enable IPv6 protection. Valid values:
     * 
     */
    private @Nullable Boolean ipv6Enabled;
    /**
     * @return The type of the protection resource. Valid values:
     * 
     */
    private @Nullable String protectionResource;
    /**
     * @return Specifies whether to allow access only from SM certificate-based clients. This parameter is available only if you set SM2Enabled to true.
     * 
     * - true
     * - false
     * 
     */
    private @Nullable Boolean sm2AccessOnly;
    /**
     * @return The ID of the SM certificate that you want to add. This parameter is available only if you set SM2Enabled to true.
     * 
     */
    private @Nullable String sm2CertId;
    /**
     * @return Specifies whether to add an SM certificate.
     * 
     */
    private @Nullable Boolean sm2Enabled;
    /**
     * @return The version of TLS to add. This parameter is used only if the value of `HttpsPorts` is not empty (indicating that the domain name uses the HTTPS protocol). Value:
     * 
     */
    private @Nullable String tlsVersion;
    /**
     * @return The method that is used to obtain the originating IP address of a client. Valid values:
     * 
     */
    private @Nullable Integer xffHeaderMode;
    /**
     * @return The custom header fields that are used to obtain the originating IP address of a client. Specify the value in the **\[&#34;header1&#34;,&#34;header2&#34;,...]** format.
     * 
     * &gt; **NOTE:**   This parameter is required only if you set `XffHeaderMode` to 2.
     * 
     */
    private @Nullable List<String> xffHeaders;

    private DomainListen() {}
    /**
     * @return The ID of the certificate to be added. This parameter is used only if the value of `HttpsPorts` is not empty (indicating that the domain name uses the HTTPS protocol).
     * 
     */
    public Optional<String> certId() {
        return Optional.ofNullable(this.certId);
    }
    /**
     * @return The type of the cipher suites that you want to add. This parameter is available only if you specify `HttpsPorts`. Valid values:
     * 
     */
    public Optional<Integer> cipherSuite() {
        return Optional.ofNullable(this.cipherSuite);
    }
    /**
     * @return The specific custom encryption suite to add.
     * 
     */
    public List<String> customCiphers() {
        return this.customCiphers == null ? List.of() : this.customCiphers;
    }
    /**
     * @return Whether TSL1.3 version is supported. This parameter is used only if the value of `HttpsPorts` is not empty (indicating that the domain name uses the HTTPS protocol). Value:
     * 
     */
    public Optional<Boolean> enableTlsv3() {
        return Optional.ofNullable(this.enableTlsv3);
    }
    /**
     * @return Specifies whether to enable the exclusive IP address feature. This parameter is available only if you set `IPv6Enabled` to false and `ProtectionResource` to `share`. Valid values:
     * 
     */
    public Optional<Boolean> exclusiveIp() {
        return Optional.ofNullable(this.exclusiveIp);
    }
    /**
     * @return Specifies whether to enable force redirect from HTTP to HTTPS for received requests. This parameter is available only if you specify `HttpsPorts` and leave `HttpPorts` empty. Valid values:
     * 
     */
    public Optional<Boolean> focusHttps() {
        return Optional.ofNullable(this.focusHttps);
    }
    /**
     * @return Specifies whether to enable HTTP/2. This parameter is available only if you specify `HttpsPorts`. Valid values:
     * 
     */
    public Optional<Boolean> http2Enabled() {
        return Optional.ofNullable(this.http2Enabled);
    }
    /**
     * @return The HTTP listener ports. Specify the value in the \[**port1,port2,...**] format.
     * 
     */
    public List<Integer> httpPorts() {
        return this.httpPorts == null ? List.of() : this.httpPorts;
    }
    /**
     * @return The HTTPS listener ports. Specify the value in the \[**port1,port2,...**] format.
     * 
     */
    public List<Integer> httpsPorts() {
        return this.httpsPorts == null ? List.of() : this.httpsPorts;
    }
    /**
     * @return Specifies whether to enable IPv6 protection. Valid values:
     * 
     */
    public Optional<Boolean> ipv6Enabled() {
        return Optional.ofNullable(this.ipv6Enabled);
    }
    /**
     * @return The type of the protection resource. Valid values:
     * 
     */
    public Optional<String> protectionResource() {
        return Optional.ofNullable(this.protectionResource);
    }
    /**
     * @return Specifies whether to allow access only from SM certificate-based clients. This parameter is available only if you set SM2Enabled to true.
     * 
     * - true
     * - false
     * 
     */
    public Optional<Boolean> sm2AccessOnly() {
        return Optional.ofNullable(this.sm2AccessOnly);
    }
    /**
     * @return The ID of the SM certificate that you want to add. This parameter is available only if you set SM2Enabled to true.
     * 
     */
    public Optional<String> sm2CertId() {
        return Optional.ofNullable(this.sm2CertId);
    }
    /**
     * @return Specifies whether to add an SM certificate.
     * 
     */
    public Optional<Boolean> sm2Enabled() {
        return Optional.ofNullable(this.sm2Enabled);
    }
    /**
     * @return The version of TLS to add. This parameter is used only if the value of `HttpsPorts` is not empty (indicating that the domain name uses the HTTPS protocol). Value:
     * 
     */
    public Optional<String> tlsVersion() {
        return Optional.ofNullable(this.tlsVersion);
    }
    /**
     * @return The method that is used to obtain the originating IP address of a client. Valid values:
     * 
     */
    public Optional<Integer> xffHeaderMode() {
        return Optional.ofNullable(this.xffHeaderMode);
    }
    /**
     * @return The custom header fields that are used to obtain the originating IP address of a client. Specify the value in the **\[&#34;header1&#34;,&#34;header2&#34;,...]** format.
     * 
     * &gt; **NOTE:**   This parameter is required only if you set `XffHeaderMode` to 2.
     * 
     */
    public List<String> xffHeaders() {
        return this.xffHeaders == null ? List.of() : this.xffHeaders;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DomainListen defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String certId;
        private @Nullable Integer cipherSuite;
        private @Nullable List<String> customCiphers;
        private @Nullable Boolean enableTlsv3;
        private @Nullable Boolean exclusiveIp;
        private @Nullable Boolean focusHttps;
        private @Nullable Boolean http2Enabled;
        private @Nullable List<Integer> httpPorts;
        private @Nullable List<Integer> httpsPorts;
        private @Nullable Boolean ipv6Enabled;
        private @Nullable String protectionResource;
        private @Nullable Boolean sm2AccessOnly;
        private @Nullable String sm2CertId;
        private @Nullable Boolean sm2Enabled;
        private @Nullable String tlsVersion;
        private @Nullable Integer xffHeaderMode;
        private @Nullable List<String> xffHeaders;
        public Builder() {}
        public Builder(DomainListen defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.certId = defaults.certId;
    	      this.cipherSuite = defaults.cipherSuite;
    	      this.customCiphers = defaults.customCiphers;
    	      this.enableTlsv3 = defaults.enableTlsv3;
    	      this.exclusiveIp = defaults.exclusiveIp;
    	      this.focusHttps = defaults.focusHttps;
    	      this.http2Enabled = defaults.http2Enabled;
    	      this.httpPorts = defaults.httpPorts;
    	      this.httpsPorts = defaults.httpsPorts;
    	      this.ipv6Enabled = defaults.ipv6Enabled;
    	      this.protectionResource = defaults.protectionResource;
    	      this.sm2AccessOnly = defaults.sm2AccessOnly;
    	      this.sm2CertId = defaults.sm2CertId;
    	      this.sm2Enabled = defaults.sm2Enabled;
    	      this.tlsVersion = defaults.tlsVersion;
    	      this.xffHeaderMode = defaults.xffHeaderMode;
    	      this.xffHeaders = defaults.xffHeaders;
        }

        @CustomType.Setter
        public Builder certId(@Nullable String certId) {

            this.certId = certId;
            return this;
        }
        @CustomType.Setter
        public Builder cipherSuite(@Nullable Integer cipherSuite) {

            this.cipherSuite = cipherSuite;
            return this;
        }
        @CustomType.Setter
        public Builder customCiphers(@Nullable List<String> customCiphers) {

            this.customCiphers = customCiphers;
            return this;
        }
        public Builder customCiphers(String... customCiphers) {
            return customCiphers(List.of(customCiphers));
        }
        @CustomType.Setter
        public Builder enableTlsv3(@Nullable Boolean enableTlsv3) {

            this.enableTlsv3 = enableTlsv3;
            return this;
        }
        @CustomType.Setter
        public Builder exclusiveIp(@Nullable Boolean exclusiveIp) {

            this.exclusiveIp = exclusiveIp;
            return this;
        }
        @CustomType.Setter
        public Builder focusHttps(@Nullable Boolean focusHttps) {

            this.focusHttps = focusHttps;
            return this;
        }
        @CustomType.Setter
        public Builder http2Enabled(@Nullable Boolean http2Enabled) {

            this.http2Enabled = http2Enabled;
            return this;
        }
        @CustomType.Setter
        public Builder httpPorts(@Nullable List<Integer> httpPorts) {

            this.httpPorts = httpPorts;
            return this;
        }
        public Builder httpPorts(Integer... httpPorts) {
            return httpPorts(List.of(httpPorts));
        }
        @CustomType.Setter
        public Builder httpsPorts(@Nullable List<Integer> httpsPorts) {

            this.httpsPorts = httpsPorts;
            return this;
        }
        public Builder httpsPorts(Integer... httpsPorts) {
            return httpsPorts(List.of(httpsPorts));
        }
        @CustomType.Setter
        public Builder ipv6Enabled(@Nullable Boolean ipv6Enabled) {

            this.ipv6Enabled = ipv6Enabled;
            return this;
        }
        @CustomType.Setter
        public Builder protectionResource(@Nullable String protectionResource) {

            this.protectionResource = protectionResource;
            return this;
        }
        @CustomType.Setter
        public Builder sm2AccessOnly(@Nullable Boolean sm2AccessOnly) {

            this.sm2AccessOnly = sm2AccessOnly;
            return this;
        }
        @CustomType.Setter
        public Builder sm2CertId(@Nullable String sm2CertId) {

            this.sm2CertId = sm2CertId;
            return this;
        }
        @CustomType.Setter
        public Builder sm2Enabled(@Nullable Boolean sm2Enabled) {

            this.sm2Enabled = sm2Enabled;
            return this;
        }
        @CustomType.Setter
        public Builder tlsVersion(@Nullable String tlsVersion) {

            this.tlsVersion = tlsVersion;
            return this;
        }
        @CustomType.Setter
        public Builder xffHeaderMode(@Nullable Integer xffHeaderMode) {

            this.xffHeaderMode = xffHeaderMode;
            return this;
        }
        @CustomType.Setter
        public Builder xffHeaders(@Nullable List<String> xffHeaders) {

            this.xffHeaders = xffHeaders;
            return this;
        }
        public Builder xffHeaders(String... xffHeaders) {
            return xffHeaders(List.of(xffHeaders));
        }
        public DomainListen build() {
            final var _resultValue = new DomainListen();
            _resultValue.certId = certId;
            _resultValue.cipherSuite = cipherSuite;
            _resultValue.customCiphers = customCiphers;
            _resultValue.enableTlsv3 = enableTlsv3;
            _resultValue.exclusiveIp = exclusiveIp;
            _resultValue.focusHttps = focusHttps;
            _resultValue.http2Enabled = http2Enabled;
            _resultValue.httpPorts = httpPorts;
            _resultValue.httpsPorts = httpsPorts;
            _resultValue.ipv6Enabled = ipv6Enabled;
            _resultValue.protectionResource = protectionResource;
            _resultValue.sm2AccessOnly = sm2AccessOnly;
            _resultValue.sm2CertId = sm2CertId;
            _resultValue.sm2Enabled = sm2Enabled;
            _resultValue.tlsVersion = tlsVersion;
            _resultValue.xffHeaderMode = xffHeaderMode;
            _resultValue.xffHeaders = xffHeaders;
            return _resultValue;
        }
    }
}
