// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.gwlb;

import com.pulumi.alicloud.gwlb.inputs.ServerGroupConnectionDrainConfigArgs;
import com.pulumi.alicloud.gwlb.inputs.ServerGroupHealthCheckConfigArgs;
import com.pulumi.alicloud.gwlb.inputs.ServerGroupServerArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ServerGroupArgs extends com.pulumi.resources.ResourceArgs {

    public static final ServerGroupArgs Empty = new ServerGroupArgs();

    /**
     * Connected graceful interrupt configuration. See `connection_drain_config` below.
     * 
     */
    @Import(name="connectionDrainConfig")
    private @Nullable Output<ServerGroupConnectionDrainConfigArgs> connectionDrainConfig;

    /**
     * @return Connected graceful interrupt configuration. See `connection_drain_config` below.
     * 
     */
    public Optional<Output<ServerGroupConnectionDrainConfigArgs>> connectionDrainConfig() {
        return Optional.ofNullable(this.connectionDrainConfig);
    }

    /**
     * Specifies whether to perform only a dry run, without performing the actual request.
     * 
     */
    @Import(name="dryRun")
    private @Nullable Output<Boolean> dryRun;

    /**
     * @return Specifies whether to perform only a dry run, without performing the actual request.
     * 
     */
    public Optional<Output<Boolean>> dryRun() {
        return Optional.ofNullable(this.dryRun);
    }

    /**
     * Health check configurations. See `health_check_config` below.
     * 
     */
    @Import(name="healthCheckConfig")
    private @Nullable Output<ServerGroupHealthCheckConfigArgs> healthCheckConfig;

    /**
     * @return Health check configurations. See `health_check_config` below.
     * 
     */
    public Optional<Output<ServerGroupHealthCheckConfigArgs>> healthCheckConfig() {
        return Optional.ofNullable(this.healthCheckConfig);
    }

    /**
     * Backend Protocol. Value:
     * 
     * - *GENEVE (default)**.
     * 
     */
    @Import(name="protocol")
    private @Nullable Output<String> protocol;

    /**
     * @return Backend Protocol. Value:
     * 
     * - *GENEVE (default)**.
     * 
     */
    public Optional<Output<String>> protocol() {
        return Optional.ofNullable(this.protocol);
    }

    /**
     * The ID of the resource group.
     * 
     */
    @Import(name="resourceGroupId")
    private @Nullable Output<String> resourceGroupId;

    /**
     * @return The ID of the resource group.
     * 
     */
    public Optional<Output<String>> resourceGroupId() {
        return Optional.ofNullable(this.resourceGroupId);
    }

    /**
     * Scheduling algorithm. Value:
     * - **5TCH (default)**: quintuple hash, which is based on the consistent hash of the quintuple (source IP, Destination IP, source port, destination port, and protocol). The same flow is scheduled to the same backend server.
     * - `3TCH`: a three-tuple hash, which is based on the consistent hash of three tuples (source IP address, destination IP address, and protocol). The same flow is dispatched to the same backend server.
     * - `2TCH`: Binary Group hash, which is based on the consistent hash of the binary group (source IP and destination IP). The same flow is scheduled to the same backend server.
     * 
     */
    @Import(name="scheduler")
    private @Nullable Output<String> scheduler;

    /**
     * @return Scheduling algorithm. Value:
     * - **5TCH (default)**: quintuple hash, which is based on the consistent hash of the quintuple (source IP, Destination IP, source port, destination port, and protocol). The same flow is scheduled to the same backend server.
     * - `3TCH`: a three-tuple hash, which is based on the consistent hash of three tuples (source IP address, destination IP address, and protocol). The same flow is dispatched to the same backend server.
     * - `2TCH`: Binary Group hash, which is based on the consistent hash of the binary group (source IP and destination IP). The same flow is scheduled to the same backend server.
     * 
     */
    public Optional<Output<String>> scheduler() {
        return Optional.ofNullable(this.scheduler);
    }

    /**
     * The server group name.
     * 
     * It must be 2 to 128 characters in length, start with an uppercase letter or a Chinese character, and can contain digits, half-width periods (.), underscores (_), and dashes (-).
     * 
     */
    @Import(name="serverGroupName")
    private @Nullable Output<String> serverGroupName;

    /**
     * @return The server group name.
     * 
     * It must be 2 to 128 characters in length, start with an uppercase letter or a Chinese character, and can contain digits, half-width periods (.), underscores (_), and dashes (-).
     * 
     */
    public Optional<Output<String>> serverGroupName() {
        return Optional.ofNullable(this.serverGroupName);
    }

    /**
     * The server group type. Value:
     * - **Instance (default)**: The instance type. You can add Ecs, Eni, and Eci instances to the server group.
     * - `Ip`: The Ip address type. You can directly add backend servers of the Ip address type to the server group.
     * 
     */
    @Import(name="serverGroupType")
    private @Nullable Output<String> serverGroupType;

    /**
     * @return The server group type. Value:
     * - **Instance (default)**: The instance type. You can add Ecs, Eni, and Eci instances to the server group.
     * - `Ip`: The Ip address type. You can directly add backend servers of the Ip address type to the server group.
     * 
     */
    public Optional<Output<String>> serverGroupType() {
        return Optional.ofNullable(this.serverGroupType);
    }

    /**
     * List of servers. See `servers` below.
     * 
     */
    @Import(name="servers")
    private @Nullable Output<List<ServerGroupServerArgs>> servers;

    /**
     * @return List of servers. See `servers` below.
     * 
     */
    public Optional<Output<List<ServerGroupServerArgs>>> servers() {
        return Optional.ofNullable(this.servers);
    }

    /**
     * List of resource tags.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return List of resource tags.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * The VPC instance ID.
     * 
     * &gt; **NOTE:**  If the value of ServerGroupType is Instance, only servers in the VPC can be added to the server group.
     * 
     */
    @Import(name="vpcId", required=true)
    private Output<String> vpcId;

    /**
     * @return The VPC instance ID.
     * 
     * &gt; **NOTE:**  If the value of ServerGroupType is Instance, only servers in the VPC can be added to the server group.
     * 
     */
    public Output<String> vpcId() {
        return this.vpcId;
    }

    private ServerGroupArgs() {}

    private ServerGroupArgs(ServerGroupArgs $) {
        this.connectionDrainConfig = $.connectionDrainConfig;
        this.dryRun = $.dryRun;
        this.healthCheckConfig = $.healthCheckConfig;
        this.protocol = $.protocol;
        this.resourceGroupId = $.resourceGroupId;
        this.scheduler = $.scheduler;
        this.serverGroupName = $.serverGroupName;
        this.serverGroupType = $.serverGroupType;
        this.servers = $.servers;
        this.tags = $.tags;
        this.vpcId = $.vpcId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServerGroupArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServerGroupArgs $;

        public Builder() {
            $ = new ServerGroupArgs();
        }

        public Builder(ServerGroupArgs defaults) {
            $ = new ServerGroupArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param connectionDrainConfig Connected graceful interrupt configuration. See `connection_drain_config` below.
         * 
         * @return builder
         * 
         */
        public Builder connectionDrainConfig(@Nullable Output<ServerGroupConnectionDrainConfigArgs> connectionDrainConfig) {
            $.connectionDrainConfig = connectionDrainConfig;
            return this;
        }

        /**
         * @param connectionDrainConfig Connected graceful interrupt configuration. See `connection_drain_config` below.
         * 
         * @return builder
         * 
         */
        public Builder connectionDrainConfig(ServerGroupConnectionDrainConfigArgs connectionDrainConfig) {
            return connectionDrainConfig(Output.of(connectionDrainConfig));
        }

        /**
         * @param dryRun Specifies whether to perform only a dry run, without performing the actual request.
         * 
         * @return builder
         * 
         */
        public Builder dryRun(@Nullable Output<Boolean> dryRun) {
            $.dryRun = dryRun;
            return this;
        }

        /**
         * @param dryRun Specifies whether to perform only a dry run, without performing the actual request.
         * 
         * @return builder
         * 
         */
        public Builder dryRun(Boolean dryRun) {
            return dryRun(Output.of(dryRun));
        }

        /**
         * @param healthCheckConfig Health check configurations. See `health_check_config` below.
         * 
         * @return builder
         * 
         */
        public Builder healthCheckConfig(@Nullable Output<ServerGroupHealthCheckConfigArgs> healthCheckConfig) {
            $.healthCheckConfig = healthCheckConfig;
            return this;
        }

        /**
         * @param healthCheckConfig Health check configurations. See `health_check_config` below.
         * 
         * @return builder
         * 
         */
        public Builder healthCheckConfig(ServerGroupHealthCheckConfigArgs healthCheckConfig) {
            return healthCheckConfig(Output.of(healthCheckConfig));
        }

        /**
         * @param protocol Backend Protocol. Value:
         * 
         * - *GENEVE (default)**.
         * 
         * @return builder
         * 
         */
        public Builder protocol(@Nullable Output<String> protocol) {
            $.protocol = protocol;
            return this;
        }

        /**
         * @param protocol Backend Protocol. Value:
         * 
         * - *GENEVE (default)**.
         * 
         * @return builder
         * 
         */
        public Builder protocol(String protocol) {
            return protocol(Output.of(protocol));
        }

        /**
         * @param resourceGroupId The ID of the resource group.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupId(@Nullable Output<String> resourceGroupId) {
            $.resourceGroupId = resourceGroupId;
            return this;
        }

        /**
         * @param resourceGroupId The ID of the resource group.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupId(String resourceGroupId) {
            return resourceGroupId(Output.of(resourceGroupId));
        }

        /**
         * @param scheduler Scheduling algorithm. Value:
         * - **5TCH (default)**: quintuple hash, which is based on the consistent hash of the quintuple (source IP, Destination IP, source port, destination port, and protocol). The same flow is scheduled to the same backend server.
         * - `3TCH`: a three-tuple hash, which is based on the consistent hash of three tuples (source IP address, destination IP address, and protocol). The same flow is dispatched to the same backend server.
         * - `2TCH`: Binary Group hash, which is based on the consistent hash of the binary group (source IP and destination IP). The same flow is scheduled to the same backend server.
         * 
         * @return builder
         * 
         */
        public Builder scheduler(@Nullable Output<String> scheduler) {
            $.scheduler = scheduler;
            return this;
        }

        /**
         * @param scheduler Scheduling algorithm. Value:
         * - **5TCH (default)**: quintuple hash, which is based on the consistent hash of the quintuple (source IP, Destination IP, source port, destination port, and protocol). The same flow is scheduled to the same backend server.
         * - `3TCH`: a three-tuple hash, which is based on the consistent hash of three tuples (source IP address, destination IP address, and protocol). The same flow is dispatched to the same backend server.
         * - `2TCH`: Binary Group hash, which is based on the consistent hash of the binary group (source IP and destination IP). The same flow is scheduled to the same backend server.
         * 
         * @return builder
         * 
         */
        public Builder scheduler(String scheduler) {
            return scheduler(Output.of(scheduler));
        }

        /**
         * @param serverGroupName The server group name.
         * 
         * It must be 2 to 128 characters in length, start with an uppercase letter or a Chinese character, and can contain digits, half-width periods (.), underscores (_), and dashes (-).
         * 
         * @return builder
         * 
         */
        public Builder serverGroupName(@Nullable Output<String> serverGroupName) {
            $.serverGroupName = serverGroupName;
            return this;
        }

        /**
         * @param serverGroupName The server group name.
         * 
         * It must be 2 to 128 characters in length, start with an uppercase letter or a Chinese character, and can contain digits, half-width periods (.), underscores (_), and dashes (-).
         * 
         * @return builder
         * 
         */
        public Builder serverGroupName(String serverGroupName) {
            return serverGroupName(Output.of(serverGroupName));
        }

        /**
         * @param serverGroupType The server group type. Value:
         * - **Instance (default)**: The instance type. You can add Ecs, Eni, and Eci instances to the server group.
         * - `Ip`: The Ip address type. You can directly add backend servers of the Ip address type to the server group.
         * 
         * @return builder
         * 
         */
        public Builder serverGroupType(@Nullable Output<String> serverGroupType) {
            $.serverGroupType = serverGroupType;
            return this;
        }

        /**
         * @param serverGroupType The server group type. Value:
         * - **Instance (default)**: The instance type. You can add Ecs, Eni, and Eci instances to the server group.
         * - `Ip`: The Ip address type. You can directly add backend servers of the Ip address type to the server group.
         * 
         * @return builder
         * 
         */
        public Builder serverGroupType(String serverGroupType) {
            return serverGroupType(Output.of(serverGroupType));
        }

        /**
         * @param servers List of servers. See `servers` below.
         * 
         * @return builder
         * 
         */
        public Builder servers(@Nullable Output<List<ServerGroupServerArgs>> servers) {
            $.servers = servers;
            return this;
        }

        /**
         * @param servers List of servers. See `servers` below.
         * 
         * @return builder
         * 
         */
        public Builder servers(List<ServerGroupServerArgs> servers) {
            return servers(Output.of(servers));
        }

        /**
         * @param servers List of servers. See `servers` below.
         * 
         * @return builder
         * 
         */
        public Builder servers(ServerGroupServerArgs... servers) {
            return servers(List.of(servers));
        }

        /**
         * @param tags List of resource tags.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags List of resource tags.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param vpcId The VPC instance ID.
         * 
         * &gt; **NOTE:**  If the value of ServerGroupType is Instance, only servers in the VPC can be added to the server group.
         * 
         * @return builder
         * 
         */
        public Builder vpcId(Output<String> vpcId) {
            $.vpcId = vpcId;
            return this;
        }

        /**
         * @param vpcId The VPC instance ID.
         * 
         * &gt; **NOTE:**  If the value of ServerGroupType is Instance, only servers in the VPC can be added to the server group.
         * 
         * @return builder
         * 
         */
        public Builder vpcId(String vpcId) {
            return vpcId(Output.of(vpcId));
        }

        public ServerGroupArgs build() {
            if ($.vpcId == null) {
                throw new MissingRequiredPropertyException("ServerGroupArgs", "vpcId");
            }
            return $;
        }
    }

}
