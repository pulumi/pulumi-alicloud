// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.dts;

import com.pulumi.alicloud.Utilities;
import com.pulumi.alicloud.dts.MigrationJobArgs;
import com.pulumi.alicloud.dts.inputs.MigrationJobState;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.String;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Provides a DTS Migration Job resource.
 * 
 * For information about DTS Migration Job and how to use it, see [What is Migration Job](https://www.alibabacloud.com/help/en/doc-detail/208399.html).
 * 
 * &gt; **NOTE:** Available since v1.157.0.
 * 
 * ## Example Usage
 * 
 * Basic Usage
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.alicloud.AlicloudFunctions;
 * import com.pulumi.alicloud.inputs.GetRegionsArgs;
 * import com.pulumi.alicloud.rds.RdsFunctions;
 * import com.pulumi.alicloud.rds.inputs.GetZonesArgs;
 * import com.pulumi.alicloud.rds.inputs.GetInstanceClassesArgs;
 * import com.pulumi.alicloud.vpc.Network;
 * import com.pulumi.alicloud.vpc.NetworkArgs;
 * import com.pulumi.alicloud.vpc.Switch;
 * import com.pulumi.alicloud.vpc.SwitchArgs;
 * import com.pulumi.alicloud.ecs.SecurityGroup;
 * import com.pulumi.alicloud.ecs.SecurityGroupArgs;
 * import com.pulumi.alicloud.rds.Instance;
 * import com.pulumi.alicloud.rds.InstanceArgs;
 * import com.pulumi.std.StdFunctions;
 * import com.pulumi.std.inputs.FormatArgs;
 * import com.pulumi.alicloud.rds.RdsAccount;
 * import com.pulumi.alicloud.rds.RdsAccountArgs;
 * import com.pulumi.alicloud.rds.Database;
 * import com.pulumi.alicloud.rds.DatabaseArgs;
 * import com.pulumi.alicloud.rds.AccountPrivilege;
 * import com.pulumi.alicloud.rds.AccountPrivilegeArgs;
 * import com.pulumi.alicloud.dts.MigrationInstance;
 * import com.pulumi.alicloud.dts.MigrationInstanceArgs;
 * import com.pulumi.alicloud.dts.MigrationJob;
 * import com.pulumi.alicloud.dts.MigrationJobArgs;
 * import static com.pulumi.codegen.internal.Serialization.*;
 * import com.pulumi.codegen.internal.KeyedValue;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         final var config = ctx.config();
 *         final var name = config.get("name").orElse("terraform-example");
 *         final var example = AlicloudFunctions.getRegions(GetRegionsArgs.builder()
 *             .current(true)
 *             .build());
 * 
 *         final var exampleGetZones = RdsFunctions.getZones(GetZonesArgs.builder()
 *             .engine("MySQL")
 *             .engineVersion("8.0")
 *             .instanceChargeType("PostPaid")
 *             .category("Basic")
 *             .dbInstanceStorageType("cloud_essd")
 *             .build());
 * 
 *         final var exampleGetInstanceClasses = RdsFunctions.getInstanceClasses(GetInstanceClassesArgs.builder()
 *             .zoneId(exampleGetZones.zones()[0].id())
 *             .engine("MySQL")
 *             .engineVersion("8.0")
 *             .instanceChargeType("PostPaid")
 *             .category("Basic")
 *             .dbInstanceStorageType("cloud_essd")
 *             .build());
 * 
 *         var exampleNetwork = new Network("exampleNetwork", NetworkArgs.builder()
 *             .vpcName(name)
 *             .cidrBlock("172.16.0.0/16")
 *             .build());
 * 
 *         var exampleSwitch = new Switch("exampleSwitch", SwitchArgs.builder()
 *             .vpcId(exampleNetwork.id())
 *             .cidrBlock("172.16.0.0/24")
 *             .zoneId(exampleGetZones.zones()[0].id())
 *             .vswitchName(name)
 *             .build());
 * 
 *         var exampleSecurityGroup = new SecurityGroup("exampleSecurityGroup", SecurityGroupArgs.builder()
 *             .name(name)
 *             .vpcId(exampleNetwork.id())
 *             .build());
 * 
 *         for (var i = 0; i < 2; i++) {
 *             new Instance("exampleInstance-" + i, InstanceArgs.builder()
 *                 .engine("MySQL")
 *                 .engineVersion("8.0")
 *                 .instanceType(exampleGetInstanceClasses.instanceClasses()[0].instanceClass())
 *                 .instanceStorage(exampleGetInstanceClasses.instanceClasses()[0].storageRange().min())
 *                 .instanceChargeType("Postpaid")
 *                 .instanceName(StdFunctions.format(FormatArgs.builder()
 *                     .input(String.format("%s_%d", name))
 *                     .args(range.value() + 1)
 *                     .build()).result())
 *                 .vswitchId(exampleSwitch.id())
 *                 .monitoringPeriod(60)
 *                 .dbInstanceStorageType("cloud_essd")
 *                 .securityGroupIds(exampleSecurityGroup.id())
 *                 .build());
 * 
 *         
 * }
 *         for (var i = 0; i < 2; i++) {
 *             new RdsAccount("exampleRdsAccount-" + i, RdsAccountArgs.builder()
 *                 .dbInstanceId(exampleInstance[range.value()].id())
 *                 .accountName(StdFunctions.format(FormatArgs.builder()
 *                     .input("example_name_%d")
 *                     .args(range.value() + 1)
 *                     .build()).result())
 *                 .accountPassword(StdFunctions.format(FormatArgs.builder()
 *                     .input("example_password_%d")
 *                     .args(range.value() + 1)
 *                     .build()).result())
 *                 .build());
 * 
 *         
 * }
 *         for (var i = 0; i < 2; i++) {
 *             new Database("exampleDatabase-" + i, DatabaseArgs.builder()
 *                 .instanceId(exampleInstance[range.value()].id())
 *                 .name(StdFunctions.format(FormatArgs.builder()
 *                     .input(String.format("%s_%d", name))
 *                     .args(range.value() + 1)
 *                     .build()).result())
 *                 .build());
 * 
 *         
 * }
 *         for (var i = 0; i < 2; i++) {
 *             new AccountPrivilege("exampleAccountPrivilege-" + i, AccountPrivilegeArgs.builder()
 *                 .instanceId(exampleInstance[range.value()].id())
 *                 .accountName(exampleRdsAccount[range.value()].name())
 *                 .privilege("ReadWrite")
 *                 .dbNames(exampleDatabase[range.value()].name())
 *                 .build());
 * 
 *         
 * }
 *         var exampleMigrationInstance = new MigrationInstance("exampleMigrationInstance", MigrationInstanceArgs.builder()
 *             .paymentType("PayAsYouGo")
 *             .sourceEndpointEngineName("MySQL")
 *             .sourceEndpointRegion(example.regions()[0].id())
 *             .destinationEndpointEngineName("MySQL")
 *             .destinationEndpointRegion(example.regions()[0].id())
 *             .instanceClass("small")
 *             .syncArchitecture("oneway")
 *             .build());
 * 
 *         var exampleMigrationJob = new MigrationJob("exampleMigrationJob", MigrationJobArgs.builder()
 *             .dtsInstanceId(exampleMigrationInstance.id())
 *             .dtsJobName(name)
 *             .sourceEndpointInstanceType("RDS")
 *             .sourceEndpointInstanceId(exampleAccountPrivilege[0].instanceId())
 *             .sourceEndpointEngineName("MySQL")
 *             .sourceEndpointRegion(example.regions()[0].id())
 *             .sourceEndpointUserName(exampleRdsAccount[0].accountName())
 *             .sourceEndpointPassword(exampleRdsAccount[0].accountPassword())
 *             .destinationEndpointInstanceType("RDS")
 *             .destinationEndpointInstanceId(exampleAccountPrivilege[1].instanceId())
 *             .destinationEndpointEngineName("MySQL")
 *             .destinationEndpointRegion(example.regions()[0].id())
 *             .destinationEndpointUserName(exampleRdsAccount[1].accountName())
 *             .destinationEndpointPassword(exampleRdsAccount[1].accountPassword())
 *             .dbList(Output.tuple(exampleDatabase[0].name(), exampleDatabase[1].name()).applyValue(values -> {
 *                 var exampleDatabaseName = values.t1;
 *                 var exampleDatabaseName1 = values.t2;
 *                 return serializeJson(
 *                     jsonObject(
 *                         jsonProperty(exampleDatabaseName, jsonObject(
 *                             jsonProperty("name", exampleDatabaseName1),
 *                             jsonProperty("all", true)
 *                         ))
 *                     ));
 *             }))
 *             .structureInitialization(true)
 *             .dataInitialization(true)
 *             .dataSynchronization(true)
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Notice
 * 
 * 1. The expiration time cannot be changed after the work of the annual and monthly subscription suspended;
 * 2. After the pay-as-you-go type job suspended, your job configuration fee will still be charged;
 * 3. If the task suspended for more than 6 hours, the task will not start successfully.
 * 4. Suspending the task will only stop writing to the target library, but will still continue to obtain the incremental log of the source, so that the task can be quickly resumed after the suspension is canceled. Therefore, some resources of the source library, such as bandwidth resources, will continue to be occupied during the period.
 * 5. Charges will continue during the task suspension period. If you need to stop charging, please release the instance
 * 6. When a DTS instance suspended for more than 7 days, the instance cannot be resumed, and the status will change from suspended to failed.
 * 
 * ## Import
 * 
 * DTS Migration Job can be imported using the id, e.g.
 * 
 * ```sh
 * $ pulumi import alicloud:dts/migrationJob:MigrationJob example &lt;id&gt;
 * ```
 * 
 */
@ResourceType(type="alicloud:dts/migrationJob:MigrationJob")
public class MigrationJob extends com.pulumi.resources.CustomResource {
    /**
     * Start time in Unix timestamp format.
     * 
     */
    @Export(name="checkpoint", refs={String.class}, tree="[0]")
    private Output<String> checkpoint;

    /**
     * @return Start time in Unix timestamp format.
     * 
     */
    public Output<String> checkpoint() {
        return this.checkpoint;
    }
    /**
     * Whether to execute DTS supports schema migration.
     * 
     */
    @Export(name="dataInitialization", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> dataInitialization;

    /**
     * @return Whether to execute DTS supports schema migration.
     * 
     */
    public Output<Boolean> dataInitialization() {
        return this.dataInitialization;
    }
    /**
     * Whether to perform incremental data migration.
     * 
     */
    @Export(name="dataSynchronization", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> dataSynchronization;

    /**
     * @return Whether to perform incremental data migration.
     * 
     */
    public Output<Boolean> dataSynchronization() {
        return this.dataSynchronization;
    }
    /**
     * Migration object, in the format of JSON strings. For detailed definition instructions, please refer to [the description of migration, migration or subscription objects](https://help.aliyun.com/document_detail/209545.html).
     * 
     */
    @Export(name="dbList", refs={String.class}, tree="[0]")
    private Output<String> dbList;

    /**
     * @return Migration object, in the format of JSON strings. For detailed definition instructions, please refer to [the description of migration, migration or subscription objects](https://help.aliyun.com/document_detail/209545.html).
     * 
     */
    public Output<String> dbList() {
        return this.dbList;
    }
    /**
     * The name of migrate the database.
     * 
     */
    @Export(name="destinationEndpointDatabaseName", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> destinationEndpointDatabaseName;

    /**
     * @return The name of migrate the database.
     * 
     */
    public Output<Optional<String>> destinationEndpointDatabaseName() {
        return Codegen.optional(this.destinationEndpointDatabaseName);
    }
    /**
     * The type of destination database. Valid values: `ADS`, `ADB30`, `AS400`, `DATAHUB`, `DB2`, `GREENPLUM`, `KAFKA`, `MONGODB`, `MSSQL`, `MySQL`, `ORACLE`, `PolarDB`, `POLARDBX20`, `POLARDB_O`, `PostgreSQL`.
     * 
     */
    @Export(name="destinationEndpointEngineName", refs={String.class}, tree="[0]")
    private Output<String> destinationEndpointEngineName;

    /**
     * @return The type of destination database. Valid values: `ADS`, `ADB30`, `AS400`, `DATAHUB`, `DB2`, `GREENPLUM`, `KAFKA`, `MONGODB`, `MSSQL`, `MySQL`, `ORACLE`, `PolarDB`, `POLARDBX20`, `POLARDB_O`, `PostgreSQL`.
     * 
     */
    public Output<String> destinationEndpointEngineName() {
        return this.destinationEndpointEngineName;
    }
    /**
     * The ID of destination instance.
     * 
     */
    @Export(name="destinationEndpointInstanceId", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> destinationEndpointInstanceId;

    /**
     * @return The ID of destination instance.
     * 
     */
    public Output<Optional<String>> destinationEndpointInstanceId() {
        return Codegen.optional(this.destinationEndpointInstanceId);
    }
    /**
     * The type of destination instance. Valid values: `ADS`, `CEN`, `DATAHUB`, `DG`, `ECS`, `EXPRESS`, `GREENPLUM`, `MONGODB`, `OTHER`, `PolarDB`, `POLARDBX20`, `RDS`.
     * 
     */
    @Export(name="destinationEndpointInstanceType", refs={String.class}, tree="[0]")
    private Output<String> destinationEndpointInstanceType;

    /**
     * @return The type of destination instance. Valid values: `ADS`, `CEN`, `DATAHUB`, `DG`, `ECS`, `EXPRESS`, `GREENPLUM`, `MONGODB`, `OTHER`, `PolarDB`, `POLARDBX20`, `RDS`.
     * 
     */
    public Output<String> destinationEndpointInstanceType() {
        return this.destinationEndpointInstanceType;
    }
    /**
     * The ip of source endpoint.
     * 
     */
    @Export(name="destinationEndpointIp", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> destinationEndpointIp;

    /**
     * @return The ip of source endpoint.
     * 
     */
    public Output<Optional<String>> destinationEndpointIp() {
        return Codegen.optional(this.destinationEndpointIp);
    }
    /**
     * The SID of Oracle database.
     * 
     */
    @Export(name="destinationEndpointOracleSid", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> destinationEndpointOracleSid;

    /**
     * @return The SID of Oracle database.
     * 
     */
    public Output<Optional<String>> destinationEndpointOracleSid() {
        return Codegen.optional(this.destinationEndpointOracleSid);
    }
    /**
     * The password of database account.
     * 
     */
    @Export(name="destinationEndpointPassword", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> destinationEndpointPassword;

    /**
     * @return The password of database account.
     * 
     */
    public Output<Optional<String>> destinationEndpointPassword() {
        return Codegen.optional(this.destinationEndpointPassword);
    }
    /**
     * The port of source endpoint.
     * 
     */
    @Export(name="destinationEndpointPort", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> destinationEndpointPort;

    /**
     * @return The port of source endpoint.
     * 
     */
    public Output<Optional<String>> destinationEndpointPort() {
        return Codegen.optional(this.destinationEndpointPort);
    }
    /**
     * The region of destination instance.
     * 
     */
    @Export(name="destinationEndpointRegion", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> destinationEndpointRegion;

    /**
     * @return The region of destination instance.
     * 
     */
    public Output<Optional<String>> destinationEndpointRegion() {
        return Codegen.optional(this.destinationEndpointRegion);
    }
    /**
     * The username of database account.
     * 
     */
    @Export(name="destinationEndpointUserName", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> destinationEndpointUserName;

    /**
     * @return The username of database account.
     * 
     */
    public Output<Optional<String>> destinationEndpointUserName() {
        return Codegen.optional(this.destinationEndpointUserName);
    }
    /**
     * The Migration instance ID. The ID of `alicloud.dts.MigrationInstance`.
     * 
     */
    @Export(name="dtsInstanceId", refs={String.class}, tree="[0]")
    private Output<String> dtsInstanceId;

    /**
     * @return The Migration instance ID. The ID of `alicloud.dts.MigrationInstance`.
     * 
     */
    public Output<String> dtsInstanceId() {
        return this.dtsInstanceId;
    }
    /**
     * The name of migration job.
     * 
     */
    @Export(name="dtsJobName", refs={String.class}, tree="[0]")
    private Output<String> dtsJobName;

    /**
     * @return The name of migration job.
     * 
     */
    public Output<String> dtsJobName() {
        return this.dtsJobName;
    }
    /**
     * The instance class. Valid values: `large`, `medium`, `micro`, `small`, `xlarge`, `xxlarge`.
     * 
     */
    @Export(name="instanceClass", refs={String.class}, tree="[0]")
    private Output<String> instanceClass;

    /**
     * @return The instance class. Valid values: `large`, `medium`, `micro`, `small`, `xlarge`, `xxlarge`.
     * 
     */
    public Output<String> instanceClass() {
        return this.instanceClass;
    }
    /**
     * The name of migrate the database.
     * 
     */
    @Export(name="sourceEndpointDatabaseName", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> sourceEndpointDatabaseName;

    /**
     * @return The name of migrate the database.
     * 
     */
    public Output<Optional<String>> sourceEndpointDatabaseName() {
        return Codegen.optional(this.sourceEndpointDatabaseName);
    }
    /**
     * The type of source database. Valid values: `AS400`, `DB2`, `DMSPOLARDB`, `HBASE`, `MONGODB`, `MSSQL`, `MySQL`, `ORACLE`, `PolarDB`, `POLARDBX20`, `POLARDB_O`, `POSTGRESQL`, `TERADATA`.
     * 
     */
    @Export(name="sourceEndpointEngineName", refs={String.class}, tree="[0]")
    private Output<String> sourceEndpointEngineName;

    /**
     * @return The type of source database. Valid values: `AS400`, `DB2`, `DMSPOLARDB`, `HBASE`, `MONGODB`, `MSSQL`, `MySQL`, `ORACLE`, `PolarDB`, `POLARDBX20`, `POLARDB_O`, `POSTGRESQL`, `TERADATA`.
     * 
     */
    public Output<String> sourceEndpointEngineName() {
        return this.sourceEndpointEngineName;
    }
    /**
     * The ID of source instance.
     * 
     */
    @Export(name="sourceEndpointInstanceId", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> sourceEndpointInstanceId;

    /**
     * @return The ID of source instance.
     * 
     */
    public Output<Optional<String>> sourceEndpointInstanceId() {
        return Codegen.optional(this.sourceEndpointInstanceId);
    }
    /**
     * The type of source instance. Valid values: `CEN`, `DG`, `DISTRIBUTED_DMSLOGICDB`, `ECS`, `EXPRESS`, `MONGODB`, `OTHER`, `PolarDB`, `POLARDBX20`, `RDS`.
     * 
     */
    @Export(name="sourceEndpointInstanceType", refs={String.class}, tree="[0]")
    private Output<String> sourceEndpointInstanceType;

    /**
     * @return The type of source instance. Valid values: `CEN`, `DG`, `DISTRIBUTED_DMSLOGICDB`, `ECS`, `EXPRESS`, `MONGODB`, `OTHER`, `PolarDB`, `POLARDBX20`, `RDS`.
     * 
     */
    public Output<String> sourceEndpointInstanceType() {
        return this.sourceEndpointInstanceType;
    }
    /**
     * The ip of source endpoint.
     * 
     */
    @Export(name="sourceEndpointIp", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> sourceEndpointIp;

    /**
     * @return The ip of source endpoint.
     * 
     */
    public Output<Optional<String>> sourceEndpointIp() {
        return Codegen.optional(this.sourceEndpointIp);
    }
    /**
     * The SID of Oracle database.
     * 
     */
    @Export(name="sourceEndpointOracleSid", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> sourceEndpointOracleSid;

    /**
     * @return The SID of Oracle database.
     * 
     */
    public Output<Optional<String>> sourceEndpointOracleSid() {
        return Codegen.optional(this.sourceEndpointOracleSid);
    }
    /**
     * The Alibaba Cloud account ID to which the source instance belongs.
     * 
     */
    @Export(name="sourceEndpointOwnerId", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> sourceEndpointOwnerId;

    /**
     * @return The Alibaba Cloud account ID to which the source instance belongs.
     * 
     */
    public Output<Optional<String>> sourceEndpointOwnerId() {
        return Codegen.optional(this.sourceEndpointOwnerId);
    }
    /**
     * The password of database account.
     * 
     */
    @Export(name="sourceEndpointPassword", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> sourceEndpointPassword;

    /**
     * @return The password of database account.
     * 
     */
    public Output<Optional<String>> sourceEndpointPassword() {
        return Codegen.optional(this.sourceEndpointPassword);
    }
    /**
     * The port of source endpoint.
     * 
     */
    @Export(name="sourceEndpointPort", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> sourceEndpointPort;

    /**
     * @return The port of source endpoint.
     * 
     */
    public Output<Optional<String>> sourceEndpointPort() {
        return Codegen.optional(this.sourceEndpointPort);
    }
    /**
     * The region of source instance.
     * 
     */
    @Export(name="sourceEndpointRegion", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> sourceEndpointRegion;

    /**
     * @return The region of source instance.
     * 
     */
    public Output<Optional<String>> sourceEndpointRegion() {
        return Codegen.optional(this.sourceEndpointRegion);
    }
    /**
     * The name of the role configured for the cloud account to which the source instance belongs.
     * 
     */
    @Export(name="sourceEndpointRole", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> sourceEndpointRole;

    /**
     * @return The name of the role configured for the cloud account to which the source instance belongs.
     * 
     */
    public Output<Optional<String>> sourceEndpointRole() {
        return Codegen.optional(this.sourceEndpointRole);
    }
    /**
     * The username of database account.
     * 
     */
    @Export(name="sourceEndpointUserName", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> sourceEndpointUserName;

    /**
     * @return The username of database account.
     * 
     */
    public Output<Optional<String>> sourceEndpointUserName() {
        return Codegen.optional(this.sourceEndpointUserName);
    }
    /**
     * The status of the resource. Valid values: `Migrating`, `Suspending`. You can suspend the task by specifying `Suspending` and start the task by specifying `Migrating`.
     * 
     */
    @Export(name="status", refs={String.class}, tree="[0]")
    private Output<String> status;

    /**
     * @return The status of the resource. Valid values: `Migrating`, `Suspending`. You can suspend the task by specifying `Suspending` and start the task by specifying `Migrating`.
     * 
     */
    public Output<String> status() {
        return this.status;
    }
    /**
     * Whether to perform a database table structure to migrate.
     * 
     */
    @Export(name="structureInitialization", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> structureInitialization;

    /**
     * @return Whether to perform a database table structure to migrate.
     * 
     */
    public Output<Boolean> structureInitialization() {
        return this.structureInitialization;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public MigrationJob(java.lang.String name) {
        this(name, MigrationJobArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public MigrationJob(java.lang.String name, MigrationJobArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public MigrationJob(java.lang.String name, MigrationJobArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("alicloud:dts/migrationJob:MigrationJob", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private MigrationJob(java.lang.String name, Output<java.lang.String> id, @Nullable MigrationJobState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("alicloud:dts/migrationJob:MigrationJob", name, state, makeResourceOptions(options, id), false);
    }

    private static MigrationJobArgs makeArgs(MigrationJobArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? MigrationJobArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static MigrationJob get(java.lang.String name, Output<java.lang.String> id, @Nullable MigrationJobState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new MigrationJob(name, id, state, options);
    }
}
