// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.expressconnect;

import com.pulumi.alicloud.Utilities;
import com.pulumi.alicloud.expressconnect.inputs.GetAccessPointsArgs;
import com.pulumi.alicloud.expressconnect.inputs.GetAccessPointsPlainArgs;
import com.pulumi.alicloud.expressconnect.inputs.GetGrantRuleToCensArgs;
import com.pulumi.alicloud.expressconnect.inputs.GetGrantRuleToCensPlainArgs;
import com.pulumi.alicloud.expressconnect.inputs.GetPhysicalConnectionServiceArgs;
import com.pulumi.alicloud.expressconnect.inputs.GetPhysicalConnectionServicePlainArgs;
import com.pulumi.alicloud.expressconnect.inputs.GetPhysicalConnectionsArgs;
import com.pulumi.alicloud.expressconnect.inputs.GetPhysicalConnectionsPlainArgs;
import com.pulumi.alicloud.expressconnect.inputs.GetRouterInterfacesArgs;
import com.pulumi.alicloud.expressconnect.inputs.GetRouterInterfacesPlainArgs;
import com.pulumi.alicloud.expressconnect.inputs.GetVbrPconnAssociationsArgs;
import com.pulumi.alicloud.expressconnect.inputs.GetVbrPconnAssociationsPlainArgs;
import com.pulumi.alicloud.expressconnect.inputs.GetVirtualBorderRoutersArgs;
import com.pulumi.alicloud.expressconnect.inputs.GetVirtualBorderRoutersPlainArgs;
import com.pulumi.alicloud.expressconnect.inputs.GetVirtualPhysicalConnectionsArgs;
import com.pulumi.alicloud.expressconnect.inputs.GetVirtualPhysicalConnectionsPlainArgs;
import com.pulumi.alicloud.expressconnect.outputs.GetAccessPointsResult;
import com.pulumi.alicloud.expressconnect.outputs.GetGrantRuleToCensResult;
import com.pulumi.alicloud.expressconnect.outputs.GetPhysicalConnectionServiceResult;
import com.pulumi.alicloud.expressconnect.outputs.GetPhysicalConnectionsResult;
import com.pulumi.alicloud.expressconnect.outputs.GetRouterInterfacesResult;
import com.pulumi.alicloud.expressconnect.outputs.GetVbrPconnAssociationsResult;
import com.pulumi.alicloud.expressconnect.outputs.GetVirtualBorderRoutersResult;
import com.pulumi.alicloud.expressconnect.outputs.GetVirtualPhysicalConnectionsResult;
import com.pulumi.core.Output;
import com.pulumi.core.TypeShape;
import com.pulumi.deployment.Deployment;
import com.pulumi.deployment.InvokeOptions;
import java.util.concurrent.CompletableFuture;

public final class ExpressconnectFunctions {
    /**
     * This data source provides the Express Connect Access Points of the current Alibaba Cloud user.
     * 
     * &gt; **NOTE:** Available in v1.132.0+.
     * 
     * ## Example Usage
     * 
     * Basic Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.alicloud.expressconnect.ExpressconnectFunctions;
     * import com.pulumi.alicloud.expressconnect.inputs.GetAccessPointsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var ids = ExpressconnectFunctions.getAccessPoints(GetAccessPointsArgs.builder()
     *             .ids("ap-cn-hangzhou-yh-C")
     *             .build());
     * 
     *         ctx.export("expressConnectAccessPointId1", ids.applyValue(getAccessPointsResult -> getAccessPointsResult.points()[0].id()));
     *         final var nameRegex = ExpressconnectFunctions.getAccessPoints(GetAccessPointsArgs.builder()
     *             .nameRegex("^杭州-")
     *             .build());
     * 
     *         ctx.export("expressConnectAccessPointId2", nameRegex.applyValue(getAccessPointsResult -> getAccessPointsResult.points()[0].id()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetAccessPointsResult> getAccessPoints() {
        return getAccessPoints(GetAccessPointsArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * This data source provides the Express Connect Access Points of the current Alibaba Cloud user.
     * 
     * &gt; **NOTE:** Available in v1.132.0+.
     * 
     * ## Example Usage
     * 
     * Basic Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.alicloud.expressconnect.ExpressconnectFunctions;
     * import com.pulumi.alicloud.expressconnect.inputs.GetAccessPointsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var ids = ExpressconnectFunctions.getAccessPoints(GetAccessPointsArgs.builder()
     *             .ids("ap-cn-hangzhou-yh-C")
     *             .build());
     * 
     *         ctx.export("expressConnectAccessPointId1", ids.applyValue(getAccessPointsResult -> getAccessPointsResult.points()[0].id()));
     *         final var nameRegex = ExpressconnectFunctions.getAccessPoints(GetAccessPointsArgs.builder()
     *             .nameRegex("^杭州-")
     *             .build());
     * 
     *         ctx.export("expressConnectAccessPointId2", nameRegex.applyValue(getAccessPointsResult -> getAccessPointsResult.points()[0].id()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetAccessPointsResult> getAccessPointsPlain() {
        return getAccessPointsPlain(GetAccessPointsPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * This data source provides the Express Connect Access Points of the current Alibaba Cloud user.
     * 
     * &gt; **NOTE:** Available in v1.132.0+.
     * 
     * ## Example Usage
     * 
     * Basic Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.alicloud.expressconnect.ExpressconnectFunctions;
     * import com.pulumi.alicloud.expressconnect.inputs.GetAccessPointsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var ids = ExpressconnectFunctions.getAccessPoints(GetAccessPointsArgs.builder()
     *             .ids("ap-cn-hangzhou-yh-C")
     *             .build());
     * 
     *         ctx.export("expressConnectAccessPointId1", ids.applyValue(getAccessPointsResult -> getAccessPointsResult.points()[0].id()));
     *         final var nameRegex = ExpressconnectFunctions.getAccessPoints(GetAccessPointsArgs.builder()
     *             .nameRegex("^杭州-")
     *             .build());
     * 
     *         ctx.export("expressConnectAccessPointId2", nameRegex.applyValue(getAccessPointsResult -> getAccessPointsResult.points()[0].id()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetAccessPointsResult> getAccessPoints(GetAccessPointsArgs args) {
        return getAccessPoints(args, InvokeOptions.Empty);
    }
    /**
     * This data source provides the Express Connect Access Points of the current Alibaba Cloud user.
     * 
     * &gt; **NOTE:** Available in v1.132.0+.
     * 
     * ## Example Usage
     * 
     * Basic Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.alicloud.expressconnect.ExpressconnectFunctions;
     * import com.pulumi.alicloud.expressconnect.inputs.GetAccessPointsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var ids = ExpressconnectFunctions.getAccessPoints(GetAccessPointsArgs.builder()
     *             .ids("ap-cn-hangzhou-yh-C")
     *             .build());
     * 
     *         ctx.export("expressConnectAccessPointId1", ids.applyValue(getAccessPointsResult -> getAccessPointsResult.points()[0].id()));
     *         final var nameRegex = ExpressconnectFunctions.getAccessPoints(GetAccessPointsArgs.builder()
     *             .nameRegex("^杭州-")
     *             .build());
     * 
     *         ctx.export("expressConnectAccessPointId2", nameRegex.applyValue(getAccessPointsResult -> getAccessPointsResult.points()[0].id()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetAccessPointsResult> getAccessPointsPlain(GetAccessPointsPlainArgs args) {
        return getAccessPointsPlain(args, InvokeOptions.Empty);
    }
    /**
     * This data source provides the Express Connect Access Points of the current Alibaba Cloud user.
     * 
     * &gt; **NOTE:** Available in v1.132.0+.
     * 
     * ## Example Usage
     * 
     * Basic Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.alicloud.expressconnect.ExpressconnectFunctions;
     * import com.pulumi.alicloud.expressconnect.inputs.GetAccessPointsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var ids = ExpressconnectFunctions.getAccessPoints(GetAccessPointsArgs.builder()
     *             .ids("ap-cn-hangzhou-yh-C")
     *             .build());
     * 
     *         ctx.export("expressConnectAccessPointId1", ids.applyValue(getAccessPointsResult -> getAccessPointsResult.points()[0].id()));
     *         final var nameRegex = ExpressconnectFunctions.getAccessPoints(GetAccessPointsArgs.builder()
     *             .nameRegex("^杭州-")
     *             .build());
     * 
     *         ctx.export("expressConnectAccessPointId2", nameRegex.applyValue(getAccessPointsResult -> getAccessPointsResult.points()[0].id()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetAccessPointsResult> getAccessPoints(GetAccessPointsArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("alicloud:expressconnect/getAccessPoints:getAccessPoints", TypeShape.of(GetAccessPointsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * This data source provides the Express Connect Access Points of the current Alibaba Cloud user.
     * 
     * &gt; **NOTE:** Available in v1.132.0+.
     * 
     * ## Example Usage
     * 
     * Basic Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.alicloud.expressconnect.ExpressconnectFunctions;
     * import com.pulumi.alicloud.expressconnect.inputs.GetAccessPointsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var ids = ExpressconnectFunctions.getAccessPoints(GetAccessPointsArgs.builder()
     *             .ids("ap-cn-hangzhou-yh-C")
     *             .build());
     * 
     *         ctx.export("expressConnectAccessPointId1", ids.applyValue(getAccessPointsResult -> getAccessPointsResult.points()[0].id()));
     *         final var nameRegex = ExpressconnectFunctions.getAccessPoints(GetAccessPointsArgs.builder()
     *             .nameRegex("^杭州-")
     *             .build());
     * 
     *         ctx.export("expressConnectAccessPointId2", nameRegex.applyValue(getAccessPointsResult -> getAccessPointsResult.points()[0].id()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetAccessPointsResult> getAccessPointsPlain(GetAccessPointsPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("alicloud:expressconnect/getAccessPoints:getAccessPoints", TypeShape.of(GetAccessPointsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * This data source provides the Express Connect Grant Rule To Cens of the current Alibaba Cloud user.
     * 
     * &gt; **NOTE:** Available in v1.196.0+.
     * 
     * ## Example Usage
     * 
     * Basic Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.alicloud.expressconnect.ExpressconnectFunctions;
     * import com.pulumi.alicloud.expressconnect.inputs.GetGrantRuleToCensArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var ids = ExpressconnectFunctions.getGrantRuleToCens(GetGrantRuleToCensArgs.builder()
     *             .ids("example_id")
     *             .instanceId("your_vbr_instance_id")
     *             .build());
     * 
     *         ctx.export("expressConnectGrantRuleToCenId0", ids.applyValue(getGrantRuleToCensResult -> getGrantRuleToCensResult.cens()[0].id()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetGrantRuleToCensResult> getGrantRuleToCens(GetGrantRuleToCensArgs args) {
        return getGrantRuleToCens(args, InvokeOptions.Empty);
    }
    /**
     * This data source provides the Express Connect Grant Rule To Cens of the current Alibaba Cloud user.
     * 
     * &gt; **NOTE:** Available in v1.196.0+.
     * 
     * ## Example Usage
     * 
     * Basic Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.alicloud.expressconnect.ExpressconnectFunctions;
     * import com.pulumi.alicloud.expressconnect.inputs.GetGrantRuleToCensArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var ids = ExpressconnectFunctions.getGrantRuleToCens(GetGrantRuleToCensArgs.builder()
     *             .ids("example_id")
     *             .instanceId("your_vbr_instance_id")
     *             .build());
     * 
     *         ctx.export("expressConnectGrantRuleToCenId0", ids.applyValue(getGrantRuleToCensResult -> getGrantRuleToCensResult.cens()[0].id()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetGrantRuleToCensResult> getGrantRuleToCensPlain(GetGrantRuleToCensPlainArgs args) {
        return getGrantRuleToCensPlain(args, InvokeOptions.Empty);
    }
    /**
     * This data source provides the Express Connect Grant Rule To Cens of the current Alibaba Cloud user.
     * 
     * &gt; **NOTE:** Available in v1.196.0+.
     * 
     * ## Example Usage
     * 
     * Basic Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.alicloud.expressconnect.ExpressconnectFunctions;
     * import com.pulumi.alicloud.expressconnect.inputs.GetGrantRuleToCensArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var ids = ExpressconnectFunctions.getGrantRuleToCens(GetGrantRuleToCensArgs.builder()
     *             .ids("example_id")
     *             .instanceId("your_vbr_instance_id")
     *             .build());
     * 
     *         ctx.export("expressConnectGrantRuleToCenId0", ids.applyValue(getGrantRuleToCensResult -> getGrantRuleToCensResult.cens()[0].id()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetGrantRuleToCensResult> getGrantRuleToCens(GetGrantRuleToCensArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("alicloud:expressconnect/getGrantRuleToCens:getGrantRuleToCens", TypeShape.of(GetGrantRuleToCensResult.class), args, Utilities.withVersion(options));
    }
    /**
     * This data source provides the Express Connect Grant Rule To Cens of the current Alibaba Cloud user.
     * 
     * &gt; **NOTE:** Available in v1.196.0+.
     * 
     * ## Example Usage
     * 
     * Basic Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.alicloud.expressconnect.ExpressconnectFunctions;
     * import com.pulumi.alicloud.expressconnect.inputs.GetGrantRuleToCensArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var ids = ExpressconnectFunctions.getGrantRuleToCens(GetGrantRuleToCensArgs.builder()
     *             .ids("example_id")
     *             .instanceId("your_vbr_instance_id")
     *             .build());
     * 
     *         ctx.export("expressConnectGrantRuleToCenId0", ids.applyValue(getGrantRuleToCensResult -> getGrantRuleToCensResult.cens()[0].id()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetGrantRuleToCensResult> getGrantRuleToCensPlain(GetGrantRuleToCensPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("alicloud:expressconnect/getGrantRuleToCens:getGrantRuleToCens", TypeShape.of(GetGrantRuleToCensResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Using this data source can enable outbound traffic for an Express Connect circuit automatically. If the service has been opened, it will return opened.
     * 
     * For information about Express Connect and how to use it, see [What is Express Connect](https://www.alibabacloud.com/help/doc-detail/275179.htm).
     * 
     * &gt; **NOTE:** Available since v1.132.0
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.alicloud.expressconnect.ExpressconnectFunctions;
     * import com.pulumi.alicloud.expressconnect.inputs.GetPhysicalConnectionServiceArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var open = ExpressconnectFunctions.getPhysicalConnectionService(GetPhysicalConnectionServiceArgs.builder()
     *             .enable("On")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetPhysicalConnectionServiceResult> getPhysicalConnectionService() {
        return getPhysicalConnectionService(GetPhysicalConnectionServiceArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Using this data source can enable outbound traffic for an Express Connect circuit automatically. If the service has been opened, it will return opened.
     * 
     * For information about Express Connect and how to use it, see [What is Express Connect](https://www.alibabacloud.com/help/doc-detail/275179.htm).
     * 
     * &gt; **NOTE:** Available since v1.132.0
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.alicloud.expressconnect.ExpressconnectFunctions;
     * import com.pulumi.alicloud.expressconnect.inputs.GetPhysicalConnectionServiceArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var open = ExpressconnectFunctions.getPhysicalConnectionService(GetPhysicalConnectionServiceArgs.builder()
     *             .enable("On")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetPhysicalConnectionServiceResult> getPhysicalConnectionServicePlain() {
        return getPhysicalConnectionServicePlain(GetPhysicalConnectionServicePlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Using this data source can enable outbound traffic for an Express Connect circuit automatically. If the service has been opened, it will return opened.
     * 
     * For information about Express Connect and how to use it, see [What is Express Connect](https://www.alibabacloud.com/help/doc-detail/275179.htm).
     * 
     * &gt; **NOTE:** Available since v1.132.0
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.alicloud.expressconnect.ExpressconnectFunctions;
     * import com.pulumi.alicloud.expressconnect.inputs.GetPhysicalConnectionServiceArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var open = ExpressconnectFunctions.getPhysicalConnectionService(GetPhysicalConnectionServiceArgs.builder()
     *             .enable("On")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetPhysicalConnectionServiceResult> getPhysicalConnectionService(GetPhysicalConnectionServiceArgs args) {
        return getPhysicalConnectionService(args, InvokeOptions.Empty);
    }
    /**
     * Using this data source can enable outbound traffic for an Express Connect circuit automatically. If the service has been opened, it will return opened.
     * 
     * For information about Express Connect and how to use it, see [What is Express Connect](https://www.alibabacloud.com/help/doc-detail/275179.htm).
     * 
     * &gt; **NOTE:** Available since v1.132.0
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.alicloud.expressconnect.ExpressconnectFunctions;
     * import com.pulumi.alicloud.expressconnect.inputs.GetPhysicalConnectionServiceArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var open = ExpressconnectFunctions.getPhysicalConnectionService(GetPhysicalConnectionServiceArgs.builder()
     *             .enable("On")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetPhysicalConnectionServiceResult> getPhysicalConnectionServicePlain(GetPhysicalConnectionServicePlainArgs args) {
        return getPhysicalConnectionServicePlain(args, InvokeOptions.Empty);
    }
    /**
     * Using this data source can enable outbound traffic for an Express Connect circuit automatically. If the service has been opened, it will return opened.
     * 
     * For information about Express Connect and how to use it, see [What is Express Connect](https://www.alibabacloud.com/help/doc-detail/275179.htm).
     * 
     * &gt; **NOTE:** Available since v1.132.0
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.alicloud.expressconnect.ExpressconnectFunctions;
     * import com.pulumi.alicloud.expressconnect.inputs.GetPhysicalConnectionServiceArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var open = ExpressconnectFunctions.getPhysicalConnectionService(GetPhysicalConnectionServiceArgs.builder()
     *             .enable("On")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetPhysicalConnectionServiceResult> getPhysicalConnectionService(GetPhysicalConnectionServiceArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("alicloud:expressconnect/getPhysicalConnectionService:getPhysicalConnectionService", TypeShape.of(GetPhysicalConnectionServiceResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Using this data source can enable outbound traffic for an Express Connect circuit automatically. If the service has been opened, it will return opened.
     * 
     * For information about Express Connect and how to use it, see [What is Express Connect](https://www.alibabacloud.com/help/doc-detail/275179.htm).
     * 
     * &gt; **NOTE:** Available since v1.132.0
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.alicloud.expressconnect.ExpressconnectFunctions;
     * import com.pulumi.alicloud.expressconnect.inputs.GetPhysicalConnectionServiceArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var open = ExpressconnectFunctions.getPhysicalConnectionService(GetPhysicalConnectionServiceArgs.builder()
     *             .enable("On")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetPhysicalConnectionServiceResult> getPhysicalConnectionServicePlain(GetPhysicalConnectionServicePlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("alicloud:expressconnect/getPhysicalConnectionService:getPhysicalConnectionService", TypeShape.of(GetPhysicalConnectionServiceResult.class), args, Utilities.withVersion(options));
    }
    /**
     * This data source provides the Express Connect Physical Connections of the current Alibaba Cloud user.
     * 
     * &gt; **NOTE:** Available in v1.132.0+.
     * 
     * ## Example Usage
     * 
     * Basic Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.alicloud.expressconnect.ExpressconnectFunctions;
     * import com.pulumi.alicloud.expressconnect.inputs.GetPhysicalConnectionsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var ids = ExpressconnectFunctions.getPhysicalConnections(GetPhysicalConnectionsArgs.builder()
     *             .ids("pc-2345678")
     *             .build());
     * 
     *         ctx.export("expressConnectPhysicalConnectionId1", ids.applyValue(getPhysicalConnectionsResult -> getPhysicalConnectionsResult.connections()[0].id()));
     *         final var nameRegex = ExpressconnectFunctions.getPhysicalConnections(GetPhysicalConnectionsArgs.builder()
     *             .nameRegex("^my-PhysicalConnection")
     *             .build());
     * 
     *         ctx.export("expressConnectPhysicalConnectionId2", nameRegex.applyValue(getPhysicalConnectionsResult -> getPhysicalConnectionsResult.connections()[0].id()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetPhysicalConnectionsResult> getPhysicalConnections() {
        return getPhysicalConnections(GetPhysicalConnectionsArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * This data source provides the Express Connect Physical Connections of the current Alibaba Cloud user.
     * 
     * &gt; **NOTE:** Available in v1.132.0+.
     * 
     * ## Example Usage
     * 
     * Basic Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.alicloud.expressconnect.ExpressconnectFunctions;
     * import com.pulumi.alicloud.expressconnect.inputs.GetPhysicalConnectionsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var ids = ExpressconnectFunctions.getPhysicalConnections(GetPhysicalConnectionsArgs.builder()
     *             .ids("pc-2345678")
     *             .build());
     * 
     *         ctx.export("expressConnectPhysicalConnectionId1", ids.applyValue(getPhysicalConnectionsResult -> getPhysicalConnectionsResult.connections()[0].id()));
     *         final var nameRegex = ExpressconnectFunctions.getPhysicalConnections(GetPhysicalConnectionsArgs.builder()
     *             .nameRegex("^my-PhysicalConnection")
     *             .build());
     * 
     *         ctx.export("expressConnectPhysicalConnectionId2", nameRegex.applyValue(getPhysicalConnectionsResult -> getPhysicalConnectionsResult.connections()[0].id()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetPhysicalConnectionsResult> getPhysicalConnectionsPlain() {
        return getPhysicalConnectionsPlain(GetPhysicalConnectionsPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * This data source provides the Express Connect Physical Connections of the current Alibaba Cloud user.
     * 
     * &gt; **NOTE:** Available in v1.132.0+.
     * 
     * ## Example Usage
     * 
     * Basic Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.alicloud.expressconnect.ExpressconnectFunctions;
     * import com.pulumi.alicloud.expressconnect.inputs.GetPhysicalConnectionsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var ids = ExpressconnectFunctions.getPhysicalConnections(GetPhysicalConnectionsArgs.builder()
     *             .ids("pc-2345678")
     *             .build());
     * 
     *         ctx.export("expressConnectPhysicalConnectionId1", ids.applyValue(getPhysicalConnectionsResult -> getPhysicalConnectionsResult.connections()[0].id()));
     *         final var nameRegex = ExpressconnectFunctions.getPhysicalConnections(GetPhysicalConnectionsArgs.builder()
     *             .nameRegex("^my-PhysicalConnection")
     *             .build());
     * 
     *         ctx.export("expressConnectPhysicalConnectionId2", nameRegex.applyValue(getPhysicalConnectionsResult -> getPhysicalConnectionsResult.connections()[0].id()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetPhysicalConnectionsResult> getPhysicalConnections(GetPhysicalConnectionsArgs args) {
        return getPhysicalConnections(args, InvokeOptions.Empty);
    }
    /**
     * This data source provides the Express Connect Physical Connections of the current Alibaba Cloud user.
     * 
     * &gt; **NOTE:** Available in v1.132.0+.
     * 
     * ## Example Usage
     * 
     * Basic Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.alicloud.expressconnect.ExpressconnectFunctions;
     * import com.pulumi.alicloud.expressconnect.inputs.GetPhysicalConnectionsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var ids = ExpressconnectFunctions.getPhysicalConnections(GetPhysicalConnectionsArgs.builder()
     *             .ids("pc-2345678")
     *             .build());
     * 
     *         ctx.export("expressConnectPhysicalConnectionId1", ids.applyValue(getPhysicalConnectionsResult -> getPhysicalConnectionsResult.connections()[0].id()));
     *         final var nameRegex = ExpressconnectFunctions.getPhysicalConnections(GetPhysicalConnectionsArgs.builder()
     *             .nameRegex("^my-PhysicalConnection")
     *             .build());
     * 
     *         ctx.export("expressConnectPhysicalConnectionId2", nameRegex.applyValue(getPhysicalConnectionsResult -> getPhysicalConnectionsResult.connections()[0].id()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetPhysicalConnectionsResult> getPhysicalConnectionsPlain(GetPhysicalConnectionsPlainArgs args) {
        return getPhysicalConnectionsPlain(args, InvokeOptions.Empty);
    }
    /**
     * This data source provides the Express Connect Physical Connections of the current Alibaba Cloud user.
     * 
     * &gt; **NOTE:** Available in v1.132.0+.
     * 
     * ## Example Usage
     * 
     * Basic Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.alicloud.expressconnect.ExpressconnectFunctions;
     * import com.pulumi.alicloud.expressconnect.inputs.GetPhysicalConnectionsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var ids = ExpressconnectFunctions.getPhysicalConnections(GetPhysicalConnectionsArgs.builder()
     *             .ids("pc-2345678")
     *             .build());
     * 
     *         ctx.export("expressConnectPhysicalConnectionId1", ids.applyValue(getPhysicalConnectionsResult -> getPhysicalConnectionsResult.connections()[0].id()));
     *         final var nameRegex = ExpressconnectFunctions.getPhysicalConnections(GetPhysicalConnectionsArgs.builder()
     *             .nameRegex("^my-PhysicalConnection")
     *             .build());
     * 
     *         ctx.export("expressConnectPhysicalConnectionId2", nameRegex.applyValue(getPhysicalConnectionsResult -> getPhysicalConnectionsResult.connections()[0].id()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetPhysicalConnectionsResult> getPhysicalConnections(GetPhysicalConnectionsArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("alicloud:expressconnect/getPhysicalConnections:getPhysicalConnections", TypeShape.of(GetPhysicalConnectionsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * This data source provides the Express Connect Physical Connections of the current Alibaba Cloud user.
     * 
     * &gt; **NOTE:** Available in v1.132.0+.
     * 
     * ## Example Usage
     * 
     * Basic Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.alicloud.expressconnect.ExpressconnectFunctions;
     * import com.pulumi.alicloud.expressconnect.inputs.GetPhysicalConnectionsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var ids = ExpressconnectFunctions.getPhysicalConnections(GetPhysicalConnectionsArgs.builder()
     *             .ids("pc-2345678")
     *             .build());
     * 
     *         ctx.export("expressConnectPhysicalConnectionId1", ids.applyValue(getPhysicalConnectionsResult -> getPhysicalConnectionsResult.connections()[0].id()));
     *         final var nameRegex = ExpressconnectFunctions.getPhysicalConnections(GetPhysicalConnectionsArgs.builder()
     *             .nameRegex("^my-PhysicalConnection")
     *             .build());
     * 
     *         ctx.export("expressConnectPhysicalConnectionId2", nameRegex.applyValue(getPhysicalConnectionsResult -> getPhysicalConnectionsResult.connections()[0].id()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetPhysicalConnectionsResult> getPhysicalConnectionsPlain(GetPhysicalConnectionsPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("alicloud:expressconnect/getPhysicalConnections:getPhysicalConnections", TypeShape.of(GetPhysicalConnectionsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * This data source provides Router Interface available to the user.[What is Router Interface](https://www.alibabacloud.com/help/en/express-connect/developer-reference/api-vpc-2016-04-28-describerouterinterfaces-efficiency-channels)
     * 
     * &gt; **NOTE:** Available in 1.199.0+
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.alicloud.expressconnect.ExpressconnectFunctions;
     * import com.pulumi.alicloud.expressconnect.inputs.GetRouterInterfacesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var default = ExpressconnectFunctions.getRouterInterfaces(GetRouterInterfacesArgs.builder()
     *             .ids(defaultAlicloudRouterInterface.id())
     *             .nameRegex(defaultAlicloudRouterInterface.name())
     *             .build());
     * 
     *         ctx.export("alicloudRouterInterfaceExampleId", default_.interfaces()[0].id());
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetRouterInterfacesResult> getRouterInterfaces() {
        return getRouterInterfaces(GetRouterInterfacesArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * This data source provides Router Interface available to the user.[What is Router Interface](https://www.alibabacloud.com/help/en/express-connect/developer-reference/api-vpc-2016-04-28-describerouterinterfaces-efficiency-channels)
     * 
     * &gt; **NOTE:** Available in 1.199.0+
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.alicloud.expressconnect.ExpressconnectFunctions;
     * import com.pulumi.alicloud.expressconnect.inputs.GetRouterInterfacesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var default = ExpressconnectFunctions.getRouterInterfaces(GetRouterInterfacesArgs.builder()
     *             .ids(defaultAlicloudRouterInterface.id())
     *             .nameRegex(defaultAlicloudRouterInterface.name())
     *             .build());
     * 
     *         ctx.export("alicloudRouterInterfaceExampleId", default_.interfaces()[0].id());
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetRouterInterfacesResult> getRouterInterfacesPlain() {
        return getRouterInterfacesPlain(GetRouterInterfacesPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * This data source provides Router Interface available to the user.[What is Router Interface](https://www.alibabacloud.com/help/en/express-connect/developer-reference/api-vpc-2016-04-28-describerouterinterfaces-efficiency-channels)
     * 
     * &gt; **NOTE:** Available in 1.199.0+
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.alicloud.expressconnect.ExpressconnectFunctions;
     * import com.pulumi.alicloud.expressconnect.inputs.GetRouterInterfacesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var default = ExpressconnectFunctions.getRouterInterfaces(GetRouterInterfacesArgs.builder()
     *             .ids(defaultAlicloudRouterInterface.id())
     *             .nameRegex(defaultAlicloudRouterInterface.name())
     *             .build());
     * 
     *         ctx.export("alicloudRouterInterfaceExampleId", default_.interfaces()[0].id());
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetRouterInterfacesResult> getRouterInterfaces(GetRouterInterfacesArgs args) {
        return getRouterInterfaces(args, InvokeOptions.Empty);
    }
    /**
     * This data source provides Router Interface available to the user.[What is Router Interface](https://www.alibabacloud.com/help/en/express-connect/developer-reference/api-vpc-2016-04-28-describerouterinterfaces-efficiency-channels)
     * 
     * &gt; **NOTE:** Available in 1.199.0+
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.alicloud.expressconnect.ExpressconnectFunctions;
     * import com.pulumi.alicloud.expressconnect.inputs.GetRouterInterfacesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var default = ExpressconnectFunctions.getRouterInterfaces(GetRouterInterfacesArgs.builder()
     *             .ids(defaultAlicloudRouterInterface.id())
     *             .nameRegex(defaultAlicloudRouterInterface.name())
     *             .build());
     * 
     *         ctx.export("alicloudRouterInterfaceExampleId", default_.interfaces()[0].id());
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetRouterInterfacesResult> getRouterInterfacesPlain(GetRouterInterfacesPlainArgs args) {
        return getRouterInterfacesPlain(args, InvokeOptions.Empty);
    }
    /**
     * This data source provides Router Interface available to the user.[What is Router Interface](https://www.alibabacloud.com/help/en/express-connect/developer-reference/api-vpc-2016-04-28-describerouterinterfaces-efficiency-channels)
     * 
     * &gt; **NOTE:** Available in 1.199.0+
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.alicloud.expressconnect.ExpressconnectFunctions;
     * import com.pulumi.alicloud.expressconnect.inputs.GetRouterInterfacesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var default = ExpressconnectFunctions.getRouterInterfaces(GetRouterInterfacesArgs.builder()
     *             .ids(defaultAlicloudRouterInterface.id())
     *             .nameRegex(defaultAlicloudRouterInterface.name())
     *             .build());
     * 
     *         ctx.export("alicloudRouterInterfaceExampleId", default_.interfaces()[0].id());
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetRouterInterfacesResult> getRouterInterfaces(GetRouterInterfacesArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("alicloud:expressconnect/getRouterInterfaces:getRouterInterfaces", TypeShape.of(GetRouterInterfacesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * This data source provides Router Interface available to the user.[What is Router Interface](https://www.alibabacloud.com/help/en/express-connect/developer-reference/api-vpc-2016-04-28-describerouterinterfaces-efficiency-channels)
     * 
     * &gt; **NOTE:** Available in 1.199.0+
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.alicloud.expressconnect.ExpressconnectFunctions;
     * import com.pulumi.alicloud.expressconnect.inputs.GetRouterInterfacesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var default = ExpressconnectFunctions.getRouterInterfaces(GetRouterInterfacesArgs.builder()
     *             .ids(defaultAlicloudRouterInterface.id())
     *             .nameRegex(defaultAlicloudRouterInterface.name())
     *             .build());
     * 
     *         ctx.export("alicloudRouterInterfaceExampleId", default_.interfaces()[0].id());
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetRouterInterfacesResult> getRouterInterfacesPlain(GetRouterInterfacesPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("alicloud:expressconnect/getRouterInterfaces:getRouterInterfaces", TypeShape.of(GetRouterInterfacesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * This data source provides Express Connect Vbr Pconn Association available to the user.
     * 
     * &gt; **NOTE:** Available in 1.196.0+
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.alicloud.expressconnect.ExpressconnectFunctions;
     * import com.pulumi.alicloud.expressconnect.inputs.GetVbrPconnAssociationsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var default = ExpressconnectFunctions.getVbrPconnAssociations(GetVbrPconnAssociationsArgs.builder()
     *             .ids("example_id")
     *             .vbrId(defaultAlicloudExpressConnectVbrPconnAssociation.vbrId())
     *             .build());
     * 
     *         ctx.export("alicloudExpressConnectVbrPconnAssociationExampleId", default_.associations()[0].id());
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetVbrPconnAssociationsResult> getVbrPconnAssociations() {
        return getVbrPconnAssociations(GetVbrPconnAssociationsArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * This data source provides Express Connect Vbr Pconn Association available to the user.
     * 
     * &gt; **NOTE:** Available in 1.196.0+
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.alicloud.expressconnect.ExpressconnectFunctions;
     * import com.pulumi.alicloud.expressconnect.inputs.GetVbrPconnAssociationsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var default = ExpressconnectFunctions.getVbrPconnAssociations(GetVbrPconnAssociationsArgs.builder()
     *             .ids("example_id")
     *             .vbrId(defaultAlicloudExpressConnectVbrPconnAssociation.vbrId())
     *             .build());
     * 
     *         ctx.export("alicloudExpressConnectVbrPconnAssociationExampleId", default_.associations()[0].id());
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetVbrPconnAssociationsResult> getVbrPconnAssociationsPlain() {
        return getVbrPconnAssociationsPlain(GetVbrPconnAssociationsPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * This data source provides Express Connect Vbr Pconn Association available to the user.
     * 
     * &gt; **NOTE:** Available in 1.196.0+
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.alicloud.expressconnect.ExpressconnectFunctions;
     * import com.pulumi.alicloud.expressconnect.inputs.GetVbrPconnAssociationsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var default = ExpressconnectFunctions.getVbrPconnAssociations(GetVbrPconnAssociationsArgs.builder()
     *             .ids("example_id")
     *             .vbrId(defaultAlicloudExpressConnectVbrPconnAssociation.vbrId())
     *             .build());
     * 
     *         ctx.export("alicloudExpressConnectVbrPconnAssociationExampleId", default_.associations()[0].id());
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetVbrPconnAssociationsResult> getVbrPconnAssociations(GetVbrPconnAssociationsArgs args) {
        return getVbrPconnAssociations(args, InvokeOptions.Empty);
    }
    /**
     * This data source provides Express Connect Vbr Pconn Association available to the user.
     * 
     * &gt; **NOTE:** Available in 1.196.0+
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.alicloud.expressconnect.ExpressconnectFunctions;
     * import com.pulumi.alicloud.expressconnect.inputs.GetVbrPconnAssociationsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var default = ExpressconnectFunctions.getVbrPconnAssociations(GetVbrPconnAssociationsArgs.builder()
     *             .ids("example_id")
     *             .vbrId(defaultAlicloudExpressConnectVbrPconnAssociation.vbrId())
     *             .build());
     * 
     *         ctx.export("alicloudExpressConnectVbrPconnAssociationExampleId", default_.associations()[0].id());
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetVbrPconnAssociationsResult> getVbrPconnAssociationsPlain(GetVbrPconnAssociationsPlainArgs args) {
        return getVbrPconnAssociationsPlain(args, InvokeOptions.Empty);
    }
    /**
     * This data source provides Express Connect Vbr Pconn Association available to the user.
     * 
     * &gt; **NOTE:** Available in 1.196.0+
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.alicloud.expressconnect.ExpressconnectFunctions;
     * import com.pulumi.alicloud.expressconnect.inputs.GetVbrPconnAssociationsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var default = ExpressconnectFunctions.getVbrPconnAssociations(GetVbrPconnAssociationsArgs.builder()
     *             .ids("example_id")
     *             .vbrId(defaultAlicloudExpressConnectVbrPconnAssociation.vbrId())
     *             .build());
     * 
     *         ctx.export("alicloudExpressConnectVbrPconnAssociationExampleId", default_.associations()[0].id());
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetVbrPconnAssociationsResult> getVbrPconnAssociations(GetVbrPconnAssociationsArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("alicloud:expressconnect/getVbrPconnAssociations:getVbrPconnAssociations", TypeShape.of(GetVbrPconnAssociationsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * This data source provides Express Connect Vbr Pconn Association available to the user.
     * 
     * &gt; **NOTE:** Available in 1.196.0+
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.alicloud.expressconnect.ExpressconnectFunctions;
     * import com.pulumi.alicloud.expressconnect.inputs.GetVbrPconnAssociationsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var default = ExpressconnectFunctions.getVbrPconnAssociations(GetVbrPconnAssociationsArgs.builder()
     *             .ids("example_id")
     *             .vbrId(defaultAlicloudExpressConnectVbrPconnAssociation.vbrId())
     *             .build());
     * 
     *         ctx.export("alicloudExpressConnectVbrPconnAssociationExampleId", default_.associations()[0].id());
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetVbrPconnAssociationsResult> getVbrPconnAssociationsPlain(GetVbrPconnAssociationsPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("alicloud:expressconnect/getVbrPconnAssociations:getVbrPconnAssociations", TypeShape.of(GetVbrPconnAssociationsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * This data source provides the Express Connect Virtual Border Routers of the current Alibaba Cloud user.
     * 
     * &gt; **NOTE:** Available in v1.134.0+.
     * 
     * ## Example Usage
     * 
     * Basic Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.alicloud.expressconnect.ExpressconnectFunctions;
     * import com.pulumi.alicloud.expressconnect.inputs.GetVirtualBorderRoutersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var ids = ExpressconnectFunctions.getVirtualBorderRouters();
     * 
     *         ctx.export("expressConnectVirtualBorderRouterId1", ids.applyValue(getVirtualBorderRoutersResult -> getVirtualBorderRoutersResult.routers()[0].id()));
     *         final var nameRegex = ExpressconnectFunctions.getVirtualBorderRouters(GetVirtualBorderRoutersArgs.builder()
     *             .nameRegex("^my-VirtualBorderRouter")
     *             .build());
     * 
     *         ctx.export("expressConnectVirtualBorderRouterId2", nameRegex.applyValue(getVirtualBorderRoutersResult -> getVirtualBorderRoutersResult.routers()[0].id()));
     *         final var filter = ExpressconnectFunctions.getVirtualBorderRouters(GetVirtualBorderRoutersArgs.builder()
     *             .filters(            
     *                 GetVirtualBorderRoutersFilterArgs.builder()
     *                     .key("PhysicalConnectionId")
     *                     .values("pc-xxxx1")
     *                     .build(),
     *                 GetVirtualBorderRoutersFilterArgs.builder()
     *                     .key("VbrId")
     *                     .values(                    
     *                         "vbr-xxxx1",
     *                         "vbr-xxxx2")
     *                     .build())
     *             .build());
     * 
     *         ctx.export("expressConnectVirtualBorderRouterId3", filter.applyValue(getVirtualBorderRoutersResult -> getVirtualBorderRoutersResult.routers()[0].id()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetVirtualBorderRoutersResult> getVirtualBorderRouters() {
        return getVirtualBorderRouters(GetVirtualBorderRoutersArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * This data source provides the Express Connect Virtual Border Routers of the current Alibaba Cloud user.
     * 
     * &gt; **NOTE:** Available in v1.134.0+.
     * 
     * ## Example Usage
     * 
     * Basic Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.alicloud.expressconnect.ExpressconnectFunctions;
     * import com.pulumi.alicloud.expressconnect.inputs.GetVirtualBorderRoutersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var ids = ExpressconnectFunctions.getVirtualBorderRouters();
     * 
     *         ctx.export("expressConnectVirtualBorderRouterId1", ids.applyValue(getVirtualBorderRoutersResult -> getVirtualBorderRoutersResult.routers()[0].id()));
     *         final var nameRegex = ExpressconnectFunctions.getVirtualBorderRouters(GetVirtualBorderRoutersArgs.builder()
     *             .nameRegex("^my-VirtualBorderRouter")
     *             .build());
     * 
     *         ctx.export("expressConnectVirtualBorderRouterId2", nameRegex.applyValue(getVirtualBorderRoutersResult -> getVirtualBorderRoutersResult.routers()[0].id()));
     *         final var filter = ExpressconnectFunctions.getVirtualBorderRouters(GetVirtualBorderRoutersArgs.builder()
     *             .filters(            
     *                 GetVirtualBorderRoutersFilterArgs.builder()
     *                     .key("PhysicalConnectionId")
     *                     .values("pc-xxxx1")
     *                     .build(),
     *                 GetVirtualBorderRoutersFilterArgs.builder()
     *                     .key("VbrId")
     *                     .values(                    
     *                         "vbr-xxxx1",
     *                         "vbr-xxxx2")
     *                     .build())
     *             .build());
     * 
     *         ctx.export("expressConnectVirtualBorderRouterId3", filter.applyValue(getVirtualBorderRoutersResult -> getVirtualBorderRoutersResult.routers()[0].id()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetVirtualBorderRoutersResult> getVirtualBorderRoutersPlain() {
        return getVirtualBorderRoutersPlain(GetVirtualBorderRoutersPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * This data source provides the Express Connect Virtual Border Routers of the current Alibaba Cloud user.
     * 
     * &gt; **NOTE:** Available in v1.134.0+.
     * 
     * ## Example Usage
     * 
     * Basic Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.alicloud.expressconnect.ExpressconnectFunctions;
     * import com.pulumi.alicloud.expressconnect.inputs.GetVirtualBorderRoutersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var ids = ExpressconnectFunctions.getVirtualBorderRouters();
     * 
     *         ctx.export("expressConnectVirtualBorderRouterId1", ids.applyValue(getVirtualBorderRoutersResult -> getVirtualBorderRoutersResult.routers()[0].id()));
     *         final var nameRegex = ExpressconnectFunctions.getVirtualBorderRouters(GetVirtualBorderRoutersArgs.builder()
     *             .nameRegex("^my-VirtualBorderRouter")
     *             .build());
     * 
     *         ctx.export("expressConnectVirtualBorderRouterId2", nameRegex.applyValue(getVirtualBorderRoutersResult -> getVirtualBorderRoutersResult.routers()[0].id()));
     *         final var filter = ExpressconnectFunctions.getVirtualBorderRouters(GetVirtualBorderRoutersArgs.builder()
     *             .filters(            
     *                 GetVirtualBorderRoutersFilterArgs.builder()
     *                     .key("PhysicalConnectionId")
     *                     .values("pc-xxxx1")
     *                     .build(),
     *                 GetVirtualBorderRoutersFilterArgs.builder()
     *                     .key("VbrId")
     *                     .values(                    
     *                         "vbr-xxxx1",
     *                         "vbr-xxxx2")
     *                     .build())
     *             .build());
     * 
     *         ctx.export("expressConnectVirtualBorderRouterId3", filter.applyValue(getVirtualBorderRoutersResult -> getVirtualBorderRoutersResult.routers()[0].id()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetVirtualBorderRoutersResult> getVirtualBorderRouters(GetVirtualBorderRoutersArgs args) {
        return getVirtualBorderRouters(args, InvokeOptions.Empty);
    }
    /**
     * This data source provides the Express Connect Virtual Border Routers of the current Alibaba Cloud user.
     * 
     * &gt; **NOTE:** Available in v1.134.0+.
     * 
     * ## Example Usage
     * 
     * Basic Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.alicloud.expressconnect.ExpressconnectFunctions;
     * import com.pulumi.alicloud.expressconnect.inputs.GetVirtualBorderRoutersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var ids = ExpressconnectFunctions.getVirtualBorderRouters();
     * 
     *         ctx.export("expressConnectVirtualBorderRouterId1", ids.applyValue(getVirtualBorderRoutersResult -> getVirtualBorderRoutersResult.routers()[0].id()));
     *         final var nameRegex = ExpressconnectFunctions.getVirtualBorderRouters(GetVirtualBorderRoutersArgs.builder()
     *             .nameRegex("^my-VirtualBorderRouter")
     *             .build());
     * 
     *         ctx.export("expressConnectVirtualBorderRouterId2", nameRegex.applyValue(getVirtualBorderRoutersResult -> getVirtualBorderRoutersResult.routers()[0].id()));
     *         final var filter = ExpressconnectFunctions.getVirtualBorderRouters(GetVirtualBorderRoutersArgs.builder()
     *             .filters(            
     *                 GetVirtualBorderRoutersFilterArgs.builder()
     *                     .key("PhysicalConnectionId")
     *                     .values("pc-xxxx1")
     *                     .build(),
     *                 GetVirtualBorderRoutersFilterArgs.builder()
     *                     .key("VbrId")
     *                     .values(                    
     *                         "vbr-xxxx1",
     *                         "vbr-xxxx2")
     *                     .build())
     *             .build());
     * 
     *         ctx.export("expressConnectVirtualBorderRouterId3", filter.applyValue(getVirtualBorderRoutersResult -> getVirtualBorderRoutersResult.routers()[0].id()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetVirtualBorderRoutersResult> getVirtualBorderRoutersPlain(GetVirtualBorderRoutersPlainArgs args) {
        return getVirtualBorderRoutersPlain(args, InvokeOptions.Empty);
    }
    /**
     * This data source provides the Express Connect Virtual Border Routers of the current Alibaba Cloud user.
     * 
     * &gt; **NOTE:** Available in v1.134.0+.
     * 
     * ## Example Usage
     * 
     * Basic Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.alicloud.expressconnect.ExpressconnectFunctions;
     * import com.pulumi.alicloud.expressconnect.inputs.GetVirtualBorderRoutersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var ids = ExpressconnectFunctions.getVirtualBorderRouters();
     * 
     *         ctx.export("expressConnectVirtualBorderRouterId1", ids.applyValue(getVirtualBorderRoutersResult -> getVirtualBorderRoutersResult.routers()[0].id()));
     *         final var nameRegex = ExpressconnectFunctions.getVirtualBorderRouters(GetVirtualBorderRoutersArgs.builder()
     *             .nameRegex("^my-VirtualBorderRouter")
     *             .build());
     * 
     *         ctx.export("expressConnectVirtualBorderRouterId2", nameRegex.applyValue(getVirtualBorderRoutersResult -> getVirtualBorderRoutersResult.routers()[0].id()));
     *         final var filter = ExpressconnectFunctions.getVirtualBorderRouters(GetVirtualBorderRoutersArgs.builder()
     *             .filters(            
     *                 GetVirtualBorderRoutersFilterArgs.builder()
     *                     .key("PhysicalConnectionId")
     *                     .values("pc-xxxx1")
     *                     .build(),
     *                 GetVirtualBorderRoutersFilterArgs.builder()
     *                     .key("VbrId")
     *                     .values(                    
     *                         "vbr-xxxx1",
     *                         "vbr-xxxx2")
     *                     .build())
     *             .build());
     * 
     *         ctx.export("expressConnectVirtualBorderRouterId3", filter.applyValue(getVirtualBorderRoutersResult -> getVirtualBorderRoutersResult.routers()[0].id()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetVirtualBorderRoutersResult> getVirtualBorderRouters(GetVirtualBorderRoutersArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("alicloud:expressconnect/getVirtualBorderRouters:getVirtualBorderRouters", TypeShape.of(GetVirtualBorderRoutersResult.class), args, Utilities.withVersion(options));
    }
    /**
     * This data source provides the Express Connect Virtual Border Routers of the current Alibaba Cloud user.
     * 
     * &gt; **NOTE:** Available in v1.134.0+.
     * 
     * ## Example Usage
     * 
     * Basic Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.alicloud.expressconnect.ExpressconnectFunctions;
     * import com.pulumi.alicloud.expressconnect.inputs.GetVirtualBorderRoutersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var ids = ExpressconnectFunctions.getVirtualBorderRouters();
     * 
     *         ctx.export("expressConnectVirtualBorderRouterId1", ids.applyValue(getVirtualBorderRoutersResult -> getVirtualBorderRoutersResult.routers()[0].id()));
     *         final var nameRegex = ExpressconnectFunctions.getVirtualBorderRouters(GetVirtualBorderRoutersArgs.builder()
     *             .nameRegex("^my-VirtualBorderRouter")
     *             .build());
     * 
     *         ctx.export("expressConnectVirtualBorderRouterId2", nameRegex.applyValue(getVirtualBorderRoutersResult -> getVirtualBorderRoutersResult.routers()[0].id()));
     *         final var filter = ExpressconnectFunctions.getVirtualBorderRouters(GetVirtualBorderRoutersArgs.builder()
     *             .filters(            
     *                 GetVirtualBorderRoutersFilterArgs.builder()
     *                     .key("PhysicalConnectionId")
     *                     .values("pc-xxxx1")
     *                     .build(),
     *                 GetVirtualBorderRoutersFilterArgs.builder()
     *                     .key("VbrId")
     *                     .values(                    
     *                         "vbr-xxxx1",
     *                         "vbr-xxxx2")
     *                     .build())
     *             .build());
     * 
     *         ctx.export("expressConnectVirtualBorderRouterId3", filter.applyValue(getVirtualBorderRoutersResult -> getVirtualBorderRoutersResult.routers()[0].id()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetVirtualBorderRoutersResult> getVirtualBorderRoutersPlain(GetVirtualBorderRoutersPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("alicloud:expressconnect/getVirtualBorderRouters:getVirtualBorderRouters", TypeShape.of(GetVirtualBorderRoutersResult.class), args, Utilities.withVersion(options));
    }
    /**
     * This data source provides Express Connect Virtual Physical Connection available to the user.
     * 
     * &gt; **NOTE:** Available in 1.196.0+
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.alicloud.expressconnect.ExpressconnectFunctions;
     * import com.pulumi.alicloud.expressconnect.inputs.GetVirtualPhysicalConnectionsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var default = ExpressconnectFunctions.getVirtualPhysicalConnections(GetVirtualPhysicalConnectionsArgs.builder()
     *             .ids(defaultAlicloudExpressConnectVirtualPhysicalConnection.id())
     *             .nameRegex(defaultAlicloudExpressConnectVirtualPhysicalConnection.name())
     *             .parentPhysicalConnectionId(defaultAlicloudExpressConnectVirtualPhysicalConnection.parentPhysicalConnectionId())
     *             .vlanId(789)
     *             .vpconnAliUid(1234567890)
     *             .build());
     * 
     *         ctx.export("alicloudExpressConnectVirtualPhysicalConnectionExampleId", default_.connections()[0].id());
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetVirtualPhysicalConnectionsResult> getVirtualPhysicalConnections() {
        return getVirtualPhysicalConnections(GetVirtualPhysicalConnectionsArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * This data source provides Express Connect Virtual Physical Connection available to the user.
     * 
     * &gt; **NOTE:** Available in 1.196.0+
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.alicloud.expressconnect.ExpressconnectFunctions;
     * import com.pulumi.alicloud.expressconnect.inputs.GetVirtualPhysicalConnectionsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var default = ExpressconnectFunctions.getVirtualPhysicalConnections(GetVirtualPhysicalConnectionsArgs.builder()
     *             .ids(defaultAlicloudExpressConnectVirtualPhysicalConnection.id())
     *             .nameRegex(defaultAlicloudExpressConnectVirtualPhysicalConnection.name())
     *             .parentPhysicalConnectionId(defaultAlicloudExpressConnectVirtualPhysicalConnection.parentPhysicalConnectionId())
     *             .vlanId(789)
     *             .vpconnAliUid(1234567890)
     *             .build());
     * 
     *         ctx.export("alicloudExpressConnectVirtualPhysicalConnectionExampleId", default_.connections()[0].id());
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetVirtualPhysicalConnectionsResult> getVirtualPhysicalConnectionsPlain() {
        return getVirtualPhysicalConnectionsPlain(GetVirtualPhysicalConnectionsPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * This data source provides Express Connect Virtual Physical Connection available to the user.
     * 
     * &gt; **NOTE:** Available in 1.196.0+
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.alicloud.expressconnect.ExpressconnectFunctions;
     * import com.pulumi.alicloud.expressconnect.inputs.GetVirtualPhysicalConnectionsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var default = ExpressconnectFunctions.getVirtualPhysicalConnections(GetVirtualPhysicalConnectionsArgs.builder()
     *             .ids(defaultAlicloudExpressConnectVirtualPhysicalConnection.id())
     *             .nameRegex(defaultAlicloudExpressConnectVirtualPhysicalConnection.name())
     *             .parentPhysicalConnectionId(defaultAlicloudExpressConnectVirtualPhysicalConnection.parentPhysicalConnectionId())
     *             .vlanId(789)
     *             .vpconnAliUid(1234567890)
     *             .build());
     * 
     *         ctx.export("alicloudExpressConnectVirtualPhysicalConnectionExampleId", default_.connections()[0].id());
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetVirtualPhysicalConnectionsResult> getVirtualPhysicalConnections(GetVirtualPhysicalConnectionsArgs args) {
        return getVirtualPhysicalConnections(args, InvokeOptions.Empty);
    }
    /**
     * This data source provides Express Connect Virtual Physical Connection available to the user.
     * 
     * &gt; **NOTE:** Available in 1.196.0+
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.alicloud.expressconnect.ExpressconnectFunctions;
     * import com.pulumi.alicloud.expressconnect.inputs.GetVirtualPhysicalConnectionsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var default = ExpressconnectFunctions.getVirtualPhysicalConnections(GetVirtualPhysicalConnectionsArgs.builder()
     *             .ids(defaultAlicloudExpressConnectVirtualPhysicalConnection.id())
     *             .nameRegex(defaultAlicloudExpressConnectVirtualPhysicalConnection.name())
     *             .parentPhysicalConnectionId(defaultAlicloudExpressConnectVirtualPhysicalConnection.parentPhysicalConnectionId())
     *             .vlanId(789)
     *             .vpconnAliUid(1234567890)
     *             .build());
     * 
     *         ctx.export("alicloudExpressConnectVirtualPhysicalConnectionExampleId", default_.connections()[0].id());
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetVirtualPhysicalConnectionsResult> getVirtualPhysicalConnectionsPlain(GetVirtualPhysicalConnectionsPlainArgs args) {
        return getVirtualPhysicalConnectionsPlain(args, InvokeOptions.Empty);
    }
    /**
     * This data source provides Express Connect Virtual Physical Connection available to the user.
     * 
     * &gt; **NOTE:** Available in 1.196.0+
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.alicloud.expressconnect.ExpressconnectFunctions;
     * import com.pulumi.alicloud.expressconnect.inputs.GetVirtualPhysicalConnectionsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var default = ExpressconnectFunctions.getVirtualPhysicalConnections(GetVirtualPhysicalConnectionsArgs.builder()
     *             .ids(defaultAlicloudExpressConnectVirtualPhysicalConnection.id())
     *             .nameRegex(defaultAlicloudExpressConnectVirtualPhysicalConnection.name())
     *             .parentPhysicalConnectionId(defaultAlicloudExpressConnectVirtualPhysicalConnection.parentPhysicalConnectionId())
     *             .vlanId(789)
     *             .vpconnAliUid(1234567890)
     *             .build());
     * 
     *         ctx.export("alicloudExpressConnectVirtualPhysicalConnectionExampleId", default_.connections()[0].id());
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetVirtualPhysicalConnectionsResult> getVirtualPhysicalConnections(GetVirtualPhysicalConnectionsArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("alicloud:expressconnect/getVirtualPhysicalConnections:getVirtualPhysicalConnections", TypeShape.of(GetVirtualPhysicalConnectionsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * This data source provides Express Connect Virtual Physical Connection available to the user.
     * 
     * &gt; **NOTE:** Available in 1.196.0+
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.alicloud.expressconnect.ExpressconnectFunctions;
     * import com.pulumi.alicloud.expressconnect.inputs.GetVirtualPhysicalConnectionsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var default = ExpressconnectFunctions.getVirtualPhysicalConnections(GetVirtualPhysicalConnectionsArgs.builder()
     *             .ids(defaultAlicloudExpressConnectVirtualPhysicalConnection.id())
     *             .nameRegex(defaultAlicloudExpressConnectVirtualPhysicalConnection.name())
     *             .parentPhysicalConnectionId(defaultAlicloudExpressConnectVirtualPhysicalConnection.parentPhysicalConnectionId())
     *             .vlanId(789)
     *             .vpconnAliUid(1234567890)
     *             .build());
     * 
     *         ctx.export("alicloudExpressConnectVirtualPhysicalConnectionExampleId", default_.connections()[0].id());
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetVirtualPhysicalConnectionsResult> getVirtualPhysicalConnectionsPlain(GetVirtualPhysicalConnectionsPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("alicloud:expressconnect/getVirtualPhysicalConnections:getVirtualPhysicalConnections", TypeShape.of(GetVirtualPhysicalConnectionsResult.class), args, Utilities.withVersion(options));
    }
}
