// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.pvtz.inputs;

import com.pulumi.alicloud.pvtz.inputs.RuleForwardIpArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RuleState extends com.pulumi.resources.ResourceArgs {

    public static final RuleState Empty = new RuleState();

    /**
     * The ID of the Endpoint.
     * 
     */
    @Import(name="endpointId")
    private @Nullable Output<String> endpointId;

    /**
     * @return The ID of the Endpoint.
     * 
     */
    public Optional<Output<String>> endpointId() {
        return Optional.ofNullable(this.endpointId);
    }

    /**
     * Forwarding target. See `forward_ips` below.
     * 
     */
    @Import(name="forwardIps")
    private @Nullable Output<List<RuleForwardIpArgs>> forwardIps;

    /**
     * @return Forwarding target. See `forward_ips` below.
     * 
     */
    public Optional<Output<List<RuleForwardIpArgs>>> forwardIps() {
        return Optional.ofNullable(this.forwardIps);
    }

    /**
     * The name of the resource.
     * 
     */
    @Import(name="ruleName")
    private @Nullable Output<String> ruleName;

    /**
     * @return The name of the resource.
     * 
     */
    public Optional<Output<String>> ruleName() {
        return Optional.ofNullable(this.ruleName);
    }

    /**
     * The type of the rule. Valid values: `OUTBOUND`.
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return The type of the rule. Valid values: `OUTBOUND`.
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    /**
     * The name of the forwarding zone.
     * 
     */
    @Import(name="zoneName")
    private @Nullable Output<String> zoneName;

    /**
     * @return The name of the forwarding zone.
     * 
     */
    public Optional<Output<String>> zoneName() {
        return Optional.ofNullable(this.zoneName);
    }

    private RuleState() {}

    private RuleState(RuleState $) {
        this.endpointId = $.endpointId;
        this.forwardIps = $.forwardIps;
        this.ruleName = $.ruleName;
        this.type = $.type;
        this.zoneName = $.zoneName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RuleState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RuleState $;

        public Builder() {
            $ = new RuleState();
        }

        public Builder(RuleState defaults) {
            $ = new RuleState(Objects.requireNonNull(defaults));
        }

        /**
         * @param endpointId The ID of the Endpoint.
         * 
         * @return builder
         * 
         */
        public Builder endpointId(@Nullable Output<String> endpointId) {
            $.endpointId = endpointId;
            return this;
        }

        /**
         * @param endpointId The ID of the Endpoint.
         * 
         * @return builder
         * 
         */
        public Builder endpointId(String endpointId) {
            return endpointId(Output.of(endpointId));
        }

        /**
         * @param forwardIps Forwarding target. See `forward_ips` below.
         * 
         * @return builder
         * 
         */
        public Builder forwardIps(@Nullable Output<List<RuleForwardIpArgs>> forwardIps) {
            $.forwardIps = forwardIps;
            return this;
        }

        /**
         * @param forwardIps Forwarding target. See `forward_ips` below.
         * 
         * @return builder
         * 
         */
        public Builder forwardIps(List<RuleForwardIpArgs> forwardIps) {
            return forwardIps(Output.of(forwardIps));
        }

        /**
         * @param forwardIps Forwarding target. See `forward_ips` below.
         * 
         * @return builder
         * 
         */
        public Builder forwardIps(RuleForwardIpArgs... forwardIps) {
            return forwardIps(List.of(forwardIps));
        }

        /**
         * @param ruleName The name of the resource.
         * 
         * @return builder
         * 
         */
        public Builder ruleName(@Nullable Output<String> ruleName) {
            $.ruleName = ruleName;
            return this;
        }

        /**
         * @param ruleName The name of the resource.
         * 
         * @return builder
         * 
         */
        public Builder ruleName(String ruleName) {
            return ruleName(Output.of(ruleName));
        }

        /**
         * @param type The type of the rule. Valid values: `OUTBOUND`.
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type The type of the rule. Valid values: `OUTBOUND`.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param zoneName The name of the forwarding zone.
         * 
         * @return builder
         * 
         */
        public Builder zoneName(@Nullable Output<String> zoneName) {
            $.zoneName = zoneName;
            return this;
        }

        /**
         * @param zoneName The name of the forwarding zone.
         * 
         * @return builder
         * 
         */
        public Builder zoneName(String zoneName) {
            return zoneName(Output.of(zoneName));
        }

        public RuleState build() {
            return $;
        }
    }

}
