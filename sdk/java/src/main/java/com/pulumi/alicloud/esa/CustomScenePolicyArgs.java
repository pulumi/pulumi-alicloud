// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.esa;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CustomScenePolicyArgs extends com.pulumi.resources.ResourceArgs {

    public static final CustomScenePolicyArgs Empty = new CustomScenePolicyArgs();

    /**
     * The time when the policy takes effect.
     * The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.
     * 
     */
    @Import(name="createTime", required=true)
    private Output<String> createTime;

    /**
     * @return The time when the policy takes effect.
     * The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.
     * 
     */
    public Output<String> createTime() {
        return this.createTime;
    }

    /**
     * The policy name.
     * 
     */
    @Import(name="customScenePolicyName", required=true)
    private Output<String> customScenePolicyName;

    /**
     * @return The policy name.
     * 
     */
    public Output<String> customScenePolicyName() {
        return this.customScenePolicyName;
    }

    /**
     * The time when the policy expires.
     * The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.
     * 
     */
    @Import(name="endTime", required=true)
    private Output<String> endTime;

    /**
     * @return The time when the policy expires.
     * The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.
     * 
     */
    public Output<String> endTime() {
        return this.endTime;
    }

    /**
     * The IDs of websites associated.
     * 
     */
    @Import(name="siteIds", required=true)
    private Output<String> siteIds;

    /**
     * @return The IDs of websites associated.
     * 
     */
    public Output<String> siteIds() {
        return this.siteIds;
    }

    /**
     * Policy effective status. Valid values: `Disabled`, `Running`.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return Policy effective status. Valid values: `Disabled`, `Running`.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * The name of the policy template. Valid value:
     * 
     */
    @Import(name="template", required=true)
    private Output<String> template;

    /**
     * @return The name of the policy template. Valid value:
     * 
     */
    public Output<String> template() {
        return this.template;
    }

    private CustomScenePolicyArgs() {}

    private CustomScenePolicyArgs(CustomScenePolicyArgs $) {
        this.createTime = $.createTime;
        this.customScenePolicyName = $.customScenePolicyName;
        this.endTime = $.endTime;
        this.siteIds = $.siteIds;
        this.status = $.status;
        this.template = $.template;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CustomScenePolicyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CustomScenePolicyArgs $;

        public Builder() {
            $ = new CustomScenePolicyArgs();
        }

        public Builder(CustomScenePolicyArgs defaults) {
            $ = new CustomScenePolicyArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param createTime The time when the policy takes effect.
         * The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.
         * 
         * @return builder
         * 
         */
        public Builder createTime(Output<String> createTime) {
            $.createTime = createTime;
            return this;
        }

        /**
         * @param createTime The time when the policy takes effect.
         * The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.
         * 
         * @return builder
         * 
         */
        public Builder createTime(String createTime) {
            return createTime(Output.of(createTime));
        }

        /**
         * @param customScenePolicyName The policy name.
         * 
         * @return builder
         * 
         */
        public Builder customScenePolicyName(Output<String> customScenePolicyName) {
            $.customScenePolicyName = customScenePolicyName;
            return this;
        }

        /**
         * @param customScenePolicyName The policy name.
         * 
         * @return builder
         * 
         */
        public Builder customScenePolicyName(String customScenePolicyName) {
            return customScenePolicyName(Output.of(customScenePolicyName));
        }

        /**
         * @param endTime The time when the policy expires.
         * The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.
         * 
         * @return builder
         * 
         */
        public Builder endTime(Output<String> endTime) {
            $.endTime = endTime;
            return this;
        }

        /**
         * @param endTime The time when the policy expires.
         * The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.
         * 
         * @return builder
         * 
         */
        public Builder endTime(String endTime) {
            return endTime(Output.of(endTime));
        }

        /**
         * @param siteIds The IDs of websites associated.
         * 
         * @return builder
         * 
         */
        public Builder siteIds(Output<String> siteIds) {
            $.siteIds = siteIds;
            return this;
        }

        /**
         * @param siteIds The IDs of websites associated.
         * 
         * @return builder
         * 
         */
        public Builder siteIds(String siteIds) {
            return siteIds(Output.of(siteIds));
        }

        /**
         * @param status Policy effective status. Valid values: `Disabled`, `Running`.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status Policy effective status. Valid values: `Disabled`, `Running`.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param template The name of the policy template. Valid value:
         * 
         * @return builder
         * 
         */
        public Builder template(Output<String> template) {
            $.template = template;
            return this;
        }

        /**
         * @param template The name of the policy template. Valid value:
         * 
         * @return builder
         * 
         */
        public Builder template(String template) {
            return template(Output.of(template));
        }

        public CustomScenePolicyArgs build() {
            if ($.createTime == null) {
                throw new MissingRequiredPropertyException("CustomScenePolicyArgs", "createTime");
            }
            if ($.customScenePolicyName == null) {
                throw new MissingRequiredPropertyException("CustomScenePolicyArgs", "customScenePolicyName");
            }
            if ($.endTime == null) {
                throw new MissingRequiredPropertyException("CustomScenePolicyArgs", "endTime");
            }
            if ($.siteIds == null) {
                throw new MissingRequiredPropertyException("CustomScenePolicyArgs", "siteIds");
            }
            if ($.template == null) {
                throw new MissingRequiredPropertyException("CustomScenePolicyArgs", "template");
            }
            return $;
        }
    }

}
