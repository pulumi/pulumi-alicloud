// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.rds.outputs;

import com.pulumi.alicloud.rds.outputs.GetInstancesInstanceHostInstanceInfo;
import com.pulumi.alicloud.rds.outputs.GetInstancesInstanceParameter;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetInstancesInstance {
    /**
     * @return (Available in 1.124.1+) The method that is used to verify the identities of clients. This parameter is supported only when the instance runs PostgreSQL with standard or enhanced SSDs. Valid values:
     * - cert
     * - perfer
     * - verify-ca
     * - verify-full (supported only when the instance runs PostgreSQL 12 or later)
     * 
     */
    private String acl;
    /**
     * @return Availability zone.
     * 
     */
    private String availabilityZone;
    /**
     * @return (Available in 1.124.1+) The type of the server certificate. This parameter is supported only when the instance runs PostgreSQL with standard or enhanced SSDs. Valid values:
     * - aliyun: a cloud certificate
     * - custom: a custom certificate
     * 
     */
    private String caType;
    /**
     * @return Billing method. Value options: `Postpaid` for Pay-As-You-Go and `Prepaid` for subscription.
     * 
     */
    private String chargeType;
    /**
     * @return (Available in 1.124.1+) The public key of the CA that issues client certificates. This parameter is supported only when the instance runs PostgreSQL with standard or enhanced SSDs.
     * 
     */
    private String clientCaCert;
    /**
     * @return (Available in 1.124.1+) The content of the server certificate. This parameter is supported only when the instance runs PostgreSQL with cloud disks. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC. This parameter is not supported now.
     * 
     */
    private String clientCaCertExpireTime;
    /**
     * @return (Available in 1.124.1+) The certificate revocation list (CRL) that contains revoked client certificates. This parameter is supported only when the instance runs PostgreSQL with standard or enhanced SSDs.
     * 
     */
    private String clientCertRevocationList;
    /**
     * @return `Standard` for standard access mode and `Safe` for high security access mode.
     * 
     */
    private String connectionMode;
    /**
     * @return (Available in 1.70.3+) RDS database connection string.
     * 
     */
    private String connectionString;
    /**
     * @return Creation time of the instance.
     * 
     */
    private String createTime;
    /**
     * @return (Available in 1.124.3+) The creator of the encryption key.
     * 
     */
    private String creator;
    /**
     * @return (Available in 1.70.3+) The storage type of the instance.
     * 
     */
    private String dbInstanceStorageType;
    /**
     * @return (Available in 1.197.0+) The type of instance.
     * 
     */
    private String dbInstanceType;
    /**
     * @return `Primary` for primary instance, `Readonly` for read-only instance, `Guard` for disaster recovery instance, and `Temp` for temporary instance.
     * 
     */
    private String dbType;
    /**
     * @return (Available in 1.124.3+) The estimated time when the encryption key will be deleted. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.
     * 
     */
    private String deleteDate;
    /**
     * @return (Available in 1.167.0+) Indicates whether the release protection feature is enabled for the instance. Valid values:
     * * **true**: The release protection feature is enabled.
     * * **false**: The release protection feature is disabled.
     * 
     */
    private Boolean deletionProtection;
    /**
     * @return (Available in 1.124.3+) The description of the encryption key.
     * 
     */
    private String description;
    /**
     * @return (Available in 1.124.3+) The ID of the encryption key.
     * 
     */
    private String encryptionKey;
    /**
     * @return (Available in 1.124.3+) The status of the encryption key. Valid values:
     * - Enabled
     * - Disabled
     * 
     */
    private String encryptionKeyStatus;
    /**
     * @return Database type. Options are `MySQL`, `SQLServer`, `PostgreSQL`, `MariaDB`. If no value is specified, all types are returned.
     * 
     */
    private String engine;
    /**
     * @return Database version.
     * 
     */
    private String engineVersion;
    /**
     * @return Expiration time. Pay-As-You-Go instances never expire.
     * 
     */
    private String expireTime;
    /**
     * @return If a disaster recovery instance is attached to the current instance, the ID of the disaster recovery instance applies.
     * 
     */
    private String guardInstanceId;
    /**
     * @return (Available since v1.209.1) The high availability mode of the instance.
     * 
     */
    private String haMode;
    /**
     * @return (Available since v1.209.1) An array that consists of the information of the primary and secondary instances.
     * 
     */
    private List<GetInstancesInstanceHostInstanceInfo> hostInstanceInfos;
    /**
     * @return The ID of the RDS instance.
     * 
     */
    private String id;
    /**
     * @return (Available in 1.70.3+) User-defined DB instance storage space.
     * 
     */
    private Integer instanceStorage;
    /**
     * @return Sizing of the RDS instance.
     * 
     */
    private String instanceType;
    /**
     * @return (Available in 1.124.3+) The purpose of the encryption key.
     * 
     */
    private String keyUsage;
    /**
     * @return (Available in 1.124.1+) The status of the SSL link. This parameter is supported only when the instance runs PostgreSQL with standard or enhanced SSDs. Valid values:
     * - success
     * - setting
     * - failed
     * 
     */
    private String lastModifyStatus;
    /**
     * @return ID of the primary instance. If this parameter is not returned, the current instance is a primary instance.
     * 
     */
    private String masterInstanceId;
    /**
     * @return (Available in 1.101.0+) The master zone of the instance.
     * 
     */
    private String masterZone;
    /**
     * @return (Available in 1.124.3+) The time when the encryption key expires. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.
     * 
     */
    private String materialExpireTime;
    /**
     * @return (Available in 1.124.1+) The reason why the SSL link stays in the current state. This parameter is supported only when the instance runs PostgreSQL with standard or enhanced SSDs.
     * 
     */
    private String modifyStatusReason;
    /**
     * @return The name of the RDS instance.
     * 
     */
    private String name;
    /**
     * @return `Internet` for public network or `Intranet` for private network.
     * 
     */
    private String netType;
    /**
     * @return (Available in 1.124.3+) The source of the encryption key.
     * 
     */
    private String origin;
    /**
     * @return (Available in 1.135.0+) Parameter list.
     * 
     */
    private List<GetInstancesInstanceParameter> parameters;
    /**
     * @return (Available in 1.70.3+) RDS database connection port.
     * 
     */
    private String port;
    /**
     * @return A list of IDs of read-only instances attached to the primary instance.
     * 
     */
    private List<String> readonlyInstanceIds;
    /**
     * @return The region ID of the instance.
     * 
     */
    private String regionId;
    /**
     * @return (Available in 1.124.1+) The method that is used to verify the replication permission. This parameter is supported only when the instance runs PostgreSQL with standard or enhanced SSDs. Valid values:
     * - cert
     * - perfer
     * - verify-ca
     * - verify-full (supported only when the instance runs PostgreSQL 12 or later)
     * 
     */
    private String replicationAcl;
    /**
     * @return (Available in 1.124.1+) Indicates whether the server certificate needs to be updated.
     * - Valid values for ApsaraDB RDS for MySQL and ApsaraDB RDS for SQL Server:
     * - No
     * - Yes
     * - Valid values for ApsaraDB RDS for PostgreSQL:
     * - 0: no
     * - 1: yes
     * 
     */
    private String requireUpdate;
    /**
     * @return (Available in 1.124.1+) The server certificate that needs to be updated. This parameter is supported only when the instance runs PostgreSQL with standard or enhanced SSDs.
     * 
     */
    private String requireUpdateItem;
    /**
     * @return (Available in 1.124.1+) The reason why the server certificate needs to be updated. This parameter is supported only when the instance runs PostgreSQL with standard or enhanced SSDs.
     * 
     */
    private String requireUpdateReason;
    /**
     * @return (Available in 1.124.1+) The URL of the CA that issues the server certificate. This parameter is supported only when the instance runs PostgreSQL with standard or enhanced SSDs.
     * 
     */
    private String serverCaUrl;
    /**
     * @return (Available in 1.124.1+) The content of the server certificate. This parameter is supported only when the instance runs PostgreSQL with standard or enhanced SSDs.
     * 
     */
    private String serverCert;
    /**
     * @return (Available in 1.124.1+) The private key of the server certificate. This parameter is supported only when the instance runs PostgreSQL with standard or enhanced SSDs.
     * 
     */
    private String serverKey;
    /**
     * @return (Available in 1.124.1+) The time when the server certificate was created. This parameter is supported only when the instance runs PostgreSQL with standard or enhanced SSDs. In addition, this parameter is valid only when the CAType parameter is set to aliyun.
     * 
     */
    private String sslCreateTime;
    /**
     * @return (Available in 1.124.1+) Indicates whether SSL encryption is enabled. Valid values:
     * - on: enabled
     * - off: disabled
     * 
     */
    private String sslEnabled;
    /**
     * @return (Available in 1.124.1+) The time when the server certificate expires. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.
     * 
     */
    private String sslExpireTime;
    /**
     * @return Status of the instance.
     * 
     */
    private String status;
    /**
     * @return (Available since v1.209.1) The data replication mode of the instance.
     * 
     */
    private String syncMode;
    /**
     * @return If a temporary instance is attached to the current instance, the ID of the temporary instance applies.
     * 
     */
    private String tempInstanceId;
    /**
     * @return Used to retrieve instances belong to specified VPC.
     * 
     */
    private String vpcId;
    /**
     * @return Used to retrieve instances belong to specified `vswitch` resources.
     * 
     */
    private String vswitchId;
    /**
     * @return (Available in 1.101.0+) The region ID of the secondary instance if you create a secondary instance. If you set this parameter to the same value as the ZoneId parameter, the instance is deployed in a single zone. Otherwise, the instance is deployed in multiple zones.
     * 
     */
    private String zoneIdSlaveA;
    /**
     * @return (Available in 1.101.0+) The region ID of the log instance if you create a log instance. If you set this parameter to the same value as the ZoneId parameter, the instance is deployed in a single zone. Otherwise, the instance is deployed in multiple zones.
     * 
     */
    private String zoneIdSlaveB;

    private GetInstancesInstance() {}
    /**
     * @return (Available in 1.124.1+) The method that is used to verify the identities of clients. This parameter is supported only when the instance runs PostgreSQL with standard or enhanced SSDs. Valid values:
     * - cert
     * - perfer
     * - verify-ca
     * - verify-full (supported only when the instance runs PostgreSQL 12 or later)
     * 
     */
    public String acl() {
        return this.acl;
    }
    /**
     * @return Availability zone.
     * 
     */
    public String availabilityZone() {
        return this.availabilityZone;
    }
    /**
     * @return (Available in 1.124.1+) The type of the server certificate. This parameter is supported only when the instance runs PostgreSQL with standard or enhanced SSDs. Valid values:
     * - aliyun: a cloud certificate
     * - custom: a custom certificate
     * 
     */
    public String caType() {
        return this.caType;
    }
    /**
     * @return Billing method. Value options: `Postpaid` for Pay-As-You-Go and `Prepaid` for subscription.
     * 
     */
    public String chargeType() {
        return this.chargeType;
    }
    /**
     * @return (Available in 1.124.1+) The public key of the CA that issues client certificates. This parameter is supported only when the instance runs PostgreSQL with standard or enhanced SSDs.
     * 
     */
    public String clientCaCert() {
        return this.clientCaCert;
    }
    /**
     * @return (Available in 1.124.1+) The content of the server certificate. This parameter is supported only when the instance runs PostgreSQL with cloud disks. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC. This parameter is not supported now.
     * 
     */
    public String clientCaCertExpireTime() {
        return this.clientCaCertExpireTime;
    }
    /**
     * @return (Available in 1.124.1+) The certificate revocation list (CRL) that contains revoked client certificates. This parameter is supported only when the instance runs PostgreSQL with standard or enhanced SSDs.
     * 
     */
    public String clientCertRevocationList() {
        return this.clientCertRevocationList;
    }
    /**
     * @return `Standard` for standard access mode and `Safe` for high security access mode.
     * 
     */
    public String connectionMode() {
        return this.connectionMode;
    }
    /**
     * @return (Available in 1.70.3+) RDS database connection string.
     * 
     */
    public String connectionString() {
        return this.connectionString;
    }
    /**
     * @return Creation time of the instance.
     * 
     */
    public String createTime() {
        return this.createTime;
    }
    /**
     * @return (Available in 1.124.3+) The creator of the encryption key.
     * 
     */
    public String creator() {
        return this.creator;
    }
    /**
     * @return (Available in 1.70.3+) The storage type of the instance.
     * 
     */
    public String dbInstanceStorageType() {
        return this.dbInstanceStorageType;
    }
    /**
     * @return (Available in 1.197.0+) The type of instance.
     * 
     */
    public String dbInstanceType() {
        return this.dbInstanceType;
    }
    /**
     * @return `Primary` for primary instance, `Readonly` for read-only instance, `Guard` for disaster recovery instance, and `Temp` for temporary instance.
     * 
     */
    public String dbType() {
        return this.dbType;
    }
    /**
     * @return (Available in 1.124.3+) The estimated time when the encryption key will be deleted. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.
     * 
     */
    public String deleteDate() {
        return this.deleteDate;
    }
    /**
     * @return (Available in 1.167.0+) Indicates whether the release protection feature is enabled for the instance. Valid values:
     * * **true**: The release protection feature is enabled.
     * * **false**: The release protection feature is disabled.
     * 
     */
    public Boolean deletionProtection() {
        return this.deletionProtection;
    }
    /**
     * @return (Available in 1.124.3+) The description of the encryption key.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return (Available in 1.124.3+) The ID of the encryption key.
     * 
     */
    public String encryptionKey() {
        return this.encryptionKey;
    }
    /**
     * @return (Available in 1.124.3+) The status of the encryption key. Valid values:
     * - Enabled
     * - Disabled
     * 
     */
    public String encryptionKeyStatus() {
        return this.encryptionKeyStatus;
    }
    /**
     * @return Database type. Options are `MySQL`, `SQLServer`, `PostgreSQL`, `MariaDB`. If no value is specified, all types are returned.
     * 
     */
    public String engine() {
        return this.engine;
    }
    /**
     * @return Database version.
     * 
     */
    public String engineVersion() {
        return this.engineVersion;
    }
    /**
     * @return Expiration time. Pay-As-You-Go instances never expire.
     * 
     */
    public String expireTime() {
        return this.expireTime;
    }
    /**
     * @return If a disaster recovery instance is attached to the current instance, the ID of the disaster recovery instance applies.
     * 
     */
    public String guardInstanceId() {
        return this.guardInstanceId;
    }
    /**
     * @return (Available since v1.209.1) The high availability mode of the instance.
     * 
     */
    public String haMode() {
        return this.haMode;
    }
    /**
     * @return (Available since v1.209.1) An array that consists of the information of the primary and secondary instances.
     * 
     */
    public List<GetInstancesInstanceHostInstanceInfo> hostInstanceInfos() {
        return this.hostInstanceInfos;
    }
    /**
     * @return The ID of the RDS instance.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return (Available in 1.70.3+) User-defined DB instance storage space.
     * 
     */
    public Integer instanceStorage() {
        return this.instanceStorage;
    }
    /**
     * @return Sizing of the RDS instance.
     * 
     */
    public String instanceType() {
        return this.instanceType;
    }
    /**
     * @return (Available in 1.124.3+) The purpose of the encryption key.
     * 
     */
    public String keyUsage() {
        return this.keyUsage;
    }
    /**
     * @return (Available in 1.124.1+) The status of the SSL link. This parameter is supported only when the instance runs PostgreSQL with standard or enhanced SSDs. Valid values:
     * - success
     * - setting
     * - failed
     * 
     */
    public String lastModifyStatus() {
        return this.lastModifyStatus;
    }
    /**
     * @return ID of the primary instance. If this parameter is not returned, the current instance is a primary instance.
     * 
     */
    public String masterInstanceId() {
        return this.masterInstanceId;
    }
    /**
     * @return (Available in 1.101.0+) The master zone of the instance.
     * 
     */
    public String masterZone() {
        return this.masterZone;
    }
    /**
     * @return (Available in 1.124.3+) The time when the encryption key expires. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.
     * 
     */
    public String materialExpireTime() {
        return this.materialExpireTime;
    }
    /**
     * @return (Available in 1.124.1+) The reason why the SSL link stays in the current state. This parameter is supported only when the instance runs PostgreSQL with standard or enhanced SSDs.
     * 
     */
    public String modifyStatusReason() {
        return this.modifyStatusReason;
    }
    /**
     * @return The name of the RDS instance.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return `Internet` for public network or `Intranet` for private network.
     * 
     */
    public String netType() {
        return this.netType;
    }
    /**
     * @return (Available in 1.124.3+) The source of the encryption key.
     * 
     */
    public String origin() {
        return this.origin;
    }
    /**
     * @return (Available in 1.135.0+) Parameter list.
     * 
     */
    public List<GetInstancesInstanceParameter> parameters() {
        return this.parameters;
    }
    /**
     * @return (Available in 1.70.3+) RDS database connection port.
     * 
     */
    public String port() {
        return this.port;
    }
    /**
     * @return A list of IDs of read-only instances attached to the primary instance.
     * 
     */
    public List<String> readonlyInstanceIds() {
        return this.readonlyInstanceIds;
    }
    /**
     * @return The region ID of the instance.
     * 
     */
    public String regionId() {
        return this.regionId;
    }
    /**
     * @return (Available in 1.124.1+) The method that is used to verify the replication permission. This parameter is supported only when the instance runs PostgreSQL with standard or enhanced SSDs. Valid values:
     * - cert
     * - perfer
     * - verify-ca
     * - verify-full (supported only when the instance runs PostgreSQL 12 or later)
     * 
     */
    public String replicationAcl() {
        return this.replicationAcl;
    }
    /**
     * @return (Available in 1.124.1+) Indicates whether the server certificate needs to be updated.
     * - Valid values for ApsaraDB RDS for MySQL and ApsaraDB RDS for SQL Server:
     * - No
     * - Yes
     * - Valid values for ApsaraDB RDS for PostgreSQL:
     * - 0: no
     * - 1: yes
     * 
     */
    public String requireUpdate() {
        return this.requireUpdate;
    }
    /**
     * @return (Available in 1.124.1+) The server certificate that needs to be updated. This parameter is supported only when the instance runs PostgreSQL with standard or enhanced SSDs.
     * 
     */
    public String requireUpdateItem() {
        return this.requireUpdateItem;
    }
    /**
     * @return (Available in 1.124.1+) The reason why the server certificate needs to be updated. This parameter is supported only when the instance runs PostgreSQL with standard or enhanced SSDs.
     * 
     */
    public String requireUpdateReason() {
        return this.requireUpdateReason;
    }
    /**
     * @return (Available in 1.124.1+) The URL of the CA that issues the server certificate. This parameter is supported only when the instance runs PostgreSQL with standard or enhanced SSDs.
     * 
     */
    public String serverCaUrl() {
        return this.serverCaUrl;
    }
    /**
     * @return (Available in 1.124.1+) The content of the server certificate. This parameter is supported only when the instance runs PostgreSQL with standard or enhanced SSDs.
     * 
     */
    public String serverCert() {
        return this.serverCert;
    }
    /**
     * @return (Available in 1.124.1+) The private key of the server certificate. This parameter is supported only when the instance runs PostgreSQL with standard or enhanced SSDs.
     * 
     */
    public String serverKey() {
        return this.serverKey;
    }
    /**
     * @return (Available in 1.124.1+) The time when the server certificate was created. This parameter is supported only when the instance runs PostgreSQL with standard or enhanced SSDs. In addition, this parameter is valid only when the CAType parameter is set to aliyun.
     * 
     */
    public String sslCreateTime() {
        return this.sslCreateTime;
    }
    /**
     * @return (Available in 1.124.1+) Indicates whether SSL encryption is enabled. Valid values:
     * - on: enabled
     * - off: disabled
     * 
     */
    public String sslEnabled() {
        return this.sslEnabled;
    }
    /**
     * @return (Available in 1.124.1+) The time when the server certificate expires. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.
     * 
     */
    public String sslExpireTime() {
        return this.sslExpireTime;
    }
    /**
     * @return Status of the instance.
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return (Available since v1.209.1) The data replication mode of the instance.
     * 
     */
    public String syncMode() {
        return this.syncMode;
    }
    /**
     * @return If a temporary instance is attached to the current instance, the ID of the temporary instance applies.
     * 
     */
    public String tempInstanceId() {
        return this.tempInstanceId;
    }
    /**
     * @return Used to retrieve instances belong to specified VPC.
     * 
     */
    public String vpcId() {
        return this.vpcId;
    }
    /**
     * @return Used to retrieve instances belong to specified `vswitch` resources.
     * 
     */
    public String vswitchId() {
        return this.vswitchId;
    }
    /**
     * @return (Available in 1.101.0+) The region ID of the secondary instance if you create a secondary instance. If you set this parameter to the same value as the ZoneId parameter, the instance is deployed in a single zone. Otherwise, the instance is deployed in multiple zones.
     * 
     */
    public String zoneIdSlaveA() {
        return this.zoneIdSlaveA;
    }
    /**
     * @return (Available in 1.101.0+) The region ID of the log instance if you create a log instance. If you set this parameter to the same value as the ZoneId parameter, the instance is deployed in a single zone. Otherwise, the instance is deployed in multiple zones.
     * 
     */
    public String zoneIdSlaveB() {
        return this.zoneIdSlaveB;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetInstancesInstance defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String acl;
        private String availabilityZone;
        private String caType;
        private String chargeType;
        private String clientCaCert;
        private String clientCaCertExpireTime;
        private String clientCertRevocationList;
        private String connectionMode;
        private String connectionString;
        private String createTime;
        private String creator;
        private String dbInstanceStorageType;
        private String dbInstanceType;
        private String dbType;
        private String deleteDate;
        private Boolean deletionProtection;
        private String description;
        private String encryptionKey;
        private String encryptionKeyStatus;
        private String engine;
        private String engineVersion;
        private String expireTime;
        private String guardInstanceId;
        private String haMode;
        private List<GetInstancesInstanceHostInstanceInfo> hostInstanceInfos;
        private String id;
        private Integer instanceStorage;
        private String instanceType;
        private String keyUsage;
        private String lastModifyStatus;
        private String masterInstanceId;
        private String masterZone;
        private String materialExpireTime;
        private String modifyStatusReason;
        private String name;
        private String netType;
        private String origin;
        private List<GetInstancesInstanceParameter> parameters;
        private String port;
        private List<String> readonlyInstanceIds;
        private String regionId;
        private String replicationAcl;
        private String requireUpdate;
        private String requireUpdateItem;
        private String requireUpdateReason;
        private String serverCaUrl;
        private String serverCert;
        private String serverKey;
        private String sslCreateTime;
        private String sslEnabled;
        private String sslExpireTime;
        private String status;
        private String syncMode;
        private String tempInstanceId;
        private String vpcId;
        private String vswitchId;
        private String zoneIdSlaveA;
        private String zoneIdSlaveB;
        public Builder() {}
        public Builder(GetInstancesInstance defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.acl = defaults.acl;
    	      this.availabilityZone = defaults.availabilityZone;
    	      this.caType = defaults.caType;
    	      this.chargeType = defaults.chargeType;
    	      this.clientCaCert = defaults.clientCaCert;
    	      this.clientCaCertExpireTime = defaults.clientCaCertExpireTime;
    	      this.clientCertRevocationList = defaults.clientCertRevocationList;
    	      this.connectionMode = defaults.connectionMode;
    	      this.connectionString = defaults.connectionString;
    	      this.createTime = defaults.createTime;
    	      this.creator = defaults.creator;
    	      this.dbInstanceStorageType = defaults.dbInstanceStorageType;
    	      this.dbInstanceType = defaults.dbInstanceType;
    	      this.dbType = defaults.dbType;
    	      this.deleteDate = defaults.deleteDate;
    	      this.deletionProtection = defaults.deletionProtection;
    	      this.description = defaults.description;
    	      this.encryptionKey = defaults.encryptionKey;
    	      this.encryptionKeyStatus = defaults.encryptionKeyStatus;
    	      this.engine = defaults.engine;
    	      this.engineVersion = defaults.engineVersion;
    	      this.expireTime = defaults.expireTime;
    	      this.guardInstanceId = defaults.guardInstanceId;
    	      this.haMode = defaults.haMode;
    	      this.hostInstanceInfos = defaults.hostInstanceInfos;
    	      this.id = defaults.id;
    	      this.instanceStorage = defaults.instanceStorage;
    	      this.instanceType = defaults.instanceType;
    	      this.keyUsage = defaults.keyUsage;
    	      this.lastModifyStatus = defaults.lastModifyStatus;
    	      this.masterInstanceId = defaults.masterInstanceId;
    	      this.masterZone = defaults.masterZone;
    	      this.materialExpireTime = defaults.materialExpireTime;
    	      this.modifyStatusReason = defaults.modifyStatusReason;
    	      this.name = defaults.name;
    	      this.netType = defaults.netType;
    	      this.origin = defaults.origin;
    	      this.parameters = defaults.parameters;
    	      this.port = defaults.port;
    	      this.readonlyInstanceIds = defaults.readonlyInstanceIds;
    	      this.regionId = defaults.regionId;
    	      this.replicationAcl = defaults.replicationAcl;
    	      this.requireUpdate = defaults.requireUpdate;
    	      this.requireUpdateItem = defaults.requireUpdateItem;
    	      this.requireUpdateReason = defaults.requireUpdateReason;
    	      this.serverCaUrl = defaults.serverCaUrl;
    	      this.serverCert = defaults.serverCert;
    	      this.serverKey = defaults.serverKey;
    	      this.sslCreateTime = defaults.sslCreateTime;
    	      this.sslEnabled = defaults.sslEnabled;
    	      this.sslExpireTime = defaults.sslExpireTime;
    	      this.status = defaults.status;
    	      this.syncMode = defaults.syncMode;
    	      this.tempInstanceId = defaults.tempInstanceId;
    	      this.vpcId = defaults.vpcId;
    	      this.vswitchId = defaults.vswitchId;
    	      this.zoneIdSlaveA = defaults.zoneIdSlaveA;
    	      this.zoneIdSlaveB = defaults.zoneIdSlaveB;
        }

        @CustomType.Setter
        public Builder acl(String acl) {
            if (acl == null) {
              throw new MissingRequiredPropertyException("GetInstancesInstance", "acl");
            }
            this.acl = acl;
            return this;
        }
        @CustomType.Setter
        public Builder availabilityZone(String availabilityZone) {
            if (availabilityZone == null) {
              throw new MissingRequiredPropertyException("GetInstancesInstance", "availabilityZone");
            }
            this.availabilityZone = availabilityZone;
            return this;
        }
        @CustomType.Setter
        public Builder caType(String caType) {
            if (caType == null) {
              throw new MissingRequiredPropertyException("GetInstancesInstance", "caType");
            }
            this.caType = caType;
            return this;
        }
        @CustomType.Setter
        public Builder chargeType(String chargeType) {
            if (chargeType == null) {
              throw new MissingRequiredPropertyException("GetInstancesInstance", "chargeType");
            }
            this.chargeType = chargeType;
            return this;
        }
        @CustomType.Setter
        public Builder clientCaCert(String clientCaCert) {
            if (clientCaCert == null) {
              throw new MissingRequiredPropertyException("GetInstancesInstance", "clientCaCert");
            }
            this.clientCaCert = clientCaCert;
            return this;
        }
        @CustomType.Setter
        public Builder clientCaCertExpireTime(String clientCaCertExpireTime) {
            if (clientCaCertExpireTime == null) {
              throw new MissingRequiredPropertyException("GetInstancesInstance", "clientCaCertExpireTime");
            }
            this.clientCaCertExpireTime = clientCaCertExpireTime;
            return this;
        }
        @CustomType.Setter
        public Builder clientCertRevocationList(String clientCertRevocationList) {
            if (clientCertRevocationList == null) {
              throw new MissingRequiredPropertyException("GetInstancesInstance", "clientCertRevocationList");
            }
            this.clientCertRevocationList = clientCertRevocationList;
            return this;
        }
        @CustomType.Setter
        public Builder connectionMode(String connectionMode) {
            if (connectionMode == null) {
              throw new MissingRequiredPropertyException("GetInstancesInstance", "connectionMode");
            }
            this.connectionMode = connectionMode;
            return this;
        }
        @CustomType.Setter
        public Builder connectionString(String connectionString) {
            if (connectionString == null) {
              throw new MissingRequiredPropertyException("GetInstancesInstance", "connectionString");
            }
            this.connectionString = connectionString;
            return this;
        }
        @CustomType.Setter
        public Builder createTime(String createTime) {
            if (createTime == null) {
              throw new MissingRequiredPropertyException("GetInstancesInstance", "createTime");
            }
            this.createTime = createTime;
            return this;
        }
        @CustomType.Setter
        public Builder creator(String creator) {
            if (creator == null) {
              throw new MissingRequiredPropertyException("GetInstancesInstance", "creator");
            }
            this.creator = creator;
            return this;
        }
        @CustomType.Setter
        public Builder dbInstanceStorageType(String dbInstanceStorageType) {
            if (dbInstanceStorageType == null) {
              throw new MissingRequiredPropertyException("GetInstancesInstance", "dbInstanceStorageType");
            }
            this.dbInstanceStorageType = dbInstanceStorageType;
            return this;
        }
        @CustomType.Setter
        public Builder dbInstanceType(String dbInstanceType) {
            if (dbInstanceType == null) {
              throw new MissingRequiredPropertyException("GetInstancesInstance", "dbInstanceType");
            }
            this.dbInstanceType = dbInstanceType;
            return this;
        }
        @CustomType.Setter
        public Builder dbType(String dbType) {
            if (dbType == null) {
              throw new MissingRequiredPropertyException("GetInstancesInstance", "dbType");
            }
            this.dbType = dbType;
            return this;
        }
        @CustomType.Setter
        public Builder deleteDate(String deleteDate) {
            if (deleteDate == null) {
              throw new MissingRequiredPropertyException("GetInstancesInstance", "deleteDate");
            }
            this.deleteDate = deleteDate;
            return this;
        }
        @CustomType.Setter
        public Builder deletionProtection(Boolean deletionProtection) {
            if (deletionProtection == null) {
              throw new MissingRequiredPropertyException("GetInstancesInstance", "deletionProtection");
            }
            this.deletionProtection = deletionProtection;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetInstancesInstance", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder encryptionKey(String encryptionKey) {
            if (encryptionKey == null) {
              throw new MissingRequiredPropertyException("GetInstancesInstance", "encryptionKey");
            }
            this.encryptionKey = encryptionKey;
            return this;
        }
        @CustomType.Setter
        public Builder encryptionKeyStatus(String encryptionKeyStatus) {
            if (encryptionKeyStatus == null) {
              throw new MissingRequiredPropertyException("GetInstancesInstance", "encryptionKeyStatus");
            }
            this.encryptionKeyStatus = encryptionKeyStatus;
            return this;
        }
        @CustomType.Setter
        public Builder engine(String engine) {
            if (engine == null) {
              throw new MissingRequiredPropertyException("GetInstancesInstance", "engine");
            }
            this.engine = engine;
            return this;
        }
        @CustomType.Setter
        public Builder engineVersion(String engineVersion) {
            if (engineVersion == null) {
              throw new MissingRequiredPropertyException("GetInstancesInstance", "engineVersion");
            }
            this.engineVersion = engineVersion;
            return this;
        }
        @CustomType.Setter
        public Builder expireTime(String expireTime) {
            if (expireTime == null) {
              throw new MissingRequiredPropertyException("GetInstancesInstance", "expireTime");
            }
            this.expireTime = expireTime;
            return this;
        }
        @CustomType.Setter
        public Builder guardInstanceId(String guardInstanceId) {
            if (guardInstanceId == null) {
              throw new MissingRequiredPropertyException("GetInstancesInstance", "guardInstanceId");
            }
            this.guardInstanceId = guardInstanceId;
            return this;
        }
        @CustomType.Setter
        public Builder haMode(String haMode) {
            if (haMode == null) {
              throw new MissingRequiredPropertyException("GetInstancesInstance", "haMode");
            }
            this.haMode = haMode;
            return this;
        }
        @CustomType.Setter
        public Builder hostInstanceInfos(List<GetInstancesInstanceHostInstanceInfo> hostInstanceInfos) {
            if (hostInstanceInfos == null) {
              throw new MissingRequiredPropertyException("GetInstancesInstance", "hostInstanceInfos");
            }
            this.hostInstanceInfos = hostInstanceInfos;
            return this;
        }
        public Builder hostInstanceInfos(GetInstancesInstanceHostInstanceInfo... hostInstanceInfos) {
            return hostInstanceInfos(List.of(hostInstanceInfos));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetInstancesInstance", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder instanceStorage(Integer instanceStorage) {
            if (instanceStorage == null) {
              throw new MissingRequiredPropertyException("GetInstancesInstance", "instanceStorage");
            }
            this.instanceStorage = instanceStorage;
            return this;
        }
        @CustomType.Setter
        public Builder instanceType(String instanceType) {
            if (instanceType == null) {
              throw new MissingRequiredPropertyException("GetInstancesInstance", "instanceType");
            }
            this.instanceType = instanceType;
            return this;
        }
        @CustomType.Setter
        public Builder keyUsage(String keyUsage) {
            if (keyUsage == null) {
              throw new MissingRequiredPropertyException("GetInstancesInstance", "keyUsage");
            }
            this.keyUsage = keyUsage;
            return this;
        }
        @CustomType.Setter
        public Builder lastModifyStatus(String lastModifyStatus) {
            if (lastModifyStatus == null) {
              throw new MissingRequiredPropertyException("GetInstancesInstance", "lastModifyStatus");
            }
            this.lastModifyStatus = lastModifyStatus;
            return this;
        }
        @CustomType.Setter
        public Builder masterInstanceId(String masterInstanceId) {
            if (masterInstanceId == null) {
              throw new MissingRequiredPropertyException("GetInstancesInstance", "masterInstanceId");
            }
            this.masterInstanceId = masterInstanceId;
            return this;
        }
        @CustomType.Setter
        public Builder masterZone(String masterZone) {
            if (masterZone == null) {
              throw new MissingRequiredPropertyException("GetInstancesInstance", "masterZone");
            }
            this.masterZone = masterZone;
            return this;
        }
        @CustomType.Setter
        public Builder materialExpireTime(String materialExpireTime) {
            if (materialExpireTime == null) {
              throw new MissingRequiredPropertyException("GetInstancesInstance", "materialExpireTime");
            }
            this.materialExpireTime = materialExpireTime;
            return this;
        }
        @CustomType.Setter
        public Builder modifyStatusReason(String modifyStatusReason) {
            if (modifyStatusReason == null) {
              throw new MissingRequiredPropertyException("GetInstancesInstance", "modifyStatusReason");
            }
            this.modifyStatusReason = modifyStatusReason;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetInstancesInstance", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder netType(String netType) {
            if (netType == null) {
              throw new MissingRequiredPropertyException("GetInstancesInstance", "netType");
            }
            this.netType = netType;
            return this;
        }
        @CustomType.Setter
        public Builder origin(String origin) {
            if (origin == null) {
              throw new MissingRequiredPropertyException("GetInstancesInstance", "origin");
            }
            this.origin = origin;
            return this;
        }
        @CustomType.Setter
        public Builder parameters(List<GetInstancesInstanceParameter> parameters) {
            if (parameters == null) {
              throw new MissingRequiredPropertyException("GetInstancesInstance", "parameters");
            }
            this.parameters = parameters;
            return this;
        }
        public Builder parameters(GetInstancesInstanceParameter... parameters) {
            return parameters(List.of(parameters));
        }
        @CustomType.Setter
        public Builder port(String port) {
            if (port == null) {
              throw new MissingRequiredPropertyException("GetInstancesInstance", "port");
            }
            this.port = port;
            return this;
        }
        @CustomType.Setter
        public Builder readonlyInstanceIds(List<String> readonlyInstanceIds) {
            if (readonlyInstanceIds == null) {
              throw new MissingRequiredPropertyException("GetInstancesInstance", "readonlyInstanceIds");
            }
            this.readonlyInstanceIds = readonlyInstanceIds;
            return this;
        }
        public Builder readonlyInstanceIds(String... readonlyInstanceIds) {
            return readonlyInstanceIds(List.of(readonlyInstanceIds));
        }
        @CustomType.Setter
        public Builder regionId(String regionId) {
            if (regionId == null) {
              throw new MissingRequiredPropertyException("GetInstancesInstance", "regionId");
            }
            this.regionId = regionId;
            return this;
        }
        @CustomType.Setter
        public Builder replicationAcl(String replicationAcl) {
            if (replicationAcl == null) {
              throw new MissingRequiredPropertyException("GetInstancesInstance", "replicationAcl");
            }
            this.replicationAcl = replicationAcl;
            return this;
        }
        @CustomType.Setter
        public Builder requireUpdate(String requireUpdate) {
            if (requireUpdate == null) {
              throw new MissingRequiredPropertyException("GetInstancesInstance", "requireUpdate");
            }
            this.requireUpdate = requireUpdate;
            return this;
        }
        @CustomType.Setter
        public Builder requireUpdateItem(String requireUpdateItem) {
            if (requireUpdateItem == null) {
              throw new MissingRequiredPropertyException("GetInstancesInstance", "requireUpdateItem");
            }
            this.requireUpdateItem = requireUpdateItem;
            return this;
        }
        @CustomType.Setter
        public Builder requireUpdateReason(String requireUpdateReason) {
            if (requireUpdateReason == null) {
              throw new MissingRequiredPropertyException("GetInstancesInstance", "requireUpdateReason");
            }
            this.requireUpdateReason = requireUpdateReason;
            return this;
        }
        @CustomType.Setter
        public Builder serverCaUrl(String serverCaUrl) {
            if (serverCaUrl == null) {
              throw new MissingRequiredPropertyException("GetInstancesInstance", "serverCaUrl");
            }
            this.serverCaUrl = serverCaUrl;
            return this;
        }
        @CustomType.Setter
        public Builder serverCert(String serverCert) {
            if (serverCert == null) {
              throw new MissingRequiredPropertyException("GetInstancesInstance", "serverCert");
            }
            this.serverCert = serverCert;
            return this;
        }
        @CustomType.Setter
        public Builder serverKey(String serverKey) {
            if (serverKey == null) {
              throw new MissingRequiredPropertyException("GetInstancesInstance", "serverKey");
            }
            this.serverKey = serverKey;
            return this;
        }
        @CustomType.Setter
        public Builder sslCreateTime(String sslCreateTime) {
            if (sslCreateTime == null) {
              throw new MissingRequiredPropertyException("GetInstancesInstance", "sslCreateTime");
            }
            this.sslCreateTime = sslCreateTime;
            return this;
        }
        @CustomType.Setter
        public Builder sslEnabled(String sslEnabled) {
            if (sslEnabled == null) {
              throw new MissingRequiredPropertyException("GetInstancesInstance", "sslEnabled");
            }
            this.sslEnabled = sslEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder sslExpireTime(String sslExpireTime) {
            if (sslExpireTime == null) {
              throw new MissingRequiredPropertyException("GetInstancesInstance", "sslExpireTime");
            }
            this.sslExpireTime = sslExpireTime;
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            if (status == null) {
              throw new MissingRequiredPropertyException("GetInstancesInstance", "status");
            }
            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder syncMode(String syncMode) {
            if (syncMode == null) {
              throw new MissingRequiredPropertyException("GetInstancesInstance", "syncMode");
            }
            this.syncMode = syncMode;
            return this;
        }
        @CustomType.Setter
        public Builder tempInstanceId(String tempInstanceId) {
            if (tempInstanceId == null) {
              throw new MissingRequiredPropertyException("GetInstancesInstance", "tempInstanceId");
            }
            this.tempInstanceId = tempInstanceId;
            return this;
        }
        @CustomType.Setter
        public Builder vpcId(String vpcId) {
            if (vpcId == null) {
              throw new MissingRequiredPropertyException("GetInstancesInstance", "vpcId");
            }
            this.vpcId = vpcId;
            return this;
        }
        @CustomType.Setter
        public Builder vswitchId(String vswitchId) {
            if (vswitchId == null) {
              throw new MissingRequiredPropertyException("GetInstancesInstance", "vswitchId");
            }
            this.vswitchId = vswitchId;
            return this;
        }
        @CustomType.Setter
        public Builder zoneIdSlaveA(String zoneIdSlaveA) {
            if (zoneIdSlaveA == null) {
              throw new MissingRequiredPropertyException("GetInstancesInstance", "zoneIdSlaveA");
            }
            this.zoneIdSlaveA = zoneIdSlaveA;
            return this;
        }
        @CustomType.Setter
        public Builder zoneIdSlaveB(String zoneIdSlaveB) {
            if (zoneIdSlaveB == null) {
              throw new MissingRequiredPropertyException("GetInstancesInstance", "zoneIdSlaveB");
            }
            this.zoneIdSlaveB = zoneIdSlaveB;
            return this;
        }
        public GetInstancesInstance build() {
            final var _resultValue = new GetInstancesInstance();
            _resultValue.acl = acl;
            _resultValue.availabilityZone = availabilityZone;
            _resultValue.caType = caType;
            _resultValue.chargeType = chargeType;
            _resultValue.clientCaCert = clientCaCert;
            _resultValue.clientCaCertExpireTime = clientCaCertExpireTime;
            _resultValue.clientCertRevocationList = clientCertRevocationList;
            _resultValue.connectionMode = connectionMode;
            _resultValue.connectionString = connectionString;
            _resultValue.createTime = createTime;
            _resultValue.creator = creator;
            _resultValue.dbInstanceStorageType = dbInstanceStorageType;
            _resultValue.dbInstanceType = dbInstanceType;
            _resultValue.dbType = dbType;
            _resultValue.deleteDate = deleteDate;
            _resultValue.deletionProtection = deletionProtection;
            _resultValue.description = description;
            _resultValue.encryptionKey = encryptionKey;
            _resultValue.encryptionKeyStatus = encryptionKeyStatus;
            _resultValue.engine = engine;
            _resultValue.engineVersion = engineVersion;
            _resultValue.expireTime = expireTime;
            _resultValue.guardInstanceId = guardInstanceId;
            _resultValue.haMode = haMode;
            _resultValue.hostInstanceInfos = hostInstanceInfos;
            _resultValue.id = id;
            _resultValue.instanceStorage = instanceStorage;
            _resultValue.instanceType = instanceType;
            _resultValue.keyUsage = keyUsage;
            _resultValue.lastModifyStatus = lastModifyStatus;
            _resultValue.masterInstanceId = masterInstanceId;
            _resultValue.masterZone = masterZone;
            _resultValue.materialExpireTime = materialExpireTime;
            _resultValue.modifyStatusReason = modifyStatusReason;
            _resultValue.name = name;
            _resultValue.netType = netType;
            _resultValue.origin = origin;
            _resultValue.parameters = parameters;
            _resultValue.port = port;
            _resultValue.readonlyInstanceIds = readonlyInstanceIds;
            _resultValue.regionId = regionId;
            _resultValue.replicationAcl = replicationAcl;
            _resultValue.requireUpdate = requireUpdate;
            _resultValue.requireUpdateItem = requireUpdateItem;
            _resultValue.requireUpdateReason = requireUpdateReason;
            _resultValue.serverCaUrl = serverCaUrl;
            _resultValue.serverCert = serverCert;
            _resultValue.serverKey = serverKey;
            _resultValue.sslCreateTime = sslCreateTime;
            _resultValue.sslEnabled = sslEnabled;
            _resultValue.sslExpireTime = sslExpireTime;
            _resultValue.status = status;
            _resultValue.syncMode = syncMode;
            _resultValue.tempInstanceId = tempInstanceId;
            _resultValue.vpcId = vpcId;
            _resultValue.vswitchId = vswitchId;
            _resultValue.zoneIdSlaveA = zoneIdSlaveA;
            _resultValue.zoneIdSlaveB = zoneIdSlaveB;
            return _resultValue;
        }
    }
}
