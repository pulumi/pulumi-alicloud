// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.hbr.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class OssBackupPlanState extends com.pulumi.resources.ResourceArgs {

    public static final OssBackupPlanState Empty = new OssBackupPlanState();

    /**
     * Backup type. Valid values: `COMPLETE`.
     * 
     */
    @Import(name="backupType")
    private @Nullable Output<String> backupType;

    /**
     * @return Backup type. Valid values: `COMPLETE`.
     * 
     */
    public Optional<Output<String>> backupType() {
        return Optional.ofNullable(this.backupType);
    }

    /**
     * The name of OSS bucket.
     * 
     */
    @Import(name="bucket")
    private @Nullable Output<String> bucket;

    /**
     * @return The name of OSS bucket.
     * 
     */
    public Optional<Output<String>> bucket() {
        return Optional.ofNullable(this.bucket);
    }

    /**
     * The role name created in the original account RAM backup by the cross account managed by the current account.
     * 
     */
    @Import(name="crossAccountRoleName")
    private @Nullable Output<String> crossAccountRoleName;

    /**
     * @return The role name created in the original account RAM backup by the cross account managed by the current account.
     * 
     */
    public Optional<Output<String>> crossAccountRoleName() {
        return Optional.ofNullable(this.crossAccountRoleName);
    }

    /**
     * The type of the cross account backup. Valid values: `SELF_ACCOUNT`, `CROSS_ACCOUNT`.
     * 
     */
    @Import(name="crossAccountType")
    private @Nullable Output<String> crossAccountType;

    /**
     * @return The type of the cross account backup. Valid values: `SELF_ACCOUNT`, `CROSS_ACCOUNT`.
     * 
     */
    public Optional<Output<String>> crossAccountType() {
        return Optional.ofNullable(this.crossAccountType);
    }

    /**
     * The original account ID of the cross account backup managed by the current account.
     * 
     */
    @Import(name="crossAccountUserId")
    private @Nullable Output<Integer> crossAccountUserId;

    /**
     * @return The original account ID of the cross account backup managed by the current account.
     * 
     */
    public Optional<Output<Integer>> crossAccountUserId() {
        return Optional.ofNullable(this.crossAccountUserId);
    }

    /**
     * Whether to disable the backup task. Valid values: `true`, `false`.
     * 
     */
    @Import(name="disabled")
    private @Nullable Output<Boolean> disabled;

    /**
     * @return Whether to disable the backup task. Valid values: `true`, `false`.
     * 
     */
    public Optional<Output<Boolean>> disabled() {
        return Optional.ofNullable(this.disabled);
    }

    /**
     * The name of the backup plan. 1~64 characters, the backup plan name of each data source type in a single warehouse required to be unique.
     * 
     */
    @Import(name="ossBackupPlanName")
    private @Nullable Output<String> ossBackupPlanName;

    /**
     * @return The name of the backup plan. 1~64 characters, the backup plan name of each data source type in a single warehouse required to be unique.
     * 
     */
    public Optional<Output<String>> ossBackupPlanName() {
        return Optional.ofNullable(this.ossBackupPlanName);
    }

    /**
     * Backup prefix. Once specified, only objects with matching prefixes will be backed up.
     * 
     */
    @Import(name="prefix")
    private @Nullable Output<String> prefix;

    /**
     * @return Backup prefix. Once specified, only objects with matching prefixes will be backed up.
     * 
     */
    public Optional<Output<String>> prefix() {
        return Optional.ofNullable(this.prefix);
    }

    /**
     * Backup retention days, the minimum is 1.
     * 
     */
    @Import(name="retention")
    private @Nullable Output<String> retention;

    /**
     * @return Backup retention days, the minimum is 1.
     * 
     */
    public Optional<Output<String>> retention() {
        return Optional.ofNullable(this.retention);
    }

    /**
     * Backup strategy. Optional format: `I|{startTime}|{interval}`. It means to execute a backup task every `{interval}` starting from `{startTime}`. The backup task for the elapsed time will not be compensated. If the last backup task has not completed yet, the next backup task will not be triggered.
     * * `startTime` Backup start time, UNIX time seconds.
     * 
     */
    @Import(name="schedule")
    private @Nullable Output<String> schedule;

    /**
     * @return Backup strategy. Optional format: `I|{startTime}|{interval}`. It means to execute a backup task every `{interval}` starting from `{startTime}`. The backup task for the elapsed time will not be compensated. If the last backup task has not completed yet, the next backup task will not be triggered.
     * * `startTime` Backup start time, UNIX time seconds.
     * 
     */
    public Optional<Output<String>> schedule() {
        return Optional.ofNullable(this.schedule);
    }

    /**
     * The ID of backup vault.
     * 
     */
    @Import(name="vaultId")
    private @Nullable Output<String> vaultId;

    /**
     * @return The ID of backup vault.
     * 
     */
    public Optional<Output<String>> vaultId() {
        return Optional.ofNullable(this.vaultId);
    }

    private OssBackupPlanState() {}

    private OssBackupPlanState(OssBackupPlanState $) {
        this.backupType = $.backupType;
        this.bucket = $.bucket;
        this.crossAccountRoleName = $.crossAccountRoleName;
        this.crossAccountType = $.crossAccountType;
        this.crossAccountUserId = $.crossAccountUserId;
        this.disabled = $.disabled;
        this.ossBackupPlanName = $.ossBackupPlanName;
        this.prefix = $.prefix;
        this.retention = $.retention;
        this.schedule = $.schedule;
        this.vaultId = $.vaultId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(OssBackupPlanState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private OssBackupPlanState $;

        public Builder() {
            $ = new OssBackupPlanState();
        }

        public Builder(OssBackupPlanState defaults) {
            $ = new OssBackupPlanState(Objects.requireNonNull(defaults));
        }

        /**
         * @param backupType Backup type. Valid values: `COMPLETE`.
         * 
         * @return builder
         * 
         */
        public Builder backupType(@Nullable Output<String> backupType) {
            $.backupType = backupType;
            return this;
        }

        /**
         * @param backupType Backup type. Valid values: `COMPLETE`.
         * 
         * @return builder
         * 
         */
        public Builder backupType(String backupType) {
            return backupType(Output.of(backupType));
        }

        /**
         * @param bucket The name of OSS bucket.
         * 
         * @return builder
         * 
         */
        public Builder bucket(@Nullable Output<String> bucket) {
            $.bucket = bucket;
            return this;
        }

        /**
         * @param bucket The name of OSS bucket.
         * 
         * @return builder
         * 
         */
        public Builder bucket(String bucket) {
            return bucket(Output.of(bucket));
        }

        /**
         * @param crossAccountRoleName The role name created in the original account RAM backup by the cross account managed by the current account.
         * 
         * @return builder
         * 
         */
        public Builder crossAccountRoleName(@Nullable Output<String> crossAccountRoleName) {
            $.crossAccountRoleName = crossAccountRoleName;
            return this;
        }

        /**
         * @param crossAccountRoleName The role name created in the original account RAM backup by the cross account managed by the current account.
         * 
         * @return builder
         * 
         */
        public Builder crossAccountRoleName(String crossAccountRoleName) {
            return crossAccountRoleName(Output.of(crossAccountRoleName));
        }

        /**
         * @param crossAccountType The type of the cross account backup. Valid values: `SELF_ACCOUNT`, `CROSS_ACCOUNT`.
         * 
         * @return builder
         * 
         */
        public Builder crossAccountType(@Nullable Output<String> crossAccountType) {
            $.crossAccountType = crossAccountType;
            return this;
        }

        /**
         * @param crossAccountType The type of the cross account backup. Valid values: `SELF_ACCOUNT`, `CROSS_ACCOUNT`.
         * 
         * @return builder
         * 
         */
        public Builder crossAccountType(String crossAccountType) {
            return crossAccountType(Output.of(crossAccountType));
        }

        /**
         * @param crossAccountUserId The original account ID of the cross account backup managed by the current account.
         * 
         * @return builder
         * 
         */
        public Builder crossAccountUserId(@Nullable Output<Integer> crossAccountUserId) {
            $.crossAccountUserId = crossAccountUserId;
            return this;
        }

        /**
         * @param crossAccountUserId The original account ID of the cross account backup managed by the current account.
         * 
         * @return builder
         * 
         */
        public Builder crossAccountUserId(Integer crossAccountUserId) {
            return crossAccountUserId(Output.of(crossAccountUserId));
        }

        /**
         * @param disabled Whether to disable the backup task. Valid values: `true`, `false`.
         * 
         * @return builder
         * 
         */
        public Builder disabled(@Nullable Output<Boolean> disabled) {
            $.disabled = disabled;
            return this;
        }

        /**
         * @param disabled Whether to disable the backup task. Valid values: `true`, `false`.
         * 
         * @return builder
         * 
         */
        public Builder disabled(Boolean disabled) {
            return disabled(Output.of(disabled));
        }

        /**
         * @param ossBackupPlanName The name of the backup plan. 1~64 characters, the backup plan name of each data source type in a single warehouse required to be unique.
         * 
         * @return builder
         * 
         */
        public Builder ossBackupPlanName(@Nullable Output<String> ossBackupPlanName) {
            $.ossBackupPlanName = ossBackupPlanName;
            return this;
        }

        /**
         * @param ossBackupPlanName The name of the backup plan. 1~64 characters, the backup plan name of each data source type in a single warehouse required to be unique.
         * 
         * @return builder
         * 
         */
        public Builder ossBackupPlanName(String ossBackupPlanName) {
            return ossBackupPlanName(Output.of(ossBackupPlanName));
        }

        /**
         * @param prefix Backup prefix. Once specified, only objects with matching prefixes will be backed up.
         * 
         * @return builder
         * 
         */
        public Builder prefix(@Nullable Output<String> prefix) {
            $.prefix = prefix;
            return this;
        }

        /**
         * @param prefix Backup prefix. Once specified, only objects with matching prefixes will be backed up.
         * 
         * @return builder
         * 
         */
        public Builder prefix(String prefix) {
            return prefix(Output.of(prefix));
        }

        /**
         * @param retention Backup retention days, the minimum is 1.
         * 
         * @return builder
         * 
         */
        public Builder retention(@Nullable Output<String> retention) {
            $.retention = retention;
            return this;
        }

        /**
         * @param retention Backup retention days, the minimum is 1.
         * 
         * @return builder
         * 
         */
        public Builder retention(String retention) {
            return retention(Output.of(retention));
        }

        /**
         * @param schedule Backup strategy. Optional format: `I|{startTime}|{interval}`. It means to execute a backup task every `{interval}` starting from `{startTime}`. The backup task for the elapsed time will not be compensated. If the last backup task has not completed yet, the next backup task will not be triggered.
         * * `startTime` Backup start time, UNIX time seconds.
         * 
         * @return builder
         * 
         */
        public Builder schedule(@Nullable Output<String> schedule) {
            $.schedule = schedule;
            return this;
        }

        /**
         * @param schedule Backup strategy. Optional format: `I|{startTime}|{interval}`. It means to execute a backup task every `{interval}` starting from `{startTime}`. The backup task for the elapsed time will not be compensated. If the last backup task has not completed yet, the next backup task will not be triggered.
         * * `startTime` Backup start time, UNIX time seconds.
         * 
         * @return builder
         * 
         */
        public Builder schedule(String schedule) {
            return schedule(Output.of(schedule));
        }

        /**
         * @param vaultId The ID of backup vault.
         * 
         * @return builder
         * 
         */
        public Builder vaultId(@Nullable Output<String> vaultId) {
            $.vaultId = vaultId;
            return this;
        }

        /**
         * @param vaultId The ID of backup vault.
         * 
         * @return builder
         * 
         */
        public Builder vaultId(String vaultId) {
            return vaultId(Output.of(vaultId));
        }

        public OssBackupPlanState build() {
            return $;
        }
    }

}
