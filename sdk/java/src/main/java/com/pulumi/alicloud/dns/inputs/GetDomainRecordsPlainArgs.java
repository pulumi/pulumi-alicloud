// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.dns.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetDomainRecordsPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetDomainRecordsPlainArgs Empty = new GetDomainRecordsPlainArgs();

    @Import(name="domainName", required=true)
    private String domainName;

    public String domainName() {
        return this.domainName;
    }

    @Import(name="hostRecordRegex")
    private @Nullable String hostRecordRegex;

    public Optional<String> hostRecordRegex() {
        return Optional.ofNullable(this.hostRecordRegex);
    }

    @Import(name="ids")
    private @Nullable List<String> ids;

    public Optional<List<String>> ids() {
        return Optional.ofNullable(this.ids);
    }

    @Import(name="isLocked")
    private @Nullable Boolean isLocked;

    public Optional<Boolean> isLocked() {
        return Optional.ofNullable(this.isLocked);
    }

    @Import(name="line")
    private @Nullable String line;

    public Optional<String> line() {
        return Optional.ofNullable(this.line);
    }

    @Import(name="outputFile")
    private @Nullable String outputFile;

    public Optional<String> outputFile() {
        return Optional.ofNullable(this.outputFile);
    }

    @Import(name="status")
    private @Nullable String status;

    public Optional<String> status() {
        return Optional.ofNullable(this.status);
    }

    @Import(name="type")
    private @Nullable String type;

    public Optional<String> type() {
        return Optional.ofNullable(this.type);
    }

    @Import(name="valueRegex")
    private @Nullable String valueRegex;

    public Optional<String> valueRegex() {
        return Optional.ofNullable(this.valueRegex);
    }

    private GetDomainRecordsPlainArgs() {}

    private GetDomainRecordsPlainArgs(GetDomainRecordsPlainArgs $) {
        this.domainName = $.domainName;
        this.hostRecordRegex = $.hostRecordRegex;
        this.ids = $.ids;
        this.isLocked = $.isLocked;
        this.line = $.line;
        this.outputFile = $.outputFile;
        this.status = $.status;
        this.type = $.type;
        this.valueRegex = $.valueRegex;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetDomainRecordsPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetDomainRecordsPlainArgs $;

        public Builder() {
            $ = new GetDomainRecordsPlainArgs();
        }

        public Builder(GetDomainRecordsPlainArgs defaults) {
            $ = new GetDomainRecordsPlainArgs(Objects.requireNonNull(defaults));
        }

        public Builder domainName(String domainName) {
            $.domainName = domainName;
            return this;
        }

        public Builder hostRecordRegex(@Nullable String hostRecordRegex) {
            $.hostRecordRegex = hostRecordRegex;
            return this;
        }

        public Builder ids(@Nullable List<String> ids) {
            $.ids = ids;
            return this;
        }

        public Builder ids(String... ids) {
            return ids(List.of(ids));
        }

        public Builder isLocked(@Nullable Boolean isLocked) {
            $.isLocked = isLocked;
            return this;
        }

        public Builder line(@Nullable String line) {
            $.line = line;
            return this;
        }

        public Builder outputFile(@Nullable String outputFile) {
            $.outputFile = outputFile;
            return this;
        }

        public Builder status(@Nullable String status) {
            $.status = status;
            return this;
        }

        public Builder type(@Nullable String type) {
            $.type = type;
            return this;
        }

        public Builder valueRegex(@Nullable String valueRegex) {
            $.valueRegex = valueRegex;
            return this;
        }

        public GetDomainRecordsPlainArgs build() {
            if ($.domainName == null) {
                throw new MissingRequiredPropertyException("GetDomainRecordsPlainArgs", "domainName");
            }
            return $;
        }
    }

}
