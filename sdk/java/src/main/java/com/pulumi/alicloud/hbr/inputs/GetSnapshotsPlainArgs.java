// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.hbr.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetSnapshotsPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetSnapshotsPlainArgs Empty = new GetSnapshotsPlainArgs();

    /**
     * The name of OSS bucket.
     * 
     */
    @Import(name="bucket")
    private @Nullable String bucket;

    /**
     * @return The name of OSS bucket.
     * 
     */
    public Optional<String> bucket() {
        return Optional.ofNullable(this.bucket);
    }

    /**
     * The time when the snapshot completed. UNIX time in seconds.
     * 
     */
    @Import(name="completeTime")
    private @Nullable String completeTime;

    /**
     * @return The time when the snapshot completed. UNIX time in seconds.
     * 
     */
    public Optional<String> completeTime() {
        return Optional.ofNullable(this.completeTime);
    }

    /**
     * Complete time filter operator. Optional values: `MATCH_TERM`, `GREATER_THAN`, `GREATER_THAN_OR_EQUAL`, `LESS_THAN`, `LESS_THAN_OR_EQUAL`, `BETWEEN`.
     * 
     */
    @Import(name="completeTimeChecker")
    private @Nullable String completeTimeChecker;

    /**
     * @return Complete time filter operator. Optional values: `MATCH_TERM`, `GREATER_THAN`, `GREATER_THAN_OR_EQUAL`, `LESS_THAN`, `LESS_THAN_OR_EQUAL`, `BETWEEN`.
     * 
     */
    public Optional<String> completeTimeChecker() {
        return Optional.ofNullable(this.completeTimeChecker);
    }

    /**
     * File System Creation Time of Nas. Unix Time Seconds.
     * 
     */
    @Import(name="createTime")
    private @Nullable String createTime;

    /**
     * @return File System Creation Time of Nas. Unix Time Seconds.
     * 
     */
    public Optional<String> createTime() {
        return Optional.ofNullable(this.createTime);
    }

    /**
     * The ID of NAS File system.
     * 
     */
    @Import(name="fileSystemId")
    private @Nullable String fileSystemId;

    /**
     * @return The ID of NAS File system.
     * 
     */
    public Optional<String> fileSystemId() {
        return Optional.ofNullable(this.fileSystemId);
    }

    /**
     * A list of Snapshot IDs.
     * 
     */
    @Import(name="ids")
    private @Nullable List<String> ids;

    /**
     * @return A list of Snapshot IDs.
     * 
     */
    public Optional<List<String>> ids() {
        return Optional.ofNullable(this.ids);
    }

    /**
     * The ID of ECS instance.
     * 
     */
    @Import(name="instanceId")
    private @Nullable String instanceId;

    /**
     * @return The ID of ECS instance.
     * 
     */
    public Optional<String> instanceId() {
        return Optional.ofNullable(this.instanceId);
    }

    @Import(name="limit")
    private @Nullable Integer limit;

    public Optional<Integer> limit() {
        return Optional.ofNullable(this.limit);
    }

    /**
     * File name where to save data source results (after running `pulumi preview`).
     * 
     */
    @Import(name="outputFile")
    private @Nullable String outputFile;

    /**
     * @return File name where to save data source results (after running `pulumi preview`).
     * 
     */
    public Optional<String> outputFile() {
        return Optional.ofNullable(this.outputFile);
    }

    @Import(name="query")
    private @Nullable String query;

    public Optional<String> query() {
        return Optional.ofNullable(this.query);
    }

    /**
     * Data source type, optional values: `ECS_FILE`, `OSS`, `NAS`.
     * 
     */
    @Import(name="sourceType", required=true)
    private String sourceType;

    /**
     * @return Data source type, optional values: `ECS_FILE`, `OSS`, `NAS`.
     * 
     */
    public String sourceType() {
        return this.sourceType;
    }

    /**
     * The status of snapshot execution. Possible values: `COMPLETE`, `PARTIAL_COMPLETE`, `FAILED`.
     * 
     */
    @Import(name="status")
    private @Nullable String status;

    /**
     * @return The status of snapshot execution. Possible values: `COMPLETE`, `PARTIAL_COMPLETE`, `FAILED`.
     * 
     */
    public Optional<String> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * The ID of Vault.
     * 
     */
    @Import(name="vaultId", required=true)
    private String vaultId;

    /**
     * @return The ID of Vault.
     * 
     */
    public String vaultId() {
        return this.vaultId;
    }

    private GetSnapshotsPlainArgs() {}

    private GetSnapshotsPlainArgs(GetSnapshotsPlainArgs $) {
        this.bucket = $.bucket;
        this.completeTime = $.completeTime;
        this.completeTimeChecker = $.completeTimeChecker;
        this.createTime = $.createTime;
        this.fileSystemId = $.fileSystemId;
        this.ids = $.ids;
        this.instanceId = $.instanceId;
        this.limit = $.limit;
        this.outputFile = $.outputFile;
        this.query = $.query;
        this.sourceType = $.sourceType;
        this.status = $.status;
        this.vaultId = $.vaultId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetSnapshotsPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetSnapshotsPlainArgs $;

        public Builder() {
            $ = new GetSnapshotsPlainArgs();
        }

        public Builder(GetSnapshotsPlainArgs defaults) {
            $ = new GetSnapshotsPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param bucket The name of OSS bucket.
         * 
         * @return builder
         * 
         */
        public Builder bucket(@Nullable String bucket) {
            $.bucket = bucket;
            return this;
        }

        /**
         * @param completeTime The time when the snapshot completed. UNIX time in seconds.
         * 
         * @return builder
         * 
         */
        public Builder completeTime(@Nullable String completeTime) {
            $.completeTime = completeTime;
            return this;
        }

        /**
         * @param completeTimeChecker Complete time filter operator. Optional values: `MATCH_TERM`, `GREATER_THAN`, `GREATER_THAN_OR_EQUAL`, `LESS_THAN`, `LESS_THAN_OR_EQUAL`, `BETWEEN`.
         * 
         * @return builder
         * 
         */
        public Builder completeTimeChecker(@Nullable String completeTimeChecker) {
            $.completeTimeChecker = completeTimeChecker;
            return this;
        }

        /**
         * @param createTime File System Creation Time of Nas. Unix Time Seconds.
         * 
         * @return builder
         * 
         */
        public Builder createTime(@Nullable String createTime) {
            $.createTime = createTime;
            return this;
        }

        /**
         * @param fileSystemId The ID of NAS File system.
         * 
         * @return builder
         * 
         */
        public Builder fileSystemId(@Nullable String fileSystemId) {
            $.fileSystemId = fileSystemId;
            return this;
        }

        /**
         * @param ids A list of Snapshot IDs.
         * 
         * @return builder
         * 
         */
        public Builder ids(@Nullable List<String> ids) {
            $.ids = ids;
            return this;
        }

        /**
         * @param ids A list of Snapshot IDs.
         * 
         * @return builder
         * 
         */
        public Builder ids(String... ids) {
            return ids(List.of(ids));
        }

        /**
         * @param instanceId The ID of ECS instance.
         * 
         * @return builder
         * 
         */
        public Builder instanceId(@Nullable String instanceId) {
            $.instanceId = instanceId;
            return this;
        }

        public Builder limit(@Nullable Integer limit) {
            $.limit = limit;
            return this;
        }

        /**
         * @param outputFile File name where to save data source results (after running `pulumi preview`).
         * 
         * @return builder
         * 
         */
        public Builder outputFile(@Nullable String outputFile) {
            $.outputFile = outputFile;
            return this;
        }

        public Builder query(@Nullable String query) {
            $.query = query;
            return this;
        }

        /**
         * @param sourceType Data source type, optional values: `ECS_FILE`, `OSS`, `NAS`.
         * 
         * @return builder
         * 
         */
        public Builder sourceType(String sourceType) {
            $.sourceType = sourceType;
            return this;
        }

        /**
         * @param status The status of snapshot execution. Possible values: `COMPLETE`, `PARTIAL_COMPLETE`, `FAILED`.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable String status) {
            $.status = status;
            return this;
        }

        /**
         * @param vaultId The ID of Vault.
         * 
         * @return builder
         * 
         */
        public Builder vaultId(String vaultId) {
            $.vaultId = vaultId;
            return this;
        }

        public GetSnapshotsPlainArgs build() {
            if ($.sourceType == null) {
                throw new MissingRequiredPropertyException("GetSnapshotsPlainArgs", "sourceType");
            }
            if ($.vaultId == null) {
                throw new MissingRequiredPropertyException("GetSnapshotsPlainArgs", "vaultId");
            }
            return $;
        }
    }

}
