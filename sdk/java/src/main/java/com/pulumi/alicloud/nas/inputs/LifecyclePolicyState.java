// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.nas.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class LifecyclePolicyState extends com.pulumi.resources.ResourceArgs {

    public static final LifecyclePolicyState Empty = new LifecyclePolicyState();

    /**
     * The ID of the file system.
     * 
     */
    @Import(name="fileSystemId")
    private @Nullable Output<String> fileSystemId;

    /**
     * @return The ID of the file system.
     * 
     */
    public Optional<Output<String>> fileSystemId() {
        return Optional.ofNullable(this.fileSystemId);
    }

    /**
     * The name of the lifecycle management policy.
     * 
     */
    @Import(name="lifecyclePolicyName")
    private @Nullable Output<String> lifecyclePolicyName;

    /**
     * @return The name of the lifecycle management policy.
     * 
     */
    public Optional<Output<String>> lifecyclePolicyName() {
        return Optional.ofNullable(this.lifecyclePolicyName);
    }

    /**
     * The rules in the lifecycle management policy. Valid values: `DEFAULT_ATIME_14`, `DEFAULT_ATIME_30`, `DEFAULT_ATIME_60`, `DEFAULT_ATIME_90`.
     * 
     */
    @Import(name="lifecycleRuleName")
    private @Nullable Output<String> lifecycleRuleName;

    /**
     * @return The rules in the lifecycle management policy. Valid values: `DEFAULT_ATIME_14`, `DEFAULT_ATIME_30`, `DEFAULT_ATIME_60`, `DEFAULT_ATIME_90`.
     * 
     */
    public Optional<Output<String>> lifecycleRuleName() {
        return Optional.ofNullable(this.lifecycleRuleName);
    }

    /**
     * The absolute path of the directory for which the lifecycle management policy is configured. Set a maximum of `10` path. The path value must be prefixed by a forward slash (/) and must be an existing path in the mount target.
     * 
     */
    @Import(name="paths")
    private @Nullable Output<List<String>> paths;

    /**
     * @return The absolute path of the directory for which the lifecycle management policy is configured. Set a maximum of `10` path. The path value must be prefixed by a forward slash (/) and must be an existing path in the mount target.
     * 
     */
    public Optional<Output<List<String>>> paths() {
        return Optional.ofNullable(this.paths);
    }

    /**
     * The storage type of the data that is dumped to the IA storage medium. Valid values: `InfrequentAccess`.
     * 
     */
    @Import(name="storageType")
    private @Nullable Output<String> storageType;

    /**
     * @return The storage type of the data that is dumped to the IA storage medium. Valid values: `InfrequentAccess`.
     * 
     */
    public Optional<Output<String>> storageType() {
        return Optional.ofNullable(this.storageType);
    }

    private LifecyclePolicyState() {}

    private LifecyclePolicyState(LifecyclePolicyState $) {
        this.fileSystemId = $.fileSystemId;
        this.lifecyclePolicyName = $.lifecyclePolicyName;
        this.lifecycleRuleName = $.lifecycleRuleName;
        this.paths = $.paths;
        this.storageType = $.storageType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LifecyclePolicyState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LifecyclePolicyState $;

        public Builder() {
            $ = new LifecyclePolicyState();
        }

        public Builder(LifecyclePolicyState defaults) {
            $ = new LifecyclePolicyState(Objects.requireNonNull(defaults));
        }

        /**
         * @param fileSystemId The ID of the file system.
         * 
         * @return builder
         * 
         */
        public Builder fileSystemId(@Nullable Output<String> fileSystemId) {
            $.fileSystemId = fileSystemId;
            return this;
        }

        /**
         * @param fileSystemId The ID of the file system.
         * 
         * @return builder
         * 
         */
        public Builder fileSystemId(String fileSystemId) {
            return fileSystemId(Output.of(fileSystemId));
        }

        /**
         * @param lifecyclePolicyName The name of the lifecycle management policy.
         * 
         * @return builder
         * 
         */
        public Builder lifecyclePolicyName(@Nullable Output<String> lifecyclePolicyName) {
            $.lifecyclePolicyName = lifecyclePolicyName;
            return this;
        }

        /**
         * @param lifecyclePolicyName The name of the lifecycle management policy.
         * 
         * @return builder
         * 
         */
        public Builder lifecyclePolicyName(String lifecyclePolicyName) {
            return lifecyclePolicyName(Output.of(lifecyclePolicyName));
        }

        /**
         * @param lifecycleRuleName The rules in the lifecycle management policy. Valid values: `DEFAULT_ATIME_14`, `DEFAULT_ATIME_30`, `DEFAULT_ATIME_60`, `DEFAULT_ATIME_90`.
         * 
         * @return builder
         * 
         */
        public Builder lifecycleRuleName(@Nullable Output<String> lifecycleRuleName) {
            $.lifecycleRuleName = lifecycleRuleName;
            return this;
        }

        /**
         * @param lifecycleRuleName The rules in the lifecycle management policy. Valid values: `DEFAULT_ATIME_14`, `DEFAULT_ATIME_30`, `DEFAULT_ATIME_60`, `DEFAULT_ATIME_90`.
         * 
         * @return builder
         * 
         */
        public Builder lifecycleRuleName(String lifecycleRuleName) {
            return lifecycleRuleName(Output.of(lifecycleRuleName));
        }

        /**
         * @param paths The absolute path of the directory for which the lifecycle management policy is configured. Set a maximum of `10` path. The path value must be prefixed by a forward slash (/) and must be an existing path in the mount target.
         * 
         * @return builder
         * 
         */
        public Builder paths(@Nullable Output<List<String>> paths) {
            $.paths = paths;
            return this;
        }

        /**
         * @param paths The absolute path of the directory for which the lifecycle management policy is configured. Set a maximum of `10` path. The path value must be prefixed by a forward slash (/) and must be an existing path in the mount target.
         * 
         * @return builder
         * 
         */
        public Builder paths(List<String> paths) {
            return paths(Output.of(paths));
        }

        /**
         * @param paths The absolute path of the directory for which the lifecycle management policy is configured. Set a maximum of `10` path. The path value must be prefixed by a forward slash (/) and must be an existing path in the mount target.
         * 
         * @return builder
         * 
         */
        public Builder paths(String... paths) {
            return paths(List.of(paths));
        }

        /**
         * @param storageType The storage type of the data that is dumped to the IA storage medium. Valid values: `InfrequentAccess`.
         * 
         * @return builder
         * 
         */
        public Builder storageType(@Nullable Output<String> storageType) {
            $.storageType = storageType;
            return this;
        }

        /**
         * @param storageType The storage type of the data that is dumped to the IA storage medium. Valid values: `InfrequentAccess`.
         * 
         * @return builder
         * 
         */
        public Builder storageType(String storageType) {
            return storageType(Output.of(storageType));
        }

        public LifecyclePolicyState build() {
            return $;
        }
    }

}
