// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.cen.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TrafficMarkingPolicyTrafficMatchRuleArgs extends com.pulumi.resources.ResourceArgs {

    public static final TrafficMarkingPolicyTrafficMatchRuleArgs Empty = new TrafficMarkingPolicyTrafficMatchRuleArgs();

    /**
     * IP Address Family.
     * 
     */
    @Import(name="addressFamily")
    private @Nullable Output<String> addressFamily;

    /**
     * @return IP Address Family.
     * 
     */
    public Optional<Output<String>> addressFamily() {
        return Optional.ofNullable(this.addressFamily);
    }

    /**
     * The destination network segment of the traffic message.  The flow classification matches the traffic of the destination IP address in the destination network segment. If the flow classification rule is not set, it means that the flow classification rule matches the traffic of any destination IP address.
     * 
     */
    @Import(name="dstCidr")
    private @Nullable Output<String> dstCidr;

    /**
     * @return The destination network segment of the traffic message.  The flow classification matches the traffic of the destination IP address in the destination network segment. If the flow classification rule is not set, it means that the flow classification rule matches the traffic of any destination IP address.
     * 
     */
    public Optional<Output<String>> dstCidr() {
        return Optional.ofNullable(this.dstCidr);
    }

    /**
     * The destination port of the traffic message. Valid values: **-1**, `1` to `65535`.  The flow classification rule matches the traffic of the destination port number in the destination port range. If the flow classification rule is not set, it means that the flow classification rule matches the traffic of any destination port number.  The current parameter supports a maximum of 2 port numbers. The input format is described as follows:
     * - If you only enter a port number, such as 1, the system defaults to match the traffic with the destination port of 1.
     * - If you enter 2 port numbers, such as 1 and 200, the system defaults to match the traffic of the destination port in the range of 1 to 200.
     * - If you enter 2 port numbers and one of them is - 1, the other port must also be - 1, indicating that it matches any destination port.
     * 
     */
    @Import(name="dstPortRanges")
    private @Nullable Output<List<Integer>> dstPortRanges;

    /**
     * @return The destination port of the traffic message. Valid values: **-1**, `1` to `65535`.  The flow classification rule matches the traffic of the destination port number in the destination port range. If the flow classification rule is not set, it means that the flow classification rule matches the traffic of any destination port number.  The current parameter supports a maximum of 2 port numbers. The input format is described as follows:
     * - If you only enter a port number, such as 1, the system defaults to match the traffic with the destination port of 1.
     * - If you enter 2 port numbers, such as 1 and 200, the system defaults to match the traffic of the destination port in the range of 1 to 200.
     * - If you enter 2 port numbers and one of them is - 1, the other port must also be - 1, indicating that it matches any destination port.
     * 
     */
    public Optional<Output<List<Integer>>> dstPortRanges() {
        return Optional.ofNullable(this.dstPortRanges);
    }

    /**
     * The DSCP value of the traffic message. Valid values: `0` to **63 * *.  The flow classification rule matches the flow with the specified DSCP value. If the flow classification rule is not set, it means that the flow classification rule matches the flow with any DSCP value.&gt; **NOTE:**  The current DSCP value refers to the DSCP value that the traffic message has carried before entering the cross-region connection.
     * 
     */
    @Import(name="matchDscp")
    private @Nullable Output<Integer> matchDscp;

    /**
     * @return The DSCP value of the traffic message. Valid values: `0` to **63 * *.  The flow classification rule matches the flow with the specified DSCP value. If the flow classification rule is not set, it means that the flow classification rule matches the flow with any DSCP value.&gt; **NOTE:**  The current DSCP value refers to the DSCP value that the traffic message has carried before entering the cross-region connection.
     * 
     */
    public Optional<Output<Integer>> matchDscp() {
        return Optional.ofNullable(this.matchDscp);
    }

    /**
     * The protocol type of the traffic message.  Stream classification rules can match traffic of multiple protocol types, such as `HTTP`, `HTTPS`, `TCP`, `UDP`, `SSH`, and **Telnet. For more protocol types, please log on to the [Cloud Enterprise Network Management Console](https://cen.console.aliyun.com/cen/list) to view.
     * 
     */
    @Import(name="protocol")
    private @Nullable Output<String> protocol;

    /**
     * @return The protocol type of the traffic message.  Stream classification rules can match traffic of multiple protocol types, such as `HTTP`, `HTTPS`, `TCP`, `UDP`, `SSH`, and **Telnet. For more protocol types, please log on to the [Cloud Enterprise Network Management Console](https://cen.console.aliyun.com/cen/list) to view.
     * 
     */
    public Optional<Output<String>> protocol() {
        return Optional.ofNullable(this.protocol);
    }

    /**
     * The source network segment of the traffic message.  The flow classification rule matches the traffic of the source IP address in the source network segment. If the flow classification rule is not set, it means that the flow classification rule matches the traffic of any source IP address.
     * 
     */
    @Import(name="srcCidr")
    private @Nullable Output<String> srcCidr;

    /**
     * @return The source network segment of the traffic message.  The flow classification rule matches the traffic of the source IP address in the source network segment. If the flow classification rule is not set, it means that the flow classification rule matches the traffic of any source IP address.
     * 
     */
    public Optional<Output<String>> srcCidr() {
        return Optional.ofNullable(this.srcCidr);
    }

    /**
     * The source port of the traffic message. Valid values: **-1**, `1` to `65535`.  The flow classification rule matches the traffic of the source port number in the source port range. If it is not set, it means that the flow classification rule matches the traffic of any source port number.  The current parameter supports entering up to two port numbers. The input format is described as follows:
     * - If you only enter a port number, such as 1, the system defaults to match the traffic with source port 1.
     * - If you enter two port numbers, such as 1 and 200, the system defaults to match the traffic with the source port in the range of 1 to 200.
     * - If you enter two port numbers and one of them is - 1, the other port must also be - 1, indicating that it matches any source port.
     * 
     */
    @Import(name="srcPortRanges")
    private @Nullable Output<List<Integer>> srcPortRanges;

    /**
     * @return The source port of the traffic message. Valid values: **-1**, `1` to `65535`.  The flow classification rule matches the traffic of the source port number in the source port range. If it is not set, it means that the flow classification rule matches the traffic of any source port number.  The current parameter supports entering up to two port numbers. The input format is described as follows:
     * - If you only enter a port number, such as 1, the system defaults to match the traffic with source port 1.
     * - If you enter two port numbers, such as 1 and 200, the system defaults to match the traffic with the source port in the range of 1 to 200.
     * - If you enter two port numbers and one of them is - 1, the other port must also be - 1, indicating that it matches any source port.
     * 
     */
    public Optional<Output<List<Integer>>> srcPortRanges() {
        return Optional.ofNullable(this.srcPortRanges);
    }

    /**
     * The description information of the stream classification rule.  The description must be 2 to 128 characters in length and can contain numbers, dashes (-), and underscores (_).
     * 
     */
    @Import(name="trafficMatchRuleDescription")
    private @Nullable Output<String> trafficMatchRuleDescription;

    /**
     * @return The description information of the stream classification rule.  The description must be 2 to 128 characters in length and can contain numbers, dashes (-), and underscores (_).
     * 
     */
    public Optional<Output<String>> trafficMatchRuleDescription() {
        return Optional.ofNullable(this.trafficMatchRuleDescription);
    }

    /**
     * The name of the stream classification rule.  The name must be 2 to 128 characters in length and can contain numbers, dashes (-), and underscores (_).
     * 
     */
    @Import(name="trafficMatchRuleName")
    private @Nullable Output<String> trafficMatchRuleName;

    /**
     * @return The name of the stream classification rule.  The name must be 2 to 128 characters in length and can contain numbers, dashes (-), and underscores (_).
     * 
     */
    public Optional<Output<String>> trafficMatchRuleName() {
        return Optional.ofNullable(this.trafficMatchRuleName);
    }

    private TrafficMarkingPolicyTrafficMatchRuleArgs() {}

    private TrafficMarkingPolicyTrafficMatchRuleArgs(TrafficMarkingPolicyTrafficMatchRuleArgs $) {
        this.addressFamily = $.addressFamily;
        this.dstCidr = $.dstCidr;
        this.dstPortRanges = $.dstPortRanges;
        this.matchDscp = $.matchDscp;
        this.protocol = $.protocol;
        this.srcCidr = $.srcCidr;
        this.srcPortRanges = $.srcPortRanges;
        this.trafficMatchRuleDescription = $.trafficMatchRuleDescription;
        this.trafficMatchRuleName = $.trafficMatchRuleName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TrafficMarkingPolicyTrafficMatchRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TrafficMarkingPolicyTrafficMatchRuleArgs $;

        public Builder() {
            $ = new TrafficMarkingPolicyTrafficMatchRuleArgs();
        }

        public Builder(TrafficMarkingPolicyTrafficMatchRuleArgs defaults) {
            $ = new TrafficMarkingPolicyTrafficMatchRuleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param addressFamily IP Address Family.
         * 
         * @return builder
         * 
         */
        public Builder addressFamily(@Nullable Output<String> addressFamily) {
            $.addressFamily = addressFamily;
            return this;
        }

        /**
         * @param addressFamily IP Address Family.
         * 
         * @return builder
         * 
         */
        public Builder addressFamily(String addressFamily) {
            return addressFamily(Output.of(addressFamily));
        }

        /**
         * @param dstCidr The destination network segment of the traffic message.  The flow classification matches the traffic of the destination IP address in the destination network segment. If the flow classification rule is not set, it means that the flow classification rule matches the traffic of any destination IP address.
         * 
         * @return builder
         * 
         */
        public Builder dstCidr(@Nullable Output<String> dstCidr) {
            $.dstCidr = dstCidr;
            return this;
        }

        /**
         * @param dstCidr The destination network segment of the traffic message.  The flow classification matches the traffic of the destination IP address in the destination network segment. If the flow classification rule is not set, it means that the flow classification rule matches the traffic of any destination IP address.
         * 
         * @return builder
         * 
         */
        public Builder dstCidr(String dstCidr) {
            return dstCidr(Output.of(dstCidr));
        }

        /**
         * @param dstPortRanges The destination port of the traffic message. Valid values: **-1**, `1` to `65535`.  The flow classification rule matches the traffic of the destination port number in the destination port range. If the flow classification rule is not set, it means that the flow classification rule matches the traffic of any destination port number.  The current parameter supports a maximum of 2 port numbers. The input format is described as follows:
         * - If you only enter a port number, such as 1, the system defaults to match the traffic with the destination port of 1.
         * - If you enter 2 port numbers, such as 1 and 200, the system defaults to match the traffic of the destination port in the range of 1 to 200.
         * - If you enter 2 port numbers and one of them is - 1, the other port must also be - 1, indicating that it matches any destination port.
         * 
         * @return builder
         * 
         */
        public Builder dstPortRanges(@Nullable Output<List<Integer>> dstPortRanges) {
            $.dstPortRanges = dstPortRanges;
            return this;
        }

        /**
         * @param dstPortRanges The destination port of the traffic message. Valid values: **-1**, `1` to `65535`.  The flow classification rule matches the traffic of the destination port number in the destination port range. If the flow classification rule is not set, it means that the flow classification rule matches the traffic of any destination port number.  The current parameter supports a maximum of 2 port numbers. The input format is described as follows:
         * - If you only enter a port number, such as 1, the system defaults to match the traffic with the destination port of 1.
         * - If you enter 2 port numbers, such as 1 and 200, the system defaults to match the traffic of the destination port in the range of 1 to 200.
         * - If you enter 2 port numbers and one of them is - 1, the other port must also be - 1, indicating that it matches any destination port.
         * 
         * @return builder
         * 
         */
        public Builder dstPortRanges(List<Integer> dstPortRanges) {
            return dstPortRanges(Output.of(dstPortRanges));
        }

        /**
         * @param dstPortRanges The destination port of the traffic message. Valid values: **-1**, `1` to `65535`.  The flow classification rule matches the traffic of the destination port number in the destination port range. If the flow classification rule is not set, it means that the flow classification rule matches the traffic of any destination port number.  The current parameter supports a maximum of 2 port numbers. The input format is described as follows:
         * - If you only enter a port number, such as 1, the system defaults to match the traffic with the destination port of 1.
         * - If you enter 2 port numbers, such as 1 and 200, the system defaults to match the traffic of the destination port in the range of 1 to 200.
         * - If you enter 2 port numbers and one of them is - 1, the other port must also be - 1, indicating that it matches any destination port.
         * 
         * @return builder
         * 
         */
        public Builder dstPortRanges(Integer... dstPortRanges) {
            return dstPortRanges(List.of(dstPortRanges));
        }

        /**
         * @param matchDscp The DSCP value of the traffic message. Valid values: `0` to **63 * *.  The flow classification rule matches the flow with the specified DSCP value. If the flow classification rule is not set, it means that the flow classification rule matches the flow with any DSCP value.&gt; **NOTE:**  The current DSCP value refers to the DSCP value that the traffic message has carried before entering the cross-region connection.
         * 
         * @return builder
         * 
         */
        public Builder matchDscp(@Nullable Output<Integer> matchDscp) {
            $.matchDscp = matchDscp;
            return this;
        }

        /**
         * @param matchDscp The DSCP value of the traffic message. Valid values: `0` to **63 * *.  The flow classification rule matches the flow with the specified DSCP value. If the flow classification rule is not set, it means that the flow classification rule matches the flow with any DSCP value.&gt; **NOTE:**  The current DSCP value refers to the DSCP value that the traffic message has carried before entering the cross-region connection.
         * 
         * @return builder
         * 
         */
        public Builder matchDscp(Integer matchDscp) {
            return matchDscp(Output.of(matchDscp));
        }

        /**
         * @param protocol The protocol type of the traffic message.  Stream classification rules can match traffic of multiple protocol types, such as `HTTP`, `HTTPS`, `TCP`, `UDP`, `SSH`, and **Telnet. For more protocol types, please log on to the [Cloud Enterprise Network Management Console](https://cen.console.aliyun.com/cen/list) to view.
         * 
         * @return builder
         * 
         */
        public Builder protocol(@Nullable Output<String> protocol) {
            $.protocol = protocol;
            return this;
        }

        /**
         * @param protocol The protocol type of the traffic message.  Stream classification rules can match traffic of multiple protocol types, such as `HTTP`, `HTTPS`, `TCP`, `UDP`, `SSH`, and **Telnet. For more protocol types, please log on to the [Cloud Enterprise Network Management Console](https://cen.console.aliyun.com/cen/list) to view.
         * 
         * @return builder
         * 
         */
        public Builder protocol(String protocol) {
            return protocol(Output.of(protocol));
        }

        /**
         * @param srcCidr The source network segment of the traffic message.  The flow classification rule matches the traffic of the source IP address in the source network segment. If the flow classification rule is not set, it means that the flow classification rule matches the traffic of any source IP address.
         * 
         * @return builder
         * 
         */
        public Builder srcCidr(@Nullable Output<String> srcCidr) {
            $.srcCidr = srcCidr;
            return this;
        }

        /**
         * @param srcCidr The source network segment of the traffic message.  The flow classification rule matches the traffic of the source IP address in the source network segment. If the flow classification rule is not set, it means that the flow classification rule matches the traffic of any source IP address.
         * 
         * @return builder
         * 
         */
        public Builder srcCidr(String srcCidr) {
            return srcCidr(Output.of(srcCidr));
        }

        /**
         * @param srcPortRanges The source port of the traffic message. Valid values: **-1**, `1` to `65535`.  The flow classification rule matches the traffic of the source port number in the source port range. If it is not set, it means that the flow classification rule matches the traffic of any source port number.  The current parameter supports entering up to two port numbers. The input format is described as follows:
         * - If you only enter a port number, such as 1, the system defaults to match the traffic with source port 1.
         * - If you enter two port numbers, such as 1 and 200, the system defaults to match the traffic with the source port in the range of 1 to 200.
         * - If you enter two port numbers and one of them is - 1, the other port must also be - 1, indicating that it matches any source port.
         * 
         * @return builder
         * 
         */
        public Builder srcPortRanges(@Nullable Output<List<Integer>> srcPortRanges) {
            $.srcPortRanges = srcPortRanges;
            return this;
        }

        /**
         * @param srcPortRanges The source port of the traffic message. Valid values: **-1**, `1` to `65535`.  The flow classification rule matches the traffic of the source port number in the source port range. If it is not set, it means that the flow classification rule matches the traffic of any source port number.  The current parameter supports entering up to two port numbers. The input format is described as follows:
         * - If you only enter a port number, such as 1, the system defaults to match the traffic with source port 1.
         * - If you enter two port numbers, such as 1 and 200, the system defaults to match the traffic with the source port in the range of 1 to 200.
         * - If you enter two port numbers and one of them is - 1, the other port must also be - 1, indicating that it matches any source port.
         * 
         * @return builder
         * 
         */
        public Builder srcPortRanges(List<Integer> srcPortRanges) {
            return srcPortRanges(Output.of(srcPortRanges));
        }

        /**
         * @param srcPortRanges The source port of the traffic message. Valid values: **-1**, `1` to `65535`.  The flow classification rule matches the traffic of the source port number in the source port range. If it is not set, it means that the flow classification rule matches the traffic of any source port number.  The current parameter supports entering up to two port numbers. The input format is described as follows:
         * - If you only enter a port number, such as 1, the system defaults to match the traffic with source port 1.
         * - If you enter two port numbers, such as 1 and 200, the system defaults to match the traffic with the source port in the range of 1 to 200.
         * - If you enter two port numbers and one of them is - 1, the other port must also be - 1, indicating that it matches any source port.
         * 
         * @return builder
         * 
         */
        public Builder srcPortRanges(Integer... srcPortRanges) {
            return srcPortRanges(List.of(srcPortRanges));
        }

        /**
         * @param trafficMatchRuleDescription The description information of the stream classification rule.  The description must be 2 to 128 characters in length and can contain numbers, dashes (-), and underscores (_).
         * 
         * @return builder
         * 
         */
        public Builder trafficMatchRuleDescription(@Nullable Output<String> trafficMatchRuleDescription) {
            $.trafficMatchRuleDescription = trafficMatchRuleDescription;
            return this;
        }

        /**
         * @param trafficMatchRuleDescription The description information of the stream classification rule.  The description must be 2 to 128 characters in length and can contain numbers, dashes (-), and underscores (_).
         * 
         * @return builder
         * 
         */
        public Builder trafficMatchRuleDescription(String trafficMatchRuleDescription) {
            return trafficMatchRuleDescription(Output.of(trafficMatchRuleDescription));
        }

        /**
         * @param trafficMatchRuleName The name of the stream classification rule.  The name must be 2 to 128 characters in length and can contain numbers, dashes (-), and underscores (_).
         * 
         * @return builder
         * 
         */
        public Builder trafficMatchRuleName(@Nullable Output<String> trafficMatchRuleName) {
            $.trafficMatchRuleName = trafficMatchRuleName;
            return this;
        }

        /**
         * @param trafficMatchRuleName The name of the stream classification rule.  The name must be 2 to 128 characters in length and can contain numbers, dashes (-), and underscores (_).
         * 
         * @return builder
         * 
         */
        public Builder trafficMatchRuleName(String trafficMatchRuleName) {
            return trafficMatchRuleName(Output.of(trafficMatchRuleName));
        }

        public TrafficMarkingPolicyTrafficMatchRuleArgs build() {
            return $;
        }
    }

}
