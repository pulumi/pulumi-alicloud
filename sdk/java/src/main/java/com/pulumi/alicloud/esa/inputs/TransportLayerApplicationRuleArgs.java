// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.esa.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TransportLayerApplicationRuleArgs extends com.pulumi.resources.ResourceArgs {

    public static final TransportLayerApplicationRuleArgs Empty = new TransportLayerApplicationRuleArgs();

    /**
     * Client IP pass-through protocol, supporting:
     * 
     */
    @Import(name="clientIpPassThroughMode", required=true)
    private Output<String> clientIpPassThroughMode;

    /**
     * @return Client IP pass-through protocol, supporting:
     * 
     */
    public Output<String> clientIpPassThroughMode() {
        return this.clientIpPassThroughMode;
    }

    /**
     * Comment information for the rule (optional).
     * 
     */
    @Import(name="comment")
    private @Nullable Output<String> comment;

    /**
     * @return Comment information for the rule (optional).
     * 
     */
    public Optional<Output<String>> comment() {
        return Optional.ofNullable(this.comment);
    }

    /**
     * Edge port. Supports:
     * - A single port, such as 80.
     * - Port range, such as 81-85, representing ports 81, 82, 83, 84, and 85.
     * - Combination of ports and port ranges, separated by commas, such as 80,81-85,90, representing ports 80, 81, 82, 83, 84, 85, and 90.
     * 
     * Edge ports within a single rule and between multiple rules must not overlap.
     * 
     */
    @Import(name="edgePort", required=true)
    private Output<String> edgePort;

    /**
     * @return Edge port. Supports:
     * - A single port, such as 80.
     * - Port range, such as 81-85, representing ports 81, 82, 83, 84, and 85.
     * - Combination of ports and port ranges, separated by commas, such as 80,81-85,90, representing ports 80, 81, 82, 83, 84, 85, and 90.
     * 
     * Edge ports within a single rule and between multiple rules must not overlap.
     * 
     */
    public Output<String> edgePort() {
        return this.edgePort;
    }

    /**
     * Forwarding rule protocol, with values:
     * - `TCP`: TCP protocol.
     * - `UDP`: UDP protocol.
     * 
     */
    @Import(name="protocol", required=true)
    private Output<String> protocol;

    /**
     * @return Forwarding rule protocol, with values:
     * - `TCP`: TCP protocol.
     * - `UDP`: UDP protocol.
     * 
     */
    public Output<String> protocol() {
        return this.protocol;
    }

    /**
     * Rule ID
     * 
     */
    @Import(name="ruleId")
    private @Nullable Output<Integer> ruleId;

    /**
     * @return Rule ID
     * 
     */
    public Optional<Output<Integer>> ruleId() {
        return Optional.ofNullable(this.ruleId);
    }

    /**
     * Specific value of the origin, which needs to match the origin type.
     * 
     */
    @Import(name="source", required=true)
    private Output<String> source;

    /**
     * @return Specific value of the origin, which needs to match the origin type.
     * 
     */
    public Output<String> source() {
        return this.source;
    }

    /**
     * Source Port
     * 
     */
    @Import(name="sourcePort", required=true)
    private Output<String> sourcePort;

    /**
     * @return Source Port
     * 
     */
    public Output<String> sourcePort() {
        return this.sourcePort;
    }

    /**
     * Origin type, supporting:
     * 
     */
    @Import(name="sourceType", required=true)
    private Output<String> sourceType;

    /**
     * @return Origin type, supporting:
     * 
     */
    public Output<String> sourceType() {
        return this.sourceType;
    }

    private TransportLayerApplicationRuleArgs() {}

    private TransportLayerApplicationRuleArgs(TransportLayerApplicationRuleArgs $) {
        this.clientIpPassThroughMode = $.clientIpPassThroughMode;
        this.comment = $.comment;
        this.edgePort = $.edgePort;
        this.protocol = $.protocol;
        this.ruleId = $.ruleId;
        this.source = $.source;
        this.sourcePort = $.sourcePort;
        this.sourceType = $.sourceType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TransportLayerApplicationRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TransportLayerApplicationRuleArgs $;

        public Builder() {
            $ = new TransportLayerApplicationRuleArgs();
        }

        public Builder(TransportLayerApplicationRuleArgs defaults) {
            $ = new TransportLayerApplicationRuleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param clientIpPassThroughMode Client IP pass-through protocol, supporting:
         * 
         * @return builder
         * 
         */
        public Builder clientIpPassThroughMode(Output<String> clientIpPassThroughMode) {
            $.clientIpPassThroughMode = clientIpPassThroughMode;
            return this;
        }

        /**
         * @param clientIpPassThroughMode Client IP pass-through protocol, supporting:
         * 
         * @return builder
         * 
         */
        public Builder clientIpPassThroughMode(String clientIpPassThroughMode) {
            return clientIpPassThroughMode(Output.of(clientIpPassThroughMode));
        }

        /**
         * @param comment Comment information for the rule (optional).
         * 
         * @return builder
         * 
         */
        public Builder comment(@Nullable Output<String> comment) {
            $.comment = comment;
            return this;
        }

        /**
         * @param comment Comment information for the rule (optional).
         * 
         * @return builder
         * 
         */
        public Builder comment(String comment) {
            return comment(Output.of(comment));
        }

        /**
         * @param edgePort Edge port. Supports:
         * - A single port, such as 80.
         * - Port range, such as 81-85, representing ports 81, 82, 83, 84, and 85.
         * - Combination of ports and port ranges, separated by commas, such as 80,81-85,90, representing ports 80, 81, 82, 83, 84, 85, and 90.
         * 
         * Edge ports within a single rule and between multiple rules must not overlap.
         * 
         * @return builder
         * 
         */
        public Builder edgePort(Output<String> edgePort) {
            $.edgePort = edgePort;
            return this;
        }

        /**
         * @param edgePort Edge port. Supports:
         * - A single port, such as 80.
         * - Port range, such as 81-85, representing ports 81, 82, 83, 84, and 85.
         * - Combination of ports and port ranges, separated by commas, such as 80,81-85,90, representing ports 80, 81, 82, 83, 84, 85, and 90.
         * 
         * Edge ports within a single rule and between multiple rules must not overlap.
         * 
         * @return builder
         * 
         */
        public Builder edgePort(String edgePort) {
            return edgePort(Output.of(edgePort));
        }

        /**
         * @param protocol Forwarding rule protocol, with values:
         * - `TCP`: TCP protocol.
         * - `UDP`: UDP protocol.
         * 
         * @return builder
         * 
         */
        public Builder protocol(Output<String> protocol) {
            $.protocol = protocol;
            return this;
        }

        /**
         * @param protocol Forwarding rule protocol, with values:
         * - `TCP`: TCP protocol.
         * - `UDP`: UDP protocol.
         * 
         * @return builder
         * 
         */
        public Builder protocol(String protocol) {
            return protocol(Output.of(protocol));
        }

        /**
         * @param ruleId Rule ID
         * 
         * @return builder
         * 
         */
        public Builder ruleId(@Nullable Output<Integer> ruleId) {
            $.ruleId = ruleId;
            return this;
        }

        /**
         * @param ruleId Rule ID
         * 
         * @return builder
         * 
         */
        public Builder ruleId(Integer ruleId) {
            return ruleId(Output.of(ruleId));
        }

        /**
         * @param source Specific value of the origin, which needs to match the origin type.
         * 
         * @return builder
         * 
         */
        public Builder source(Output<String> source) {
            $.source = source;
            return this;
        }

        /**
         * @param source Specific value of the origin, which needs to match the origin type.
         * 
         * @return builder
         * 
         */
        public Builder source(String source) {
            return source(Output.of(source));
        }

        /**
         * @param sourcePort Source Port
         * 
         * @return builder
         * 
         */
        public Builder sourcePort(Output<String> sourcePort) {
            $.sourcePort = sourcePort;
            return this;
        }

        /**
         * @param sourcePort Source Port
         * 
         * @return builder
         * 
         */
        public Builder sourcePort(String sourcePort) {
            return sourcePort(Output.of(sourcePort));
        }

        /**
         * @param sourceType Origin type, supporting:
         * 
         * @return builder
         * 
         */
        public Builder sourceType(Output<String> sourceType) {
            $.sourceType = sourceType;
            return this;
        }

        /**
         * @param sourceType Origin type, supporting:
         * 
         * @return builder
         * 
         */
        public Builder sourceType(String sourceType) {
            return sourceType(Output.of(sourceType));
        }

        public TransportLayerApplicationRuleArgs build() {
            if ($.clientIpPassThroughMode == null) {
                throw new MissingRequiredPropertyException("TransportLayerApplicationRuleArgs", "clientIpPassThroughMode");
            }
            if ($.edgePort == null) {
                throw new MissingRequiredPropertyException("TransportLayerApplicationRuleArgs", "edgePort");
            }
            if ($.protocol == null) {
                throw new MissingRequiredPropertyException("TransportLayerApplicationRuleArgs", "protocol");
            }
            if ($.source == null) {
                throw new MissingRequiredPropertyException("TransportLayerApplicationRuleArgs", "source");
            }
            if ($.sourcePort == null) {
                throw new MissingRequiredPropertyException("TransportLayerApplicationRuleArgs", "sourcePort");
            }
            if ($.sourceType == null) {
                throw new MissingRequiredPropertyException("TransportLayerApplicationRuleArgs", "sourceType");
            }
            return $;
        }
    }

}
