// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.wafv3;

import com.pulumi.alicloud.wafv3.inputs.DomainListenArgs;
import com.pulumi.alicloud.wafv3.inputs.DomainRedirectArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DomainArgs extends com.pulumi.resources.ResourceArgs {

    public static final DomainArgs Empty = new DomainArgs();

    /**
     * The access type of the WAF instance. Value: **share** (default): CNAME access.
     * 
     */
    @Import(name="accessType")
    private @Nullable Output<String> accessType;

    /**
     * @return The access type of the WAF instance. Value: **share** (default): CNAME access.
     * 
     */
    public Optional<Output<String>> accessType() {
        return Optional.ofNullable(this.accessType);
    }

    /**
     * The name of the domain name to query.
     * 
     */
    @Import(name="domain", required=true)
    private Output<String> domain;

    /**
     * @return The name of the domain name to query.
     * 
     */
    public Output<String> domain() {
        return this.domain;
    }

    /**
     * WAF instance ID
     * 
     */
    @Import(name="instanceId", required=true)
    private Output<String> instanceId;

    /**
     * @return WAF instance ID
     * 
     */
    public Output<String> instanceId() {
        return this.instanceId;
    }

    /**
     * Configure listening information. See `listen` below.
     * 
     */
    @Import(name="listen", required=true)
    private Output<DomainListenArgs> listen;

    /**
     * @return Configure listening information. See `listen` below.
     * 
     */
    public Output<DomainListenArgs> listen() {
        return this.listen;
    }

    /**
     * Configure forwarding information. See `redirect` below.
     * 
     */
    @Import(name="redirect", required=true)
    private Output<DomainRedirectArgs> redirect;

    /**
     * @return Configure forwarding information. See `redirect` below.
     * 
     */
    public Output<DomainRedirectArgs> redirect() {
        return this.redirect;
    }

    private DomainArgs() {}

    private DomainArgs(DomainArgs $) {
        this.accessType = $.accessType;
        this.domain = $.domain;
        this.instanceId = $.instanceId;
        this.listen = $.listen;
        this.redirect = $.redirect;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DomainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DomainArgs $;

        public Builder() {
            $ = new DomainArgs();
        }

        public Builder(DomainArgs defaults) {
            $ = new DomainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accessType The access type of the WAF instance. Value: **share** (default): CNAME access.
         * 
         * @return builder
         * 
         */
        public Builder accessType(@Nullable Output<String> accessType) {
            $.accessType = accessType;
            return this;
        }

        /**
         * @param accessType The access type of the WAF instance. Value: **share** (default): CNAME access.
         * 
         * @return builder
         * 
         */
        public Builder accessType(String accessType) {
            return accessType(Output.of(accessType));
        }

        /**
         * @param domain The name of the domain name to query.
         * 
         * @return builder
         * 
         */
        public Builder domain(Output<String> domain) {
            $.domain = domain;
            return this;
        }

        /**
         * @param domain The name of the domain name to query.
         * 
         * @return builder
         * 
         */
        public Builder domain(String domain) {
            return domain(Output.of(domain));
        }

        /**
         * @param instanceId WAF instance ID
         * 
         * @return builder
         * 
         */
        public Builder instanceId(Output<String> instanceId) {
            $.instanceId = instanceId;
            return this;
        }

        /**
         * @param instanceId WAF instance ID
         * 
         * @return builder
         * 
         */
        public Builder instanceId(String instanceId) {
            return instanceId(Output.of(instanceId));
        }

        /**
         * @param listen Configure listening information. See `listen` below.
         * 
         * @return builder
         * 
         */
        public Builder listen(Output<DomainListenArgs> listen) {
            $.listen = listen;
            return this;
        }

        /**
         * @param listen Configure listening information. See `listen` below.
         * 
         * @return builder
         * 
         */
        public Builder listen(DomainListenArgs listen) {
            return listen(Output.of(listen));
        }

        /**
         * @param redirect Configure forwarding information. See `redirect` below.
         * 
         * @return builder
         * 
         */
        public Builder redirect(Output<DomainRedirectArgs> redirect) {
            $.redirect = redirect;
            return this;
        }

        /**
         * @param redirect Configure forwarding information. See `redirect` below.
         * 
         * @return builder
         * 
         */
        public Builder redirect(DomainRedirectArgs redirect) {
            return redirect(Output.of(redirect));
        }

        public DomainArgs build() {
            if ($.domain == null) {
                throw new MissingRequiredPropertyException("DomainArgs", "domain");
            }
            if ($.instanceId == null) {
                throw new MissingRequiredPropertyException("DomainArgs", "instanceId");
            }
            if ($.listen == null) {
                throw new MissingRequiredPropertyException("DomainArgs", "listen");
            }
            if ($.redirect == null) {
                throw new MissingRequiredPropertyException("DomainArgs", "redirect");
            }
            return $;
        }
    }

}
