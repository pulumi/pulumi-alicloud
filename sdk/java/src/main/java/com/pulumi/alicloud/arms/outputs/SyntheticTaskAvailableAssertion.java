// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.arms.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class SyntheticTaskAvailableAssertion {
    /**
     * @return Expected value.
     * 
     */
    private String expect;
    /**
     * @return Condition: gt: greater than; gte: greater than or equal to; lt: less than; te: less than or equal to; eq: equal to; neq: not equal to; ctn: contains; nctn: does not contain; exist: exists; n_exist: does not exist; belong: belongs to; reg_match: regular matching.
     * 
     */
    private String operator;
    /**
     * @return Check the target. If the target is HttpResCode, HttpResBody, or httpressetime, you do not need to specify the target. If the target is HttpResHead, you need to specify the key in the header. If the target is HttpResHead, you need to use jsonPath.
     * 
     */
    private @Nullable String target;
    /**
     * @return Assertion type, including: httpresead, httpresead, HttpResBody, HttpResBodyJson, httpressetime, IcmpPackLoss (packet loss rate), IcmpPackMaxLatency (maximum packet delay ms), icmppackwebscreen, fmppackavglatency (average delay rendering), TraceRouteHops (number of hops), dnsarecname, websiteOnload (full load time), see the supplement below for specific use.
     * 
     */
    private String type;

    private SyntheticTaskAvailableAssertion() {}
    /**
     * @return Expected value.
     * 
     */
    public String expect() {
        return this.expect;
    }
    /**
     * @return Condition: gt: greater than; gte: greater than or equal to; lt: less than; te: less than or equal to; eq: equal to; neq: not equal to; ctn: contains; nctn: does not contain; exist: exists; n_exist: does not exist; belong: belongs to; reg_match: regular matching.
     * 
     */
    public String operator() {
        return this.operator;
    }
    /**
     * @return Check the target. If the target is HttpResCode, HttpResBody, or httpressetime, you do not need to specify the target. If the target is HttpResHead, you need to specify the key in the header. If the target is HttpResHead, you need to use jsonPath.
     * 
     */
    public Optional<String> target() {
        return Optional.ofNullable(this.target);
    }
    /**
     * @return Assertion type, including: httpresead, httpresead, HttpResBody, HttpResBodyJson, httpressetime, IcmpPackLoss (packet loss rate), IcmpPackMaxLatency (maximum packet delay ms), icmppackwebscreen, fmppackavglatency (average delay rendering), TraceRouteHops (number of hops), dnsarecname, websiteOnload (full load time), see the supplement below for specific use.
     * 
     */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SyntheticTaskAvailableAssertion defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String expect;
        private String operator;
        private @Nullable String target;
        private String type;
        public Builder() {}
        public Builder(SyntheticTaskAvailableAssertion defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.expect = defaults.expect;
    	      this.operator = defaults.operator;
    	      this.target = defaults.target;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder expect(String expect) {
            if (expect == null) {
              throw new MissingRequiredPropertyException("SyntheticTaskAvailableAssertion", "expect");
            }
            this.expect = expect;
            return this;
        }
        @CustomType.Setter
        public Builder operator(String operator) {
            if (operator == null) {
              throw new MissingRequiredPropertyException("SyntheticTaskAvailableAssertion", "operator");
            }
            this.operator = operator;
            return this;
        }
        @CustomType.Setter
        public Builder target(@Nullable String target) {

            this.target = target;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("SyntheticTaskAvailableAssertion", "type");
            }
            this.type = type;
            return this;
        }
        public SyntheticTaskAvailableAssertion build() {
            final var _resultValue = new SyntheticTaskAvailableAssertion();
            _resultValue.expect = expect;
            _resultValue.operator = operator;
            _resultValue.target = target;
            _resultValue.type = type;
            return _resultValue;
        }
    }
}
