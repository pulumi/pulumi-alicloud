// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.cfg.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;


public final class AggregatorAggregatorAccountArgs extends com.pulumi.resources.ResourceArgs {

    public static final AggregatorAggregatorAccountArgs Empty = new AggregatorAggregatorAccountArgs();

    /**
     * Aggregator account Uid.
     * 
     */
    @Import(name="accountId", required=true)
    private Output<String> accountId;

    /**
     * @return Aggregator account Uid.
     * 
     */
    public Output<String> accountId() {
        return this.accountId;
    }

    /**
     * Aggregator account name.
     * 
     */
    @Import(name="accountName", required=true)
    private Output<String> accountName;

    /**
     * @return Aggregator account name.
     * 
     */
    public Output<String> accountName() {
        return this.accountName;
    }

    /**
     * Aggregator account source type. Valid values: `ResourceDirectory`.
     * 
     */
    @Import(name="accountType", required=true)
    private Output<String> accountType;

    /**
     * @return Aggregator account source type. Valid values: `ResourceDirectory`.
     * 
     */
    public Output<String> accountType() {
        return this.accountType;
    }

    private AggregatorAggregatorAccountArgs() {}

    private AggregatorAggregatorAccountArgs(AggregatorAggregatorAccountArgs $) {
        this.accountId = $.accountId;
        this.accountName = $.accountName;
        this.accountType = $.accountType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AggregatorAggregatorAccountArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AggregatorAggregatorAccountArgs $;

        public Builder() {
            $ = new AggregatorAggregatorAccountArgs();
        }

        public Builder(AggregatorAggregatorAccountArgs defaults) {
            $ = new AggregatorAggregatorAccountArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accountId Aggregator account Uid.
         * 
         * @return builder
         * 
         */
        public Builder accountId(Output<String> accountId) {
            $.accountId = accountId;
            return this;
        }

        /**
         * @param accountId Aggregator account Uid.
         * 
         * @return builder
         * 
         */
        public Builder accountId(String accountId) {
            return accountId(Output.of(accountId));
        }

        /**
         * @param accountName Aggregator account name.
         * 
         * @return builder
         * 
         */
        public Builder accountName(Output<String> accountName) {
            $.accountName = accountName;
            return this;
        }

        /**
         * @param accountName Aggregator account name.
         * 
         * @return builder
         * 
         */
        public Builder accountName(String accountName) {
            return accountName(Output.of(accountName));
        }

        /**
         * @param accountType Aggregator account source type. Valid values: `ResourceDirectory`.
         * 
         * @return builder
         * 
         */
        public Builder accountType(Output<String> accountType) {
            $.accountType = accountType;
            return this;
        }

        /**
         * @param accountType Aggregator account source type. Valid values: `ResourceDirectory`.
         * 
         * @return builder
         * 
         */
        public Builder accountType(String accountType) {
            return accountType(Output.of(accountType));
        }

        public AggregatorAggregatorAccountArgs build() {
            if ($.accountId == null) {
                throw new MissingRequiredPropertyException("AggregatorAggregatorAccountArgs", "accountId");
            }
            if ($.accountName == null) {
                throw new MissingRequiredPropertyException("AggregatorAggregatorAccountArgs", "accountName");
            }
            if ($.accountType == null) {
                throw new MissingRequiredPropertyException("AggregatorAggregatorAccountArgs", "accountType");
            }
            return $;
        }
    }

}
