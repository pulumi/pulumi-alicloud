// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.mongodb.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AccountState extends com.pulumi.resources.ResourceArgs {

    public static final AccountState Empty = new AccountState();

    /**
     * Account comment information.
     * 
     * &gt; **NOTE:**  Call the ModifyAccountDescription interface to set the account description information before this parameter is returned.
     * 
     */
    @Import(name="accountDescription")
    private @Nullable Output<String> accountDescription;

    /**
     * @return Account comment information.
     * 
     * &gt; **NOTE:**  Call the ModifyAccountDescription interface to set the account description information before this parameter is returned.
     * 
     */
    public Optional<Output<String>> accountDescription() {
        return Optional.ofNullable(this.accountDescription);
    }

    /**
     * The new password.
     * 
     * - The password must contain at least three of the following character types: uppercase letters, lowercase letters, digits, and special characters. Special characters include `! # $ % ^ &amp; * ( ) _ + - =`
     * - The password must be 8 to 32 characters in length.
     * 
     */
    @Import(name="accountName")
    private @Nullable Output<String> accountName;

    /**
     * @return The new password.
     * 
     * - The password must contain at least three of the following character types: uppercase letters, lowercase letters, digits, and special characters. Special characters include `! # $ % ^ &amp; * ( ) _ + - =`
     * - The password must be 8 to 32 characters in length.
     * 
     */
    public Optional<Output<String>> accountName() {
        return Optional.ofNullable(this.accountName);
    }

    /**
     * The password of the database account. The password must be 8 to 32 characters in length. It can contain at least three types of the following characters: uppercase letters, lowercase letters, digits, and special characters. Special characters include ! # $ % ^ &amp; \* ( ) \_ + - =
     * 
     */
    @Import(name="accountPassword")
    private @Nullable Output<String> accountPassword;

    /**
     * @return The password of the database account. The password must be 8 to 32 characters in length. It can contain at least three types of the following characters: uppercase letters, lowercase letters, digits, and special characters. Special characters include ! # $ % ^ &amp; \* ( ) \_ + - =
     * 
     */
    public Optional<Output<String>> accountPassword() {
        return Optional.ofNullable(this.accountPassword);
    }

    /**
     * The role type of the instance. Value description
     * 
     * - When the instance type is sharded cluster, charactertype is required. The values are db and cs.
     * - When the instance type is a replica set, charactertype can be null or pass in normal.
     * 
     */
    @Import(name="characterType")
    private @Nullable Output<String> characterType;

    /**
     * @return The role type of the instance. Value description
     * 
     * - When the instance type is sharded cluster, charactertype is required. The values are db and cs.
     * - When the instance type is a replica set, charactertype can be null or pass in normal.
     * 
     */
    public Optional<Output<String>> characterType() {
        return Optional.ofNullable(this.characterType);
    }

    /**
     * The account whose password needs to be reset. Set the value to `root`.
     * 
     */
    @Import(name="instanceId")
    private @Nullable Output<String> instanceId;

    /**
     * @return The account whose password needs to be reset. Set the value to `root`.
     * 
     */
    public Optional<Output<String>> instanceId() {
        return Optional.ofNullable(this.instanceId);
    }

    /**
     * Account Status
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return Account Status
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    private AccountState() {}

    private AccountState(AccountState $) {
        this.accountDescription = $.accountDescription;
        this.accountName = $.accountName;
        this.accountPassword = $.accountPassword;
        this.characterType = $.characterType;
        this.instanceId = $.instanceId;
        this.status = $.status;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AccountState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AccountState $;

        public Builder() {
            $ = new AccountState();
        }

        public Builder(AccountState defaults) {
            $ = new AccountState(Objects.requireNonNull(defaults));
        }

        /**
         * @param accountDescription Account comment information.
         * 
         * &gt; **NOTE:**  Call the ModifyAccountDescription interface to set the account description information before this parameter is returned.
         * 
         * @return builder
         * 
         */
        public Builder accountDescription(@Nullable Output<String> accountDescription) {
            $.accountDescription = accountDescription;
            return this;
        }

        /**
         * @param accountDescription Account comment information.
         * 
         * &gt; **NOTE:**  Call the ModifyAccountDescription interface to set the account description information before this parameter is returned.
         * 
         * @return builder
         * 
         */
        public Builder accountDescription(String accountDescription) {
            return accountDescription(Output.of(accountDescription));
        }

        /**
         * @param accountName The new password.
         * 
         * - The password must contain at least three of the following character types: uppercase letters, lowercase letters, digits, and special characters. Special characters include `! # $ % ^ &amp; * ( ) _ + - =`
         * - The password must be 8 to 32 characters in length.
         * 
         * @return builder
         * 
         */
        public Builder accountName(@Nullable Output<String> accountName) {
            $.accountName = accountName;
            return this;
        }

        /**
         * @param accountName The new password.
         * 
         * - The password must contain at least three of the following character types: uppercase letters, lowercase letters, digits, and special characters. Special characters include `! # $ % ^ &amp; * ( ) _ + - =`
         * - The password must be 8 to 32 characters in length.
         * 
         * @return builder
         * 
         */
        public Builder accountName(String accountName) {
            return accountName(Output.of(accountName));
        }

        /**
         * @param accountPassword The password of the database account. The password must be 8 to 32 characters in length. It can contain at least three types of the following characters: uppercase letters, lowercase letters, digits, and special characters. Special characters include ! # $ % ^ &amp; \* ( ) \_ + - =
         * 
         * @return builder
         * 
         */
        public Builder accountPassword(@Nullable Output<String> accountPassword) {
            $.accountPassword = accountPassword;
            return this;
        }

        /**
         * @param accountPassword The password of the database account. The password must be 8 to 32 characters in length. It can contain at least three types of the following characters: uppercase letters, lowercase letters, digits, and special characters. Special characters include ! # $ % ^ &amp; \* ( ) \_ + - =
         * 
         * @return builder
         * 
         */
        public Builder accountPassword(String accountPassword) {
            return accountPassword(Output.of(accountPassword));
        }

        /**
         * @param characterType The role type of the instance. Value description
         * 
         * - When the instance type is sharded cluster, charactertype is required. The values are db and cs.
         * - When the instance type is a replica set, charactertype can be null or pass in normal.
         * 
         * @return builder
         * 
         */
        public Builder characterType(@Nullable Output<String> characterType) {
            $.characterType = characterType;
            return this;
        }

        /**
         * @param characterType The role type of the instance. Value description
         * 
         * - When the instance type is sharded cluster, charactertype is required. The values are db and cs.
         * - When the instance type is a replica set, charactertype can be null or pass in normal.
         * 
         * @return builder
         * 
         */
        public Builder characterType(String characterType) {
            return characterType(Output.of(characterType));
        }

        /**
         * @param instanceId The account whose password needs to be reset. Set the value to `root`.
         * 
         * @return builder
         * 
         */
        public Builder instanceId(@Nullable Output<String> instanceId) {
            $.instanceId = instanceId;
            return this;
        }

        /**
         * @param instanceId The account whose password needs to be reset. Set the value to `root`.
         * 
         * @return builder
         * 
         */
        public Builder instanceId(String instanceId) {
            return instanceId(Output.of(instanceId));
        }

        /**
         * @param status Account Status
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status Account Status
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        public AccountState build() {
            return $;
        }
    }

}
