// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.nas.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetAccessRulesArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetAccessRulesArgs Empty = new GetAccessRulesArgs();

    /**
     * Filter results by a specific AccessGroupName.
     * 
     */
    @Import(name="accessGroupName", required=true)
    private Output<String> accessGroupName;

    /**
     * @return Filter results by a specific AccessGroupName.
     * 
     */
    public Output<String> accessGroupName() {
        return this.accessGroupName;
    }

    /**
     * A list of rule IDs.
     * 
     */
    @Import(name="ids")
    private @Nullable Output<List<String>> ids;

    /**
     * @return A list of rule IDs.
     * 
     */
    public Optional<Output<List<String>>> ids() {
        return Optional.ofNullable(this.ids);
    }

    /**
     * File name where to save data source results (after running `pulumi preview`).
     * 
     */
    @Import(name="outputFile")
    private @Nullable Output<String> outputFile;

    /**
     * @return File name where to save data source results (after running `pulumi preview`).
     * 
     */
    public Optional<Output<String>> outputFile() {
        return Optional.ofNullable(this.outputFile);
    }

    /**
     * Filter results by a specific RWAccess.
     * 
     */
    @Import(name="rwAccess")
    private @Nullable Output<String> rwAccess;

    /**
     * @return Filter results by a specific RWAccess.
     * 
     */
    public Optional<Output<String>> rwAccess() {
        return Optional.ofNullable(this.rwAccess);
    }

    /**
     * Filter results by a specific SourceCidrIp.
     * 
     */
    @Import(name="sourceCidrIp")
    private @Nullable Output<String> sourceCidrIp;

    /**
     * @return Filter results by a specific SourceCidrIp.
     * 
     */
    public Optional<Output<String>> sourceCidrIp() {
        return Optional.ofNullable(this.sourceCidrIp);
    }

    /**
     * Filter results by a specific UserAccess.
     * 
     */
    @Import(name="userAccess")
    private @Nullable Output<String> userAccess;

    /**
     * @return Filter results by a specific UserAccess.
     * 
     */
    public Optional<Output<String>> userAccess() {
        return Optional.ofNullable(this.userAccess);
    }

    private GetAccessRulesArgs() {}

    private GetAccessRulesArgs(GetAccessRulesArgs $) {
        this.accessGroupName = $.accessGroupName;
        this.ids = $.ids;
        this.outputFile = $.outputFile;
        this.rwAccess = $.rwAccess;
        this.sourceCidrIp = $.sourceCidrIp;
        this.userAccess = $.userAccess;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetAccessRulesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetAccessRulesArgs $;

        public Builder() {
            $ = new GetAccessRulesArgs();
        }

        public Builder(GetAccessRulesArgs defaults) {
            $ = new GetAccessRulesArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accessGroupName Filter results by a specific AccessGroupName.
         * 
         * @return builder
         * 
         */
        public Builder accessGroupName(Output<String> accessGroupName) {
            $.accessGroupName = accessGroupName;
            return this;
        }

        /**
         * @param accessGroupName Filter results by a specific AccessGroupName.
         * 
         * @return builder
         * 
         */
        public Builder accessGroupName(String accessGroupName) {
            return accessGroupName(Output.of(accessGroupName));
        }

        /**
         * @param ids A list of rule IDs.
         * 
         * @return builder
         * 
         */
        public Builder ids(@Nullable Output<List<String>> ids) {
            $.ids = ids;
            return this;
        }

        /**
         * @param ids A list of rule IDs.
         * 
         * @return builder
         * 
         */
        public Builder ids(List<String> ids) {
            return ids(Output.of(ids));
        }

        /**
         * @param ids A list of rule IDs.
         * 
         * @return builder
         * 
         */
        public Builder ids(String... ids) {
            return ids(List.of(ids));
        }

        /**
         * @param outputFile File name where to save data source results (after running `pulumi preview`).
         * 
         * @return builder
         * 
         */
        public Builder outputFile(@Nullable Output<String> outputFile) {
            $.outputFile = outputFile;
            return this;
        }

        /**
         * @param outputFile File name where to save data source results (after running `pulumi preview`).
         * 
         * @return builder
         * 
         */
        public Builder outputFile(String outputFile) {
            return outputFile(Output.of(outputFile));
        }

        /**
         * @param rwAccess Filter results by a specific RWAccess.
         * 
         * @return builder
         * 
         */
        public Builder rwAccess(@Nullable Output<String> rwAccess) {
            $.rwAccess = rwAccess;
            return this;
        }

        /**
         * @param rwAccess Filter results by a specific RWAccess.
         * 
         * @return builder
         * 
         */
        public Builder rwAccess(String rwAccess) {
            return rwAccess(Output.of(rwAccess));
        }

        /**
         * @param sourceCidrIp Filter results by a specific SourceCidrIp.
         * 
         * @return builder
         * 
         */
        public Builder sourceCidrIp(@Nullable Output<String> sourceCidrIp) {
            $.sourceCidrIp = sourceCidrIp;
            return this;
        }

        /**
         * @param sourceCidrIp Filter results by a specific SourceCidrIp.
         * 
         * @return builder
         * 
         */
        public Builder sourceCidrIp(String sourceCidrIp) {
            return sourceCidrIp(Output.of(sourceCidrIp));
        }

        /**
         * @param userAccess Filter results by a specific UserAccess.
         * 
         * @return builder
         * 
         */
        public Builder userAccess(@Nullable Output<String> userAccess) {
            $.userAccess = userAccess;
            return this;
        }

        /**
         * @param userAccess Filter results by a specific UserAccess.
         * 
         * @return builder
         * 
         */
        public Builder userAccess(String userAccess) {
            return userAccess(Output.of(userAccess));
        }

        public GetAccessRulesArgs build() {
            if ($.accessGroupName == null) {
                throw new MissingRequiredPropertyException("GetAccessRulesArgs", "accessGroupName");
            }
            return $;
        }
    }

}
