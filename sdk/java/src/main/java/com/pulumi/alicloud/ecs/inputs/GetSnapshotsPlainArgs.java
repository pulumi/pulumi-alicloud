// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.ecs.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetSnapshotsPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetSnapshotsPlainArgs Empty = new GetSnapshotsPlainArgs();

    @Import(name="category")
    private @Nullable String category;

    public Optional<String> category() {
        return Optional.ofNullable(this.category);
    }

    @Import(name="dryRun")
    private @Nullable Boolean dryRun;

    public Optional<Boolean> dryRun() {
        return Optional.ofNullable(this.dryRun);
    }

    /**
     * Whether the snapshot is encrypted or not.
     * 
     */
    @Import(name="encrypted")
    private @Nullable Boolean encrypted;

    /**
     * @return Whether the snapshot is encrypted or not.
     * 
     */
    public Optional<Boolean> encrypted() {
        return Optional.ofNullable(this.encrypted);
    }

    /**
     * A list of snapshot IDs.
     * 
     */
    @Import(name="ids")
    private @Nullable List<String> ids;

    /**
     * @return A list of snapshot IDs.
     * 
     */
    public Optional<List<String>> ids() {
        return Optional.ofNullable(this.ids);
    }

    @Import(name="kmsKeyId")
    private @Nullable String kmsKeyId;

    public Optional<String> kmsKeyId() {
        return Optional.ofNullable(this.kmsKeyId);
    }

    @Import(name="nameRegex")
    private @Nullable String nameRegex;

    public Optional<String> nameRegex() {
        return Optional.ofNullable(this.nameRegex);
    }

    @Import(name="outputFile")
    private @Nullable String outputFile;

    public Optional<String> outputFile() {
        return Optional.ofNullable(this.outputFile);
    }

    @Import(name="resourceGroupId")
    private @Nullable String resourceGroupId;

    public Optional<String> resourceGroupId() {
        return Optional.ofNullable(this.resourceGroupId);
    }

    @Import(name="snapshotLinkId")
    private @Nullable String snapshotLinkId;

    public Optional<String> snapshotLinkId() {
        return Optional.ofNullable(this.snapshotLinkId);
    }

    @Import(name="snapshotName")
    private @Nullable String snapshotName;

    public Optional<String> snapshotName() {
        return Optional.ofNullable(this.snapshotName);
    }

    @Import(name="snapshotType")
    private @Nullable String snapshotType;

    public Optional<String> snapshotType() {
        return Optional.ofNullable(this.snapshotType);
    }

    /**
     * Source disk attribute. Value range: `System`,`Data`.
     * 
     */
    @Import(name="sourceDiskType")
    private @Nullable String sourceDiskType;

    /**
     * @return Source disk attribute. Value range: `System`,`Data`.
     * 
     */
    public Optional<String> sourceDiskType() {
        return Optional.ofNullable(this.sourceDiskType);
    }

    /**
     * The snapshot status. Value range: `progressing`, `accomplished` and `failed`.
     * 
     */
    @Import(name="status")
    private @Nullable String status;

    /**
     * @return The snapshot status. Value range: `progressing`, `accomplished` and `failed`.
     * 
     */
    public Optional<String> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * A map of tags assigned to the snapshot.
     * 
     */
    @Import(name="tags")
    private @Nullable Map<String,String> tags;

    /**
     * @return A map of tags assigned to the snapshot.
     * 
     */
    public Optional<Map<String,String>> tags() {
        return Optional.ofNullable(this.tags);
    }

    @Import(name="type")
    private @Nullable String type;

    public Optional<String> type() {
        return Optional.ofNullable(this.type);
    }

    /**
     * Whether the snapshots are used to create resources or not. Value range: `image`, `disk`, `image_disk` and `none`.
     * 
     */
    @Import(name="usage")
    private @Nullable String usage;

    /**
     * @return Whether the snapshots are used to create resources or not. Value range: `image`, `disk`, `image_disk` and `none`.
     * 
     */
    public Optional<String> usage() {
        return Optional.ofNullable(this.usage);
    }

    private GetSnapshotsPlainArgs() {}

    private GetSnapshotsPlainArgs(GetSnapshotsPlainArgs $) {
        this.category = $.category;
        this.dryRun = $.dryRun;
        this.encrypted = $.encrypted;
        this.ids = $.ids;
        this.kmsKeyId = $.kmsKeyId;
        this.nameRegex = $.nameRegex;
        this.outputFile = $.outputFile;
        this.resourceGroupId = $.resourceGroupId;
        this.snapshotLinkId = $.snapshotLinkId;
        this.snapshotName = $.snapshotName;
        this.snapshotType = $.snapshotType;
        this.sourceDiskType = $.sourceDiskType;
        this.status = $.status;
        this.tags = $.tags;
        this.type = $.type;
        this.usage = $.usage;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetSnapshotsPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetSnapshotsPlainArgs $;

        public Builder() {
            $ = new GetSnapshotsPlainArgs();
        }

        public Builder(GetSnapshotsPlainArgs defaults) {
            $ = new GetSnapshotsPlainArgs(Objects.requireNonNull(defaults));
        }

        public Builder category(@Nullable String category) {
            $.category = category;
            return this;
        }

        public Builder dryRun(@Nullable Boolean dryRun) {
            $.dryRun = dryRun;
            return this;
        }

        /**
         * @param encrypted Whether the snapshot is encrypted or not.
         * 
         * @return builder
         * 
         */
        public Builder encrypted(@Nullable Boolean encrypted) {
            $.encrypted = encrypted;
            return this;
        }

        /**
         * @param ids A list of snapshot IDs.
         * 
         * @return builder
         * 
         */
        public Builder ids(@Nullable List<String> ids) {
            $.ids = ids;
            return this;
        }

        /**
         * @param ids A list of snapshot IDs.
         * 
         * @return builder
         * 
         */
        public Builder ids(String... ids) {
            return ids(List.of(ids));
        }

        public Builder kmsKeyId(@Nullable String kmsKeyId) {
            $.kmsKeyId = kmsKeyId;
            return this;
        }

        public Builder nameRegex(@Nullable String nameRegex) {
            $.nameRegex = nameRegex;
            return this;
        }

        public Builder outputFile(@Nullable String outputFile) {
            $.outputFile = outputFile;
            return this;
        }

        public Builder resourceGroupId(@Nullable String resourceGroupId) {
            $.resourceGroupId = resourceGroupId;
            return this;
        }

        public Builder snapshotLinkId(@Nullable String snapshotLinkId) {
            $.snapshotLinkId = snapshotLinkId;
            return this;
        }

        public Builder snapshotName(@Nullable String snapshotName) {
            $.snapshotName = snapshotName;
            return this;
        }

        public Builder snapshotType(@Nullable String snapshotType) {
            $.snapshotType = snapshotType;
            return this;
        }

        /**
         * @param sourceDiskType Source disk attribute. Value range: `System`,`Data`.
         * 
         * @return builder
         * 
         */
        public Builder sourceDiskType(@Nullable String sourceDiskType) {
            $.sourceDiskType = sourceDiskType;
            return this;
        }

        /**
         * @param status The snapshot status. Value range: `progressing`, `accomplished` and `failed`.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable String status) {
            $.status = status;
            return this;
        }

        /**
         * @param tags A map of tags assigned to the snapshot.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Map<String,String> tags) {
            $.tags = tags;
            return this;
        }

        public Builder type(@Nullable String type) {
            $.type = type;
            return this;
        }

        /**
         * @param usage Whether the snapshots are used to create resources or not. Value range: `image`, `disk`, `image_disk` and `none`.
         * 
         * @return builder
         * 
         */
        public Builder usage(@Nullable String usage) {
            $.usage = usage;
            return this;
        }

        public GetSnapshotsPlainArgs build() {
            return $;
        }
    }

}
