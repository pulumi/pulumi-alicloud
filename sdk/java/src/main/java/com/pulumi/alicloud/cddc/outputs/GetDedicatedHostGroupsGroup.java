// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.cddc.outputs;

import com.pulumi.alicloud.cddc.outputs.GetDedicatedHostGroupsGroupDedicatedHostCountGroupByHostType;
import com.pulumi.alicloud.cddc.outputs.GetDedicatedHostGroupsGroupZoneIdList;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetDedicatedHostGroupsGroup {
    /**
     * @return The policy that is used to allocate resources in the dedicated cluster. Valid values:`Evenly`,`Intensively`
     * 
     */
    private String allocationPolicy;
    /**
     * @return The Bastion Instance id of the Dedicated Host Group.
     * 
     */
    private String bastionInstanceId;
    /**
     * @return The CPU overcommitment ratio of the dedicated cluster. If you set this parameter to 200, the CPU resources that can be allocated are twice as many as the CPU resources that are provided. This maximizes the CPU utilization. Valid values: 100 to 300. Default value: 200.
     * 
     */
    private Double cpuAllocateRation;
    /**
     * @return The CPU Allocated Amount of the Dedicated Host Group.
     * 
     */
    private Double cpuAllocatedAmount;
    /**
     * @return The CPU overcommitment ratio of the dedicated cluster.Valid values: 100 to 300. Default value: 200.
     * 
     */
    private Integer cpuAllocationRatio;
    /**
     * @return The Created Time of the Dedicated Host Group.
     * 
     */
    private String createTime;
    /**
     * @return The Dedicated Host Count Group by Host Type of the Dedicated Host Group.
     * 
     */
    private List<GetDedicatedHostGroupsGroupDedicatedHostCountGroupByHostType> dedicatedHostCountGroupByHostTypes;
    /**
     * @return The name of the dedicated cluster. The name must be 1 to 64 characters in length and can contain letters, digits, underscores (_), and hyphens (-). It must start with a letter.
     * 
     */
    private String dedicatedHostGroupDesc;
    /**
     * @return Dedicated Host Group ID.
     * 
     */
    private String dedicatedHostGroupId;
    /**
     * @return The Deployment Type of the Dedicated Host Group.
     * 
     */
    private String deployType;
    /**
     * @return The storage overcommitment ratio of the dedicated cluster.Valid values: 100 to 300. Default value: 200.
     * 
     */
    private Double diskAllocateRation;
    /**
     * @return The Disk Allocated Amount of the Dedicated Host Group.
     * 
     */
    private Double diskAllocatedAmount;
    /**
     * @return The Disk Allocation Ratio of the Dedicated Host Group.
     * 
     */
    private Integer diskAllocationRatio;
    /**
     * @return The DiskUsedAmount of the Dedicated Host Group.
     * 
     */
    private Double diskUsedAmount;
    /**
     * @return The DiskUtility of the Dedicated Host Group.
     * 
     */
    private Double diskUtility;
    /**
     * @return Database Engine Type.The database engine of the dedicated cluster. Valid values:`Redis`, `SQLServer`, `MySQL`, `PostgreSQL`, `MongoDB`
     * 
     */
    private String engine;
    /**
     * @return The Total Host Number  of the Dedicated Host Group.
     * 
     */
    private Integer hostNumber;
    /**
     * @return The policy based on which the system handles host failures. Valid values:`Auto`,`Manual`
     * 
     */
    private String hostReplacePolicy;
    /**
     * @return The ID of the Dedicated Host Group.
     * 
     */
    private String id;
    /**
     * @return The Total Instance Number of the Dedicated Host Group.
     * 
     */
    private Integer instanceNumber;
    /**
     * @return The maximum memory usage of each host in the dedicated cluster.Valid values: 0 to 90. Default value: 90.
     * 
     */
    private Double memAllocateRation;
    /**
     * @return The MemAllocatedAmount of the Dedicated Host Group.
     * 
     */
    private Double memAllocatedAmount;
    /**
     * @return The Memory Allocation Ratio of the Dedicated Host Group.
     * 
     */
    private Integer memAllocationRatio;
    /**
     * @return The MemUsedAmount of the Dedicated Host Group.
     * 
     */
    private Double memUsedAmount;
    /**
     * @return The Mem Utility of the Dedicated Host Group.
     * 
     */
    private Double memUtility;
    /**
     * @return The Text of the Dedicated Host Group.
     * 
     */
    private String text;
    /**
     * @return The virtual private cloud (VPC) ID of the dedicated cluster.
     * 
     */
    private String vpcId;
    /**
     * @return The ZoneIDList of the Dedicated Host Group.
     * 
     */
    private List<GetDedicatedHostGroupsGroupZoneIdList> zoneIdLists;

    private GetDedicatedHostGroupsGroup() {}
    /**
     * @return The policy that is used to allocate resources in the dedicated cluster. Valid values:`Evenly`,`Intensively`
     * 
     */
    public String allocationPolicy() {
        return this.allocationPolicy;
    }
    /**
     * @return The Bastion Instance id of the Dedicated Host Group.
     * 
     */
    public String bastionInstanceId() {
        return this.bastionInstanceId;
    }
    /**
     * @return The CPU overcommitment ratio of the dedicated cluster. If you set this parameter to 200, the CPU resources that can be allocated are twice as many as the CPU resources that are provided. This maximizes the CPU utilization. Valid values: 100 to 300. Default value: 200.
     * 
     */
    public Double cpuAllocateRation() {
        return this.cpuAllocateRation;
    }
    /**
     * @return The CPU Allocated Amount of the Dedicated Host Group.
     * 
     */
    public Double cpuAllocatedAmount() {
        return this.cpuAllocatedAmount;
    }
    /**
     * @return The CPU overcommitment ratio of the dedicated cluster.Valid values: 100 to 300. Default value: 200.
     * 
     */
    public Integer cpuAllocationRatio() {
        return this.cpuAllocationRatio;
    }
    /**
     * @return The Created Time of the Dedicated Host Group.
     * 
     */
    public String createTime() {
        return this.createTime;
    }
    /**
     * @return The Dedicated Host Count Group by Host Type of the Dedicated Host Group.
     * 
     */
    public List<GetDedicatedHostGroupsGroupDedicatedHostCountGroupByHostType> dedicatedHostCountGroupByHostTypes() {
        return this.dedicatedHostCountGroupByHostTypes;
    }
    /**
     * @return The name of the dedicated cluster. The name must be 1 to 64 characters in length and can contain letters, digits, underscores (_), and hyphens (-). It must start with a letter.
     * 
     */
    public String dedicatedHostGroupDesc() {
        return this.dedicatedHostGroupDesc;
    }
    /**
     * @return Dedicated Host Group ID.
     * 
     */
    public String dedicatedHostGroupId() {
        return this.dedicatedHostGroupId;
    }
    /**
     * @return The Deployment Type of the Dedicated Host Group.
     * 
     */
    public String deployType() {
        return this.deployType;
    }
    /**
     * @return The storage overcommitment ratio of the dedicated cluster.Valid values: 100 to 300. Default value: 200.
     * 
     */
    public Double diskAllocateRation() {
        return this.diskAllocateRation;
    }
    /**
     * @return The Disk Allocated Amount of the Dedicated Host Group.
     * 
     */
    public Double diskAllocatedAmount() {
        return this.diskAllocatedAmount;
    }
    /**
     * @return The Disk Allocation Ratio of the Dedicated Host Group.
     * 
     */
    public Integer diskAllocationRatio() {
        return this.diskAllocationRatio;
    }
    /**
     * @return The DiskUsedAmount of the Dedicated Host Group.
     * 
     */
    public Double diskUsedAmount() {
        return this.diskUsedAmount;
    }
    /**
     * @return The DiskUtility of the Dedicated Host Group.
     * 
     */
    public Double diskUtility() {
        return this.diskUtility;
    }
    /**
     * @return Database Engine Type.The database engine of the dedicated cluster. Valid values:`Redis`, `SQLServer`, `MySQL`, `PostgreSQL`, `MongoDB`
     * 
     */
    public String engine() {
        return this.engine;
    }
    /**
     * @return The Total Host Number  of the Dedicated Host Group.
     * 
     */
    public Integer hostNumber() {
        return this.hostNumber;
    }
    /**
     * @return The policy based on which the system handles host failures. Valid values:`Auto`,`Manual`
     * 
     */
    public String hostReplacePolicy() {
        return this.hostReplacePolicy;
    }
    /**
     * @return The ID of the Dedicated Host Group.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The Total Instance Number of the Dedicated Host Group.
     * 
     */
    public Integer instanceNumber() {
        return this.instanceNumber;
    }
    /**
     * @return The maximum memory usage of each host in the dedicated cluster.Valid values: 0 to 90. Default value: 90.
     * 
     */
    public Double memAllocateRation() {
        return this.memAllocateRation;
    }
    /**
     * @return The MemAllocatedAmount of the Dedicated Host Group.
     * 
     */
    public Double memAllocatedAmount() {
        return this.memAllocatedAmount;
    }
    /**
     * @return The Memory Allocation Ratio of the Dedicated Host Group.
     * 
     */
    public Integer memAllocationRatio() {
        return this.memAllocationRatio;
    }
    /**
     * @return The MemUsedAmount of the Dedicated Host Group.
     * 
     */
    public Double memUsedAmount() {
        return this.memUsedAmount;
    }
    /**
     * @return The Mem Utility of the Dedicated Host Group.
     * 
     */
    public Double memUtility() {
        return this.memUtility;
    }
    /**
     * @return The Text of the Dedicated Host Group.
     * 
     */
    public String text() {
        return this.text;
    }
    /**
     * @return The virtual private cloud (VPC) ID of the dedicated cluster.
     * 
     */
    public String vpcId() {
        return this.vpcId;
    }
    /**
     * @return The ZoneIDList of the Dedicated Host Group.
     * 
     */
    public List<GetDedicatedHostGroupsGroupZoneIdList> zoneIdLists() {
        return this.zoneIdLists;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDedicatedHostGroupsGroup defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String allocationPolicy;
        private String bastionInstanceId;
        private Double cpuAllocateRation;
        private Double cpuAllocatedAmount;
        private Integer cpuAllocationRatio;
        private String createTime;
        private List<GetDedicatedHostGroupsGroupDedicatedHostCountGroupByHostType> dedicatedHostCountGroupByHostTypes;
        private String dedicatedHostGroupDesc;
        private String dedicatedHostGroupId;
        private String deployType;
        private Double diskAllocateRation;
        private Double diskAllocatedAmount;
        private Integer diskAllocationRatio;
        private Double diskUsedAmount;
        private Double diskUtility;
        private String engine;
        private Integer hostNumber;
        private String hostReplacePolicy;
        private String id;
        private Integer instanceNumber;
        private Double memAllocateRation;
        private Double memAllocatedAmount;
        private Integer memAllocationRatio;
        private Double memUsedAmount;
        private Double memUtility;
        private String text;
        private String vpcId;
        private List<GetDedicatedHostGroupsGroupZoneIdList> zoneIdLists;
        public Builder() {}
        public Builder(GetDedicatedHostGroupsGroup defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allocationPolicy = defaults.allocationPolicy;
    	      this.bastionInstanceId = defaults.bastionInstanceId;
    	      this.cpuAllocateRation = defaults.cpuAllocateRation;
    	      this.cpuAllocatedAmount = defaults.cpuAllocatedAmount;
    	      this.cpuAllocationRatio = defaults.cpuAllocationRatio;
    	      this.createTime = defaults.createTime;
    	      this.dedicatedHostCountGroupByHostTypes = defaults.dedicatedHostCountGroupByHostTypes;
    	      this.dedicatedHostGroupDesc = defaults.dedicatedHostGroupDesc;
    	      this.dedicatedHostGroupId = defaults.dedicatedHostGroupId;
    	      this.deployType = defaults.deployType;
    	      this.diskAllocateRation = defaults.diskAllocateRation;
    	      this.diskAllocatedAmount = defaults.diskAllocatedAmount;
    	      this.diskAllocationRatio = defaults.diskAllocationRatio;
    	      this.diskUsedAmount = defaults.diskUsedAmount;
    	      this.diskUtility = defaults.diskUtility;
    	      this.engine = defaults.engine;
    	      this.hostNumber = defaults.hostNumber;
    	      this.hostReplacePolicy = defaults.hostReplacePolicy;
    	      this.id = defaults.id;
    	      this.instanceNumber = defaults.instanceNumber;
    	      this.memAllocateRation = defaults.memAllocateRation;
    	      this.memAllocatedAmount = defaults.memAllocatedAmount;
    	      this.memAllocationRatio = defaults.memAllocationRatio;
    	      this.memUsedAmount = defaults.memUsedAmount;
    	      this.memUtility = defaults.memUtility;
    	      this.text = defaults.text;
    	      this.vpcId = defaults.vpcId;
    	      this.zoneIdLists = defaults.zoneIdLists;
        }

        @CustomType.Setter
        public Builder allocationPolicy(String allocationPolicy) {
            if (allocationPolicy == null) {
              throw new MissingRequiredPropertyException("GetDedicatedHostGroupsGroup", "allocationPolicy");
            }
            this.allocationPolicy = allocationPolicy;
            return this;
        }
        @CustomType.Setter
        public Builder bastionInstanceId(String bastionInstanceId) {
            if (bastionInstanceId == null) {
              throw new MissingRequiredPropertyException("GetDedicatedHostGroupsGroup", "bastionInstanceId");
            }
            this.bastionInstanceId = bastionInstanceId;
            return this;
        }
        @CustomType.Setter
        public Builder cpuAllocateRation(Double cpuAllocateRation) {
            if (cpuAllocateRation == null) {
              throw new MissingRequiredPropertyException("GetDedicatedHostGroupsGroup", "cpuAllocateRation");
            }
            this.cpuAllocateRation = cpuAllocateRation;
            return this;
        }
        @CustomType.Setter
        public Builder cpuAllocatedAmount(Double cpuAllocatedAmount) {
            if (cpuAllocatedAmount == null) {
              throw new MissingRequiredPropertyException("GetDedicatedHostGroupsGroup", "cpuAllocatedAmount");
            }
            this.cpuAllocatedAmount = cpuAllocatedAmount;
            return this;
        }
        @CustomType.Setter
        public Builder cpuAllocationRatio(Integer cpuAllocationRatio) {
            if (cpuAllocationRatio == null) {
              throw new MissingRequiredPropertyException("GetDedicatedHostGroupsGroup", "cpuAllocationRatio");
            }
            this.cpuAllocationRatio = cpuAllocationRatio;
            return this;
        }
        @CustomType.Setter
        public Builder createTime(String createTime) {
            if (createTime == null) {
              throw new MissingRequiredPropertyException("GetDedicatedHostGroupsGroup", "createTime");
            }
            this.createTime = createTime;
            return this;
        }
        @CustomType.Setter
        public Builder dedicatedHostCountGroupByHostTypes(List<GetDedicatedHostGroupsGroupDedicatedHostCountGroupByHostType> dedicatedHostCountGroupByHostTypes) {
            if (dedicatedHostCountGroupByHostTypes == null) {
              throw new MissingRequiredPropertyException("GetDedicatedHostGroupsGroup", "dedicatedHostCountGroupByHostTypes");
            }
            this.dedicatedHostCountGroupByHostTypes = dedicatedHostCountGroupByHostTypes;
            return this;
        }
        public Builder dedicatedHostCountGroupByHostTypes(GetDedicatedHostGroupsGroupDedicatedHostCountGroupByHostType... dedicatedHostCountGroupByHostTypes) {
            return dedicatedHostCountGroupByHostTypes(List.of(dedicatedHostCountGroupByHostTypes));
        }
        @CustomType.Setter
        public Builder dedicatedHostGroupDesc(String dedicatedHostGroupDesc) {
            if (dedicatedHostGroupDesc == null) {
              throw new MissingRequiredPropertyException("GetDedicatedHostGroupsGroup", "dedicatedHostGroupDesc");
            }
            this.dedicatedHostGroupDesc = dedicatedHostGroupDesc;
            return this;
        }
        @CustomType.Setter
        public Builder dedicatedHostGroupId(String dedicatedHostGroupId) {
            if (dedicatedHostGroupId == null) {
              throw new MissingRequiredPropertyException("GetDedicatedHostGroupsGroup", "dedicatedHostGroupId");
            }
            this.dedicatedHostGroupId = dedicatedHostGroupId;
            return this;
        }
        @CustomType.Setter
        public Builder deployType(String deployType) {
            if (deployType == null) {
              throw new MissingRequiredPropertyException("GetDedicatedHostGroupsGroup", "deployType");
            }
            this.deployType = deployType;
            return this;
        }
        @CustomType.Setter
        public Builder diskAllocateRation(Double diskAllocateRation) {
            if (diskAllocateRation == null) {
              throw new MissingRequiredPropertyException("GetDedicatedHostGroupsGroup", "diskAllocateRation");
            }
            this.diskAllocateRation = diskAllocateRation;
            return this;
        }
        @CustomType.Setter
        public Builder diskAllocatedAmount(Double diskAllocatedAmount) {
            if (diskAllocatedAmount == null) {
              throw new MissingRequiredPropertyException("GetDedicatedHostGroupsGroup", "diskAllocatedAmount");
            }
            this.diskAllocatedAmount = diskAllocatedAmount;
            return this;
        }
        @CustomType.Setter
        public Builder diskAllocationRatio(Integer diskAllocationRatio) {
            if (diskAllocationRatio == null) {
              throw new MissingRequiredPropertyException("GetDedicatedHostGroupsGroup", "diskAllocationRatio");
            }
            this.diskAllocationRatio = diskAllocationRatio;
            return this;
        }
        @CustomType.Setter
        public Builder diskUsedAmount(Double diskUsedAmount) {
            if (diskUsedAmount == null) {
              throw new MissingRequiredPropertyException("GetDedicatedHostGroupsGroup", "diskUsedAmount");
            }
            this.diskUsedAmount = diskUsedAmount;
            return this;
        }
        @CustomType.Setter
        public Builder diskUtility(Double diskUtility) {
            if (diskUtility == null) {
              throw new MissingRequiredPropertyException("GetDedicatedHostGroupsGroup", "diskUtility");
            }
            this.diskUtility = diskUtility;
            return this;
        }
        @CustomType.Setter
        public Builder engine(String engine) {
            if (engine == null) {
              throw new MissingRequiredPropertyException("GetDedicatedHostGroupsGroup", "engine");
            }
            this.engine = engine;
            return this;
        }
        @CustomType.Setter
        public Builder hostNumber(Integer hostNumber) {
            if (hostNumber == null) {
              throw new MissingRequiredPropertyException("GetDedicatedHostGroupsGroup", "hostNumber");
            }
            this.hostNumber = hostNumber;
            return this;
        }
        @CustomType.Setter
        public Builder hostReplacePolicy(String hostReplacePolicy) {
            if (hostReplacePolicy == null) {
              throw new MissingRequiredPropertyException("GetDedicatedHostGroupsGroup", "hostReplacePolicy");
            }
            this.hostReplacePolicy = hostReplacePolicy;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetDedicatedHostGroupsGroup", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder instanceNumber(Integer instanceNumber) {
            if (instanceNumber == null) {
              throw new MissingRequiredPropertyException("GetDedicatedHostGroupsGroup", "instanceNumber");
            }
            this.instanceNumber = instanceNumber;
            return this;
        }
        @CustomType.Setter
        public Builder memAllocateRation(Double memAllocateRation) {
            if (memAllocateRation == null) {
              throw new MissingRequiredPropertyException("GetDedicatedHostGroupsGroup", "memAllocateRation");
            }
            this.memAllocateRation = memAllocateRation;
            return this;
        }
        @CustomType.Setter
        public Builder memAllocatedAmount(Double memAllocatedAmount) {
            if (memAllocatedAmount == null) {
              throw new MissingRequiredPropertyException("GetDedicatedHostGroupsGroup", "memAllocatedAmount");
            }
            this.memAllocatedAmount = memAllocatedAmount;
            return this;
        }
        @CustomType.Setter
        public Builder memAllocationRatio(Integer memAllocationRatio) {
            if (memAllocationRatio == null) {
              throw new MissingRequiredPropertyException("GetDedicatedHostGroupsGroup", "memAllocationRatio");
            }
            this.memAllocationRatio = memAllocationRatio;
            return this;
        }
        @CustomType.Setter
        public Builder memUsedAmount(Double memUsedAmount) {
            if (memUsedAmount == null) {
              throw new MissingRequiredPropertyException("GetDedicatedHostGroupsGroup", "memUsedAmount");
            }
            this.memUsedAmount = memUsedAmount;
            return this;
        }
        @CustomType.Setter
        public Builder memUtility(Double memUtility) {
            if (memUtility == null) {
              throw new MissingRequiredPropertyException("GetDedicatedHostGroupsGroup", "memUtility");
            }
            this.memUtility = memUtility;
            return this;
        }
        @CustomType.Setter
        public Builder text(String text) {
            if (text == null) {
              throw new MissingRequiredPropertyException("GetDedicatedHostGroupsGroup", "text");
            }
            this.text = text;
            return this;
        }
        @CustomType.Setter
        public Builder vpcId(String vpcId) {
            if (vpcId == null) {
              throw new MissingRequiredPropertyException("GetDedicatedHostGroupsGroup", "vpcId");
            }
            this.vpcId = vpcId;
            return this;
        }
        @CustomType.Setter
        public Builder zoneIdLists(List<GetDedicatedHostGroupsGroupZoneIdList> zoneIdLists) {
            if (zoneIdLists == null) {
              throw new MissingRequiredPropertyException("GetDedicatedHostGroupsGroup", "zoneIdLists");
            }
            this.zoneIdLists = zoneIdLists;
            return this;
        }
        public Builder zoneIdLists(GetDedicatedHostGroupsGroupZoneIdList... zoneIdLists) {
            return zoneIdLists(List.of(zoneIdLists));
        }
        public GetDedicatedHostGroupsGroup build() {
            final var _resultValue = new GetDedicatedHostGroupsGroup();
            _resultValue.allocationPolicy = allocationPolicy;
            _resultValue.bastionInstanceId = bastionInstanceId;
            _resultValue.cpuAllocateRation = cpuAllocateRation;
            _resultValue.cpuAllocatedAmount = cpuAllocatedAmount;
            _resultValue.cpuAllocationRatio = cpuAllocationRatio;
            _resultValue.createTime = createTime;
            _resultValue.dedicatedHostCountGroupByHostTypes = dedicatedHostCountGroupByHostTypes;
            _resultValue.dedicatedHostGroupDesc = dedicatedHostGroupDesc;
            _resultValue.dedicatedHostGroupId = dedicatedHostGroupId;
            _resultValue.deployType = deployType;
            _resultValue.diskAllocateRation = diskAllocateRation;
            _resultValue.diskAllocatedAmount = diskAllocatedAmount;
            _resultValue.diskAllocationRatio = diskAllocationRatio;
            _resultValue.diskUsedAmount = diskUsedAmount;
            _resultValue.diskUtility = diskUtility;
            _resultValue.engine = engine;
            _resultValue.hostNumber = hostNumber;
            _resultValue.hostReplacePolicy = hostReplacePolicy;
            _resultValue.id = id;
            _resultValue.instanceNumber = instanceNumber;
            _resultValue.memAllocateRation = memAllocateRation;
            _resultValue.memAllocatedAmount = memAllocatedAmount;
            _resultValue.memAllocationRatio = memAllocationRatio;
            _resultValue.memUsedAmount = memUsedAmount;
            _resultValue.memUtility = memUtility;
            _resultValue.text = text;
            _resultValue.vpcId = vpcId;
            _resultValue.zoneIdLists = zoneIdLists;
            return _resultValue;
        }
    }
}
