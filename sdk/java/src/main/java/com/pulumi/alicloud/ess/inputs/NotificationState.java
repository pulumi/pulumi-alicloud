// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.ess.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class NotificationState extends com.pulumi.resources.ResourceArgs {

    public static final NotificationState Empty = new NotificationState();

    /**
     * The Alibaba Cloud Resource Name (ARN) of the notification object, The value must be in `acs:ess:{region}:{account-id}:{resource-relative-id}` format.
     * * region: the region ID of the scaling group. For more information, see `Regions and zones`
     * * account-id: the ID of your account.
     * * resource-relative-id: the notification method. Valid values : `cloudmonitor`, MNS queue: `queue/{queuename}`, Replace the queuename with the specific MNS queue name, MNS topic: `topic/{topicname}`, Replace the topicname with the specific MNS topic name.
     * 
     */
    @Import(name="notificationArn")
    private @Nullable Output<String> notificationArn;

    /**
     * @return The Alibaba Cloud Resource Name (ARN) of the notification object, The value must be in `acs:ess:{region}:{account-id}:{resource-relative-id}` format.
     * * region: the region ID of the scaling group. For more information, see `Regions and zones`
     * * account-id: the ID of your account.
     * * resource-relative-id: the notification method. Valid values : `cloudmonitor`, MNS queue: `queue/{queuename}`, Replace the queuename with the specific MNS queue name, MNS topic: `topic/{topicname}`, Replace the topicname with the specific MNS topic name.
     * 
     */
    public Optional<Output<String>> notificationArn() {
        return Optional.ofNullable(this.notificationArn);
    }

    /**
     * The notification types of Auto Scaling events and resource changes. Supported notification types: &#39;AUTOSCALING:SCALE_OUT_SUCCESS&#39;, &#39;AUTOSCALING:SCALE_IN_SUCCESS&#39;, &#39;AUTOSCALING:SCALE_OUT_ERROR&#39;, &#39;AUTOSCALING:SCALE_IN_ERROR&#39;, &#39;AUTOSCALING:SCALE_REJECT&#39;, &#39;AUTOSCALING:SCALE_OUT_START&#39;, &#39;AUTOSCALING:SCALE_IN_START&#39;, &#39;AUTOSCALING:SCHEDULE_TASK_EXPIRING&#39;.
     * 
     */
    @Import(name="notificationTypes")
    private @Nullable Output<List<String>> notificationTypes;

    /**
     * @return The notification types of Auto Scaling events and resource changes. Supported notification types: &#39;AUTOSCALING:SCALE_OUT_SUCCESS&#39;, &#39;AUTOSCALING:SCALE_IN_SUCCESS&#39;, &#39;AUTOSCALING:SCALE_OUT_ERROR&#39;, &#39;AUTOSCALING:SCALE_IN_ERROR&#39;, &#39;AUTOSCALING:SCALE_REJECT&#39;, &#39;AUTOSCALING:SCALE_OUT_START&#39;, &#39;AUTOSCALING:SCALE_IN_START&#39;, &#39;AUTOSCALING:SCHEDULE_TASK_EXPIRING&#39;.
     * 
     */
    public Optional<Output<List<String>>> notificationTypes() {
        return Optional.ofNullable(this.notificationTypes);
    }

    /**
     * The ID of the Auto Scaling group.
     * 
     */
    @Import(name="scalingGroupId")
    private @Nullable Output<String> scalingGroupId;

    /**
     * @return The ID of the Auto Scaling group.
     * 
     */
    public Optional<Output<String>> scalingGroupId() {
        return Optional.ofNullable(this.scalingGroupId);
    }

    /**
     * The time zone of the notification. Specify the value in UTC. For example, a value of UTC+8 specifies that the time is 8 hours ahead of Coordinated Universal Time, and a value of UTC-7 specifies that the time is 7 hours behind Coordinated Universal Time.
     * 
     */
    @Import(name="timeZone")
    private @Nullable Output<String> timeZone;

    /**
     * @return The time zone of the notification. Specify the value in UTC. For example, a value of UTC+8 specifies that the time is 8 hours ahead of Coordinated Universal Time, and a value of UTC-7 specifies that the time is 7 hours behind Coordinated Universal Time.
     * 
     */
    public Optional<Output<String>> timeZone() {
        return Optional.ofNullable(this.timeZone);
    }

    private NotificationState() {}

    private NotificationState(NotificationState $) {
        this.notificationArn = $.notificationArn;
        this.notificationTypes = $.notificationTypes;
        this.scalingGroupId = $.scalingGroupId;
        this.timeZone = $.timeZone;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NotificationState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NotificationState $;

        public Builder() {
            $ = new NotificationState();
        }

        public Builder(NotificationState defaults) {
            $ = new NotificationState(Objects.requireNonNull(defaults));
        }

        /**
         * @param notificationArn The Alibaba Cloud Resource Name (ARN) of the notification object, The value must be in `acs:ess:{region}:{account-id}:{resource-relative-id}` format.
         * * region: the region ID of the scaling group. For more information, see `Regions and zones`
         * * account-id: the ID of your account.
         * * resource-relative-id: the notification method. Valid values : `cloudmonitor`, MNS queue: `queue/{queuename}`, Replace the queuename with the specific MNS queue name, MNS topic: `topic/{topicname}`, Replace the topicname with the specific MNS topic name.
         * 
         * @return builder
         * 
         */
        public Builder notificationArn(@Nullable Output<String> notificationArn) {
            $.notificationArn = notificationArn;
            return this;
        }

        /**
         * @param notificationArn The Alibaba Cloud Resource Name (ARN) of the notification object, The value must be in `acs:ess:{region}:{account-id}:{resource-relative-id}` format.
         * * region: the region ID of the scaling group. For more information, see `Regions and zones`
         * * account-id: the ID of your account.
         * * resource-relative-id: the notification method. Valid values : `cloudmonitor`, MNS queue: `queue/{queuename}`, Replace the queuename with the specific MNS queue name, MNS topic: `topic/{topicname}`, Replace the topicname with the specific MNS topic name.
         * 
         * @return builder
         * 
         */
        public Builder notificationArn(String notificationArn) {
            return notificationArn(Output.of(notificationArn));
        }

        /**
         * @param notificationTypes The notification types of Auto Scaling events and resource changes. Supported notification types: &#39;AUTOSCALING:SCALE_OUT_SUCCESS&#39;, &#39;AUTOSCALING:SCALE_IN_SUCCESS&#39;, &#39;AUTOSCALING:SCALE_OUT_ERROR&#39;, &#39;AUTOSCALING:SCALE_IN_ERROR&#39;, &#39;AUTOSCALING:SCALE_REJECT&#39;, &#39;AUTOSCALING:SCALE_OUT_START&#39;, &#39;AUTOSCALING:SCALE_IN_START&#39;, &#39;AUTOSCALING:SCHEDULE_TASK_EXPIRING&#39;.
         * 
         * @return builder
         * 
         */
        public Builder notificationTypes(@Nullable Output<List<String>> notificationTypes) {
            $.notificationTypes = notificationTypes;
            return this;
        }

        /**
         * @param notificationTypes The notification types of Auto Scaling events and resource changes. Supported notification types: &#39;AUTOSCALING:SCALE_OUT_SUCCESS&#39;, &#39;AUTOSCALING:SCALE_IN_SUCCESS&#39;, &#39;AUTOSCALING:SCALE_OUT_ERROR&#39;, &#39;AUTOSCALING:SCALE_IN_ERROR&#39;, &#39;AUTOSCALING:SCALE_REJECT&#39;, &#39;AUTOSCALING:SCALE_OUT_START&#39;, &#39;AUTOSCALING:SCALE_IN_START&#39;, &#39;AUTOSCALING:SCHEDULE_TASK_EXPIRING&#39;.
         * 
         * @return builder
         * 
         */
        public Builder notificationTypes(List<String> notificationTypes) {
            return notificationTypes(Output.of(notificationTypes));
        }

        /**
         * @param notificationTypes The notification types of Auto Scaling events and resource changes. Supported notification types: &#39;AUTOSCALING:SCALE_OUT_SUCCESS&#39;, &#39;AUTOSCALING:SCALE_IN_SUCCESS&#39;, &#39;AUTOSCALING:SCALE_OUT_ERROR&#39;, &#39;AUTOSCALING:SCALE_IN_ERROR&#39;, &#39;AUTOSCALING:SCALE_REJECT&#39;, &#39;AUTOSCALING:SCALE_OUT_START&#39;, &#39;AUTOSCALING:SCALE_IN_START&#39;, &#39;AUTOSCALING:SCHEDULE_TASK_EXPIRING&#39;.
         * 
         * @return builder
         * 
         */
        public Builder notificationTypes(String... notificationTypes) {
            return notificationTypes(List.of(notificationTypes));
        }

        /**
         * @param scalingGroupId The ID of the Auto Scaling group.
         * 
         * @return builder
         * 
         */
        public Builder scalingGroupId(@Nullable Output<String> scalingGroupId) {
            $.scalingGroupId = scalingGroupId;
            return this;
        }

        /**
         * @param scalingGroupId The ID of the Auto Scaling group.
         * 
         * @return builder
         * 
         */
        public Builder scalingGroupId(String scalingGroupId) {
            return scalingGroupId(Output.of(scalingGroupId));
        }

        /**
         * @param timeZone The time zone of the notification. Specify the value in UTC. For example, a value of UTC+8 specifies that the time is 8 hours ahead of Coordinated Universal Time, and a value of UTC-7 specifies that the time is 7 hours behind Coordinated Universal Time.
         * 
         * @return builder
         * 
         */
        public Builder timeZone(@Nullable Output<String> timeZone) {
            $.timeZone = timeZone;
            return this;
        }

        /**
         * @param timeZone The time zone of the notification. Specify the value in UTC. For example, a value of UTC+8 specifies that the time is 8 hours ahead of Coordinated Universal Time, and a value of UTC-7 specifies that the time is 7 hours behind Coordinated Universal Time.
         * 
         * @return builder
         * 
         */
        public Builder timeZone(String timeZone) {
            return timeZone(Output.of(timeZone));
        }

        public NotificationState build() {
            return $;
        }
    }

}
