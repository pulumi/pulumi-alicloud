// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.ecs.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetAutoSnapshotPoliciesPolicy {
    /**
     * @return The ID of the Auto Snapshot Policy.
     * 
     */
    private String autoSnapshotPolicyId;
    /**
     * @return The retention period of the snapshot copied across regions.
     * 
     */
    private Integer copiedSnapshotsRetentionDays;
    /**
     * @return The number of disks to which the automatic snapshot policy is applied.
     * 
     */
    private Integer diskNums;
    /**
     * @return Specifies whether to enable the system to automatically copy snapshots across regions.
     * 
     */
    private Boolean enableCrossRegionCopy;
    /**
     * @return The ID of the Auto Snapshot Policy.
     * 
     */
    private String id;
    /**
     * @return The snapshot policy name..
     * 
     */
    private String name;
    /**
     * @return The automatic snapshot repetition dates.
     * 
     */
    private List<String> repeatWeekdays;
    /**
     * @return The snapshot retention time, and the unit of measurement is day.
     * 
     */
    private Integer retentionDays;
    /**
     * @return The status of Auto Snapshot Policy.
     * 
     */
    private String status;
    /**
     * @return A mapping of tags to assign to the resource.
     * 
     */
    private Map<String,Object> tags;
    /**
     * @return The destination region to which the snapshot is copied.
     * 
     */
    private List<String> targetCopyRegions;
    /**
     * @return The automatic snapshot creation schedule, and the unit of measurement is hour.
     * 
     */
    private List<String> timePoints;
    /**
     * @return The number of extended volumes on which this policy is enabled.
     * 
     */
    private Integer volumeNums;

    private GetAutoSnapshotPoliciesPolicy() {}
    /**
     * @return The ID of the Auto Snapshot Policy.
     * 
     */
    public String autoSnapshotPolicyId() {
        return this.autoSnapshotPolicyId;
    }
    /**
     * @return The retention period of the snapshot copied across regions.
     * 
     */
    public Integer copiedSnapshotsRetentionDays() {
        return this.copiedSnapshotsRetentionDays;
    }
    /**
     * @return The number of disks to which the automatic snapshot policy is applied.
     * 
     */
    public Integer diskNums() {
        return this.diskNums;
    }
    /**
     * @return Specifies whether to enable the system to automatically copy snapshots across regions.
     * 
     */
    public Boolean enableCrossRegionCopy() {
        return this.enableCrossRegionCopy;
    }
    /**
     * @return The ID of the Auto Snapshot Policy.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The snapshot policy name..
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The automatic snapshot repetition dates.
     * 
     */
    public List<String> repeatWeekdays() {
        return this.repeatWeekdays;
    }
    /**
     * @return The snapshot retention time, and the unit of measurement is day.
     * 
     */
    public Integer retentionDays() {
        return this.retentionDays;
    }
    /**
     * @return The status of Auto Snapshot Policy.
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return A mapping of tags to assign to the resource.
     * 
     */
    public Map<String,Object> tags() {
        return this.tags;
    }
    /**
     * @return The destination region to which the snapshot is copied.
     * 
     */
    public List<String> targetCopyRegions() {
        return this.targetCopyRegions;
    }
    /**
     * @return The automatic snapshot creation schedule, and the unit of measurement is hour.
     * 
     */
    public List<String> timePoints() {
        return this.timePoints;
    }
    /**
     * @return The number of extended volumes on which this policy is enabled.
     * 
     */
    public Integer volumeNums() {
        return this.volumeNums;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetAutoSnapshotPoliciesPolicy defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String autoSnapshotPolicyId;
        private Integer copiedSnapshotsRetentionDays;
        private Integer diskNums;
        private Boolean enableCrossRegionCopy;
        private String id;
        private String name;
        private List<String> repeatWeekdays;
        private Integer retentionDays;
        private String status;
        private Map<String,Object> tags;
        private List<String> targetCopyRegions;
        private List<String> timePoints;
        private Integer volumeNums;
        public Builder() {}
        public Builder(GetAutoSnapshotPoliciesPolicy defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.autoSnapshotPolicyId = defaults.autoSnapshotPolicyId;
    	      this.copiedSnapshotsRetentionDays = defaults.copiedSnapshotsRetentionDays;
    	      this.diskNums = defaults.diskNums;
    	      this.enableCrossRegionCopy = defaults.enableCrossRegionCopy;
    	      this.id = defaults.id;
    	      this.name = defaults.name;
    	      this.repeatWeekdays = defaults.repeatWeekdays;
    	      this.retentionDays = defaults.retentionDays;
    	      this.status = defaults.status;
    	      this.tags = defaults.tags;
    	      this.targetCopyRegions = defaults.targetCopyRegions;
    	      this.timePoints = defaults.timePoints;
    	      this.volumeNums = defaults.volumeNums;
        }

        @CustomType.Setter
        public Builder autoSnapshotPolicyId(String autoSnapshotPolicyId) {
            this.autoSnapshotPolicyId = Objects.requireNonNull(autoSnapshotPolicyId);
            return this;
        }
        @CustomType.Setter
        public Builder copiedSnapshotsRetentionDays(Integer copiedSnapshotsRetentionDays) {
            this.copiedSnapshotsRetentionDays = Objects.requireNonNull(copiedSnapshotsRetentionDays);
            return this;
        }
        @CustomType.Setter
        public Builder diskNums(Integer diskNums) {
            this.diskNums = Objects.requireNonNull(diskNums);
            return this;
        }
        @CustomType.Setter
        public Builder enableCrossRegionCopy(Boolean enableCrossRegionCopy) {
            this.enableCrossRegionCopy = Objects.requireNonNull(enableCrossRegionCopy);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder repeatWeekdays(List<String> repeatWeekdays) {
            this.repeatWeekdays = Objects.requireNonNull(repeatWeekdays);
            return this;
        }
        public Builder repeatWeekdays(String... repeatWeekdays) {
            return repeatWeekdays(List.of(repeatWeekdays));
        }
        @CustomType.Setter
        public Builder retentionDays(Integer retentionDays) {
            this.retentionDays = Objects.requireNonNull(retentionDays);
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            this.status = Objects.requireNonNull(status);
            return this;
        }
        @CustomType.Setter
        public Builder tags(Map<String,Object> tags) {
            this.tags = Objects.requireNonNull(tags);
            return this;
        }
        @CustomType.Setter
        public Builder targetCopyRegions(List<String> targetCopyRegions) {
            this.targetCopyRegions = Objects.requireNonNull(targetCopyRegions);
            return this;
        }
        public Builder targetCopyRegions(String... targetCopyRegions) {
            return targetCopyRegions(List.of(targetCopyRegions));
        }
        @CustomType.Setter
        public Builder timePoints(List<String> timePoints) {
            this.timePoints = Objects.requireNonNull(timePoints);
            return this;
        }
        public Builder timePoints(String... timePoints) {
            return timePoints(List.of(timePoints));
        }
        @CustomType.Setter
        public Builder volumeNums(Integer volumeNums) {
            this.volumeNums = Objects.requireNonNull(volumeNums);
            return this;
        }
        public GetAutoSnapshotPoliciesPolicy build() {
            final var o = new GetAutoSnapshotPoliciesPolicy();
            o.autoSnapshotPolicyId = autoSnapshotPolicyId;
            o.copiedSnapshotsRetentionDays = copiedSnapshotsRetentionDays;
            o.diskNums = diskNums;
            o.enableCrossRegionCopy = enableCrossRegionCopy;
            o.id = id;
            o.name = name;
            o.repeatWeekdays = repeatWeekdays;
            o.retentionDays = retentionDays;
            o.status = status;
            o.tags = tags;
            o.targetCopyRegions = targetCopyRegions;
            o.timePoints = timePoints;
            o.volumeNums = volumeNums;
            return o;
        }
    }
}
