// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.ecs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class EcsNetworkInterfaceAttachmentArgs extends com.pulumi.resources.ResourceArgs {

    public static final EcsNetworkInterfaceAttachmentArgs Empty = new EcsNetworkInterfaceAttachmentArgs();

    /**
     * The ID of the ECS instance.
     * 
     */
    @Import(name="instanceId", required=true)
    private Output<String> instanceId;

    /**
     * @return The ID of the ECS instance.
     * 
     */
    public Output<String> instanceId() {
        return this.instanceId;
    }

    /**
     * The index of the network card.
     * 
     */
    @Import(name="networkCardIndex")
    private @Nullable Output<Integer> networkCardIndex;

    /**
     * @return The index of the network card.
     * 
     */
    public Optional<Output<Integer>> networkCardIndex() {
        return Optional.ofNullable(this.networkCardIndex);
    }

    /**
     * The ID of the network interface.
     * 
     */
    @Import(name="networkInterfaceId", required=true)
    private Output<String> networkInterfaceId;

    /**
     * @return The ID of the network interface.
     * 
     */
    public Output<String> networkInterfaceId() {
        return this.networkInterfaceId;
    }

    /**
     * The ID of the trunk network instance.
     * 
     */
    @Import(name="trunkNetworkInstanceId")
    private @Nullable Output<String> trunkNetworkInstanceId;

    /**
     * @return The ID of the trunk network instance.
     * 
     */
    public Optional<Output<String>> trunkNetworkInstanceId() {
        return Optional.ofNullable(this.trunkNetworkInstanceId);
    }

    /**
     * The wait for network configuration ready.
     * 
     */
    @Import(name="waitForNetworkConfigurationReady")
    private @Nullable Output<Boolean> waitForNetworkConfigurationReady;

    /**
     * @return The wait for network configuration ready.
     * 
     */
    public Optional<Output<Boolean>> waitForNetworkConfigurationReady() {
        return Optional.ofNullable(this.waitForNetworkConfigurationReady);
    }

    private EcsNetworkInterfaceAttachmentArgs() {}

    private EcsNetworkInterfaceAttachmentArgs(EcsNetworkInterfaceAttachmentArgs $) {
        this.instanceId = $.instanceId;
        this.networkCardIndex = $.networkCardIndex;
        this.networkInterfaceId = $.networkInterfaceId;
        this.trunkNetworkInstanceId = $.trunkNetworkInstanceId;
        this.waitForNetworkConfigurationReady = $.waitForNetworkConfigurationReady;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(EcsNetworkInterfaceAttachmentArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private EcsNetworkInterfaceAttachmentArgs $;

        public Builder() {
            $ = new EcsNetworkInterfaceAttachmentArgs();
        }

        public Builder(EcsNetworkInterfaceAttachmentArgs defaults) {
            $ = new EcsNetworkInterfaceAttachmentArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param instanceId The ID of the ECS instance.
         * 
         * @return builder
         * 
         */
        public Builder instanceId(Output<String> instanceId) {
            $.instanceId = instanceId;
            return this;
        }

        /**
         * @param instanceId The ID of the ECS instance.
         * 
         * @return builder
         * 
         */
        public Builder instanceId(String instanceId) {
            return instanceId(Output.of(instanceId));
        }

        /**
         * @param networkCardIndex The index of the network card.
         * 
         * @return builder
         * 
         */
        public Builder networkCardIndex(@Nullable Output<Integer> networkCardIndex) {
            $.networkCardIndex = networkCardIndex;
            return this;
        }

        /**
         * @param networkCardIndex The index of the network card.
         * 
         * @return builder
         * 
         */
        public Builder networkCardIndex(Integer networkCardIndex) {
            return networkCardIndex(Output.of(networkCardIndex));
        }

        /**
         * @param networkInterfaceId The ID of the network interface.
         * 
         * @return builder
         * 
         */
        public Builder networkInterfaceId(Output<String> networkInterfaceId) {
            $.networkInterfaceId = networkInterfaceId;
            return this;
        }

        /**
         * @param networkInterfaceId The ID of the network interface.
         * 
         * @return builder
         * 
         */
        public Builder networkInterfaceId(String networkInterfaceId) {
            return networkInterfaceId(Output.of(networkInterfaceId));
        }

        /**
         * @param trunkNetworkInstanceId The ID of the trunk network instance.
         * 
         * @return builder
         * 
         */
        public Builder trunkNetworkInstanceId(@Nullable Output<String> trunkNetworkInstanceId) {
            $.trunkNetworkInstanceId = trunkNetworkInstanceId;
            return this;
        }

        /**
         * @param trunkNetworkInstanceId The ID of the trunk network instance.
         * 
         * @return builder
         * 
         */
        public Builder trunkNetworkInstanceId(String trunkNetworkInstanceId) {
            return trunkNetworkInstanceId(Output.of(trunkNetworkInstanceId));
        }

        /**
         * @param waitForNetworkConfigurationReady The wait for network configuration ready.
         * 
         * @return builder
         * 
         */
        public Builder waitForNetworkConfigurationReady(@Nullable Output<Boolean> waitForNetworkConfigurationReady) {
            $.waitForNetworkConfigurationReady = waitForNetworkConfigurationReady;
            return this;
        }

        /**
         * @param waitForNetworkConfigurationReady The wait for network configuration ready.
         * 
         * @return builder
         * 
         */
        public Builder waitForNetworkConfigurationReady(Boolean waitForNetworkConfigurationReady) {
            return waitForNetworkConfigurationReady(Output.of(waitForNetworkConfigurationReady));
        }

        public EcsNetworkInterfaceAttachmentArgs build() {
            if ($.instanceId == null) {
                throw new MissingRequiredPropertyException("EcsNetworkInterfaceAttachmentArgs", "instanceId");
            }
            if ($.networkInterfaceId == null) {
                throw new MissingRequiredPropertyException("EcsNetworkInterfaceAttachmentArgs", "networkInterfaceId");
            }
            return $;
        }
    }

}
