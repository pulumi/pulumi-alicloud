// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.dataworks.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DiJobJobSettingsRuntimeSettingArgs extends com.pulumi.resources.ResourceArgs {

    public static final DiJobJobSettingsRuntimeSettingArgs Empty = new DiJobJobSettingsRuntimeSettingArgs();

    /**
     * Set name, optional ENUM value:
     * 
     * runtime.offline.speed.limit.mb (valid when runtime.offline.speed.limit.enable = true)
     * 
     * runtime.offline.speed.limit.enable
     * 
     * dst.offline.connection.max (the maximum number of write connections for offline batch tasks)
     * 
     * runtime.offline.concurrent (offline batch synchronization task concurrency)
     * 
     * dst.realtime.connection.max (maximum number of write connections for real-time tasks)
     * 
     * runtime.enable.auto.create.schema (whether to automatically create a schema on the target side)
     * 
     * src.offline.datasource.max.connection (maximum number of source connections for offline batch tasks)
     * 
     * runtime.realtime.concurrent (real-time task concurrency)
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Set name, optional ENUM value:
     * 
     * runtime.offline.speed.limit.mb (valid when runtime.offline.speed.limit.enable = true)
     * 
     * runtime.offline.speed.limit.enable
     * 
     * dst.offline.connection.max (the maximum number of write connections for offline batch tasks)
     * 
     * runtime.offline.concurrent (offline batch synchronization task concurrency)
     * 
     * dst.realtime.connection.max (maximum number of write connections for real-time tasks)
     * 
     * runtime.enable.auto.create.schema (whether to automatically create a schema on the target side)
     * 
     * src.offline.datasource.max.connection (maximum number of source connections for offline batch tasks)
     * 
     * runtime.realtime.concurrent (real-time task concurrency)
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Runtime setting value
     * 
     */
    @Import(name="value")
    private @Nullable Output<String> value;

    /**
     * @return Runtime setting value
     * 
     */
    public Optional<Output<String>> value() {
        return Optional.ofNullable(this.value);
    }

    private DiJobJobSettingsRuntimeSettingArgs() {}

    private DiJobJobSettingsRuntimeSettingArgs(DiJobJobSettingsRuntimeSettingArgs $) {
        this.name = $.name;
        this.value = $.value;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DiJobJobSettingsRuntimeSettingArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DiJobJobSettingsRuntimeSettingArgs $;

        public Builder() {
            $ = new DiJobJobSettingsRuntimeSettingArgs();
        }

        public Builder(DiJobJobSettingsRuntimeSettingArgs defaults) {
            $ = new DiJobJobSettingsRuntimeSettingArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param name Set name, optional ENUM value:
         * 
         * runtime.offline.speed.limit.mb (valid when runtime.offline.speed.limit.enable = true)
         * 
         * runtime.offline.speed.limit.enable
         * 
         * dst.offline.connection.max (the maximum number of write connections for offline batch tasks)
         * 
         * runtime.offline.concurrent (offline batch synchronization task concurrency)
         * 
         * dst.realtime.connection.max (maximum number of write connections for real-time tasks)
         * 
         * runtime.enable.auto.create.schema (whether to automatically create a schema on the target side)
         * 
         * src.offline.datasource.max.connection (maximum number of source connections for offline batch tasks)
         * 
         * runtime.realtime.concurrent (real-time task concurrency)
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Set name, optional ENUM value:
         * 
         * runtime.offline.speed.limit.mb (valid when runtime.offline.speed.limit.enable = true)
         * 
         * runtime.offline.speed.limit.enable
         * 
         * dst.offline.connection.max (the maximum number of write connections for offline batch tasks)
         * 
         * runtime.offline.concurrent (offline batch synchronization task concurrency)
         * 
         * dst.realtime.connection.max (maximum number of write connections for real-time tasks)
         * 
         * runtime.enable.auto.create.schema (whether to automatically create a schema on the target side)
         * 
         * src.offline.datasource.max.connection (maximum number of source connections for offline batch tasks)
         * 
         * runtime.realtime.concurrent (real-time task concurrency)
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param value Runtime setting value
         * 
         * @return builder
         * 
         */
        public Builder value(@Nullable Output<String> value) {
            $.value = value;
            return this;
        }

        /**
         * @param value Runtime setting value
         * 
         * @return builder
         * 
         */
        public Builder value(String value) {
            return value(Output.of(value));
        }

        public DiJobJobSettingsRuntimeSettingArgs build() {
            return $;
        }
    }

}
