// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.selectdb.inputs;

import com.pulumi.alicloud.selectdb.inputs.DbInstanceInstanceNetInfoPortListArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DbInstanceInstanceNetInfoArgs extends com.pulumi.resources.ResourceArgs {

    public static final DbInstanceInstanceNetInfoArgs Empty = new DbInstanceInstanceNetInfoArgs();

    /**
     * The connection string of the instance.
     * 
     */
    @Import(name="connectionString")
    private @Nullable Output<String> connectionString;

    /**
     * @return The connection string of the instance.
     * 
     */
    public Optional<Output<String>> connectionString() {
        return Optional.ofNullable(this.connectionString);
    }

    /**
     * The IP address of the instance.
     * 
     */
    @Import(name="dbIp")
    private @Nullable Output<String> dbIp;

    /**
     * @return The IP address of the instance.
     * 
     */
    public Optional<Output<String>> dbIp() {
        return Optional.ofNullable(this.dbIp);
    }

    /**
     * The network type of the instance.
     * 
     */
    @Import(name="netType")
    private @Nullable Output<String> netType;

    /**
     * @return The network type of the instance.
     * 
     */
    public Optional<Output<String>> netType() {
        return Optional.ofNullable(this.netType);
    }

    /**
     * A list for port provides SelectDB service.
     * 
     */
    @Import(name="portLists")
    private @Nullable Output<List<DbInstanceInstanceNetInfoPortListArgs>> portLists;

    /**
     * @return A list for port provides SelectDB service.
     * 
     */
    public Optional<Output<List<DbInstanceInstanceNetInfoPortListArgs>>> portLists() {
        return Optional.ofNullable(this.portLists);
    }

    /**
     * The VPC ID.
     * 
     */
    @Import(name="vpcInstanceId")
    private @Nullable Output<String> vpcInstanceId;

    /**
     * @return The VPC ID.
     * 
     */
    public Optional<Output<String>> vpcInstanceId() {
        return Optional.ofNullable(this.vpcInstanceId);
    }

    /**
     * The ID of vswitch for DBInstance.
     * 
     */
    @Import(name="vswitchId")
    private @Nullable Output<String> vswitchId;

    /**
     * @return The ID of vswitch for DBInstance.
     * 
     */
    public Optional<Output<String>> vswitchId() {
        return Optional.ofNullable(this.vswitchId);
    }

    private DbInstanceInstanceNetInfoArgs() {}

    private DbInstanceInstanceNetInfoArgs(DbInstanceInstanceNetInfoArgs $) {
        this.connectionString = $.connectionString;
        this.dbIp = $.dbIp;
        this.netType = $.netType;
        this.portLists = $.portLists;
        this.vpcInstanceId = $.vpcInstanceId;
        this.vswitchId = $.vswitchId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DbInstanceInstanceNetInfoArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DbInstanceInstanceNetInfoArgs $;

        public Builder() {
            $ = new DbInstanceInstanceNetInfoArgs();
        }

        public Builder(DbInstanceInstanceNetInfoArgs defaults) {
            $ = new DbInstanceInstanceNetInfoArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param connectionString The connection string of the instance.
         * 
         * @return builder
         * 
         */
        public Builder connectionString(@Nullable Output<String> connectionString) {
            $.connectionString = connectionString;
            return this;
        }

        /**
         * @param connectionString The connection string of the instance.
         * 
         * @return builder
         * 
         */
        public Builder connectionString(String connectionString) {
            return connectionString(Output.of(connectionString));
        }

        /**
         * @param dbIp The IP address of the instance.
         * 
         * @return builder
         * 
         */
        public Builder dbIp(@Nullable Output<String> dbIp) {
            $.dbIp = dbIp;
            return this;
        }

        /**
         * @param dbIp The IP address of the instance.
         * 
         * @return builder
         * 
         */
        public Builder dbIp(String dbIp) {
            return dbIp(Output.of(dbIp));
        }

        /**
         * @param netType The network type of the instance.
         * 
         * @return builder
         * 
         */
        public Builder netType(@Nullable Output<String> netType) {
            $.netType = netType;
            return this;
        }

        /**
         * @param netType The network type of the instance.
         * 
         * @return builder
         * 
         */
        public Builder netType(String netType) {
            return netType(Output.of(netType));
        }

        /**
         * @param portLists A list for port provides SelectDB service.
         * 
         * @return builder
         * 
         */
        public Builder portLists(@Nullable Output<List<DbInstanceInstanceNetInfoPortListArgs>> portLists) {
            $.portLists = portLists;
            return this;
        }

        /**
         * @param portLists A list for port provides SelectDB service.
         * 
         * @return builder
         * 
         */
        public Builder portLists(List<DbInstanceInstanceNetInfoPortListArgs> portLists) {
            return portLists(Output.of(portLists));
        }

        /**
         * @param portLists A list for port provides SelectDB service.
         * 
         * @return builder
         * 
         */
        public Builder portLists(DbInstanceInstanceNetInfoPortListArgs... portLists) {
            return portLists(List.of(portLists));
        }

        /**
         * @param vpcInstanceId The VPC ID.
         * 
         * @return builder
         * 
         */
        public Builder vpcInstanceId(@Nullable Output<String> vpcInstanceId) {
            $.vpcInstanceId = vpcInstanceId;
            return this;
        }

        /**
         * @param vpcInstanceId The VPC ID.
         * 
         * @return builder
         * 
         */
        public Builder vpcInstanceId(String vpcInstanceId) {
            return vpcInstanceId(Output.of(vpcInstanceId));
        }

        /**
         * @param vswitchId The ID of vswitch for DBInstance.
         * 
         * @return builder
         * 
         */
        public Builder vswitchId(@Nullable Output<String> vswitchId) {
            $.vswitchId = vswitchId;
            return this;
        }

        /**
         * @param vswitchId The ID of vswitch for DBInstance.
         * 
         * @return builder
         * 
         */
        public Builder vswitchId(String vswitchId) {
            return vswitchId(Output.of(vswitchId));
        }

        public DbInstanceInstanceNetInfoArgs build() {
            return $;
        }
    }

}
