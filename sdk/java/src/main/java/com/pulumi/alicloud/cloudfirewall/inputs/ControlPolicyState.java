// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.cloudfirewall.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ControlPolicyState extends com.pulumi.resources.ResourceArgs {

    public static final ControlPolicyState Empty = new ControlPolicyState();

    /**
     * The action that Cloud Firewall performs on the traffic. Valid values: `accept`, `drop`, `log`.
     * 
     */
    @Import(name="aclAction")
    private @Nullable Output<String> aclAction;

    /**
     * @return The action that Cloud Firewall performs on the traffic. Valid values: `accept`, `drop`, `log`.
     * 
     */
    public Optional<Output<String>> aclAction() {
        return Optional.ofNullable(this.aclAction);
    }

    /**
     * (Available since v1.148.0) The unique ID of the access control policy.
     * 
     */
    @Import(name="aclUuid")
    private @Nullable Output<String> aclUuid;

    /**
     * @return (Available since v1.148.0) The unique ID of the access control policy.
     * 
     */
    public Optional<Output<String>> aclUuid() {
        return Optional.ofNullable(this.aclUuid);
    }

    /**
     * The application type supported by the access control policy. Valid values: `ANY`, `HTTP`, `HTTPS`, `MQTT`, `Memcache`, `MongoDB`, `MySQL`, `RDP`, `Redis`, `SMTP`, `SMTPS`, `SSH`, `SSL`, `VNC`.
     * &gt; **NOTE:** If `proto` is set to `TCP`, you can set `application_name` to any valid value. If `proto` is set to `UDP`, `ICMP`, or `ANY`, you can only set `application_name` to `ANY`.
     * 
     */
    @Import(name="applicationName")
    private @Nullable Output<String> applicationName;

    /**
     * @return The application type supported by the access control policy. Valid values: `ANY`, `HTTP`, `HTTPS`, `MQTT`, `Memcache`, `MongoDB`, `MySQL`, `RDP`, `Redis`, `SMTP`, `SMTPS`, `SSH`, `SSL`, `VNC`.
     * &gt; **NOTE:** If `proto` is set to `TCP`, you can set `application_name` to any valid value. If `proto` is set to `UDP`, `ICMP`, or `ANY`, you can only set `application_name` to `ANY`.
     * 
     */
    public Optional<Output<String>> applicationName() {
        return Optional.ofNullable(this.applicationName);
    }

    /**
     * The application types supported by the access control policy.
     * &gt; **NOTE:** If `proto` is set to `TCP`, you can set `application_name_list` to any valid value. If `proto` is set to `UDP`, `ICMP`, or `ANY`, you can only set `application_name_list` to `[&#34;ANY&#34;]`. From version 1.232.0, You must specify at least one of the `application_name_list` and `application_name`. If you specify both `application_name_list` and `application_name`, only the `application_name_list` takes effect.
     * 
     */
    @Import(name="applicationNameLists")
    private @Nullable Output<List<String>> applicationNameLists;

    /**
     * @return The application types supported by the access control policy.
     * &gt; **NOTE:** If `proto` is set to `TCP`, you can set `application_name_list` to any valid value. If `proto` is set to `UDP`, `ICMP`, or `ANY`, you can only set `application_name_list` to `[&#34;ANY&#34;]`. From version 1.232.0, You must specify at least one of the `application_name_list` and `application_name`. If you specify both `application_name_list` and `application_name`, only the `application_name_list` takes effect.
     * 
     */
    public Optional<Output<List<String>>> applicationNameLists() {
        return Optional.ofNullable(this.applicationNameLists);
    }

    /**
     * (Available since v1.232.0) The time when the access control policy was created.
     * 
     */
    @Import(name="createTime")
    private @Nullable Output<String> createTime;

    /**
     * @return (Available since v1.232.0) The time when the access control policy was created.
     * 
     */
    public Optional<Output<String>> createTime() {
        return Optional.ofNullable(this.createTime);
    }

    /**
     * The description of the access control policy.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The description of the access control policy.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The destination port in the access control policy. **Note:** If `dest_port_type` is set to `port`, you must specify `dest_port`.
     * 
     */
    @Import(name="destPort")
    private @Nullable Output<String> destPort;

    /**
     * @return The destination port in the access control policy. **Note:** If `dest_port_type` is set to `port`, you must specify `dest_port`.
     * 
     */
    public Optional<Output<String>> destPort() {
        return Optional.ofNullable(this.destPort);
    }

    /**
     * The name of the destination port address book in the access control policy. **Note:** If `dest_port_type` is set to `group`, you must specify `dest_port_group`.
     * 
     */
    @Import(name="destPortGroup")
    private @Nullable Output<String> destPortGroup;

    /**
     * @return The name of the destination port address book in the access control policy. **Note:** If `dest_port_type` is set to `group`, you must specify `dest_port_group`.
     * 
     */
    public Optional<Output<String>> destPortGroup() {
        return Optional.ofNullable(this.destPortGroup);
    }

    /**
     * The type of the destination port in the access control policy. Valid values: `port`, `group`.
     * 
     */
    @Import(name="destPortType")
    private @Nullable Output<String> destPortType;

    /**
     * @return The type of the destination port in the access control policy. Valid values: `port`, `group`.
     * 
     */
    public Optional<Output<String>> destPortType() {
        return Optional.ofNullable(this.destPortType);
    }

    /**
     * The destination address in the access control policy.
     * 
     */
    @Import(name="destination")
    private @Nullable Output<String> destination;

    /**
     * @return The destination address in the access control policy.
     * 
     */
    public Optional<Output<String>> destination() {
        return Optional.ofNullable(this.destination);
    }

    /**
     * The type of the destination address in the access control policy. Valid values: `net`, `group`, `domain`, `location`.
     * 
     */
    @Import(name="destinationType")
    private @Nullable Output<String> destinationType;

    /**
     * @return The type of the destination address in the access control policy. Valid values: `net`, `group`, `domain`, `location`.
     * 
     */
    public Optional<Output<String>> destinationType() {
        return Optional.ofNullable(this.destinationType);
    }

    /**
     * The direction of the traffic to which the access control policy applies. Valid values: `in`, `out`.
     * 
     */
    @Import(name="direction")
    private @Nullable Output<String> direction;

    /**
     * @return The direction of the traffic to which the access control policy applies. Valid values: `in`, `out`.
     * 
     */
    public Optional<Output<String>> direction() {
        return Optional.ofNullable(this.direction);
    }

    /**
     * The domain name resolution method of the access control policy. Valid values:
     * - `FQDN`: Fully qualified domain name (FQDN)-based resolution.
     * - `DNS`: DNS-based dynamic resolution.
     * - `FQDN_AND_DNS`: FQDN and DNS-based dynamic resolution.
     * 
     */
    @Import(name="domainResolveType")
    private @Nullable Output<String> domainResolveType;

    /**
     * @return The domain name resolution method of the access control policy. Valid values:
     * - `FQDN`: Fully qualified domain name (FQDN)-based resolution.
     * - `DNS`: DNS-based dynamic resolution.
     * - `FQDN_AND_DNS`: FQDN and DNS-based dynamic resolution.
     * 
     */
    public Optional<Output<String>> domainResolveType() {
        return Optional.ofNullable(this.domainResolveType);
    }

    /**
     * The time when the access control policy stops taking effect. The value is a UNIX timestamp. Unit: seconds. The value must be on the hour or on the half hour, and at least 30 minutes later than the start time.
     * &gt; **NOTE:** If `repeat_type` is set to `None`, `Daily`, `Weekly`, or `Monthly`, `start_time` and `end_time` must be set.
     * 
     */
    @Import(name="endTime")
    private @Nullable Output<Integer> endTime;

    /**
     * @return The time when the access control policy stops taking effect. The value is a UNIX timestamp. Unit: seconds. The value must be on the hour or on the half hour, and at least 30 minutes later than the start time.
     * &gt; **NOTE:** If `repeat_type` is set to `None`, `Daily`, `Weekly`, or `Monthly`, `start_time` and `end_time` must be set.
     * 
     */
    public Optional<Output<Integer>> endTime() {
        return Optional.ofNullable(this.endTime);
    }

    /**
     * The IP version supported by the access control policy. Default value: `4`. Valid values:
     * 
     */
    @Import(name="ipVersion")
    private @Nullable Output<String> ipVersion;

    /**
     * @return The IP version supported by the access control policy. Default value: `4`. Valid values:
     * 
     */
    public Optional<Output<String>> ipVersion() {
        return Optional.ofNullable(this.ipVersion);
    }

    /**
     * The language of the content within the request and response. Valid values: `zh`, `en`.
     * 
     */
    @Import(name="lang")
    private @Nullable Output<String> lang;

    /**
     * @return The language of the content within the request and response. Valid values: `zh`, `en`.
     * 
     */
    public Optional<Output<String>> lang() {
        return Optional.ofNullable(this.lang);
    }

    /**
     * The protocol type supported by the access control policy. Valid values: `ANY`, `  TCP `, `UDP`, `ICMP`.
     * 
     */
    @Import(name="proto")
    private @Nullable Output<String> proto;

    /**
     * @return The protocol type supported by the access control policy. Valid values: `ANY`, `  TCP `, `UDP`, `ICMP`.
     * 
     */
    public Optional<Output<String>> proto() {
        return Optional.ofNullable(this.proto);
    }

    /**
     * The status of the access control policy. Valid values: `true`, `false`.
     * 
     */
    @Import(name="release")
    private @Nullable Output<String> release;

    /**
     * @return The status of the access control policy. Valid values: `true`, `false`.
     * 
     */
    public Optional<Output<String>> release() {
        return Optional.ofNullable(this.release);
    }

    /**
     * The days of a week or of a month on which the access control policy takes effect. Valid values:
     * - If `repeat_type` is set to `Weekly`. Valid values: `0` to `6`.
     * - If `repeat_type` is set to `Monthly`. Valid values: `1` to `31`.
     * &gt; **NOTE:** If `repeat_type` is set to `Weekly`, or `Monthly`, `repeat_days` must be set.
     * 
     */
    @Import(name="repeatDays")
    private @Nullable Output<List<Integer>> repeatDays;

    /**
     * @return The days of a week or of a month on which the access control policy takes effect. Valid values:
     * - If `repeat_type` is set to `Weekly`. Valid values: `0` to `6`.
     * - If `repeat_type` is set to `Monthly`. Valid values: `1` to `31`.
     * &gt; **NOTE:** If `repeat_type` is set to `Weekly`, or `Monthly`, `repeat_days` must be set.
     * 
     */
    public Optional<Output<List<Integer>>> repeatDays() {
        return Optional.ofNullable(this.repeatDays);
    }

    /**
     * The point in time when the recurrence ends. Example: `23:30`. The end time must be on the hour or on the half hour, and at least 30 minutes later than the start time.
     * &gt; **NOTE:** If `repeat_type` is set to `Daily`, `Weekly`, or `Monthly`, `repeat_start_time` and `repeat_end_time` must be set.
     * 
     */
    @Import(name="repeatEndTime")
    private @Nullable Output<String> repeatEndTime;

    /**
     * @return The point in time when the recurrence ends. Example: `23:30`. The end time must be on the hour or on the half hour, and at least 30 minutes later than the start time.
     * &gt; **NOTE:** If `repeat_type` is set to `Daily`, `Weekly`, or `Monthly`, `repeat_start_time` and `repeat_end_time` must be set.
     * 
     */
    public Optional<Output<String>> repeatEndTime() {
        return Optional.ofNullable(this.repeatEndTime);
    }

    /**
     * The point in time when the recurrence starts. Example: `08:00`. The start time must be on the hour or on the half hour, and at least 30 minutes earlier than the end time.
     * 
     */
    @Import(name="repeatStartTime")
    private @Nullable Output<String> repeatStartTime;

    /**
     * @return The point in time when the recurrence starts. Example: `08:00`. The start time must be on the hour or on the half hour, and at least 30 minutes earlier than the end time.
     * 
     */
    public Optional<Output<String>> repeatStartTime() {
        return Optional.ofNullable(this.repeatStartTime);
    }

    /**
     * The recurrence type for the access control policy to take effect. Default value: `Permanent`. Valid values:
     * - `Permanent`: The policy always takes effect.
     * - `None`: The policy takes effect for only once.
     * - `Daily`: The policy takes effect on a daily basis.
     * - `Weekly`: The policy takes effect on a weekly basis.
     * - `Monthly`: The policy takes effect on a monthly basis.
     * 
     */
    @Import(name="repeatType")
    private @Nullable Output<String> repeatType;

    /**
     * @return The recurrence type for the access control policy to take effect. Default value: `Permanent`. Valid values:
     * - `Permanent`: The policy always takes effect.
     * - `None`: The policy takes effect for only once.
     * - `Daily`: The policy takes effect on a daily basis.
     * - `Weekly`: The policy takes effect on a weekly basis.
     * - `Monthly`: The policy takes effect on a monthly basis.
     * 
     */
    public Optional<Output<String>> repeatType() {
        return Optional.ofNullable(this.repeatType);
    }

    /**
     * The source address in the access control policy.
     * 
     */
    @Import(name="source")
    private @Nullable Output<String> source;

    /**
     * @return The source address in the access control policy.
     * 
     */
    public Optional<Output<String>> source() {
        return Optional.ofNullable(this.source);
    }

    /**
     * The source IP address of the request.
     * 
     */
    @Import(name="sourceIp")
    private @Nullable Output<String> sourceIp;

    /**
     * @return The source IP address of the request.
     * 
     */
    public Optional<Output<String>> sourceIp() {
        return Optional.ofNullable(this.sourceIp);
    }

    /**
     * The type of the source address in the access control policy. Valid values: `net`, `group`, `location`.
     * 
     */
    @Import(name="sourceType")
    private @Nullable Output<String> sourceType;

    /**
     * @return The type of the source address in the access control policy. Valid values: `net`, `group`, `location`.
     * 
     */
    public Optional<Output<String>> sourceType() {
        return Optional.ofNullable(this.sourceType);
    }

    /**
     * The time when the access control policy starts to take effect. The value is a UNIX timestamp. Unit: seconds. The value must be on the hour or on the half hour, and at least 30 minutes earlier than the end time.
     * 
     */
    @Import(name="startTime")
    private @Nullable Output<Integer> startTime;

    /**
     * @return The time when the access control policy starts to take effect. The value is a UNIX timestamp. Unit: seconds. The value must be on the hour or on the half hour, and at least 30 minutes earlier than the end time.
     * 
     */
    public Optional<Output<Integer>> startTime() {
        return Optional.ofNullable(this.startTime);
    }

    private ControlPolicyState() {}

    private ControlPolicyState(ControlPolicyState $) {
        this.aclAction = $.aclAction;
        this.aclUuid = $.aclUuid;
        this.applicationName = $.applicationName;
        this.applicationNameLists = $.applicationNameLists;
        this.createTime = $.createTime;
        this.description = $.description;
        this.destPort = $.destPort;
        this.destPortGroup = $.destPortGroup;
        this.destPortType = $.destPortType;
        this.destination = $.destination;
        this.destinationType = $.destinationType;
        this.direction = $.direction;
        this.domainResolveType = $.domainResolveType;
        this.endTime = $.endTime;
        this.ipVersion = $.ipVersion;
        this.lang = $.lang;
        this.proto = $.proto;
        this.release = $.release;
        this.repeatDays = $.repeatDays;
        this.repeatEndTime = $.repeatEndTime;
        this.repeatStartTime = $.repeatStartTime;
        this.repeatType = $.repeatType;
        this.source = $.source;
        this.sourceIp = $.sourceIp;
        this.sourceType = $.sourceType;
        this.startTime = $.startTime;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ControlPolicyState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ControlPolicyState $;

        public Builder() {
            $ = new ControlPolicyState();
        }

        public Builder(ControlPolicyState defaults) {
            $ = new ControlPolicyState(Objects.requireNonNull(defaults));
        }

        /**
         * @param aclAction The action that Cloud Firewall performs on the traffic. Valid values: `accept`, `drop`, `log`.
         * 
         * @return builder
         * 
         */
        public Builder aclAction(@Nullable Output<String> aclAction) {
            $.aclAction = aclAction;
            return this;
        }

        /**
         * @param aclAction The action that Cloud Firewall performs on the traffic. Valid values: `accept`, `drop`, `log`.
         * 
         * @return builder
         * 
         */
        public Builder aclAction(String aclAction) {
            return aclAction(Output.of(aclAction));
        }

        /**
         * @param aclUuid (Available since v1.148.0) The unique ID of the access control policy.
         * 
         * @return builder
         * 
         */
        public Builder aclUuid(@Nullable Output<String> aclUuid) {
            $.aclUuid = aclUuid;
            return this;
        }

        /**
         * @param aclUuid (Available since v1.148.0) The unique ID of the access control policy.
         * 
         * @return builder
         * 
         */
        public Builder aclUuid(String aclUuid) {
            return aclUuid(Output.of(aclUuid));
        }

        /**
         * @param applicationName The application type supported by the access control policy. Valid values: `ANY`, `HTTP`, `HTTPS`, `MQTT`, `Memcache`, `MongoDB`, `MySQL`, `RDP`, `Redis`, `SMTP`, `SMTPS`, `SSH`, `SSL`, `VNC`.
         * &gt; **NOTE:** If `proto` is set to `TCP`, you can set `application_name` to any valid value. If `proto` is set to `UDP`, `ICMP`, or `ANY`, you can only set `application_name` to `ANY`.
         * 
         * @return builder
         * 
         */
        public Builder applicationName(@Nullable Output<String> applicationName) {
            $.applicationName = applicationName;
            return this;
        }

        /**
         * @param applicationName The application type supported by the access control policy. Valid values: `ANY`, `HTTP`, `HTTPS`, `MQTT`, `Memcache`, `MongoDB`, `MySQL`, `RDP`, `Redis`, `SMTP`, `SMTPS`, `SSH`, `SSL`, `VNC`.
         * &gt; **NOTE:** If `proto` is set to `TCP`, you can set `application_name` to any valid value. If `proto` is set to `UDP`, `ICMP`, or `ANY`, you can only set `application_name` to `ANY`.
         * 
         * @return builder
         * 
         */
        public Builder applicationName(String applicationName) {
            return applicationName(Output.of(applicationName));
        }

        /**
         * @param applicationNameLists The application types supported by the access control policy.
         * &gt; **NOTE:** If `proto` is set to `TCP`, you can set `application_name_list` to any valid value. If `proto` is set to `UDP`, `ICMP`, or `ANY`, you can only set `application_name_list` to `[&#34;ANY&#34;]`. From version 1.232.0, You must specify at least one of the `application_name_list` and `application_name`. If you specify both `application_name_list` and `application_name`, only the `application_name_list` takes effect.
         * 
         * @return builder
         * 
         */
        public Builder applicationNameLists(@Nullable Output<List<String>> applicationNameLists) {
            $.applicationNameLists = applicationNameLists;
            return this;
        }

        /**
         * @param applicationNameLists The application types supported by the access control policy.
         * &gt; **NOTE:** If `proto` is set to `TCP`, you can set `application_name_list` to any valid value. If `proto` is set to `UDP`, `ICMP`, or `ANY`, you can only set `application_name_list` to `[&#34;ANY&#34;]`. From version 1.232.0, You must specify at least one of the `application_name_list` and `application_name`. If you specify both `application_name_list` and `application_name`, only the `application_name_list` takes effect.
         * 
         * @return builder
         * 
         */
        public Builder applicationNameLists(List<String> applicationNameLists) {
            return applicationNameLists(Output.of(applicationNameLists));
        }

        /**
         * @param applicationNameLists The application types supported by the access control policy.
         * &gt; **NOTE:** If `proto` is set to `TCP`, you can set `application_name_list` to any valid value. If `proto` is set to `UDP`, `ICMP`, or `ANY`, you can only set `application_name_list` to `[&#34;ANY&#34;]`. From version 1.232.0, You must specify at least one of the `application_name_list` and `application_name`. If you specify both `application_name_list` and `application_name`, only the `application_name_list` takes effect.
         * 
         * @return builder
         * 
         */
        public Builder applicationNameLists(String... applicationNameLists) {
            return applicationNameLists(List.of(applicationNameLists));
        }

        /**
         * @param createTime (Available since v1.232.0) The time when the access control policy was created.
         * 
         * @return builder
         * 
         */
        public Builder createTime(@Nullable Output<String> createTime) {
            $.createTime = createTime;
            return this;
        }

        /**
         * @param createTime (Available since v1.232.0) The time when the access control policy was created.
         * 
         * @return builder
         * 
         */
        public Builder createTime(String createTime) {
            return createTime(Output.of(createTime));
        }

        /**
         * @param description The description of the access control policy.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The description of the access control policy.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param destPort The destination port in the access control policy. **Note:** If `dest_port_type` is set to `port`, you must specify `dest_port`.
         * 
         * @return builder
         * 
         */
        public Builder destPort(@Nullable Output<String> destPort) {
            $.destPort = destPort;
            return this;
        }

        /**
         * @param destPort The destination port in the access control policy. **Note:** If `dest_port_type` is set to `port`, you must specify `dest_port`.
         * 
         * @return builder
         * 
         */
        public Builder destPort(String destPort) {
            return destPort(Output.of(destPort));
        }

        /**
         * @param destPortGroup The name of the destination port address book in the access control policy. **Note:** If `dest_port_type` is set to `group`, you must specify `dest_port_group`.
         * 
         * @return builder
         * 
         */
        public Builder destPortGroup(@Nullable Output<String> destPortGroup) {
            $.destPortGroup = destPortGroup;
            return this;
        }

        /**
         * @param destPortGroup The name of the destination port address book in the access control policy. **Note:** If `dest_port_type` is set to `group`, you must specify `dest_port_group`.
         * 
         * @return builder
         * 
         */
        public Builder destPortGroup(String destPortGroup) {
            return destPortGroup(Output.of(destPortGroup));
        }

        /**
         * @param destPortType The type of the destination port in the access control policy. Valid values: `port`, `group`.
         * 
         * @return builder
         * 
         */
        public Builder destPortType(@Nullable Output<String> destPortType) {
            $.destPortType = destPortType;
            return this;
        }

        /**
         * @param destPortType The type of the destination port in the access control policy. Valid values: `port`, `group`.
         * 
         * @return builder
         * 
         */
        public Builder destPortType(String destPortType) {
            return destPortType(Output.of(destPortType));
        }

        /**
         * @param destination The destination address in the access control policy.
         * 
         * @return builder
         * 
         */
        public Builder destination(@Nullable Output<String> destination) {
            $.destination = destination;
            return this;
        }

        /**
         * @param destination The destination address in the access control policy.
         * 
         * @return builder
         * 
         */
        public Builder destination(String destination) {
            return destination(Output.of(destination));
        }

        /**
         * @param destinationType The type of the destination address in the access control policy. Valid values: `net`, `group`, `domain`, `location`.
         * 
         * @return builder
         * 
         */
        public Builder destinationType(@Nullable Output<String> destinationType) {
            $.destinationType = destinationType;
            return this;
        }

        /**
         * @param destinationType The type of the destination address in the access control policy. Valid values: `net`, `group`, `domain`, `location`.
         * 
         * @return builder
         * 
         */
        public Builder destinationType(String destinationType) {
            return destinationType(Output.of(destinationType));
        }

        /**
         * @param direction The direction of the traffic to which the access control policy applies. Valid values: `in`, `out`.
         * 
         * @return builder
         * 
         */
        public Builder direction(@Nullable Output<String> direction) {
            $.direction = direction;
            return this;
        }

        /**
         * @param direction The direction of the traffic to which the access control policy applies. Valid values: `in`, `out`.
         * 
         * @return builder
         * 
         */
        public Builder direction(String direction) {
            return direction(Output.of(direction));
        }

        /**
         * @param domainResolveType The domain name resolution method of the access control policy. Valid values:
         * - `FQDN`: Fully qualified domain name (FQDN)-based resolution.
         * - `DNS`: DNS-based dynamic resolution.
         * - `FQDN_AND_DNS`: FQDN and DNS-based dynamic resolution.
         * 
         * @return builder
         * 
         */
        public Builder domainResolveType(@Nullable Output<String> domainResolveType) {
            $.domainResolveType = domainResolveType;
            return this;
        }

        /**
         * @param domainResolveType The domain name resolution method of the access control policy. Valid values:
         * - `FQDN`: Fully qualified domain name (FQDN)-based resolution.
         * - `DNS`: DNS-based dynamic resolution.
         * - `FQDN_AND_DNS`: FQDN and DNS-based dynamic resolution.
         * 
         * @return builder
         * 
         */
        public Builder domainResolveType(String domainResolveType) {
            return domainResolveType(Output.of(domainResolveType));
        }

        /**
         * @param endTime The time when the access control policy stops taking effect. The value is a UNIX timestamp. Unit: seconds. The value must be on the hour or on the half hour, and at least 30 minutes later than the start time.
         * &gt; **NOTE:** If `repeat_type` is set to `None`, `Daily`, `Weekly`, or `Monthly`, `start_time` and `end_time` must be set.
         * 
         * @return builder
         * 
         */
        public Builder endTime(@Nullable Output<Integer> endTime) {
            $.endTime = endTime;
            return this;
        }

        /**
         * @param endTime The time when the access control policy stops taking effect. The value is a UNIX timestamp. Unit: seconds. The value must be on the hour or on the half hour, and at least 30 minutes later than the start time.
         * &gt; **NOTE:** If `repeat_type` is set to `None`, `Daily`, `Weekly`, or `Monthly`, `start_time` and `end_time` must be set.
         * 
         * @return builder
         * 
         */
        public Builder endTime(Integer endTime) {
            return endTime(Output.of(endTime));
        }

        /**
         * @param ipVersion The IP version supported by the access control policy. Default value: `4`. Valid values:
         * 
         * @return builder
         * 
         */
        public Builder ipVersion(@Nullable Output<String> ipVersion) {
            $.ipVersion = ipVersion;
            return this;
        }

        /**
         * @param ipVersion The IP version supported by the access control policy. Default value: `4`. Valid values:
         * 
         * @return builder
         * 
         */
        public Builder ipVersion(String ipVersion) {
            return ipVersion(Output.of(ipVersion));
        }

        /**
         * @param lang The language of the content within the request and response. Valid values: `zh`, `en`.
         * 
         * @return builder
         * 
         */
        public Builder lang(@Nullable Output<String> lang) {
            $.lang = lang;
            return this;
        }

        /**
         * @param lang The language of the content within the request and response. Valid values: `zh`, `en`.
         * 
         * @return builder
         * 
         */
        public Builder lang(String lang) {
            return lang(Output.of(lang));
        }

        /**
         * @param proto The protocol type supported by the access control policy. Valid values: `ANY`, `  TCP `, `UDP`, `ICMP`.
         * 
         * @return builder
         * 
         */
        public Builder proto(@Nullable Output<String> proto) {
            $.proto = proto;
            return this;
        }

        /**
         * @param proto The protocol type supported by the access control policy. Valid values: `ANY`, `  TCP `, `UDP`, `ICMP`.
         * 
         * @return builder
         * 
         */
        public Builder proto(String proto) {
            return proto(Output.of(proto));
        }

        /**
         * @param release The status of the access control policy. Valid values: `true`, `false`.
         * 
         * @return builder
         * 
         */
        public Builder release(@Nullable Output<String> release) {
            $.release = release;
            return this;
        }

        /**
         * @param release The status of the access control policy. Valid values: `true`, `false`.
         * 
         * @return builder
         * 
         */
        public Builder release(String release) {
            return release(Output.of(release));
        }

        /**
         * @param repeatDays The days of a week or of a month on which the access control policy takes effect. Valid values:
         * - If `repeat_type` is set to `Weekly`. Valid values: `0` to `6`.
         * - If `repeat_type` is set to `Monthly`. Valid values: `1` to `31`.
         * &gt; **NOTE:** If `repeat_type` is set to `Weekly`, or `Monthly`, `repeat_days` must be set.
         * 
         * @return builder
         * 
         */
        public Builder repeatDays(@Nullable Output<List<Integer>> repeatDays) {
            $.repeatDays = repeatDays;
            return this;
        }

        /**
         * @param repeatDays The days of a week or of a month on which the access control policy takes effect. Valid values:
         * - If `repeat_type` is set to `Weekly`. Valid values: `0` to `6`.
         * - If `repeat_type` is set to `Monthly`. Valid values: `1` to `31`.
         * &gt; **NOTE:** If `repeat_type` is set to `Weekly`, or `Monthly`, `repeat_days` must be set.
         * 
         * @return builder
         * 
         */
        public Builder repeatDays(List<Integer> repeatDays) {
            return repeatDays(Output.of(repeatDays));
        }

        /**
         * @param repeatDays The days of a week or of a month on which the access control policy takes effect. Valid values:
         * - If `repeat_type` is set to `Weekly`. Valid values: `0` to `6`.
         * - If `repeat_type` is set to `Monthly`. Valid values: `1` to `31`.
         * &gt; **NOTE:** If `repeat_type` is set to `Weekly`, or `Monthly`, `repeat_days` must be set.
         * 
         * @return builder
         * 
         */
        public Builder repeatDays(Integer... repeatDays) {
            return repeatDays(List.of(repeatDays));
        }

        /**
         * @param repeatEndTime The point in time when the recurrence ends. Example: `23:30`. The end time must be on the hour or on the half hour, and at least 30 minutes later than the start time.
         * &gt; **NOTE:** If `repeat_type` is set to `Daily`, `Weekly`, or `Monthly`, `repeat_start_time` and `repeat_end_time` must be set.
         * 
         * @return builder
         * 
         */
        public Builder repeatEndTime(@Nullable Output<String> repeatEndTime) {
            $.repeatEndTime = repeatEndTime;
            return this;
        }

        /**
         * @param repeatEndTime The point in time when the recurrence ends. Example: `23:30`. The end time must be on the hour or on the half hour, and at least 30 minutes later than the start time.
         * &gt; **NOTE:** If `repeat_type` is set to `Daily`, `Weekly`, or `Monthly`, `repeat_start_time` and `repeat_end_time` must be set.
         * 
         * @return builder
         * 
         */
        public Builder repeatEndTime(String repeatEndTime) {
            return repeatEndTime(Output.of(repeatEndTime));
        }

        /**
         * @param repeatStartTime The point in time when the recurrence starts. Example: `08:00`. The start time must be on the hour or on the half hour, and at least 30 minutes earlier than the end time.
         * 
         * @return builder
         * 
         */
        public Builder repeatStartTime(@Nullable Output<String> repeatStartTime) {
            $.repeatStartTime = repeatStartTime;
            return this;
        }

        /**
         * @param repeatStartTime The point in time when the recurrence starts. Example: `08:00`. The start time must be on the hour or on the half hour, and at least 30 minutes earlier than the end time.
         * 
         * @return builder
         * 
         */
        public Builder repeatStartTime(String repeatStartTime) {
            return repeatStartTime(Output.of(repeatStartTime));
        }

        /**
         * @param repeatType The recurrence type for the access control policy to take effect. Default value: `Permanent`. Valid values:
         * - `Permanent`: The policy always takes effect.
         * - `None`: The policy takes effect for only once.
         * - `Daily`: The policy takes effect on a daily basis.
         * - `Weekly`: The policy takes effect on a weekly basis.
         * - `Monthly`: The policy takes effect on a monthly basis.
         * 
         * @return builder
         * 
         */
        public Builder repeatType(@Nullable Output<String> repeatType) {
            $.repeatType = repeatType;
            return this;
        }

        /**
         * @param repeatType The recurrence type for the access control policy to take effect. Default value: `Permanent`. Valid values:
         * - `Permanent`: The policy always takes effect.
         * - `None`: The policy takes effect for only once.
         * - `Daily`: The policy takes effect on a daily basis.
         * - `Weekly`: The policy takes effect on a weekly basis.
         * - `Monthly`: The policy takes effect on a monthly basis.
         * 
         * @return builder
         * 
         */
        public Builder repeatType(String repeatType) {
            return repeatType(Output.of(repeatType));
        }

        /**
         * @param source The source address in the access control policy.
         * 
         * @return builder
         * 
         */
        public Builder source(@Nullable Output<String> source) {
            $.source = source;
            return this;
        }

        /**
         * @param source The source address in the access control policy.
         * 
         * @return builder
         * 
         */
        public Builder source(String source) {
            return source(Output.of(source));
        }

        /**
         * @param sourceIp The source IP address of the request.
         * 
         * @return builder
         * 
         */
        public Builder sourceIp(@Nullable Output<String> sourceIp) {
            $.sourceIp = sourceIp;
            return this;
        }

        /**
         * @param sourceIp The source IP address of the request.
         * 
         * @return builder
         * 
         */
        public Builder sourceIp(String sourceIp) {
            return sourceIp(Output.of(sourceIp));
        }

        /**
         * @param sourceType The type of the source address in the access control policy. Valid values: `net`, `group`, `location`.
         * 
         * @return builder
         * 
         */
        public Builder sourceType(@Nullable Output<String> sourceType) {
            $.sourceType = sourceType;
            return this;
        }

        /**
         * @param sourceType The type of the source address in the access control policy. Valid values: `net`, `group`, `location`.
         * 
         * @return builder
         * 
         */
        public Builder sourceType(String sourceType) {
            return sourceType(Output.of(sourceType));
        }

        /**
         * @param startTime The time when the access control policy starts to take effect. The value is a UNIX timestamp. Unit: seconds. The value must be on the hour or on the half hour, and at least 30 minutes earlier than the end time.
         * 
         * @return builder
         * 
         */
        public Builder startTime(@Nullable Output<Integer> startTime) {
            $.startTime = startTime;
            return this;
        }

        /**
         * @param startTime The time when the access control policy starts to take effect. The value is a UNIX timestamp. Unit: seconds. The value must be on the hour or on the half hour, and at least 30 minutes earlier than the end time.
         * 
         * @return builder
         * 
         */
        public Builder startTime(Integer startTime) {
            return startTime(Output.of(startTime));
        }

        public ControlPolicyState build() {
            return $;
        }
    }

}
