// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.vpn.outputs;

import com.pulumi.alicloud.vpn.outputs.GetConnectionsConnectionIkeConfig;
import com.pulumi.alicloud.vpn.outputs.GetConnectionsConnectionIpsecConfig;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;

@CustomType
public final class GetConnectionsConnection {
    private String createTime;
    /**
     * @return Use the VPN customer gateway ID as the search key.
     * 
     */
    private String customerGatewayId;
    private Boolean effectImmediately;
    /**
     * @return ID of the VPN connection.
     * 
     */
    private String id;
    /**
     * @return The configurations of phase-one negotiation.
     * 
     */
    private @Nullable List<GetConnectionsConnectionIkeConfig> ikeConfigs;
    /**
     * @return The configurations of phase-two negotiation.
     * 
     */
    private @Nullable List<GetConnectionsConnectionIpsecConfig> ipsecConfigs;
    /**
     * @return The local subnet of the VPN connection.
     * 
     */
    private String localSubnet;
    /**
     * @return The name of the VPN connection.
     * 
     */
    private String name;
    /**
     * @return The remote subnet of the VPN connection.
     * 
     */
    private String remoteSubnet;
    /**
     * @return The status of the VPN connection, valid value:ike_sa_not_established, ike_sa_established, ipsec_sa_not_established, ipsec_sa_established.
     * 
     */
    private String status;
    /**
     * @return Use the VPN gateway ID as the search key.
     * 
     */
    private String vpnGatewayId;

    private GetConnectionsConnection() {}
    public String createTime() {
        return this.createTime;
    }
    /**
     * @return Use the VPN customer gateway ID as the search key.
     * 
     */
    public String customerGatewayId() {
        return this.customerGatewayId;
    }
    public Boolean effectImmediately() {
        return this.effectImmediately;
    }
    /**
     * @return ID of the VPN connection.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The configurations of phase-one negotiation.
     * 
     */
    public List<GetConnectionsConnectionIkeConfig> ikeConfigs() {
        return this.ikeConfigs == null ? List.of() : this.ikeConfigs;
    }
    /**
     * @return The configurations of phase-two negotiation.
     * 
     */
    public List<GetConnectionsConnectionIpsecConfig> ipsecConfigs() {
        return this.ipsecConfigs == null ? List.of() : this.ipsecConfigs;
    }
    /**
     * @return The local subnet of the VPN connection.
     * 
     */
    public String localSubnet() {
        return this.localSubnet;
    }
    /**
     * @return The name of the VPN connection.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The remote subnet of the VPN connection.
     * 
     */
    public String remoteSubnet() {
        return this.remoteSubnet;
    }
    /**
     * @return The status of the VPN connection, valid value:ike_sa_not_established, ike_sa_established, ipsec_sa_not_established, ipsec_sa_established.
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return Use the VPN gateway ID as the search key.
     * 
     */
    public String vpnGatewayId() {
        return this.vpnGatewayId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetConnectionsConnection defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String createTime;
        private String customerGatewayId;
        private Boolean effectImmediately;
        private String id;
        private @Nullable List<GetConnectionsConnectionIkeConfig> ikeConfigs;
        private @Nullable List<GetConnectionsConnectionIpsecConfig> ipsecConfigs;
        private String localSubnet;
        private String name;
        private String remoteSubnet;
        private String status;
        private String vpnGatewayId;
        public Builder() {}
        public Builder(GetConnectionsConnection defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.createTime = defaults.createTime;
    	      this.customerGatewayId = defaults.customerGatewayId;
    	      this.effectImmediately = defaults.effectImmediately;
    	      this.id = defaults.id;
    	      this.ikeConfigs = defaults.ikeConfigs;
    	      this.ipsecConfigs = defaults.ipsecConfigs;
    	      this.localSubnet = defaults.localSubnet;
    	      this.name = defaults.name;
    	      this.remoteSubnet = defaults.remoteSubnet;
    	      this.status = defaults.status;
    	      this.vpnGatewayId = defaults.vpnGatewayId;
        }

        @CustomType.Setter
        public Builder createTime(String createTime) {
            this.createTime = Objects.requireNonNull(createTime);
            return this;
        }
        @CustomType.Setter
        public Builder customerGatewayId(String customerGatewayId) {
            this.customerGatewayId = Objects.requireNonNull(customerGatewayId);
            return this;
        }
        @CustomType.Setter
        public Builder effectImmediately(Boolean effectImmediately) {
            this.effectImmediately = Objects.requireNonNull(effectImmediately);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder ikeConfigs(@Nullable List<GetConnectionsConnectionIkeConfig> ikeConfigs) {
            this.ikeConfigs = ikeConfigs;
            return this;
        }
        public Builder ikeConfigs(GetConnectionsConnectionIkeConfig... ikeConfigs) {
            return ikeConfigs(List.of(ikeConfigs));
        }
        @CustomType.Setter
        public Builder ipsecConfigs(@Nullable List<GetConnectionsConnectionIpsecConfig> ipsecConfigs) {
            this.ipsecConfigs = ipsecConfigs;
            return this;
        }
        public Builder ipsecConfigs(GetConnectionsConnectionIpsecConfig... ipsecConfigs) {
            return ipsecConfigs(List.of(ipsecConfigs));
        }
        @CustomType.Setter
        public Builder localSubnet(String localSubnet) {
            this.localSubnet = Objects.requireNonNull(localSubnet);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder remoteSubnet(String remoteSubnet) {
            this.remoteSubnet = Objects.requireNonNull(remoteSubnet);
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            this.status = Objects.requireNonNull(status);
            return this;
        }
        @CustomType.Setter
        public Builder vpnGatewayId(String vpnGatewayId) {
            this.vpnGatewayId = Objects.requireNonNull(vpnGatewayId);
            return this;
        }
        public GetConnectionsConnection build() {
            final var o = new GetConnectionsConnection();
            o.createTime = createTime;
            o.customerGatewayId = customerGatewayId;
            o.effectImmediately = effectImmediately;
            o.id = id;
            o.ikeConfigs = ikeConfigs;
            o.ipsecConfigs = ipsecConfigs;
            o.localSubnet = localSubnet;
            o.name = name;
            o.remoteSubnet = remoteSubnet;
            o.status = status;
            o.vpnGatewayId = vpnGatewayId;
            return o;
        }
    }
}
