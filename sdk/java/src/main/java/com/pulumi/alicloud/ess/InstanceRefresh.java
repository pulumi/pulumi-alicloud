// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.ess;

import com.pulumi.alicloud.Utilities;
import com.pulumi.alicloud.ess.InstanceRefreshArgs;
import com.pulumi.alicloud.ess.inputs.InstanceRefreshState;
import com.pulumi.alicloud.ess.outputs.InstanceRefreshCheckpoint;
import com.pulumi.alicloud.ess.outputs.InstanceRefreshDesiredConfigurationContainer;
import com.pulumi.alicloud.ess.outputs.InstanceRefreshDesiredConfigurationLaunchTemplateOverride;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * ## Import
 * 
 * ESS instance refresh can be imported using the id, e.g.
 * 
 * ```sh
 * $ pulumi import alicloud:ess/instanceRefresh:InstanceRefresh example ir-abc123456
 * ```
 * 
 */
@ResourceType(type="alicloud:ess/instanceRefresh:InstanceRefresh")
public class InstanceRefresh extends com.pulumi.resources.CustomResource {
    /**
     * The duration of the pause when the task reaches a checkpoint. Unit: minutes.
     * 
     */
    @Export(name="checkpointPauseTime", refs={Integer.class}, tree="[0]")
    private Output<Integer> checkpointPauseTime;

    /**
     * @return The duration of the pause when the task reaches a checkpoint. Unit: minutes.
     * 
     */
    public Output<Integer> checkpointPauseTime() {
        return this.checkpointPauseTime;
    }
    /**
     * The checkpoints for the refresh task. The task automatically pauses for the duration specified by CheckpointPauseTime when the percentage of new instances reaches a specified value. See `checkpoints` below for details.
     * 
     */
    @Export(name="checkpoints", refs={List.class,InstanceRefreshCheckpoint.class}, tree="[0,1]")
    private Output</* @Nullable */ List<InstanceRefreshCheckpoint>> checkpoints;

    /**
     * @return The checkpoints for the refresh task. The task automatically pauses for the duration specified by CheckpointPauseTime when the percentage of new instances reaches a specified value. See `checkpoints` below for details.
     * 
     */
    public Output<Optional<List<InstanceRefreshCheckpoint>>> checkpoints() {
        return Codegen.optional(this.checkpoints);
    }
    /**
     * The list of containers in the instance. See `desiredConfigurationContainers` below for details.
     * 
     */
    @Export(name="desiredConfigurationContainers", refs={List.class,InstanceRefreshDesiredConfigurationContainer.class}, tree="[0,1]")
    private Output</* @Nullable */ List<InstanceRefreshDesiredConfigurationContainer>> desiredConfigurationContainers;

    /**
     * @return The list of containers in the instance. See `desiredConfigurationContainers` below for details.
     * 
     */
    public Output<Optional<List<InstanceRefreshDesiredConfigurationContainer>>> desiredConfigurationContainers() {
        return Codegen.optional(this.desiredConfigurationContainers);
    }
    /**
     * The ID of the image file. This is the image resource used for automatic instance creation.
     * 
     */
    @Export(name="desiredConfigurationImageId", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> desiredConfigurationImageId;

    /**
     * @return The ID of the image file. This is the image resource used for automatic instance creation.
     * 
     */
    public Output<Optional<String>> desiredConfigurationImageId() {
        return Codegen.optional(this.desiredConfigurationImageId);
    }
    /**
     * The ID of the launch template. The scaling group uses this template to obtain launch configuration information.
     * 
     */
    @Export(name="desiredConfigurationLaunchTemplateId", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> desiredConfigurationLaunchTemplateId;

    /**
     * @return The ID of the launch template. The scaling group uses this template to obtain launch configuration information.
     * 
     */
    public Output<Optional<String>> desiredConfigurationLaunchTemplateId() {
        return Codegen.optional(this.desiredConfigurationLaunchTemplateId);
    }
    /**
     * The instance type information in the launch template overrides. See `desiredConfigurationLaunchTemplateOverrides` below for details.
     * 
     */
    @Export(name="desiredConfigurationLaunchTemplateOverrides", refs={List.class,InstanceRefreshDesiredConfigurationLaunchTemplateOverride.class}, tree="[0,1]")
    private Output</* @Nullable */ List<InstanceRefreshDesiredConfigurationLaunchTemplateOverride>> desiredConfigurationLaunchTemplateOverrides;

    /**
     * @return The instance type information in the launch template overrides. See `desiredConfigurationLaunchTemplateOverrides` below for details.
     * 
     */
    public Output<Optional<List<InstanceRefreshDesiredConfigurationLaunchTemplateOverride>>> desiredConfigurationLaunchTemplateOverrides() {
        return Codegen.optional(this.desiredConfigurationLaunchTemplateOverrides);
    }
    /**
     * The version of the launch template.
     * 
     */
    @Export(name="desiredConfigurationLaunchTemplateVersion", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> desiredConfigurationLaunchTemplateVersion;

    /**
     * @return The version of the launch template.
     * 
     */
    public Output<Optional<String>> desiredConfigurationLaunchTemplateVersion() {
        return Codegen.optional(this.desiredConfigurationLaunchTemplateVersion);
    }
    /**
     * The percentage by which the number of instances in the scaling group can exceed the group&#39;s capacity during the instance refresh.
     * 
     */
    @Export(name="maxHealthyPercentage", refs={Integer.class}, tree="[0]")
    private Output<Integer> maxHealthyPercentage;

    /**
     * @return The percentage by which the number of instances in the scaling group can exceed the group&#39;s capacity during the instance refresh.
     * 
     */
    public Output<Integer> maxHealthyPercentage() {
        return this.maxHealthyPercentage;
    }
    /**
     * The percentage of instances that must be healthy in the scaling group during the instance refresh. The value is a percentage of the scaling group&#39;s capacity.
     * 
     */
    @Export(name="minHealthyPercentage", refs={Integer.class}, tree="[0]")
    private Output<Integer> minHealthyPercentage;

    /**
     * @return The percentage of instances that must be healthy in the scaling group during the instance refresh. The value is a percentage of the scaling group&#39;s capacity.
     * 
     */
    public Output<Integer> minHealthyPercentage() {
        return this.minHealthyPercentage;
    }
    /**
     * The ID of the scaling group.
     * 
     */
    @Export(name="scalingGroupId", refs={String.class}, tree="[0]")
    private Output<String> scalingGroupId;

    /**
     * @return The ID of the scaling group.
     * 
     */
    public Output<String> scalingGroupId() {
        return this.scalingGroupId;
    }
    /**
     * Indicates whether to skip instances that match the desired configuration.
     * 
     */
    @Export(name="skipMatching", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> skipMatching;

    /**
     * @return Indicates whether to skip instances that match the desired configuration.
     * 
     */
    public Output<Boolean> skipMatching() {
        return this.skipMatching;
    }
    /**
     * The current status of the instance refresh task. Possible values:
     * - Pending: The instance refresh task is created and waiting to be scheduled.
     * - InProgress: The instance refresh task is in progress.
     * - Paused: The instance refresh task is paused.
     * - CheckpointPause: The task is paused because it has reached a checkpoint (Checkpoint.Percentage).
     * - Failed: The instance refresh task failed.
     * - Successful: The instance refresh task was successful.
     * - Cancelling: The instance refresh task is being canceled.
     * - RollbackInProgress: The instance refresh task is being rolled back.
     * - RollbackSuccessful: The instance refresh task was rolled back successfully. Set RollbackSuccessful to rollback the instance refresh task.
     * - RollbackFailed: The rollback of the instance refresh task failed.
     * - Cancelled:  The instance refresh task is canceled. Set Cancelled to cancel the instance refresh task.
     * 
     */
    @Export(name="status", refs={String.class}, tree="[0]")
    private Output<String> status;

    /**
     * @return The current status of the instance refresh task. Possible values:
     * - Pending: The instance refresh task is created and waiting to be scheduled.
     * - InProgress: The instance refresh task is in progress.
     * - Paused: The instance refresh task is paused.
     * - CheckpointPause: The task is paused because it has reached a checkpoint (Checkpoint.Percentage).
     * - Failed: The instance refresh task failed.
     * - Successful: The instance refresh task was successful.
     * - Cancelling: The instance refresh task is being canceled.
     * - RollbackInProgress: The instance refresh task is being rolled back.
     * - RollbackSuccessful: The instance refresh task was rolled back successfully. Set RollbackSuccessful to rollback the instance refresh task.
     * - RollbackFailed: The rollback of the instance refresh task failed.
     * - Cancelled:  The instance refresh task is canceled. Set Cancelled to cancel the instance refresh task.
     * 
     */
    public Output<String> status() {
        return this.status;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public InstanceRefresh(java.lang.String name) {
        this(name, InstanceRefreshArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public InstanceRefresh(java.lang.String name, InstanceRefreshArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public InstanceRefresh(java.lang.String name, InstanceRefreshArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("alicloud:ess/instanceRefresh:InstanceRefresh", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private InstanceRefresh(java.lang.String name, Output<java.lang.String> id, @Nullable InstanceRefreshState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("alicloud:ess/instanceRefresh:InstanceRefresh", name, state, makeResourceOptions(options, id), false);
    }

    private static InstanceRefreshArgs makeArgs(InstanceRefreshArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? InstanceRefreshArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static InstanceRefresh get(java.lang.String name, Output<java.lang.String> id, @Nullable InstanceRefreshState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new InstanceRefresh(name, id, state, options);
    }
}
