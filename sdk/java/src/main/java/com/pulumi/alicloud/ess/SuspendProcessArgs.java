// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.ess;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;


public final class SuspendProcessArgs extends com.pulumi.resources.ResourceArgs {

    public static final SuspendProcessArgs Empty = new SuspendProcessArgs();

    /**
     * Activity type N that you want to suspend. Valid values are: `SCALE_OUT`,`SCALE_IN`,`HealthCheck`,`AlarmNotification` and `ScheduledAction`.
     * 
     */
    @Import(name="process", required=true)
    private Output<String> process;

    /**
     * @return Activity type N that you want to suspend. Valid values are: `SCALE_OUT`,`SCALE_IN`,`HealthCheck`,`AlarmNotification` and `ScheduledAction`.
     * 
     */
    public Output<String> process() {
        return this.process;
    }

    /**
     * ID of the scaling group.
     * 
     */
    @Import(name="scalingGroupId", required=true)
    private Output<String> scalingGroupId;

    /**
     * @return ID of the scaling group.
     * 
     */
    public Output<String> scalingGroupId() {
        return this.scalingGroupId;
    }

    private SuspendProcessArgs() {}

    private SuspendProcessArgs(SuspendProcessArgs $) {
        this.process = $.process;
        this.scalingGroupId = $.scalingGroupId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SuspendProcessArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SuspendProcessArgs $;

        public Builder() {
            $ = new SuspendProcessArgs();
        }

        public Builder(SuspendProcessArgs defaults) {
            $ = new SuspendProcessArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param process Activity type N that you want to suspend. Valid values are: `SCALE_OUT`,`SCALE_IN`,`HealthCheck`,`AlarmNotification` and `ScheduledAction`.
         * 
         * @return builder
         * 
         */
        public Builder process(Output<String> process) {
            $.process = process;
            return this;
        }

        /**
         * @param process Activity type N that you want to suspend. Valid values are: `SCALE_OUT`,`SCALE_IN`,`HealthCheck`,`AlarmNotification` and `ScheduledAction`.
         * 
         * @return builder
         * 
         */
        public Builder process(String process) {
            return process(Output.of(process));
        }

        /**
         * @param scalingGroupId ID of the scaling group.
         * 
         * @return builder
         * 
         */
        public Builder scalingGroupId(Output<String> scalingGroupId) {
            $.scalingGroupId = scalingGroupId;
            return this;
        }

        /**
         * @param scalingGroupId ID of the scaling group.
         * 
         * @return builder
         * 
         */
        public Builder scalingGroupId(String scalingGroupId) {
            return scalingGroupId(Output.of(scalingGroupId));
        }

        public SuspendProcessArgs build() {
            if ($.process == null) {
                throw new MissingRequiredPropertyException("SuspendProcessArgs", "process");
            }
            if ($.scalingGroupId == null) {
                throw new MissingRequiredPropertyException("SuspendProcessArgs", "scalingGroupId");
            }
            return $;
        }
    }

}
