// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.slb.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ListenerXForwardedForArgs extends com.pulumi.resources.ResourceArgs {

    public static final ListenerXForwardedForArgs Empty = new ListenerXForwardedForArgs();

    /**
     * Whether to retrieve the client ip. It is read-only attribute.
     * 
     */
    @Import(name="retriveClientIp")
    private @Nullable Output<Boolean> retriveClientIp;

    /**
     * @return Whether to retrieve the client ip. It is read-only attribute.
     * 
     */
    public Optional<Output<Boolean>> retriveClientIp() {
        return Optional.ofNullable(this.retriveClientIp);
    }

    /**
     * Whether to use the XForwardedFor header to obtain the ID of the SLB instance. Default to false.
     * 
     */
    @Import(name="retriveSlbId")
    private @Nullable Output<Boolean> retriveSlbId;

    /**
     * @return Whether to use the XForwardedFor header to obtain the ID of the SLB instance. Default to false.
     * 
     */
    public Optional<Output<Boolean>> retriveSlbId() {
        return Optional.ofNullable(this.retriveSlbId);
    }

    /**
     * Whether to use the XForwardedFor_SLBIP header to obtain the public IP address of the SLB instance. Default to false.
     * 
     */
    @Import(name="retriveSlbIp")
    private @Nullable Output<Boolean> retriveSlbIp;

    /**
     * @return Whether to use the XForwardedFor_SLBIP header to obtain the public IP address of the SLB instance. Default to false.
     * 
     */
    public Optional<Output<Boolean>> retriveSlbIp() {
        return Optional.ofNullable(this.retriveSlbIp);
    }

    /**
     * Whether to use the XForwardedFor_proto header to obtain the protocol used by the listener. Default to false.
     * 
     */
    @Import(name="retriveSlbProto")
    private @Nullable Output<Boolean> retriveSlbProto;

    /**
     * @return Whether to use the XForwardedFor_proto header to obtain the protocol used by the listener. Default to false.
     * 
     */
    public Optional<Output<Boolean>> retriveSlbProto() {
        return Optional.ofNullable(this.retriveSlbProto);
    }

    private ListenerXForwardedForArgs() {}

    private ListenerXForwardedForArgs(ListenerXForwardedForArgs $) {
        this.retriveClientIp = $.retriveClientIp;
        this.retriveSlbId = $.retriveSlbId;
        this.retriveSlbIp = $.retriveSlbIp;
        this.retriveSlbProto = $.retriveSlbProto;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ListenerXForwardedForArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ListenerXForwardedForArgs $;

        public Builder() {
            $ = new ListenerXForwardedForArgs();
        }

        public Builder(ListenerXForwardedForArgs defaults) {
            $ = new ListenerXForwardedForArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param retriveClientIp Whether to retrieve the client ip. It is read-only attribute.
         * 
         * @return builder
         * 
         */
        public Builder retriveClientIp(@Nullable Output<Boolean> retriveClientIp) {
            $.retriveClientIp = retriveClientIp;
            return this;
        }

        /**
         * @param retriveClientIp Whether to retrieve the client ip. It is read-only attribute.
         * 
         * @return builder
         * 
         */
        public Builder retriveClientIp(Boolean retriveClientIp) {
            return retriveClientIp(Output.of(retriveClientIp));
        }

        /**
         * @param retriveSlbId Whether to use the XForwardedFor header to obtain the ID of the SLB instance. Default to false.
         * 
         * @return builder
         * 
         */
        public Builder retriveSlbId(@Nullable Output<Boolean> retriveSlbId) {
            $.retriveSlbId = retriveSlbId;
            return this;
        }

        /**
         * @param retriveSlbId Whether to use the XForwardedFor header to obtain the ID of the SLB instance. Default to false.
         * 
         * @return builder
         * 
         */
        public Builder retriveSlbId(Boolean retriveSlbId) {
            return retriveSlbId(Output.of(retriveSlbId));
        }

        /**
         * @param retriveSlbIp Whether to use the XForwardedFor_SLBIP header to obtain the public IP address of the SLB instance. Default to false.
         * 
         * @return builder
         * 
         */
        public Builder retriveSlbIp(@Nullable Output<Boolean> retriveSlbIp) {
            $.retriveSlbIp = retriveSlbIp;
            return this;
        }

        /**
         * @param retriveSlbIp Whether to use the XForwardedFor_SLBIP header to obtain the public IP address of the SLB instance. Default to false.
         * 
         * @return builder
         * 
         */
        public Builder retriveSlbIp(Boolean retriveSlbIp) {
            return retriveSlbIp(Output.of(retriveSlbIp));
        }

        /**
         * @param retriveSlbProto Whether to use the XForwardedFor_proto header to obtain the protocol used by the listener. Default to false.
         * 
         * @return builder
         * 
         */
        public Builder retriveSlbProto(@Nullable Output<Boolean> retriveSlbProto) {
            $.retriveSlbProto = retriveSlbProto;
            return this;
        }

        /**
         * @param retriveSlbProto Whether to use the XForwardedFor_proto header to obtain the protocol used by the listener. Default to false.
         * 
         * @return builder
         * 
         */
        public Builder retriveSlbProto(Boolean retriveSlbProto) {
            return retriveSlbProto(Output.of(retriveSlbProto));
        }

        public ListenerXForwardedForArgs build() {
            return $;
        }
    }

}
