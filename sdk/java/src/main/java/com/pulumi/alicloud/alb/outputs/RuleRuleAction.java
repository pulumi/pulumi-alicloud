// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.alb.outputs;

import com.pulumi.alicloud.alb.outputs.RuleRuleActionCorsConfig;
import com.pulumi.alicloud.alb.outputs.RuleRuleActionFixedResponseConfig;
import com.pulumi.alicloud.alb.outputs.RuleRuleActionForwardGroupConfig;
import com.pulumi.alicloud.alb.outputs.RuleRuleActionInsertHeaderConfig;
import com.pulumi.alicloud.alb.outputs.RuleRuleActionRedirectConfig;
import com.pulumi.alicloud.alb.outputs.RuleRuleActionRemoveHeaderConfig;
import com.pulumi.alicloud.alb.outputs.RuleRuleActionRewriteConfig;
import com.pulumi.alicloud.alb.outputs.RuleRuleActionTrafficLimitConfig;
import com.pulumi.alicloud.alb.outputs.RuleRuleActionTrafficMirrorConfig;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class RuleRuleAction {
    /**
     * @return Request forwarding based on CORS. See `cors_config` below.
     * 
     */
    private @Nullable RuleRuleActionCorsConfig corsConfig;
    /**
     * @return The configuration of the fixed response. See `fixed_response_config` below.
     * 
     */
    private @Nullable RuleRuleActionFixedResponseConfig fixedResponseConfig;
    /**
     * @return The forward response action within ALB. See `forward_group_config` below.
     * 
     */
    private @Nullable RuleRuleActionForwardGroupConfig forwardGroupConfig;
    /**
     * @return The configuration of the inserted header field. See `insert_header_config` below.
     * 
     */
    private @Nullable RuleRuleActionInsertHeaderConfig insertHeaderConfig;
    /**
     * @return The order of the forwarding rule actions. Valid values: `1` to `50000`. The actions are performed in ascending order. You cannot leave this parameter empty. Each value must be unique.
     * 
     */
    private Integer order;
    /**
     * @return The configuration of the external redirect action. See `redirect_config` below.
     * 
     */
    private @Nullable RuleRuleActionRedirectConfig redirectConfig;
    /**
     * @return The configuration of the inserted header field. See `remove_header_config` below.
     * 
     */
    private @Nullable RuleRuleActionRemoveHeaderConfig removeHeaderConfig;
    /**
     * @return The redirect action within ALB. See `rewrite_config` below.
     * 
     */
    private @Nullable RuleRuleActionRewriteConfig rewriteConfig;
    /**
     * @return The Flow speed limit. See `traffic_limit_config` below.
     * 
     */
    private @Nullable RuleRuleActionTrafficLimitConfig trafficLimitConfig;
    /**
     * @return The Traffic mirroring. See `traffic_mirror_config` below.
     * 
     */
    private @Nullable RuleRuleActionTrafficMirrorConfig trafficMirrorConfig;
    /**
     * @return The action type. Valid values: `ForwardGroup`, `Redirect`, `FixedResponse`, `Rewrite`, `InsertHeader`, `RemoveHeader`, `TrafficLimit`, `TrafficMirror` and `Cors`.
     * **Note:** The preceding actions can be classified into two types:  `FinalType`: A forwarding rule can contain only one `FinalType` action, which is executed last. This type of action can contain only one `ForwardGroup`, `Redirect` or `FixedResponse` action. `ExtType`: A forwarding rule can contain one or more `ExtType` actions, which are executed before `FinalType` actions and need to coexist with the `FinalType` actions. This type of action can contain multiple `InsertHeader` actions or one `Rewrite` action.
     * **NOTE:** The `TrafficLimit` and `TrafficMirror` option is available since 1.162.0.
     * **NOTE:** From version 1.205.0, `type` can be set to `Cors`.
     * 
     */
    private String type;

    private RuleRuleAction() {}
    /**
     * @return Request forwarding based on CORS. See `cors_config` below.
     * 
     */
    public Optional<RuleRuleActionCorsConfig> corsConfig() {
        return Optional.ofNullable(this.corsConfig);
    }
    /**
     * @return The configuration of the fixed response. See `fixed_response_config` below.
     * 
     */
    public Optional<RuleRuleActionFixedResponseConfig> fixedResponseConfig() {
        return Optional.ofNullable(this.fixedResponseConfig);
    }
    /**
     * @return The forward response action within ALB. See `forward_group_config` below.
     * 
     */
    public Optional<RuleRuleActionForwardGroupConfig> forwardGroupConfig() {
        return Optional.ofNullable(this.forwardGroupConfig);
    }
    /**
     * @return The configuration of the inserted header field. See `insert_header_config` below.
     * 
     */
    public Optional<RuleRuleActionInsertHeaderConfig> insertHeaderConfig() {
        return Optional.ofNullable(this.insertHeaderConfig);
    }
    /**
     * @return The order of the forwarding rule actions. Valid values: `1` to `50000`. The actions are performed in ascending order. You cannot leave this parameter empty. Each value must be unique.
     * 
     */
    public Integer order() {
        return this.order;
    }
    /**
     * @return The configuration of the external redirect action. See `redirect_config` below.
     * 
     */
    public Optional<RuleRuleActionRedirectConfig> redirectConfig() {
        return Optional.ofNullable(this.redirectConfig);
    }
    /**
     * @return The configuration of the inserted header field. See `remove_header_config` below.
     * 
     */
    public Optional<RuleRuleActionRemoveHeaderConfig> removeHeaderConfig() {
        return Optional.ofNullable(this.removeHeaderConfig);
    }
    /**
     * @return The redirect action within ALB. See `rewrite_config` below.
     * 
     */
    public Optional<RuleRuleActionRewriteConfig> rewriteConfig() {
        return Optional.ofNullable(this.rewriteConfig);
    }
    /**
     * @return The Flow speed limit. See `traffic_limit_config` below.
     * 
     */
    public Optional<RuleRuleActionTrafficLimitConfig> trafficLimitConfig() {
        return Optional.ofNullable(this.trafficLimitConfig);
    }
    /**
     * @return The Traffic mirroring. See `traffic_mirror_config` below.
     * 
     */
    public Optional<RuleRuleActionTrafficMirrorConfig> trafficMirrorConfig() {
        return Optional.ofNullable(this.trafficMirrorConfig);
    }
    /**
     * @return The action type. Valid values: `ForwardGroup`, `Redirect`, `FixedResponse`, `Rewrite`, `InsertHeader`, `RemoveHeader`, `TrafficLimit`, `TrafficMirror` and `Cors`.
     * **Note:** The preceding actions can be classified into two types:  `FinalType`: A forwarding rule can contain only one `FinalType` action, which is executed last. This type of action can contain only one `ForwardGroup`, `Redirect` or `FixedResponse` action. `ExtType`: A forwarding rule can contain one or more `ExtType` actions, which are executed before `FinalType` actions and need to coexist with the `FinalType` actions. This type of action can contain multiple `InsertHeader` actions or one `Rewrite` action.
     * **NOTE:** The `TrafficLimit` and `TrafficMirror` option is available since 1.162.0.
     * **NOTE:** From version 1.205.0, `type` can be set to `Cors`.
     * 
     */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RuleRuleAction defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable RuleRuleActionCorsConfig corsConfig;
        private @Nullable RuleRuleActionFixedResponseConfig fixedResponseConfig;
        private @Nullable RuleRuleActionForwardGroupConfig forwardGroupConfig;
        private @Nullable RuleRuleActionInsertHeaderConfig insertHeaderConfig;
        private Integer order;
        private @Nullable RuleRuleActionRedirectConfig redirectConfig;
        private @Nullable RuleRuleActionRemoveHeaderConfig removeHeaderConfig;
        private @Nullable RuleRuleActionRewriteConfig rewriteConfig;
        private @Nullable RuleRuleActionTrafficLimitConfig trafficLimitConfig;
        private @Nullable RuleRuleActionTrafficMirrorConfig trafficMirrorConfig;
        private String type;
        public Builder() {}
        public Builder(RuleRuleAction defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.corsConfig = defaults.corsConfig;
    	      this.fixedResponseConfig = defaults.fixedResponseConfig;
    	      this.forwardGroupConfig = defaults.forwardGroupConfig;
    	      this.insertHeaderConfig = defaults.insertHeaderConfig;
    	      this.order = defaults.order;
    	      this.redirectConfig = defaults.redirectConfig;
    	      this.removeHeaderConfig = defaults.removeHeaderConfig;
    	      this.rewriteConfig = defaults.rewriteConfig;
    	      this.trafficLimitConfig = defaults.trafficLimitConfig;
    	      this.trafficMirrorConfig = defaults.trafficMirrorConfig;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder corsConfig(@Nullable RuleRuleActionCorsConfig corsConfig) {

            this.corsConfig = corsConfig;
            return this;
        }
        @CustomType.Setter
        public Builder fixedResponseConfig(@Nullable RuleRuleActionFixedResponseConfig fixedResponseConfig) {

            this.fixedResponseConfig = fixedResponseConfig;
            return this;
        }
        @CustomType.Setter
        public Builder forwardGroupConfig(@Nullable RuleRuleActionForwardGroupConfig forwardGroupConfig) {

            this.forwardGroupConfig = forwardGroupConfig;
            return this;
        }
        @CustomType.Setter
        public Builder insertHeaderConfig(@Nullable RuleRuleActionInsertHeaderConfig insertHeaderConfig) {

            this.insertHeaderConfig = insertHeaderConfig;
            return this;
        }
        @CustomType.Setter
        public Builder order(Integer order) {
            if (order == null) {
              throw new MissingRequiredPropertyException("RuleRuleAction", "order");
            }
            this.order = order;
            return this;
        }
        @CustomType.Setter
        public Builder redirectConfig(@Nullable RuleRuleActionRedirectConfig redirectConfig) {

            this.redirectConfig = redirectConfig;
            return this;
        }
        @CustomType.Setter
        public Builder removeHeaderConfig(@Nullable RuleRuleActionRemoveHeaderConfig removeHeaderConfig) {

            this.removeHeaderConfig = removeHeaderConfig;
            return this;
        }
        @CustomType.Setter
        public Builder rewriteConfig(@Nullable RuleRuleActionRewriteConfig rewriteConfig) {

            this.rewriteConfig = rewriteConfig;
            return this;
        }
        @CustomType.Setter
        public Builder trafficLimitConfig(@Nullable RuleRuleActionTrafficLimitConfig trafficLimitConfig) {

            this.trafficLimitConfig = trafficLimitConfig;
            return this;
        }
        @CustomType.Setter
        public Builder trafficMirrorConfig(@Nullable RuleRuleActionTrafficMirrorConfig trafficMirrorConfig) {

            this.trafficMirrorConfig = trafficMirrorConfig;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("RuleRuleAction", "type");
            }
            this.type = type;
            return this;
        }
        public RuleRuleAction build() {
            final var _resultValue = new RuleRuleAction();
            _resultValue.corsConfig = corsConfig;
            _resultValue.fixedResponseConfig = fixedResponseConfig;
            _resultValue.forwardGroupConfig = forwardGroupConfig;
            _resultValue.insertHeaderConfig = insertHeaderConfig;
            _resultValue.order = order;
            _resultValue.redirectConfig = redirectConfig;
            _resultValue.removeHeaderConfig = removeHeaderConfig;
            _resultValue.rewriteConfig = rewriteConfig;
            _resultValue.trafficLimitConfig = trafficLimitConfig;
            _resultValue.trafficMirrorConfig = trafficMirrorConfig;
            _resultValue.type = type;
            return _resultValue;
        }
    }
}
