// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.ecs.outputs;

import com.pulumi.alicloud.ecs.outputs.GetImagesImageDiskDeviceMapping;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;

@CustomType
public final class GetImagesImage {
    /**
     * @return The image architecture. Valid values: `i386` and `x86_64`.
     * 
     */
    private String architecture;
    /**
     * @return Time of creation.
     * 
     */
    private String creationTime;
    /**
     * @return Description of the image.
     * 
     */
    private String description;
    /**
     * @return Description of the system with disks and snapshots under the image.
     * 
     */
    private List<GetImagesImageDiskDeviceMapping> diskDeviceMappings;
    /**
     * @return ID of the image.
     * 
     */
    private String id;
    /**
     * @return The ID of the image.
     * 
     */
    private String imageId;
    /**
     * @return Alias of the image owner.
     * 
     */
    private String imageOwnerAlias;
    /**
     * @return Version of the image.
     * 
     */
    private String imageVersion;
    private Boolean isCopied;
    private String isSelfShared;
    /**
     * @return Whether the user has subscribed to the terms of service for the image product corresponding to the ProductCode.
     * 
     */
    private Boolean isSubscribed;
    /**
     * @return Specifies whether the image can be used on I/O optimized instances.
     * 
     */
    private Boolean isSupportIoOptimized;
    private String name;
    /**
     * @return Display Chinese name of the OS.
     * 
     */
    private String osName;
    /**
     * @return Display English name of the OS.
     * 
     */
    private String osNameEn;
    /**
     * @return The operating system type of the image. Valid values: `windows` and `linux`.
     * 
     */
    private String osType;
    private String platform;
    /**
     * @return Product code of the image on the image market.
     * 
     */
    private String productCode;
    /**
     * @return Progress of image creation, presented in percentages.
     * 
     */
    private String progress;
    /**
     * @return Size of the created disk.
     * 
     */
    private Integer size;
    private String state;
    /**
     * @return The status of the image. The following values are available, Separate multiple parameter values by using commas (,). Default value: `Available`. Valid values:
     * 
     */
    private String status;
    /**
     * @return A mapping of tags to assign to the resource.
     * 
     */
    private @Nullable Map<String,Object> tags;
    /**
     * @return Specifies whether to check the validity of the request without actually making the request. Valid values:
     * 
     */
    private String usage;

    private GetImagesImage() {}
    /**
     * @return The image architecture. Valid values: `i386` and `x86_64`.
     * 
     */
    public String architecture() {
        return this.architecture;
    }
    /**
     * @return Time of creation.
     * 
     */
    public String creationTime() {
        return this.creationTime;
    }
    /**
     * @return Description of the image.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return Description of the system with disks and snapshots under the image.
     * 
     */
    public List<GetImagesImageDiskDeviceMapping> diskDeviceMappings() {
        return this.diskDeviceMappings;
    }
    /**
     * @return ID of the image.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The ID of the image.
     * 
     */
    public String imageId() {
        return this.imageId;
    }
    /**
     * @return Alias of the image owner.
     * 
     */
    public String imageOwnerAlias() {
        return this.imageOwnerAlias;
    }
    /**
     * @return Version of the image.
     * 
     */
    public String imageVersion() {
        return this.imageVersion;
    }
    public Boolean isCopied() {
        return this.isCopied;
    }
    public String isSelfShared() {
        return this.isSelfShared;
    }
    /**
     * @return Whether the user has subscribed to the terms of service for the image product corresponding to the ProductCode.
     * 
     */
    public Boolean isSubscribed() {
        return this.isSubscribed;
    }
    /**
     * @return Specifies whether the image can be used on I/O optimized instances.
     * 
     */
    public Boolean isSupportIoOptimized() {
        return this.isSupportIoOptimized;
    }
    public String name() {
        return this.name;
    }
    /**
     * @return Display Chinese name of the OS.
     * 
     */
    public String osName() {
        return this.osName;
    }
    /**
     * @return Display English name of the OS.
     * 
     */
    public String osNameEn() {
        return this.osNameEn;
    }
    /**
     * @return The operating system type of the image. Valid values: `windows` and `linux`.
     * 
     */
    public String osType() {
        return this.osType;
    }
    public String platform() {
        return this.platform;
    }
    /**
     * @return Product code of the image on the image market.
     * 
     */
    public String productCode() {
        return this.productCode;
    }
    /**
     * @return Progress of image creation, presented in percentages.
     * 
     */
    public String progress() {
        return this.progress;
    }
    /**
     * @return Size of the created disk.
     * 
     */
    public Integer size() {
        return this.size;
    }
    public String state() {
        return this.state;
    }
    /**
     * @return The status of the image. The following values are available, Separate multiple parameter values by using commas (,). Default value: `Available`. Valid values:
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return A mapping of tags to assign to the resource.
     * 
     */
    public Map<String,Object> tags() {
        return this.tags == null ? Map.of() : this.tags;
    }
    /**
     * @return Specifies whether to check the validity of the request without actually making the request. Valid values:
     * 
     */
    public String usage() {
        return this.usage;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetImagesImage defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String architecture;
        private String creationTime;
        private String description;
        private List<GetImagesImageDiskDeviceMapping> diskDeviceMappings;
        private String id;
        private String imageId;
        private String imageOwnerAlias;
        private String imageVersion;
        private Boolean isCopied;
        private String isSelfShared;
        private Boolean isSubscribed;
        private Boolean isSupportIoOptimized;
        private String name;
        private String osName;
        private String osNameEn;
        private String osType;
        private String platform;
        private String productCode;
        private String progress;
        private Integer size;
        private String state;
        private String status;
        private @Nullable Map<String,Object> tags;
        private String usage;
        public Builder() {}
        public Builder(GetImagesImage defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.architecture = defaults.architecture;
    	      this.creationTime = defaults.creationTime;
    	      this.description = defaults.description;
    	      this.diskDeviceMappings = defaults.diskDeviceMappings;
    	      this.id = defaults.id;
    	      this.imageId = defaults.imageId;
    	      this.imageOwnerAlias = defaults.imageOwnerAlias;
    	      this.imageVersion = defaults.imageVersion;
    	      this.isCopied = defaults.isCopied;
    	      this.isSelfShared = defaults.isSelfShared;
    	      this.isSubscribed = defaults.isSubscribed;
    	      this.isSupportIoOptimized = defaults.isSupportIoOptimized;
    	      this.name = defaults.name;
    	      this.osName = defaults.osName;
    	      this.osNameEn = defaults.osNameEn;
    	      this.osType = defaults.osType;
    	      this.platform = defaults.platform;
    	      this.productCode = defaults.productCode;
    	      this.progress = defaults.progress;
    	      this.size = defaults.size;
    	      this.state = defaults.state;
    	      this.status = defaults.status;
    	      this.tags = defaults.tags;
    	      this.usage = defaults.usage;
        }

        @CustomType.Setter
        public Builder architecture(String architecture) {
            if (architecture == null) {
              throw new MissingRequiredPropertyException("GetImagesImage", "architecture");
            }
            this.architecture = architecture;
            return this;
        }
        @CustomType.Setter
        public Builder creationTime(String creationTime) {
            if (creationTime == null) {
              throw new MissingRequiredPropertyException("GetImagesImage", "creationTime");
            }
            this.creationTime = creationTime;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetImagesImage", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder diskDeviceMappings(List<GetImagesImageDiskDeviceMapping> diskDeviceMappings) {
            if (diskDeviceMappings == null) {
              throw new MissingRequiredPropertyException("GetImagesImage", "diskDeviceMappings");
            }
            this.diskDeviceMappings = diskDeviceMappings;
            return this;
        }
        public Builder diskDeviceMappings(GetImagesImageDiskDeviceMapping... diskDeviceMappings) {
            return diskDeviceMappings(List.of(diskDeviceMappings));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetImagesImage", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder imageId(String imageId) {
            if (imageId == null) {
              throw new MissingRequiredPropertyException("GetImagesImage", "imageId");
            }
            this.imageId = imageId;
            return this;
        }
        @CustomType.Setter
        public Builder imageOwnerAlias(String imageOwnerAlias) {
            if (imageOwnerAlias == null) {
              throw new MissingRequiredPropertyException("GetImagesImage", "imageOwnerAlias");
            }
            this.imageOwnerAlias = imageOwnerAlias;
            return this;
        }
        @CustomType.Setter
        public Builder imageVersion(String imageVersion) {
            if (imageVersion == null) {
              throw new MissingRequiredPropertyException("GetImagesImage", "imageVersion");
            }
            this.imageVersion = imageVersion;
            return this;
        }
        @CustomType.Setter
        public Builder isCopied(Boolean isCopied) {
            if (isCopied == null) {
              throw new MissingRequiredPropertyException("GetImagesImage", "isCopied");
            }
            this.isCopied = isCopied;
            return this;
        }
        @CustomType.Setter
        public Builder isSelfShared(String isSelfShared) {
            if (isSelfShared == null) {
              throw new MissingRequiredPropertyException("GetImagesImage", "isSelfShared");
            }
            this.isSelfShared = isSelfShared;
            return this;
        }
        @CustomType.Setter
        public Builder isSubscribed(Boolean isSubscribed) {
            if (isSubscribed == null) {
              throw new MissingRequiredPropertyException("GetImagesImage", "isSubscribed");
            }
            this.isSubscribed = isSubscribed;
            return this;
        }
        @CustomType.Setter
        public Builder isSupportIoOptimized(Boolean isSupportIoOptimized) {
            if (isSupportIoOptimized == null) {
              throw new MissingRequiredPropertyException("GetImagesImage", "isSupportIoOptimized");
            }
            this.isSupportIoOptimized = isSupportIoOptimized;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetImagesImage", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder osName(String osName) {
            if (osName == null) {
              throw new MissingRequiredPropertyException("GetImagesImage", "osName");
            }
            this.osName = osName;
            return this;
        }
        @CustomType.Setter
        public Builder osNameEn(String osNameEn) {
            if (osNameEn == null) {
              throw new MissingRequiredPropertyException("GetImagesImage", "osNameEn");
            }
            this.osNameEn = osNameEn;
            return this;
        }
        @CustomType.Setter
        public Builder osType(String osType) {
            if (osType == null) {
              throw new MissingRequiredPropertyException("GetImagesImage", "osType");
            }
            this.osType = osType;
            return this;
        }
        @CustomType.Setter
        public Builder platform(String platform) {
            if (platform == null) {
              throw new MissingRequiredPropertyException("GetImagesImage", "platform");
            }
            this.platform = platform;
            return this;
        }
        @CustomType.Setter
        public Builder productCode(String productCode) {
            if (productCode == null) {
              throw new MissingRequiredPropertyException("GetImagesImage", "productCode");
            }
            this.productCode = productCode;
            return this;
        }
        @CustomType.Setter
        public Builder progress(String progress) {
            if (progress == null) {
              throw new MissingRequiredPropertyException("GetImagesImage", "progress");
            }
            this.progress = progress;
            return this;
        }
        @CustomType.Setter
        public Builder size(Integer size) {
            if (size == null) {
              throw new MissingRequiredPropertyException("GetImagesImage", "size");
            }
            this.size = size;
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetImagesImage", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            if (status == null) {
              throw new MissingRequiredPropertyException("GetImagesImage", "status");
            }
            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder tags(@Nullable Map<String,Object> tags) {

            this.tags = tags;
            return this;
        }
        @CustomType.Setter
        public Builder usage(String usage) {
            if (usage == null) {
              throw new MissingRequiredPropertyException("GetImagesImage", "usage");
            }
            this.usage = usage;
            return this;
        }
        public GetImagesImage build() {
            final var _resultValue = new GetImagesImage();
            _resultValue.architecture = architecture;
            _resultValue.creationTime = creationTime;
            _resultValue.description = description;
            _resultValue.diskDeviceMappings = diskDeviceMappings;
            _resultValue.id = id;
            _resultValue.imageId = imageId;
            _resultValue.imageOwnerAlias = imageOwnerAlias;
            _resultValue.imageVersion = imageVersion;
            _resultValue.isCopied = isCopied;
            _resultValue.isSelfShared = isSelfShared;
            _resultValue.isSubscribed = isSubscribed;
            _resultValue.isSupportIoOptimized = isSupportIoOptimized;
            _resultValue.name = name;
            _resultValue.osName = osName;
            _resultValue.osNameEn = osNameEn;
            _resultValue.osType = osType;
            _resultValue.platform = platform;
            _resultValue.productCode = productCode;
            _resultValue.progress = progress;
            _resultValue.size = size;
            _resultValue.state = state;
            _resultValue.status = status;
            _resultValue.tags = tags;
            _resultValue.usage = usage;
            return _resultValue;
        }
    }
}
