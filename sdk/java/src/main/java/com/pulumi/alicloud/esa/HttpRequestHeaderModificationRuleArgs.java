// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.esa;

import com.pulumi.alicloud.esa.inputs.HttpRequestHeaderModificationRuleRequestHeaderModificationArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class HttpRequestHeaderModificationRuleArgs extends com.pulumi.resources.ResourceArgs {

    public static final HttpRequestHeaderModificationRuleArgs Empty = new HttpRequestHeaderModificationRuleArgs();

    /**
     * The configurations of modifying request headers. You can add, delete, or modify a request header. See `request_header_modification` below.
     * 
     */
    @Import(name="requestHeaderModifications", required=true)
    private Output<List<HttpRequestHeaderModificationRuleRequestHeaderModificationArgs>> requestHeaderModifications;

    /**
     * @return The configurations of modifying request headers. You can add, delete, or modify a request header. See `request_header_modification` below.
     * 
     */
    public Output<List<HttpRequestHeaderModificationRuleRequestHeaderModificationArgs>> requestHeaderModifications() {
        return this.requestHeaderModifications;
    }

    /**
     * Rule content, using conditional expressions to match user requests. When adding global configuration, this parameter does not need to be set. There are two usage scenarios:
     * - Match all incoming requests: value set to true
     * - Match specified request: Set the value to a custom expression, for example: (http.host eq \&#34;video.example.com\&#34;)
     * 
     */
    @Import(name="rule")
    private @Nullable Output<String> rule;

    /**
     * @return Rule content, using conditional expressions to match user requests. When adding global configuration, this parameter does not need to be set. There are two usage scenarios:
     * - Match all incoming requests: value set to true
     * - Match specified request: Set the value to a custom expression, for example: (http.host eq \&#34;video.example.com\&#34;)
     * 
     */
    public Optional<Output<String>> rule() {
        return Optional.ofNullable(this.rule);
    }

    /**
     * Rule switch. When adding global configuration, this parameter does not need to be set. Value range:
     * - on: open.
     * - off: close.
     * 
     */
    @Import(name="ruleEnable")
    private @Nullable Output<String> ruleEnable;

    /**
     * @return Rule switch. When adding global configuration, this parameter does not need to be set. Value range:
     * - on: open.
     * - off: close.
     * 
     */
    public Optional<Output<String>> ruleEnable() {
        return Optional.ofNullable(this.ruleEnable);
    }

    /**
     * Rule name. When adding global configuration, this parameter does not need to be set.
     * 
     */
    @Import(name="ruleName")
    private @Nullable Output<String> ruleName;

    /**
     * @return Rule name. When adding global configuration, this parameter does not need to be set.
     * 
     */
    public Optional<Output<String>> ruleName() {
        return Optional.ofNullable(this.ruleName);
    }

    /**
     * The site ID.
     * 
     */
    @Import(name="siteId", required=true)
    private Output<Integer> siteId;

    /**
     * @return The site ID.
     * 
     */
    public Output<Integer> siteId() {
        return this.siteId;
    }

    /**
     * The version number of the website configurations.
     * 
     */
    @Import(name="siteVersion")
    private @Nullable Output<Integer> siteVersion;

    /**
     * @return The version number of the website configurations.
     * 
     */
    public Optional<Output<Integer>> siteVersion() {
        return Optional.ofNullable(this.siteVersion);
    }

    private HttpRequestHeaderModificationRuleArgs() {}

    private HttpRequestHeaderModificationRuleArgs(HttpRequestHeaderModificationRuleArgs $) {
        this.requestHeaderModifications = $.requestHeaderModifications;
        this.rule = $.rule;
        this.ruleEnable = $.ruleEnable;
        this.ruleName = $.ruleName;
        this.siteId = $.siteId;
        this.siteVersion = $.siteVersion;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(HttpRequestHeaderModificationRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private HttpRequestHeaderModificationRuleArgs $;

        public Builder() {
            $ = new HttpRequestHeaderModificationRuleArgs();
        }

        public Builder(HttpRequestHeaderModificationRuleArgs defaults) {
            $ = new HttpRequestHeaderModificationRuleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param requestHeaderModifications The configurations of modifying request headers. You can add, delete, or modify a request header. See `request_header_modification` below.
         * 
         * @return builder
         * 
         */
        public Builder requestHeaderModifications(Output<List<HttpRequestHeaderModificationRuleRequestHeaderModificationArgs>> requestHeaderModifications) {
            $.requestHeaderModifications = requestHeaderModifications;
            return this;
        }

        /**
         * @param requestHeaderModifications The configurations of modifying request headers. You can add, delete, or modify a request header. See `request_header_modification` below.
         * 
         * @return builder
         * 
         */
        public Builder requestHeaderModifications(List<HttpRequestHeaderModificationRuleRequestHeaderModificationArgs> requestHeaderModifications) {
            return requestHeaderModifications(Output.of(requestHeaderModifications));
        }

        /**
         * @param requestHeaderModifications The configurations of modifying request headers. You can add, delete, or modify a request header. See `request_header_modification` below.
         * 
         * @return builder
         * 
         */
        public Builder requestHeaderModifications(HttpRequestHeaderModificationRuleRequestHeaderModificationArgs... requestHeaderModifications) {
            return requestHeaderModifications(List.of(requestHeaderModifications));
        }

        /**
         * @param rule Rule content, using conditional expressions to match user requests. When adding global configuration, this parameter does not need to be set. There are two usage scenarios:
         * - Match all incoming requests: value set to true
         * - Match specified request: Set the value to a custom expression, for example: (http.host eq \&#34;video.example.com\&#34;)
         * 
         * @return builder
         * 
         */
        public Builder rule(@Nullable Output<String> rule) {
            $.rule = rule;
            return this;
        }

        /**
         * @param rule Rule content, using conditional expressions to match user requests. When adding global configuration, this parameter does not need to be set. There are two usage scenarios:
         * - Match all incoming requests: value set to true
         * - Match specified request: Set the value to a custom expression, for example: (http.host eq \&#34;video.example.com\&#34;)
         * 
         * @return builder
         * 
         */
        public Builder rule(String rule) {
            return rule(Output.of(rule));
        }

        /**
         * @param ruleEnable Rule switch. When adding global configuration, this parameter does not need to be set. Value range:
         * - on: open.
         * - off: close.
         * 
         * @return builder
         * 
         */
        public Builder ruleEnable(@Nullable Output<String> ruleEnable) {
            $.ruleEnable = ruleEnable;
            return this;
        }

        /**
         * @param ruleEnable Rule switch. When adding global configuration, this parameter does not need to be set. Value range:
         * - on: open.
         * - off: close.
         * 
         * @return builder
         * 
         */
        public Builder ruleEnable(String ruleEnable) {
            return ruleEnable(Output.of(ruleEnable));
        }

        /**
         * @param ruleName Rule name. When adding global configuration, this parameter does not need to be set.
         * 
         * @return builder
         * 
         */
        public Builder ruleName(@Nullable Output<String> ruleName) {
            $.ruleName = ruleName;
            return this;
        }

        /**
         * @param ruleName Rule name. When adding global configuration, this parameter does not need to be set.
         * 
         * @return builder
         * 
         */
        public Builder ruleName(String ruleName) {
            return ruleName(Output.of(ruleName));
        }

        /**
         * @param siteId The site ID.
         * 
         * @return builder
         * 
         */
        public Builder siteId(Output<Integer> siteId) {
            $.siteId = siteId;
            return this;
        }

        /**
         * @param siteId The site ID.
         * 
         * @return builder
         * 
         */
        public Builder siteId(Integer siteId) {
            return siteId(Output.of(siteId));
        }

        /**
         * @param siteVersion The version number of the website configurations.
         * 
         * @return builder
         * 
         */
        public Builder siteVersion(@Nullable Output<Integer> siteVersion) {
            $.siteVersion = siteVersion;
            return this;
        }

        /**
         * @param siteVersion The version number of the website configurations.
         * 
         * @return builder
         * 
         */
        public Builder siteVersion(Integer siteVersion) {
            return siteVersion(Output.of(siteVersion));
        }

        public HttpRequestHeaderModificationRuleArgs build() {
            if ($.requestHeaderModifications == null) {
                throw new MissingRequiredPropertyException("HttpRequestHeaderModificationRuleArgs", "requestHeaderModifications");
            }
            if ($.siteId == null) {
                throw new MissingRequiredPropertyException("HttpRequestHeaderModificationRuleArgs", "siteId");
            }
            return $;
        }
    }

}
