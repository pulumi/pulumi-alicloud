// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.bastionhost;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class HostAccountArgs extends com.pulumi.resources.ResourceArgs {

    public static final HostAccountArgs Empty = new HostAccountArgs();

    /**
     * The name of the host account. The name can be up to 128 characters in length.
     * 
     */
    @Import(name="hostAccountName", required=true)
    private Output<String> hostAccountName;

    /**
     * @return The name of the host account. The name can be up to 128 characters in length.
     * 
     */
    public Output<String> hostAccountName() {
        return this.hostAccountName;
    }

    /**
     * The ID of the host for which you want to create an account.
     * 
     */
    @Import(name="hostId", required=true)
    private Output<String> hostId;

    /**
     * @return The ID of the host for which you want to create an account.
     * 
     */
    public Output<String> hostId() {
        return this.hostId;
    }

    /**
     * The ID of the Bastionhost instance where you want to create an account for the host.
     * 
     */
    @Import(name="instanceId", required=true)
    private Output<String> instanceId;

    /**
     * @return The ID of the Bastionhost instance where you want to create an account for the host.
     * 
     */
    public Output<String> instanceId() {
        return this.instanceId;
    }

    /**
     * The passphrase of the private key for the host account. **NOTE:** It is valid when the attribute `protocol_name` is `SSH`.
     * 
     */
    @Import(name="passPhrase")
    private @Nullable Output<String> passPhrase;

    /**
     * @return The passphrase of the private key for the host account. **NOTE:** It is valid when the attribute `protocol_name` is `SSH`.
     * 
     */
    public Optional<Output<String>> passPhrase() {
        return Optional.ofNullable(this.passPhrase);
    }

    /**
     * The password of the host account.
     * 
     */
    @Import(name="password")
    private @Nullable Output<String> password;

    /**
     * @return The password of the host account.
     * 
     */
    public Optional<Output<String>> password() {
        return Optional.ofNullable(this.password);
    }

    /**
     * The private key of the host account. The value is a Base64-encoded string. **NOTE:** It is valid when the attribute `protocol_name` is `SSH`
     * 
     */
    @Import(name="privateKey")
    private @Nullable Output<String> privateKey;

    /**
     * @return The private key of the host account. The value is a Base64-encoded string. **NOTE:** It is valid when the attribute `protocol_name` is `SSH`
     * 
     */
    public Optional<Output<String>> privateKey() {
        return Optional.ofNullable(this.privateKey);
    }

    /**
     * The protocol used by the host account. Valid values: SSH,RDP
     * 
     */
    @Import(name="protocolName", required=true)
    private Output<String> protocolName;

    /**
     * @return The protocol used by the host account. Valid values: SSH,RDP
     * 
     */
    public Output<String> protocolName() {
        return this.protocolName;
    }

    private HostAccountArgs() {}

    private HostAccountArgs(HostAccountArgs $) {
        this.hostAccountName = $.hostAccountName;
        this.hostId = $.hostId;
        this.instanceId = $.instanceId;
        this.passPhrase = $.passPhrase;
        this.password = $.password;
        this.privateKey = $.privateKey;
        this.protocolName = $.protocolName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(HostAccountArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private HostAccountArgs $;

        public Builder() {
            $ = new HostAccountArgs();
        }

        public Builder(HostAccountArgs defaults) {
            $ = new HostAccountArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param hostAccountName The name of the host account. The name can be up to 128 characters in length.
         * 
         * @return builder
         * 
         */
        public Builder hostAccountName(Output<String> hostAccountName) {
            $.hostAccountName = hostAccountName;
            return this;
        }

        /**
         * @param hostAccountName The name of the host account. The name can be up to 128 characters in length.
         * 
         * @return builder
         * 
         */
        public Builder hostAccountName(String hostAccountName) {
            return hostAccountName(Output.of(hostAccountName));
        }

        /**
         * @param hostId The ID of the host for which you want to create an account.
         * 
         * @return builder
         * 
         */
        public Builder hostId(Output<String> hostId) {
            $.hostId = hostId;
            return this;
        }

        /**
         * @param hostId The ID of the host for which you want to create an account.
         * 
         * @return builder
         * 
         */
        public Builder hostId(String hostId) {
            return hostId(Output.of(hostId));
        }

        /**
         * @param instanceId The ID of the Bastionhost instance where you want to create an account for the host.
         * 
         * @return builder
         * 
         */
        public Builder instanceId(Output<String> instanceId) {
            $.instanceId = instanceId;
            return this;
        }

        /**
         * @param instanceId The ID of the Bastionhost instance where you want to create an account for the host.
         * 
         * @return builder
         * 
         */
        public Builder instanceId(String instanceId) {
            return instanceId(Output.of(instanceId));
        }

        /**
         * @param passPhrase The passphrase of the private key for the host account. **NOTE:** It is valid when the attribute `protocol_name` is `SSH`.
         * 
         * @return builder
         * 
         */
        public Builder passPhrase(@Nullable Output<String> passPhrase) {
            $.passPhrase = passPhrase;
            return this;
        }

        /**
         * @param passPhrase The passphrase of the private key for the host account. **NOTE:** It is valid when the attribute `protocol_name` is `SSH`.
         * 
         * @return builder
         * 
         */
        public Builder passPhrase(String passPhrase) {
            return passPhrase(Output.of(passPhrase));
        }

        /**
         * @param password The password of the host account.
         * 
         * @return builder
         * 
         */
        public Builder password(@Nullable Output<String> password) {
            $.password = password;
            return this;
        }

        /**
         * @param password The password of the host account.
         * 
         * @return builder
         * 
         */
        public Builder password(String password) {
            return password(Output.of(password));
        }

        /**
         * @param privateKey The private key of the host account. The value is a Base64-encoded string. **NOTE:** It is valid when the attribute `protocol_name` is `SSH`
         * 
         * @return builder
         * 
         */
        public Builder privateKey(@Nullable Output<String> privateKey) {
            $.privateKey = privateKey;
            return this;
        }

        /**
         * @param privateKey The private key of the host account. The value is a Base64-encoded string. **NOTE:** It is valid when the attribute `protocol_name` is `SSH`
         * 
         * @return builder
         * 
         */
        public Builder privateKey(String privateKey) {
            return privateKey(Output.of(privateKey));
        }

        /**
         * @param protocolName The protocol used by the host account. Valid values: SSH,RDP
         * 
         * @return builder
         * 
         */
        public Builder protocolName(Output<String> protocolName) {
            $.protocolName = protocolName;
            return this;
        }

        /**
         * @param protocolName The protocol used by the host account. Valid values: SSH,RDP
         * 
         * @return builder
         * 
         */
        public Builder protocolName(String protocolName) {
            return protocolName(Output.of(protocolName));
        }

        public HostAccountArgs build() {
            if ($.hostAccountName == null) {
                throw new MissingRequiredPropertyException("HostAccountArgs", "hostAccountName");
            }
            if ($.hostId == null) {
                throw new MissingRequiredPropertyException("HostAccountArgs", "hostId");
            }
            if ($.instanceId == null) {
                throw new MissingRequiredPropertyException("HostAccountArgs", "instanceId");
            }
            if ($.protocolName == null) {
                throw new MissingRequiredPropertyException("HostAccountArgs", "protocolName");
            }
            return $;
        }
    }

}
