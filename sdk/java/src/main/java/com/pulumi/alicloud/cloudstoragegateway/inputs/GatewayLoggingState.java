// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.cloudstoragegateway.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GatewayLoggingState extends com.pulumi.resources.ResourceArgs {

    public static final GatewayLoggingState Empty = new GatewayLoggingState();

    /**
     * The ID of the Gateway.
     * 
     */
    @Import(name="gatewayId")
    private @Nullable Output<String> gatewayId;

    /**
     * @return The ID of the Gateway.
     * 
     */
    public Optional<Output<String>> gatewayId() {
        return Optional.ofNullable(this.gatewayId);
    }

    /**
     * The name of the Log Store.
     * 
     */
    @Import(name="slsLogstore")
    private @Nullable Output<String> slsLogstore;

    /**
     * @return The name of the Log Store.
     * 
     */
    public Optional<Output<String>> slsLogstore() {
        return Optional.ofNullable(this.slsLogstore);
    }

    /**
     * The name of the Project.
     * 
     */
    @Import(name="slsProject")
    private @Nullable Output<String> slsProject;

    /**
     * @return The name of the Project.
     * 
     */
    public Optional<Output<String>> slsProject() {
        return Optional.ofNullable(this.slsProject);
    }

    /**
     * The status of the resource. Valid values: `Enabled`, `Disable`.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return The status of the resource. Valid values: `Enabled`, `Disable`.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    private GatewayLoggingState() {}

    private GatewayLoggingState(GatewayLoggingState $) {
        this.gatewayId = $.gatewayId;
        this.slsLogstore = $.slsLogstore;
        this.slsProject = $.slsProject;
        this.status = $.status;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GatewayLoggingState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GatewayLoggingState $;

        public Builder() {
            $ = new GatewayLoggingState();
        }

        public Builder(GatewayLoggingState defaults) {
            $ = new GatewayLoggingState(Objects.requireNonNull(defaults));
        }

        /**
         * @param gatewayId The ID of the Gateway.
         * 
         * @return builder
         * 
         */
        public Builder gatewayId(@Nullable Output<String> gatewayId) {
            $.gatewayId = gatewayId;
            return this;
        }

        /**
         * @param gatewayId The ID of the Gateway.
         * 
         * @return builder
         * 
         */
        public Builder gatewayId(String gatewayId) {
            return gatewayId(Output.of(gatewayId));
        }

        /**
         * @param slsLogstore The name of the Log Store.
         * 
         * @return builder
         * 
         */
        public Builder slsLogstore(@Nullable Output<String> slsLogstore) {
            $.slsLogstore = slsLogstore;
            return this;
        }

        /**
         * @param slsLogstore The name of the Log Store.
         * 
         * @return builder
         * 
         */
        public Builder slsLogstore(String slsLogstore) {
            return slsLogstore(Output.of(slsLogstore));
        }

        /**
         * @param slsProject The name of the Project.
         * 
         * @return builder
         * 
         */
        public Builder slsProject(@Nullable Output<String> slsProject) {
            $.slsProject = slsProject;
            return this;
        }

        /**
         * @param slsProject The name of the Project.
         * 
         * @return builder
         * 
         */
        public Builder slsProject(String slsProject) {
            return slsProject(Output.of(slsProject));
        }

        /**
         * @param status The status of the resource. Valid values: `Enabled`, `Disable`.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status The status of the resource. Valid values: `Enabled`, `Disable`.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        public GatewayLoggingState build() {
            return $;
        }
    }

}
