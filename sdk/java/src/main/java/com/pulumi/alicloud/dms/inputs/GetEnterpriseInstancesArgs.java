// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.dms.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetEnterpriseInstancesArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetEnterpriseInstancesArgs Empty = new GetEnterpriseInstancesArgs();

    /**
     * The type of the environment to which the database instance belongs.
     * 
     */
    @Import(name="envType")
    private @Nullable Output<String> envType;

    /**
     * @return The type of the environment to which the database instance belongs.
     * 
     */
    public Optional<Output<String>> envType() {
        return Optional.ofNullable(this.envType);
    }

    /**
     * A regex string to filter the results by the DMS Enterprise Instance instance_alias.
     * 
     */
    @Import(name="instanceAliasRegex")
    private @Nullable Output<String> instanceAliasRegex;

    /**
     * @return A regex string to filter the results by the DMS Enterprise Instance instance_alias.
     * 
     */
    public Optional<Output<String>> instanceAliasRegex() {
        return Optional.ofNullable(this.instanceAliasRegex);
    }

    /**
     * The source of the database instance.
     * 
     */
    @Import(name="instanceSource")
    private @Nullable Output<String> instanceSource;

    /**
     * @return The source of the database instance.
     * 
     */
    public Optional<Output<String>> instanceSource() {
        return Optional.ofNullable(this.instanceSource);
    }

    /**
     * The ID of the database instance.
     * 
     */
    @Import(name="instanceType")
    private @Nullable Output<String> instanceType;

    /**
     * @return The ID of the database instance.
     * 
     */
    public Optional<Output<String>> instanceType() {
        return Optional.ofNullable(this.instanceType);
    }

    /**
     * A regex string to filter the results by the DMS Enterprise Instance instance_alias.
     * 
     */
    @Import(name="nameRegex")
    private @Nullable Output<String> nameRegex;

    /**
     * @return A regex string to filter the results by the DMS Enterprise Instance instance_alias.
     * 
     */
    public Optional<Output<String>> nameRegex() {
        return Optional.ofNullable(this.nameRegex);
    }

    /**
     * The network type of the database instance. Valid values: CLASSIC and VPC. For more information about the valid values, see the description of the RegisterInstance operation.
     * 
     */
    @Import(name="netType")
    private @Nullable Output<String> netType;

    /**
     * @return The network type of the database instance. Valid values: CLASSIC and VPC. For more information about the valid values, see the description of the RegisterInstance operation.
     * 
     */
    public Optional<Output<String>> netType() {
        return Optional.ofNullable(this.netType);
    }

    /**
     * File name where to save data source results (after running `pulumi preview`).
     * 
     */
    @Import(name="outputFile")
    private @Nullable Output<String> outputFile;

    /**
     * @return File name where to save data source results (after running `pulumi preview`).
     * 
     */
    public Optional<Output<String>> outputFile() {
        return Optional.ofNullable(this.outputFile);
    }

    /**
     * The keyword used to query database instances.
     * 
     */
    @Import(name="searchKey")
    private @Nullable Output<String> searchKey;

    /**
     * @return The keyword used to query database instances.
     * 
     */
    public Optional<Output<String>> searchKey() {
        return Optional.ofNullable(this.searchKey);
    }

    /**
     * Filter the results by status of the DMS Enterprise Instances. Valid values: `NORMAL`, `UNAVAILABLE`, `UNKNOWN`, `DELETED`, `DISABLE`.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return Filter the results by status of the DMS Enterprise Instances. Valid values: `NORMAL`, `UNAVAILABLE`, `UNKNOWN`, `DELETED`, `DISABLE`.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * The ID of the tenant in Data Management (DMS) Enterprise.
     * 
     */
    @Import(name="tid")
    private @Nullable Output<Integer> tid;

    /**
     * @return The ID of the tenant in Data Management (DMS) Enterprise.
     * 
     */
    public Optional<Output<Integer>> tid() {
        return Optional.ofNullable(this.tid);
    }

    private GetEnterpriseInstancesArgs() {}

    private GetEnterpriseInstancesArgs(GetEnterpriseInstancesArgs $) {
        this.envType = $.envType;
        this.instanceAliasRegex = $.instanceAliasRegex;
        this.instanceSource = $.instanceSource;
        this.instanceType = $.instanceType;
        this.nameRegex = $.nameRegex;
        this.netType = $.netType;
        this.outputFile = $.outputFile;
        this.searchKey = $.searchKey;
        this.status = $.status;
        this.tid = $.tid;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetEnterpriseInstancesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetEnterpriseInstancesArgs $;

        public Builder() {
            $ = new GetEnterpriseInstancesArgs();
        }

        public Builder(GetEnterpriseInstancesArgs defaults) {
            $ = new GetEnterpriseInstancesArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param envType The type of the environment to which the database instance belongs.
         * 
         * @return builder
         * 
         */
        public Builder envType(@Nullable Output<String> envType) {
            $.envType = envType;
            return this;
        }

        /**
         * @param envType The type of the environment to which the database instance belongs.
         * 
         * @return builder
         * 
         */
        public Builder envType(String envType) {
            return envType(Output.of(envType));
        }

        /**
         * @param instanceAliasRegex A regex string to filter the results by the DMS Enterprise Instance instance_alias.
         * 
         * @return builder
         * 
         */
        public Builder instanceAliasRegex(@Nullable Output<String> instanceAliasRegex) {
            $.instanceAliasRegex = instanceAliasRegex;
            return this;
        }

        /**
         * @param instanceAliasRegex A regex string to filter the results by the DMS Enterprise Instance instance_alias.
         * 
         * @return builder
         * 
         */
        public Builder instanceAliasRegex(String instanceAliasRegex) {
            return instanceAliasRegex(Output.of(instanceAliasRegex));
        }

        /**
         * @param instanceSource The source of the database instance.
         * 
         * @return builder
         * 
         */
        public Builder instanceSource(@Nullable Output<String> instanceSource) {
            $.instanceSource = instanceSource;
            return this;
        }

        /**
         * @param instanceSource The source of the database instance.
         * 
         * @return builder
         * 
         */
        public Builder instanceSource(String instanceSource) {
            return instanceSource(Output.of(instanceSource));
        }

        /**
         * @param instanceType The ID of the database instance.
         * 
         * @return builder
         * 
         */
        public Builder instanceType(@Nullable Output<String> instanceType) {
            $.instanceType = instanceType;
            return this;
        }

        /**
         * @param instanceType The ID of the database instance.
         * 
         * @return builder
         * 
         */
        public Builder instanceType(String instanceType) {
            return instanceType(Output.of(instanceType));
        }

        /**
         * @param nameRegex A regex string to filter the results by the DMS Enterprise Instance instance_alias.
         * 
         * @return builder
         * 
         */
        public Builder nameRegex(@Nullable Output<String> nameRegex) {
            $.nameRegex = nameRegex;
            return this;
        }

        /**
         * @param nameRegex A regex string to filter the results by the DMS Enterprise Instance instance_alias.
         * 
         * @return builder
         * 
         */
        public Builder nameRegex(String nameRegex) {
            return nameRegex(Output.of(nameRegex));
        }

        /**
         * @param netType The network type of the database instance. Valid values: CLASSIC and VPC. For more information about the valid values, see the description of the RegisterInstance operation.
         * 
         * @return builder
         * 
         */
        public Builder netType(@Nullable Output<String> netType) {
            $.netType = netType;
            return this;
        }

        /**
         * @param netType The network type of the database instance. Valid values: CLASSIC and VPC. For more information about the valid values, see the description of the RegisterInstance operation.
         * 
         * @return builder
         * 
         */
        public Builder netType(String netType) {
            return netType(Output.of(netType));
        }

        /**
         * @param outputFile File name where to save data source results (after running `pulumi preview`).
         * 
         * @return builder
         * 
         */
        public Builder outputFile(@Nullable Output<String> outputFile) {
            $.outputFile = outputFile;
            return this;
        }

        /**
         * @param outputFile File name where to save data source results (after running `pulumi preview`).
         * 
         * @return builder
         * 
         */
        public Builder outputFile(String outputFile) {
            return outputFile(Output.of(outputFile));
        }

        /**
         * @param searchKey The keyword used to query database instances.
         * 
         * @return builder
         * 
         */
        public Builder searchKey(@Nullable Output<String> searchKey) {
            $.searchKey = searchKey;
            return this;
        }

        /**
         * @param searchKey The keyword used to query database instances.
         * 
         * @return builder
         * 
         */
        public Builder searchKey(String searchKey) {
            return searchKey(Output.of(searchKey));
        }

        /**
         * @param status Filter the results by status of the DMS Enterprise Instances. Valid values: `NORMAL`, `UNAVAILABLE`, `UNKNOWN`, `DELETED`, `DISABLE`.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status Filter the results by status of the DMS Enterprise Instances. Valid values: `NORMAL`, `UNAVAILABLE`, `UNKNOWN`, `DELETED`, `DISABLE`.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param tid The ID of the tenant in Data Management (DMS) Enterprise.
         * 
         * @return builder
         * 
         */
        public Builder tid(@Nullable Output<Integer> tid) {
            $.tid = tid;
            return this;
        }

        /**
         * @param tid The ID of the tenant in Data Management (DMS) Enterprise.
         * 
         * @return builder
         * 
         */
        public Builder tid(Integer tid) {
            return tid(Output.of(tid));
        }

        public GetEnterpriseInstancesArgs build() {
            return $;
        }
    }

}
