// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.dfs.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetFileSystemsSystem {
    /**
     * @return The creation time of the File system.
     * 
     */
    private String createTime;
    /**
     * @return The description of the File system.
     * 
     */
    private String description;
    /**
     * @return The ID of the File System.
     * 
     */
    private String fileSystemId;
    /**
     * @return The name of the File system.
     * 
     */
    private String fileSystemName;
    /**
     * @return The ID of the File System.
     * 
     */
    private String id;
    /**
     * @return The number of Mount points.
     * 
     */
    private Integer mountPointCount;
    /**
     * @return The number of directories.
     * 
     */
    private Integer numberOfDirectories;
    /**
     * @return The number of files.
     * 
     */
    private Integer numberOfFiles;
    /**
     * @return The protocol type. Valid values: `HDFS`.
     * 
     */
    private String protocolType;
    /**
     * @return The preset throughput of the File system. Valid values: `1` to `1024`, Unit: MB/s.
     * 
     */
    private Integer provisionedThroughputInMiBps;
    /**
     * @return The capacity budget of the File system.
     * 
     */
    private Integer spaceCapacity;
    /**
     * @return Storage package Id.
     * 
     */
    private String storagePackageId;
    /**
     * @return The storage specifications of the File system. Valid values: `PERFORMANCE`, `STANDARD`.
     * 
     */
    private String storageType;
    /**
     * @return The throughput mode of the File system. Valid values: `Provisioned`, `Standard`.
     * 
     */
    private String throughputMode;
    /**
     * @return The used space of the File system.
     * 
     */
    private Double usedSpaceSize;
    /**
     * @return The zone ID of the File system.
     * 
     */
    private String zoneId;

    private GetFileSystemsSystem() {}
    /**
     * @return The creation time of the File system.
     * 
     */
    public String createTime() {
        return this.createTime;
    }
    /**
     * @return The description of the File system.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return The ID of the File System.
     * 
     */
    public String fileSystemId() {
        return this.fileSystemId;
    }
    /**
     * @return The name of the File system.
     * 
     */
    public String fileSystemName() {
        return this.fileSystemName;
    }
    /**
     * @return The ID of the File System.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The number of Mount points.
     * 
     */
    public Integer mountPointCount() {
        return this.mountPointCount;
    }
    /**
     * @return The number of directories.
     * 
     */
    public Integer numberOfDirectories() {
        return this.numberOfDirectories;
    }
    /**
     * @return The number of files.
     * 
     */
    public Integer numberOfFiles() {
        return this.numberOfFiles;
    }
    /**
     * @return The protocol type. Valid values: `HDFS`.
     * 
     */
    public String protocolType() {
        return this.protocolType;
    }
    /**
     * @return The preset throughput of the File system. Valid values: `1` to `1024`, Unit: MB/s.
     * 
     */
    public Integer provisionedThroughputInMiBps() {
        return this.provisionedThroughputInMiBps;
    }
    /**
     * @return The capacity budget of the File system.
     * 
     */
    public Integer spaceCapacity() {
        return this.spaceCapacity;
    }
    /**
     * @return Storage package Id.
     * 
     */
    public String storagePackageId() {
        return this.storagePackageId;
    }
    /**
     * @return The storage specifications of the File system. Valid values: `PERFORMANCE`, `STANDARD`.
     * 
     */
    public String storageType() {
        return this.storageType;
    }
    /**
     * @return The throughput mode of the File system. Valid values: `Provisioned`, `Standard`.
     * 
     */
    public String throughputMode() {
        return this.throughputMode;
    }
    /**
     * @return The used space of the File system.
     * 
     */
    public Double usedSpaceSize() {
        return this.usedSpaceSize;
    }
    /**
     * @return The zone ID of the File system.
     * 
     */
    public String zoneId() {
        return this.zoneId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetFileSystemsSystem defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String createTime;
        private String description;
        private String fileSystemId;
        private String fileSystemName;
        private String id;
        private Integer mountPointCount;
        private Integer numberOfDirectories;
        private Integer numberOfFiles;
        private String protocolType;
        private Integer provisionedThroughputInMiBps;
        private Integer spaceCapacity;
        private String storagePackageId;
        private String storageType;
        private String throughputMode;
        private Double usedSpaceSize;
        private String zoneId;
        public Builder() {}
        public Builder(GetFileSystemsSystem defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.createTime = defaults.createTime;
    	      this.description = defaults.description;
    	      this.fileSystemId = defaults.fileSystemId;
    	      this.fileSystemName = defaults.fileSystemName;
    	      this.id = defaults.id;
    	      this.mountPointCount = defaults.mountPointCount;
    	      this.numberOfDirectories = defaults.numberOfDirectories;
    	      this.numberOfFiles = defaults.numberOfFiles;
    	      this.protocolType = defaults.protocolType;
    	      this.provisionedThroughputInMiBps = defaults.provisionedThroughputInMiBps;
    	      this.spaceCapacity = defaults.spaceCapacity;
    	      this.storagePackageId = defaults.storagePackageId;
    	      this.storageType = defaults.storageType;
    	      this.throughputMode = defaults.throughputMode;
    	      this.usedSpaceSize = defaults.usedSpaceSize;
    	      this.zoneId = defaults.zoneId;
        }

        @CustomType.Setter
        public Builder createTime(String createTime) {
            if (createTime == null) {
              throw new MissingRequiredPropertyException("GetFileSystemsSystem", "createTime");
            }
            this.createTime = createTime;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetFileSystemsSystem", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder fileSystemId(String fileSystemId) {
            if (fileSystemId == null) {
              throw new MissingRequiredPropertyException("GetFileSystemsSystem", "fileSystemId");
            }
            this.fileSystemId = fileSystemId;
            return this;
        }
        @CustomType.Setter
        public Builder fileSystemName(String fileSystemName) {
            if (fileSystemName == null) {
              throw new MissingRequiredPropertyException("GetFileSystemsSystem", "fileSystemName");
            }
            this.fileSystemName = fileSystemName;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetFileSystemsSystem", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder mountPointCount(Integer mountPointCount) {
            if (mountPointCount == null) {
              throw new MissingRequiredPropertyException("GetFileSystemsSystem", "mountPointCount");
            }
            this.mountPointCount = mountPointCount;
            return this;
        }
        @CustomType.Setter
        public Builder numberOfDirectories(Integer numberOfDirectories) {
            if (numberOfDirectories == null) {
              throw new MissingRequiredPropertyException("GetFileSystemsSystem", "numberOfDirectories");
            }
            this.numberOfDirectories = numberOfDirectories;
            return this;
        }
        @CustomType.Setter
        public Builder numberOfFiles(Integer numberOfFiles) {
            if (numberOfFiles == null) {
              throw new MissingRequiredPropertyException("GetFileSystemsSystem", "numberOfFiles");
            }
            this.numberOfFiles = numberOfFiles;
            return this;
        }
        @CustomType.Setter
        public Builder protocolType(String protocolType) {
            if (protocolType == null) {
              throw new MissingRequiredPropertyException("GetFileSystemsSystem", "protocolType");
            }
            this.protocolType = protocolType;
            return this;
        }
        @CustomType.Setter
        public Builder provisionedThroughputInMiBps(Integer provisionedThroughputInMiBps) {
            if (provisionedThroughputInMiBps == null) {
              throw new MissingRequiredPropertyException("GetFileSystemsSystem", "provisionedThroughputInMiBps");
            }
            this.provisionedThroughputInMiBps = provisionedThroughputInMiBps;
            return this;
        }
        @CustomType.Setter
        public Builder spaceCapacity(Integer spaceCapacity) {
            if (spaceCapacity == null) {
              throw new MissingRequiredPropertyException("GetFileSystemsSystem", "spaceCapacity");
            }
            this.spaceCapacity = spaceCapacity;
            return this;
        }
        @CustomType.Setter
        public Builder storagePackageId(String storagePackageId) {
            if (storagePackageId == null) {
              throw new MissingRequiredPropertyException("GetFileSystemsSystem", "storagePackageId");
            }
            this.storagePackageId = storagePackageId;
            return this;
        }
        @CustomType.Setter
        public Builder storageType(String storageType) {
            if (storageType == null) {
              throw new MissingRequiredPropertyException("GetFileSystemsSystem", "storageType");
            }
            this.storageType = storageType;
            return this;
        }
        @CustomType.Setter
        public Builder throughputMode(String throughputMode) {
            if (throughputMode == null) {
              throw new MissingRequiredPropertyException("GetFileSystemsSystem", "throughputMode");
            }
            this.throughputMode = throughputMode;
            return this;
        }
        @CustomType.Setter
        public Builder usedSpaceSize(Double usedSpaceSize) {
            if (usedSpaceSize == null) {
              throw new MissingRequiredPropertyException("GetFileSystemsSystem", "usedSpaceSize");
            }
            this.usedSpaceSize = usedSpaceSize;
            return this;
        }
        @CustomType.Setter
        public Builder zoneId(String zoneId) {
            if (zoneId == null) {
              throw new MissingRequiredPropertyException("GetFileSystemsSystem", "zoneId");
            }
            this.zoneId = zoneId;
            return this;
        }
        public GetFileSystemsSystem build() {
            final var _resultValue = new GetFileSystemsSystem();
            _resultValue.createTime = createTime;
            _resultValue.description = description;
            _resultValue.fileSystemId = fileSystemId;
            _resultValue.fileSystemName = fileSystemName;
            _resultValue.id = id;
            _resultValue.mountPointCount = mountPointCount;
            _resultValue.numberOfDirectories = numberOfDirectories;
            _resultValue.numberOfFiles = numberOfFiles;
            _resultValue.protocolType = protocolType;
            _resultValue.provisionedThroughputInMiBps = provisionedThroughputInMiBps;
            _resultValue.spaceCapacity = spaceCapacity;
            _resultValue.storagePackageId = storagePackageId;
            _resultValue.storageType = storageType;
            _resultValue.throughputMode = throughputMode;
            _resultValue.usedSpaceSize = usedSpaceSize;
            _resultValue.zoneId = zoneId;
            return _resultValue;
        }
    }
}
