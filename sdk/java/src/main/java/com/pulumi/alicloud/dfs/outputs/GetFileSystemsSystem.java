// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.dfs.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetFileSystemsSystem {
    /**
     * @return The creation time of the File system.
     * 
     */
    private String createTime;
    /**
     * @return The description of the File system.
     * 
     */
    private String description;
    /**
     * @return The ID of the File System.
     * 
     */
    private String fileSystemId;
    /**
     * @return The name of the File system.
     * 
     */
    private String fileSystemName;
    /**
     * @return The ID of the File System.
     * 
     */
    private String id;
    /**
     * @return The number of Mount points.
     * 
     */
    private Integer mountPointCount;
    /**
     * @return The number of directories.
     * 
     */
    private Integer numberOfDirectories;
    /**
     * @return The number of files.
     * 
     */
    private Integer numberOfFiles;
    /**
     * @return The protocol type. Valid values: `HDFS`.
     * 
     */
    private String protocolType;
    /**
     * @return The preset throughput of the File system. Valid values: `1` to `1024`, Unit: MB/s.
     * 
     */
    private Integer provisionedThroughputInMiBps;
    /**
     * @return The capacity budget of the File system.
     * 
     */
    private Integer spaceCapacity;
    /**
     * @return Storage package Id.
     * 
     */
    private String storagePackageId;
    /**
     * @return The storage specifications of the File system. Valid values: `PERFORMANCE`, `STANDARD`.
     * 
     */
    private String storageType;
    /**
     * @return The throughput mode of the File system. Valid values: `Provisioned`, `Standard`.
     * 
     */
    private String throughputMode;
    /**
     * @return The used space of the File system.
     * 
     */
    private Double usedSpaceSize;
    /**
     * @return The zone ID of the File system.
     * 
     */
    private String zoneId;

    private GetFileSystemsSystem() {}
    /**
     * @return The creation time of the File system.
     * 
     */
    public String createTime() {
        return this.createTime;
    }
    /**
     * @return The description of the File system.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return The ID of the File System.
     * 
     */
    public String fileSystemId() {
        return this.fileSystemId;
    }
    /**
     * @return The name of the File system.
     * 
     */
    public String fileSystemName() {
        return this.fileSystemName;
    }
    /**
     * @return The ID of the File System.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The number of Mount points.
     * 
     */
    public Integer mountPointCount() {
        return this.mountPointCount;
    }
    /**
     * @return The number of directories.
     * 
     */
    public Integer numberOfDirectories() {
        return this.numberOfDirectories;
    }
    /**
     * @return The number of files.
     * 
     */
    public Integer numberOfFiles() {
        return this.numberOfFiles;
    }
    /**
     * @return The protocol type. Valid values: `HDFS`.
     * 
     */
    public String protocolType() {
        return this.protocolType;
    }
    /**
     * @return The preset throughput of the File system. Valid values: `1` to `1024`, Unit: MB/s.
     * 
     */
    public Integer provisionedThroughputInMiBps() {
        return this.provisionedThroughputInMiBps;
    }
    /**
     * @return The capacity budget of the File system.
     * 
     */
    public Integer spaceCapacity() {
        return this.spaceCapacity;
    }
    /**
     * @return Storage package Id.
     * 
     */
    public String storagePackageId() {
        return this.storagePackageId;
    }
    /**
     * @return The storage specifications of the File system. Valid values: `PERFORMANCE`, `STANDARD`.
     * 
     */
    public String storageType() {
        return this.storageType;
    }
    /**
     * @return The throughput mode of the File system. Valid values: `Provisioned`, `Standard`.
     * 
     */
    public String throughputMode() {
        return this.throughputMode;
    }
    /**
     * @return The used space of the File system.
     * 
     */
    public Double usedSpaceSize() {
        return this.usedSpaceSize;
    }
    /**
     * @return The zone ID of the File system.
     * 
     */
    public String zoneId() {
        return this.zoneId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetFileSystemsSystem defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String createTime;
        private String description;
        private String fileSystemId;
        private String fileSystemName;
        private String id;
        private Integer mountPointCount;
        private Integer numberOfDirectories;
        private Integer numberOfFiles;
        private String protocolType;
        private Integer provisionedThroughputInMiBps;
        private Integer spaceCapacity;
        private String storagePackageId;
        private String storageType;
        private String throughputMode;
        private Double usedSpaceSize;
        private String zoneId;
        public Builder() {}
        public Builder(GetFileSystemsSystem defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.createTime = defaults.createTime;
    	      this.description = defaults.description;
    	      this.fileSystemId = defaults.fileSystemId;
    	      this.fileSystemName = defaults.fileSystemName;
    	      this.id = defaults.id;
    	      this.mountPointCount = defaults.mountPointCount;
    	      this.numberOfDirectories = defaults.numberOfDirectories;
    	      this.numberOfFiles = defaults.numberOfFiles;
    	      this.protocolType = defaults.protocolType;
    	      this.provisionedThroughputInMiBps = defaults.provisionedThroughputInMiBps;
    	      this.spaceCapacity = defaults.spaceCapacity;
    	      this.storagePackageId = defaults.storagePackageId;
    	      this.storageType = defaults.storageType;
    	      this.throughputMode = defaults.throughputMode;
    	      this.usedSpaceSize = defaults.usedSpaceSize;
    	      this.zoneId = defaults.zoneId;
        }

        @CustomType.Setter
        public Builder createTime(String createTime) {
            this.createTime = Objects.requireNonNull(createTime);
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }
        @CustomType.Setter
        public Builder fileSystemId(String fileSystemId) {
            this.fileSystemId = Objects.requireNonNull(fileSystemId);
            return this;
        }
        @CustomType.Setter
        public Builder fileSystemName(String fileSystemName) {
            this.fileSystemName = Objects.requireNonNull(fileSystemName);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder mountPointCount(Integer mountPointCount) {
            this.mountPointCount = Objects.requireNonNull(mountPointCount);
            return this;
        }
        @CustomType.Setter
        public Builder numberOfDirectories(Integer numberOfDirectories) {
            this.numberOfDirectories = Objects.requireNonNull(numberOfDirectories);
            return this;
        }
        @CustomType.Setter
        public Builder numberOfFiles(Integer numberOfFiles) {
            this.numberOfFiles = Objects.requireNonNull(numberOfFiles);
            return this;
        }
        @CustomType.Setter
        public Builder protocolType(String protocolType) {
            this.protocolType = Objects.requireNonNull(protocolType);
            return this;
        }
        @CustomType.Setter
        public Builder provisionedThroughputInMiBps(Integer provisionedThroughputInMiBps) {
            this.provisionedThroughputInMiBps = Objects.requireNonNull(provisionedThroughputInMiBps);
            return this;
        }
        @CustomType.Setter
        public Builder spaceCapacity(Integer spaceCapacity) {
            this.spaceCapacity = Objects.requireNonNull(spaceCapacity);
            return this;
        }
        @CustomType.Setter
        public Builder storagePackageId(String storagePackageId) {
            this.storagePackageId = Objects.requireNonNull(storagePackageId);
            return this;
        }
        @CustomType.Setter
        public Builder storageType(String storageType) {
            this.storageType = Objects.requireNonNull(storageType);
            return this;
        }
        @CustomType.Setter
        public Builder throughputMode(String throughputMode) {
            this.throughputMode = Objects.requireNonNull(throughputMode);
            return this;
        }
        @CustomType.Setter
        public Builder usedSpaceSize(Double usedSpaceSize) {
            this.usedSpaceSize = Objects.requireNonNull(usedSpaceSize);
            return this;
        }
        @CustomType.Setter
        public Builder zoneId(String zoneId) {
            this.zoneId = Objects.requireNonNull(zoneId);
            return this;
        }
        public GetFileSystemsSystem build() {
            final var o = new GetFileSystemsSystem();
            o.createTime = createTime;
            o.description = description;
            o.fileSystemId = fileSystemId;
            o.fileSystemName = fileSystemName;
            o.id = id;
            o.mountPointCount = mountPointCount;
            o.numberOfDirectories = numberOfDirectories;
            o.numberOfFiles = numberOfFiles;
            o.protocolType = protocolType;
            o.provisionedThroughputInMiBps = provisionedThroughputInMiBps;
            o.spaceCapacity = spaceCapacity;
            o.storagePackageId = storagePackageId;
            o.storageType = storageType;
            o.throughputMode = throughputMode;
            o.usedSpaceSize = usedSpaceSize;
            o.zoneId = zoneId;
            return o;
        }
    }
}
