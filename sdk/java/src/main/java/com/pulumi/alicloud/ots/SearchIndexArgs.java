// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.ots;

import com.pulumi.alicloud.ots.inputs.SearchIndexSchemaArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SearchIndexArgs extends com.pulumi.resources.ResourceArgs {

    public static final SearchIndexArgs Empty = new SearchIndexArgs();

    /**
     * The index name of the OTS Table. If changed, a new index would be created.
     * 
     */
    @Import(name="indexName", required=true)
    private Output<String> indexName;

    /**
     * @return The index name of the OTS Table. If changed, a new index would be created.
     * 
     */
    public Output<String> indexName() {
        return this.indexName;
    }

    /**
     * The name of the OTS instance in which table will located.
     * 
     */
    @Import(name="instanceName", required=true)
    private Output<String> instanceName;

    /**
     * @return The name of the OTS instance in which table will located.
     * 
     */
    public Output<String> instanceName() {
        return this.instanceName;
    }

    /**
     * The schema of the search index. If changed, a new index would be created. See `schema` below.
     * 
     */
    @Import(name="schemas", required=true)
    private Output<List<SearchIndexSchemaArgs>> schemas;

    /**
     * @return The schema of the search index. If changed, a new index would be created. See `schema` below.
     * 
     */
    public Output<List<SearchIndexSchemaArgs>> schemas() {
        return this.schemas;
    }

    /**
     * The name of the OTS table. If changed, a new table would be created.
     * 
     */
    @Import(name="tableName", required=true)
    private Output<String> tableName;

    /**
     * @return The name of the OTS table. If changed, a new table would be created.
     * 
     */
    public Output<String> tableName() {
        return this.tableName;
    }

    /**
     * The index type of the OTS Table. Specifies the retention period of data in the search index. Unit: seconds. Default value: -1.
     * If the retention period exceeds the TTL value, OTS automatically deletes expired data.
     * 
     */
    @Import(name="timeToLive")
    private @Nullable Output<Integer> timeToLive;

    /**
     * @return The index type of the OTS Table. Specifies the retention period of data in the search index. Unit: seconds. Default value: -1.
     * If the retention period exceeds the TTL value, OTS automatically deletes expired data.
     * 
     */
    public Optional<Output<Integer>> timeToLive() {
        return Optional.ofNullable(this.timeToLive);
    }

    private SearchIndexArgs() {}

    private SearchIndexArgs(SearchIndexArgs $) {
        this.indexName = $.indexName;
        this.instanceName = $.instanceName;
        this.schemas = $.schemas;
        this.tableName = $.tableName;
        this.timeToLive = $.timeToLive;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SearchIndexArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SearchIndexArgs $;

        public Builder() {
            $ = new SearchIndexArgs();
        }

        public Builder(SearchIndexArgs defaults) {
            $ = new SearchIndexArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param indexName The index name of the OTS Table. If changed, a new index would be created.
         * 
         * @return builder
         * 
         */
        public Builder indexName(Output<String> indexName) {
            $.indexName = indexName;
            return this;
        }

        /**
         * @param indexName The index name of the OTS Table. If changed, a new index would be created.
         * 
         * @return builder
         * 
         */
        public Builder indexName(String indexName) {
            return indexName(Output.of(indexName));
        }

        /**
         * @param instanceName The name of the OTS instance in which table will located.
         * 
         * @return builder
         * 
         */
        public Builder instanceName(Output<String> instanceName) {
            $.instanceName = instanceName;
            return this;
        }

        /**
         * @param instanceName The name of the OTS instance in which table will located.
         * 
         * @return builder
         * 
         */
        public Builder instanceName(String instanceName) {
            return instanceName(Output.of(instanceName));
        }

        /**
         * @param schemas The schema of the search index. If changed, a new index would be created. See `schema` below.
         * 
         * @return builder
         * 
         */
        public Builder schemas(Output<List<SearchIndexSchemaArgs>> schemas) {
            $.schemas = schemas;
            return this;
        }

        /**
         * @param schemas The schema of the search index. If changed, a new index would be created. See `schema` below.
         * 
         * @return builder
         * 
         */
        public Builder schemas(List<SearchIndexSchemaArgs> schemas) {
            return schemas(Output.of(schemas));
        }

        /**
         * @param schemas The schema of the search index. If changed, a new index would be created. See `schema` below.
         * 
         * @return builder
         * 
         */
        public Builder schemas(SearchIndexSchemaArgs... schemas) {
            return schemas(List.of(schemas));
        }

        /**
         * @param tableName The name of the OTS table. If changed, a new table would be created.
         * 
         * @return builder
         * 
         */
        public Builder tableName(Output<String> tableName) {
            $.tableName = tableName;
            return this;
        }

        /**
         * @param tableName The name of the OTS table. If changed, a new table would be created.
         * 
         * @return builder
         * 
         */
        public Builder tableName(String tableName) {
            return tableName(Output.of(tableName));
        }

        /**
         * @param timeToLive The index type of the OTS Table. Specifies the retention period of data in the search index. Unit: seconds. Default value: -1.
         * If the retention period exceeds the TTL value, OTS automatically deletes expired data.
         * 
         * @return builder
         * 
         */
        public Builder timeToLive(@Nullable Output<Integer> timeToLive) {
            $.timeToLive = timeToLive;
            return this;
        }

        /**
         * @param timeToLive The index type of the OTS Table. Specifies the retention period of data in the search index. Unit: seconds. Default value: -1.
         * If the retention period exceeds the TTL value, OTS automatically deletes expired data.
         * 
         * @return builder
         * 
         */
        public Builder timeToLive(Integer timeToLive) {
            return timeToLive(Output.of(timeToLive));
        }

        public SearchIndexArgs build() {
            $.indexName = Objects.requireNonNull($.indexName, "expected parameter 'indexName' to be non-null");
            $.instanceName = Objects.requireNonNull($.instanceName, "expected parameter 'instanceName' to be non-null");
            $.schemas = Objects.requireNonNull($.schemas, "expected parameter 'schemas' to be non-null");
            $.tableName = Objects.requireNonNull($.tableName, "expected parameter 'tableName' to be non-null");
            return $;
        }
    }

}
