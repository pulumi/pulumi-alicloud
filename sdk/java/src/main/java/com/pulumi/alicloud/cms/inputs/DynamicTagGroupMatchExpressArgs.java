// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.cms.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;


public final class DynamicTagGroupMatchExpressArgs extends com.pulumi.resources.ResourceArgs {

    public static final DynamicTagGroupMatchExpressArgs Empty = new DynamicTagGroupMatchExpressArgs();

    /**
     * The tag values of the cloud resources.
     * 
     */
    @Import(name="tagValue", required=true)
    private Output<String> tagValue;

    /**
     * @return The tag values of the cloud resources.
     * 
     */
    public Output<String> tagValue() {
        return this.tagValue;
    }

    /**
     * The method that is used to match the tag values of the cloud resources. Valid values: `all`, `startWith`, `endWith`, `contains`, `notContains`, `equals`.
     * 
     */
    @Import(name="tagValueMatchFunction", required=true)
    private Output<String> tagValueMatchFunction;

    /**
     * @return The method that is used to match the tag values of the cloud resources. Valid values: `all`, `startWith`, `endWith`, `contains`, `notContains`, `equals`.
     * 
     */
    public Output<String> tagValueMatchFunction() {
        return this.tagValueMatchFunction;
    }

    private DynamicTagGroupMatchExpressArgs() {}

    private DynamicTagGroupMatchExpressArgs(DynamicTagGroupMatchExpressArgs $) {
        this.tagValue = $.tagValue;
        this.tagValueMatchFunction = $.tagValueMatchFunction;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DynamicTagGroupMatchExpressArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DynamicTagGroupMatchExpressArgs $;

        public Builder() {
            $ = new DynamicTagGroupMatchExpressArgs();
        }

        public Builder(DynamicTagGroupMatchExpressArgs defaults) {
            $ = new DynamicTagGroupMatchExpressArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param tagValue The tag values of the cloud resources.
         * 
         * @return builder
         * 
         */
        public Builder tagValue(Output<String> tagValue) {
            $.tagValue = tagValue;
            return this;
        }

        /**
         * @param tagValue The tag values of the cloud resources.
         * 
         * @return builder
         * 
         */
        public Builder tagValue(String tagValue) {
            return tagValue(Output.of(tagValue));
        }

        /**
         * @param tagValueMatchFunction The method that is used to match the tag values of the cloud resources. Valid values: `all`, `startWith`, `endWith`, `contains`, `notContains`, `equals`.
         * 
         * @return builder
         * 
         */
        public Builder tagValueMatchFunction(Output<String> tagValueMatchFunction) {
            $.tagValueMatchFunction = tagValueMatchFunction;
            return this;
        }

        /**
         * @param tagValueMatchFunction The method that is used to match the tag values of the cloud resources. Valid values: `all`, `startWith`, `endWith`, `contains`, `notContains`, `equals`.
         * 
         * @return builder
         * 
         */
        public Builder tagValueMatchFunction(String tagValueMatchFunction) {
            return tagValueMatchFunction(Output.of(tagValueMatchFunction));
        }

        public DynamicTagGroupMatchExpressArgs build() {
            if ($.tagValue == null) {
                throw new MissingRequiredPropertyException("DynamicTagGroupMatchExpressArgs", "tagValue");
            }
            if ($.tagValueMatchFunction == null) {
                throw new MissingRequiredPropertyException("DynamicTagGroupMatchExpressArgs", "tagValueMatchFunction");
            }
            return $;
        }
    }

}
