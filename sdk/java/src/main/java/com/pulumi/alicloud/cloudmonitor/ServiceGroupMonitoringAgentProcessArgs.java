// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.cloudmonitor;

import com.pulumi.alicloud.cloudmonitor.inputs.ServiceGroupMonitoringAgentProcessAlertConfigArgs;
import com.pulumi.alicloud.cloudmonitor.inputs.ServiceGroupMonitoringAgentProcessMatchExpressArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ServiceGroupMonitoringAgentProcessArgs extends com.pulumi.resources.ResourceArgs {

    public static final ServiceGroupMonitoringAgentProcessArgs Empty = new ServiceGroupMonitoringAgentProcessArgs();

    /**
     * The alert rule configurations. See `alert_config` below.
     * 
     */
    @Import(name="alertConfigs", required=true)
    private Output<List<ServiceGroupMonitoringAgentProcessAlertConfigArgs>> alertConfigs;

    /**
     * @return The alert rule configurations. See `alert_config` below.
     * 
     */
    public Output<List<ServiceGroupMonitoringAgentProcessAlertConfigArgs>> alertConfigs() {
        return this.alertConfigs;
    }

    /**
     * The ID of the application group.
     * 
     */
    @Import(name="groupId", required=true)
    private Output<String> groupId;

    /**
     * @return The ID of the application group.
     * 
     */
    public Output<String> groupId() {
        return this.groupId;
    }

    /**
     * The logical operator used between conditional expressions that are used to match instances. Valid values: `all`, `and`, `or`.
     * 
     */
    @Import(name="matchExpressFilterRelation")
    private @Nullable Output<String> matchExpressFilterRelation;

    /**
     * @return The logical operator used between conditional expressions that are used to match instances. Valid values: `all`, `and`, `or`.
     * 
     */
    public Optional<Output<String>> matchExpressFilterRelation() {
        return Optional.ofNullable(this.matchExpressFilterRelation);
    }

    /**
     * The expressions used to match instances. See `match_express` below.
     * 
     */
    @Import(name="matchExpresses")
    private @Nullable Output<List<ServiceGroupMonitoringAgentProcessMatchExpressArgs>> matchExpresses;

    /**
     * @return The expressions used to match instances. See `match_express` below.
     * 
     */
    public Optional<Output<List<ServiceGroupMonitoringAgentProcessMatchExpressArgs>>> matchExpresses() {
        return Optional.ofNullable(this.matchExpresses);
    }

    /**
     * The name of the process.
     * 
     */
    @Import(name="processName", required=true)
    private Output<String> processName;

    /**
     * @return The name of the process.
     * 
     */
    public Output<String> processName() {
        return this.processName;
    }

    private ServiceGroupMonitoringAgentProcessArgs() {}

    private ServiceGroupMonitoringAgentProcessArgs(ServiceGroupMonitoringAgentProcessArgs $) {
        this.alertConfigs = $.alertConfigs;
        this.groupId = $.groupId;
        this.matchExpressFilterRelation = $.matchExpressFilterRelation;
        this.matchExpresses = $.matchExpresses;
        this.processName = $.processName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServiceGroupMonitoringAgentProcessArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServiceGroupMonitoringAgentProcessArgs $;

        public Builder() {
            $ = new ServiceGroupMonitoringAgentProcessArgs();
        }

        public Builder(ServiceGroupMonitoringAgentProcessArgs defaults) {
            $ = new ServiceGroupMonitoringAgentProcessArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param alertConfigs The alert rule configurations. See `alert_config` below.
         * 
         * @return builder
         * 
         */
        public Builder alertConfigs(Output<List<ServiceGroupMonitoringAgentProcessAlertConfigArgs>> alertConfigs) {
            $.alertConfigs = alertConfigs;
            return this;
        }

        /**
         * @param alertConfigs The alert rule configurations. See `alert_config` below.
         * 
         * @return builder
         * 
         */
        public Builder alertConfigs(List<ServiceGroupMonitoringAgentProcessAlertConfigArgs> alertConfigs) {
            return alertConfigs(Output.of(alertConfigs));
        }

        /**
         * @param alertConfigs The alert rule configurations. See `alert_config` below.
         * 
         * @return builder
         * 
         */
        public Builder alertConfigs(ServiceGroupMonitoringAgentProcessAlertConfigArgs... alertConfigs) {
            return alertConfigs(List.of(alertConfigs));
        }

        /**
         * @param groupId The ID of the application group.
         * 
         * @return builder
         * 
         */
        public Builder groupId(Output<String> groupId) {
            $.groupId = groupId;
            return this;
        }

        /**
         * @param groupId The ID of the application group.
         * 
         * @return builder
         * 
         */
        public Builder groupId(String groupId) {
            return groupId(Output.of(groupId));
        }

        /**
         * @param matchExpressFilterRelation The logical operator used between conditional expressions that are used to match instances. Valid values: `all`, `and`, `or`.
         * 
         * @return builder
         * 
         */
        public Builder matchExpressFilterRelation(@Nullable Output<String> matchExpressFilterRelation) {
            $.matchExpressFilterRelation = matchExpressFilterRelation;
            return this;
        }

        /**
         * @param matchExpressFilterRelation The logical operator used between conditional expressions that are used to match instances. Valid values: `all`, `and`, `or`.
         * 
         * @return builder
         * 
         */
        public Builder matchExpressFilterRelation(String matchExpressFilterRelation) {
            return matchExpressFilterRelation(Output.of(matchExpressFilterRelation));
        }

        /**
         * @param matchExpresses The expressions used to match instances. See `match_express` below.
         * 
         * @return builder
         * 
         */
        public Builder matchExpresses(@Nullable Output<List<ServiceGroupMonitoringAgentProcessMatchExpressArgs>> matchExpresses) {
            $.matchExpresses = matchExpresses;
            return this;
        }

        /**
         * @param matchExpresses The expressions used to match instances. See `match_express` below.
         * 
         * @return builder
         * 
         */
        public Builder matchExpresses(List<ServiceGroupMonitoringAgentProcessMatchExpressArgs> matchExpresses) {
            return matchExpresses(Output.of(matchExpresses));
        }

        /**
         * @param matchExpresses The expressions used to match instances. See `match_express` below.
         * 
         * @return builder
         * 
         */
        public Builder matchExpresses(ServiceGroupMonitoringAgentProcessMatchExpressArgs... matchExpresses) {
            return matchExpresses(List.of(matchExpresses));
        }

        /**
         * @param processName The name of the process.
         * 
         * @return builder
         * 
         */
        public Builder processName(Output<String> processName) {
            $.processName = processName;
            return this;
        }

        /**
         * @param processName The name of the process.
         * 
         * @return builder
         * 
         */
        public Builder processName(String processName) {
            return processName(Output.of(processName));
        }

        public ServiceGroupMonitoringAgentProcessArgs build() {
            if ($.alertConfigs == null) {
                throw new MissingRequiredPropertyException("ServiceGroupMonitoringAgentProcessArgs", "alertConfigs");
            }
            if ($.groupId == null) {
                throw new MissingRequiredPropertyException("ServiceGroupMonitoringAgentProcessArgs", "groupId");
            }
            if ($.processName == null) {
                throw new MissingRequiredPropertyException("ServiceGroupMonitoringAgentProcessArgs", "processName");
            }
            return $;
        }
    }

}
