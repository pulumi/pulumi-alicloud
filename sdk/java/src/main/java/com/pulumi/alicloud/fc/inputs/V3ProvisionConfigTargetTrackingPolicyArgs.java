// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.fc.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class V3ProvisionConfigTargetTrackingPolicyArgs extends com.pulumi.resources.ResourceArgs {

    public static final V3ProvisionConfigTargetTrackingPolicyArgs Empty = new V3ProvisionConfigTargetTrackingPolicyArgs();

    /**
     * Policy expiration time
     * 
     */
    @Import(name="endTime")
    private @Nullable Output<String> endTime;

    /**
     * @return Policy expiration time
     * 
     */
    public Optional<Output<String>> endTime() {
        return Optional.ofNullable(this.endTime);
    }

    /**
     * Maximum value of expansion
     * 
     */
    @Import(name="maxCapacity")
    private @Nullable Output<Integer> maxCapacity;

    /**
     * @return Maximum value of expansion
     * 
     */
    public Optional<Output<Integer>> maxCapacity() {
        return Optional.ofNullable(this.maxCapacity);
    }

    /**
     * Tracking value of the indicator
     * 
     */
    @Import(name="metricTarget")
    private @Nullable Output<Double> metricTarget;

    /**
     * @return Tracking value of the indicator
     * 
     */
    public Optional<Output<Double>> metricTarget() {
        return Optional.ofNullable(this.metricTarget);
    }

    /**
     * Provisionedconcurrency utilization: Concurrency utilization of reserved mode instances. CPU utilization: CPU utilization. GPUMemUtilization:GPU utilization
     * 
     */
    @Import(name="metricType")
    private @Nullable Output<String> metricType;

    /**
     * @return Provisionedconcurrency utilization: Concurrency utilization of reserved mode instances. CPU utilization: CPU utilization. GPUMemUtilization:GPU utilization
     * 
     */
    public Optional<Output<String>> metricType() {
        return Optional.ofNullable(this.metricType);
    }

    /**
     * Minimum Shrinkage
     * 
     */
    @Import(name="minCapacity")
    private @Nullable Output<Integer> minCapacity;

    /**
     * @return Minimum Shrinkage
     * 
     */
    public Optional<Output<Integer>> minCapacity() {
        return Optional.ofNullable(this.minCapacity);
    }

    /**
     * Policy Name
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Policy Name
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Policy Effective Time
     * 
     */
    @Import(name="startTime")
    private @Nullable Output<String> startTime;

    /**
     * @return Policy Effective Time
     * 
     */
    public Optional<Output<String>> startTime() {
        return Optional.ofNullable(this.startTime);
    }

    /**
     * Time zone.
     * 
     */
    @Import(name="timeZone")
    private @Nullable Output<String> timeZone;

    /**
     * @return Time zone.
     * 
     */
    public Optional<Output<String>> timeZone() {
        return Optional.ofNullable(this.timeZone);
    }

    private V3ProvisionConfigTargetTrackingPolicyArgs() {}

    private V3ProvisionConfigTargetTrackingPolicyArgs(V3ProvisionConfigTargetTrackingPolicyArgs $) {
        this.endTime = $.endTime;
        this.maxCapacity = $.maxCapacity;
        this.metricTarget = $.metricTarget;
        this.metricType = $.metricType;
        this.minCapacity = $.minCapacity;
        this.name = $.name;
        this.startTime = $.startTime;
        this.timeZone = $.timeZone;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(V3ProvisionConfigTargetTrackingPolicyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private V3ProvisionConfigTargetTrackingPolicyArgs $;

        public Builder() {
            $ = new V3ProvisionConfigTargetTrackingPolicyArgs();
        }

        public Builder(V3ProvisionConfigTargetTrackingPolicyArgs defaults) {
            $ = new V3ProvisionConfigTargetTrackingPolicyArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param endTime Policy expiration time
         * 
         * @return builder
         * 
         */
        public Builder endTime(@Nullable Output<String> endTime) {
            $.endTime = endTime;
            return this;
        }

        /**
         * @param endTime Policy expiration time
         * 
         * @return builder
         * 
         */
        public Builder endTime(String endTime) {
            return endTime(Output.of(endTime));
        }

        /**
         * @param maxCapacity Maximum value of expansion
         * 
         * @return builder
         * 
         */
        public Builder maxCapacity(@Nullable Output<Integer> maxCapacity) {
            $.maxCapacity = maxCapacity;
            return this;
        }

        /**
         * @param maxCapacity Maximum value of expansion
         * 
         * @return builder
         * 
         */
        public Builder maxCapacity(Integer maxCapacity) {
            return maxCapacity(Output.of(maxCapacity));
        }

        /**
         * @param metricTarget Tracking value of the indicator
         * 
         * @return builder
         * 
         */
        public Builder metricTarget(@Nullable Output<Double> metricTarget) {
            $.metricTarget = metricTarget;
            return this;
        }

        /**
         * @param metricTarget Tracking value of the indicator
         * 
         * @return builder
         * 
         */
        public Builder metricTarget(Double metricTarget) {
            return metricTarget(Output.of(metricTarget));
        }

        /**
         * @param metricType Provisionedconcurrency utilization: Concurrency utilization of reserved mode instances. CPU utilization: CPU utilization. GPUMemUtilization:GPU utilization
         * 
         * @return builder
         * 
         */
        public Builder metricType(@Nullable Output<String> metricType) {
            $.metricType = metricType;
            return this;
        }

        /**
         * @param metricType Provisionedconcurrency utilization: Concurrency utilization of reserved mode instances. CPU utilization: CPU utilization. GPUMemUtilization:GPU utilization
         * 
         * @return builder
         * 
         */
        public Builder metricType(String metricType) {
            return metricType(Output.of(metricType));
        }

        /**
         * @param minCapacity Minimum Shrinkage
         * 
         * @return builder
         * 
         */
        public Builder minCapacity(@Nullable Output<Integer> minCapacity) {
            $.minCapacity = minCapacity;
            return this;
        }

        /**
         * @param minCapacity Minimum Shrinkage
         * 
         * @return builder
         * 
         */
        public Builder minCapacity(Integer minCapacity) {
            return minCapacity(Output.of(minCapacity));
        }

        /**
         * @param name Policy Name
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Policy Name
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param startTime Policy Effective Time
         * 
         * @return builder
         * 
         */
        public Builder startTime(@Nullable Output<String> startTime) {
            $.startTime = startTime;
            return this;
        }

        /**
         * @param startTime Policy Effective Time
         * 
         * @return builder
         * 
         */
        public Builder startTime(String startTime) {
            return startTime(Output.of(startTime));
        }

        /**
         * @param timeZone Time zone.
         * 
         * @return builder
         * 
         */
        public Builder timeZone(@Nullable Output<String> timeZone) {
            $.timeZone = timeZone;
            return this;
        }

        /**
         * @param timeZone Time zone.
         * 
         * @return builder
         * 
         */
        public Builder timeZone(String timeZone) {
            return timeZone(Output.of(timeZone));
        }

        public V3ProvisionConfigTargetTrackingPolicyArgs build() {
            return $;
        }
    }

}
