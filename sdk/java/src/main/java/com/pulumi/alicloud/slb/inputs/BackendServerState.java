// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.slb.inputs;

import com.pulumi.alicloud.slb.inputs.BackendServerBackendServerArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class BackendServerState extends com.pulumi.resources.ResourceArgs {

    public static final BackendServerState Empty = new BackendServerState();

    /**
     * A list of instances to added backend server in the SLB. It contains three sub-fields as `Block server` follows.
     * 
     */
    @Import(name="backendServers")
    private @Nullable Output<List<BackendServerBackendServerArgs>> backendServers;

    /**
     * @return A list of instances to added backend server in the SLB. It contains three sub-fields as `Block server` follows.
     * 
     */
    public Optional<Output<List<BackendServerBackendServerArgs>>> backendServers() {
        return Optional.ofNullable(this.backendServers);
    }

    /**
     * Checking DeleteProtection of SLB instance before deleting. If true, this resource will not be deleted when its SLB instance enabled DeleteProtection. Default to false.
     * 
     */
    @Import(name="deleteProtectionValidation")
    private @Nullable Output<Boolean> deleteProtectionValidation;

    /**
     * @return Checking DeleteProtection of SLB instance before deleting. If true, this resource will not be deleted when its SLB instance enabled DeleteProtection. Default to false.
     * 
     */
    public Optional<Output<Boolean>> deleteProtectionValidation() {
        return Optional.ofNullable(this.deleteProtectionValidation);
    }

    /**
     * ID of the load balancer.
     * 
     */
    @Import(name="loadBalancerId")
    private @Nullable Output<String> loadBalancerId;

    /**
     * @return ID of the load balancer.
     * 
     */
    public Optional<Output<String>> loadBalancerId() {
        return Optional.ofNullable(this.loadBalancerId);
    }

    private BackendServerState() {}

    private BackendServerState(BackendServerState $) {
        this.backendServers = $.backendServers;
        this.deleteProtectionValidation = $.deleteProtectionValidation;
        this.loadBalancerId = $.loadBalancerId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BackendServerState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BackendServerState $;

        public Builder() {
            $ = new BackendServerState();
        }

        public Builder(BackendServerState defaults) {
            $ = new BackendServerState(Objects.requireNonNull(defaults));
        }

        /**
         * @param backendServers A list of instances to added backend server in the SLB. It contains three sub-fields as `Block server` follows.
         * 
         * @return builder
         * 
         */
        public Builder backendServers(@Nullable Output<List<BackendServerBackendServerArgs>> backendServers) {
            $.backendServers = backendServers;
            return this;
        }

        /**
         * @param backendServers A list of instances to added backend server in the SLB. It contains three sub-fields as `Block server` follows.
         * 
         * @return builder
         * 
         */
        public Builder backendServers(List<BackendServerBackendServerArgs> backendServers) {
            return backendServers(Output.of(backendServers));
        }

        /**
         * @param backendServers A list of instances to added backend server in the SLB. It contains three sub-fields as `Block server` follows.
         * 
         * @return builder
         * 
         */
        public Builder backendServers(BackendServerBackendServerArgs... backendServers) {
            return backendServers(List.of(backendServers));
        }

        /**
         * @param deleteProtectionValidation Checking DeleteProtection of SLB instance before deleting. If true, this resource will not be deleted when its SLB instance enabled DeleteProtection. Default to false.
         * 
         * @return builder
         * 
         */
        public Builder deleteProtectionValidation(@Nullable Output<Boolean> deleteProtectionValidation) {
            $.deleteProtectionValidation = deleteProtectionValidation;
            return this;
        }

        /**
         * @param deleteProtectionValidation Checking DeleteProtection of SLB instance before deleting. If true, this resource will not be deleted when its SLB instance enabled DeleteProtection. Default to false.
         * 
         * @return builder
         * 
         */
        public Builder deleteProtectionValidation(Boolean deleteProtectionValidation) {
            return deleteProtectionValidation(Output.of(deleteProtectionValidation));
        }

        /**
         * @param loadBalancerId ID of the load balancer.
         * 
         * @return builder
         * 
         */
        public Builder loadBalancerId(@Nullable Output<String> loadBalancerId) {
            $.loadBalancerId = loadBalancerId;
            return this;
        }

        /**
         * @param loadBalancerId ID of the load balancer.
         * 
         * @return builder
         * 
         */
        public Builder loadBalancerId(String loadBalancerId) {
            return loadBalancerId(Output.of(loadBalancerId));
        }

        public BackendServerState build() {
            return $;
        }
    }

}
