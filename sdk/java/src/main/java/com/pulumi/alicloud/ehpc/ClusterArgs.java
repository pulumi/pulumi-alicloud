// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.ehpc;

import com.pulumi.alicloud.ehpc.inputs.ClusterAdditionalVolumeArgs;
import com.pulumi.alicloud.ehpc.inputs.ClusterApplicationArgs;
import com.pulumi.alicloud.ehpc.inputs.ClusterPostInstallScriptArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ClusterArgs extends com.pulumi.resources.ResourceArgs {

    public static final ClusterArgs Empty = new ClusterArgs();

    /**
     * The type of the domain account service. Valid values: `nis`, `ldap`. Default value: `nis`
     * 
     */
    @Import(name="accountType")
    private @Nullable Output<String> accountType;

    /**
     * @return The type of the domain account service. Valid values: `nis`, `ldap`. Default value: `nis`
     * 
     */
    public Optional<Output<String>> accountType() {
        return Optional.ofNullable(this.accountType);
    }

    /**
     * The additional volumes. See `additional_volumes` below.
     * 
     */
    @Import(name="additionalVolumes")
    private @Nullable Output<List<ClusterAdditionalVolumeArgs>> additionalVolumes;

    /**
     * @return The additional volumes. See `additional_volumes` below.
     * 
     */
    public Optional<Output<List<ClusterAdditionalVolumeArgs>>> additionalVolumes() {
        return Optional.ofNullable(this.additionalVolumes);
    }

    /**
     * The application. See `application` below.
     * 
     */
    @Import(name="applications")
    private @Nullable Output<List<ClusterApplicationArgs>> applications;

    /**
     * @return The application. See `application` below.
     * 
     */
    public Optional<Output<List<ClusterApplicationArgs>>> applications() {
        return Optional.ofNullable(this.applications);
    }

    /**
     * Specifies whether to enable auto-renewal for the subscription. Default value: `false`.
     * 
     */
    @Import(name="autoRenew")
    private @Nullable Output<Boolean> autoRenew;

    /**
     * @return Specifies whether to enable auto-renewal for the subscription. Default value: `false`.
     * 
     */
    public Optional<Output<Boolean>> autoRenew() {
        return Optional.ofNullable(this.autoRenew);
    }

    /**
     * The auto-renewal period of the subscription compute nodes. The parameter takes effect when AutoRenew is set to true.
     * 
     */
    @Import(name="autoRenewPeriod")
    private @Nullable Output<Integer> autoRenewPeriod;

    /**
     * @return The auto-renewal period of the subscription compute nodes. The parameter takes effect when AutoRenew is set to true.
     * 
     */
    public Optional<Output<Integer>> autoRenewPeriod() {
        return Optional.ofNullable(this.autoRenewPeriod);
    }

    /**
     * The version of the E-HPC client. By default, the parameter is set to the latest version number.
     * 
     */
    @Import(name="clientVersion")
    private @Nullable Output<String> clientVersion;

    /**
     * @return The version of the E-HPC client. By default, the parameter is set to the latest version number.
     * 
     */
    public Optional<Output<String>> clientVersion() {
        return Optional.ofNullable(this.clientVersion);
    }

    /**
     * The name of the cluster. The name must be `2` to `64` characters in length.
     * 
     */
    @Import(name="clusterName", required=true)
    private Output<String> clusterName;

    /**
     * @return The name of the cluster. The name must be `2` to `64` characters in length.
     * 
     */
    public Output<String> clusterName() {
        return this.clusterName;
    }

    /**
     * The version of the cluster. Default value: `1.0`.
     * 
     */
    @Import(name="clusterVersion")
    private @Nullable Output<String> clusterVersion;

    /**
     * @return The version of the cluster. Default value: `1.0`.
     * 
     */
    public Optional<Output<String>> clusterVersion() {
        return Optional.ofNullable(this.clusterVersion);
    }

    /**
     * The number of the compute nodes. Valid values: `1` to `99`.
     * 
     */
    @Import(name="computeCount", required=true)
    private Output<Integer> computeCount;

    /**
     * @return The number of the compute nodes. Valid values: `1` to `99`.
     * 
     */
    public Output<Integer> computeCount() {
        return this.computeCount;
    }

    /**
     * Specifies whether the compute nodes support hyper-threading. Default value: `true`.
     * 
     */
    @Import(name="computeEnableHt")
    private @Nullable Output<Boolean> computeEnableHt;

    /**
     * @return Specifies whether the compute nodes support hyper-threading. Default value: `true`.
     * 
     */
    public Optional<Output<Boolean>> computeEnableHt() {
        return Optional.ofNullable(this.computeEnableHt);
    }

    /**
     * The instance type of the compute nodes.
     * 
     */
    @Import(name="computeInstanceType", required=true)
    private Output<String> computeInstanceType;

    /**
     * @return The instance type of the compute nodes.
     * 
     */
    public Output<String> computeInstanceType() {
        return this.computeInstanceType;
    }

    /**
     * The maximum hourly price of the compute nodes. A maximum of three decimal places can be used in the value of the parameter. The parameter is valid only when the ComputeSpotStrategy parameter is set to SpotWithPriceLimit.
     * 
     */
    @Import(name="computeSpotPriceLimit")
    private @Nullable Output<String> computeSpotPriceLimit;

    /**
     * @return The maximum hourly price of the compute nodes. A maximum of three decimal places can be used in the value of the parameter. The parameter is valid only when the ComputeSpotStrategy parameter is set to SpotWithPriceLimit.
     * 
     */
    public Optional<Output<String>> computeSpotPriceLimit() {
        return Optional.ofNullable(this.computeSpotPriceLimit);
    }

    /**
     * The bidding method of the compute nodes. Default value: `NoSpot`. Valid values:
     * 
     */
    @Import(name="computeSpotStrategy")
    private @Nullable Output<String> computeSpotStrategy;

    /**
     * @return The bidding method of the compute nodes. Default value: `NoSpot`. Valid values:
     * 
     */
    public Optional<Output<String>> computeSpotStrategy() {
        return Optional.ofNullable(this.computeSpotStrategy);
    }

    /**
     * The mode in which the cluster is deployed. Valid values: `Standard`, `Simple`, `Tiny`. Default value: Standard.
     * 
     */
    @Import(name="deployMode")
    private @Nullable Output<String> deployMode;

    /**
     * @return The mode in which the cluster is deployed. Valid values: `Standard`, `Simple`, `Tiny`. Default value: Standard.
     * 
     */
    public Optional<Output<String>> deployMode() {
        return Optional.ofNullable(this.deployMode);
    }

    /**
     * The description of the cluster. The description must be `2` to `256` characters in length. It cannot start with `http://` or `https://`.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The description of the cluster. The description must be `2` to `256` characters in length. It cannot start with `http://` or `https://`.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The domain name of the on-premises cluster. This parameter takes effect only when the AccoutType parameter is set to Idap.
     * 
     */
    @Import(name="domain")
    private @Nullable Output<String> domain;

    /**
     * @return The domain name of the on-premises cluster. This parameter takes effect only when the AccoutType parameter is set to Idap.
     * 
     */
    public Optional<Output<String>> domain() {
        return Optional.ofNullable(this.domain);
    }

    /**
     * The billing method of the nodes.
     * 
     */
    @Import(name="ecsChargeType")
    private @Nullable Output<String> ecsChargeType;

    /**
     * @return The billing method of the nodes.
     * 
     */
    public Optional<Output<String>> ecsChargeType() {
        return Optional.ofNullable(this.ecsChargeType);
    }

    /**
     * The version of E-HPC. By default, the parameter is set to the latest version number.
     * 
     */
    @Import(name="ehpcVersion")
    private @Nullable Output<String> ehpcVersion;

    /**
     * @return The version of E-HPC. By default, the parameter is set to the latest version number.
     * 
     */
    public Optional<Output<String>> ehpcVersion() {
        return Optional.ofNullable(this.ehpcVersion);
    }

    /**
     * Specifies whether to enable the high availability feature. Default value: `false`.  **Note:** If high availability is enabled, a primary management node and a secondary management node are used.
     * 
     */
    @Import(name="haEnable")
    private @Nullable Output<Boolean> haEnable;

    /**
     * @return Specifies whether to enable the high availability feature. Default value: `false`.  **Note:** If high availability is enabled, a primary management node and a secondary management node are used.
     * 
     */
    public Optional<Output<Boolean>> haEnable() {
        return Optional.ofNullable(this.haEnable);
    }

    /**
     * The ID of the image.
     * 
     */
    @Import(name="imageId")
    private @Nullable Output<String> imageId;

    /**
     * @return The ID of the image.
     * 
     */
    public Optional<Output<String>> imageId() {
        return Optional.ofNullable(this.imageId);
    }

    /**
     * The type of the image. Valid values: `others`, `self`, `system`, `marketplace`. Default value: `system`.
     * 
     */
    @Import(name="imageOwnerAlias")
    private @Nullable Output<String> imageOwnerAlias;

    /**
     * @return The type of the image. Valid values: `others`, `self`, `system`, `marketplace`. Default value: `system`.
     * 
     */
    public Optional<Output<String>> imageOwnerAlias() {
        return Optional.ofNullable(this.imageOwnerAlias);
    }

    /**
     * The URL of the job files that are uploaded to an Object Storage Service (OSS) bucket.
     * 
     */
    @Import(name="inputFileUrl")
    private @Nullable Output<String> inputFileUrl;

    /**
     * @return The URL of the job files that are uploaded to an Object Storage Service (OSS) bucket.
     * 
     */
    public Optional<Output<String>> inputFileUrl() {
        return Optional.ofNullable(this.inputFileUrl);
    }

    /**
     * Specifies whether to enable auto scaling. Default value: `false`.
     * 
     */
    @Import(name="isComputeEss")
    private @Nullable Output<Boolean> isComputeEss;

    /**
     * @return Specifies whether to enable auto scaling. Default value: `false`.
     * 
     */
    public Optional<Output<Boolean>> isComputeEss() {
        return Optional.ofNullable(this.isComputeEss);
    }

    /**
     * The queue to which the compute nodes are added.
     * 
     */
    @Import(name="jobQueue")
    private @Nullable Output<String> jobQueue;

    /**
     * @return The queue to which the compute nodes are added.
     * 
     */
    public Optional<Output<String>> jobQueue() {
        return Optional.ofNullable(this.jobQueue);
    }

    /**
     * The name of the AccessKey pair.
     * 
     */
    @Import(name="keyPairName")
    private @Nullable Output<String> keyPairName;

    /**
     * @return The name of the AccessKey pair.
     * 
     */
    public Optional<Output<String>> keyPairName() {
        return Optional.ofNullable(this.keyPairName);
    }

    /**
     * The number of the logon nodes. Valid values: `1`.
     * 
     */
    @Import(name="loginCount", required=true)
    private Output<Integer> loginCount;

    /**
     * @return The number of the logon nodes. Valid values: `1`.
     * 
     */
    public Output<Integer> loginCount() {
        return this.loginCount;
    }

    /**
     * The instance type of the logon nodes.
     * 
     */
    @Import(name="loginInstanceType", required=true)
    private Output<String> loginInstanceType;

    /**
     * @return The instance type of the logon nodes.
     * 
     */
    public Output<String> loginInstanceType() {
        return this.loginInstanceType;
    }

    /**
     * The number of the management nodes. Valid values: 1 and 2.
     * 
     */
    @Import(name="managerCount")
    private @Nullable Output<Integer> managerCount;

    /**
     * @return The number of the management nodes. Valid values: 1 and 2.
     * 
     */
    public Optional<Output<Integer>> managerCount() {
        return Optional.ofNullable(this.managerCount);
    }

    /**
     * The instance type of the management nodes.
     * 
     */
    @Import(name="managerInstanceType", required=true)
    private Output<String> managerInstanceType;

    /**
     * @return The instance type of the management nodes.
     * 
     */
    public Output<String> managerInstanceType() {
        return this.managerInstanceType;
    }

    /**
     * The image tag of the operating system.
     * 
     */
    @Import(name="osTag", required=true)
    private Output<String> osTag;

    /**
     * @return The image tag of the operating system.
     * 
     */
    public Output<String> osTag() {
        return this.osTag;
    }

    /**
     * The root password of the logon node. The password must be 8 to 30 characters in length and contain at least three of the following items: uppercase letters, lowercase letters, digits, and special characters. The password can contain the following special characters: `( ) ~ ! @ # $ % ^ &amp; * - + = { } [ ] : ; ‘ &lt; &gt; , . ? /`. You must specify either `password` or `key_pair_name`. If both are specified, the Password parameter prevails.
     * 
     */
    @Import(name="password")
    private @Nullable Output<String> password;

    /**
     * @return The root password of the logon node. The password must be 8 to 30 characters in length and contain at least three of the following items: uppercase letters, lowercase letters, digits, and special characters. The password can contain the following special characters: `( ) ~ ! @ # $ % ^ &amp; * - + = { } [ ] : ; ‘ &lt; &gt; , . ? /`. You must specify either `password` or `key_pair_name`. If both are specified, the Password parameter prevails.
     * 
     */
    public Optional<Output<String>> password() {
        return Optional.ofNullable(this.password);
    }

    /**
     * The duration of the subscription. The unit of the duration is specified by the `period_unit` parameter. Default value: `1`.
     * * If you set PriceUnit to Year, the valid values of the Period parameter are 1, 2, and 3.
     * * If you set PriceUnit to Month, the valid values of the Period parameter are 1, 2, 3, 4, 5, 6, 7, 8, and 9.
     * * If you set PriceUnit to Hour, the valid value of the Period parameter is 1.
     * 
     */
    @Import(name="period")
    private @Nullable Output<Integer> period;

    /**
     * @return The duration of the subscription. The unit of the duration is specified by the `period_unit` parameter. Default value: `1`.
     * * If you set PriceUnit to Year, the valid values of the Period parameter are 1, 2, and 3.
     * * If you set PriceUnit to Month, the valid values of the Period parameter are 1, 2, 3, 4, 5, 6, 7, 8, and 9.
     * * If you set PriceUnit to Hour, the valid value of the Period parameter is 1.
     * 
     */
    public Optional<Output<Integer>> period() {
        return Optional.ofNullable(this.period);
    }

    /**
     * The unit of the subscription duration. Valid values: `Year`, `Month`, `Hour`. Default value: `Month`.
     * 
     */
    @Import(name="periodUnit")
    private @Nullable Output<String> periodUnit;

    /**
     * @return The unit of the subscription duration. Valid values: `Year`, `Month`, `Hour`. Default value: `Month`.
     * 
     */
    public Optional<Output<String>> periodUnit() {
        return Optional.ofNullable(this.periodUnit);
    }

    /**
     * The mode configurations of the plug-in. This parameter takes effect only when the SchedulerType parameter is set to custom. The value must be a JSON string. The parameter contains the following parameters: pluginMod, pluginLocalPath, and pluginOssPath.
     * - pluginMod: the mode of the plug-in. The following modes are supported:
     * - oss: The plug-in is downloaded and decompressed from OSS to a local path. The local path is specified by the pluginLocalPath parameter.
     * - image: By default, the plug-in is stored in a pre-defined local path. The local path is specified by the pluginLocalPath parameter.
     * - pluginLocalPath: the local path where the plug-in is stored. We recommend that you select a shared directory in oss mode and a non-shared directory in image mode.
     * - pluginOssPath: the remote path where the plug-in is stored in OSS. This parameter takes effect only when the pluginMod parameter is set to oss.
     * 
     */
    @Import(name="plugin")
    private @Nullable Output<String> plugin;

    /**
     * @return The mode configurations of the plug-in. This parameter takes effect only when the SchedulerType parameter is set to custom. The value must be a JSON string. The parameter contains the following parameters: pluginMod, pluginLocalPath, and pluginOssPath.
     * - pluginMod: the mode of the plug-in. The following modes are supported:
     * - oss: The plug-in is downloaded and decompressed from OSS to a local path. The local path is specified by the pluginLocalPath parameter.
     * - image: By default, the plug-in is stored in a pre-defined local path. The local path is specified by the pluginLocalPath parameter.
     * - pluginLocalPath: the local path where the plug-in is stored. We recommend that you select a shared directory in oss mode and a non-shared directory in image mode.
     * - pluginOssPath: the remote path where the plug-in is stored in OSS. This parameter takes effect only when the pluginMod parameter is set to oss.
     * 
     */
    public Optional<Output<String>> plugin() {
        return Optional.ofNullable(this.plugin);
    }

    /**
     * The post install script. See `post_install_script` below.
     * 
     */
    @Import(name="postInstallScripts")
    private @Nullable Output<List<ClusterPostInstallScriptArgs>> postInstallScripts;

    /**
     * @return The post install script. See `post_install_script` below.
     * 
     */
    public Optional<Output<List<ClusterPostInstallScriptArgs>>> postInstallScripts() {
        return Optional.ofNullable(this.postInstallScripts);
    }

    /**
     * The node of the RAM role.
     * 
     */
    @Import(name="ramNodeTypes")
    private @Nullable Output<List<String>> ramNodeTypes;

    /**
     * @return The node of the RAM role.
     * 
     */
    public Optional<Output<List<String>>> ramNodeTypes() {
        return Optional.ofNullable(this.ramNodeTypes);
    }

    /**
     * The name of the Resource Access Management (RAM) role.
     * 
     */
    @Import(name="ramRoleName")
    private @Nullable Output<String> ramRoleName;

    /**
     * @return The name of the Resource Access Management (RAM) role.
     * 
     */
    public Optional<Output<String>> ramRoleName() {
        return Optional.ofNullable(this.ramRoleName);
    }

    /**
     * The release instance. Valid values: `true`.
     * 
     */
    @Import(name="releaseInstance")
    private @Nullable Output<Boolean> releaseInstance;

    /**
     * @return The release instance. Valid values: `true`.
     * 
     */
    public Optional<Output<Boolean>> releaseInstance() {
        return Optional.ofNullable(this.releaseInstance);
    }

    /**
     * The remote directory to which the file system is mounted.
     * 
     */
    @Import(name="remoteDirectory")
    private @Nullable Output<String> remoteDirectory;

    /**
     * @return The remote directory to which the file system is mounted.
     * 
     */
    public Optional<Output<String>> remoteDirectory() {
        return Optional.ofNullable(this.remoteDirectory);
    }

    /**
     * Specifies whether to enable Virtual Network Computing (VNC). Default value: `false`.
     * 
     */
    @Import(name="remoteVisEnable")
    private @Nullable Output<Boolean> remoteVisEnable;

    /**
     * @return Specifies whether to enable Virtual Network Computing (VNC). Default value: `false`.
     * 
     */
    public Optional<Output<Boolean>> remoteVisEnable() {
        return Optional.ofNullable(this.remoteVisEnable);
    }

    /**
     * The ID of the resource group.
     * 
     */
    @Import(name="resourceGroupId")
    private @Nullable Output<String> resourceGroupId;

    /**
     * @return The ID of the resource group.
     * 
     */
    public Optional<Output<String>> resourceGroupId() {
        return Optional.ofNullable(this.resourceGroupId);
    }

    /**
     * The ID of the Super Computing Cluster (SCC) instance. If you specify the parameter, the SCC instance is moved to a new SCC cluster.
     * 
     */
    @Import(name="sccClusterId")
    private @Nullable Output<String> sccClusterId;

    /**
     * @return The ID of the Super Computing Cluster (SCC) instance. If you specify the parameter, the SCC instance is moved to a new SCC cluster.
     * 
     */
    public Optional<Output<String>> sccClusterId() {
        return Optional.ofNullable(this.sccClusterId);
    }

    /**
     * The type of the scheduler. Valid values: `pbs`, `slurm`, `opengridscheduler` and `deadline`. Default value: `pbs`.
     * 
     */
    @Import(name="schedulerType")
    private @Nullable Output<String> schedulerType;

    /**
     * @return The type of the scheduler. Valid values: `pbs`, `slurm`, `opengridscheduler` and `deadline`. Default value: `pbs`.
     * 
     */
    public Optional<Output<String>> schedulerType() {
        return Optional.ofNullable(this.schedulerType);
    }

    /**
     * The ID of the security group to which the cluster belongs.
     * 
     */
    @Import(name="securityGroupId")
    private @Nullable Output<String> securityGroupId;

    /**
     * @return The ID of the security group to which the cluster belongs.
     * 
     */
    public Optional<Output<String>> securityGroupId() {
        return Optional.ofNullable(this.securityGroupId);
    }

    /**
     * If you do not use an existing security group, set the parameter to the name of a new security group. A default policy is applied to the new security group.
     * 
     */
    @Import(name="securityGroupName")
    private @Nullable Output<String> securityGroupName;

    /**
     * @return If you do not use an existing security group, set the parameter to the name of a new security group. A default policy is applied to the new security group.
     * 
     */
    public Optional<Output<String>> securityGroupName() {
        return Optional.ofNullable(this.securityGroupName);
    }

    /**
     * The performance level of the ESSD that is used as the system disk. Default value: `PL1` For more information, see [ESSDs](https://www.alibabacloud.com/help/en/elastic-compute-service/latest/essds). Valid values:
     * 
     */
    @Import(name="systemDiskLevel")
    private @Nullable Output<String> systemDiskLevel;

    /**
     * @return The performance level of the ESSD that is used as the system disk. Default value: `PL1` For more information, see [ESSDs](https://www.alibabacloud.com/help/en/elastic-compute-service/latest/essds). Valid values:
     * 
     */
    public Optional<Output<String>> systemDiskLevel() {
        return Optional.ofNullable(this.systemDiskLevel);
    }

    /**
     * The size of the system disk. Unit: `GB`. Valid values: `40` to `500`. Default value: `40`.
     * 
     */
    @Import(name="systemDiskSize")
    private @Nullable Output<Integer> systemDiskSize;

    /**
     * @return The size of the system disk. Unit: `GB`. Valid values: `40` to `500`. Default value: `40`.
     * 
     */
    public Optional<Output<Integer>> systemDiskSize() {
        return Optional.ofNullable(this.systemDiskSize);
    }

    /**
     * The type of the system disk. Valid values: `cloud_efficiency`, `cloud_ssd`, `cloud_essd` or `cloud`. Default value: `cloud_ssd`.
     * 
     */
    @Import(name="systemDiskType")
    private @Nullable Output<String> systemDiskType;

    /**
     * @return The type of the system disk. Valid values: `cloud_efficiency`, `cloud_ssd`, `cloud_essd` or `cloud`. Default value: `cloud_ssd`.
     * 
     */
    public Optional<Output<String>> systemDiskType() {
        return Optional.ofNullable(this.systemDiskType);
    }

    /**
     * The ID of the file system. If you leave the parameter empty, a Performance NAS file system is created by default.
     * 
     */
    @Import(name="volumeId")
    private @Nullable Output<String> volumeId;

    /**
     * @return The ID of the file system. If you leave the parameter empty, a Performance NAS file system is created by default.
     * 
     */
    public Optional<Output<String>> volumeId() {
        return Optional.ofNullable(this.volumeId);
    }

    /**
     * The mount options of the file system.
     * 
     */
    @Import(name="volumeMountOption")
    private @Nullable Output<String> volumeMountOption;

    /**
     * @return The mount options of the file system.
     * 
     */
    public Optional<Output<String>> volumeMountOption() {
        return Optional.ofNullable(this.volumeMountOption);
    }

    /**
     * The mount target of the file system. Take note of the following information:
     * - If you do not specify the VolumeId parameter, you can leave the VolumeMountpoint parameter empty. A mount target is created by default.
     * - If you specify the VolumeId parameter, the VolumeMountpoint parameter is required.
     * 
     */
    @Import(name="volumeMountpoint")
    private @Nullable Output<String> volumeMountpoint;

    /**
     * @return The mount target of the file system. Take note of the following information:
     * - If you do not specify the VolumeId parameter, you can leave the VolumeMountpoint parameter empty. A mount target is created by default.
     * - If you specify the VolumeId parameter, the VolumeMountpoint parameter is required.
     * 
     */
    public Optional<Output<String>> volumeMountpoint() {
        return Optional.ofNullable(this.volumeMountpoint);
    }

    /**
     * The type of the protocol that is used by the file system. Valid values: `NFS`, `SMB`. Default value: `NFS`.
     * 
     */
    @Import(name="volumeProtocol")
    private @Nullable Output<String> volumeProtocol;

    /**
     * @return The type of the protocol that is used by the file system. Valid values: `NFS`, `SMB`. Default value: `NFS`.
     * 
     */
    public Optional<Output<String>> volumeProtocol() {
        return Optional.ofNullable(this.volumeProtocol);
    }

    /**
     * The type of the shared storage. Only Apsara File Storage NAS file systems are supported.
     * 
     */
    @Import(name="volumeType")
    private @Nullable Output<String> volumeType;

    /**
     * @return The type of the shared storage. Only Apsara File Storage NAS file systems are supported.
     * 
     */
    public Optional<Output<String>> volumeType() {
        return Optional.ofNullable(this.volumeType);
    }

    /**
     * The ID of the virtual private cloud (VPC) to which the cluster belongs.
     * 
     */
    @Import(name="vpcId")
    private @Nullable Output<String> vpcId;

    /**
     * @return The ID of the virtual private cloud (VPC) to which the cluster belongs.
     * 
     */
    public Optional<Output<String>> vpcId() {
        return Optional.ofNullable(this.vpcId);
    }

    /**
     * The ID of the vSwitch. E-HPC supports only VPC networks.
     * 
     */
    @Import(name="vswitchId")
    private @Nullable Output<String> vswitchId;

    /**
     * @return The ID of the vSwitch. E-HPC supports only VPC networks.
     * 
     */
    public Optional<Output<String>> vswitchId() {
        return Optional.ofNullable(this.vswitchId);
    }

    /**
     * Specifies whether not to install the agent. Default value: `false`.
     * 
     */
    @Import(name="withoutAgent")
    private @Nullable Output<Boolean> withoutAgent;

    /**
     * @return Specifies whether not to install the agent. Default value: `false`.
     * 
     */
    public Optional<Output<Boolean>> withoutAgent() {
        return Optional.ofNullable(this.withoutAgent);
    }

    /**
     * Specifies whether the logon node uses an elastic IP address (EIP). Default value: `false`.
     * 
     */
    @Import(name="withoutElasticIp")
    private @Nullable Output<Boolean> withoutElasticIp;

    /**
     * @return Specifies whether the logon node uses an elastic IP address (EIP). Default value: `false`.
     * 
     */
    public Optional<Output<Boolean>> withoutElasticIp() {
        return Optional.ofNullable(this.withoutElasticIp);
    }

    /**
     * The ID of the zone.
     * 
     */
    @Import(name="zoneId")
    private @Nullable Output<String> zoneId;

    /**
     * @return The ID of the zone.
     * 
     */
    public Optional<Output<String>> zoneId() {
        return Optional.ofNullable(this.zoneId);
    }

    private ClusterArgs() {}

    private ClusterArgs(ClusterArgs $) {
        this.accountType = $.accountType;
        this.additionalVolumes = $.additionalVolumes;
        this.applications = $.applications;
        this.autoRenew = $.autoRenew;
        this.autoRenewPeriod = $.autoRenewPeriod;
        this.clientVersion = $.clientVersion;
        this.clusterName = $.clusterName;
        this.clusterVersion = $.clusterVersion;
        this.computeCount = $.computeCount;
        this.computeEnableHt = $.computeEnableHt;
        this.computeInstanceType = $.computeInstanceType;
        this.computeSpotPriceLimit = $.computeSpotPriceLimit;
        this.computeSpotStrategy = $.computeSpotStrategy;
        this.deployMode = $.deployMode;
        this.description = $.description;
        this.domain = $.domain;
        this.ecsChargeType = $.ecsChargeType;
        this.ehpcVersion = $.ehpcVersion;
        this.haEnable = $.haEnable;
        this.imageId = $.imageId;
        this.imageOwnerAlias = $.imageOwnerAlias;
        this.inputFileUrl = $.inputFileUrl;
        this.isComputeEss = $.isComputeEss;
        this.jobQueue = $.jobQueue;
        this.keyPairName = $.keyPairName;
        this.loginCount = $.loginCount;
        this.loginInstanceType = $.loginInstanceType;
        this.managerCount = $.managerCount;
        this.managerInstanceType = $.managerInstanceType;
        this.osTag = $.osTag;
        this.password = $.password;
        this.period = $.period;
        this.periodUnit = $.periodUnit;
        this.plugin = $.plugin;
        this.postInstallScripts = $.postInstallScripts;
        this.ramNodeTypes = $.ramNodeTypes;
        this.ramRoleName = $.ramRoleName;
        this.releaseInstance = $.releaseInstance;
        this.remoteDirectory = $.remoteDirectory;
        this.remoteVisEnable = $.remoteVisEnable;
        this.resourceGroupId = $.resourceGroupId;
        this.sccClusterId = $.sccClusterId;
        this.schedulerType = $.schedulerType;
        this.securityGroupId = $.securityGroupId;
        this.securityGroupName = $.securityGroupName;
        this.systemDiskLevel = $.systemDiskLevel;
        this.systemDiskSize = $.systemDiskSize;
        this.systemDiskType = $.systemDiskType;
        this.volumeId = $.volumeId;
        this.volumeMountOption = $.volumeMountOption;
        this.volumeMountpoint = $.volumeMountpoint;
        this.volumeProtocol = $.volumeProtocol;
        this.volumeType = $.volumeType;
        this.vpcId = $.vpcId;
        this.vswitchId = $.vswitchId;
        this.withoutAgent = $.withoutAgent;
        this.withoutElasticIp = $.withoutElasticIp;
        this.zoneId = $.zoneId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ClusterArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ClusterArgs $;

        public Builder() {
            $ = new ClusterArgs();
        }

        public Builder(ClusterArgs defaults) {
            $ = new ClusterArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accountType The type of the domain account service. Valid values: `nis`, `ldap`. Default value: `nis`
         * 
         * @return builder
         * 
         */
        public Builder accountType(@Nullable Output<String> accountType) {
            $.accountType = accountType;
            return this;
        }

        /**
         * @param accountType The type of the domain account service. Valid values: `nis`, `ldap`. Default value: `nis`
         * 
         * @return builder
         * 
         */
        public Builder accountType(String accountType) {
            return accountType(Output.of(accountType));
        }

        /**
         * @param additionalVolumes The additional volumes. See `additional_volumes` below.
         * 
         * @return builder
         * 
         */
        public Builder additionalVolumes(@Nullable Output<List<ClusterAdditionalVolumeArgs>> additionalVolumes) {
            $.additionalVolumes = additionalVolumes;
            return this;
        }

        /**
         * @param additionalVolumes The additional volumes. See `additional_volumes` below.
         * 
         * @return builder
         * 
         */
        public Builder additionalVolumes(List<ClusterAdditionalVolumeArgs> additionalVolumes) {
            return additionalVolumes(Output.of(additionalVolumes));
        }

        /**
         * @param additionalVolumes The additional volumes. See `additional_volumes` below.
         * 
         * @return builder
         * 
         */
        public Builder additionalVolumes(ClusterAdditionalVolumeArgs... additionalVolumes) {
            return additionalVolumes(List.of(additionalVolumes));
        }

        /**
         * @param applications The application. See `application` below.
         * 
         * @return builder
         * 
         */
        public Builder applications(@Nullable Output<List<ClusterApplicationArgs>> applications) {
            $.applications = applications;
            return this;
        }

        /**
         * @param applications The application. See `application` below.
         * 
         * @return builder
         * 
         */
        public Builder applications(List<ClusterApplicationArgs> applications) {
            return applications(Output.of(applications));
        }

        /**
         * @param applications The application. See `application` below.
         * 
         * @return builder
         * 
         */
        public Builder applications(ClusterApplicationArgs... applications) {
            return applications(List.of(applications));
        }

        /**
         * @param autoRenew Specifies whether to enable auto-renewal for the subscription. Default value: `false`.
         * 
         * @return builder
         * 
         */
        public Builder autoRenew(@Nullable Output<Boolean> autoRenew) {
            $.autoRenew = autoRenew;
            return this;
        }

        /**
         * @param autoRenew Specifies whether to enable auto-renewal for the subscription. Default value: `false`.
         * 
         * @return builder
         * 
         */
        public Builder autoRenew(Boolean autoRenew) {
            return autoRenew(Output.of(autoRenew));
        }

        /**
         * @param autoRenewPeriod The auto-renewal period of the subscription compute nodes. The parameter takes effect when AutoRenew is set to true.
         * 
         * @return builder
         * 
         */
        public Builder autoRenewPeriod(@Nullable Output<Integer> autoRenewPeriod) {
            $.autoRenewPeriod = autoRenewPeriod;
            return this;
        }

        /**
         * @param autoRenewPeriod The auto-renewal period of the subscription compute nodes. The parameter takes effect when AutoRenew is set to true.
         * 
         * @return builder
         * 
         */
        public Builder autoRenewPeriod(Integer autoRenewPeriod) {
            return autoRenewPeriod(Output.of(autoRenewPeriod));
        }

        /**
         * @param clientVersion The version of the E-HPC client. By default, the parameter is set to the latest version number.
         * 
         * @return builder
         * 
         */
        public Builder clientVersion(@Nullable Output<String> clientVersion) {
            $.clientVersion = clientVersion;
            return this;
        }

        /**
         * @param clientVersion The version of the E-HPC client. By default, the parameter is set to the latest version number.
         * 
         * @return builder
         * 
         */
        public Builder clientVersion(String clientVersion) {
            return clientVersion(Output.of(clientVersion));
        }

        /**
         * @param clusterName The name of the cluster. The name must be `2` to `64` characters in length.
         * 
         * @return builder
         * 
         */
        public Builder clusterName(Output<String> clusterName) {
            $.clusterName = clusterName;
            return this;
        }

        /**
         * @param clusterName The name of the cluster. The name must be `2` to `64` characters in length.
         * 
         * @return builder
         * 
         */
        public Builder clusterName(String clusterName) {
            return clusterName(Output.of(clusterName));
        }

        /**
         * @param clusterVersion The version of the cluster. Default value: `1.0`.
         * 
         * @return builder
         * 
         */
        public Builder clusterVersion(@Nullable Output<String> clusterVersion) {
            $.clusterVersion = clusterVersion;
            return this;
        }

        /**
         * @param clusterVersion The version of the cluster. Default value: `1.0`.
         * 
         * @return builder
         * 
         */
        public Builder clusterVersion(String clusterVersion) {
            return clusterVersion(Output.of(clusterVersion));
        }

        /**
         * @param computeCount The number of the compute nodes. Valid values: `1` to `99`.
         * 
         * @return builder
         * 
         */
        public Builder computeCount(Output<Integer> computeCount) {
            $.computeCount = computeCount;
            return this;
        }

        /**
         * @param computeCount The number of the compute nodes. Valid values: `1` to `99`.
         * 
         * @return builder
         * 
         */
        public Builder computeCount(Integer computeCount) {
            return computeCount(Output.of(computeCount));
        }

        /**
         * @param computeEnableHt Specifies whether the compute nodes support hyper-threading. Default value: `true`.
         * 
         * @return builder
         * 
         */
        public Builder computeEnableHt(@Nullable Output<Boolean> computeEnableHt) {
            $.computeEnableHt = computeEnableHt;
            return this;
        }

        /**
         * @param computeEnableHt Specifies whether the compute nodes support hyper-threading. Default value: `true`.
         * 
         * @return builder
         * 
         */
        public Builder computeEnableHt(Boolean computeEnableHt) {
            return computeEnableHt(Output.of(computeEnableHt));
        }

        /**
         * @param computeInstanceType The instance type of the compute nodes.
         * 
         * @return builder
         * 
         */
        public Builder computeInstanceType(Output<String> computeInstanceType) {
            $.computeInstanceType = computeInstanceType;
            return this;
        }

        /**
         * @param computeInstanceType The instance type of the compute nodes.
         * 
         * @return builder
         * 
         */
        public Builder computeInstanceType(String computeInstanceType) {
            return computeInstanceType(Output.of(computeInstanceType));
        }

        /**
         * @param computeSpotPriceLimit The maximum hourly price of the compute nodes. A maximum of three decimal places can be used in the value of the parameter. The parameter is valid only when the ComputeSpotStrategy parameter is set to SpotWithPriceLimit.
         * 
         * @return builder
         * 
         */
        public Builder computeSpotPriceLimit(@Nullable Output<String> computeSpotPriceLimit) {
            $.computeSpotPriceLimit = computeSpotPriceLimit;
            return this;
        }

        /**
         * @param computeSpotPriceLimit The maximum hourly price of the compute nodes. A maximum of three decimal places can be used in the value of the parameter. The parameter is valid only when the ComputeSpotStrategy parameter is set to SpotWithPriceLimit.
         * 
         * @return builder
         * 
         */
        public Builder computeSpotPriceLimit(String computeSpotPriceLimit) {
            return computeSpotPriceLimit(Output.of(computeSpotPriceLimit));
        }

        /**
         * @param computeSpotStrategy The bidding method of the compute nodes. Default value: `NoSpot`. Valid values:
         * 
         * @return builder
         * 
         */
        public Builder computeSpotStrategy(@Nullable Output<String> computeSpotStrategy) {
            $.computeSpotStrategy = computeSpotStrategy;
            return this;
        }

        /**
         * @param computeSpotStrategy The bidding method of the compute nodes. Default value: `NoSpot`. Valid values:
         * 
         * @return builder
         * 
         */
        public Builder computeSpotStrategy(String computeSpotStrategy) {
            return computeSpotStrategy(Output.of(computeSpotStrategy));
        }

        /**
         * @param deployMode The mode in which the cluster is deployed. Valid values: `Standard`, `Simple`, `Tiny`. Default value: Standard.
         * 
         * @return builder
         * 
         */
        public Builder deployMode(@Nullable Output<String> deployMode) {
            $.deployMode = deployMode;
            return this;
        }

        /**
         * @param deployMode The mode in which the cluster is deployed. Valid values: `Standard`, `Simple`, `Tiny`. Default value: Standard.
         * 
         * @return builder
         * 
         */
        public Builder deployMode(String deployMode) {
            return deployMode(Output.of(deployMode));
        }

        /**
         * @param description The description of the cluster. The description must be `2` to `256` characters in length. It cannot start with `http://` or `https://`.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The description of the cluster. The description must be `2` to `256` characters in length. It cannot start with `http://` or `https://`.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param domain The domain name of the on-premises cluster. This parameter takes effect only when the AccoutType parameter is set to Idap.
         * 
         * @return builder
         * 
         */
        public Builder domain(@Nullable Output<String> domain) {
            $.domain = domain;
            return this;
        }

        /**
         * @param domain The domain name of the on-premises cluster. This parameter takes effect only when the AccoutType parameter is set to Idap.
         * 
         * @return builder
         * 
         */
        public Builder domain(String domain) {
            return domain(Output.of(domain));
        }

        /**
         * @param ecsChargeType The billing method of the nodes.
         * 
         * @return builder
         * 
         */
        public Builder ecsChargeType(@Nullable Output<String> ecsChargeType) {
            $.ecsChargeType = ecsChargeType;
            return this;
        }

        /**
         * @param ecsChargeType The billing method of the nodes.
         * 
         * @return builder
         * 
         */
        public Builder ecsChargeType(String ecsChargeType) {
            return ecsChargeType(Output.of(ecsChargeType));
        }

        /**
         * @param ehpcVersion The version of E-HPC. By default, the parameter is set to the latest version number.
         * 
         * @return builder
         * 
         */
        public Builder ehpcVersion(@Nullable Output<String> ehpcVersion) {
            $.ehpcVersion = ehpcVersion;
            return this;
        }

        /**
         * @param ehpcVersion The version of E-HPC. By default, the parameter is set to the latest version number.
         * 
         * @return builder
         * 
         */
        public Builder ehpcVersion(String ehpcVersion) {
            return ehpcVersion(Output.of(ehpcVersion));
        }

        /**
         * @param haEnable Specifies whether to enable the high availability feature. Default value: `false`.  **Note:** If high availability is enabled, a primary management node and a secondary management node are used.
         * 
         * @return builder
         * 
         */
        public Builder haEnable(@Nullable Output<Boolean> haEnable) {
            $.haEnable = haEnable;
            return this;
        }

        /**
         * @param haEnable Specifies whether to enable the high availability feature. Default value: `false`.  **Note:** If high availability is enabled, a primary management node and a secondary management node are used.
         * 
         * @return builder
         * 
         */
        public Builder haEnable(Boolean haEnable) {
            return haEnable(Output.of(haEnable));
        }

        /**
         * @param imageId The ID of the image.
         * 
         * @return builder
         * 
         */
        public Builder imageId(@Nullable Output<String> imageId) {
            $.imageId = imageId;
            return this;
        }

        /**
         * @param imageId The ID of the image.
         * 
         * @return builder
         * 
         */
        public Builder imageId(String imageId) {
            return imageId(Output.of(imageId));
        }

        /**
         * @param imageOwnerAlias The type of the image. Valid values: `others`, `self`, `system`, `marketplace`. Default value: `system`.
         * 
         * @return builder
         * 
         */
        public Builder imageOwnerAlias(@Nullable Output<String> imageOwnerAlias) {
            $.imageOwnerAlias = imageOwnerAlias;
            return this;
        }

        /**
         * @param imageOwnerAlias The type of the image. Valid values: `others`, `self`, `system`, `marketplace`. Default value: `system`.
         * 
         * @return builder
         * 
         */
        public Builder imageOwnerAlias(String imageOwnerAlias) {
            return imageOwnerAlias(Output.of(imageOwnerAlias));
        }

        /**
         * @param inputFileUrl The URL of the job files that are uploaded to an Object Storage Service (OSS) bucket.
         * 
         * @return builder
         * 
         */
        public Builder inputFileUrl(@Nullable Output<String> inputFileUrl) {
            $.inputFileUrl = inputFileUrl;
            return this;
        }

        /**
         * @param inputFileUrl The URL of the job files that are uploaded to an Object Storage Service (OSS) bucket.
         * 
         * @return builder
         * 
         */
        public Builder inputFileUrl(String inputFileUrl) {
            return inputFileUrl(Output.of(inputFileUrl));
        }

        /**
         * @param isComputeEss Specifies whether to enable auto scaling. Default value: `false`.
         * 
         * @return builder
         * 
         */
        public Builder isComputeEss(@Nullable Output<Boolean> isComputeEss) {
            $.isComputeEss = isComputeEss;
            return this;
        }

        /**
         * @param isComputeEss Specifies whether to enable auto scaling. Default value: `false`.
         * 
         * @return builder
         * 
         */
        public Builder isComputeEss(Boolean isComputeEss) {
            return isComputeEss(Output.of(isComputeEss));
        }

        /**
         * @param jobQueue The queue to which the compute nodes are added.
         * 
         * @return builder
         * 
         */
        public Builder jobQueue(@Nullable Output<String> jobQueue) {
            $.jobQueue = jobQueue;
            return this;
        }

        /**
         * @param jobQueue The queue to which the compute nodes are added.
         * 
         * @return builder
         * 
         */
        public Builder jobQueue(String jobQueue) {
            return jobQueue(Output.of(jobQueue));
        }

        /**
         * @param keyPairName The name of the AccessKey pair.
         * 
         * @return builder
         * 
         */
        public Builder keyPairName(@Nullable Output<String> keyPairName) {
            $.keyPairName = keyPairName;
            return this;
        }

        /**
         * @param keyPairName The name of the AccessKey pair.
         * 
         * @return builder
         * 
         */
        public Builder keyPairName(String keyPairName) {
            return keyPairName(Output.of(keyPairName));
        }

        /**
         * @param loginCount The number of the logon nodes. Valid values: `1`.
         * 
         * @return builder
         * 
         */
        public Builder loginCount(Output<Integer> loginCount) {
            $.loginCount = loginCount;
            return this;
        }

        /**
         * @param loginCount The number of the logon nodes. Valid values: `1`.
         * 
         * @return builder
         * 
         */
        public Builder loginCount(Integer loginCount) {
            return loginCount(Output.of(loginCount));
        }

        /**
         * @param loginInstanceType The instance type of the logon nodes.
         * 
         * @return builder
         * 
         */
        public Builder loginInstanceType(Output<String> loginInstanceType) {
            $.loginInstanceType = loginInstanceType;
            return this;
        }

        /**
         * @param loginInstanceType The instance type of the logon nodes.
         * 
         * @return builder
         * 
         */
        public Builder loginInstanceType(String loginInstanceType) {
            return loginInstanceType(Output.of(loginInstanceType));
        }

        /**
         * @param managerCount The number of the management nodes. Valid values: 1 and 2.
         * 
         * @return builder
         * 
         */
        public Builder managerCount(@Nullable Output<Integer> managerCount) {
            $.managerCount = managerCount;
            return this;
        }

        /**
         * @param managerCount The number of the management nodes. Valid values: 1 and 2.
         * 
         * @return builder
         * 
         */
        public Builder managerCount(Integer managerCount) {
            return managerCount(Output.of(managerCount));
        }

        /**
         * @param managerInstanceType The instance type of the management nodes.
         * 
         * @return builder
         * 
         */
        public Builder managerInstanceType(Output<String> managerInstanceType) {
            $.managerInstanceType = managerInstanceType;
            return this;
        }

        /**
         * @param managerInstanceType The instance type of the management nodes.
         * 
         * @return builder
         * 
         */
        public Builder managerInstanceType(String managerInstanceType) {
            return managerInstanceType(Output.of(managerInstanceType));
        }

        /**
         * @param osTag The image tag of the operating system.
         * 
         * @return builder
         * 
         */
        public Builder osTag(Output<String> osTag) {
            $.osTag = osTag;
            return this;
        }

        /**
         * @param osTag The image tag of the operating system.
         * 
         * @return builder
         * 
         */
        public Builder osTag(String osTag) {
            return osTag(Output.of(osTag));
        }

        /**
         * @param password The root password of the logon node. The password must be 8 to 30 characters in length and contain at least three of the following items: uppercase letters, lowercase letters, digits, and special characters. The password can contain the following special characters: `( ) ~ ! @ # $ % ^ &amp; * - + = { } [ ] : ; ‘ &lt; &gt; , . ? /`. You must specify either `password` or `key_pair_name`. If both are specified, the Password parameter prevails.
         * 
         * @return builder
         * 
         */
        public Builder password(@Nullable Output<String> password) {
            $.password = password;
            return this;
        }

        /**
         * @param password The root password of the logon node. The password must be 8 to 30 characters in length and contain at least three of the following items: uppercase letters, lowercase letters, digits, and special characters. The password can contain the following special characters: `( ) ~ ! @ # $ % ^ &amp; * - + = { } [ ] : ; ‘ &lt; &gt; , . ? /`. You must specify either `password` or `key_pair_name`. If both are specified, the Password parameter prevails.
         * 
         * @return builder
         * 
         */
        public Builder password(String password) {
            return password(Output.of(password));
        }

        /**
         * @param period The duration of the subscription. The unit of the duration is specified by the `period_unit` parameter. Default value: `1`.
         * * If you set PriceUnit to Year, the valid values of the Period parameter are 1, 2, and 3.
         * * If you set PriceUnit to Month, the valid values of the Period parameter are 1, 2, 3, 4, 5, 6, 7, 8, and 9.
         * * If you set PriceUnit to Hour, the valid value of the Period parameter is 1.
         * 
         * @return builder
         * 
         */
        public Builder period(@Nullable Output<Integer> period) {
            $.period = period;
            return this;
        }

        /**
         * @param period The duration of the subscription. The unit of the duration is specified by the `period_unit` parameter. Default value: `1`.
         * * If you set PriceUnit to Year, the valid values of the Period parameter are 1, 2, and 3.
         * * If you set PriceUnit to Month, the valid values of the Period parameter are 1, 2, 3, 4, 5, 6, 7, 8, and 9.
         * * If you set PriceUnit to Hour, the valid value of the Period parameter is 1.
         * 
         * @return builder
         * 
         */
        public Builder period(Integer period) {
            return period(Output.of(period));
        }

        /**
         * @param periodUnit The unit of the subscription duration. Valid values: `Year`, `Month`, `Hour`. Default value: `Month`.
         * 
         * @return builder
         * 
         */
        public Builder periodUnit(@Nullable Output<String> periodUnit) {
            $.periodUnit = periodUnit;
            return this;
        }

        /**
         * @param periodUnit The unit of the subscription duration. Valid values: `Year`, `Month`, `Hour`. Default value: `Month`.
         * 
         * @return builder
         * 
         */
        public Builder periodUnit(String periodUnit) {
            return periodUnit(Output.of(periodUnit));
        }

        /**
         * @param plugin The mode configurations of the plug-in. This parameter takes effect only when the SchedulerType parameter is set to custom. The value must be a JSON string. The parameter contains the following parameters: pluginMod, pluginLocalPath, and pluginOssPath.
         * - pluginMod: the mode of the plug-in. The following modes are supported:
         * - oss: The plug-in is downloaded and decompressed from OSS to a local path. The local path is specified by the pluginLocalPath parameter.
         * - image: By default, the plug-in is stored in a pre-defined local path. The local path is specified by the pluginLocalPath parameter.
         * - pluginLocalPath: the local path where the plug-in is stored. We recommend that you select a shared directory in oss mode and a non-shared directory in image mode.
         * - pluginOssPath: the remote path where the plug-in is stored in OSS. This parameter takes effect only when the pluginMod parameter is set to oss.
         * 
         * @return builder
         * 
         */
        public Builder plugin(@Nullable Output<String> plugin) {
            $.plugin = plugin;
            return this;
        }

        /**
         * @param plugin The mode configurations of the plug-in. This parameter takes effect only when the SchedulerType parameter is set to custom. The value must be a JSON string. The parameter contains the following parameters: pluginMod, pluginLocalPath, and pluginOssPath.
         * - pluginMod: the mode of the plug-in. The following modes are supported:
         * - oss: The plug-in is downloaded and decompressed from OSS to a local path. The local path is specified by the pluginLocalPath parameter.
         * - image: By default, the plug-in is stored in a pre-defined local path. The local path is specified by the pluginLocalPath parameter.
         * - pluginLocalPath: the local path where the plug-in is stored. We recommend that you select a shared directory in oss mode and a non-shared directory in image mode.
         * - pluginOssPath: the remote path where the plug-in is stored in OSS. This parameter takes effect only when the pluginMod parameter is set to oss.
         * 
         * @return builder
         * 
         */
        public Builder plugin(String plugin) {
            return plugin(Output.of(plugin));
        }

        /**
         * @param postInstallScripts The post install script. See `post_install_script` below.
         * 
         * @return builder
         * 
         */
        public Builder postInstallScripts(@Nullable Output<List<ClusterPostInstallScriptArgs>> postInstallScripts) {
            $.postInstallScripts = postInstallScripts;
            return this;
        }

        /**
         * @param postInstallScripts The post install script. See `post_install_script` below.
         * 
         * @return builder
         * 
         */
        public Builder postInstallScripts(List<ClusterPostInstallScriptArgs> postInstallScripts) {
            return postInstallScripts(Output.of(postInstallScripts));
        }

        /**
         * @param postInstallScripts The post install script. See `post_install_script` below.
         * 
         * @return builder
         * 
         */
        public Builder postInstallScripts(ClusterPostInstallScriptArgs... postInstallScripts) {
            return postInstallScripts(List.of(postInstallScripts));
        }

        /**
         * @param ramNodeTypes The node of the RAM role.
         * 
         * @return builder
         * 
         */
        public Builder ramNodeTypes(@Nullable Output<List<String>> ramNodeTypes) {
            $.ramNodeTypes = ramNodeTypes;
            return this;
        }

        /**
         * @param ramNodeTypes The node of the RAM role.
         * 
         * @return builder
         * 
         */
        public Builder ramNodeTypes(List<String> ramNodeTypes) {
            return ramNodeTypes(Output.of(ramNodeTypes));
        }

        /**
         * @param ramNodeTypes The node of the RAM role.
         * 
         * @return builder
         * 
         */
        public Builder ramNodeTypes(String... ramNodeTypes) {
            return ramNodeTypes(List.of(ramNodeTypes));
        }

        /**
         * @param ramRoleName The name of the Resource Access Management (RAM) role.
         * 
         * @return builder
         * 
         */
        public Builder ramRoleName(@Nullable Output<String> ramRoleName) {
            $.ramRoleName = ramRoleName;
            return this;
        }

        /**
         * @param ramRoleName The name of the Resource Access Management (RAM) role.
         * 
         * @return builder
         * 
         */
        public Builder ramRoleName(String ramRoleName) {
            return ramRoleName(Output.of(ramRoleName));
        }

        /**
         * @param releaseInstance The release instance. Valid values: `true`.
         * 
         * @return builder
         * 
         */
        public Builder releaseInstance(@Nullable Output<Boolean> releaseInstance) {
            $.releaseInstance = releaseInstance;
            return this;
        }

        /**
         * @param releaseInstance The release instance. Valid values: `true`.
         * 
         * @return builder
         * 
         */
        public Builder releaseInstance(Boolean releaseInstance) {
            return releaseInstance(Output.of(releaseInstance));
        }

        /**
         * @param remoteDirectory The remote directory to which the file system is mounted.
         * 
         * @return builder
         * 
         */
        public Builder remoteDirectory(@Nullable Output<String> remoteDirectory) {
            $.remoteDirectory = remoteDirectory;
            return this;
        }

        /**
         * @param remoteDirectory The remote directory to which the file system is mounted.
         * 
         * @return builder
         * 
         */
        public Builder remoteDirectory(String remoteDirectory) {
            return remoteDirectory(Output.of(remoteDirectory));
        }

        /**
         * @param remoteVisEnable Specifies whether to enable Virtual Network Computing (VNC). Default value: `false`.
         * 
         * @return builder
         * 
         */
        public Builder remoteVisEnable(@Nullable Output<Boolean> remoteVisEnable) {
            $.remoteVisEnable = remoteVisEnable;
            return this;
        }

        /**
         * @param remoteVisEnable Specifies whether to enable Virtual Network Computing (VNC). Default value: `false`.
         * 
         * @return builder
         * 
         */
        public Builder remoteVisEnable(Boolean remoteVisEnable) {
            return remoteVisEnable(Output.of(remoteVisEnable));
        }

        /**
         * @param resourceGroupId The ID of the resource group.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupId(@Nullable Output<String> resourceGroupId) {
            $.resourceGroupId = resourceGroupId;
            return this;
        }

        /**
         * @param resourceGroupId The ID of the resource group.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupId(String resourceGroupId) {
            return resourceGroupId(Output.of(resourceGroupId));
        }

        /**
         * @param sccClusterId The ID of the Super Computing Cluster (SCC) instance. If you specify the parameter, the SCC instance is moved to a new SCC cluster.
         * 
         * @return builder
         * 
         */
        public Builder sccClusterId(@Nullable Output<String> sccClusterId) {
            $.sccClusterId = sccClusterId;
            return this;
        }

        /**
         * @param sccClusterId The ID of the Super Computing Cluster (SCC) instance. If you specify the parameter, the SCC instance is moved to a new SCC cluster.
         * 
         * @return builder
         * 
         */
        public Builder sccClusterId(String sccClusterId) {
            return sccClusterId(Output.of(sccClusterId));
        }

        /**
         * @param schedulerType The type of the scheduler. Valid values: `pbs`, `slurm`, `opengridscheduler` and `deadline`. Default value: `pbs`.
         * 
         * @return builder
         * 
         */
        public Builder schedulerType(@Nullable Output<String> schedulerType) {
            $.schedulerType = schedulerType;
            return this;
        }

        /**
         * @param schedulerType The type of the scheduler. Valid values: `pbs`, `slurm`, `opengridscheduler` and `deadline`. Default value: `pbs`.
         * 
         * @return builder
         * 
         */
        public Builder schedulerType(String schedulerType) {
            return schedulerType(Output.of(schedulerType));
        }

        /**
         * @param securityGroupId The ID of the security group to which the cluster belongs.
         * 
         * @return builder
         * 
         */
        public Builder securityGroupId(@Nullable Output<String> securityGroupId) {
            $.securityGroupId = securityGroupId;
            return this;
        }

        /**
         * @param securityGroupId The ID of the security group to which the cluster belongs.
         * 
         * @return builder
         * 
         */
        public Builder securityGroupId(String securityGroupId) {
            return securityGroupId(Output.of(securityGroupId));
        }

        /**
         * @param securityGroupName If you do not use an existing security group, set the parameter to the name of a new security group. A default policy is applied to the new security group.
         * 
         * @return builder
         * 
         */
        public Builder securityGroupName(@Nullable Output<String> securityGroupName) {
            $.securityGroupName = securityGroupName;
            return this;
        }

        /**
         * @param securityGroupName If you do not use an existing security group, set the parameter to the name of a new security group. A default policy is applied to the new security group.
         * 
         * @return builder
         * 
         */
        public Builder securityGroupName(String securityGroupName) {
            return securityGroupName(Output.of(securityGroupName));
        }

        /**
         * @param systemDiskLevel The performance level of the ESSD that is used as the system disk. Default value: `PL1` For more information, see [ESSDs](https://www.alibabacloud.com/help/en/elastic-compute-service/latest/essds). Valid values:
         * 
         * @return builder
         * 
         */
        public Builder systemDiskLevel(@Nullable Output<String> systemDiskLevel) {
            $.systemDiskLevel = systemDiskLevel;
            return this;
        }

        /**
         * @param systemDiskLevel The performance level of the ESSD that is used as the system disk. Default value: `PL1` For more information, see [ESSDs](https://www.alibabacloud.com/help/en/elastic-compute-service/latest/essds). Valid values:
         * 
         * @return builder
         * 
         */
        public Builder systemDiskLevel(String systemDiskLevel) {
            return systemDiskLevel(Output.of(systemDiskLevel));
        }

        /**
         * @param systemDiskSize The size of the system disk. Unit: `GB`. Valid values: `40` to `500`. Default value: `40`.
         * 
         * @return builder
         * 
         */
        public Builder systemDiskSize(@Nullable Output<Integer> systemDiskSize) {
            $.systemDiskSize = systemDiskSize;
            return this;
        }

        /**
         * @param systemDiskSize The size of the system disk. Unit: `GB`. Valid values: `40` to `500`. Default value: `40`.
         * 
         * @return builder
         * 
         */
        public Builder systemDiskSize(Integer systemDiskSize) {
            return systemDiskSize(Output.of(systemDiskSize));
        }

        /**
         * @param systemDiskType The type of the system disk. Valid values: `cloud_efficiency`, `cloud_ssd`, `cloud_essd` or `cloud`. Default value: `cloud_ssd`.
         * 
         * @return builder
         * 
         */
        public Builder systemDiskType(@Nullable Output<String> systemDiskType) {
            $.systemDiskType = systemDiskType;
            return this;
        }

        /**
         * @param systemDiskType The type of the system disk. Valid values: `cloud_efficiency`, `cloud_ssd`, `cloud_essd` or `cloud`. Default value: `cloud_ssd`.
         * 
         * @return builder
         * 
         */
        public Builder systemDiskType(String systemDiskType) {
            return systemDiskType(Output.of(systemDiskType));
        }

        /**
         * @param volumeId The ID of the file system. If you leave the parameter empty, a Performance NAS file system is created by default.
         * 
         * @return builder
         * 
         */
        public Builder volumeId(@Nullable Output<String> volumeId) {
            $.volumeId = volumeId;
            return this;
        }

        /**
         * @param volumeId The ID of the file system. If you leave the parameter empty, a Performance NAS file system is created by default.
         * 
         * @return builder
         * 
         */
        public Builder volumeId(String volumeId) {
            return volumeId(Output.of(volumeId));
        }

        /**
         * @param volumeMountOption The mount options of the file system.
         * 
         * @return builder
         * 
         */
        public Builder volumeMountOption(@Nullable Output<String> volumeMountOption) {
            $.volumeMountOption = volumeMountOption;
            return this;
        }

        /**
         * @param volumeMountOption The mount options of the file system.
         * 
         * @return builder
         * 
         */
        public Builder volumeMountOption(String volumeMountOption) {
            return volumeMountOption(Output.of(volumeMountOption));
        }

        /**
         * @param volumeMountpoint The mount target of the file system. Take note of the following information:
         * - If you do not specify the VolumeId parameter, you can leave the VolumeMountpoint parameter empty. A mount target is created by default.
         * - If you specify the VolumeId parameter, the VolumeMountpoint parameter is required.
         * 
         * @return builder
         * 
         */
        public Builder volumeMountpoint(@Nullable Output<String> volumeMountpoint) {
            $.volumeMountpoint = volumeMountpoint;
            return this;
        }

        /**
         * @param volumeMountpoint The mount target of the file system. Take note of the following information:
         * - If you do not specify the VolumeId parameter, you can leave the VolumeMountpoint parameter empty. A mount target is created by default.
         * - If you specify the VolumeId parameter, the VolumeMountpoint parameter is required.
         * 
         * @return builder
         * 
         */
        public Builder volumeMountpoint(String volumeMountpoint) {
            return volumeMountpoint(Output.of(volumeMountpoint));
        }

        /**
         * @param volumeProtocol The type of the protocol that is used by the file system. Valid values: `NFS`, `SMB`. Default value: `NFS`.
         * 
         * @return builder
         * 
         */
        public Builder volumeProtocol(@Nullable Output<String> volumeProtocol) {
            $.volumeProtocol = volumeProtocol;
            return this;
        }

        /**
         * @param volumeProtocol The type of the protocol that is used by the file system. Valid values: `NFS`, `SMB`. Default value: `NFS`.
         * 
         * @return builder
         * 
         */
        public Builder volumeProtocol(String volumeProtocol) {
            return volumeProtocol(Output.of(volumeProtocol));
        }

        /**
         * @param volumeType The type of the shared storage. Only Apsara File Storage NAS file systems are supported.
         * 
         * @return builder
         * 
         */
        public Builder volumeType(@Nullable Output<String> volumeType) {
            $.volumeType = volumeType;
            return this;
        }

        /**
         * @param volumeType The type of the shared storage. Only Apsara File Storage NAS file systems are supported.
         * 
         * @return builder
         * 
         */
        public Builder volumeType(String volumeType) {
            return volumeType(Output.of(volumeType));
        }

        /**
         * @param vpcId The ID of the virtual private cloud (VPC) to which the cluster belongs.
         * 
         * @return builder
         * 
         */
        public Builder vpcId(@Nullable Output<String> vpcId) {
            $.vpcId = vpcId;
            return this;
        }

        /**
         * @param vpcId The ID of the virtual private cloud (VPC) to which the cluster belongs.
         * 
         * @return builder
         * 
         */
        public Builder vpcId(String vpcId) {
            return vpcId(Output.of(vpcId));
        }

        /**
         * @param vswitchId The ID of the vSwitch. E-HPC supports only VPC networks.
         * 
         * @return builder
         * 
         */
        public Builder vswitchId(@Nullable Output<String> vswitchId) {
            $.vswitchId = vswitchId;
            return this;
        }

        /**
         * @param vswitchId The ID of the vSwitch. E-HPC supports only VPC networks.
         * 
         * @return builder
         * 
         */
        public Builder vswitchId(String vswitchId) {
            return vswitchId(Output.of(vswitchId));
        }

        /**
         * @param withoutAgent Specifies whether not to install the agent. Default value: `false`.
         * 
         * @return builder
         * 
         */
        public Builder withoutAgent(@Nullable Output<Boolean> withoutAgent) {
            $.withoutAgent = withoutAgent;
            return this;
        }

        /**
         * @param withoutAgent Specifies whether not to install the agent. Default value: `false`.
         * 
         * @return builder
         * 
         */
        public Builder withoutAgent(Boolean withoutAgent) {
            return withoutAgent(Output.of(withoutAgent));
        }

        /**
         * @param withoutElasticIp Specifies whether the logon node uses an elastic IP address (EIP). Default value: `false`.
         * 
         * @return builder
         * 
         */
        public Builder withoutElasticIp(@Nullable Output<Boolean> withoutElasticIp) {
            $.withoutElasticIp = withoutElasticIp;
            return this;
        }

        /**
         * @param withoutElasticIp Specifies whether the logon node uses an elastic IP address (EIP). Default value: `false`.
         * 
         * @return builder
         * 
         */
        public Builder withoutElasticIp(Boolean withoutElasticIp) {
            return withoutElasticIp(Output.of(withoutElasticIp));
        }

        /**
         * @param zoneId The ID of the zone.
         * 
         * @return builder
         * 
         */
        public Builder zoneId(@Nullable Output<String> zoneId) {
            $.zoneId = zoneId;
            return this;
        }

        /**
         * @param zoneId The ID of the zone.
         * 
         * @return builder
         * 
         */
        public Builder zoneId(String zoneId) {
            return zoneId(Output.of(zoneId));
        }

        public ClusterArgs build() {
            if ($.clusterName == null) {
                throw new MissingRequiredPropertyException("ClusterArgs", "clusterName");
            }
            if ($.computeCount == null) {
                throw new MissingRequiredPropertyException("ClusterArgs", "computeCount");
            }
            if ($.computeInstanceType == null) {
                throw new MissingRequiredPropertyException("ClusterArgs", "computeInstanceType");
            }
            if ($.loginCount == null) {
                throw new MissingRequiredPropertyException("ClusterArgs", "loginCount");
            }
            if ($.loginInstanceType == null) {
                throw new MissingRequiredPropertyException("ClusterArgs", "loginInstanceType");
            }
            if ($.managerInstanceType == null) {
                throw new MissingRequiredPropertyException("ClusterArgs", "managerInstanceType");
            }
            if ($.osTag == null) {
                throw new MissingRequiredPropertyException("ClusterArgs", "osTag");
            }
            return $;
        }
    }

}
