// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.ram;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SecurityPreferenceArgs extends com.pulumi.resources.ResourceArgs {

    public static final SecurityPreferenceArgs Empty = new SecurityPreferenceArgs();

    /**
     * Whether to allow RAM users to manage their own passwords. Value:
     * - true (default): Allowed.
     * - false: not allowed.
     * 
     */
    @Import(name="allowUserToChangePassword")
    private @Nullable Output<Boolean> allowUserToChangePassword;

    /**
     * @return Whether to allow RAM users to manage their own passwords. Value:
     * - true (default): Allowed.
     * - false: not allowed.
     * 
     */
    public Optional<Output<Boolean>> allowUserToChangePassword() {
        return Optional.ofNullable(this.allowUserToChangePassword);
    }

    /**
     * Whether to allow RAM users to log on using a passkey. Value:
     * - true (default): Allowed.
     * - false: not allowed.
     * 
     */
    @Import(name="allowUserToLoginWithPasskey")
    private @Nullable Output<Boolean> allowUserToLoginWithPasskey;

    /**
     * @return Whether to allow RAM users to log on using a passkey. Value:
     * - true (default): Allowed.
     * - false: not allowed.
     * 
     */
    public Optional<Output<Boolean>> allowUserToLoginWithPasskey() {
        return Optional.ofNullable(this.allowUserToLoginWithPasskey);
    }

    /**
     * Whether to allow RAM users to manage their own access keys. Value:
     * - true: Allow.
     * - false (default): Not allowed.
     * 
     */
    @Import(name="allowUserToManageAccessKeys")
    private @Nullable Output<Boolean> allowUserToManageAccessKeys;

    /**
     * @return Whether to allow RAM users to manage their own access keys. Value:
     * - true: Allow.
     * - false (default): Not allowed.
     * 
     */
    public Optional<Output<Boolean>> allowUserToManageAccessKeys() {
        return Optional.ofNullable(this.allowUserToManageAccessKeys);
    }

    /**
     * Whether to allow RAM users to manage multi-factor authentication devices. Value:
     * - true (default): Allowed.
     * - false: not allowed.
     * 
     */
    @Import(name="allowUserToManageMfaDevices")
    private @Nullable Output<Boolean> allowUserToManageMfaDevices;

    /**
     * @return Whether to allow RAM users to manage multi-factor authentication devices. Value:
     * - true (default): Allowed.
     * - false: not allowed.
     * 
     */
    public Optional<Output<Boolean>> allowUserToManageMfaDevices() {
        return Optional.ofNullable(this.allowUserToManageMfaDevices);
    }

    /**
     * Whether to allow RAM users to independently manage the binding and unbinding of personal DingTalk. Value:
     * - true (default): Allowed.
     * - false: not allowed.
     * 
     */
    @Import(name="allowUserToManagePersonalDingTalk")
    private @Nullable Output<Boolean> allowUserToManagePersonalDingTalk;

    /**
     * @return Whether to allow RAM users to independently manage the binding and unbinding of personal DingTalk. Value:
     * - true (default): Allowed.
     * - false: not allowed.
     * 
     */
    public Optional<Output<Boolean>> allowUserToManagePersonalDingTalk() {
        return Optional.ofNullable(this.allowUserToManagePersonalDingTalk);
    }

    /**
     * Whether to save the verification status of a RAM user after logging in using multi-factor authentication. The validity period is 7 days. Value:
     * - true: Allow.
     * - false (default): Not allowed.
     * 
     */
    @Import(name="enableSaveMfaTicket")
    private @Nullable Output<Boolean> enableSaveMfaTicket;

    /**
     * @return Whether to save the verification status of a RAM user after logging in using multi-factor authentication. The validity period is 7 days. Value:
     * - true: Allow.
     * - false (default): Not allowed.
     * 
     */
    public Optional<Output<Boolean>> enableSaveMfaTicket() {
        return Optional.ofNullable(this.enableSaveMfaTicket);
    }

    /**
     * Field `enforceMfaForLogin` has been deprecated from provider version 1.248.0. New field `mfaOperationForLogin` instead.
     * Specifies whether MFA is required for all RAM users when they log on to the Alibaba Cloud Management Console by using usernames and passwords. Valid values: `true` and `false`
     * 
     */
    @Import(name="enforceMfaForLogin")
    private @Nullable Output<Boolean> enforceMfaForLogin;

    /**
     * @return Field `enforceMfaForLogin` has been deprecated from provider version 1.248.0. New field `mfaOperationForLogin` instead.
     * Specifies whether MFA is required for all RAM users when they log on to the Alibaba Cloud Management Console by using usernames and passwords. Valid values: `true` and `false`
     * 
     */
    public Optional<Output<Boolean>> enforceMfaForLogin() {
        return Optional.ofNullable(this.enforceMfaForLogin);
    }

    /**
     * The login mask. The logon mask determines which IP addresses are affected by the logon console, including password logon and single sign-on (SSO), but API calls made using the access key are not affected.
     * - If the mask is specified, RAM users can only log on from the specified IP address.
     * - If you do not specify any mask, the login console function will apply to the entire network.
     * 
     * When you need to configure multiple login masks, use a semicolon (;) to separate them, for example: 192.168.0.0/16;10.0.0.0/8.
     * 
     * Configure a maximum of 40 logon masks, with a total length of 512 characters.
     * 
     */
    @Import(name="loginNetworkMasks")
    private @Nullable Output<String> loginNetworkMasks;

    /**
     * @return The login mask. The logon mask determines which IP addresses are affected by the logon console, including password logon and single sign-on (SSO), but API calls made using the access key are not affected.
     * - If the mask is specified, RAM users can only log on from the specified IP address.
     * - If you do not specify any mask, the login console function will apply to the entire network.
     * 
     * When you need to configure multiple login masks, use a semicolon (;) to separate them, for example: 192.168.0.0/16;10.0.0.0/8.
     * 
     * Configure a maximum of 40 logon masks, with a total length of 512 characters.
     * 
     */
    public Optional<Output<String>> loginNetworkMasks() {
        return Optional.ofNullable(this.loginNetworkMasks);
    }

    /**
     * The validity period of the logon session of RAM users.
     * Valid values: 1 to 24. Unit: hours.
     * Default value: 6.
     * 
     */
    @Import(name="loginSessionDuration")
    private @Nullable Output<Integer> loginSessionDuration;

    /**
     * @return The validity period of the logon session of RAM users.
     * Valid values: 1 to 24. Unit: hours.
     * Default value: 6.
     * 
     */
    public Optional<Output<Integer>> loginSessionDuration() {
        return Optional.ofNullable(this.loginSessionDuration);
    }

    /**
     * MFA must be used during logon (replace the original EnforceMFAForLogin parameter, the original parameter is still valid, we recommend that you update it to a new parameter). Value:
     * - mandatory: mandatory for all RAM users. The original value of EnforceMFAForLogin is true.
     * - independent (default): depends on the independent configuration of each RAM user. The original value of EnforceMFAForLogin is false.
     * - adaptive: Used only during abnormal login.
     * 
     */
    @Import(name="mfaOperationForLogin")
    private @Nullable Output<String> mfaOperationForLogin;

    /**
     * @return MFA must be used during logon (replace the original EnforceMFAForLogin parameter, the original parameter is still valid, we recommend that you update it to a new parameter). Value:
     * - mandatory: mandatory for all RAM users. The original value of EnforceMFAForLogin is true.
     * - independent (default): depends on the independent configuration of each RAM user. The original value of EnforceMFAForLogin is false.
     * - adaptive: Used only during abnormal login.
     * 
     */
    public Optional<Output<String>> mfaOperationForLogin() {
        return Optional.ofNullable(this.mfaOperationForLogin);
    }

    /**
     * Whether MFA is verified twice during abnormal logon. Value:
     * - autonomous (default): Skip, do not force binding.
     * - enforceVerify: Force binding validation.
     * 
     */
    @Import(name="operationForRiskLogin")
    private @Nullable Output<String> operationForRiskLogin;

    /**
     * @return Whether MFA is verified twice during abnormal logon. Value:
     * - autonomous (default): Skip, do not force binding.
     * - enforceVerify: Force binding validation.
     * 
     */
    public Optional<Output<String>> operationForRiskLogin() {
        return Optional.ofNullable(this.operationForRiskLogin);
    }

    /**
     * Means of multi-factor authentication. Value:
     * - sms: secure phone.
     * - email: Secure mailbox.
     * 
     * The following arguments will be discarded. Please use new fields as soon as possible:
     * 
     */
    @Import(name="verificationTypes")
    private @Nullable Output<List<String>> verificationTypes;

    /**
     * @return Means of multi-factor authentication. Value:
     * - sms: secure phone.
     * - email: Secure mailbox.
     * 
     * The following arguments will be discarded. Please use new fields as soon as possible:
     * 
     */
    public Optional<Output<List<String>>> verificationTypes() {
        return Optional.ofNullable(this.verificationTypes);
    }

    private SecurityPreferenceArgs() {}

    private SecurityPreferenceArgs(SecurityPreferenceArgs $) {
        this.allowUserToChangePassword = $.allowUserToChangePassword;
        this.allowUserToLoginWithPasskey = $.allowUserToLoginWithPasskey;
        this.allowUserToManageAccessKeys = $.allowUserToManageAccessKeys;
        this.allowUserToManageMfaDevices = $.allowUserToManageMfaDevices;
        this.allowUserToManagePersonalDingTalk = $.allowUserToManagePersonalDingTalk;
        this.enableSaveMfaTicket = $.enableSaveMfaTicket;
        this.enforceMfaForLogin = $.enforceMfaForLogin;
        this.loginNetworkMasks = $.loginNetworkMasks;
        this.loginSessionDuration = $.loginSessionDuration;
        this.mfaOperationForLogin = $.mfaOperationForLogin;
        this.operationForRiskLogin = $.operationForRiskLogin;
        this.verificationTypes = $.verificationTypes;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SecurityPreferenceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SecurityPreferenceArgs $;

        public Builder() {
            $ = new SecurityPreferenceArgs();
        }

        public Builder(SecurityPreferenceArgs defaults) {
            $ = new SecurityPreferenceArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param allowUserToChangePassword Whether to allow RAM users to manage their own passwords. Value:
         * - true (default): Allowed.
         * - false: not allowed.
         * 
         * @return builder
         * 
         */
        public Builder allowUserToChangePassword(@Nullable Output<Boolean> allowUserToChangePassword) {
            $.allowUserToChangePassword = allowUserToChangePassword;
            return this;
        }

        /**
         * @param allowUserToChangePassword Whether to allow RAM users to manage their own passwords. Value:
         * - true (default): Allowed.
         * - false: not allowed.
         * 
         * @return builder
         * 
         */
        public Builder allowUserToChangePassword(Boolean allowUserToChangePassword) {
            return allowUserToChangePassword(Output.of(allowUserToChangePassword));
        }

        /**
         * @param allowUserToLoginWithPasskey Whether to allow RAM users to log on using a passkey. Value:
         * - true (default): Allowed.
         * - false: not allowed.
         * 
         * @return builder
         * 
         */
        public Builder allowUserToLoginWithPasskey(@Nullable Output<Boolean> allowUserToLoginWithPasskey) {
            $.allowUserToLoginWithPasskey = allowUserToLoginWithPasskey;
            return this;
        }

        /**
         * @param allowUserToLoginWithPasskey Whether to allow RAM users to log on using a passkey. Value:
         * - true (default): Allowed.
         * - false: not allowed.
         * 
         * @return builder
         * 
         */
        public Builder allowUserToLoginWithPasskey(Boolean allowUserToLoginWithPasskey) {
            return allowUserToLoginWithPasskey(Output.of(allowUserToLoginWithPasskey));
        }

        /**
         * @param allowUserToManageAccessKeys Whether to allow RAM users to manage their own access keys. Value:
         * - true: Allow.
         * - false (default): Not allowed.
         * 
         * @return builder
         * 
         */
        public Builder allowUserToManageAccessKeys(@Nullable Output<Boolean> allowUserToManageAccessKeys) {
            $.allowUserToManageAccessKeys = allowUserToManageAccessKeys;
            return this;
        }

        /**
         * @param allowUserToManageAccessKeys Whether to allow RAM users to manage their own access keys. Value:
         * - true: Allow.
         * - false (default): Not allowed.
         * 
         * @return builder
         * 
         */
        public Builder allowUserToManageAccessKeys(Boolean allowUserToManageAccessKeys) {
            return allowUserToManageAccessKeys(Output.of(allowUserToManageAccessKeys));
        }

        /**
         * @param allowUserToManageMfaDevices Whether to allow RAM users to manage multi-factor authentication devices. Value:
         * - true (default): Allowed.
         * - false: not allowed.
         * 
         * @return builder
         * 
         */
        public Builder allowUserToManageMfaDevices(@Nullable Output<Boolean> allowUserToManageMfaDevices) {
            $.allowUserToManageMfaDevices = allowUserToManageMfaDevices;
            return this;
        }

        /**
         * @param allowUserToManageMfaDevices Whether to allow RAM users to manage multi-factor authentication devices. Value:
         * - true (default): Allowed.
         * - false: not allowed.
         * 
         * @return builder
         * 
         */
        public Builder allowUserToManageMfaDevices(Boolean allowUserToManageMfaDevices) {
            return allowUserToManageMfaDevices(Output.of(allowUserToManageMfaDevices));
        }

        /**
         * @param allowUserToManagePersonalDingTalk Whether to allow RAM users to independently manage the binding and unbinding of personal DingTalk. Value:
         * - true (default): Allowed.
         * - false: not allowed.
         * 
         * @return builder
         * 
         */
        public Builder allowUserToManagePersonalDingTalk(@Nullable Output<Boolean> allowUserToManagePersonalDingTalk) {
            $.allowUserToManagePersonalDingTalk = allowUserToManagePersonalDingTalk;
            return this;
        }

        /**
         * @param allowUserToManagePersonalDingTalk Whether to allow RAM users to independently manage the binding and unbinding of personal DingTalk. Value:
         * - true (default): Allowed.
         * - false: not allowed.
         * 
         * @return builder
         * 
         */
        public Builder allowUserToManagePersonalDingTalk(Boolean allowUserToManagePersonalDingTalk) {
            return allowUserToManagePersonalDingTalk(Output.of(allowUserToManagePersonalDingTalk));
        }

        /**
         * @param enableSaveMfaTicket Whether to save the verification status of a RAM user after logging in using multi-factor authentication. The validity period is 7 days. Value:
         * - true: Allow.
         * - false (default): Not allowed.
         * 
         * @return builder
         * 
         */
        public Builder enableSaveMfaTicket(@Nullable Output<Boolean> enableSaveMfaTicket) {
            $.enableSaveMfaTicket = enableSaveMfaTicket;
            return this;
        }

        /**
         * @param enableSaveMfaTicket Whether to save the verification status of a RAM user after logging in using multi-factor authentication. The validity period is 7 days. Value:
         * - true: Allow.
         * - false (default): Not allowed.
         * 
         * @return builder
         * 
         */
        public Builder enableSaveMfaTicket(Boolean enableSaveMfaTicket) {
            return enableSaveMfaTicket(Output.of(enableSaveMfaTicket));
        }

        /**
         * @param enforceMfaForLogin Field `enforceMfaForLogin` has been deprecated from provider version 1.248.0. New field `mfaOperationForLogin` instead.
         * Specifies whether MFA is required for all RAM users when they log on to the Alibaba Cloud Management Console by using usernames and passwords. Valid values: `true` and `false`
         * 
         * @return builder
         * 
         */
        public Builder enforceMfaForLogin(@Nullable Output<Boolean> enforceMfaForLogin) {
            $.enforceMfaForLogin = enforceMfaForLogin;
            return this;
        }

        /**
         * @param enforceMfaForLogin Field `enforceMfaForLogin` has been deprecated from provider version 1.248.0. New field `mfaOperationForLogin` instead.
         * Specifies whether MFA is required for all RAM users when they log on to the Alibaba Cloud Management Console by using usernames and passwords. Valid values: `true` and `false`
         * 
         * @return builder
         * 
         */
        public Builder enforceMfaForLogin(Boolean enforceMfaForLogin) {
            return enforceMfaForLogin(Output.of(enforceMfaForLogin));
        }

        /**
         * @param loginNetworkMasks The login mask. The logon mask determines which IP addresses are affected by the logon console, including password logon and single sign-on (SSO), but API calls made using the access key are not affected.
         * - If the mask is specified, RAM users can only log on from the specified IP address.
         * - If you do not specify any mask, the login console function will apply to the entire network.
         * 
         * When you need to configure multiple login masks, use a semicolon (;) to separate them, for example: 192.168.0.0/16;10.0.0.0/8.
         * 
         * Configure a maximum of 40 logon masks, with a total length of 512 characters.
         * 
         * @return builder
         * 
         */
        public Builder loginNetworkMasks(@Nullable Output<String> loginNetworkMasks) {
            $.loginNetworkMasks = loginNetworkMasks;
            return this;
        }

        /**
         * @param loginNetworkMasks The login mask. The logon mask determines which IP addresses are affected by the logon console, including password logon and single sign-on (SSO), but API calls made using the access key are not affected.
         * - If the mask is specified, RAM users can only log on from the specified IP address.
         * - If you do not specify any mask, the login console function will apply to the entire network.
         * 
         * When you need to configure multiple login masks, use a semicolon (;) to separate them, for example: 192.168.0.0/16;10.0.0.0/8.
         * 
         * Configure a maximum of 40 logon masks, with a total length of 512 characters.
         * 
         * @return builder
         * 
         */
        public Builder loginNetworkMasks(String loginNetworkMasks) {
            return loginNetworkMasks(Output.of(loginNetworkMasks));
        }

        /**
         * @param loginSessionDuration The validity period of the logon session of RAM users.
         * Valid values: 1 to 24. Unit: hours.
         * Default value: 6.
         * 
         * @return builder
         * 
         */
        public Builder loginSessionDuration(@Nullable Output<Integer> loginSessionDuration) {
            $.loginSessionDuration = loginSessionDuration;
            return this;
        }

        /**
         * @param loginSessionDuration The validity period of the logon session of RAM users.
         * Valid values: 1 to 24. Unit: hours.
         * Default value: 6.
         * 
         * @return builder
         * 
         */
        public Builder loginSessionDuration(Integer loginSessionDuration) {
            return loginSessionDuration(Output.of(loginSessionDuration));
        }

        /**
         * @param mfaOperationForLogin MFA must be used during logon (replace the original EnforceMFAForLogin parameter, the original parameter is still valid, we recommend that you update it to a new parameter). Value:
         * - mandatory: mandatory for all RAM users. The original value of EnforceMFAForLogin is true.
         * - independent (default): depends on the independent configuration of each RAM user. The original value of EnforceMFAForLogin is false.
         * - adaptive: Used only during abnormal login.
         * 
         * @return builder
         * 
         */
        public Builder mfaOperationForLogin(@Nullable Output<String> mfaOperationForLogin) {
            $.mfaOperationForLogin = mfaOperationForLogin;
            return this;
        }

        /**
         * @param mfaOperationForLogin MFA must be used during logon (replace the original EnforceMFAForLogin parameter, the original parameter is still valid, we recommend that you update it to a new parameter). Value:
         * - mandatory: mandatory for all RAM users. The original value of EnforceMFAForLogin is true.
         * - independent (default): depends on the independent configuration of each RAM user. The original value of EnforceMFAForLogin is false.
         * - adaptive: Used only during abnormal login.
         * 
         * @return builder
         * 
         */
        public Builder mfaOperationForLogin(String mfaOperationForLogin) {
            return mfaOperationForLogin(Output.of(mfaOperationForLogin));
        }

        /**
         * @param operationForRiskLogin Whether MFA is verified twice during abnormal logon. Value:
         * - autonomous (default): Skip, do not force binding.
         * - enforceVerify: Force binding validation.
         * 
         * @return builder
         * 
         */
        public Builder operationForRiskLogin(@Nullable Output<String> operationForRiskLogin) {
            $.operationForRiskLogin = operationForRiskLogin;
            return this;
        }

        /**
         * @param operationForRiskLogin Whether MFA is verified twice during abnormal logon. Value:
         * - autonomous (default): Skip, do not force binding.
         * - enforceVerify: Force binding validation.
         * 
         * @return builder
         * 
         */
        public Builder operationForRiskLogin(String operationForRiskLogin) {
            return operationForRiskLogin(Output.of(operationForRiskLogin));
        }

        /**
         * @param verificationTypes Means of multi-factor authentication. Value:
         * - sms: secure phone.
         * - email: Secure mailbox.
         * 
         * The following arguments will be discarded. Please use new fields as soon as possible:
         * 
         * @return builder
         * 
         */
        public Builder verificationTypes(@Nullable Output<List<String>> verificationTypes) {
            $.verificationTypes = verificationTypes;
            return this;
        }

        /**
         * @param verificationTypes Means of multi-factor authentication. Value:
         * - sms: secure phone.
         * - email: Secure mailbox.
         * 
         * The following arguments will be discarded. Please use new fields as soon as possible:
         * 
         * @return builder
         * 
         */
        public Builder verificationTypes(List<String> verificationTypes) {
            return verificationTypes(Output.of(verificationTypes));
        }

        /**
         * @param verificationTypes Means of multi-factor authentication. Value:
         * - sms: secure phone.
         * - email: Secure mailbox.
         * 
         * The following arguments will be discarded. Please use new fields as soon as possible:
         * 
         * @return builder
         * 
         */
        public Builder verificationTypes(String... verificationTypes) {
            return verificationTypes(List.of(verificationTypes));
        }

        public SecurityPreferenceArgs build() {
            return $;
        }
    }

}
