// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.hbr;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ReplicationVaultArgs extends com.pulumi.resources.ResourceArgs {

    public static final ReplicationVaultArgs Empty = new ReplicationVaultArgs();

    /**
     * The description of the backup vault.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The description of the backup vault.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The encryption type of the backup vault.
     * 
     */
    @Import(name="encryptType")
    private @Nullable Output<String> encryptType;

    /**
     * @return The encryption type of the backup vault.
     * 
     */
    public Optional<Output<String>> encryptType() {
        return Optional.ofNullable(this.encryptType);
    }

    /**
     * Alibaba Cloud KMS custom Key or Alias. This parameter is required only when EncryptType = KMS.
     * 
     */
    @Import(name="kmsKeyId")
    private @Nullable Output<String> kmsKeyId;

    /**
     * @return Alibaba Cloud KMS custom Key or Alias. This parameter is required only when EncryptType = KMS.
     * 
     */
    public Optional<Output<String>> kmsKeyId() {
        return Optional.ofNullable(this.kmsKeyId);
    }

    /**
     * The region ID of the source backup vault.
     * 
     */
    @Import(name="replicationSourceRegionId", required=true)
    private Output<String> replicationSourceRegionId;

    /**
     * @return The region ID of the source backup vault.
     * 
     */
    public Output<String> replicationSourceRegionId() {
        return this.replicationSourceRegionId;
    }

    /**
     * The vault ID of the source backup vault.
     * 
     */
    @Import(name="replicationSourceVaultId", required=true)
    private Output<String> replicationSourceVaultId;

    /**
     * @return The vault ID of the source backup vault.
     * 
     */
    public Output<String> replicationSourceVaultId() {
        return this.replicationSourceVaultId;
    }

    /**
     * The name of the backup vault.
     * 
     */
    @Import(name="vaultName", required=true)
    private Output<String> vaultName;

    /**
     * @return The name of the backup vault.
     * 
     */
    public Output<String> vaultName() {
        return this.vaultName;
    }

    /**
     * Backup Vault Storage Class
     * 
     */
    @Import(name="vaultStorageClass")
    private @Nullable Output<String> vaultStorageClass;

    /**
     * @return Backup Vault Storage Class
     * 
     */
    public Optional<Output<String>> vaultStorageClass() {
        return Optional.ofNullable(this.vaultStorageClass);
    }

    private ReplicationVaultArgs() {}

    private ReplicationVaultArgs(ReplicationVaultArgs $) {
        this.description = $.description;
        this.encryptType = $.encryptType;
        this.kmsKeyId = $.kmsKeyId;
        this.replicationSourceRegionId = $.replicationSourceRegionId;
        this.replicationSourceVaultId = $.replicationSourceVaultId;
        this.vaultName = $.vaultName;
        this.vaultStorageClass = $.vaultStorageClass;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ReplicationVaultArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ReplicationVaultArgs $;

        public Builder() {
            $ = new ReplicationVaultArgs();
        }

        public Builder(ReplicationVaultArgs defaults) {
            $ = new ReplicationVaultArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param description The description of the backup vault.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The description of the backup vault.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param encryptType The encryption type of the backup vault.
         * 
         * @return builder
         * 
         */
        public Builder encryptType(@Nullable Output<String> encryptType) {
            $.encryptType = encryptType;
            return this;
        }

        /**
         * @param encryptType The encryption type of the backup vault.
         * 
         * @return builder
         * 
         */
        public Builder encryptType(String encryptType) {
            return encryptType(Output.of(encryptType));
        }

        /**
         * @param kmsKeyId Alibaba Cloud KMS custom Key or Alias. This parameter is required only when EncryptType = KMS.
         * 
         * @return builder
         * 
         */
        public Builder kmsKeyId(@Nullable Output<String> kmsKeyId) {
            $.kmsKeyId = kmsKeyId;
            return this;
        }

        /**
         * @param kmsKeyId Alibaba Cloud KMS custom Key or Alias. This parameter is required only when EncryptType = KMS.
         * 
         * @return builder
         * 
         */
        public Builder kmsKeyId(String kmsKeyId) {
            return kmsKeyId(Output.of(kmsKeyId));
        }

        /**
         * @param replicationSourceRegionId The region ID of the source backup vault.
         * 
         * @return builder
         * 
         */
        public Builder replicationSourceRegionId(Output<String> replicationSourceRegionId) {
            $.replicationSourceRegionId = replicationSourceRegionId;
            return this;
        }

        /**
         * @param replicationSourceRegionId The region ID of the source backup vault.
         * 
         * @return builder
         * 
         */
        public Builder replicationSourceRegionId(String replicationSourceRegionId) {
            return replicationSourceRegionId(Output.of(replicationSourceRegionId));
        }

        /**
         * @param replicationSourceVaultId The vault ID of the source backup vault.
         * 
         * @return builder
         * 
         */
        public Builder replicationSourceVaultId(Output<String> replicationSourceVaultId) {
            $.replicationSourceVaultId = replicationSourceVaultId;
            return this;
        }

        /**
         * @param replicationSourceVaultId The vault ID of the source backup vault.
         * 
         * @return builder
         * 
         */
        public Builder replicationSourceVaultId(String replicationSourceVaultId) {
            return replicationSourceVaultId(Output.of(replicationSourceVaultId));
        }

        /**
         * @param vaultName The name of the backup vault.
         * 
         * @return builder
         * 
         */
        public Builder vaultName(Output<String> vaultName) {
            $.vaultName = vaultName;
            return this;
        }

        /**
         * @param vaultName The name of the backup vault.
         * 
         * @return builder
         * 
         */
        public Builder vaultName(String vaultName) {
            return vaultName(Output.of(vaultName));
        }

        /**
         * @param vaultStorageClass Backup Vault Storage Class
         * 
         * @return builder
         * 
         */
        public Builder vaultStorageClass(@Nullable Output<String> vaultStorageClass) {
            $.vaultStorageClass = vaultStorageClass;
            return this;
        }

        /**
         * @param vaultStorageClass Backup Vault Storage Class
         * 
         * @return builder
         * 
         */
        public Builder vaultStorageClass(String vaultStorageClass) {
            return vaultStorageClass(Output.of(vaultStorageClass));
        }

        public ReplicationVaultArgs build() {
            if ($.replicationSourceRegionId == null) {
                throw new MissingRequiredPropertyException("ReplicationVaultArgs", "replicationSourceRegionId");
            }
            if ($.replicationSourceVaultId == null) {
                throw new MissingRequiredPropertyException("ReplicationVaultArgs", "replicationSourceVaultId");
            }
            if ($.vaultName == null) {
                throw new MissingRequiredPropertyException("ReplicationVaultArgs", "vaultName");
            }
            return $;
        }
    }

}
