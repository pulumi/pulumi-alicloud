// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.gpdb.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class StreamingJobState extends com.pulumi.resources.ResourceArgs {

    public static final StreamingJobState Empty = new StreamingJobState();

    /**
     * The name of the database account.
     * 
     */
    @Import(name="account")
    private @Nullable Output<String> account;

    /**
     * @return The name of the database account.
     * 
     */
    public Optional<Output<String>> account() {
        return Optional.ofNullable(this.account);
    }

    /**
     * The delivery guarantee setting.
     * 
     * Valid values:
     * 
     * - ATLEAST
     * - EXACTLY
     * 
     */
    @Import(name="consistency")
    private @Nullable Output<String> consistency;

    /**
     * @return The delivery guarantee setting.
     * 
     * Valid values:
     * 
     * - ATLEAST
     * - EXACTLY
     * 
     */
    public Optional<Output<String>> consistency() {
        return Optional.ofNullable(this.consistency);
    }

    /**
     * The creation time of the resource
     * 
     */
    @Import(name="createTime")
    private @Nullable Output<String> createTime;

    /**
     * @return The creation time of the resource
     * 
     */
    public Optional<Output<String>> createTime() {
        return Optional.ofNullable(this.createTime);
    }

    /**
     * The data source ID.
     * 
     */
    @Import(name="dataSourceId")
    private @Nullable Output<String> dataSourceId;

    /**
     * @return The data source ID.
     * 
     */
    public Optional<Output<String>> dataSourceId() {
        return Optional.ofNullable(this.dataSourceId);
    }

    /**
     * The instance ID.
     * 
     */
    @Import(name="dbInstanceId")
    private @Nullable Output<String> dbInstanceId;

    /**
     * @return The instance ID.
     * 
     */
    public Optional<Output<String>> dbInstanceId() {
        return Optional.ofNullable(this.dbInstanceId);
    }

    /**
     * Target Field
     * 
     */
    @Import(name="destColumns")
    private @Nullable Output<List<String>> destColumns;

    /**
     * @return Target Field
     * 
     */
    public Optional<Output<List<String>>> destColumns() {
        return Optional.ofNullable(this.destColumns);
    }

    /**
     * The name of the destination database.
     * 
     */
    @Import(name="destDatabase")
    private @Nullable Output<String> destDatabase;

    /**
     * @return The name of the destination database.
     * 
     */
    public Optional<Output<String>> destDatabase() {
        return Optional.ofNullable(this.destDatabase);
    }

    /**
     * Target Schema
     * 
     */
    @Import(name="destSchema")
    private @Nullable Output<String> destSchema;

    /**
     * @return Target Schema
     * 
     */
    public Optional<Output<String>> destSchema() {
        return Optional.ofNullable(this.destSchema);
    }

    /**
     * The name of the destination table.
     * 
     */
    @Import(name="destTable")
    private @Nullable Output<String> destTable;

    /**
     * @return The name of the destination table.
     * 
     */
    public Optional<Output<String>> destTable() {
        return Optional.ofNullable(this.destTable);
    }

    /**
     * The number of allowed error rows. Write failures occur when Kafka data does not match the destination table in AnalyticDB for PostgreSQL. If the specified value is exceeded, the job fails.
     * 
     */
    @Import(name="errorLimitCount")
    private @Nullable Output<Integer> errorLimitCount;

    /**
     * @return The number of allowed error rows. Write failures occur when Kafka data does not match the destination table in AnalyticDB for PostgreSQL. If the specified value is exceeded, the job fails.
     * 
     */
    public Optional<Output<Integer>> errorLimitCount() {
        return Optional.ofNullable(this.errorLimitCount);
    }

    /**
     * Automatic offset reset
     * 
     */
    @Import(name="fallbackOffset")
    private @Nullable Output<String> fallbackOffset;

    /**
     * @return Automatic offset reset
     * 
     */
    public Optional<Output<String>> fallbackOffset() {
        return Optional.ofNullable(this.fallbackOffset);
    }

    /**
     * Group Name
     * 
     */
    @Import(name="groupName")
    private @Nullable Output<String> groupName;

    /**
     * @return Group Name
     * 
     */
    public Optional<Output<String>> groupName() {
        return Optional.ofNullable(this.groupName);
    }

    /**
     * The YAML configuration file of the job. This parameter must be specified when Mode is set to professional.
     * 
     */
    @Import(name="jobConfig")
    private @Nullable Output<String> jobConfig;

    /**
     * @return The YAML configuration file of the job. This parameter must be specified when Mode is set to professional.
     * 
     */
    public Optional<Output<String>> jobConfig() {
        return Optional.ofNullable(this.jobConfig);
    }

    /**
     * The description of the job.
     * 
     */
    @Import(name="jobDescription")
    private @Nullable Output<String> jobDescription;

    /**
     * @return The description of the job.
     * 
     */
    public Optional<Output<String>> jobDescription() {
        return Optional.ofNullable(this.jobDescription);
    }

    /**
     * The job ID.
     * 
     */
    @Import(name="jobId")
    private @Nullable Output<String> jobId;

    /**
     * @return The job ID.
     * 
     */
    public Optional<Output<String>> jobId() {
        return Optional.ofNullable(this.jobId);
    }

    /**
     * The name of the job.
     * 
     */
    @Import(name="jobName")
    private @Nullable Output<String> jobName;

    /**
     * @return The name of the job.
     * 
     */
    public Optional<Output<String>> jobName() {
        return Optional.ofNullable(this.jobName);
    }

    /**
     * Match Field
     * 
     */
    @Import(name="matchColumns")
    private @Nullable Output<List<String>> matchColumns;

    /**
     * @return Match Field
     * 
     */
    public Optional<Output<List<String>>> matchColumns() {
        return Optional.ofNullable(this.matchColumns);
    }

    /**
     * The configuration mode. Valid values:
     * 
     * 1.  basic: In basic mode, you must configure the configuration parameters.
     * 
     * 2.  professional: In professional mode, you can submit a YAML configuration file.
     * 
     */
    @Import(name="mode")
    private @Nullable Output<String> mode;

    /**
     * @return The configuration mode. Valid values:
     * 
     * 1.  basic: In basic mode, you must configure the configuration parameters.
     * 
     * 2.  professional: In professional mode, you can submit a YAML configuration file.
     * 
     */
    public Optional<Output<String>> mode() {
        return Optional.ofNullable(this.mode);
    }

    /**
     * The password of the database account.
     * 
     */
    @Import(name="password")
    private @Nullable Output<String> password;

    /**
     * @return The password of the database account.
     * 
     */
    public Optional<Output<String>> password() {
        return Optional.ofNullable(this.password);
    }

    /**
     * Source Field
     * 
     */
    @Import(name="srcColumns")
    private @Nullable Output<List<String>> srcColumns;

    /**
     * @return Source Field
     * 
     */
    public Optional<Output<List<String>>> srcColumns() {
        return Optional.ofNullable(this.srcColumns);
    }

    /**
     * Service status, value:
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return Service status, value:
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * Specifies whether to test the real-time job. Valid values:
     * 
     * - true
     * - false
     * 
     * Default value: false.
     * 
     */
    @Import(name="tryRun")
    private @Nullable Output<Boolean> tryRun;

    /**
     * @return Specifies whether to test the real-time job. Valid values:
     * 
     * - true
     * - false
     * 
     * Default value: false.
     * 
     */
    public Optional<Output<Boolean>> tryRun() {
        return Optional.ofNullable(this.tryRun);
    }

    /**
     * Update Field
     * 
     */
    @Import(name="updateColumns")
    private @Nullable Output<List<String>> updateColumns;

    /**
     * @return Update Field
     * 
     */
    public Optional<Output<List<String>>> updateColumns() {
        return Optional.ofNullable(this.updateColumns);
    }

    /**
     * The write mode.
     * 
     * Valid values:
     * 
     * - insert
     * - update
     * - merge
     * 
     */
    @Import(name="writeMode")
    private @Nullable Output<String> writeMode;

    /**
     * @return The write mode.
     * 
     * Valid values:
     * 
     * - insert
     * - update
     * - merge
     * 
     */
    public Optional<Output<String>> writeMode() {
        return Optional.ofNullable(this.writeMode);
    }

    private StreamingJobState() {}

    private StreamingJobState(StreamingJobState $) {
        this.account = $.account;
        this.consistency = $.consistency;
        this.createTime = $.createTime;
        this.dataSourceId = $.dataSourceId;
        this.dbInstanceId = $.dbInstanceId;
        this.destColumns = $.destColumns;
        this.destDatabase = $.destDatabase;
        this.destSchema = $.destSchema;
        this.destTable = $.destTable;
        this.errorLimitCount = $.errorLimitCount;
        this.fallbackOffset = $.fallbackOffset;
        this.groupName = $.groupName;
        this.jobConfig = $.jobConfig;
        this.jobDescription = $.jobDescription;
        this.jobId = $.jobId;
        this.jobName = $.jobName;
        this.matchColumns = $.matchColumns;
        this.mode = $.mode;
        this.password = $.password;
        this.srcColumns = $.srcColumns;
        this.status = $.status;
        this.tryRun = $.tryRun;
        this.updateColumns = $.updateColumns;
        this.writeMode = $.writeMode;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(StreamingJobState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private StreamingJobState $;

        public Builder() {
            $ = new StreamingJobState();
        }

        public Builder(StreamingJobState defaults) {
            $ = new StreamingJobState(Objects.requireNonNull(defaults));
        }

        /**
         * @param account The name of the database account.
         * 
         * @return builder
         * 
         */
        public Builder account(@Nullable Output<String> account) {
            $.account = account;
            return this;
        }

        /**
         * @param account The name of the database account.
         * 
         * @return builder
         * 
         */
        public Builder account(String account) {
            return account(Output.of(account));
        }

        /**
         * @param consistency The delivery guarantee setting.
         * 
         * Valid values:
         * 
         * - ATLEAST
         * - EXACTLY
         * 
         * @return builder
         * 
         */
        public Builder consistency(@Nullable Output<String> consistency) {
            $.consistency = consistency;
            return this;
        }

        /**
         * @param consistency The delivery guarantee setting.
         * 
         * Valid values:
         * 
         * - ATLEAST
         * - EXACTLY
         * 
         * @return builder
         * 
         */
        public Builder consistency(String consistency) {
            return consistency(Output.of(consistency));
        }

        /**
         * @param createTime The creation time of the resource
         * 
         * @return builder
         * 
         */
        public Builder createTime(@Nullable Output<String> createTime) {
            $.createTime = createTime;
            return this;
        }

        /**
         * @param createTime The creation time of the resource
         * 
         * @return builder
         * 
         */
        public Builder createTime(String createTime) {
            return createTime(Output.of(createTime));
        }

        /**
         * @param dataSourceId The data source ID.
         * 
         * @return builder
         * 
         */
        public Builder dataSourceId(@Nullable Output<String> dataSourceId) {
            $.dataSourceId = dataSourceId;
            return this;
        }

        /**
         * @param dataSourceId The data source ID.
         * 
         * @return builder
         * 
         */
        public Builder dataSourceId(String dataSourceId) {
            return dataSourceId(Output.of(dataSourceId));
        }

        /**
         * @param dbInstanceId The instance ID.
         * 
         * @return builder
         * 
         */
        public Builder dbInstanceId(@Nullable Output<String> dbInstanceId) {
            $.dbInstanceId = dbInstanceId;
            return this;
        }

        /**
         * @param dbInstanceId The instance ID.
         * 
         * @return builder
         * 
         */
        public Builder dbInstanceId(String dbInstanceId) {
            return dbInstanceId(Output.of(dbInstanceId));
        }

        /**
         * @param destColumns Target Field
         * 
         * @return builder
         * 
         */
        public Builder destColumns(@Nullable Output<List<String>> destColumns) {
            $.destColumns = destColumns;
            return this;
        }

        /**
         * @param destColumns Target Field
         * 
         * @return builder
         * 
         */
        public Builder destColumns(List<String> destColumns) {
            return destColumns(Output.of(destColumns));
        }

        /**
         * @param destColumns Target Field
         * 
         * @return builder
         * 
         */
        public Builder destColumns(String... destColumns) {
            return destColumns(List.of(destColumns));
        }

        /**
         * @param destDatabase The name of the destination database.
         * 
         * @return builder
         * 
         */
        public Builder destDatabase(@Nullable Output<String> destDatabase) {
            $.destDatabase = destDatabase;
            return this;
        }

        /**
         * @param destDatabase The name of the destination database.
         * 
         * @return builder
         * 
         */
        public Builder destDatabase(String destDatabase) {
            return destDatabase(Output.of(destDatabase));
        }

        /**
         * @param destSchema Target Schema
         * 
         * @return builder
         * 
         */
        public Builder destSchema(@Nullable Output<String> destSchema) {
            $.destSchema = destSchema;
            return this;
        }

        /**
         * @param destSchema Target Schema
         * 
         * @return builder
         * 
         */
        public Builder destSchema(String destSchema) {
            return destSchema(Output.of(destSchema));
        }

        /**
         * @param destTable The name of the destination table.
         * 
         * @return builder
         * 
         */
        public Builder destTable(@Nullable Output<String> destTable) {
            $.destTable = destTable;
            return this;
        }

        /**
         * @param destTable The name of the destination table.
         * 
         * @return builder
         * 
         */
        public Builder destTable(String destTable) {
            return destTable(Output.of(destTable));
        }

        /**
         * @param errorLimitCount The number of allowed error rows. Write failures occur when Kafka data does not match the destination table in AnalyticDB for PostgreSQL. If the specified value is exceeded, the job fails.
         * 
         * @return builder
         * 
         */
        public Builder errorLimitCount(@Nullable Output<Integer> errorLimitCount) {
            $.errorLimitCount = errorLimitCount;
            return this;
        }

        /**
         * @param errorLimitCount The number of allowed error rows. Write failures occur when Kafka data does not match the destination table in AnalyticDB for PostgreSQL. If the specified value is exceeded, the job fails.
         * 
         * @return builder
         * 
         */
        public Builder errorLimitCount(Integer errorLimitCount) {
            return errorLimitCount(Output.of(errorLimitCount));
        }

        /**
         * @param fallbackOffset Automatic offset reset
         * 
         * @return builder
         * 
         */
        public Builder fallbackOffset(@Nullable Output<String> fallbackOffset) {
            $.fallbackOffset = fallbackOffset;
            return this;
        }

        /**
         * @param fallbackOffset Automatic offset reset
         * 
         * @return builder
         * 
         */
        public Builder fallbackOffset(String fallbackOffset) {
            return fallbackOffset(Output.of(fallbackOffset));
        }

        /**
         * @param groupName Group Name
         * 
         * @return builder
         * 
         */
        public Builder groupName(@Nullable Output<String> groupName) {
            $.groupName = groupName;
            return this;
        }

        /**
         * @param groupName Group Name
         * 
         * @return builder
         * 
         */
        public Builder groupName(String groupName) {
            return groupName(Output.of(groupName));
        }

        /**
         * @param jobConfig The YAML configuration file of the job. This parameter must be specified when Mode is set to professional.
         * 
         * @return builder
         * 
         */
        public Builder jobConfig(@Nullable Output<String> jobConfig) {
            $.jobConfig = jobConfig;
            return this;
        }

        /**
         * @param jobConfig The YAML configuration file of the job. This parameter must be specified when Mode is set to professional.
         * 
         * @return builder
         * 
         */
        public Builder jobConfig(String jobConfig) {
            return jobConfig(Output.of(jobConfig));
        }

        /**
         * @param jobDescription The description of the job.
         * 
         * @return builder
         * 
         */
        public Builder jobDescription(@Nullable Output<String> jobDescription) {
            $.jobDescription = jobDescription;
            return this;
        }

        /**
         * @param jobDescription The description of the job.
         * 
         * @return builder
         * 
         */
        public Builder jobDescription(String jobDescription) {
            return jobDescription(Output.of(jobDescription));
        }

        /**
         * @param jobId The job ID.
         * 
         * @return builder
         * 
         */
        public Builder jobId(@Nullable Output<String> jobId) {
            $.jobId = jobId;
            return this;
        }

        /**
         * @param jobId The job ID.
         * 
         * @return builder
         * 
         */
        public Builder jobId(String jobId) {
            return jobId(Output.of(jobId));
        }

        /**
         * @param jobName The name of the job.
         * 
         * @return builder
         * 
         */
        public Builder jobName(@Nullable Output<String> jobName) {
            $.jobName = jobName;
            return this;
        }

        /**
         * @param jobName The name of the job.
         * 
         * @return builder
         * 
         */
        public Builder jobName(String jobName) {
            return jobName(Output.of(jobName));
        }

        /**
         * @param matchColumns Match Field
         * 
         * @return builder
         * 
         */
        public Builder matchColumns(@Nullable Output<List<String>> matchColumns) {
            $.matchColumns = matchColumns;
            return this;
        }

        /**
         * @param matchColumns Match Field
         * 
         * @return builder
         * 
         */
        public Builder matchColumns(List<String> matchColumns) {
            return matchColumns(Output.of(matchColumns));
        }

        /**
         * @param matchColumns Match Field
         * 
         * @return builder
         * 
         */
        public Builder matchColumns(String... matchColumns) {
            return matchColumns(List.of(matchColumns));
        }

        /**
         * @param mode The configuration mode. Valid values:
         * 
         * 1.  basic: In basic mode, you must configure the configuration parameters.
         * 
         * 2.  professional: In professional mode, you can submit a YAML configuration file.
         * 
         * @return builder
         * 
         */
        public Builder mode(@Nullable Output<String> mode) {
            $.mode = mode;
            return this;
        }

        /**
         * @param mode The configuration mode. Valid values:
         * 
         * 1.  basic: In basic mode, you must configure the configuration parameters.
         * 
         * 2.  professional: In professional mode, you can submit a YAML configuration file.
         * 
         * @return builder
         * 
         */
        public Builder mode(String mode) {
            return mode(Output.of(mode));
        }

        /**
         * @param password The password of the database account.
         * 
         * @return builder
         * 
         */
        public Builder password(@Nullable Output<String> password) {
            $.password = password;
            return this;
        }

        /**
         * @param password The password of the database account.
         * 
         * @return builder
         * 
         */
        public Builder password(String password) {
            return password(Output.of(password));
        }

        /**
         * @param srcColumns Source Field
         * 
         * @return builder
         * 
         */
        public Builder srcColumns(@Nullable Output<List<String>> srcColumns) {
            $.srcColumns = srcColumns;
            return this;
        }

        /**
         * @param srcColumns Source Field
         * 
         * @return builder
         * 
         */
        public Builder srcColumns(List<String> srcColumns) {
            return srcColumns(Output.of(srcColumns));
        }

        /**
         * @param srcColumns Source Field
         * 
         * @return builder
         * 
         */
        public Builder srcColumns(String... srcColumns) {
            return srcColumns(List.of(srcColumns));
        }

        /**
         * @param status Service status, value:
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status Service status, value:
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param tryRun Specifies whether to test the real-time job. Valid values:
         * 
         * - true
         * - false
         * 
         * Default value: false.
         * 
         * @return builder
         * 
         */
        public Builder tryRun(@Nullable Output<Boolean> tryRun) {
            $.tryRun = tryRun;
            return this;
        }

        /**
         * @param tryRun Specifies whether to test the real-time job. Valid values:
         * 
         * - true
         * - false
         * 
         * Default value: false.
         * 
         * @return builder
         * 
         */
        public Builder tryRun(Boolean tryRun) {
            return tryRun(Output.of(tryRun));
        }

        /**
         * @param updateColumns Update Field
         * 
         * @return builder
         * 
         */
        public Builder updateColumns(@Nullable Output<List<String>> updateColumns) {
            $.updateColumns = updateColumns;
            return this;
        }

        /**
         * @param updateColumns Update Field
         * 
         * @return builder
         * 
         */
        public Builder updateColumns(List<String> updateColumns) {
            return updateColumns(Output.of(updateColumns));
        }

        /**
         * @param updateColumns Update Field
         * 
         * @return builder
         * 
         */
        public Builder updateColumns(String... updateColumns) {
            return updateColumns(List.of(updateColumns));
        }

        /**
         * @param writeMode The write mode.
         * 
         * Valid values:
         * 
         * - insert
         * - update
         * - merge
         * 
         * @return builder
         * 
         */
        public Builder writeMode(@Nullable Output<String> writeMode) {
            $.writeMode = writeMode;
            return this;
        }

        /**
         * @param writeMode The write mode.
         * 
         * Valid values:
         * 
         * - insert
         * - update
         * - merge
         * 
         * @return builder
         * 
         */
        public Builder writeMode(String writeMode) {
            return writeMode(Output.of(writeMode));
        }

        public StreamingJobState build() {
            return $;
        }
    }

}
