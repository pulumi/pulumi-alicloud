// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.gpdb.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetDbInstancePlansArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetDbInstancePlansArgs Empty = new GetDbInstancePlansArgs();

    /**
     * The ID of the Database instance.
     * 
     */
    @Import(name="dbInstanceId", required=true)
    private Output<String> dbInstanceId;

    /**
     * @return The ID of the Database instance.
     * 
     */
    public Output<String> dbInstanceId() {
        return this.dbInstanceId;
    }

    /**
     * A list of DB Instance Plan IDs.
     * 
     */
    @Import(name="ids")
    private @Nullable Output<List<String>> ids;

    /**
     * @return A list of DB Instance Plan IDs.
     * 
     */
    public Optional<Output<List<String>>> ids() {
        return Optional.ofNullable(this.ids);
    }

    /**
     * A regex string to filter results by DB Instance Plan name.
     * 
     */
    @Import(name="nameRegex")
    private @Nullable Output<String> nameRegex;

    /**
     * @return A regex string to filter results by DB Instance Plan name.
     * 
     */
    public Optional<Output<String>> nameRegex() {
        return Optional.ofNullable(this.nameRegex);
    }

    /**
     * File name where to save data source results (after running `pulumi preview`).
     * 
     */
    @Import(name="outputFile")
    private @Nullable Output<String> outputFile;

    /**
     * @return File name where to save data source results (after running `pulumi preview`).
     * 
     */
    public Optional<Output<String>> outputFile() {
        return Optional.ofNullable(this.outputFile);
    }

    /**
     * Plan scheduling type. Valid values: `Postpone`, `Regular`.
     * 
     */
    @Import(name="planScheduleType")
    private @Nullable Output<String> planScheduleType;

    /**
     * @return Plan scheduling type. Valid values: `Postpone`, `Regular`.
     * 
     */
    public Optional<Output<String>> planScheduleType() {
        return Optional.ofNullable(this.planScheduleType);
    }

    /**
     * The type of the Plan. Valid values: `PauseResume`, `Resize`.
     * 
     */
    @Import(name="planType")
    private @Nullable Output<String> planType;

    /**
     * @return The type of the Plan. Valid values: `PauseResume`, `Resize`.
     * 
     */
    public Optional<Output<String>> planType() {
        return Optional.ofNullable(this.planType);
    }

    /**
     * The Status of the Plan.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return The Status of the Plan.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    private GetDbInstancePlansArgs() {}

    private GetDbInstancePlansArgs(GetDbInstancePlansArgs $) {
        this.dbInstanceId = $.dbInstanceId;
        this.ids = $.ids;
        this.nameRegex = $.nameRegex;
        this.outputFile = $.outputFile;
        this.planScheduleType = $.planScheduleType;
        this.planType = $.planType;
        this.status = $.status;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetDbInstancePlansArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetDbInstancePlansArgs $;

        public Builder() {
            $ = new GetDbInstancePlansArgs();
        }

        public Builder(GetDbInstancePlansArgs defaults) {
            $ = new GetDbInstancePlansArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param dbInstanceId The ID of the Database instance.
         * 
         * @return builder
         * 
         */
        public Builder dbInstanceId(Output<String> dbInstanceId) {
            $.dbInstanceId = dbInstanceId;
            return this;
        }

        /**
         * @param dbInstanceId The ID of the Database instance.
         * 
         * @return builder
         * 
         */
        public Builder dbInstanceId(String dbInstanceId) {
            return dbInstanceId(Output.of(dbInstanceId));
        }

        /**
         * @param ids A list of DB Instance Plan IDs.
         * 
         * @return builder
         * 
         */
        public Builder ids(@Nullable Output<List<String>> ids) {
            $.ids = ids;
            return this;
        }

        /**
         * @param ids A list of DB Instance Plan IDs.
         * 
         * @return builder
         * 
         */
        public Builder ids(List<String> ids) {
            return ids(Output.of(ids));
        }

        /**
         * @param ids A list of DB Instance Plan IDs.
         * 
         * @return builder
         * 
         */
        public Builder ids(String... ids) {
            return ids(List.of(ids));
        }

        /**
         * @param nameRegex A regex string to filter results by DB Instance Plan name.
         * 
         * @return builder
         * 
         */
        public Builder nameRegex(@Nullable Output<String> nameRegex) {
            $.nameRegex = nameRegex;
            return this;
        }

        /**
         * @param nameRegex A regex string to filter results by DB Instance Plan name.
         * 
         * @return builder
         * 
         */
        public Builder nameRegex(String nameRegex) {
            return nameRegex(Output.of(nameRegex));
        }

        /**
         * @param outputFile File name where to save data source results (after running `pulumi preview`).
         * 
         * @return builder
         * 
         */
        public Builder outputFile(@Nullable Output<String> outputFile) {
            $.outputFile = outputFile;
            return this;
        }

        /**
         * @param outputFile File name where to save data source results (after running `pulumi preview`).
         * 
         * @return builder
         * 
         */
        public Builder outputFile(String outputFile) {
            return outputFile(Output.of(outputFile));
        }

        /**
         * @param planScheduleType Plan scheduling type. Valid values: `Postpone`, `Regular`.
         * 
         * @return builder
         * 
         */
        public Builder planScheduleType(@Nullable Output<String> planScheduleType) {
            $.planScheduleType = planScheduleType;
            return this;
        }

        /**
         * @param planScheduleType Plan scheduling type. Valid values: `Postpone`, `Regular`.
         * 
         * @return builder
         * 
         */
        public Builder planScheduleType(String planScheduleType) {
            return planScheduleType(Output.of(planScheduleType));
        }

        /**
         * @param planType The type of the Plan. Valid values: `PauseResume`, `Resize`.
         * 
         * @return builder
         * 
         */
        public Builder planType(@Nullable Output<String> planType) {
            $.planType = planType;
            return this;
        }

        /**
         * @param planType The type of the Plan. Valid values: `PauseResume`, `Resize`.
         * 
         * @return builder
         * 
         */
        public Builder planType(String planType) {
            return planType(Output.of(planType));
        }

        /**
         * @param status The Status of the Plan.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status The Status of the Plan.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        public GetDbInstancePlansArgs build() {
            if ($.dbInstanceId == null) {
                throw new MissingRequiredPropertyException("GetDbInstancePlansArgs", "dbInstanceId");
            }
            return $;
        }
    }

}
