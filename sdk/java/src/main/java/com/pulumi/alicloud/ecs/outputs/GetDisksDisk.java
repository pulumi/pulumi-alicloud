// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.ecs.outputs;

import com.pulumi.alicloud.ecs.outputs.GetDisksDiskMountInstance;
import com.pulumi.alicloud.ecs.outputs.GetDisksDiskOperationLock;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetDisksDisk {
    /**
     * @return Disk attachment time.
     * 
     */
    private String attachedTime;
    private String autoSnapshotPolicyId;
    /**
     * @return Availability zone of the disk.
     * 
     */
    private String availabilityZone;
    /**
     * @return Disk category. Possible values: `cloud` (basic cloud disk), `cloud_efficiency` (ultra cloud disk), `ephemeral_ssd` (local SSD cloud disk), `cloud_ssd` (SSD cloud disk), and `cloud_essd` (ESSD cloud disk).
     * 
     */
    private String category;
    /**
     * @return Disk creation time.
     * 
     */
    private String creationTime;
    private Boolean deleteAutoSnapshot;
    private Boolean deleteWithInstance;
    /**
     * @return Disk description.
     * 
     */
    private String description;
    /**
     * @return Disk detachment time.
     * 
     */
    private String detachedTime;
    private String device;
    private String diskId;
    private String diskName;
    private String diskType;
    private Boolean enableAutoSnapshot;
    private Boolean enableAutomatedSnapshotPolicy;
    /**
     * @return Indicate whether the disk is encrypted or not. Possible values: `on` and `off`.
     * 
     */
    private String encrypted;
    private String expiredTime;
    /**
     * @return ID of the disk.
     * 
     */
    private String id;
    /**
     * @return ID of the image from which the disk is created. It is null unless the disk is created using an image.
     * 
     */
    private String imageId;
    /**
     * @return Filter the results by the specified ECS instance ID.
     * 
     */
    private String instanceId;
    private Integer iops;
    private Integer iopsRead;
    private Integer iopsWrite;
    private String kmsKeyId;
    private Integer mountInstanceNum;
    private List<GetDisksDiskMountInstance> mountInstances;
    /**
     * @return Disk name.
     * 
     */
    private String name;
    private List<GetDisksDiskOperationLock> operationLocks;
    private String paymentType;
    private String performanceLevel;
    private Boolean portable;
    private String productCode;
    /**
     * @return Region ID the disk belongs to.
     * 
     */
    private String regionId;
    /**
     * @return The Id of resource group which the disk belongs.
     * 
     */
    private String resourceGroupId;
    /**
     * @return Disk size in GiB.
     * 
     */
    private Integer size;
    /**
     * @return Snapshot used to create the disk. It is null if no snapshot is used to create the disk.
     * 
     */
    private String snapshotId;
    /**
     * @return Current status. Possible values: `In_use`, `Available`, `Attaching`, `Detaching`, `Creating` and `ReIniting`.
     * 
     */
    private String status;
    /**
     * @return A map of tags assigned to the disks. It must be in the format:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.alicloud.ecs.EcsFunctions;
     * import com.pulumi.alicloud.ecs.inputs.GetDisksArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var disksDs = EcsFunctions.getDisks(GetDisksArgs.builder()
     *             .tags(Map.ofEntries(
     *                 Map.entry(&#34;tagKey1&#34;, &#34;tagValue1&#34;),
     *                 Map.entry(&#34;tagKey2&#34;, &#34;tagValue2&#34;)
     *             ))
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    private Map<String,Object> tags;
    /**
     * @return Disk type. Possible values: `system` and `data`.
     * 
     */
    private String type;
    private String zoneId;

    private GetDisksDisk() {}
    /**
     * @return Disk attachment time.
     * 
     */
    public String attachedTime() {
        return this.attachedTime;
    }
    public String autoSnapshotPolicyId() {
        return this.autoSnapshotPolicyId;
    }
    /**
     * @return Availability zone of the disk.
     * 
     */
    public String availabilityZone() {
        return this.availabilityZone;
    }
    /**
     * @return Disk category. Possible values: `cloud` (basic cloud disk), `cloud_efficiency` (ultra cloud disk), `ephemeral_ssd` (local SSD cloud disk), `cloud_ssd` (SSD cloud disk), and `cloud_essd` (ESSD cloud disk).
     * 
     */
    public String category() {
        return this.category;
    }
    /**
     * @return Disk creation time.
     * 
     */
    public String creationTime() {
        return this.creationTime;
    }
    public Boolean deleteAutoSnapshot() {
        return this.deleteAutoSnapshot;
    }
    public Boolean deleteWithInstance() {
        return this.deleteWithInstance;
    }
    /**
     * @return Disk description.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return Disk detachment time.
     * 
     */
    public String detachedTime() {
        return this.detachedTime;
    }
    public String device() {
        return this.device;
    }
    public String diskId() {
        return this.diskId;
    }
    public String diskName() {
        return this.diskName;
    }
    public String diskType() {
        return this.diskType;
    }
    public Boolean enableAutoSnapshot() {
        return this.enableAutoSnapshot;
    }
    public Boolean enableAutomatedSnapshotPolicy() {
        return this.enableAutomatedSnapshotPolicy;
    }
    /**
     * @return Indicate whether the disk is encrypted or not. Possible values: `on` and `off`.
     * 
     */
    public String encrypted() {
        return this.encrypted;
    }
    public String expiredTime() {
        return this.expiredTime;
    }
    /**
     * @return ID of the disk.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return ID of the image from which the disk is created. It is null unless the disk is created using an image.
     * 
     */
    public String imageId() {
        return this.imageId;
    }
    /**
     * @return Filter the results by the specified ECS instance ID.
     * 
     */
    public String instanceId() {
        return this.instanceId;
    }
    public Integer iops() {
        return this.iops;
    }
    public Integer iopsRead() {
        return this.iopsRead;
    }
    public Integer iopsWrite() {
        return this.iopsWrite;
    }
    public String kmsKeyId() {
        return this.kmsKeyId;
    }
    public Integer mountInstanceNum() {
        return this.mountInstanceNum;
    }
    public List<GetDisksDiskMountInstance> mountInstances() {
        return this.mountInstances;
    }
    /**
     * @return Disk name.
     * 
     */
    public String name() {
        return this.name;
    }
    public List<GetDisksDiskOperationLock> operationLocks() {
        return this.operationLocks;
    }
    public String paymentType() {
        return this.paymentType;
    }
    public String performanceLevel() {
        return this.performanceLevel;
    }
    public Boolean portable() {
        return this.portable;
    }
    public String productCode() {
        return this.productCode;
    }
    /**
     * @return Region ID the disk belongs to.
     * 
     */
    public String regionId() {
        return this.regionId;
    }
    /**
     * @return The Id of resource group which the disk belongs.
     * 
     */
    public String resourceGroupId() {
        return this.resourceGroupId;
    }
    /**
     * @return Disk size in GiB.
     * 
     */
    public Integer size() {
        return this.size;
    }
    /**
     * @return Snapshot used to create the disk. It is null if no snapshot is used to create the disk.
     * 
     */
    public String snapshotId() {
        return this.snapshotId;
    }
    /**
     * @return Current status. Possible values: `In_use`, `Available`, `Attaching`, `Detaching`, `Creating` and `ReIniting`.
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return A map of tags assigned to the disks. It must be in the format:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.alicloud.ecs.EcsFunctions;
     * import com.pulumi.alicloud.ecs.inputs.GetDisksArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var disksDs = EcsFunctions.getDisks(GetDisksArgs.builder()
     *             .tags(Map.ofEntries(
     *                 Map.entry(&#34;tagKey1&#34;, &#34;tagValue1&#34;),
     *                 Map.entry(&#34;tagKey2&#34;, &#34;tagValue2&#34;)
     *             ))
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public Map<String,Object> tags() {
        return this.tags;
    }
    /**
     * @return Disk type. Possible values: `system` and `data`.
     * 
     */
    public String type() {
        return this.type;
    }
    public String zoneId() {
        return this.zoneId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDisksDisk defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String attachedTime;
        private String autoSnapshotPolicyId;
        private String availabilityZone;
        private String category;
        private String creationTime;
        private Boolean deleteAutoSnapshot;
        private Boolean deleteWithInstance;
        private String description;
        private String detachedTime;
        private String device;
        private String diskId;
        private String diskName;
        private String diskType;
        private Boolean enableAutoSnapshot;
        private Boolean enableAutomatedSnapshotPolicy;
        private String encrypted;
        private String expiredTime;
        private String id;
        private String imageId;
        private String instanceId;
        private Integer iops;
        private Integer iopsRead;
        private Integer iopsWrite;
        private String kmsKeyId;
        private Integer mountInstanceNum;
        private List<GetDisksDiskMountInstance> mountInstances;
        private String name;
        private List<GetDisksDiskOperationLock> operationLocks;
        private String paymentType;
        private String performanceLevel;
        private Boolean portable;
        private String productCode;
        private String regionId;
        private String resourceGroupId;
        private Integer size;
        private String snapshotId;
        private String status;
        private Map<String,Object> tags;
        private String type;
        private String zoneId;
        public Builder() {}
        public Builder(GetDisksDisk defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.attachedTime = defaults.attachedTime;
    	      this.autoSnapshotPolicyId = defaults.autoSnapshotPolicyId;
    	      this.availabilityZone = defaults.availabilityZone;
    	      this.category = defaults.category;
    	      this.creationTime = defaults.creationTime;
    	      this.deleteAutoSnapshot = defaults.deleteAutoSnapshot;
    	      this.deleteWithInstance = defaults.deleteWithInstance;
    	      this.description = defaults.description;
    	      this.detachedTime = defaults.detachedTime;
    	      this.device = defaults.device;
    	      this.diskId = defaults.diskId;
    	      this.diskName = defaults.diskName;
    	      this.diskType = defaults.diskType;
    	      this.enableAutoSnapshot = defaults.enableAutoSnapshot;
    	      this.enableAutomatedSnapshotPolicy = defaults.enableAutomatedSnapshotPolicy;
    	      this.encrypted = defaults.encrypted;
    	      this.expiredTime = defaults.expiredTime;
    	      this.id = defaults.id;
    	      this.imageId = defaults.imageId;
    	      this.instanceId = defaults.instanceId;
    	      this.iops = defaults.iops;
    	      this.iopsRead = defaults.iopsRead;
    	      this.iopsWrite = defaults.iopsWrite;
    	      this.kmsKeyId = defaults.kmsKeyId;
    	      this.mountInstanceNum = defaults.mountInstanceNum;
    	      this.mountInstances = defaults.mountInstances;
    	      this.name = defaults.name;
    	      this.operationLocks = defaults.operationLocks;
    	      this.paymentType = defaults.paymentType;
    	      this.performanceLevel = defaults.performanceLevel;
    	      this.portable = defaults.portable;
    	      this.productCode = defaults.productCode;
    	      this.regionId = defaults.regionId;
    	      this.resourceGroupId = defaults.resourceGroupId;
    	      this.size = defaults.size;
    	      this.snapshotId = defaults.snapshotId;
    	      this.status = defaults.status;
    	      this.tags = defaults.tags;
    	      this.type = defaults.type;
    	      this.zoneId = defaults.zoneId;
        }

        @CustomType.Setter
        public Builder attachedTime(String attachedTime) {
            this.attachedTime = Objects.requireNonNull(attachedTime);
            return this;
        }
        @CustomType.Setter
        public Builder autoSnapshotPolicyId(String autoSnapshotPolicyId) {
            this.autoSnapshotPolicyId = Objects.requireNonNull(autoSnapshotPolicyId);
            return this;
        }
        @CustomType.Setter
        public Builder availabilityZone(String availabilityZone) {
            this.availabilityZone = Objects.requireNonNull(availabilityZone);
            return this;
        }
        @CustomType.Setter
        public Builder category(String category) {
            this.category = Objects.requireNonNull(category);
            return this;
        }
        @CustomType.Setter
        public Builder creationTime(String creationTime) {
            this.creationTime = Objects.requireNonNull(creationTime);
            return this;
        }
        @CustomType.Setter
        public Builder deleteAutoSnapshot(Boolean deleteAutoSnapshot) {
            this.deleteAutoSnapshot = Objects.requireNonNull(deleteAutoSnapshot);
            return this;
        }
        @CustomType.Setter
        public Builder deleteWithInstance(Boolean deleteWithInstance) {
            this.deleteWithInstance = Objects.requireNonNull(deleteWithInstance);
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }
        @CustomType.Setter
        public Builder detachedTime(String detachedTime) {
            this.detachedTime = Objects.requireNonNull(detachedTime);
            return this;
        }
        @CustomType.Setter
        public Builder device(String device) {
            this.device = Objects.requireNonNull(device);
            return this;
        }
        @CustomType.Setter
        public Builder diskId(String diskId) {
            this.diskId = Objects.requireNonNull(diskId);
            return this;
        }
        @CustomType.Setter
        public Builder diskName(String diskName) {
            this.diskName = Objects.requireNonNull(diskName);
            return this;
        }
        @CustomType.Setter
        public Builder diskType(String diskType) {
            this.diskType = Objects.requireNonNull(diskType);
            return this;
        }
        @CustomType.Setter
        public Builder enableAutoSnapshot(Boolean enableAutoSnapshot) {
            this.enableAutoSnapshot = Objects.requireNonNull(enableAutoSnapshot);
            return this;
        }
        @CustomType.Setter
        public Builder enableAutomatedSnapshotPolicy(Boolean enableAutomatedSnapshotPolicy) {
            this.enableAutomatedSnapshotPolicy = Objects.requireNonNull(enableAutomatedSnapshotPolicy);
            return this;
        }
        @CustomType.Setter
        public Builder encrypted(String encrypted) {
            this.encrypted = Objects.requireNonNull(encrypted);
            return this;
        }
        @CustomType.Setter
        public Builder expiredTime(String expiredTime) {
            this.expiredTime = Objects.requireNonNull(expiredTime);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder imageId(String imageId) {
            this.imageId = Objects.requireNonNull(imageId);
            return this;
        }
        @CustomType.Setter
        public Builder instanceId(String instanceId) {
            this.instanceId = Objects.requireNonNull(instanceId);
            return this;
        }
        @CustomType.Setter
        public Builder iops(Integer iops) {
            this.iops = Objects.requireNonNull(iops);
            return this;
        }
        @CustomType.Setter
        public Builder iopsRead(Integer iopsRead) {
            this.iopsRead = Objects.requireNonNull(iopsRead);
            return this;
        }
        @CustomType.Setter
        public Builder iopsWrite(Integer iopsWrite) {
            this.iopsWrite = Objects.requireNonNull(iopsWrite);
            return this;
        }
        @CustomType.Setter
        public Builder kmsKeyId(String kmsKeyId) {
            this.kmsKeyId = Objects.requireNonNull(kmsKeyId);
            return this;
        }
        @CustomType.Setter
        public Builder mountInstanceNum(Integer mountInstanceNum) {
            this.mountInstanceNum = Objects.requireNonNull(mountInstanceNum);
            return this;
        }
        @CustomType.Setter
        public Builder mountInstances(List<GetDisksDiskMountInstance> mountInstances) {
            this.mountInstances = Objects.requireNonNull(mountInstances);
            return this;
        }
        public Builder mountInstances(GetDisksDiskMountInstance... mountInstances) {
            return mountInstances(List.of(mountInstances));
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder operationLocks(List<GetDisksDiskOperationLock> operationLocks) {
            this.operationLocks = Objects.requireNonNull(operationLocks);
            return this;
        }
        public Builder operationLocks(GetDisksDiskOperationLock... operationLocks) {
            return operationLocks(List.of(operationLocks));
        }
        @CustomType.Setter
        public Builder paymentType(String paymentType) {
            this.paymentType = Objects.requireNonNull(paymentType);
            return this;
        }
        @CustomType.Setter
        public Builder performanceLevel(String performanceLevel) {
            this.performanceLevel = Objects.requireNonNull(performanceLevel);
            return this;
        }
        @CustomType.Setter
        public Builder portable(Boolean portable) {
            this.portable = Objects.requireNonNull(portable);
            return this;
        }
        @CustomType.Setter
        public Builder productCode(String productCode) {
            this.productCode = Objects.requireNonNull(productCode);
            return this;
        }
        @CustomType.Setter
        public Builder regionId(String regionId) {
            this.regionId = Objects.requireNonNull(regionId);
            return this;
        }
        @CustomType.Setter
        public Builder resourceGroupId(String resourceGroupId) {
            this.resourceGroupId = Objects.requireNonNull(resourceGroupId);
            return this;
        }
        @CustomType.Setter
        public Builder size(Integer size) {
            this.size = Objects.requireNonNull(size);
            return this;
        }
        @CustomType.Setter
        public Builder snapshotId(String snapshotId) {
            this.snapshotId = Objects.requireNonNull(snapshotId);
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            this.status = Objects.requireNonNull(status);
            return this;
        }
        @CustomType.Setter
        public Builder tags(Map<String,Object> tags) {
            this.tags = Objects.requireNonNull(tags);
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        @CustomType.Setter
        public Builder zoneId(String zoneId) {
            this.zoneId = Objects.requireNonNull(zoneId);
            return this;
        }
        public GetDisksDisk build() {
            final var o = new GetDisksDisk();
            o.attachedTime = attachedTime;
            o.autoSnapshotPolicyId = autoSnapshotPolicyId;
            o.availabilityZone = availabilityZone;
            o.category = category;
            o.creationTime = creationTime;
            o.deleteAutoSnapshot = deleteAutoSnapshot;
            o.deleteWithInstance = deleteWithInstance;
            o.description = description;
            o.detachedTime = detachedTime;
            o.device = device;
            o.diskId = diskId;
            o.diskName = diskName;
            o.diskType = diskType;
            o.enableAutoSnapshot = enableAutoSnapshot;
            o.enableAutomatedSnapshotPolicy = enableAutomatedSnapshotPolicy;
            o.encrypted = encrypted;
            o.expiredTime = expiredTime;
            o.id = id;
            o.imageId = imageId;
            o.instanceId = instanceId;
            o.iops = iops;
            o.iopsRead = iopsRead;
            o.iopsWrite = iopsWrite;
            o.kmsKeyId = kmsKeyId;
            o.mountInstanceNum = mountInstanceNum;
            o.mountInstances = mountInstances;
            o.name = name;
            o.operationLocks = operationLocks;
            o.paymentType = paymentType;
            o.performanceLevel = performanceLevel;
            o.portable = portable;
            o.productCode = productCode;
            o.regionId = regionId;
            o.resourceGroupId = resourceGroupId;
            o.size = size;
            o.snapshotId = snapshotId;
            o.status = status;
            o.tags = tags;
            o.type = type;
            o.zoneId = zoneId;
            return o;
        }
    }
}
