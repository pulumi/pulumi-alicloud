// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.message;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;


public final class ServiceEndpointAclArgs extends com.pulumi.resources.ResourceArgs {

    public static final ServiceEndpointAclArgs Empty = new ServiceEndpointAclArgs();

    /**
     * The ACL policy. Valid value:
     * - allow: indicates that the current endpoint allows access from the corresponding CIDR block. (Only allow is supported)
     * 
     */
    @Import(name="aclStrategy", required=true)
    private Output<String> aclStrategy;

    /**
     * @return The ACL policy. Valid value:
     * - allow: indicates that the current endpoint allows access from the corresponding CIDR block. (Only allow is supported)
     * 
     */
    public Output<String> aclStrategy() {
        return this.aclStrategy;
    }

    @Import(name="cidr", required=true)
    private Output<String> cidr;

    public Output<String> cidr() {
        return this.cidr;
    }

    /**
     * Access point type. Value:
     * - public: indicates a public access point. (Currently only public is supported)
     * 
     */
    @Import(name="endpointType", required=true)
    private Output<String> endpointType;

    /**
     * @return Access point type. Value:
     * - public: indicates a public access point. (Currently only public is supported)
     * 
     */
    public Output<String> endpointType() {
        return this.endpointType;
    }

    private ServiceEndpointAclArgs() {}

    private ServiceEndpointAclArgs(ServiceEndpointAclArgs $) {
        this.aclStrategy = $.aclStrategy;
        this.cidr = $.cidr;
        this.endpointType = $.endpointType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServiceEndpointAclArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServiceEndpointAclArgs $;

        public Builder() {
            $ = new ServiceEndpointAclArgs();
        }

        public Builder(ServiceEndpointAclArgs defaults) {
            $ = new ServiceEndpointAclArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param aclStrategy The ACL policy. Valid value:
         * - allow: indicates that the current endpoint allows access from the corresponding CIDR block. (Only allow is supported)
         * 
         * @return builder
         * 
         */
        public Builder aclStrategy(Output<String> aclStrategy) {
            $.aclStrategy = aclStrategy;
            return this;
        }

        /**
         * @param aclStrategy The ACL policy. Valid value:
         * - allow: indicates that the current endpoint allows access from the corresponding CIDR block. (Only allow is supported)
         * 
         * @return builder
         * 
         */
        public Builder aclStrategy(String aclStrategy) {
            return aclStrategy(Output.of(aclStrategy));
        }

        public Builder cidr(Output<String> cidr) {
            $.cidr = cidr;
            return this;
        }

        public Builder cidr(String cidr) {
            return cidr(Output.of(cidr));
        }

        /**
         * @param endpointType Access point type. Value:
         * - public: indicates a public access point. (Currently only public is supported)
         * 
         * @return builder
         * 
         */
        public Builder endpointType(Output<String> endpointType) {
            $.endpointType = endpointType;
            return this;
        }

        /**
         * @param endpointType Access point type. Value:
         * - public: indicates a public access point. (Currently only public is supported)
         * 
         * @return builder
         * 
         */
        public Builder endpointType(String endpointType) {
            return endpointType(Output.of(endpointType));
        }

        public ServiceEndpointAclArgs build() {
            if ($.aclStrategy == null) {
                throw new MissingRequiredPropertyException("ServiceEndpointAclArgs", "aclStrategy");
            }
            if ($.cidr == null) {
                throw new MissingRequiredPropertyException("ServiceEndpointAclArgs", "cidr");
            }
            if ($.endpointType == null) {
                throw new MissingRequiredPropertyException("ServiceEndpointAclArgs", "endpointType");
            }
            return $;
        }
    }

}
