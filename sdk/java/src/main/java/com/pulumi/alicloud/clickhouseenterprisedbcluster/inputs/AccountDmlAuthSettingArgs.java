// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.clickhouseenterprisedbcluster.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AccountDmlAuthSettingArgs extends com.pulumi.resources.ResourceArgs {

    public static final AccountDmlAuthSettingArgs Empty = new AccountDmlAuthSettingArgs();

    /**
     * The list of databases that require authorization. If there are more than one, separate them with commas (,).
     * 
     */
    @Import(name="allowDatabases")
    private @Nullable Output<List<String>> allowDatabases;

    /**
     * @return The list of databases that require authorization. If there are more than one, separate them with commas (,).
     * 
     */
    public Optional<Output<List<String>>> allowDatabases() {
        return Optional.ofNullable(this.allowDatabases);
    }

    /**
     * List of dictionaries that require authorization. If there are more than one, separate them with commas (,).
     * 
     */
    @Import(name="allowDictionaries")
    private @Nullable Output<List<String>> allowDictionaries;

    /**
     * @return List of dictionaries that require authorization. If there are more than one, separate them with commas (,).
     * 
     */
    public Optional<Output<List<String>>> allowDictionaries() {
        return Optional.ofNullable(this.allowDictionaries);
    }

    /**
     * Whether to grant the DDL permission to the database account. Value description:
     * 
     */
    @Import(name="ddlAuthority", required=true)
    private Output<Boolean> ddlAuthority;

    /**
     * @return Whether to grant the DDL permission to the database account. Value description:
     * 
     */
    public Output<Boolean> ddlAuthority() {
        return this.ddlAuthority;
    }

    /**
     * Whether to grant the DML permission to the database account. The values are as follows:
     * 
     */
    @Import(name="dmlAuthority", required=true)
    private Output<Integer> dmlAuthority;

    /**
     * @return Whether to grant the DML permission to the database account. The values are as follows:
     * 
     */
    public Output<Integer> dmlAuthority() {
        return this.dmlAuthority;
    }

    private AccountDmlAuthSettingArgs() {}

    private AccountDmlAuthSettingArgs(AccountDmlAuthSettingArgs $) {
        this.allowDatabases = $.allowDatabases;
        this.allowDictionaries = $.allowDictionaries;
        this.ddlAuthority = $.ddlAuthority;
        this.dmlAuthority = $.dmlAuthority;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AccountDmlAuthSettingArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AccountDmlAuthSettingArgs $;

        public Builder() {
            $ = new AccountDmlAuthSettingArgs();
        }

        public Builder(AccountDmlAuthSettingArgs defaults) {
            $ = new AccountDmlAuthSettingArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param allowDatabases The list of databases that require authorization. If there are more than one, separate them with commas (,).
         * 
         * @return builder
         * 
         */
        public Builder allowDatabases(@Nullable Output<List<String>> allowDatabases) {
            $.allowDatabases = allowDatabases;
            return this;
        }

        /**
         * @param allowDatabases The list of databases that require authorization. If there are more than one, separate them with commas (,).
         * 
         * @return builder
         * 
         */
        public Builder allowDatabases(List<String> allowDatabases) {
            return allowDatabases(Output.of(allowDatabases));
        }

        /**
         * @param allowDatabases The list of databases that require authorization. If there are more than one, separate them with commas (,).
         * 
         * @return builder
         * 
         */
        public Builder allowDatabases(String... allowDatabases) {
            return allowDatabases(List.of(allowDatabases));
        }

        /**
         * @param allowDictionaries List of dictionaries that require authorization. If there are more than one, separate them with commas (,).
         * 
         * @return builder
         * 
         */
        public Builder allowDictionaries(@Nullable Output<List<String>> allowDictionaries) {
            $.allowDictionaries = allowDictionaries;
            return this;
        }

        /**
         * @param allowDictionaries List of dictionaries that require authorization. If there are more than one, separate them with commas (,).
         * 
         * @return builder
         * 
         */
        public Builder allowDictionaries(List<String> allowDictionaries) {
            return allowDictionaries(Output.of(allowDictionaries));
        }

        /**
         * @param allowDictionaries List of dictionaries that require authorization. If there are more than one, separate them with commas (,).
         * 
         * @return builder
         * 
         */
        public Builder allowDictionaries(String... allowDictionaries) {
            return allowDictionaries(List.of(allowDictionaries));
        }

        /**
         * @param ddlAuthority Whether to grant the DDL permission to the database account. Value description:
         * 
         * @return builder
         * 
         */
        public Builder ddlAuthority(Output<Boolean> ddlAuthority) {
            $.ddlAuthority = ddlAuthority;
            return this;
        }

        /**
         * @param ddlAuthority Whether to grant the DDL permission to the database account. Value description:
         * 
         * @return builder
         * 
         */
        public Builder ddlAuthority(Boolean ddlAuthority) {
            return ddlAuthority(Output.of(ddlAuthority));
        }

        /**
         * @param dmlAuthority Whether to grant the DML permission to the database account. The values are as follows:
         * 
         * @return builder
         * 
         */
        public Builder dmlAuthority(Output<Integer> dmlAuthority) {
            $.dmlAuthority = dmlAuthority;
            return this;
        }

        /**
         * @param dmlAuthority Whether to grant the DML permission to the database account. The values are as follows:
         * 
         * @return builder
         * 
         */
        public Builder dmlAuthority(Integer dmlAuthority) {
            return dmlAuthority(Output.of(dmlAuthority));
        }

        public AccountDmlAuthSettingArgs build() {
            if ($.ddlAuthority == null) {
                throw new MissingRequiredPropertyException("AccountDmlAuthSettingArgs", "ddlAuthority");
            }
            if ($.dmlAuthority == null) {
                throw new MissingRequiredPropertyException("AccountDmlAuthSettingArgs", "dmlAuthority");
            }
            return $;
        }
    }

}
