// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.ecs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SnapshotPolicyArgs extends com.pulumi.resources.ResourceArgs {

    public static final SnapshotPolicyArgs Empty = new SnapshotPolicyArgs();

    @Import(name="copiedSnapshotsRetentionDays")
    private @Nullable Output<Integer> copiedSnapshotsRetentionDays;

    public Optional<Output<Integer>> copiedSnapshotsRetentionDays() {
        return Optional.ofNullable(this.copiedSnapshotsRetentionDays);
    }

    @Import(name="enableCrossRegionCopy")
    private @Nullable Output<Boolean> enableCrossRegionCopy;

    public Optional<Output<Boolean>> enableCrossRegionCopy() {
        return Optional.ofNullable(this.enableCrossRegionCopy);
    }

    /**
     * The snapshot policy name.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The snapshot policy name.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The automatic snapshot repetition dates. The unit of measurement is day and the repeating cycle is a week. Value range: [1, 7], which represents days starting from Monday to Sunday, for example 1  indicates Monday. When you want to schedule multiple automatic snapshot tasks for a disk in a week, you can set the RepeatWeekdays to an array.
     * - A maximum of seven time points can be selected.
     * - The format is  an JSON array of [&#34;1&#34;, &#34;2&#34;, … &#34;7&#34;]  and the time points are separated by commas (,).
     * 
     */
    @Import(name="repeatWeekdays", required=true)
    private Output<List<String>> repeatWeekdays;

    /**
     * @return The automatic snapshot repetition dates. The unit of measurement is day and the repeating cycle is a week. Value range: [1, 7], which represents days starting from Monday to Sunday, for example 1  indicates Monday. When you want to schedule multiple automatic snapshot tasks for a disk in a week, you can set the RepeatWeekdays to an array.
     * - A maximum of seven time points can be selected.
     * - The format is  an JSON array of [&#34;1&#34;, &#34;2&#34;, … &#34;7&#34;]  and the time points are separated by commas (,).
     * 
     */
    public Output<List<String>> repeatWeekdays() {
        return this.repeatWeekdays;
    }

    /**
     * The snapshot retention time, and the unit of measurement is day. Optional values:
     * - -1: The automatic snapshots are retained permanently.
     * - [1, 65536]: The number of days retained.
     * 
     * Default value: -1.
     * 
     */
    @Import(name="retentionDays", required=true)
    private Output<Integer> retentionDays;

    /**
     * @return The snapshot retention time, and the unit of measurement is day. Optional values:
     * - -1: The automatic snapshots are retained permanently.
     * - [1, 65536]: The number of days retained.
     * 
     * Default value: -1.
     * 
     */
    public Output<Integer> retentionDays() {
        return this.retentionDays;
    }

    @Import(name="tags")
    private @Nullable Output<Map<String,Object>> tags;

    public Optional<Output<Map<String,Object>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    @Import(name="targetCopyRegions")
    private @Nullable Output<List<String>> targetCopyRegions;

    public Optional<Output<List<String>>> targetCopyRegions() {
        return Optional.ofNullable(this.targetCopyRegions);
    }

    /**
     * The automatic snapshot creation schedule, and the unit of measurement is hour. Value range: [0, 23], which represents from 00:00 to 24:00,  for example 1 indicates 01:00. When you want to schedule multiple automatic snapshot tasks for a disk in a day, you can set the TimePoints to an array.
     * - A maximum of 24 time points can be selected.
     * - The format is  an JSON array of [&#34;0&#34;, &#34;1&#34;, … &#34;23&#34;] and the time points are separated by commas (,).
     * 
     */
    @Import(name="timePoints", required=true)
    private Output<List<String>> timePoints;

    /**
     * @return The automatic snapshot creation schedule, and the unit of measurement is hour. Value range: [0, 23], which represents from 00:00 to 24:00,  for example 1 indicates 01:00. When you want to schedule multiple automatic snapshot tasks for a disk in a day, you can set the TimePoints to an array.
     * - A maximum of 24 time points can be selected.
     * - The format is  an JSON array of [&#34;0&#34;, &#34;1&#34;, … &#34;23&#34;] and the time points are separated by commas (,).
     * 
     */
    public Output<List<String>> timePoints() {
        return this.timePoints;
    }

    private SnapshotPolicyArgs() {}

    private SnapshotPolicyArgs(SnapshotPolicyArgs $) {
        this.copiedSnapshotsRetentionDays = $.copiedSnapshotsRetentionDays;
        this.enableCrossRegionCopy = $.enableCrossRegionCopy;
        this.name = $.name;
        this.repeatWeekdays = $.repeatWeekdays;
        this.retentionDays = $.retentionDays;
        this.tags = $.tags;
        this.targetCopyRegions = $.targetCopyRegions;
        this.timePoints = $.timePoints;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SnapshotPolicyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SnapshotPolicyArgs $;

        public Builder() {
            $ = new SnapshotPolicyArgs();
        }

        public Builder(SnapshotPolicyArgs defaults) {
            $ = new SnapshotPolicyArgs(Objects.requireNonNull(defaults));
        }

        public Builder copiedSnapshotsRetentionDays(@Nullable Output<Integer> copiedSnapshotsRetentionDays) {
            $.copiedSnapshotsRetentionDays = copiedSnapshotsRetentionDays;
            return this;
        }

        public Builder copiedSnapshotsRetentionDays(Integer copiedSnapshotsRetentionDays) {
            return copiedSnapshotsRetentionDays(Output.of(copiedSnapshotsRetentionDays));
        }

        public Builder enableCrossRegionCopy(@Nullable Output<Boolean> enableCrossRegionCopy) {
            $.enableCrossRegionCopy = enableCrossRegionCopy;
            return this;
        }

        public Builder enableCrossRegionCopy(Boolean enableCrossRegionCopy) {
            return enableCrossRegionCopy(Output.of(enableCrossRegionCopy));
        }

        /**
         * @param name The snapshot policy name.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The snapshot policy name.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param repeatWeekdays The automatic snapshot repetition dates. The unit of measurement is day and the repeating cycle is a week. Value range: [1, 7], which represents days starting from Monday to Sunday, for example 1  indicates Monday. When you want to schedule multiple automatic snapshot tasks for a disk in a week, you can set the RepeatWeekdays to an array.
         * - A maximum of seven time points can be selected.
         * - The format is  an JSON array of [&#34;1&#34;, &#34;2&#34;, … &#34;7&#34;]  and the time points are separated by commas (,).
         * 
         * @return builder
         * 
         */
        public Builder repeatWeekdays(Output<List<String>> repeatWeekdays) {
            $.repeatWeekdays = repeatWeekdays;
            return this;
        }

        /**
         * @param repeatWeekdays The automatic snapshot repetition dates. The unit of measurement is day and the repeating cycle is a week. Value range: [1, 7], which represents days starting from Monday to Sunday, for example 1  indicates Monday. When you want to schedule multiple automatic snapshot tasks for a disk in a week, you can set the RepeatWeekdays to an array.
         * - A maximum of seven time points can be selected.
         * - The format is  an JSON array of [&#34;1&#34;, &#34;2&#34;, … &#34;7&#34;]  and the time points are separated by commas (,).
         * 
         * @return builder
         * 
         */
        public Builder repeatWeekdays(List<String> repeatWeekdays) {
            return repeatWeekdays(Output.of(repeatWeekdays));
        }

        /**
         * @param repeatWeekdays The automatic snapshot repetition dates. The unit of measurement is day and the repeating cycle is a week. Value range: [1, 7], which represents days starting from Monday to Sunday, for example 1  indicates Monday. When you want to schedule multiple automatic snapshot tasks for a disk in a week, you can set the RepeatWeekdays to an array.
         * - A maximum of seven time points can be selected.
         * - The format is  an JSON array of [&#34;1&#34;, &#34;2&#34;, … &#34;7&#34;]  and the time points are separated by commas (,).
         * 
         * @return builder
         * 
         */
        public Builder repeatWeekdays(String... repeatWeekdays) {
            return repeatWeekdays(List.of(repeatWeekdays));
        }

        /**
         * @param retentionDays The snapshot retention time, and the unit of measurement is day. Optional values:
         * - -1: The automatic snapshots are retained permanently.
         * - [1, 65536]: The number of days retained.
         * 
         * Default value: -1.
         * 
         * @return builder
         * 
         */
        public Builder retentionDays(Output<Integer> retentionDays) {
            $.retentionDays = retentionDays;
            return this;
        }

        /**
         * @param retentionDays The snapshot retention time, and the unit of measurement is day. Optional values:
         * - -1: The automatic snapshots are retained permanently.
         * - [1, 65536]: The number of days retained.
         * 
         * Default value: -1.
         * 
         * @return builder
         * 
         */
        public Builder retentionDays(Integer retentionDays) {
            return retentionDays(Output.of(retentionDays));
        }

        public Builder tags(@Nullable Output<Map<String,Object>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(Map<String,Object> tags) {
            return tags(Output.of(tags));
        }

        public Builder targetCopyRegions(@Nullable Output<List<String>> targetCopyRegions) {
            $.targetCopyRegions = targetCopyRegions;
            return this;
        }

        public Builder targetCopyRegions(List<String> targetCopyRegions) {
            return targetCopyRegions(Output.of(targetCopyRegions));
        }

        public Builder targetCopyRegions(String... targetCopyRegions) {
            return targetCopyRegions(List.of(targetCopyRegions));
        }

        /**
         * @param timePoints The automatic snapshot creation schedule, and the unit of measurement is hour. Value range: [0, 23], which represents from 00:00 to 24:00,  for example 1 indicates 01:00. When you want to schedule multiple automatic snapshot tasks for a disk in a day, you can set the TimePoints to an array.
         * - A maximum of 24 time points can be selected.
         * - The format is  an JSON array of [&#34;0&#34;, &#34;1&#34;, … &#34;23&#34;] and the time points are separated by commas (,).
         * 
         * @return builder
         * 
         */
        public Builder timePoints(Output<List<String>> timePoints) {
            $.timePoints = timePoints;
            return this;
        }

        /**
         * @param timePoints The automatic snapshot creation schedule, and the unit of measurement is hour. Value range: [0, 23], which represents from 00:00 to 24:00,  for example 1 indicates 01:00. When you want to schedule multiple automatic snapshot tasks for a disk in a day, you can set the TimePoints to an array.
         * - A maximum of 24 time points can be selected.
         * - The format is  an JSON array of [&#34;0&#34;, &#34;1&#34;, … &#34;23&#34;] and the time points are separated by commas (,).
         * 
         * @return builder
         * 
         */
        public Builder timePoints(List<String> timePoints) {
            return timePoints(Output.of(timePoints));
        }

        /**
         * @param timePoints The automatic snapshot creation schedule, and the unit of measurement is hour. Value range: [0, 23], which represents from 00:00 to 24:00,  for example 1 indicates 01:00. When you want to schedule multiple automatic snapshot tasks for a disk in a day, you can set the TimePoints to an array.
         * - A maximum of 24 time points can be selected.
         * - The format is  an JSON array of [&#34;0&#34;, &#34;1&#34;, … &#34;23&#34;] and the time points are separated by commas (,).
         * 
         * @return builder
         * 
         */
        public Builder timePoints(String... timePoints) {
            return timePoints(List.of(timePoints));
        }

        public SnapshotPolicyArgs build() {
            if ($.repeatWeekdays == null) {
                throw new MissingRequiredPropertyException("SnapshotPolicyArgs", "repeatWeekdays");
            }
            if ($.retentionDays == null) {
                throw new MissingRequiredPropertyException("SnapshotPolicyArgs", "retentionDays");
            }
            if ($.timePoints == null) {
                throw new MissingRequiredPropertyException("SnapshotPolicyArgs", "timePoints");
            }
            return $;
        }
    }

}
