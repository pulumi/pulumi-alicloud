// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.mse.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetNacosConfigsConfig {
    /**
     * @return The name of the application.
     * 
     */
    private String appName;
    /**
     * @return The list of IP addresses where the beta release of the configuration is performed.
     * 
     */
    private String betaIps;
    /**
     * @return The content of the configuration.
     * 
     */
    private String content;
    /**
     * @return The ID of the data.
     * 
     */
    private String dataId;
    /**
     * @return The description of the configuration.
     * 
     */
    private String desc;
    /**
     * @return The encryption key.
     * 
     */
    private String encryptedDataKey;
    /**
     * @return The ID of the group.
     * 
     */
    private String group;
    /**
     * @return The ID of the Nacos Config. It is formatted to `&lt;instance_id&gt;:&lt;namespace_id&gt;:&lt;data_id&gt;:&lt;group&gt;`.
     * 
     */
    private String id;
    /**
     * @return The message digest of the configuration.
     * 
     */
    private String md5;
    /**
     * @return The tags of the configuration.
     * 
     */
    private String tags;
    /**
     * @return The format of the configuration. Supported formats include TEXT, JSON, and XML.
     * 
     */
    private String type;

    private GetNacosConfigsConfig() {}
    /**
     * @return The name of the application.
     * 
     */
    public String appName() {
        return this.appName;
    }
    /**
     * @return The list of IP addresses where the beta release of the configuration is performed.
     * 
     */
    public String betaIps() {
        return this.betaIps;
    }
    /**
     * @return The content of the configuration.
     * 
     */
    public String content() {
        return this.content;
    }
    /**
     * @return The ID of the data.
     * 
     */
    public String dataId() {
        return this.dataId;
    }
    /**
     * @return The description of the configuration.
     * 
     */
    public String desc() {
        return this.desc;
    }
    /**
     * @return The encryption key.
     * 
     */
    public String encryptedDataKey() {
        return this.encryptedDataKey;
    }
    /**
     * @return The ID of the group.
     * 
     */
    public String group() {
        return this.group;
    }
    /**
     * @return The ID of the Nacos Config. It is formatted to `&lt;instance_id&gt;:&lt;namespace_id&gt;:&lt;data_id&gt;:&lt;group&gt;`.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The message digest of the configuration.
     * 
     */
    public String md5() {
        return this.md5;
    }
    /**
     * @return The tags of the configuration.
     * 
     */
    public String tags() {
        return this.tags;
    }
    /**
     * @return The format of the configuration. Supported formats include TEXT, JSON, and XML.
     * 
     */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetNacosConfigsConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String appName;
        private String betaIps;
        private String content;
        private String dataId;
        private String desc;
        private String encryptedDataKey;
        private String group;
        private String id;
        private String md5;
        private String tags;
        private String type;
        public Builder() {}
        public Builder(GetNacosConfigsConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.appName = defaults.appName;
    	      this.betaIps = defaults.betaIps;
    	      this.content = defaults.content;
    	      this.dataId = defaults.dataId;
    	      this.desc = defaults.desc;
    	      this.encryptedDataKey = defaults.encryptedDataKey;
    	      this.group = defaults.group;
    	      this.id = defaults.id;
    	      this.md5 = defaults.md5;
    	      this.tags = defaults.tags;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder appName(String appName) {
            if (appName == null) {
              throw new MissingRequiredPropertyException("GetNacosConfigsConfig", "appName");
            }
            this.appName = appName;
            return this;
        }
        @CustomType.Setter
        public Builder betaIps(String betaIps) {
            if (betaIps == null) {
              throw new MissingRequiredPropertyException("GetNacosConfigsConfig", "betaIps");
            }
            this.betaIps = betaIps;
            return this;
        }
        @CustomType.Setter
        public Builder content(String content) {
            if (content == null) {
              throw new MissingRequiredPropertyException("GetNacosConfigsConfig", "content");
            }
            this.content = content;
            return this;
        }
        @CustomType.Setter
        public Builder dataId(String dataId) {
            if (dataId == null) {
              throw new MissingRequiredPropertyException("GetNacosConfigsConfig", "dataId");
            }
            this.dataId = dataId;
            return this;
        }
        @CustomType.Setter
        public Builder desc(String desc) {
            if (desc == null) {
              throw new MissingRequiredPropertyException("GetNacosConfigsConfig", "desc");
            }
            this.desc = desc;
            return this;
        }
        @CustomType.Setter
        public Builder encryptedDataKey(String encryptedDataKey) {
            if (encryptedDataKey == null) {
              throw new MissingRequiredPropertyException("GetNacosConfigsConfig", "encryptedDataKey");
            }
            this.encryptedDataKey = encryptedDataKey;
            return this;
        }
        @CustomType.Setter
        public Builder group(String group) {
            if (group == null) {
              throw new MissingRequiredPropertyException("GetNacosConfigsConfig", "group");
            }
            this.group = group;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetNacosConfigsConfig", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder md5(String md5) {
            if (md5 == null) {
              throw new MissingRequiredPropertyException("GetNacosConfigsConfig", "md5");
            }
            this.md5 = md5;
            return this;
        }
        @CustomType.Setter
        public Builder tags(String tags) {
            if (tags == null) {
              throw new MissingRequiredPropertyException("GetNacosConfigsConfig", "tags");
            }
            this.tags = tags;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("GetNacosConfigsConfig", "type");
            }
            this.type = type;
            return this;
        }
        public GetNacosConfigsConfig build() {
            final var _resultValue = new GetNacosConfigsConfig();
            _resultValue.appName = appName;
            _resultValue.betaIps = betaIps;
            _resultValue.content = content;
            _resultValue.dataId = dataId;
            _resultValue.desc = desc;
            _resultValue.encryptedDataKey = encryptedDataKey;
            _resultValue.group = group;
            _resultValue.id = id;
            _resultValue.md5 = md5;
            _resultValue.tags = tags;
            _resultValue.type = type;
            return _resultValue;
        }
    }
}
