// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.ess.inputs;

import com.pulumi.alicloud.ess.inputs.EciScalingConfigurationContainerEnvironmentVarArgs;
import com.pulumi.alicloud.ess.inputs.EciScalingConfigurationContainerPortArgs;
import com.pulumi.alicloud.ess.inputs.EciScalingConfigurationContainerVolumeMountArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class EciScalingConfigurationContainerArgs extends com.pulumi.resources.ResourceArgs {

    public static final EciScalingConfigurationContainerArgs Empty = new EciScalingConfigurationContainerArgs();

    /**
     * The arguments passed to the commands.
     * 
     */
    @Import(name="args")
    private @Nullable Output<List<String>> args;

    /**
     * @return The arguments passed to the commands.
     * 
     */
    public Optional<Output<List<String>>> args() {
        return Optional.ofNullable(this.args);
    }

    /**
     * The commands run by the init container.
     * 
     */
    @Import(name="commands")
    private @Nullable Output<List<String>> commands;

    /**
     * @return The commands run by the init container.
     * 
     */
    public Optional<Output<List<String>>> commands() {
        return Optional.ofNullable(this.commands);
    }

    /**
     * The amount of CPU resources allocated to the container.
     * 
     */
    @Import(name="cpu")
    private @Nullable Output<Double> cpu;

    /**
     * @return The amount of CPU resources allocated to the container.
     * 
     */
    public Optional<Output<Double>> cpu() {
        return Optional.ofNullable(this.cpu);
    }

    /**
     * The structure of environmentVars.
     * See `environment_vars` below for details.
     * 
     */
    @Import(name="environmentVars")
    private @Nullable Output<List<EciScalingConfigurationContainerEnvironmentVarArgs>> environmentVars;

    /**
     * @return The structure of environmentVars.
     * See `environment_vars` below for details.
     * 
     */
    public Optional<Output<List<EciScalingConfigurationContainerEnvironmentVarArgs>>> environmentVars() {
        return Optional.ofNullable(this.environmentVars);
    }

    /**
     * The number GPUs.
     * 
     */
    @Import(name="gpu")
    private @Nullable Output<Integer> gpu;

    /**
     * @return The number GPUs.
     * 
     */
    public Optional<Output<Integer>> gpu() {
        return Optional.ofNullable(this.gpu);
    }

    /**
     * The image of the container.
     * 
     */
    @Import(name="image")
    private @Nullable Output<String> image;

    /**
     * @return The image of the container.
     * 
     */
    public Optional<Output<String>> image() {
        return Optional.ofNullable(this.image);
    }

    /**
     * The restart policy of the image.
     * 
     */
    @Import(name="imagePullPolicy")
    private @Nullable Output<String> imagePullPolicy;

    /**
     * @return The restart policy of the image.
     * 
     */
    public Optional<Output<String>> imagePullPolicy() {
        return Optional.ofNullable(this.imagePullPolicy);
    }

    /**
     * The commands to be executed in containers when you use the CLI to specify the preStop callback function.
     * 
     */
    @Import(name="lifecyclePreStopHandlerExecs")
    private @Nullable Output<List<String>> lifecyclePreStopHandlerExecs;

    /**
     * @return The commands to be executed in containers when you use the CLI to specify the preStop callback function.
     * 
     */
    public Optional<Output<List<String>>> lifecyclePreStopHandlerExecs() {
        return Optional.ofNullable(this.lifecyclePreStopHandlerExecs);
    }

    /**
     * Commands that you want to run in containers when you use the CLI to perform liveness probes.
     * 
     */
    @Import(name="livenessProbeExecCommands")
    private @Nullable Output<List<String>> livenessProbeExecCommands;

    /**
     * @return Commands that you want to run in containers when you use the CLI to perform liveness probes.
     * 
     */
    public Optional<Output<List<String>>> livenessProbeExecCommands() {
        return Optional.ofNullable(this.livenessProbeExecCommands);
    }

    /**
     * The minimum number of consecutive failures for the liveness probe to be considered failed after having been successful. Default value: 3.
     * 
     */
    @Import(name="livenessProbeFailureThreshold")
    private @Nullable Output<Integer> livenessProbeFailureThreshold;

    /**
     * @return The minimum number of consecutive failures for the liveness probe to be considered failed after having been successful. Default value: 3.
     * 
     */
    public Optional<Output<Integer>> livenessProbeFailureThreshold() {
        return Optional.ofNullable(this.livenessProbeFailureThreshold);
    }

    /**
     * The path to which HTTP GET requests are sent when you use HTTP requests to perform liveness probes.
     * 
     */
    @Import(name="livenessProbeHttpGetPath")
    private @Nullable Output<String> livenessProbeHttpGetPath;

    /**
     * @return The path to which HTTP GET requests are sent when you use HTTP requests to perform liveness probes.
     * 
     */
    public Optional<Output<String>> livenessProbeHttpGetPath() {
        return Optional.ofNullable(this.livenessProbeHttpGetPath);
    }

    /**
     * The port to which HTTP GET requests are sent when you use HTTP requests to perform liveness probes.
     * 
     */
    @Import(name="livenessProbeHttpGetPort")
    private @Nullable Output<Integer> livenessProbeHttpGetPort;

    /**
     * @return The port to which HTTP GET requests are sent when you use HTTP requests to perform liveness probes.
     * 
     */
    public Optional<Output<Integer>> livenessProbeHttpGetPort() {
        return Optional.ofNullable(this.livenessProbeHttpGetPort);
    }

    /**
     * The protocol type of HTTP GET requests when you use HTTP requests for liveness probes.Valid values:HTTP and HTTPS.
     * 
     */
    @Import(name="livenessProbeHttpGetScheme")
    private @Nullable Output<String> livenessProbeHttpGetScheme;

    /**
     * @return The protocol type of HTTP GET requests when you use HTTP requests for liveness probes.Valid values:HTTP and HTTPS.
     * 
     */
    public Optional<Output<String>> livenessProbeHttpGetScheme() {
        return Optional.ofNullable(this.livenessProbeHttpGetScheme);
    }

    /**
     * The number of seconds after container has started before liveness probes are initiated.
     * 
     */
    @Import(name="livenessProbeInitialDelaySeconds")
    private @Nullable Output<Integer> livenessProbeInitialDelaySeconds;

    /**
     * @return The number of seconds after container has started before liveness probes are initiated.
     * 
     */
    public Optional<Output<Integer>> livenessProbeInitialDelaySeconds() {
        return Optional.ofNullable(this.livenessProbeInitialDelaySeconds);
    }

    /**
     * The interval at which the liveness probe is performed. Unit: seconds. Default value: 10. Minimum value: 1.
     * 
     */
    @Import(name="livenessProbePeriodSeconds")
    private @Nullable Output<Integer> livenessProbePeriodSeconds;

    /**
     * @return The interval at which the liveness probe is performed. Unit: seconds. Default value: 10. Minimum value: 1.
     * 
     */
    public Optional<Output<Integer>> livenessProbePeriodSeconds() {
        return Optional.ofNullable(this.livenessProbePeriodSeconds);
    }

    /**
     * The minimum number of consecutive successes for the liveness probe to be considered successful after having failed. Default value: 1. Set the value to 1.
     * 
     */
    @Import(name="livenessProbeSuccessThreshold")
    private @Nullable Output<Integer> livenessProbeSuccessThreshold;

    /**
     * @return The minimum number of consecutive successes for the liveness probe to be considered successful after having failed. Default value: 1. Set the value to 1.
     * 
     */
    public Optional<Output<Integer>> livenessProbeSuccessThreshold() {
        return Optional.ofNullable(this.livenessProbeSuccessThreshold);
    }

    /**
     * The port detected by TCP sockets when you use TCP sockets to perform liveness probes.
     * 
     */
    @Import(name="livenessProbeTcpSocketPort")
    private @Nullable Output<Integer> livenessProbeTcpSocketPort;

    /**
     * @return The port detected by TCP sockets when you use TCP sockets to perform liveness probes.
     * 
     */
    public Optional<Output<Integer>> livenessProbeTcpSocketPort() {
        return Optional.ofNullable(this.livenessProbeTcpSocketPort);
    }

    /**
     * The timeout period for the liveness probe. Unit: seconds. Default value: 1. Minimum value: 1.
     * 
     */
    @Import(name="livenessProbeTimeoutSeconds")
    private @Nullable Output<Integer> livenessProbeTimeoutSeconds;

    /**
     * @return The timeout period for the liveness probe. Unit: seconds. Default value: 1. Minimum value: 1.
     * 
     */
    public Optional<Output<Integer>> livenessProbeTimeoutSeconds() {
        return Optional.ofNullable(this.livenessProbeTimeoutSeconds);
    }

    /**
     * The amount of memory resources allocated to the container.
     * 
     */
    @Import(name="memory")
    private @Nullable Output<Double> memory;

    /**
     * @return The amount of memory resources allocated to the container.
     * 
     */
    public Optional<Output<Double>> memory() {
        return Optional.ofNullable(this.memory);
    }

    /**
     * The name of the mounted volume.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the mounted volume.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The structure of port. See `ports` below for details.
     * 
     */
    @Import(name="ports")
    private @Nullable Output<List<EciScalingConfigurationContainerPortArgs>> ports;

    /**
     * @return The structure of port. See `ports` below for details.
     * 
     */
    public Optional<Output<List<EciScalingConfigurationContainerPortArgs>>> ports() {
        return Optional.ofNullable(this.ports);
    }

    /**
     * Commands that you want to run in containers when you use the CLI to perform readiness probes.
     * 
     */
    @Import(name="readinessProbeExecCommands")
    private @Nullable Output<List<String>> readinessProbeExecCommands;

    /**
     * @return Commands that you want to run in containers when you use the CLI to perform readiness probes.
     * 
     */
    public Optional<Output<List<String>>> readinessProbeExecCommands() {
        return Optional.ofNullable(this.readinessProbeExecCommands);
    }

    /**
     * The minimum number of consecutive failures for the readiness probe to be considered failed after having been successful. Default value: 3.
     * 
     */
    @Import(name="readinessProbeFailureThreshold")
    private @Nullable Output<Integer> readinessProbeFailureThreshold;

    /**
     * @return The minimum number of consecutive failures for the readiness probe to be considered failed after having been successful. Default value: 3.
     * 
     */
    public Optional<Output<Integer>> readinessProbeFailureThreshold() {
        return Optional.ofNullable(this.readinessProbeFailureThreshold);
    }

    /**
     * The path to which HTTP GET requests are sent when you use HTTP requests to perform readiness probes.
     * 
     */
    @Import(name="readinessProbeHttpGetPath")
    private @Nullable Output<String> readinessProbeHttpGetPath;

    /**
     * @return The path to which HTTP GET requests are sent when you use HTTP requests to perform readiness probes.
     * 
     */
    public Optional<Output<String>> readinessProbeHttpGetPath() {
        return Optional.ofNullable(this.readinessProbeHttpGetPath);
    }

    /**
     * The port to which HTTP GET requests are sent when you use HTTP requests to perform readiness probes.
     * 
     */
    @Import(name="readinessProbeHttpGetPort")
    private @Nullable Output<Integer> readinessProbeHttpGetPort;

    /**
     * @return The port to which HTTP GET requests are sent when you use HTTP requests to perform readiness probes.
     * 
     */
    public Optional<Output<Integer>> readinessProbeHttpGetPort() {
        return Optional.ofNullable(this.readinessProbeHttpGetPort);
    }

    /**
     * The protocol type of HTTP GET requests when you use HTTP requests for readiness probes. Valid values: HTTP and HTTPS.
     * 
     */
    @Import(name="readinessProbeHttpGetScheme")
    private @Nullable Output<String> readinessProbeHttpGetScheme;

    /**
     * @return The protocol type of HTTP GET requests when you use HTTP requests for readiness probes. Valid values: HTTP and HTTPS.
     * 
     */
    public Optional<Output<String>> readinessProbeHttpGetScheme() {
        return Optional.ofNullable(this.readinessProbeHttpGetScheme);
    }

    /**
     * The number of seconds after container N has started before readiness probes are initiated.
     * 
     */
    @Import(name="readinessProbeInitialDelaySeconds")
    private @Nullable Output<Integer> readinessProbeInitialDelaySeconds;

    /**
     * @return The number of seconds after container N has started before readiness probes are initiated.
     * 
     */
    public Optional<Output<Integer>> readinessProbeInitialDelaySeconds() {
        return Optional.ofNullable(this.readinessProbeInitialDelaySeconds);
    }

    /**
     * The interval at which the readiness probe is performed. Unit: seconds. Default value: 10. Minimum value: 1.
     * 
     */
    @Import(name="readinessProbePeriodSeconds")
    private @Nullable Output<Integer> readinessProbePeriodSeconds;

    /**
     * @return The interval at which the readiness probe is performed. Unit: seconds. Default value: 10. Minimum value: 1.
     * 
     */
    public Optional<Output<Integer>> readinessProbePeriodSeconds() {
        return Optional.ofNullable(this.readinessProbePeriodSeconds);
    }

    /**
     * The minimum number of consecutive successes for the readiness probe to be considered successful after having failed. Default value: 1. Set the value to 1.
     * 
     */
    @Import(name="readinessProbeSuccessThreshold")
    private @Nullable Output<Integer> readinessProbeSuccessThreshold;

    /**
     * @return The minimum number of consecutive successes for the readiness probe to be considered successful after having failed. Default value: 1. Set the value to 1.
     * 
     */
    public Optional<Output<Integer>> readinessProbeSuccessThreshold() {
        return Optional.ofNullable(this.readinessProbeSuccessThreshold);
    }

    /**
     * The port detected by Transmission Control Protocol (TCP) sockets when you use TCP sockets to perform readiness probes.
     * 
     */
    @Import(name="readinessProbeTcpSocketPort")
    private @Nullable Output<Integer> readinessProbeTcpSocketPort;

    /**
     * @return The port detected by Transmission Control Protocol (TCP) sockets when you use TCP sockets to perform readiness probes.
     * 
     */
    public Optional<Output<Integer>> readinessProbeTcpSocketPort() {
        return Optional.ofNullable(this.readinessProbeTcpSocketPort);
    }

    /**
     * The timeout period for the readiness probe. Unit: seconds. Default value: 1. Minimum value: 1.
     * 
     */
    @Import(name="readinessProbeTimeoutSeconds")
    private @Nullable Output<Integer> readinessProbeTimeoutSeconds;

    /**
     * @return The timeout period for the readiness probe. Unit: seconds. Default value: 1. Minimum value: 1.
     * 
     */
    public Optional<Output<Integer>> readinessProbeTimeoutSeconds() {
        return Optional.ofNullable(this.readinessProbeTimeoutSeconds);
    }

    /**
     * Grant certain permissions to processes within container. Optional values:
     * - NET_ADMIN: Allow network management tasks to be performed.
     * - NET_RAW: Allow raw sockets.
     * 
     */
    @Import(name="securityContextCapabilityAdds")
    private @Nullable Output<List<String>> securityContextCapabilityAdds;

    /**
     * @return Grant certain permissions to processes within container. Optional values:
     * - NET_ADMIN: Allow network management tasks to be performed.
     * - NET_RAW: Allow raw sockets.
     * 
     */
    public Optional<Output<List<String>>> securityContextCapabilityAdds() {
        return Optional.ofNullable(this.securityContextCapabilityAdds);
    }

    /**
     * Mounts the container&#39;s root filesystem as read-only.
     * 
     */
    @Import(name="securityContextReadOnlyRootFileSystem")
    private @Nullable Output<Boolean> securityContextReadOnlyRootFileSystem;

    /**
     * @return Mounts the container&#39;s root filesystem as read-only.
     * 
     */
    public Optional<Output<Boolean>> securityContextReadOnlyRootFileSystem() {
        return Optional.ofNullable(this.securityContextReadOnlyRootFileSystem);
    }

    /**
     * Specifies user ID  under which all processes run.
     * 
     */
    @Import(name="securityContextRunAsUser")
    private @Nullable Output<Integer> securityContextRunAsUser;

    /**
     * @return Specifies user ID  under which all processes run.
     * 
     */
    public Optional<Output<Integer>> securityContextRunAsUser() {
        return Optional.ofNullable(this.securityContextRunAsUser);
    }

    /**
     * The structure of volumeMounts.
     * See `volume_mounts` below for details.
     * 
     */
    @Import(name="volumeMounts")
    private @Nullable Output<List<EciScalingConfigurationContainerVolumeMountArgs>> volumeMounts;

    /**
     * @return The structure of volumeMounts.
     * See `volume_mounts` below for details.
     * 
     */
    public Optional<Output<List<EciScalingConfigurationContainerVolumeMountArgs>>> volumeMounts() {
        return Optional.ofNullable(this.volumeMounts);
    }

    /**
     * The working directory of the container.
     * 
     */
    @Import(name="workingDir")
    private @Nullable Output<String> workingDir;

    /**
     * @return The working directory of the container.
     * 
     */
    public Optional<Output<String>> workingDir() {
        return Optional.ofNullable(this.workingDir);
    }

    private EciScalingConfigurationContainerArgs() {}

    private EciScalingConfigurationContainerArgs(EciScalingConfigurationContainerArgs $) {
        this.args = $.args;
        this.commands = $.commands;
        this.cpu = $.cpu;
        this.environmentVars = $.environmentVars;
        this.gpu = $.gpu;
        this.image = $.image;
        this.imagePullPolicy = $.imagePullPolicy;
        this.lifecyclePreStopHandlerExecs = $.lifecyclePreStopHandlerExecs;
        this.livenessProbeExecCommands = $.livenessProbeExecCommands;
        this.livenessProbeFailureThreshold = $.livenessProbeFailureThreshold;
        this.livenessProbeHttpGetPath = $.livenessProbeHttpGetPath;
        this.livenessProbeHttpGetPort = $.livenessProbeHttpGetPort;
        this.livenessProbeHttpGetScheme = $.livenessProbeHttpGetScheme;
        this.livenessProbeInitialDelaySeconds = $.livenessProbeInitialDelaySeconds;
        this.livenessProbePeriodSeconds = $.livenessProbePeriodSeconds;
        this.livenessProbeSuccessThreshold = $.livenessProbeSuccessThreshold;
        this.livenessProbeTcpSocketPort = $.livenessProbeTcpSocketPort;
        this.livenessProbeTimeoutSeconds = $.livenessProbeTimeoutSeconds;
        this.memory = $.memory;
        this.name = $.name;
        this.ports = $.ports;
        this.readinessProbeExecCommands = $.readinessProbeExecCommands;
        this.readinessProbeFailureThreshold = $.readinessProbeFailureThreshold;
        this.readinessProbeHttpGetPath = $.readinessProbeHttpGetPath;
        this.readinessProbeHttpGetPort = $.readinessProbeHttpGetPort;
        this.readinessProbeHttpGetScheme = $.readinessProbeHttpGetScheme;
        this.readinessProbeInitialDelaySeconds = $.readinessProbeInitialDelaySeconds;
        this.readinessProbePeriodSeconds = $.readinessProbePeriodSeconds;
        this.readinessProbeSuccessThreshold = $.readinessProbeSuccessThreshold;
        this.readinessProbeTcpSocketPort = $.readinessProbeTcpSocketPort;
        this.readinessProbeTimeoutSeconds = $.readinessProbeTimeoutSeconds;
        this.securityContextCapabilityAdds = $.securityContextCapabilityAdds;
        this.securityContextReadOnlyRootFileSystem = $.securityContextReadOnlyRootFileSystem;
        this.securityContextRunAsUser = $.securityContextRunAsUser;
        this.volumeMounts = $.volumeMounts;
        this.workingDir = $.workingDir;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(EciScalingConfigurationContainerArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private EciScalingConfigurationContainerArgs $;

        public Builder() {
            $ = new EciScalingConfigurationContainerArgs();
        }

        public Builder(EciScalingConfigurationContainerArgs defaults) {
            $ = new EciScalingConfigurationContainerArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param args The arguments passed to the commands.
         * 
         * @return builder
         * 
         */
        public Builder args(@Nullable Output<List<String>> args) {
            $.args = args;
            return this;
        }

        /**
         * @param args The arguments passed to the commands.
         * 
         * @return builder
         * 
         */
        public Builder args(List<String> args) {
            return args(Output.of(args));
        }

        /**
         * @param args The arguments passed to the commands.
         * 
         * @return builder
         * 
         */
        public Builder args(String... args) {
            return args(List.of(args));
        }

        /**
         * @param commands The commands run by the init container.
         * 
         * @return builder
         * 
         */
        public Builder commands(@Nullable Output<List<String>> commands) {
            $.commands = commands;
            return this;
        }

        /**
         * @param commands The commands run by the init container.
         * 
         * @return builder
         * 
         */
        public Builder commands(List<String> commands) {
            return commands(Output.of(commands));
        }

        /**
         * @param commands The commands run by the init container.
         * 
         * @return builder
         * 
         */
        public Builder commands(String... commands) {
            return commands(List.of(commands));
        }

        /**
         * @param cpu The amount of CPU resources allocated to the container.
         * 
         * @return builder
         * 
         */
        public Builder cpu(@Nullable Output<Double> cpu) {
            $.cpu = cpu;
            return this;
        }

        /**
         * @param cpu The amount of CPU resources allocated to the container.
         * 
         * @return builder
         * 
         */
        public Builder cpu(Double cpu) {
            return cpu(Output.of(cpu));
        }

        /**
         * @param environmentVars The structure of environmentVars.
         * See `environment_vars` below for details.
         * 
         * @return builder
         * 
         */
        public Builder environmentVars(@Nullable Output<List<EciScalingConfigurationContainerEnvironmentVarArgs>> environmentVars) {
            $.environmentVars = environmentVars;
            return this;
        }

        /**
         * @param environmentVars The structure of environmentVars.
         * See `environment_vars` below for details.
         * 
         * @return builder
         * 
         */
        public Builder environmentVars(List<EciScalingConfigurationContainerEnvironmentVarArgs> environmentVars) {
            return environmentVars(Output.of(environmentVars));
        }

        /**
         * @param environmentVars The structure of environmentVars.
         * See `environment_vars` below for details.
         * 
         * @return builder
         * 
         */
        public Builder environmentVars(EciScalingConfigurationContainerEnvironmentVarArgs... environmentVars) {
            return environmentVars(List.of(environmentVars));
        }

        /**
         * @param gpu The number GPUs.
         * 
         * @return builder
         * 
         */
        public Builder gpu(@Nullable Output<Integer> gpu) {
            $.gpu = gpu;
            return this;
        }

        /**
         * @param gpu The number GPUs.
         * 
         * @return builder
         * 
         */
        public Builder gpu(Integer gpu) {
            return gpu(Output.of(gpu));
        }

        /**
         * @param image The image of the container.
         * 
         * @return builder
         * 
         */
        public Builder image(@Nullable Output<String> image) {
            $.image = image;
            return this;
        }

        /**
         * @param image The image of the container.
         * 
         * @return builder
         * 
         */
        public Builder image(String image) {
            return image(Output.of(image));
        }

        /**
         * @param imagePullPolicy The restart policy of the image.
         * 
         * @return builder
         * 
         */
        public Builder imagePullPolicy(@Nullable Output<String> imagePullPolicy) {
            $.imagePullPolicy = imagePullPolicy;
            return this;
        }

        /**
         * @param imagePullPolicy The restart policy of the image.
         * 
         * @return builder
         * 
         */
        public Builder imagePullPolicy(String imagePullPolicy) {
            return imagePullPolicy(Output.of(imagePullPolicy));
        }

        /**
         * @param lifecyclePreStopHandlerExecs The commands to be executed in containers when you use the CLI to specify the preStop callback function.
         * 
         * @return builder
         * 
         */
        public Builder lifecyclePreStopHandlerExecs(@Nullable Output<List<String>> lifecyclePreStopHandlerExecs) {
            $.lifecyclePreStopHandlerExecs = lifecyclePreStopHandlerExecs;
            return this;
        }

        /**
         * @param lifecyclePreStopHandlerExecs The commands to be executed in containers when you use the CLI to specify the preStop callback function.
         * 
         * @return builder
         * 
         */
        public Builder lifecyclePreStopHandlerExecs(List<String> lifecyclePreStopHandlerExecs) {
            return lifecyclePreStopHandlerExecs(Output.of(lifecyclePreStopHandlerExecs));
        }

        /**
         * @param lifecyclePreStopHandlerExecs The commands to be executed in containers when you use the CLI to specify the preStop callback function.
         * 
         * @return builder
         * 
         */
        public Builder lifecyclePreStopHandlerExecs(String... lifecyclePreStopHandlerExecs) {
            return lifecyclePreStopHandlerExecs(List.of(lifecyclePreStopHandlerExecs));
        }

        /**
         * @param livenessProbeExecCommands Commands that you want to run in containers when you use the CLI to perform liveness probes.
         * 
         * @return builder
         * 
         */
        public Builder livenessProbeExecCommands(@Nullable Output<List<String>> livenessProbeExecCommands) {
            $.livenessProbeExecCommands = livenessProbeExecCommands;
            return this;
        }

        /**
         * @param livenessProbeExecCommands Commands that you want to run in containers when you use the CLI to perform liveness probes.
         * 
         * @return builder
         * 
         */
        public Builder livenessProbeExecCommands(List<String> livenessProbeExecCommands) {
            return livenessProbeExecCommands(Output.of(livenessProbeExecCommands));
        }

        /**
         * @param livenessProbeExecCommands Commands that you want to run in containers when you use the CLI to perform liveness probes.
         * 
         * @return builder
         * 
         */
        public Builder livenessProbeExecCommands(String... livenessProbeExecCommands) {
            return livenessProbeExecCommands(List.of(livenessProbeExecCommands));
        }

        /**
         * @param livenessProbeFailureThreshold The minimum number of consecutive failures for the liveness probe to be considered failed after having been successful. Default value: 3.
         * 
         * @return builder
         * 
         */
        public Builder livenessProbeFailureThreshold(@Nullable Output<Integer> livenessProbeFailureThreshold) {
            $.livenessProbeFailureThreshold = livenessProbeFailureThreshold;
            return this;
        }

        /**
         * @param livenessProbeFailureThreshold The minimum number of consecutive failures for the liveness probe to be considered failed after having been successful. Default value: 3.
         * 
         * @return builder
         * 
         */
        public Builder livenessProbeFailureThreshold(Integer livenessProbeFailureThreshold) {
            return livenessProbeFailureThreshold(Output.of(livenessProbeFailureThreshold));
        }

        /**
         * @param livenessProbeHttpGetPath The path to which HTTP GET requests are sent when you use HTTP requests to perform liveness probes.
         * 
         * @return builder
         * 
         */
        public Builder livenessProbeHttpGetPath(@Nullable Output<String> livenessProbeHttpGetPath) {
            $.livenessProbeHttpGetPath = livenessProbeHttpGetPath;
            return this;
        }

        /**
         * @param livenessProbeHttpGetPath The path to which HTTP GET requests are sent when you use HTTP requests to perform liveness probes.
         * 
         * @return builder
         * 
         */
        public Builder livenessProbeHttpGetPath(String livenessProbeHttpGetPath) {
            return livenessProbeHttpGetPath(Output.of(livenessProbeHttpGetPath));
        }

        /**
         * @param livenessProbeHttpGetPort The port to which HTTP GET requests are sent when you use HTTP requests to perform liveness probes.
         * 
         * @return builder
         * 
         */
        public Builder livenessProbeHttpGetPort(@Nullable Output<Integer> livenessProbeHttpGetPort) {
            $.livenessProbeHttpGetPort = livenessProbeHttpGetPort;
            return this;
        }

        /**
         * @param livenessProbeHttpGetPort The port to which HTTP GET requests are sent when you use HTTP requests to perform liveness probes.
         * 
         * @return builder
         * 
         */
        public Builder livenessProbeHttpGetPort(Integer livenessProbeHttpGetPort) {
            return livenessProbeHttpGetPort(Output.of(livenessProbeHttpGetPort));
        }

        /**
         * @param livenessProbeHttpGetScheme The protocol type of HTTP GET requests when you use HTTP requests for liveness probes.Valid values:HTTP and HTTPS.
         * 
         * @return builder
         * 
         */
        public Builder livenessProbeHttpGetScheme(@Nullable Output<String> livenessProbeHttpGetScheme) {
            $.livenessProbeHttpGetScheme = livenessProbeHttpGetScheme;
            return this;
        }

        /**
         * @param livenessProbeHttpGetScheme The protocol type of HTTP GET requests when you use HTTP requests for liveness probes.Valid values:HTTP and HTTPS.
         * 
         * @return builder
         * 
         */
        public Builder livenessProbeHttpGetScheme(String livenessProbeHttpGetScheme) {
            return livenessProbeHttpGetScheme(Output.of(livenessProbeHttpGetScheme));
        }

        /**
         * @param livenessProbeInitialDelaySeconds The number of seconds after container has started before liveness probes are initiated.
         * 
         * @return builder
         * 
         */
        public Builder livenessProbeInitialDelaySeconds(@Nullable Output<Integer> livenessProbeInitialDelaySeconds) {
            $.livenessProbeInitialDelaySeconds = livenessProbeInitialDelaySeconds;
            return this;
        }

        /**
         * @param livenessProbeInitialDelaySeconds The number of seconds after container has started before liveness probes are initiated.
         * 
         * @return builder
         * 
         */
        public Builder livenessProbeInitialDelaySeconds(Integer livenessProbeInitialDelaySeconds) {
            return livenessProbeInitialDelaySeconds(Output.of(livenessProbeInitialDelaySeconds));
        }

        /**
         * @param livenessProbePeriodSeconds The interval at which the liveness probe is performed. Unit: seconds. Default value: 10. Minimum value: 1.
         * 
         * @return builder
         * 
         */
        public Builder livenessProbePeriodSeconds(@Nullable Output<Integer> livenessProbePeriodSeconds) {
            $.livenessProbePeriodSeconds = livenessProbePeriodSeconds;
            return this;
        }

        /**
         * @param livenessProbePeriodSeconds The interval at which the liveness probe is performed. Unit: seconds. Default value: 10. Minimum value: 1.
         * 
         * @return builder
         * 
         */
        public Builder livenessProbePeriodSeconds(Integer livenessProbePeriodSeconds) {
            return livenessProbePeriodSeconds(Output.of(livenessProbePeriodSeconds));
        }

        /**
         * @param livenessProbeSuccessThreshold The minimum number of consecutive successes for the liveness probe to be considered successful after having failed. Default value: 1. Set the value to 1.
         * 
         * @return builder
         * 
         */
        public Builder livenessProbeSuccessThreshold(@Nullable Output<Integer> livenessProbeSuccessThreshold) {
            $.livenessProbeSuccessThreshold = livenessProbeSuccessThreshold;
            return this;
        }

        /**
         * @param livenessProbeSuccessThreshold The minimum number of consecutive successes for the liveness probe to be considered successful after having failed. Default value: 1. Set the value to 1.
         * 
         * @return builder
         * 
         */
        public Builder livenessProbeSuccessThreshold(Integer livenessProbeSuccessThreshold) {
            return livenessProbeSuccessThreshold(Output.of(livenessProbeSuccessThreshold));
        }

        /**
         * @param livenessProbeTcpSocketPort The port detected by TCP sockets when you use TCP sockets to perform liveness probes.
         * 
         * @return builder
         * 
         */
        public Builder livenessProbeTcpSocketPort(@Nullable Output<Integer> livenessProbeTcpSocketPort) {
            $.livenessProbeTcpSocketPort = livenessProbeTcpSocketPort;
            return this;
        }

        /**
         * @param livenessProbeTcpSocketPort The port detected by TCP sockets when you use TCP sockets to perform liveness probes.
         * 
         * @return builder
         * 
         */
        public Builder livenessProbeTcpSocketPort(Integer livenessProbeTcpSocketPort) {
            return livenessProbeTcpSocketPort(Output.of(livenessProbeTcpSocketPort));
        }

        /**
         * @param livenessProbeTimeoutSeconds The timeout period for the liveness probe. Unit: seconds. Default value: 1. Minimum value: 1.
         * 
         * @return builder
         * 
         */
        public Builder livenessProbeTimeoutSeconds(@Nullable Output<Integer> livenessProbeTimeoutSeconds) {
            $.livenessProbeTimeoutSeconds = livenessProbeTimeoutSeconds;
            return this;
        }

        /**
         * @param livenessProbeTimeoutSeconds The timeout period for the liveness probe. Unit: seconds. Default value: 1. Minimum value: 1.
         * 
         * @return builder
         * 
         */
        public Builder livenessProbeTimeoutSeconds(Integer livenessProbeTimeoutSeconds) {
            return livenessProbeTimeoutSeconds(Output.of(livenessProbeTimeoutSeconds));
        }

        /**
         * @param memory The amount of memory resources allocated to the container.
         * 
         * @return builder
         * 
         */
        public Builder memory(@Nullable Output<Double> memory) {
            $.memory = memory;
            return this;
        }

        /**
         * @param memory The amount of memory resources allocated to the container.
         * 
         * @return builder
         * 
         */
        public Builder memory(Double memory) {
            return memory(Output.of(memory));
        }

        /**
         * @param name The name of the mounted volume.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the mounted volume.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param ports The structure of port. See `ports` below for details.
         * 
         * @return builder
         * 
         */
        public Builder ports(@Nullable Output<List<EciScalingConfigurationContainerPortArgs>> ports) {
            $.ports = ports;
            return this;
        }

        /**
         * @param ports The structure of port. See `ports` below for details.
         * 
         * @return builder
         * 
         */
        public Builder ports(List<EciScalingConfigurationContainerPortArgs> ports) {
            return ports(Output.of(ports));
        }

        /**
         * @param ports The structure of port. See `ports` below for details.
         * 
         * @return builder
         * 
         */
        public Builder ports(EciScalingConfigurationContainerPortArgs... ports) {
            return ports(List.of(ports));
        }

        /**
         * @param readinessProbeExecCommands Commands that you want to run in containers when you use the CLI to perform readiness probes.
         * 
         * @return builder
         * 
         */
        public Builder readinessProbeExecCommands(@Nullable Output<List<String>> readinessProbeExecCommands) {
            $.readinessProbeExecCommands = readinessProbeExecCommands;
            return this;
        }

        /**
         * @param readinessProbeExecCommands Commands that you want to run in containers when you use the CLI to perform readiness probes.
         * 
         * @return builder
         * 
         */
        public Builder readinessProbeExecCommands(List<String> readinessProbeExecCommands) {
            return readinessProbeExecCommands(Output.of(readinessProbeExecCommands));
        }

        /**
         * @param readinessProbeExecCommands Commands that you want to run in containers when you use the CLI to perform readiness probes.
         * 
         * @return builder
         * 
         */
        public Builder readinessProbeExecCommands(String... readinessProbeExecCommands) {
            return readinessProbeExecCommands(List.of(readinessProbeExecCommands));
        }

        /**
         * @param readinessProbeFailureThreshold The minimum number of consecutive failures for the readiness probe to be considered failed after having been successful. Default value: 3.
         * 
         * @return builder
         * 
         */
        public Builder readinessProbeFailureThreshold(@Nullable Output<Integer> readinessProbeFailureThreshold) {
            $.readinessProbeFailureThreshold = readinessProbeFailureThreshold;
            return this;
        }

        /**
         * @param readinessProbeFailureThreshold The minimum number of consecutive failures for the readiness probe to be considered failed after having been successful. Default value: 3.
         * 
         * @return builder
         * 
         */
        public Builder readinessProbeFailureThreshold(Integer readinessProbeFailureThreshold) {
            return readinessProbeFailureThreshold(Output.of(readinessProbeFailureThreshold));
        }

        /**
         * @param readinessProbeHttpGetPath The path to which HTTP GET requests are sent when you use HTTP requests to perform readiness probes.
         * 
         * @return builder
         * 
         */
        public Builder readinessProbeHttpGetPath(@Nullable Output<String> readinessProbeHttpGetPath) {
            $.readinessProbeHttpGetPath = readinessProbeHttpGetPath;
            return this;
        }

        /**
         * @param readinessProbeHttpGetPath The path to which HTTP GET requests are sent when you use HTTP requests to perform readiness probes.
         * 
         * @return builder
         * 
         */
        public Builder readinessProbeHttpGetPath(String readinessProbeHttpGetPath) {
            return readinessProbeHttpGetPath(Output.of(readinessProbeHttpGetPath));
        }

        /**
         * @param readinessProbeHttpGetPort The port to which HTTP GET requests are sent when you use HTTP requests to perform readiness probes.
         * 
         * @return builder
         * 
         */
        public Builder readinessProbeHttpGetPort(@Nullable Output<Integer> readinessProbeHttpGetPort) {
            $.readinessProbeHttpGetPort = readinessProbeHttpGetPort;
            return this;
        }

        /**
         * @param readinessProbeHttpGetPort The port to which HTTP GET requests are sent when you use HTTP requests to perform readiness probes.
         * 
         * @return builder
         * 
         */
        public Builder readinessProbeHttpGetPort(Integer readinessProbeHttpGetPort) {
            return readinessProbeHttpGetPort(Output.of(readinessProbeHttpGetPort));
        }

        /**
         * @param readinessProbeHttpGetScheme The protocol type of HTTP GET requests when you use HTTP requests for readiness probes. Valid values: HTTP and HTTPS.
         * 
         * @return builder
         * 
         */
        public Builder readinessProbeHttpGetScheme(@Nullable Output<String> readinessProbeHttpGetScheme) {
            $.readinessProbeHttpGetScheme = readinessProbeHttpGetScheme;
            return this;
        }

        /**
         * @param readinessProbeHttpGetScheme The protocol type of HTTP GET requests when you use HTTP requests for readiness probes. Valid values: HTTP and HTTPS.
         * 
         * @return builder
         * 
         */
        public Builder readinessProbeHttpGetScheme(String readinessProbeHttpGetScheme) {
            return readinessProbeHttpGetScheme(Output.of(readinessProbeHttpGetScheme));
        }

        /**
         * @param readinessProbeInitialDelaySeconds The number of seconds after container N has started before readiness probes are initiated.
         * 
         * @return builder
         * 
         */
        public Builder readinessProbeInitialDelaySeconds(@Nullable Output<Integer> readinessProbeInitialDelaySeconds) {
            $.readinessProbeInitialDelaySeconds = readinessProbeInitialDelaySeconds;
            return this;
        }

        /**
         * @param readinessProbeInitialDelaySeconds The number of seconds after container N has started before readiness probes are initiated.
         * 
         * @return builder
         * 
         */
        public Builder readinessProbeInitialDelaySeconds(Integer readinessProbeInitialDelaySeconds) {
            return readinessProbeInitialDelaySeconds(Output.of(readinessProbeInitialDelaySeconds));
        }

        /**
         * @param readinessProbePeriodSeconds The interval at which the readiness probe is performed. Unit: seconds. Default value: 10. Minimum value: 1.
         * 
         * @return builder
         * 
         */
        public Builder readinessProbePeriodSeconds(@Nullable Output<Integer> readinessProbePeriodSeconds) {
            $.readinessProbePeriodSeconds = readinessProbePeriodSeconds;
            return this;
        }

        /**
         * @param readinessProbePeriodSeconds The interval at which the readiness probe is performed. Unit: seconds. Default value: 10. Minimum value: 1.
         * 
         * @return builder
         * 
         */
        public Builder readinessProbePeriodSeconds(Integer readinessProbePeriodSeconds) {
            return readinessProbePeriodSeconds(Output.of(readinessProbePeriodSeconds));
        }

        /**
         * @param readinessProbeSuccessThreshold The minimum number of consecutive successes for the readiness probe to be considered successful after having failed. Default value: 1. Set the value to 1.
         * 
         * @return builder
         * 
         */
        public Builder readinessProbeSuccessThreshold(@Nullable Output<Integer> readinessProbeSuccessThreshold) {
            $.readinessProbeSuccessThreshold = readinessProbeSuccessThreshold;
            return this;
        }

        /**
         * @param readinessProbeSuccessThreshold The minimum number of consecutive successes for the readiness probe to be considered successful after having failed. Default value: 1. Set the value to 1.
         * 
         * @return builder
         * 
         */
        public Builder readinessProbeSuccessThreshold(Integer readinessProbeSuccessThreshold) {
            return readinessProbeSuccessThreshold(Output.of(readinessProbeSuccessThreshold));
        }

        /**
         * @param readinessProbeTcpSocketPort The port detected by Transmission Control Protocol (TCP) sockets when you use TCP sockets to perform readiness probes.
         * 
         * @return builder
         * 
         */
        public Builder readinessProbeTcpSocketPort(@Nullable Output<Integer> readinessProbeTcpSocketPort) {
            $.readinessProbeTcpSocketPort = readinessProbeTcpSocketPort;
            return this;
        }

        /**
         * @param readinessProbeTcpSocketPort The port detected by Transmission Control Protocol (TCP) sockets when you use TCP sockets to perform readiness probes.
         * 
         * @return builder
         * 
         */
        public Builder readinessProbeTcpSocketPort(Integer readinessProbeTcpSocketPort) {
            return readinessProbeTcpSocketPort(Output.of(readinessProbeTcpSocketPort));
        }

        /**
         * @param readinessProbeTimeoutSeconds The timeout period for the readiness probe. Unit: seconds. Default value: 1. Minimum value: 1.
         * 
         * @return builder
         * 
         */
        public Builder readinessProbeTimeoutSeconds(@Nullable Output<Integer> readinessProbeTimeoutSeconds) {
            $.readinessProbeTimeoutSeconds = readinessProbeTimeoutSeconds;
            return this;
        }

        /**
         * @param readinessProbeTimeoutSeconds The timeout period for the readiness probe. Unit: seconds. Default value: 1. Minimum value: 1.
         * 
         * @return builder
         * 
         */
        public Builder readinessProbeTimeoutSeconds(Integer readinessProbeTimeoutSeconds) {
            return readinessProbeTimeoutSeconds(Output.of(readinessProbeTimeoutSeconds));
        }

        /**
         * @param securityContextCapabilityAdds Grant certain permissions to processes within container. Optional values:
         * - NET_ADMIN: Allow network management tasks to be performed.
         * - NET_RAW: Allow raw sockets.
         * 
         * @return builder
         * 
         */
        public Builder securityContextCapabilityAdds(@Nullable Output<List<String>> securityContextCapabilityAdds) {
            $.securityContextCapabilityAdds = securityContextCapabilityAdds;
            return this;
        }

        /**
         * @param securityContextCapabilityAdds Grant certain permissions to processes within container. Optional values:
         * - NET_ADMIN: Allow network management tasks to be performed.
         * - NET_RAW: Allow raw sockets.
         * 
         * @return builder
         * 
         */
        public Builder securityContextCapabilityAdds(List<String> securityContextCapabilityAdds) {
            return securityContextCapabilityAdds(Output.of(securityContextCapabilityAdds));
        }

        /**
         * @param securityContextCapabilityAdds Grant certain permissions to processes within container. Optional values:
         * - NET_ADMIN: Allow network management tasks to be performed.
         * - NET_RAW: Allow raw sockets.
         * 
         * @return builder
         * 
         */
        public Builder securityContextCapabilityAdds(String... securityContextCapabilityAdds) {
            return securityContextCapabilityAdds(List.of(securityContextCapabilityAdds));
        }

        /**
         * @param securityContextReadOnlyRootFileSystem Mounts the container&#39;s root filesystem as read-only.
         * 
         * @return builder
         * 
         */
        public Builder securityContextReadOnlyRootFileSystem(@Nullable Output<Boolean> securityContextReadOnlyRootFileSystem) {
            $.securityContextReadOnlyRootFileSystem = securityContextReadOnlyRootFileSystem;
            return this;
        }

        /**
         * @param securityContextReadOnlyRootFileSystem Mounts the container&#39;s root filesystem as read-only.
         * 
         * @return builder
         * 
         */
        public Builder securityContextReadOnlyRootFileSystem(Boolean securityContextReadOnlyRootFileSystem) {
            return securityContextReadOnlyRootFileSystem(Output.of(securityContextReadOnlyRootFileSystem));
        }

        /**
         * @param securityContextRunAsUser Specifies user ID  under which all processes run.
         * 
         * @return builder
         * 
         */
        public Builder securityContextRunAsUser(@Nullable Output<Integer> securityContextRunAsUser) {
            $.securityContextRunAsUser = securityContextRunAsUser;
            return this;
        }

        /**
         * @param securityContextRunAsUser Specifies user ID  under which all processes run.
         * 
         * @return builder
         * 
         */
        public Builder securityContextRunAsUser(Integer securityContextRunAsUser) {
            return securityContextRunAsUser(Output.of(securityContextRunAsUser));
        }

        /**
         * @param volumeMounts The structure of volumeMounts.
         * See `volume_mounts` below for details.
         * 
         * @return builder
         * 
         */
        public Builder volumeMounts(@Nullable Output<List<EciScalingConfigurationContainerVolumeMountArgs>> volumeMounts) {
            $.volumeMounts = volumeMounts;
            return this;
        }

        /**
         * @param volumeMounts The structure of volumeMounts.
         * See `volume_mounts` below for details.
         * 
         * @return builder
         * 
         */
        public Builder volumeMounts(List<EciScalingConfigurationContainerVolumeMountArgs> volumeMounts) {
            return volumeMounts(Output.of(volumeMounts));
        }

        /**
         * @param volumeMounts The structure of volumeMounts.
         * See `volume_mounts` below for details.
         * 
         * @return builder
         * 
         */
        public Builder volumeMounts(EciScalingConfigurationContainerVolumeMountArgs... volumeMounts) {
            return volumeMounts(List.of(volumeMounts));
        }

        /**
         * @param workingDir The working directory of the container.
         * 
         * @return builder
         * 
         */
        public Builder workingDir(@Nullable Output<String> workingDir) {
            $.workingDir = workingDir;
            return this;
        }

        /**
         * @param workingDir The working directory of the container.
         * 
         * @return builder
         * 
         */
        public Builder workingDir(String workingDir) {
            return workingDir(Output.of(workingDir));
        }

        public EciScalingConfigurationContainerArgs build() {
            return $;
        }
    }

}
