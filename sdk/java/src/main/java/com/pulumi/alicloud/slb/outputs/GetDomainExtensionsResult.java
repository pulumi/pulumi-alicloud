// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.slb.outputs;

import com.pulumi.alicloud.slb.outputs.GetDomainExtensionsExtension;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetDomainExtensionsResult {
    /**
     * @return A list of SLB domain extension. Each element contains the following attributes:
     * 
     */
    private List<GetDomainExtensionsExtension> extensions;
    private Integer frontendPort;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private List<String> ids;
    private String loadBalancerId;
    private @Nullable String outputFile;

    private GetDomainExtensionsResult() {}
    /**
     * @return A list of SLB domain extension. Each element contains the following attributes:
     * 
     */
    public List<GetDomainExtensionsExtension> extensions() {
        return this.extensions;
    }
    public Integer frontendPort() {
        return this.frontendPort;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public List<String> ids() {
        return this.ids;
    }
    public String loadBalancerId() {
        return this.loadBalancerId;
    }
    public Optional<String> outputFile() {
        return Optional.ofNullable(this.outputFile);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDomainExtensionsResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetDomainExtensionsExtension> extensions;
        private Integer frontendPort;
        private String id;
        private List<String> ids;
        private String loadBalancerId;
        private @Nullable String outputFile;
        public Builder() {}
        public Builder(GetDomainExtensionsResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.extensions = defaults.extensions;
    	      this.frontendPort = defaults.frontendPort;
    	      this.id = defaults.id;
    	      this.ids = defaults.ids;
    	      this.loadBalancerId = defaults.loadBalancerId;
    	      this.outputFile = defaults.outputFile;
        }

        @CustomType.Setter
        public Builder extensions(List<GetDomainExtensionsExtension> extensions) {
            if (extensions == null) {
              throw new MissingRequiredPropertyException("GetDomainExtensionsResult", "extensions");
            }
            this.extensions = extensions;
            return this;
        }
        public Builder extensions(GetDomainExtensionsExtension... extensions) {
            return extensions(List.of(extensions));
        }
        @CustomType.Setter
        public Builder frontendPort(Integer frontendPort) {
            if (frontendPort == null) {
              throw new MissingRequiredPropertyException("GetDomainExtensionsResult", "frontendPort");
            }
            this.frontendPort = frontendPort;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetDomainExtensionsResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder ids(List<String> ids) {
            if (ids == null) {
              throw new MissingRequiredPropertyException("GetDomainExtensionsResult", "ids");
            }
            this.ids = ids;
            return this;
        }
        public Builder ids(String... ids) {
            return ids(List.of(ids));
        }
        @CustomType.Setter
        public Builder loadBalancerId(String loadBalancerId) {
            if (loadBalancerId == null) {
              throw new MissingRequiredPropertyException("GetDomainExtensionsResult", "loadBalancerId");
            }
            this.loadBalancerId = loadBalancerId;
            return this;
        }
        @CustomType.Setter
        public Builder outputFile(@Nullable String outputFile) {

            this.outputFile = outputFile;
            return this;
        }
        public GetDomainExtensionsResult build() {
            final var _resultValue = new GetDomainExtensionsResult();
            _resultValue.extensions = extensions;
            _resultValue.frontendPort = frontendPort;
            _resultValue.id = id;
            _resultValue.ids = ids;
            _resultValue.loadBalancerId = loadBalancerId;
            _resultValue.outputFile = outputFile;
            return _resultValue;
        }
    }
}
