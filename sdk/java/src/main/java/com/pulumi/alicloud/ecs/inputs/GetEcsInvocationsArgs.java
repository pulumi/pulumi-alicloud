// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.ecs.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetEcsInvocationsArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetEcsInvocationsArgs Empty = new GetEcsInvocationsArgs();

    /**
     * The execution ID of the command.
     * 
     */
    @Import(name="commandId")
    private @Nullable Output<String> commandId;

    /**
     * @return The execution ID of the command.
     * 
     */
    public Optional<Output<String>> commandId() {
        return Optional.ofNullable(this.commandId);
    }

    /**
     * The encoding mode of the CommandContent and Output response parameters. Valid values: `PlainText`, `Base64`.
     * 
     */
    @Import(name="contentEncoding")
    private @Nullable Output<String> contentEncoding;

    /**
     * @return The encoding mode of the CommandContent and Output response parameters. Valid values: `PlainText`, `Base64`.
     * 
     */
    public Optional<Output<String>> contentEncoding() {
        return Optional.ofNullable(this.contentEncoding);
    }

    /**
     * A list of Invocation IDs.
     * 
     */
    @Import(name="ids")
    private @Nullable Output<List<String>> ids;

    /**
     * @return A list of Invocation IDs.
     * 
     */
    public Optional<Output<List<String>>> ids() {
        return Optional.ofNullable(this.ids);
    }

    /**
     * The overall execution state of the command. The value of this parameter depends on the execution states on all the involved instances. Valid values: `Running`, `Finished`, `Failed`, `PartialFailed`, `Stopped`.
     * 
     */
    @Import(name="invokeStatus")
    private @Nullable Output<String> invokeStatus;

    /**
     * @return The overall execution state of the command. The value of this parameter depends on the execution states on all the involved instances. Valid values: `Running`, `Finished`, `Failed`, `PartialFailed`, `Stopped`.
     * 
     */
    public Optional<Output<String>> invokeStatus() {
        return Optional.ofNullable(this.invokeStatus);
    }

    /**
     * File name where to save data source results (after running `pulumi preview`).
     * 
     */
    @Import(name="outputFile")
    private @Nullable Output<String> outputFile;

    /**
     * @return File name where to save data source results (after running `pulumi preview`).
     * 
     */
    public Optional<Output<String>> outputFile() {
        return Optional.ofNullable(this.outputFile);
    }

    @Import(name="pageNumber")
    private @Nullable Output<Integer> pageNumber;

    public Optional<Output<Integer>> pageNumber() {
        return Optional.ofNullable(this.pageNumber);
    }

    @Import(name="pageSize")
    private @Nullable Output<Integer> pageSize;

    public Optional<Output<Integer>> pageSize() {
        return Optional.ofNullable(this.pageSize);
    }

    private GetEcsInvocationsArgs() {}

    private GetEcsInvocationsArgs(GetEcsInvocationsArgs $) {
        this.commandId = $.commandId;
        this.contentEncoding = $.contentEncoding;
        this.ids = $.ids;
        this.invokeStatus = $.invokeStatus;
        this.outputFile = $.outputFile;
        this.pageNumber = $.pageNumber;
        this.pageSize = $.pageSize;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetEcsInvocationsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetEcsInvocationsArgs $;

        public Builder() {
            $ = new GetEcsInvocationsArgs();
        }

        public Builder(GetEcsInvocationsArgs defaults) {
            $ = new GetEcsInvocationsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param commandId The execution ID of the command.
         * 
         * @return builder
         * 
         */
        public Builder commandId(@Nullable Output<String> commandId) {
            $.commandId = commandId;
            return this;
        }

        /**
         * @param commandId The execution ID of the command.
         * 
         * @return builder
         * 
         */
        public Builder commandId(String commandId) {
            return commandId(Output.of(commandId));
        }

        /**
         * @param contentEncoding The encoding mode of the CommandContent and Output response parameters. Valid values: `PlainText`, `Base64`.
         * 
         * @return builder
         * 
         */
        public Builder contentEncoding(@Nullable Output<String> contentEncoding) {
            $.contentEncoding = contentEncoding;
            return this;
        }

        /**
         * @param contentEncoding The encoding mode of the CommandContent and Output response parameters. Valid values: `PlainText`, `Base64`.
         * 
         * @return builder
         * 
         */
        public Builder contentEncoding(String contentEncoding) {
            return contentEncoding(Output.of(contentEncoding));
        }

        /**
         * @param ids A list of Invocation IDs.
         * 
         * @return builder
         * 
         */
        public Builder ids(@Nullable Output<List<String>> ids) {
            $.ids = ids;
            return this;
        }

        /**
         * @param ids A list of Invocation IDs.
         * 
         * @return builder
         * 
         */
        public Builder ids(List<String> ids) {
            return ids(Output.of(ids));
        }

        /**
         * @param ids A list of Invocation IDs.
         * 
         * @return builder
         * 
         */
        public Builder ids(String... ids) {
            return ids(List.of(ids));
        }

        /**
         * @param invokeStatus The overall execution state of the command. The value of this parameter depends on the execution states on all the involved instances. Valid values: `Running`, `Finished`, `Failed`, `PartialFailed`, `Stopped`.
         * 
         * @return builder
         * 
         */
        public Builder invokeStatus(@Nullable Output<String> invokeStatus) {
            $.invokeStatus = invokeStatus;
            return this;
        }

        /**
         * @param invokeStatus The overall execution state of the command. The value of this parameter depends on the execution states on all the involved instances. Valid values: `Running`, `Finished`, `Failed`, `PartialFailed`, `Stopped`.
         * 
         * @return builder
         * 
         */
        public Builder invokeStatus(String invokeStatus) {
            return invokeStatus(Output.of(invokeStatus));
        }

        /**
         * @param outputFile File name where to save data source results (after running `pulumi preview`).
         * 
         * @return builder
         * 
         */
        public Builder outputFile(@Nullable Output<String> outputFile) {
            $.outputFile = outputFile;
            return this;
        }

        /**
         * @param outputFile File name where to save data source results (after running `pulumi preview`).
         * 
         * @return builder
         * 
         */
        public Builder outputFile(String outputFile) {
            return outputFile(Output.of(outputFile));
        }

        public Builder pageNumber(@Nullable Output<Integer> pageNumber) {
            $.pageNumber = pageNumber;
            return this;
        }

        public Builder pageNumber(Integer pageNumber) {
            return pageNumber(Output.of(pageNumber));
        }

        public Builder pageSize(@Nullable Output<Integer> pageSize) {
            $.pageSize = pageSize;
            return this;
        }

        public Builder pageSize(Integer pageSize) {
            return pageSize(Output.of(pageSize));
        }

        public GetEcsInvocationsArgs build() {
            return $;
        }
    }

}
