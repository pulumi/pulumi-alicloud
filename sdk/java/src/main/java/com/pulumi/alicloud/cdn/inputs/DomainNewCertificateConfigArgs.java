// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.cdn.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DomainNewCertificateConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final DomainNewCertificateConfigArgs Empty = new DomainNewCertificateConfigArgs();

    /**
     * The ID of the certificate. It takes effect only when CertType = cas.
     * 
     */
    @Import(name="certId")
    private @Nullable Output<String> certId;

    /**
     * @return The ID of the certificate. It takes effect only when CertType = cas.
     * 
     */
    public Optional<Output<String>> certId() {
        return Optional.ofNullable(this.certId);
    }

    /**
     * Certificate name, only flyer names are supported.
     * 
     */
    @Import(name="certName")
    private @Nullable Output<String> certName;

    /**
     * @return Certificate name, only flyer names are supported.
     * 
     */
    public Optional<Output<String>> certName() {
        return Optional.ofNullable(this.certName);
    }

    /**
     * The certificate region, which takes effect only when CertType = cas, supports cn-hangzhou (domestic) and ap-southeast-1 (International), and is cn-hangzhou by default.
     * 
     */
    @Import(name="certRegion")
    private @Nullable Output<String> certRegion;

    /**
     * @return The certificate region, which takes effect only when CertType = cas, supports cn-hangzhou (domestic) and ap-southeast-1 (International), and is cn-hangzhou by default.
     * 
     */
    public Optional<Output<String>> certRegion() {
        return Optional.ofNullable(this.certRegion);
    }

    /**
     * Certificate type. Value:
     * - **upload**: upload certificate.
     * - **cas**: Cloud Shield certificate.
     * - **free**: free certificate.
     * &gt; If the certificate type is **cas**, **PrivateKey** does not need to pass parameters.
     * 
     */
    @Import(name="certType")
    private @Nullable Output<String> certType;

    /**
     * @return Certificate type. Value:
     * - **upload**: upload certificate.
     * - **cas**: Cloud Shield certificate.
     * - **free**: free certificate.
     * &gt; If the certificate type is **cas**, **PrivateKey** does not need to pass parameters.
     * 
     */
    public Optional<Output<String>> certType() {
        return Optional.ofNullable(this.certType);
    }

    /**
     * The content of the private key. If the certificate is not enabled, you do not need to enter the content of the private key. To configure the certificate, enter the content of the private key.
     * 
     */
    @Import(name="privateKey")
    private @Nullable Output<String> privateKey;

    /**
     * @return The content of the private key. If the certificate is not enabled, you do not need to enter the content of the private key. To configure the certificate, enter the content of the private key.
     * 
     */
    public Optional<Output<String>> privateKey() {
        return Optional.ofNullable(this.privateKey);
    }

    /**
     * The content of the security certificate. If the certificate is not enabled, you do not need to enter the content of the security certificate. Please enter the content of the certificate to configure the certificate.
     * 
     */
    @Import(name="serverCertificate")
    private @Nullable Output<String> serverCertificate;

    /**
     * @return The content of the security certificate. If the certificate is not enabled, you do not need to enter the content of the security certificate. Please enter the content of the certificate to configure the certificate.
     * 
     */
    public Optional<Output<String>> serverCertificate() {
        return Optional.ofNullable(this.serverCertificate);
    }

    /**
     * Whether the HTTPS certificate is enabled. Value:
     * - **on**(default): enabled.
     * - **off** : not enabled.
     * 
     */
    @Import(name="serverCertificateStatus")
    private @Nullable Output<String> serverCertificateStatus;

    /**
     * @return Whether the HTTPS certificate is enabled. Value:
     * - **on**(default): enabled.
     * - **off** : not enabled.
     * 
     */
    public Optional<Output<String>> serverCertificateStatus() {
        return Optional.ofNullable(this.serverCertificateStatus);
    }

    private DomainNewCertificateConfigArgs() {}

    private DomainNewCertificateConfigArgs(DomainNewCertificateConfigArgs $) {
        this.certId = $.certId;
        this.certName = $.certName;
        this.certRegion = $.certRegion;
        this.certType = $.certType;
        this.privateKey = $.privateKey;
        this.serverCertificate = $.serverCertificate;
        this.serverCertificateStatus = $.serverCertificateStatus;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DomainNewCertificateConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DomainNewCertificateConfigArgs $;

        public Builder() {
            $ = new DomainNewCertificateConfigArgs();
        }

        public Builder(DomainNewCertificateConfigArgs defaults) {
            $ = new DomainNewCertificateConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param certId The ID of the certificate. It takes effect only when CertType = cas.
         * 
         * @return builder
         * 
         */
        public Builder certId(@Nullable Output<String> certId) {
            $.certId = certId;
            return this;
        }

        /**
         * @param certId The ID of the certificate. It takes effect only when CertType = cas.
         * 
         * @return builder
         * 
         */
        public Builder certId(String certId) {
            return certId(Output.of(certId));
        }

        /**
         * @param certName Certificate name, only flyer names are supported.
         * 
         * @return builder
         * 
         */
        public Builder certName(@Nullable Output<String> certName) {
            $.certName = certName;
            return this;
        }

        /**
         * @param certName Certificate name, only flyer names are supported.
         * 
         * @return builder
         * 
         */
        public Builder certName(String certName) {
            return certName(Output.of(certName));
        }

        /**
         * @param certRegion The certificate region, which takes effect only when CertType = cas, supports cn-hangzhou (domestic) and ap-southeast-1 (International), and is cn-hangzhou by default.
         * 
         * @return builder
         * 
         */
        public Builder certRegion(@Nullable Output<String> certRegion) {
            $.certRegion = certRegion;
            return this;
        }

        /**
         * @param certRegion The certificate region, which takes effect only when CertType = cas, supports cn-hangzhou (domestic) and ap-southeast-1 (International), and is cn-hangzhou by default.
         * 
         * @return builder
         * 
         */
        public Builder certRegion(String certRegion) {
            return certRegion(Output.of(certRegion));
        }

        /**
         * @param certType Certificate type. Value:
         * - **upload**: upload certificate.
         * - **cas**: Cloud Shield certificate.
         * - **free**: free certificate.
         * &gt; If the certificate type is **cas**, **PrivateKey** does not need to pass parameters.
         * 
         * @return builder
         * 
         */
        public Builder certType(@Nullable Output<String> certType) {
            $.certType = certType;
            return this;
        }

        /**
         * @param certType Certificate type. Value:
         * - **upload**: upload certificate.
         * - **cas**: Cloud Shield certificate.
         * - **free**: free certificate.
         * &gt; If the certificate type is **cas**, **PrivateKey** does not need to pass parameters.
         * 
         * @return builder
         * 
         */
        public Builder certType(String certType) {
            return certType(Output.of(certType));
        }

        /**
         * @param privateKey The content of the private key. If the certificate is not enabled, you do not need to enter the content of the private key. To configure the certificate, enter the content of the private key.
         * 
         * @return builder
         * 
         */
        public Builder privateKey(@Nullable Output<String> privateKey) {
            $.privateKey = privateKey;
            return this;
        }

        /**
         * @param privateKey The content of the private key. If the certificate is not enabled, you do not need to enter the content of the private key. To configure the certificate, enter the content of the private key.
         * 
         * @return builder
         * 
         */
        public Builder privateKey(String privateKey) {
            return privateKey(Output.of(privateKey));
        }

        /**
         * @param serverCertificate The content of the security certificate. If the certificate is not enabled, you do not need to enter the content of the security certificate. Please enter the content of the certificate to configure the certificate.
         * 
         * @return builder
         * 
         */
        public Builder serverCertificate(@Nullable Output<String> serverCertificate) {
            $.serverCertificate = serverCertificate;
            return this;
        }

        /**
         * @param serverCertificate The content of the security certificate. If the certificate is not enabled, you do not need to enter the content of the security certificate. Please enter the content of the certificate to configure the certificate.
         * 
         * @return builder
         * 
         */
        public Builder serverCertificate(String serverCertificate) {
            return serverCertificate(Output.of(serverCertificate));
        }

        /**
         * @param serverCertificateStatus Whether the HTTPS certificate is enabled. Value:
         * - **on**(default): enabled.
         * - **off** : not enabled.
         * 
         * @return builder
         * 
         */
        public Builder serverCertificateStatus(@Nullable Output<String> serverCertificateStatus) {
            $.serverCertificateStatus = serverCertificateStatus;
            return this;
        }

        /**
         * @param serverCertificateStatus Whether the HTTPS certificate is enabled. Value:
         * - **on**(default): enabled.
         * - **off** : not enabled.
         * 
         * @return builder
         * 
         */
        public Builder serverCertificateStatus(String serverCertificateStatus) {
            return serverCertificateStatus(Output.of(serverCertificateStatus));
        }

        public DomainNewCertificateConfigArgs build() {
            return $;
        }
    }

}
