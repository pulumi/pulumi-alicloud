// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.cloudsso.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class DirectorySamlServiceProvider {
    /**
     * @return ACS URL of SP.
     * 
     */
    private @Nullable String acsUrl;
    /**
     * @return Signature algorithms supported by AuthNRequest
     * 
     */
    private @Nullable String authnSignAlgo;
    /**
     * @return Type of certificate used for signing in the SSO process
     * 
     */
    private @Nullable String certificateType;
    /**
     * @return SP metadata document (Base64 encoding).
     * 
     */
    private @Nullable String encodedMetadataDocument;
    /**
     * @return SP identity.
     * 
     */
    private @Nullable String entityId;
    /**
     * @return Whether IdP-side encryption of Assertion is supported.
     * 
     */
    private @Nullable Boolean supportEncryptedAssertion;

    private DirectorySamlServiceProvider() {}
    /**
     * @return ACS URL of SP.
     * 
     */
    public Optional<String> acsUrl() {
        return Optional.ofNullable(this.acsUrl);
    }
    /**
     * @return Signature algorithms supported by AuthNRequest
     * 
     */
    public Optional<String> authnSignAlgo() {
        return Optional.ofNullable(this.authnSignAlgo);
    }
    /**
     * @return Type of certificate used for signing in the SSO process
     * 
     */
    public Optional<String> certificateType() {
        return Optional.ofNullable(this.certificateType);
    }
    /**
     * @return SP metadata document (Base64 encoding).
     * 
     */
    public Optional<String> encodedMetadataDocument() {
        return Optional.ofNullable(this.encodedMetadataDocument);
    }
    /**
     * @return SP identity.
     * 
     */
    public Optional<String> entityId() {
        return Optional.ofNullable(this.entityId);
    }
    /**
     * @return Whether IdP-side encryption of Assertion is supported.
     * 
     */
    public Optional<Boolean> supportEncryptedAssertion() {
        return Optional.ofNullable(this.supportEncryptedAssertion);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DirectorySamlServiceProvider defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String acsUrl;
        private @Nullable String authnSignAlgo;
        private @Nullable String certificateType;
        private @Nullable String encodedMetadataDocument;
        private @Nullable String entityId;
        private @Nullable Boolean supportEncryptedAssertion;
        public Builder() {}
        public Builder(DirectorySamlServiceProvider defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.acsUrl = defaults.acsUrl;
    	      this.authnSignAlgo = defaults.authnSignAlgo;
    	      this.certificateType = defaults.certificateType;
    	      this.encodedMetadataDocument = defaults.encodedMetadataDocument;
    	      this.entityId = defaults.entityId;
    	      this.supportEncryptedAssertion = defaults.supportEncryptedAssertion;
        }

        @CustomType.Setter
        public Builder acsUrl(@Nullable String acsUrl) {

            this.acsUrl = acsUrl;
            return this;
        }
        @CustomType.Setter
        public Builder authnSignAlgo(@Nullable String authnSignAlgo) {

            this.authnSignAlgo = authnSignAlgo;
            return this;
        }
        @CustomType.Setter
        public Builder certificateType(@Nullable String certificateType) {

            this.certificateType = certificateType;
            return this;
        }
        @CustomType.Setter
        public Builder encodedMetadataDocument(@Nullable String encodedMetadataDocument) {

            this.encodedMetadataDocument = encodedMetadataDocument;
            return this;
        }
        @CustomType.Setter
        public Builder entityId(@Nullable String entityId) {

            this.entityId = entityId;
            return this;
        }
        @CustomType.Setter
        public Builder supportEncryptedAssertion(@Nullable Boolean supportEncryptedAssertion) {

            this.supportEncryptedAssertion = supportEncryptedAssertion;
            return this;
        }
        public DirectorySamlServiceProvider build() {
            final var _resultValue = new DirectorySamlServiceProvider();
            _resultValue.acsUrl = acsUrl;
            _resultValue.authnSignAlgo = authnSignAlgo;
            _resultValue.certificateType = certificateType;
            _resultValue.encodedMetadataDocument = encodedMetadataDocument;
            _resultValue.entityId = entityId;
            _resultValue.supportEncryptedAssertion = supportEncryptedAssertion;
            return _resultValue;
        }
    }
}
