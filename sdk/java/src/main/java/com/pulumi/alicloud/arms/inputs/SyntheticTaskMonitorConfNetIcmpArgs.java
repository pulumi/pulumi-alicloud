// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.arms.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SyntheticTaskMonitorConfNetIcmpArgs extends com.pulumi.resources.ResourceArgs {

    public static final SyntheticTaskMonitorConfNetIcmpArgs Empty = new SyntheticTaskMonitorConfNetIcmpArgs();

    /**
     * The interval between TCP connections. The unit is milliseconds (ms), the minimum value is 200, the maximum value is 10000, and the default value is 200.
     * 
     */
    @Import(name="interval")
    private @Nullable Output<Integer> interval;

    /**
     * @return The interval between TCP connections. The unit is milliseconds (ms), the minimum value is 200, the maximum value is 10000, and the default value is 200.
     * 
     */
    public Optional<Output<Integer>> interval() {
        return Optional.ofNullable(this.interval);
    }

    /**
     * Number of ICMP(Ping) packets sent. The minimum value is 1, the maximum value is 50, and the default is 4.
     * 
     */
    @Import(name="packageNum")
    private @Nullable Output<Integer> packageNum;

    /**
     * @return Number of ICMP(Ping) packets sent. The minimum value is 1, the maximum value is 50, and the default is 4.
     * 
     */
    public Optional<Output<Integer>> packageNum() {
        return Optional.ofNullable(this.packageNum);
    }

    /**
     * The size of the sent ICMP(Ping) packet. The unit is byte. The ICMP(PING) packet size is limited to 32, 64, 128, 256, 512, 1024, 1080, and 1450.
     * 
     */
    @Import(name="packageSize")
    private @Nullable Output<Integer> packageSize;

    /**
     * @return The size of the sent ICMP(Ping) packet. The unit is byte. The ICMP(PING) packet size is limited to 32, 64, 128, 256, 512, 1024, 1080, and 1450.
     * 
     */
    public Optional<Output<Integer>> packageSize() {
        return Optional.ofNullable(this.packageSize);
    }

    /**
     * Whether to split ICMP(Ping) packets. The default is true.
     * 
     */
    @Import(name="splitPackage")
    private @Nullable Output<Boolean> splitPackage;

    /**
     * @return Whether to split ICMP(Ping) packets. The default is true.
     * 
     */
    public Optional<Output<Boolean>> splitPackage() {
        return Optional.ofNullable(this.splitPackage);
    }

    /**
     * The target URL.
     * 
     */
    @Import(name="targetUrl", required=true)
    private Output<String> targetUrl;

    /**
     * @return The target URL.
     * 
     */
    public Output<String> targetUrl() {
        return this.targetUrl;
    }

    /**
     * TCP dial test timeout. The unit is milliseconds (ms), the minimum value is 1000, the maximum value is 300000, and the default value is 20000.
     * 
     */
    @Import(name="timeout")
    private @Nullable Output<Integer> timeout;

    /**
     * @return TCP dial test timeout. The unit is milliseconds (ms), the minimum value is 1000, the maximum value is 300000, and the default value is 20000.
     * 
     */
    public Optional<Output<Integer>> timeout() {
        return Optional.ofNullable(this.timeout);
    }

    /**
     * Whether to enable tracert. The default is true.
     * 
     */
    @Import(name="tracertEnable")
    private @Nullable Output<Boolean> tracertEnable;

    /**
     * @return Whether to enable tracert. The default is true.
     * 
     */
    public Optional<Output<Boolean>> tracertEnable() {
        return Optional.ofNullable(this.tracertEnable);
    }

    /**
     * The maximum number of hops for tracert. The minimum value is 1, the maximum value is 128, and the default value is 20.
     * 
     */
    @Import(name="tracertNumMax")
    private @Nullable Output<Integer> tracertNumMax;

    /**
     * @return The maximum number of hops for tracert. The minimum value is 1, the maximum value is 128, and the default value is 20.
     * 
     */
    public Optional<Output<Integer>> tracertNumMax() {
        return Optional.ofNullable(this.tracertNumMax);
    }

    /**
     * The time-out of tracert. The unit is milliseconds (ms), the minimum value is 1000, the maximum value is 300000, and the default value is 60000.
     * 
     */
    @Import(name="tracertTimeout")
    private @Nullable Output<Integer> tracertTimeout;

    /**
     * @return The time-out of tracert. The unit is milliseconds (ms), the minimum value is 1000, the maximum value is 300000, and the default value is 60000.
     * 
     */
    public Optional<Output<Integer>> tracertTimeout() {
        return Optional.ofNullable(this.tracertTimeout);
    }

    private SyntheticTaskMonitorConfNetIcmpArgs() {}

    private SyntheticTaskMonitorConfNetIcmpArgs(SyntheticTaskMonitorConfNetIcmpArgs $) {
        this.interval = $.interval;
        this.packageNum = $.packageNum;
        this.packageSize = $.packageSize;
        this.splitPackage = $.splitPackage;
        this.targetUrl = $.targetUrl;
        this.timeout = $.timeout;
        this.tracertEnable = $.tracertEnable;
        this.tracertNumMax = $.tracertNumMax;
        this.tracertTimeout = $.tracertTimeout;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SyntheticTaskMonitorConfNetIcmpArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SyntheticTaskMonitorConfNetIcmpArgs $;

        public Builder() {
            $ = new SyntheticTaskMonitorConfNetIcmpArgs();
        }

        public Builder(SyntheticTaskMonitorConfNetIcmpArgs defaults) {
            $ = new SyntheticTaskMonitorConfNetIcmpArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param interval The interval between TCP connections. The unit is milliseconds (ms), the minimum value is 200, the maximum value is 10000, and the default value is 200.
         * 
         * @return builder
         * 
         */
        public Builder interval(@Nullable Output<Integer> interval) {
            $.interval = interval;
            return this;
        }

        /**
         * @param interval The interval between TCP connections. The unit is milliseconds (ms), the minimum value is 200, the maximum value is 10000, and the default value is 200.
         * 
         * @return builder
         * 
         */
        public Builder interval(Integer interval) {
            return interval(Output.of(interval));
        }

        /**
         * @param packageNum Number of ICMP(Ping) packets sent. The minimum value is 1, the maximum value is 50, and the default is 4.
         * 
         * @return builder
         * 
         */
        public Builder packageNum(@Nullable Output<Integer> packageNum) {
            $.packageNum = packageNum;
            return this;
        }

        /**
         * @param packageNum Number of ICMP(Ping) packets sent. The minimum value is 1, the maximum value is 50, and the default is 4.
         * 
         * @return builder
         * 
         */
        public Builder packageNum(Integer packageNum) {
            return packageNum(Output.of(packageNum));
        }

        /**
         * @param packageSize The size of the sent ICMP(Ping) packet. The unit is byte. The ICMP(PING) packet size is limited to 32, 64, 128, 256, 512, 1024, 1080, and 1450.
         * 
         * @return builder
         * 
         */
        public Builder packageSize(@Nullable Output<Integer> packageSize) {
            $.packageSize = packageSize;
            return this;
        }

        /**
         * @param packageSize The size of the sent ICMP(Ping) packet. The unit is byte. The ICMP(PING) packet size is limited to 32, 64, 128, 256, 512, 1024, 1080, and 1450.
         * 
         * @return builder
         * 
         */
        public Builder packageSize(Integer packageSize) {
            return packageSize(Output.of(packageSize));
        }

        /**
         * @param splitPackage Whether to split ICMP(Ping) packets. The default is true.
         * 
         * @return builder
         * 
         */
        public Builder splitPackage(@Nullable Output<Boolean> splitPackage) {
            $.splitPackage = splitPackage;
            return this;
        }

        /**
         * @param splitPackage Whether to split ICMP(Ping) packets. The default is true.
         * 
         * @return builder
         * 
         */
        public Builder splitPackage(Boolean splitPackage) {
            return splitPackage(Output.of(splitPackage));
        }

        /**
         * @param targetUrl The target URL.
         * 
         * @return builder
         * 
         */
        public Builder targetUrl(Output<String> targetUrl) {
            $.targetUrl = targetUrl;
            return this;
        }

        /**
         * @param targetUrl The target URL.
         * 
         * @return builder
         * 
         */
        public Builder targetUrl(String targetUrl) {
            return targetUrl(Output.of(targetUrl));
        }

        /**
         * @param timeout TCP dial test timeout. The unit is milliseconds (ms), the minimum value is 1000, the maximum value is 300000, and the default value is 20000.
         * 
         * @return builder
         * 
         */
        public Builder timeout(@Nullable Output<Integer> timeout) {
            $.timeout = timeout;
            return this;
        }

        /**
         * @param timeout TCP dial test timeout. The unit is milliseconds (ms), the minimum value is 1000, the maximum value is 300000, and the default value is 20000.
         * 
         * @return builder
         * 
         */
        public Builder timeout(Integer timeout) {
            return timeout(Output.of(timeout));
        }

        /**
         * @param tracertEnable Whether to enable tracert. The default is true.
         * 
         * @return builder
         * 
         */
        public Builder tracertEnable(@Nullable Output<Boolean> tracertEnable) {
            $.tracertEnable = tracertEnable;
            return this;
        }

        /**
         * @param tracertEnable Whether to enable tracert. The default is true.
         * 
         * @return builder
         * 
         */
        public Builder tracertEnable(Boolean tracertEnable) {
            return tracertEnable(Output.of(tracertEnable));
        }

        /**
         * @param tracertNumMax The maximum number of hops for tracert. The minimum value is 1, the maximum value is 128, and the default value is 20.
         * 
         * @return builder
         * 
         */
        public Builder tracertNumMax(@Nullable Output<Integer> tracertNumMax) {
            $.tracertNumMax = tracertNumMax;
            return this;
        }

        /**
         * @param tracertNumMax The maximum number of hops for tracert. The minimum value is 1, the maximum value is 128, and the default value is 20.
         * 
         * @return builder
         * 
         */
        public Builder tracertNumMax(Integer tracertNumMax) {
            return tracertNumMax(Output.of(tracertNumMax));
        }

        /**
         * @param tracertTimeout The time-out of tracert. The unit is milliseconds (ms), the minimum value is 1000, the maximum value is 300000, and the default value is 60000.
         * 
         * @return builder
         * 
         */
        public Builder tracertTimeout(@Nullable Output<Integer> tracertTimeout) {
            $.tracertTimeout = tracertTimeout;
            return this;
        }

        /**
         * @param tracertTimeout The time-out of tracert. The unit is milliseconds (ms), the minimum value is 1000, the maximum value is 300000, and the default value is 60000.
         * 
         * @return builder
         * 
         */
        public Builder tracertTimeout(Integer tracertTimeout) {
            return tracertTimeout(Output.of(tracertTimeout));
        }

        public SyntheticTaskMonitorConfNetIcmpArgs build() {
            if ($.targetUrl == null) {
                throw new MissingRequiredPropertyException("SyntheticTaskMonitorConfNetIcmpArgs", "targetUrl");
            }
            return $;
        }
    }

}
