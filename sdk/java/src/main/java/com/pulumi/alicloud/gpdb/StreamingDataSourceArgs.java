// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.gpdb;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class StreamingDataSourceArgs extends com.pulumi.resources.ResourceArgs {

    public static final StreamingDataSourceArgs Empty = new StreamingDataSourceArgs();

    /**
     * The configurations of the data source.
     * 
     */
    @Import(name="dataSourceConfig", required=true)
    private Output<String> dataSourceConfig;

    /**
     * @return The configurations of the data source.
     * 
     */
    public Output<String> dataSourceConfig() {
        return this.dataSourceConfig;
    }

    /**
     * The description of the data source.
     * 
     */
    @Import(name="dataSourceDescription")
    private @Nullable Output<String> dataSourceDescription;

    /**
     * @return The description of the data source.
     * 
     */
    public Optional<Output<String>> dataSourceDescription() {
        return Optional.ofNullable(this.dataSourceDescription);
    }

    /**
     * Data Source Name
     * 
     */
    @Import(name="dataSourceName", required=true)
    private Output<String> dataSourceName;

    /**
     * @return Data Source Name
     * 
     */
    public Output<String> dataSourceName() {
        return this.dataSourceName;
    }

    /**
     * Data Source Type
     * 
     */
    @Import(name="dataSourceType", required=true)
    private Output<String> dataSourceType;

    /**
     * @return Data Source Type
     * 
     */
    public Output<String> dataSourceType() {
        return this.dataSourceType;
    }

    /**
     * The instance ID.
     * 
     * &gt; **NOTE:**   You can call the [DescribeDBInstances](https://www.alibabacloud.com/help/en/doc-detail/196830.html) operation to query the information about all AnalyticDB for PostgreSQL instances within a region, including instance IDs.
     * 
     */
    @Import(name="dbInstanceId", required=true)
    private Output<String> dbInstanceId;

    /**
     * @return The instance ID.
     * 
     * &gt; **NOTE:**   You can call the [DescribeDBInstances](https://www.alibabacloud.com/help/en/doc-detail/196830.html) operation to query the information about all AnalyticDB for PostgreSQL instances within a region, including instance IDs.
     * 
     */
    public Output<String> dbInstanceId() {
        return this.dbInstanceId;
    }

    /**
     * The real-time data service ID.
     * 
     */
    @Import(name="serviceId", required=true)
    private Output<Integer> serviceId;

    /**
     * @return The real-time data service ID.
     * 
     */
    public Output<Integer> serviceId() {
        return this.serviceId;
    }

    private StreamingDataSourceArgs() {}

    private StreamingDataSourceArgs(StreamingDataSourceArgs $) {
        this.dataSourceConfig = $.dataSourceConfig;
        this.dataSourceDescription = $.dataSourceDescription;
        this.dataSourceName = $.dataSourceName;
        this.dataSourceType = $.dataSourceType;
        this.dbInstanceId = $.dbInstanceId;
        this.serviceId = $.serviceId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(StreamingDataSourceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private StreamingDataSourceArgs $;

        public Builder() {
            $ = new StreamingDataSourceArgs();
        }

        public Builder(StreamingDataSourceArgs defaults) {
            $ = new StreamingDataSourceArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param dataSourceConfig The configurations of the data source.
         * 
         * @return builder
         * 
         */
        public Builder dataSourceConfig(Output<String> dataSourceConfig) {
            $.dataSourceConfig = dataSourceConfig;
            return this;
        }

        /**
         * @param dataSourceConfig The configurations of the data source.
         * 
         * @return builder
         * 
         */
        public Builder dataSourceConfig(String dataSourceConfig) {
            return dataSourceConfig(Output.of(dataSourceConfig));
        }

        /**
         * @param dataSourceDescription The description of the data source.
         * 
         * @return builder
         * 
         */
        public Builder dataSourceDescription(@Nullable Output<String> dataSourceDescription) {
            $.dataSourceDescription = dataSourceDescription;
            return this;
        }

        /**
         * @param dataSourceDescription The description of the data source.
         * 
         * @return builder
         * 
         */
        public Builder dataSourceDescription(String dataSourceDescription) {
            return dataSourceDescription(Output.of(dataSourceDescription));
        }

        /**
         * @param dataSourceName Data Source Name
         * 
         * @return builder
         * 
         */
        public Builder dataSourceName(Output<String> dataSourceName) {
            $.dataSourceName = dataSourceName;
            return this;
        }

        /**
         * @param dataSourceName Data Source Name
         * 
         * @return builder
         * 
         */
        public Builder dataSourceName(String dataSourceName) {
            return dataSourceName(Output.of(dataSourceName));
        }

        /**
         * @param dataSourceType Data Source Type
         * 
         * @return builder
         * 
         */
        public Builder dataSourceType(Output<String> dataSourceType) {
            $.dataSourceType = dataSourceType;
            return this;
        }

        /**
         * @param dataSourceType Data Source Type
         * 
         * @return builder
         * 
         */
        public Builder dataSourceType(String dataSourceType) {
            return dataSourceType(Output.of(dataSourceType));
        }

        /**
         * @param dbInstanceId The instance ID.
         * 
         * &gt; **NOTE:**   You can call the [DescribeDBInstances](https://www.alibabacloud.com/help/en/doc-detail/196830.html) operation to query the information about all AnalyticDB for PostgreSQL instances within a region, including instance IDs.
         * 
         * @return builder
         * 
         */
        public Builder dbInstanceId(Output<String> dbInstanceId) {
            $.dbInstanceId = dbInstanceId;
            return this;
        }

        /**
         * @param dbInstanceId The instance ID.
         * 
         * &gt; **NOTE:**   You can call the [DescribeDBInstances](https://www.alibabacloud.com/help/en/doc-detail/196830.html) operation to query the information about all AnalyticDB for PostgreSQL instances within a region, including instance IDs.
         * 
         * @return builder
         * 
         */
        public Builder dbInstanceId(String dbInstanceId) {
            return dbInstanceId(Output.of(dbInstanceId));
        }

        /**
         * @param serviceId The real-time data service ID.
         * 
         * @return builder
         * 
         */
        public Builder serviceId(Output<Integer> serviceId) {
            $.serviceId = serviceId;
            return this;
        }

        /**
         * @param serviceId The real-time data service ID.
         * 
         * @return builder
         * 
         */
        public Builder serviceId(Integer serviceId) {
            return serviceId(Output.of(serviceId));
        }

        public StreamingDataSourceArgs build() {
            if ($.dataSourceConfig == null) {
                throw new MissingRequiredPropertyException("StreamingDataSourceArgs", "dataSourceConfig");
            }
            if ($.dataSourceName == null) {
                throw new MissingRequiredPropertyException("StreamingDataSourceArgs", "dataSourceName");
            }
            if ($.dataSourceType == null) {
                throw new MissingRequiredPropertyException("StreamingDataSourceArgs", "dataSourceType");
            }
            if ($.dbInstanceId == null) {
                throw new MissingRequiredPropertyException("StreamingDataSourceArgs", "dbInstanceId");
            }
            if ($.serviceId == null) {
                throw new MissingRequiredPropertyException("StreamingDataSourceArgs", "serviceId");
            }
            return $;
        }
    }

}
