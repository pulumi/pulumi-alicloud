// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.ecs.inputs;

import com.pulumi.alicloud.ecs.inputs.ImageImportDiskDeviceMappingArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ImageImportState extends com.pulumi.resources.ResourceArgs {

    public static final ImageImportState Empty = new ImageImportState();

    /**
     * The architecture of the image. Default value: `x8664`. Valid values: `x8664`, `i386`.
     * 
     */
    @Import(name="architecture")
    private @Nullable Output<String> architecture;

    /**
     * @return The architecture of the image. Default value: `x8664`. Valid values: `x8664`, `i386`.
     * 
     */
    public Optional<Output<String>> architecture() {
        return Optional.ofNullable(this.architecture);
    }

    /**
     * The boot mode of the image. Valid values: `BIOS`, `UEFI`.
     * 
     */
    @Import(name="bootMode")
    private @Nullable Output<String> bootMode;

    /**
     * @return The boot mode of the image. Valid values: `BIOS`, `UEFI`.
     * 
     */
    public Optional<Output<String>> bootMode() {
        return Optional.ofNullable(this.bootMode);
    }

    /**
     * The description of the image. The `description` must be 2 to 256 characters in length and cannot start with http:// or https://.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The description of the image. The `description` must be 2 to 256 characters in length and cannot start with http:// or https://.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The information about the custom image. See `diskDeviceMapping` below.
     * 
     */
    @Import(name="diskDeviceMappings")
    private @Nullable Output<List<ImageImportDiskDeviceMappingArgs>> diskDeviceMappings;

    /**
     * @return The information about the custom image. See `diskDeviceMapping` below.
     * 
     */
    public Optional<Output<List<ImageImportDiskDeviceMappingArgs>>> diskDeviceMappings() {
        return Optional.ofNullable(this.diskDeviceMappings);
    }

    /**
     * The name of the image. The `imageName` must be `2` to `128` characters in length. The `imageName` must start with a letter and cannot start with acs: or aliyun. The `imageName` cannot contain http:// or https://. The `imageName` can contain letters, digits, periods (.), colons (:), underscores (_), and hyphens (-).
     * 
     */
    @Import(name="imageName")
    private @Nullable Output<String> imageName;

    /**
     * @return The name of the image. The `imageName` must be `2` to `128` characters in length. The `imageName` must start with a letter and cannot start with acs: or aliyun. The `imageName` cannot contain http:// or https://. The `imageName` can contain letters, digits, periods (.), colons (:), underscores (_), and hyphens (-).
     * 
     */
    public Optional<Output<String>> imageName() {
        return Optional.ofNullable(this.imageName);
    }

    /**
     * The type of the license used to activate the operating system after the image is imported. Default value: `Auto`. Valid values: `Auto`, `Aliyun`, `BYOL`.
     * 
     */
    @Import(name="licenseType")
    private @Nullable Output<String> licenseType;

    /**
     * @return The type of the license used to activate the operating system after the image is imported. Default value: `Auto`. Valid values: `Auto`, `Aliyun`, `BYOL`.
     * 
     */
    public Optional<Output<String>> licenseType() {
        return Optional.ofNullable(this.licenseType);
    }

    /**
     * The type of the operating system. Default value: `linux`. Valid values: `windows`, `linux`.
     * 
     */
    @Import(name="osType")
    private @Nullable Output<String> osType;

    /**
     * @return The type of the operating system. Default value: `linux`. Valid values: `windows`, `linux`.
     * 
     */
    public Optional<Output<String>> osType() {
        return Optional.ofNullable(this.osType);
    }

    /**
     * The operating system platform. More valid values refer to [ImportImage OpenAPI](https://www.alibabacloud.com/help/en/elastic-compute-service/latest/importimage).
     * &gt; **NOTE:** Before provider version 1.197.0, the default value of `platform` is `Ubuntu`.
     * 
     */
    @Import(name="platform")
    private @Nullable Output<String> platform;

    /**
     * @return The operating system platform. More valid values refer to [ImportImage OpenAPI](https://www.alibabacloud.com/help/en/elastic-compute-service/latest/importimage).
     * &gt; **NOTE:** Before provider version 1.197.0, the default value of `platform` is `Ubuntu`.
     * 
     */
    public Optional<Output<String>> platform() {
        return Optional.ofNullable(this.platform);
    }

    private ImageImportState() {}

    private ImageImportState(ImageImportState $) {
        this.architecture = $.architecture;
        this.bootMode = $.bootMode;
        this.description = $.description;
        this.diskDeviceMappings = $.diskDeviceMappings;
        this.imageName = $.imageName;
        this.licenseType = $.licenseType;
        this.osType = $.osType;
        this.platform = $.platform;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ImageImportState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ImageImportState $;

        public Builder() {
            $ = new ImageImportState();
        }

        public Builder(ImageImportState defaults) {
            $ = new ImageImportState(Objects.requireNonNull(defaults));
        }

        /**
         * @param architecture The architecture of the image. Default value: `x8664`. Valid values: `x8664`, `i386`.
         * 
         * @return builder
         * 
         */
        public Builder architecture(@Nullable Output<String> architecture) {
            $.architecture = architecture;
            return this;
        }

        /**
         * @param architecture The architecture of the image. Default value: `x8664`. Valid values: `x8664`, `i386`.
         * 
         * @return builder
         * 
         */
        public Builder architecture(String architecture) {
            return architecture(Output.of(architecture));
        }

        /**
         * @param bootMode The boot mode of the image. Valid values: `BIOS`, `UEFI`.
         * 
         * @return builder
         * 
         */
        public Builder bootMode(@Nullable Output<String> bootMode) {
            $.bootMode = bootMode;
            return this;
        }

        /**
         * @param bootMode The boot mode of the image. Valid values: `BIOS`, `UEFI`.
         * 
         * @return builder
         * 
         */
        public Builder bootMode(String bootMode) {
            return bootMode(Output.of(bootMode));
        }

        /**
         * @param description The description of the image. The `description` must be 2 to 256 characters in length and cannot start with http:// or https://.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The description of the image. The `description` must be 2 to 256 characters in length and cannot start with http:// or https://.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param diskDeviceMappings The information about the custom image. See `diskDeviceMapping` below.
         * 
         * @return builder
         * 
         */
        public Builder diskDeviceMappings(@Nullable Output<List<ImageImportDiskDeviceMappingArgs>> diskDeviceMappings) {
            $.diskDeviceMappings = diskDeviceMappings;
            return this;
        }

        /**
         * @param diskDeviceMappings The information about the custom image. See `diskDeviceMapping` below.
         * 
         * @return builder
         * 
         */
        public Builder diskDeviceMappings(List<ImageImportDiskDeviceMappingArgs> diskDeviceMappings) {
            return diskDeviceMappings(Output.of(diskDeviceMappings));
        }

        /**
         * @param diskDeviceMappings The information about the custom image. See `diskDeviceMapping` below.
         * 
         * @return builder
         * 
         */
        public Builder diskDeviceMappings(ImageImportDiskDeviceMappingArgs... diskDeviceMappings) {
            return diskDeviceMappings(List.of(diskDeviceMappings));
        }

        /**
         * @param imageName The name of the image. The `imageName` must be `2` to `128` characters in length. The `imageName` must start with a letter and cannot start with acs: or aliyun. The `imageName` cannot contain http:// or https://. The `imageName` can contain letters, digits, periods (.), colons (:), underscores (_), and hyphens (-).
         * 
         * @return builder
         * 
         */
        public Builder imageName(@Nullable Output<String> imageName) {
            $.imageName = imageName;
            return this;
        }

        /**
         * @param imageName The name of the image. The `imageName` must be `2` to `128` characters in length. The `imageName` must start with a letter and cannot start with acs: or aliyun. The `imageName` cannot contain http:// or https://. The `imageName` can contain letters, digits, periods (.), colons (:), underscores (_), and hyphens (-).
         * 
         * @return builder
         * 
         */
        public Builder imageName(String imageName) {
            return imageName(Output.of(imageName));
        }

        /**
         * @param licenseType The type of the license used to activate the operating system after the image is imported. Default value: `Auto`. Valid values: `Auto`, `Aliyun`, `BYOL`.
         * 
         * @return builder
         * 
         */
        public Builder licenseType(@Nullable Output<String> licenseType) {
            $.licenseType = licenseType;
            return this;
        }

        /**
         * @param licenseType The type of the license used to activate the operating system after the image is imported. Default value: `Auto`. Valid values: `Auto`, `Aliyun`, `BYOL`.
         * 
         * @return builder
         * 
         */
        public Builder licenseType(String licenseType) {
            return licenseType(Output.of(licenseType));
        }

        /**
         * @param osType The type of the operating system. Default value: `linux`. Valid values: `windows`, `linux`.
         * 
         * @return builder
         * 
         */
        public Builder osType(@Nullable Output<String> osType) {
            $.osType = osType;
            return this;
        }

        /**
         * @param osType The type of the operating system. Default value: `linux`. Valid values: `windows`, `linux`.
         * 
         * @return builder
         * 
         */
        public Builder osType(String osType) {
            return osType(Output.of(osType));
        }

        /**
         * @param platform The operating system platform. More valid values refer to [ImportImage OpenAPI](https://www.alibabacloud.com/help/en/elastic-compute-service/latest/importimage).
         * &gt; **NOTE:** Before provider version 1.197.0, the default value of `platform` is `Ubuntu`.
         * 
         * @return builder
         * 
         */
        public Builder platform(@Nullable Output<String> platform) {
            $.platform = platform;
            return this;
        }

        /**
         * @param platform The operating system platform. More valid values refer to [ImportImage OpenAPI](https://www.alibabacloud.com/help/en/elastic-compute-service/latest/importimage).
         * &gt; **NOTE:** Before provider version 1.197.0, the default value of `platform` is `Ubuntu`.
         * 
         * @return builder
         * 
         */
        public Builder platform(String platform) {
            return platform(Output.of(platform));
        }

        public ImageImportState build() {
            return $;
        }
    }

}
