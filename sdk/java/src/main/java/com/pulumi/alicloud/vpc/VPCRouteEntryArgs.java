// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.vpc;

import com.pulumi.alicloud.vpc.inputs.VPCRouteEntryNextHopArgs;
import com.pulumi.alicloud.vpc.inputs.VPCRouteEntryRoutePublishTargetArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class VPCRouteEntryArgs extends com.pulumi.resources.ResourceArgs {

    public static final VPCRouteEntryArgs Empty = new VPCRouteEntryArgs();

    /**
     * Description of the route entry.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Description of the route entry.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The destination network segment of the routing entry.
     * 
     */
    @Import(name="destinationCidrBlock", required=true)
    private Output<String> destinationCidrBlock;

    /**
     * @return The destination network segment of the routing entry.
     * 
     */
    public Output<String> destinationCidrBlock() {
        return this.destinationCidrBlock;
    }

    /**
     * Next jump See `next_hops` below.
     * 
     */
    @Import(name="nextHops")
    private @Nullable Output<List<VPCRouteEntryNextHopArgs>> nextHops;

    /**
     * @return Next jump See `next_hops` below.
     * 
     */
    public Optional<Output<List<VPCRouteEntryNextHopArgs>>> nextHops() {
        return Optional.ofNullable(this.nextHops);
    }

    /**
     * The ID of the next hop instance of the custom route entry.
     * 
     */
    @Import(name="nexthopId")
    private @Nullable Output<String> nexthopId;

    /**
     * @return The ID of the next hop instance of the custom route entry.
     * 
     */
    public Optional<Output<String>> nexthopId() {
        return Optional.ofNullable(this.nexthopId);
    }

    /**
     * The type of the next hop of the custom route entry. Valid values:
     * - `Instance` (default): The ECS Instance.
     * - `HaVip`: a highly available virtual IP address.
     * - `RouterInterface`: indicates the router interface.
     * - **Network interface**: ENI.
     * - `VpnGateway`: the VPN gateway.
     * - `IPv6Gateway`:IPv6 gateway.
     * - `NatGateway`:NAT gateway.
     * - `Attachment`: The forwarding router.
     * - `VpcPeer`:VPC peer connection.
     * - `Ipv4Gateway`:IPv4 Gateway.
     * - `GatewayEndpoint`: the gateway endpoint.
     * - `Ecr`: Leased line gateway.
     * - `GatewayLoadBalancerEndpoint`: The Gateway-based load balancing endpoint.
     * 
     */
    @Import(name="nexthopType")
    private @Nullable Output<String> nexthopType;

    /**
     * @return The type of the next hop of the custom route entry. Valid values:
     * - `Instance` (default): The ECS Instance.
     * - `HaVip`: a highly available virtual IP address.
     * - `RouterInterface`: indicates the router interface.
     * - **Network interface**: ENI.
     * - `VpnGateway`: the VPN gateway.
     * - `IPv6Gateway`:IPv6 gateway.
     * - `NatGateway`:NAT gateway.
     * - `Attachment`: The forwarding router.
     * - `VpcPeer`:VPC peer connection.
     * - `Ipv4Gateway`:IPv4 Gateway.
     * - `GatewayEndpoint`: the gateway endpoint.
     * - `Ecr`: Leased line gateway.
     * - `GatewayLoadBalancerEndpoint`: The Gateway-based load balancing endpoint.
     * 
     */
    public Optional<Output<String>> nexthopType() {
        return Optional.ofNullable(this.nexthopType);
    }

    /**
     * The name of the route entry.
     * 
     */
    @Import(name="routeEntryName")
    private @Nullable Output<String> routeEntryName;

    /**
     * @return The name of the route entry.
     * 
     */
    public Optional<Output<String>> routeEntryName() {
        return Optional.ofNullable(this.routeEntryName);
    }

    /**
     * Route publish status and publish target type See `route_publish_targets` below.
     * 
     */
    @Import(name="routePublishTargets")
    private @Nullable Output<List<VPCRouteEntryRoutePublishTargetArgs>> routePublishTargets;

    /**
     * @return Route publish status and publish target type See `route_publish_targets` below.
     * 
     */
    public Optional<Output<List<VPCRouteEntryRoutePublishTargetArgs>>> routePublishTargets() {
        return Optional.ofNullable(this.routePublishTargets);
    }

    /**
     * Routing table ID
     * 
     */
    @Import(name="routeTableId", required=true)
    private Output<String> routeTableId;

    /**
     * @return Routing table ID
     * 
     */
    public Output<String> routeTableId() {
        return this.routeTableId;
    }

    private VPCRouteEntryArgs() {}

    private VPCRouteEntryArgs(VPCRouteEntryArgs $) {
        this.description = $.description;
        this.destinationCidrBlock = $.destinationCidrBlock;
        this.nextHops = $.nextHops;
        this.nexthopId = $.nexthopId;
        this.nexthopType = $.nexthopType;
        this.routeEntryName = $.routeEntryName;
        this.routePublishTargets = $.routePublishTargets;
        this.routeTableId = $.routeTableId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VPCRouteEntryArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VPCRouteEntryArgs $;

        public Builder() {
            $ = new VPCRouteEntryArgs();
        }

        public Builder(VPCRouteEntryArgs defaults) {
            $ = new VPCRouteEntryArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param description Description of the route entry.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Description of the route entry.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param destinationCidrBlock The destination network segment of the routing entry.
         * 
         * @return builder
         * 
         */
        public Builder destinationCidrBlock(Output<String> destinationCidrBlock) {
            $.destinationCidrBlock = destinationCidrBlock;
            return this;
        }

        /**
         * @param destinationCidrBlock The destination network segment of the routing entry.
         * 
         * @return builder
         * 
         */
        public Builder destinationCidrBlock(String destinationCidrBlock) {
            return destinationCidrBlock(Output.of(destinationCidrBlock));
        }

        /**
         * @param nextHops Next jump See `next_hops` below.
         * 
         * @return builder
         * 
         */
        public Builder nextHops(@Nullable Output<List<VPCRouteEntryNextHopArgs>> nextHops) {
            $.nextHops = nextHops;
            return this;
        }

        /**
         * @param nextHops Next jump See `next_hops` below.
         * 
         * @return builder
         * 
         */
        public Builder nextHops(List<VPCRouteEntryNextHopArgs> nextHops) {
            return nextHops(Output.of(nextHops));
        }

        /**
         * @param nextHops Next jump See `next_hops` below.
         * 
         * @return builder
         * 
         */
        public Builder nextHops(VPCRouteEntryNextHopArgs... nextHops) {
            return nextHops(List.of(nextHops));
        }

        /**
         * @param nexthopId The ID of the next hop instance of the custom route entry.
         * 
         * @return builder
         * 
         */
        public Builder nexthopId(@Nullable Output<String> nexthopId) {
            $.nexthopId = nexthopId;
            return this;
        }

        /**
         * @param nexthopId The ID of the next hop instance of the custom route entry.
         * 
         * @return builder
         * 
         */
        public Builder nexthopId(String nexthopId) {
            return nexthopId(Output.of(nexthopId));
        }

        /**
         * @param nexthopType The type of the next hop of the custom route entry. Valid values:
         * - `Instance` (default): The ECS Instance.
         * - `HaVip`: a highly available virtual IP address.
         * - `RouterInterface`: indicates the router interface.
         * - **Network interface**: ENI.
         * - `VpnGateway`: the VPN gateway.
         * - `IPv6Gateway`:IPv6 gateway.
         * - `NatGateway`:NAT gateway.
         * - `Attachment`: The forwarding router.
         * - `VpcPeer`:VPC peer connection.
         * - `Ipv4Gateway`:IPv4 Gateway.
         * - `GatewayEndpoint`: the gateway endpoint.
         * - `Ecr`: Leased line gateway.
         * - `GatewayLoadBalancerEndpoint`: The Gateway-based load balancing endpoint.
         * 
         * @return builder
         * 
         */
        public Builder nexthopType(@Nullable Output<String> nexthopType) {
            $.nexthopType = nexthopType;
            return this;
        }

        /**
         * @param nexthopType The type of the next hop of the custom route entry. Valid values:
         * - `Instance` (default): The ECS Instance.
         * - `HaVip`: a highly available virtual IP address.
         * - `RouterInterface`: indicates the router interface.
         * - **Network interface**: ENI.
         * - `VpnGateway`: the VPN gateway.
         * - `IPv6Gateway`:IPv6 gateway.
         * - `NatGateway`:NAT gateway.
         * - `Attachment`: The forwarding router.
         * - `VpcPeer`:VPC peer connection.
         * - `Ipv4Gateway`:IPv4 Gateway.
         * - `GatewayEndpoint`: the gateway endpoint.
         * - `Ecr`: Leased line gateway.
         * - `GatewayLoadBalancerEndpoint`: The Gateway-based load balancing endpoint.
         * 
         * @return builder
         * 
         */
        public Builder nexthopType(String nexthopType) {
            return nexthopType(Output.of(nexthopType));
        }

        /**
         * @param routeEntryName The name of the route entry.
         * 
         * @return builder
         * 
         */
        public Builder routeEntryName(@Nullable Output<String> routeEntryName) {
            $.routeEntryName = routeEntryName;
            return this;
        }

        /**
         * @param routeEntryName The name of the route entry.
         * 
         * @return builder
         * 
         */
        public Builder routeEntryName(String routeEntryName) {
            return routeEntryName(Output.of(routeEntryName));
        }

        /**
         * @param routePublishTargets Route publish status and publish target type See `route_publish_targets` below.
         * 
         * @return builder
         * 
         */
        public Builder routePublishTargets(@Nullable Output<List<VPCRouteEntryRoutePublishTargetArgs>> routePublishTargets) {
            $.routePublishTargets = routePublishTargets;
            return this;
        }

        /**
         * @param routePublishTargets Route publish status and publish target type See `route_publish_targets` below.
         * 
         * @return builder
         * 
         */
        public Builder routePublishTargets(List<VPCRouteEntryRoutePublishTargetArgs> routePublishTargets) {
            return routePublishTargets(Output.of(routePublishTargets));
        }

        /**
         * @param routePublishTargets Route publish status and publish target type See `route_publish_targets` below.
         * 
         * @return builder
         * 
         */
        public Builder routePublishTargets(VPCRouteEntryRoutePublishTargetArgs... routePublishTargets) {
            return routePublishTargets(List.of(routePublishTargets));
        }

        /**
         * @param routeTableId Routing table ID
         * 
         * @return builder
         * 
         */
        public Builder routeTableId(Output<String> routeTableId) {
            $.routeTableId = routeTableId;
            return this;
        }

        /**
         * @param routeTableId Routing table ID
         * 
         * @return builder
         * 
         */
        public Builder routeTableId(String routeTableId) {
            return routeTableId(Output.of(routeTableId));
        }

        public VPCRouteEntryArgs build() {
            if ($.destinationCidrBlock == null) {
                throw new MissingRequiredPropertyException("VPCRouteEntryArgs", "destinationCidrBlock");
            }
            if ($.routeTableId == null) {
                throw new MissingRequiredPropertyException("VPCRouteEntryArgs", "routeTableId");
            }
            return $;
        }
    }

}
