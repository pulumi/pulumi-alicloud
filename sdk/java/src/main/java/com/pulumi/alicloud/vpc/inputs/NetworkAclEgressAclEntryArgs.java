// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.vpc.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class NetworkAclEgressAclEntryArgs extends com.pulumi.resources.ResourceArgs {

    public static final NetworkAclEgressAclEntryArgs Empty = new NetworkAclEgressAclEntryArgs();

    /**
     * The description of the outbound rule.
     * The description must be 1 to 256 characters in length and cannot start with http:// or https.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The description of the outbound rule.
     * The description must be 1 to 256 characters in length and cannot start with http:// or https.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The destination CIDR block.
     * 
     */
    @Import(name="destinationCidrIp")
    private @Nullable Output<String> destinationCidrIp;

    /**
     * @return The destination CIDR block.
     * 
     */
    public Optional<Output<String>> destinationCidrIp() {
        return Optional.ofNullable(this.destinationCidrIp);
    }

    /**
     * The route entry type. Value
     * custom custom rule
     * system system rules
     * service Cloud service rules
     * 
     */
    @Import(name="entryType")
    private @Nullable Output<String> entryType;

    /**
     * @return The route entry type. Value
     * custom custom rule
     * system system rules
     * service Cloud service rules
     * 
     */
    public Optional<Output<String>> entryType() {
        return Optional.ofNullable(this.entryType);
    }

    /**
     * The IP protocol version of the route entry. Valid values: &#34;Ipv4&#34; and &#34;ipv6&#39;
     * 
     */
    @Import(name="ipVersion")
    private @Nullable Output<String> ipVersion;

    /**
     * @return The IP protocol version of the route entry. Valid values: &#34;Ipv4&#34; and &#34;ipv6&#39;
     * 
     */
    public Optional<Output<String>> ipVersion() {
        return Optional.ofNullable(this.ipVersion);
    }

    /**
     * Name of the outbound rule entry.
     * The name must be 1 to 128 characters in length and cannot start with http:// or https.
     * 
     */
    @Import(name="networkAclEntryName")
    private @Nullable Output<String> networkAclEntryName;

    /**
     * @return Name of the outbound rule entry.
     * The name must be 1 to 128 characters in length and cannot start with http:// or https.
     * 
     */
    public Optional<Output<String>> networkAclEntryName() {
        return Optional.ofNullable(this.networkAclEntryName);
    }

    /**
     * The action to be performed on network traffic that matches the rule. Valid values:
     * - accept
     * - drop
     * 
     */
    @Import(name="policy")
    private @Nullable Output<String> policy;

    /**
     * @return The action to be performed on network traffic that matches the rule. Valid values:
     * - accept
     * - drop
     * 
     */
    public Optional<Output<String>> policy() {
        return Optional.ofNullable(this.policy);
    }

    /**
     * The destination port range of the outbound rule.
     * When the Protocol type of the outbound rule is all, icmp, or gre, the port range is - 1/-1, indicating that the port is not restricted.
     * When the Protocol type of the outbound rule is tcp or udp, the port range is 1 to 65535, and the format is 1/200 or 80/80, indicating port 1 to port 200 or port 80.
     * 
     */
    @Import(name="port")
    private @Nullable Output<String> port;

    /**
     * @return The destination port range of the outbound rule.
     * When the Protocol type of the outbound rule is all, icmp, or gre, the port range is - 1/-1, indicating that the port is not restricted.
     * When the Protocol type of the outbound rule is tcp or udp, the port range is 1 to 65535, and the format is 1/200 or 80/80, indicating port 1 to port 200 or port 80.
     * 
     */
    public Optional<Output<String>> port() {
        return Optional.ofNullable(this.port);
    }

    /**
     * The protocol type. Value:
     * - icmp: Network Control Message Protocol.
     * - gre: Generic Routing Encapsulation Protocol.
     * - tcp: Transmission Control Protocol.
     * - udp: User Datagram Protocol.
     * - all: Supports all protocols.
     * 
     */
    @Import(name="protocol")
    private @Nullable Output<String> protocol;

    /**
     * @return The protocol type. Value:
     * - icmp: Network Control Message Protocol.
     * - gre: Generic Routing Encapsulation Protocol.
     * - tcp: Transmission Control Protocol.
     * - udp: User Datagram Protocol.
     * - all: Supports all protocols.
     * 
     */
    public Optional<Output<String>> protocol() {
        return Optional.ofNullable(this.protocol);
    }

    private NetworkAclEgressAclEntryArgs() {}

    private NetworkAclEgressAclEntryArgs(NetworkAclEgressAclEntryArgs $) {
        this.description = $.description;
        this.destinationCidrIp = $.destinationCidrIp;
        this.entryType = $.entryType;
        this.ipVersion = $.ipVersion;
        this.networkAclEntryName = $.networkAclEntryName;
        this.policy = $.policy;
        this.port = $.port;
        this.protocol = $.protocol;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NetworkAclEgressAclEntryArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NetworkAclEgressAclEntryArgs $;

        public Builder() {
            $ = new NetworkAclEgressAclEntryArgs();
        }

        public Builder(NetworkAclEgressAclEntryArgs defaults) {
            $ = new NetworkAclEgressAclEntryArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param description The description of the outbound rule.
         * The description must be 1 to 256 characters in length and cannot start with http:// or https.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The description of the outbound rule.
         * The description must be 1 to 256 characters in length and cannot start with http:// or https.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param destinationCidrIp The destination CIDR block.
         * 
         * @return builder
         * 
         */
        public Builder destinationCidrIp(@Nullable Output<String> destinationCidrIp) {
            $.destinationCidrIp = destinationCidrIp;
            return this;
        }

        /**
         * @param destinationCidrIp The destination CIDR block.
         * 
         * @return builder
         * 
         */
        public Builder destinationCidrIp(String destinationCidrIp) {
            return destinationCidrIp(Output.of(destinationCidrIp));
        }

        /**
         * @param entryType The route entry type. Value
         * custom custom rule
         * system system rules
         * service Cloud service rules
         * 
         * @return builder
         * 
         */
        public Builder entryType(@Nullable Output<String> entryType) {
            $.entryType = entryType;
            return this;
        }

        /**
         * @param entryType The route entry type. Value
         * custom custom rule
         * system system rules
         * service Cloud service rules
         * 
         * @return builder
         * 
         */
        public Builder entryType(String entryType) {
            return entryType(Output.of(entryType));
        }

        /**
         * @param ipVersion The IP protocol version of the route entry. Valid values: &#34;Ipv4&#34; and &#34;ipv6&#39;
         * 
         * @return builder
         * 
         */
        public Builder ipVersion(@Nullable Output<String> ipVersion) {
            $.ipVersion = ipVersion;
            return this;
        }

        /**
         * @param ipVersion The IP protocol version of the route entry. Valid values: &#34;Ipv4&#34; and &#34;ipv6&#39;
         * 
         * @return builder
         * 
         */
        public Builder ipVersion(String ipVersion) {
            return ipVersion(Output.of(ipVersion));
        }

        /**
         * @param networkAclEntryName Name of the outbound rule entry.
         * The name must be 1 to 128 characters in length and cannot start with http:// or https.
         * 
         * @return builder
         * 
         */
        public Builder networkAclEntryName(@Nullable Output<String> networkAclEntryName) {
            $.networkAclEntryName = networkAclEntryName;
            return this;
        }

        /**
         * @param networkAclEntryName Name of the outbound rule entry.
         * The name must be 1 to 128 characters in length and cannot start with http:// or https.
         * 
         * @return builder
         * 
         */
        public Builder networkAclEntryName(String networkAclEntryName) {
            return networkAclEntryName(Output.of(networkAclEntryName));
        }

        /**
         * @param policy The action to be performed on network traffic that matches the rule. Valid values:
         * - accept
         * - drop
         * 
         * @return builder
         * 
         */
        public Builder policy(@Nullable Output<String> policy) {
            $.policy = policy;
            return this;
        }

        /**
         * @param policy The action to be performed on network traffic that matches the rule. Valid values:
         * - accept
         * - drop
         * 
         * @return builder
         * 
         */
        public Builder policy(String policy) {
            return policy(Output.of(policy));
        }

        /**
         * @param port The destination port range of the outbound rule.
         * When the Protocol type of the outbound rule is all, icmp, or gre, the port range is - 1/-1, indicating that the port is not restricted.
         * When the Protocol type of the outbound rule is tcp or udp, the port range is 1 to 65535, and the format is 1/200 or 80/80, indicating port 1 to port 200 or port 80.
         * 
         * @return builder
         * 
         */
        public Builder port(@Nullable Output<String> port) {
            $.port = port;
            return this;
        }

        /**
         * @param port The destination port range of the outbound rule.
         * When the Protocol type of the outbound rule is all, icmp, or gre, the port range is - 1/-1, indicating that the port is not restricted.
         * When the Protocol type of the outbound rule is tcp or udp, the port range is 1 to 65535, and the format is 1/200 or 80/80, indicating port 1 to port 200 or port 80.
         * 
         * @return builder
         * 
         */
        public Builder port(String port) {
            return port(Output.of(port));
        }

        /**
         * @param protocol The protocol type. Value:
         * - icmp: Network Control Message Protocol.
         * - gre: Generic Routing Encapsulation Protocol.
         * - tcp: Transmission Control Protocol.
         * - udp: User Datagram Protocol.
         * - all: Supports all protocols.
         * 
         * @return builder
         * 
         */
        public Builder protocol(@Nullable Output<String> protocol) {
            $.protocol = protocol;
            return this;
        }

        /**
         * @param protocol The protocol type. Value:
         * - icmp: Network Control Message Protocol.
         * - gre: Generic Routing Encapsulation Protocol.
         * - tcp: Transmission Control Protocol.
         * - udp: User Datagram Protocol.
         * - all: Supports all protocols.
         * 
         * @return builder
         * 
         */
        public Builder protocol(String protocol) {
            return protocol(Output.of(protocol));
        }

        public NetworkAclEgressAclEntryArgs build() {
            return $;
        }
    }

}
