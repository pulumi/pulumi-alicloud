// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.vpc.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetSslVpnServersServer {
    /**
     * @return The encryption algorithm used.
     * 
     */
    private String cipher;
    /**
     * @return The IP address pool of the client.
     * 
     */
    private String clientIpPool;
    /**
     * @return Whether to compress.
     * 
     */
    private Boolean compress;
    /**
     * @return The number of current connections.
     * 
     */
    private Integer connections;
    /**
     * @return The time of creation.
     * 
     */
    private String createTime;
    /**
     * @return The ID of the SSL-VPN server.
     * 
     */
    private String id;
    /**
     * @return The public IP.
     * 
     */
    private String internetIp;
    /**
     * @return The local subnet of the VPN connection.
     * 
     */
    private String localSubnet;
    /**
     * @return The maximum number of connections.
     * 
     */
    private Integer maxConnections;
    /**
     * @return The name of the SSL-VPN server.
     * 
     */
    private String name;
    /**
     * @return The port used by the SSL-VPN server.
     * 
     */
    private Integer port;
    /**
     * @return The protocol used by the SSL-VPN server.
     * 
     */
    private String proto;
    /**
     * @return Use the VPN gateway ID as the search key.
     * 
     */
    private String vpnGatewayId;

    private GetSslVpnServersServer() {}
    /**
     * @return The encryption algorithm used.
     * 
     */
    public String cipher() {
        return this.cipher;
    }
    /**
     * @return The IP address pool of the client.
     * 
     */
    public String clientIpPool() {
        return this.clientIpPool;
    }
    /**
     * @return Whether to compress.
     * 
     */
    public Boolean compress() {
        return this.compress;
    }
    /**
     * @return The number of current connections.
     * 
     */
    public Integer connections() {
        return this.connections;
    }
    /**
     * @return The time of creation.
     * 
     */
    public String createTime() {
        return this.createTime;
    }
    /**
     * @return The ID of the SSL-VPN server.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The public IP.
     * 
     */
    public String internetIp() {
        return this.internetIp;
    }
    /**
     * @return The local subnet of the VPN connection.
     * 
     */
    public String localSubnet() {
        return this.localSubnet;
    }
    /**
     * @return The maximum number of connections.
     * 
     */
    public Integer maxConnections() {
        return this.maxConnections;
    }
    /**
     * @return The name of the SSL-VPN server.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The port used by the SSL-VPN server.
     * 
     */
    public Integer port() {
        return this.port;
    }
    /**
     * @return The protocol used by the SSL-VPN server.
     * 
     */
    public String proto() {
        return this.proto;
    }
    /**
     * @return Use the VPN gateway ID as the search key.
     * 
     */
    public String vpnGatewayId() {
        return this.vpnGatewayId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSslVpnServersServer defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String cipher;
        private String clientIpPool;
        private Boolean compress;
        private Integer connections;
        private String createTime;
        private String id;
        private String internetIp;
        private String localSubnet;
        private Integer maxConnections;
        private String name;
        private Integer port;
        private String proto;
        private String vpnGatewayId;
        public Builder() {}
        public Builder(GetSslVpnServersServer defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.cipher = defaults.cipher;
    	      this.clientIpPool = defaults.clientIpPool;
    	      this.compress = defaults.compress;
    	      this.connections = defaults.connections;
    	      this.createTime = defaults.createTime;
    	      this.id = defaults.id;
    	      this.internetIp = defaults.internetIp;
    	      this.localSubnet = defaults.localSubnet;
    	      this.maxConnections = defaults.maxConnections;
    	      this.name = defaults.name;
    	      this.port = defaults.port;
    	      this.proto = defaults.proto;
    	      this.vpnGatewayId = defaults.vpnGatewayId;
        }

        @CustomType.Setter
        public Builder cipher(String cipher) {
            this.cipher = Objects.requireNonNull(cipher);
            return this;
        }
        @CustomType.Setter
        public Builder clientIpPool(String clientIpPool) {
            this.clientIpPool = Objects.requireNonNull(clientIpPool);
            return this;
        }
        @CustomType.Setter
        public Builder compress(Boolean compress) {
            this.compress = Objects.requireNonNull(compress);
            return this;
        }
        @CustomType.Setter
        public Builder connections(Integer connections) {
            this.connections = Objects.requireNonNull(connections);
            return this;
        }
        @CustomType.Setter
        public Builder createTime(String createTime) {
            this.createTime = Objects.requireNonNull(createTime);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder internetIp(String internetIp) {
            this.internetIp = Objects.requireNonNull(internetIp);
            return this;
        }
        @CustomType.Setter
        public Builder localSubnet(String localSubnet) {
            this.localSubnet = Objects.requireNonNull(localSubnet);
            return this;
        }
        @CustomType.Setter
        public Builder maxConnections(Integer maxConnections) {
            this.maxConnections = Objects.requireNonNull(maxConnections);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder port(Integer port) {
            this.port = Objects.requireNonNull(port);
            return this;
        }
        @CustomType.Setter
        public Builder proto(String proto) {
            this.proto = Objects.requireNonNull(proto);
            return this;
        }
        @CustomType.Setter
        public Builder vpnGatewayId(String vpnGatewayId) {
            this.vpnGatewayId = Objects.requireNonNull(vpnGatewayId);
            return this;
        }
        public GetSslVpnServersServer build() {
            final var o = new GetSslVpnServersServer();
            o.cipher = cipher;
            o.clientIpPool = clientIpPool;
            o.compress = compress;
            o.connections = connections;
            o.createTime = createTime;
            o.id = id;
            o.internetIp = internetIp;
            o.localSubnet = localSubnet;
            o.maxConnections = maxConnections;
            o.name = name;
            o.port = port;
            o.proto = proto;
            o.vpnGatewayId = vpnGatewayId;
            return o;
        }
    }
}
