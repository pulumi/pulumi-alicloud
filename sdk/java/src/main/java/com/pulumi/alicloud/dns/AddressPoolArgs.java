// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.dns;

import com.pulumi.alicloud.dns.inputs.AddressPoolAddressArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class AddressPoolArgs extends com.pulumi.resources.ResourceArgs {

    public static final AddressPoolArgs Empty = new AddressPoolArgs();

    /**
     * The name of the address pool.
     * 
     */
    @Import(name="addressPoolName", required=true)
    private Output<String> addressPoolName;

    /**
     * @return The name of the address pool.
     * 
     */
    public Output<String> addressPoolName() {
        return this.addressPoolName;
    }

    /**
     * The address lists of the Address Pool. See `address` below for details.
     * 
     */
    @Import(name="addresses", required=true)
    private Output<List<AddressPoolAddressArgs>> addresses;

    /**
     * @return The address lists of the Address Pool. See `address` below for details.
     * 
     */
    public Output<List<AddressPoolAddressArgs>> addresses() {
        return this.addresses;
    }

    /**
     * The ID of the instance.
     * 
     */
    @Import(name="instanceId", required=true)
    private Output<String> instanceId;

    /**
     * @return The ID of the instance.
     * 
     */
    public Output<String> instanceId() {
        return this.instanceId;
    }

    /**
     * The load balancing policy of the address pool. Valid values:`ALL_RR` or `RATIO`. `ALL_RR`: returns all addresses. `RATIO`: returns addresses by weight.
     * 
     */
    @Import(name="lbaStrategy", required=true)
    private Output<String> lbaStrategy;

    /**
     * @return The load balancing policy of the address pool. Valid values:`ALL_RR` or `RATIO`. `ALL_RR`: returns all addresses. `RATIO`: returns addresses by weight.
     * 
     */
    public Output<String> lbaStrategy() {
        return this.lbaStrategy;
    }

    /**
     * The type of the address pool. Valid values: `IPV4`, `IPV6`, `DOMAIN`.
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return The type of the address pool. Valid values: `IPV4`, `IPV6`, `DOMAIN`.
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    private AddressPoolArgs() {}

    private AddressPoolArgs(AddressPoolArgs $) {
        this.addressPoolName = $.addressPoolName;
        this.addresses = $.addresses;
        this.instanceId = $.instanceId;
        this.lbaStrategy = $.lbaStrategy;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AddressPoolArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AddressPoolArgs $;

        public Builder() {
            $ = new AddressPoolArgs();
        }

        public Builder(AddressPoolArgs defaults) {
            $ = new AddressPoolArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param addressPoolName The name of the address pool.
         * 
         * @return builder
         * 
         */
        public Builder addressPoolName(Output<String> addressPoolName) {
            $.addressPoolName = addressPoolName;
            return this;
        }

        /**
         * @param addressPoolName The name of the address pool.
         * 
         * @return builder
         * 
         */
        public Builder addressPoolName(String addressPoolName) {
            return addressPoolName(Output.of(addressPoolName));
        }

        /**
         * @param addresses The address lists of the Address Pool. See `address` below for details.
         * 
         * @return builder
         * 
         */
        public Builder addresses(Output<List<AddressPoolAddressArgs>> addresses) {
            $.addresses = addresses;
            return this;
        }

        /**
         * @param addresses The address lists of the Address Pool. See `address` below for details.
         * 
         * @return builder
         * 
         */
        public Builder addresses(List<AddressPoolAddressArgs> addresses) {
            return addresses(Output.of(addresses));
        }

        /**
         * @param addresses The address lists of the Address Pool. See `address` below for details.
         * 
         * @return builder
         * 
         */
        public Builder addresses(AddressPoolAddressArgs... addresses) {
            return addresses(List.of(addresses));
        }

        /**
         * @param instanceId The ID of the instance.
         * 
         * @return builder
         * 
         */
        public Builder instanceId(Output<String> instanceId) {
            $.instanceId = instanceId;
            return this;
        }

        /**
         * @param instanceId The ID of the instance.
         * 
         * @return builder
         * 
         */
        public Builder instanceId(String instanceId) {
            return instanceId(Output.of(instanceId));
        }

        /**
         * @param lbaStrategy The load balancing policy of the address pool. Valid values:`ALL_RR` or `RATIO`. `ALL_RR`: returns all addresses. `RATIO`: returns addresses by weight.
         * 
         * @return builder
         * 
         */
        public Builder lbaStrategy(Output<String> lbaStrategy) {
            $.lbaStrategy = lbaStrategy;
            return this;
        }

        /**
         * @param lbaStrategy The load balancing policy of the address pool. Valid values:`ALL_RR` or `RATIO`. `ALL_RR`: returns all addresses. `RATIO`: returns addresses by weight.
         * 
         * @return builder
         * 
         */
        public Builder lbaStrategy(String lbaStrategy) {
            return lbaStrategy(Output.of(lbaStrategy));
        }

        /**
         * @param type The type of the address pool. Valid values: `IPV4`, `IPV6`, `DOMAIN`.
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type The type of the address pool. Valid values: `IPV4`, `IPV6`, `DOMAIN`.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public AddressPoolArgs build() {
            if ($.addressPoolName == null) {
                throw new MissingRequiredPropertyException("AddressPoolArgs", "addressPoolName");
            }
            if ($.addresses == null) {
                throw new MissingRequiredPropertyException("AddressPoolArgs", "addresses");
            }
            if ($.instanceId == null) {
                throw new MissingRequiredPropertyException("AddressPoolArgs", "instanceId");
            }
            if ($.lbaStrategy == null) {
                throw new MissingRequiredPropertyException("AddressPoolArgs", "lbaStrategy");
            }
            if ($.type == null) {
                throw new MissingRequiredPropertyException("AddressPoolArgs", "type");
            }
            return $;
        }
    }

}
