// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.aligreen;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class AuditCallbackArgs extends com.pulumi.resources.ResourceArgs {

    public static final AuditCallbackArgs Empty = new AuditCallbackArgs();

    /**
     * The AuditCallback name defined by the customer. It can contain no more than 20 characters in Chinese, English, underscore (_), and digits.
     * 
     */
    @Import(name="auditCallbackName", required=true)
    private Output<String> auditCallbackName;

    /**
     * @return The AuditCallback name defined by the customer. It can contain no more than 20 characters in Chinese, English, underscore (_), and digits.
     * 
     */
    public Output<String> auditCallbackName() {
        return this.auditCallbackName;
    }

    /**
     * List of audit results supported by message notification. Value: block: confirmed violation, review: Suspected violation, review: normal.
     * 
     */
    @Import(name="callbackSuggestions", required=true)
    private Output<List<String>> callbackSuggestions;

    /**
     * @return List of audit results supported by message notification. Value: block: confirmed violation, review: Suspected violation, review: normal.
     * 
     */
    public Output<List<String>> callbackSuggestions() {
        return this.callbackSuggestions;
    }

    /**
     * A list of Callback types. Value: machineScan: Machine audit result notification, selfAudit: self-service audit notification.
     * 
     */
    @Import(name="callbackTypes", required=true)
    private Output<List<String>> callbackTypes;

    /**
     * @return A list of Callback types. Value: machineScan: Machine audit result notification, selfAudit: self-service audit notification.
     * 
     */
    public Output<List<String>> callbackTypes() {
        return this.callbackTypes;
    }

    /**
     * The encryption algorithm is used to verify that the callback request is sent by the content security service to your business service. The value is SHA256:SHA256 encryption algorithm and SM3: SM3 encryption algorithm.
     * 
     */
    @Import(name="cryptType", required=true)
    private Output<String> cryptType;

    /**
     * @return The encryption algorithm is used to verify that the callback request is sent by the content security service to your business service. The value is SHA256:SHA256 encryption algorithm and SM3: SM3 encryption algorithm.
     * 
     */
    public Output<String> cryptType() {
        return this.cryptType;
    }

    /**
     * The detection result will be called back to the url.
     * 
     */
    @Import(name="url", required=true)
    private Output<String> url;

    /**
     * @return The detection result will be called back to the url.
     * 
     */
    public Output<String> url() {
        return this.url;
    }

    private AuditCallbackArgs() {}

    private AuditCallbackArgs(AuditCallbackArgs $) {
        this.auditCallbackName = $.auditCallbackName;
        this.callbackSuggestions = $.callbackSuggestions;
        this.callbackTypes = $.callbackTypes;
        this.cryptType = $.cryptType;
        this.url = $.url;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AuditCallbackArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AuditCallbackArgs $;

        public Builder() {
            $ = new AuditCallbackArgs();
        }

        public Builder(AuditCallbackArgs defaults) {
            $ = new AuditCallbackArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param auditCallbackName The AuditCallback name defined by the customer. It can contain no more than 20 characters in Chinese, English, underscore (_), and digits.
         * 
         * @return builder
         * 
         */
        public Builder auditCallbackName(Output<String> auditCallbackName) {
            $.auditCallbackName = auditCallbackName;
            return this;
        }

        /**
         * @param auditCallbackName The AuditCallback name defined by the customer. It can contain no more than 20 characters in Chinese, English, underscore (_), and digits.
         * 
         * @return builder
         * 
         */
        public Builder auditCallbackName(String auditCallbackName) {
            return auditCallbackName(Output.of(auditCallbackName));
        }

        /**
         * @param callbackSuggestions List of audit results supported by message notification. Value: block: confirmed violation, review: Suspected violation, review: normal.
         * 
         * @return builder
         * 
         */
        public Builder callbackSuggestions(Output<List<String>> callbackSuggestions) {
            $.callbackSuggestions = callbackSuggestions;
            return this;
        }

        /**
         * @param callbackSuggestions List of audit results supported by message notification. Value: block: confirmed violation, review: Suspected violation, review: normal.
         * 
         * @return builder
         * 
         */
        public Builder callbackSuggestions(List<String> callbackSuggestions) {
            return callbackSuggestions(Output.of(callbackSuggestions));
        }

        /**
         * @param callbackSuggestions List of audit results supported by message notification. Value: block: confirmed violation, review: Suspected violation, review: normal.
         * 
         * @return builder
         * 
         */
        public Builder callbackSuggestions(String... callbackSuggestions) {
            return callbackSuggestions(List.of(callbackSuggestions));
        }

        /**
         * @param callbackTypes A list of Callback types. Value: machineScan: Machine audit result notification, selfAudit: self-service audit notification.
         * 
         * @return builder
         * 
         */
        public Builder callbackTypes(Output<List<String>> callbackTypes) {
            $.callbackTypes = callbackTypes;
            return this;
        }

        /**
         * @param callbackTypes A list of Callback types. Value: machineScan: Machine audit result notification, selfAudit: self-service audit notification.
         * 
         * @return builder
         * 
         */
        public Builder callbackTypes(List<String> callbackTypes) {
            return callbackTypes(Output.of(callbackTypes));
        }

        /**
         * @param callbackTypes A list of Callback types. Value: machineScan: Machine audit result notification, selfAudit: self-service audit notification.
         * 
         * @return builder
         * 
         */
        public Builder callbackTypes(String... callbackTypes) {
            return callbackTypes(List.of(callbackTypes));
        }

        /**
         * @param cryptType The encryption algorithm is used to verify that the callback request is sent by the content security service to your business service. The value is SHA256:SHA256 encryption algorithm and SM3: SM3 encryption algorithm.
         * 
         * @return builder
         * 
         */
        public Builder cryptType(Output<String> cryptType) {
            $.cryptType = cryptType;
            return this;
        }

        /**
         * @param cryptType The encryption algorithm is used to verify that the callback request is sent by the content security service to your business service. The value is SHA256:SHA256 encryption algorithm and SM3: SM3 encryption algorithm.
         * 
         * @return builder
         * 
         */
        public Builder cryptType(String cryptType) {
            return cryptType(Output.of(cryptType));
        }

        /**
         * @param url The detection result will be called back to the url.
         * 
         * @return builder
         * 
         */
        public Builder url(Output<String> url) {
            $.url = url;
            return this;
        }

        /**
         * @param url The detection result will be called back to the url.
         * 
         * @return builder
         * 
         */
        public Builder url(String url) {
            return url(Output.of(url));
        }

        public AuditCallbackArgs build() {
            if ($.auditCallbackName == null) {
                throw new MissingRequiredPropertyException("AuditCallbackArgs", "auditCallbackName");
            }
            if ($.callbackSuggestions == null) {
                throw new MissingRequiredPropertyException("AuditCallbackArgs", "callbackSuggestions");
            }
            if ($.callbackTypes == null) {
                throw new MissingRequiredPropertyException("AuditCallbackArgs", "callbackTypes");
            }
            if ($.cryptType == null) {
                throw new MissingRequiredPropertyException("AuditCallbackArgs", "cryptType");
            }
            if ($.url == null) {
                throw new MissingRequiredPropertyException("AuditCallbackArgs", "url");
            }
            return $;
        }
    }

}
