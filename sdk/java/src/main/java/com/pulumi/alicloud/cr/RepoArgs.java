// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.cr;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RepoArgs extends com.pulumi.resources.ResourceArgs {

    public static final RepoArgs Empty = new RepoArgs();

    /**
     * The repository specific information. MarkDown format is supported, and the length limit is 2000.
     * 
     */
    @Import(name="detail")
    private @Nullable Output<String> detail;

    /**
     * @return The repository specific information. MarkDown format is supported, and the length limit is 2000.
     * 
     */
    public Optional<Output<String>> detail() {
        return Optional.ofNullable(this.detail);
    }

    /**
     * Name of container registry repository.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of container registry repository.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Name of container registry namespace where repository is located.
     * 
     */
    @Import(name="namespace", required=true)
    private Output<String> namespace;

    /**
     * @return Name of container registry namespace where repository is located.
     * 
     */
    public Output<String> namespace() {
        return this.namespace;
    }

    /**
     * `PUBLIC` or `PRIVATE`, repo&#39;s visibility.
     * 
     */
    @Import(name="repoType", required=true)
    private Output<String> repoType;

    /**
     * @return `PUBLIC` or `PRIVATE`, repo&#39;s visibility.
     * 
     */
    public Output<String> repoType() {
        return this.repoType;
    }

    /**
     * The repository general information. It can contain 1 to 80 characters.
     * 
     */
    @Import(name="summary", required=true)
    private Output<String> summary;

    /**
     * @return The repository general information. It can contain 1 to 80 characters.
     * 
     */
    public Output<String> summary() {
        return this.summary;
    }

    private RepoArgs() {}

    private RepoArgs(RepoArgs $) {
        this.detail = $.detail;
        this.name = $.name;
        this.namespace = $.namespace;
        this.repoType = $.repoType;
        this.summary = $.summary;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RepoArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RepoArgs $;

        public Builder() {
            $ = new RepoArgs();
        }

        public Builder(RepoArgs defaults) {
            $ = new RepoArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param detail The repository specific information. MarkDown format is supported, and the length limit is 2000.
         * 
         * @return builder
         * 
         */
        public Builder detail(@Nullable Output<String> detail) {
            $.detail = detail;
            return this;
        }

        /**
         * @param detail The repository specific information. MarkDown format is supported, and the length limit is 2000.
         * 
         * @return builder
         * 
         */
        public Builder detail(String detail) {
            return detail(Output.of(detail));
        }

        /**
         * @param name Name of container registry repository.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of container registry repository.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param namespace Name of container registry namespace where repository is located.
         * 
         * @return builder
         * 
         */
        public Builder namespace(Output<String> namespace) {
            $.namespace = namespace;
            return this;
        }

        /**
         * @param namespace Name of container registry namespace where repository is located.
         * 
         * @return builder
         * 
         */
        public Builder namespace(String namespace) {
            return namespace(Output.of(namespace));
        }

        /**
         * @param repoType `PUBLIC` or `PRIVATE`, repo&#39;s visibility.
         * 
         * @return builder
         * 
         */
        public Builder repoType(Output<String> repoType) {
            $.repoType = repoType;
            return this;
        }

        /**
         * @param repoType `PUBLIC` or `PRIVATE`, repo&#39;s visibility.
         * 
         * @return builder
         * 
         */
        public Builder repoType(String repoType) {
            return repoType(Output.of(repoType));
        }

        /**
         * @param summary The repository general information. It can contain 1 to 80 characters.
         * 
         * @return builder
         * 
         */
        public Builder summary(Output<String> summary) {
            $.summary = summary;
            return this;
        }

        /**
         * @param summary The repository general information. It can contain 1 to 80 characters.
         * 
         * @return builder
         * 
         */
        public Builder summary(String summary) {
            return summary(Output.of(summary));
        }

        public RepoArgs build() {
            if ($.namespace == null) {
                throw new MissingRequiredPropertyException("RepoArgs", "namespace");
            }
            if ($.repoType == null) {
                throw new MissingRequiredPropertyException("RepoArgs", "repoType");
            }
            if ($.summary == null) {
                throw new MissingRequiredPropertyException("RepoArgs", "summary");
            }
            return $;
        }
    }

}
