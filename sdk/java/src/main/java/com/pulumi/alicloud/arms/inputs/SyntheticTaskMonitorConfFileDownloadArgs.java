// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.arms.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SyntheticTaskMonitorConfFileDownloadArgs extends com.pulumi.resources.ResourceArgs {

    public static final SyntheticTaskMonitorConfFileDownloadArgs Empty = new SyntheticTaskMonitorConfFileDownloadArgs();

    @Import(name="connectionTimeout")
    private @Nullable Output<Integer> connectionTimeout;

    public Optional<Output<Integer>> connectionTimeout() {
        return Optional.ofNullable(this.connectionTimeout);
    }

    @Import(name="customHeaderContent")
    private @Nullable Output<Map<String,Object>> customHeaderContent;

    public Optional<Output<Map<String,Object>>> customHeaderContent() {
        return Optional.ofNullable(this.customHeaderContent);
    }

    @Import(name="downloadKernel")
    private @Nullable Output<Integer> downloadKernel;

    public Optional<Output<Integer>> downloadKernel() {
        return Optional.ofNullable(this.downloadKernel);
    }

    @Import(name="ignoreCertificateAuthError")
    private @Nullable Output<Integer> ignoreCertificateAuthError;

    public Optional<Output<Integer>> ignoreCertificateAuthError() {
        return Optional.ofNullable(this.ignoreCertificateAuthError);
    }

    @Import(name="ignoreCertificateCanceledError")
    private @Nullable Output<Integer> ignoreCertificateCanceledError;

    public Optional<Output<Integer>> ignoreCertificateCanceledError() {
        return Optional.ofNullable(this.ignoreCertificateCanceledError);
    }

    @Import(name="ignoreCertificateOutOfDateError")
    private @Nullable Output<Integer> ignoreCertificateOutOfDateError;

    public Optional<Output<Integer>> ignoreCertificateOutOfDateError() {
        return Optional.ofNullable(this.ignoreCertificateOutOfDateError);
    }

    @Import(name="ignoreCertificateStatusError")
    private @Nullable Output<Integer> ignoreCertificateStatusError;

    public Optional<Output<Integer>> ignoreCertificateStatusError() {
        return Optional.ofNullable(this.ignoreCertificateStatusError);
    }

    @Import(name="ignoreCertificateUntrustworthyError")
    private @Nullable Output<Integer> ignoreCertificateUntrustworthyError;

    public Optional<Output<Integer>> ignoreCertificateUntrustworthyError() {
        return Optional.ofNullable(this.ignoreCertificateUntrustworthyError);
    }

    @Import(name="ignoreCertificateUsingError")
    private @Nullable Output<Integer> ignoreCertificateUsingError;

    public Optional<Output<Integer>> ignoreCertificateUsingError() {
        return Optional.ofNullable(this.ignoreCertificateUsingError);
    }

    @Import(name="ignoreInvalidHostError")
    private @Nullable Output<Integer> ignoreInvalidHostError;

    public Optional<Output<Integer>> ignoreInvalidHostError() {
        return Optional.ofNullable(this.ignoreInvalidHostError);
    }

    @Import(name="monitorTimeout")
    private @Nullable Output<Integer> monitorTimeout;

    public Optional<Output<Integer>> monitorTimeout() {
        return Optional.ofNullable(this.monitorTimeout);
    }

    @Import(name="quickProtocol")
    private @Nullable Output<Integer> quickProtocol;

    public Optional<Output<Integer>> quickProtocol() {
        return Optional.ofNullable(this.quickProtocol);
    }

    @Import(name="redirection")
    private @Nullable Output<Integer> redirection;

    public Optional<Output<Integer>> redirection() {
        return Optional.ofNullable(this.redirection);
    }

    @Import(name="targetUrl", required=true)
    private Output<String> targetUrl;

    public Output<String> targetUrl() {
        return this.targetUrl;
    }

    @Import(name="transmissionSize")
    private @Nullable Output<Integer> transmissionSize;

    public Optional<Output<Integer>> transmissionSize() {
        return Optional.ofNullable(this.transmissionSize);
    }

    @Import(name="validateKeywords")
    private @Nullable Output<String> validateKeywords;

    public Optional<Output<String>> validateKeywords() {
        return Optional.ofNullable(this.validateKeywords);
    }

    @Import(name="verifyWay")
    private @Nullable Output<Integer> verifyWay;

    public Optional<Output<Integer>> verifyWay() {
        return Optional.ofNullable(this.verifyWay);
    }

    @Import(name="whiteList")
    private @Nullable Output<String> whiteList;

    public Optional<Output<String>> whiteList() {
        return Optional.ofNullable(this.whiteList);
    }

    private SyntheticTaskMonitorConfFileDownloadArgs() {}

    private SyntheticTaskMonitorConfFileDownloadArgs(SyntheticTaskMonitorConfFileDownloadArgs $) {
        this.connectionTimeout = $.connectionTimeout;
        this.customHeaderContent = $.customHeaderContent;
        this.downloadKernel = $.downloadKernel;
        this.ignoreCertificateAuthError = $.ignoreCertificateAuthError;
        this.ignoreCertificateCanceledError = $.ignoreCertificateCanceledError;
        this.ignoreCertificateOutOfDateError = $.ignoreCertificateOutOfDateError;
        this.ignoreCertificateStatusError = $.ignoreCertificateStatusError;
        this.ignoreCertificateUntrustworthyError = $.ignoreCertificateUntrustworthyError;
        this.ignoreCertificateUsingError = $.ignoreCertificateUsingError;
        this.ignoreInvalidHostError = $.ignoreInvalidHostError;
        this.monitorTimeout = $.monitorTimeout;
        this.quickProtocol = $.quickProtocol;
        this.redirection = $.redirection;
        this.targetUrl = $.targetUrl;
        this.transmissionSize = $.transmissionSize;
        this.validateKeywords = $.validateKeywords;
        this.verifyWay = $.verifyWay;
        this.whiteList = $.whiteList;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SyntheticTaskMonitorConfFileDownloadArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SyntheticTaskMonitorConfFileDownloadArgs $;

        public Builder() {
            $ = new SyntheticTaskMonitorConfFileDownloadArgs();
        }

        public Builder(SyntheticTaskMonitorConfFileDownloadArgs defaults) {
            $ = new SyntheticTaskMonitorConfFileDownloadArgs(Objects.requireNonNull(defaults));
        }

        public Builder connectionTimeout(@Nullable Output<Integer> connectionTimeout) {
            $.connectionTimeout = connectionTimeout;
            return this;
        }

        public Builder connectionTimeout(Integer connectionTimeout) {
            return connectionTimeout(Output.of(connectionTimeout));
        }

        public Builder customHeaderContent(@Nullable Output<Map<String,Object>> customHeaderContent) {
            $.customHeaderContent = customHeaderContent;
            return this;
        }

        public Builder customHeaderContent(Map<String,Object> customHeaderContent) {
            return customHeaderContent(Output.of(customHeaderContent));
        }

        public Builder downloadKernel(@Nullable Output<Integer> downloadKernel) {
            $.downloadKernel = downloadKernel;
            return this;
        }

        public Builder downloadKernel(Integer downloadKernel) {
            return downloadKernel(Output.of(downloadKernel));
        }

        public Builder ignoreCertificateAuthError(@Nullable Output<Integer> ignoreCertificateAuthError) {
            $.ignoreCertificateAuthError = ignoreCertificateAuthError;
            return this;
        }

        public Builder ignoreCertificateAuthError(Integer ignoreCertificateAuthError) {
            return ignoreCertificateAuthError(Output.of(ignoreCertificateAuthError));
        }

        public Builder ignoreCertificateCanceledError(@Nullable Output<Integer> ignoreCertificateCanceledError) {
            $.ignoreCertificateCanceledError = ignoreCertificateCanceledError;
            return this;
        }

        public Builder ignoreCertificateCanceledError(Integer ignoreCertificateCanceledError) {
            return ignoreCertificateCanceledError(Output.of(ignoreCertificateCanceledError));
        }

        public Builder ignoreCertificateOutOfDateError(@Nullable Output<Integer> ignoreCertificateOutOfDateError) {
            $.ignoreCertificateOutOfDateError = ignoreCertificateOutOfDateError;
            return this;
        }

        public Builder ignoreCertificateOutOfDateError(Integer ignoreCertificateOutOfDateError) {
            return ignoreCertificateOutOfDateError(Output.of(ignoreCertificateOutOfDateError));
        }

        public Builder ignoreCertificateStatusError(@Nullable Output<Integer> ignoreCertificateStatusError) {
            $.ignoreCertificateStatusError = ignoreCertificateStatusError;
            return this;
        }

        public Builder ignoreCertificateStatusError(Integer ignoreCertificateStatusError) {
            return ignoreCertificateStatusError(Output.of(ignoreCertificateStatusError));
        }

        public Builder ignoreCertificateUntrustworthyError(@Nullable Output<Integer> ignoreCertificateUntrustworthyError) {
            $.ignoreCertificateUntrustworthyError = ignoreCertificateUntrustworthyError;
            return this;
        }

        public Builder ignoreCertificateUntrustworthyError(Integer ignoreCertificateUntrustworthyError) {
            return ignoreCertificateUntrustworthyError(Output.of(ignoreCertificateUntrustworthyError));
        }

        public Builder ignoreCertificateUsingError(@Nullable Output<Integer> ignoreCertificateUsingError) {
            $.ignoreCertificateUsingError = ignoreCertificateUsingError;
            return this;
        }

        public Builder ignoreCertificateUsingError(Integer ignoreCertificateUsingError) {
            return ignoreCertificateUsingError(Output.of(ignoreCertificateUsingError));
        }

        public Builder ignoreInvalidHostError(@Nullable Output<Integer> ignoreInvalidHostError) {
            $.ignoreInvalidHostError = ignoreInvalidHostError;
            return this;
        }

        public Builder ignoreInvalidHostError(Integer ignoreInvalidHostError) {
            return ignoreInvalidHostError(Output.of(ignoreInvalidHostError));
        }

        public Builder monitorTimeout(@Nullable Output<Integer> monitorTimeout) {
            $.monitorTimeout = monitorTimeout;
            return this;
        }

        public Builder monitorTimeout(Integer monitorTimeout) {
            return monitorTimeout(Output.of(monitorTimeout));
        }

        public Builder quickProtocol(@Nullable Output<Integer> quickProtocol) {
            $.quickProtocol = quickProtocol;
            return this;
        }

        public Builder quickProtocol(Integer quickProtocol) {
            return quickProtocol(Output.of(quickProtocol));
        }

        public Builder redirection(@Nullable Output<Integer> redirection) {
            $.redirection = redirection;
            return this;
        }

        public Builder redirection(Integer redirection) {
            return redirection(Output.of(redirection));
        }

        public Builder targetUrl(Output<String> targetUrl) {
            $.targetUrl = targetUrl;
            return this;
        }

        public Builder targetUrl(String targetUrl) {
            return targetUrl(Output.of(targetUrl));
        }

        public Builder transmissionSize(@Nullable Output<Integer> transmissionSize) {
            $.transmissionSize = transmissionSize;
            return this;
        }

        public Builder transmissionSize(Integer transmissionSize) {
            return transmissionSize(Output.of(transmissionSize));
        }

        public Builder validateKeywords(@Nullable Output<String> validateKeywords) {
            $.validateKeywords = validateKeywords;
            return this;
        }

        public Builder validateKeywords(String validateKeywords) {
            return validateKeywords(Output.of(validateKeywords));
        }

        public Builder verifyWay(@Nullable Output<Integer> verifyWay) {
            $.verifyWay = verifyWay;
            return this;
        }

        public Builder verifyWay(Integer verifyWay) {
            return verifyWay(Output.of(verifyWay));
        }

        public Builder whiteList(@Nullable Output<String> whiteList) {
            $.whiteList = whiteList;
            return this;
        }

        public Builder whiteList(String whiteList) {
            return whiteList(Output.of(whiteList));
        }

        public SyntheticTaskMonitorConfFileDownloadArgs build() {
            if ($.targetUrl == null) {
                throw new MissingRequiredPropertyException("SyntheticTaskMonitorConfFileDownloadArgs", "targetUrl");
            }
            return $;
        }
    }

}
