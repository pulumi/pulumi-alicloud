// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.cen;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class VbrHealthCheckArgs extends com.pulumi.resources.ResourceArgs {

    public static final VbrHealthCheckArgs Empty = new VbrHealthCheckArgs();

    /**
     * The ID of the CEN instance.
     * 
     */
    @Import(name="cenId", required=true)
    private Output<String> cenId;

    /**
     * @return The ID of the CEN instance.
     * 
     */
    public Output<String> cenId() {
        return this.cenId;
    }

    /**
     * Specifies the interval at which the health check sends continuous detection packets. Default value: 2. Value range: 2 to 3.
     * 
     */
    @Import(name="healthCheckInterval")
    private @Nullable Output<Integer> healthCheckInterval;

    /**
     * @return Specifies the interval at which the health check sends continuous detection packets. Default value: 2. Value range: 2 to 3.
     * 
     */
    public Optional<Output<Integer>> healthCheckInterval() {
        return Optional.ofNullable(this.healthCheckInterval);
    }

    /**
     * The source IP address of health checks.
     * 
     */
    @Import(name="healthCheckSourceIp")
    private @Nullable Output<String> healthCheckSourceIp;

    /**
     * @return The source IP address of health checks.
     * 
     */
    public Optional<Output<String>> healthCheckSourceIp() {
        return Optional.ofNullable(this.healthCheckSourceIp);
    }

    /**
     * The destination IP address of health checks.
     * 
     */
    @Import(name="healthCheckTargetIp", required=true)
    private Output<String> healthCheckTargetIp;

    /**
     * @return The destination IP address of health checks.
     * 
     */
    public Output<String> healthCheckTargetIp() {
        return this.healthCheckTargetIp;
    }

    /**
     * Specifies the number of probe messages sent by the health check. Default value: 8. Value range: 3 to 8.
     * 
     */
    @Import(name="healthyThreshold")
    private @Nullable Output<Integer> healthyThreshold;

    /**
     * @return Specifies the number of probe messages sent by the health check. Default value: 8. Value range: 3 to 8.
     * 
     */
    public Optional<Output<Integer>> healthyThreshold() {
        return Optional.ofNullable(this.healthyThreshold);
    }

    /**
     * The ID of the VBR.
     * 
     */
    @Import(name="vbrInstanceId", required=true)
    private Output<String> vbrInstanceId;

    /**
     * @return The ID of the VBR.
     * 
     */
    public Output<String> vbrInstanceId() {
        return this.vbrInstanceId;
    }

    /**
     * The ID of the account to which the VBR belongs.
     * 
     */
    @Import(name="vbrInstanceOwnerId")
    private @Nullable Output<Integer> vbrInstanceOwnerId;

    /**
     * @return The ID of the account to which the VBR belongs.
     * 
     */
    public Optional<Output<Integer>> vbrInstanceOwnerId() {
        return Optional.ofNullable(this.vbrInstanceOwnerId);
    }

    /**
     * The ID of the region to which the VBR belongs.
     * 
     * -&gt;**NOTE:** The `alicloud.cen.VbrHealthCheck` resource depends on the related `alicloud.cen.InstanceAttachment` resource.
     * 
     */
    @Import(name="vbrInstanceRegionId", required=true)
    private Output<String> vbrInstanceRegionId;

    /**
     * @return The ID of the region to which the VBR belongs.
     * 
     * -&gt;**NOTE:** The `alicloud.cen.VbrHealthCheck` resource depends on the related `alicloud.cen.InstanceAttachment` resource.
     * 
     */
    public Output<String> vbrInstanceRegionId() {
        return this.vbrInstanceRegionId;
    }

    private VbrHealthCheckArgs() {}

    private VbrHealthCheckArgs(VbrHealthCheckArgs $) {
        this.cenId = $.cenId;
        this.healthCheckInterval = $.healthCheckInterval;
        this.healthCheckSourceIp = $.healthCheckSourceIp;
        this.healthCheckTargetIp = $.healthCheckTargetIp;
        this.healthyThreshold = $.healthyThreshold;
        this.vbrInstanceId = $.vbrInstanceId;
        this.vbrInstanceOwnerId = $.vbrInstanceOwnerId;
        this.vbrInstanceRegionId = $.vbrInstanceRegionId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VbrHealthCheckArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VbrHealthCheckArgs $;

        public Builder() {
            $ = new VbrHealthCheckArgs();
        }

        public Builder(VbrHealthCheckArgs defaults) {
            $ = new VbrHealthCheckArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param cenId The ID of the CEN instance.
         * 
         * @return builder
         * 
         */
        public Builder cenId(Output<String> cenId) {
            $.cenId = cenId;
            return this;
        }

        /**
         * @param cenId The ID of the CEN instance.
         * 
         * @return builder
         * 
         */
        public Builder cenId(String cenId) {
            return cenId(Output.of(cenId));
        }

        /**
         * @param healthCheckInterval Specifies the interval at which the health check sends continuous detection packets. Default value: 2. Value range: 2 to 3.
         * 
         * @return builder
         * 
         */
        public Builder healthCheckInterval(@Nullable Output<Integer> healthCheckInterval) {
            $.healthCheckInterval = healthCheckInterval;
            return this;
        }

        /**
         * @param healthCheckInterval Specifies the interval at which the health check sends continuous detection packets. Default value: 2. Value range: 2 to 3.
         * 
         * @return builder
         * 
         */
        public Builder healthCheckInterval(Integer healthCheckInterval) {
            return healthCheckInterval(Output.of(healthCheckInterval));
        }

        /**
         * @param healthCheckSourceIp The source IP address of health checks.
         * 
         * @return builder
         * 
         */
        public Builder healthCheckSourceIp(@Nullable Output<String> healthCheckSourceIp) {
            $.healthCheckSourceIp = healthCheckSourceIp;
            return this;
        }

        /**
         * @param healthCheckSourceIp The source IP address of health checks.
         * 
         * @return builder
         * 
         */
        public Builder healthCheckSourceIp(String healthCheckSourceIp) {
            return healthCheckSourceIp(Output.of(healthCheckSourceIp));
        }

        /**
         * @param healthCheckTargetIp The destination IP address of health checks.
         * 
         * @return builder
         * 
         */
        public Builder healthCheckTargetIp(Output<String> healthCheckTargetIp) {
            $.healthCheckTargetIp = healthCheckTargetIp;
            return this;
        }

        /**
         * @param healthCheckTargetIp The destination IP address of health checks.
         * 
         * @return builder
         * 
         */
        public Builder healthCheckTargetIp(String healthCheckTargetIp) {
            return healthCheckTargetIp(Output.of(healthCheckTargetIp));
        }

        /**
         * @param healthyThreshold Specifies the number of probe messages sent by the health check. Default value: 8. Value range: 3 to 8.
         * 
         * @return builder
         * 
         */
        public Builder healthyThreshold(@Nullable Output<Integer> healthyThreshold) {
            $.healthyThreshold = healthyThreshold;
            return this;
        }

        /**
         * @param healthyThreshold Specifies the number of probe messages sent by the health check. Default value: 8. Value range: 3 to 8.
         * 
         * @return builder
         * 
         */
        public Builder healthyThreshold(Integer healthyThreshold) {
            return healthyThreshold(Output.of(healthyThreshold));
        }

        /**
         * @param vbrInstanceId The ID of the VBR.
         * 
         * @return builder
         * 
         */
        public Builder vbrInstanceId(Output<String> vbrInstanceId) {
            $.vbrInstanceId = vbrInstanceId;
            return this;
        }

        /**
         * @param vbrInstanceId The ID of the VBR.
         * 
         * @return builder
         * 
         */
        public Builder vbrInstanceId(String vbrInstanceId) {
            return vbrInstanceId(Output.of(vbrInstanceId));
        }

        /**
         * @param vbrInstanceOwnerId The ID of the account to which the VBR belongs.
         * 
         * @return builder
         * 
         */
        public Builder vbrInstanceOwnerId(@Nullable Output<Integer> vbrInstanceOwnerId) {
            $.vbrInstanceOwnerId = vbrInstanceOwnerId;
            return this;
        }

        /**
         * @param vbrInstanceOwnerId The ID of the account to which the VBR belongs.
         * 
         * @return builder
         * 
         */
        public Builder vbrInstanceOwnerId(Integer vbrInstanceOwnerId) {
            return vbrInstanceOwnerId(Output.of(vbrInstanceOwnerId));
        }

        /**
         * @param vbrInstanceRegionId The ID of the region to which the VBR belongs.
         * 
         * -&gt;**NOTE:** The `alicloud.cen.VbrHealthCheck` resource depends on the related `alicloud.cen.InstanceAttachment` resource.
         * 
         * @return builder
         * 
         */
        public Builder vbrInstanceRegionId(Output<String> vbrInstanceRegionId) {
            $.vbrInstanceRegionId = vbrInstanceRegionId;
            return this;
        }

        /**
         * @param vbrInstanceRegionId The ID of the region to which the VBR belongs.
         * 
         * -&gt;**NOTE:** The `alicloud.cen.VbrHealthCheck` resource depends on the related `alicloud.cen.InstanceAttachment` resource.
         * 
         * @return builder
         * 
         */
        public Builder vbrInstanceRegionId(String vbrInstanceRegionId) {
            return vbrInstanceRegionId(Output.of(vbrInstanceRegionId));
        }

        public VbrHealthCheckArgs build() {
            if ($.cenId == null) {
                throw new MissingRequiredPropertyException("VbrHealthCheckArgs", "cenId");
            }
            if ($.healthCheckTargetIp == null) {
                throw new MissingRequiredPropertyException("VbrHealthCheckArgs", "healthCheckTargetIp");
            }
            if ($.vbrInstanceId == null) {
                throw new MissingRequiredPropertyException("VbrHealthCheckArgs", "vbrInstanceId");
            }
            if ($.vbrInstanceRegionId == null) {
                throw new MissingRequiredPropertyException("VbrHealthCheckArgs", "vbrInstanceRegionId");
            }
            return $;
        }
    }

}
