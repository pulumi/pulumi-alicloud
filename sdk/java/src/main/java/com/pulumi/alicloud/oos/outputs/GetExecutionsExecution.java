// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.oos.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetExecutionsExecution {
    /**
     * @return The category of template. Valid: `AlarmTrigger`, `EventTrigger`, `Other` and `TimerTrigger`.
     * 
     */
    private String category;
    /**
     * @return The counters of OOS Execution.
     * 
     */
    private String counters;
    /**
     * @return The time when the execution was created.
     * 
     */
    private String createDate;
    /**
     * @return The time when the execution was ended.
     * 
     */
    private String endDate;
    /**
     * @return The user who execute the template.
     * 
     */
    private String executedBy;
    /**
     * @return ID of the OOS Executions.
     * 
     */
    private String executionId;
    /**
     * @return ID of the OOS Executions.
     * 
     */
    private String id;
    /**
     * @return Whether to include subtasks.
     * 
     */
    private Boolean isParent;
    /**
     * @return The mode of OOS Execution. Valid: `Automatic`, `Debug`.
     * 
     */
    private String mode;
    /**
     * @return The outputs of OOS Executions.
     * 
     */
    private String outputs;
    /**
     * @return The parameters required by the template
     * 
     */
    private String parameters;
    /**
     * @return The id of parent OOS Execution.
     * 
     */
    private String parentExecutionId;
    /**
     * @return The role that executes the current template.
     * 
     */
    private String ramRole;
    /**
     * @return The time when the template was started.
     * 
     */
    private String startDate;
    /**
     * @return The Status of OOS Execution. Valid: `Cancelled`, `Failed`, `Queued`, `Running`, `Started`, `Success`, `Waiting`.
     * 
     */
    private String status;
    /**
     * @return The message of status.
     * 
     */
    private String statusMessage;
    /**
     * @return The reason of status.
     * 
     */
    private String statusReason;
    /**
     * @return The id of execution template.
     * 
     */
    private String templateId;
    /**
     * @return The name of execution template.
     * 
     */
    private String templateName;
    /**
     * @return The version of execution template.
     * 
     */
    private String templateVersion;
    /**
     * @return The time when the template was updated.
     * 
     */
    private String updateDate;

    private GetExecutionsExecution() {}
    /**
     * @return The category of template. Valid: `AlarmTrigger`, `EventTrigger`, `Other` and `TimerTrigger`.
     * 
     */
    public String category() {
        return this.category;
    }
    /**
     * @return The counters of OOS Execution.
     * 
     */
    public String counters() {
        return this.counters;
    }
    /**
     * @return The time when the execution was created.
     * 
     */
    public String createDate() {
        return this.createDate;
    }
    /**
     * @return The time when the execution was ended.
     * 
     */
    public String endDate() {
        return this.endDate;
    }
    /**
     * @return The user who execute the template.
     * 
     */
    public String executedBy() {
        return this.executedBy;
    }
    /**
     * @return ID of the OOS Executions.
     * 
     */
    public String executionId() {
        return this.executionId;
    }
    /**
     * @return ID of the OOS Executions.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Whether to include subtasks.
     * 
     */
    public Boolean isParent() {
        return this.isParent;
    }
    /**
     * @return The mode of OOS Execution. Valid: `Automatic`, `Debug`.
     * 
     */
    public String mode() {
        return this.mode;
    }
    /**
     * @return The outputs of OOS Executions.
     * 
     */
    public String outputs() {
        return this.outputs;
    }
    /**
     * @return The parameters required by the template
     * 
     */
    public String parameters() {
        return this.parameters;
    }
    /**
     * @return The id of parent OOS Execution.
     * 
     */
    public String parentExecutionId() {
        return this.parentExecutionId;
    }
    /**
     * @return The role that executes the current template.
     * 
     */
    public String ramRole() {
        return this.ramRole;
    }
    /**
     * @return The time when the template was started.
     * 
     */
    public String startDate() {
        return this.startDate;
    }
    /**
     * @return The Status of OOS Execution. Valid: `Cancelled`, `Failed`, `Queued`, `Running`, `Started`, `Success`, `Waiting`.
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return The message of status.
     * 
     */
    public String statusMessage() {
        return this.statusMessage;
    }
    /**
     * @return The reason of status.
     * 
     */
    public String statusReason() {
        return this.statusReason;
    }
    /**
     * @return The id of execution template.
     * 
     */
    public String templateId() {
        return this.templateId;
    }
    /**
     * @return The name of execution template.
     * 
     */
    public String templateName() {
        return this.templateName;
    }
    /**
     * @return The version of execution template.
     * 
     */
    public String templateVersion() {
        return this.templateVersion;
    }
    /**
     * @return The time when the template was updated.
     * 
     */
    public String updateDate() {
        return this.updateDate;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetExecutionsExecution defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String category;
        private String counters;
        private String createDate;
        private String endDate;
        private String executedBy;
        private String executionId;
        private String id;
        private Boolean isParent;
        private String mode;
        private String outputs;
        private String parameters;
        private String parentExecutionId;
        private String ramRole;
        private String startDate;
        private String status;
        private String statusMessage;
        private String statusReason;
        private String templateId;
        private String templateName;
        private String templateVersion;
        private String updateDate;
        public Builder() {}
        public Builder(GetExecutionsExecution defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.category = defaults.category;
    	      this.counters = defaults.counters;
    	      this.createDate = defaults.createDate;
    	      this.endDate = defaults.endDate;
    	      this.executedBy = defaults.executedBy;
    	      this.executionId = defaults.executionId;
    	      this.id = defaults.id;
    	      this.isParent = defaults.isParent;
    	      this.mode = defaults.mode;
    	      this.outputs = defaults.outputs;
    	      this.parameters = defaults.parameters;
    	      this.parentExecutionId = defaults.parentExecutionId;
    	      this.ramRole = defaults.ramRole;
    	      this.startDate = defaults.startDate;
    	      this.status = defaults.status;
    	      this.statusMessage = defaults.statusMessage;
    	      this.statusReason = defaults.statusReason;
    	      this.templateId = defaults.templateId;
    	      this.templateName = defaults.templateName;
    	      this.templateVersion = defaults.templateVersion;
    	      this.updateDate = defaults.updateDate;
        }

        @CustomType.Setter
        public Builder category(String category) {
            this.category = Objects.requireNonNull(category);
            return this;
        }
        @CustomType.Setter
        public Builder counters(String counters) {
            this.counters = Objects.requireNonNull(counters);
            return this;
        }
        @CustomType.Setter
        public Builder createDate(String createDate) {
            this.createDate = Objects.requireNonNull(createDate);
            return this;
        }
        @CustomType.Setter
        public Builder endDate(String endDate) {
            this.endDate = Objects.requireNonNull(endDate);
            return this;
        }
        @CustomType.Setter
        public Builder executedBy(String executedBy) {
            this.executedBy = Objects.requireNonNull(executedBy);
            return this;
        }
        @CustomType.Setter
        public Builder executionId(String executionId) {
            this.executionId = Objects.requireNonNull(executionId);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder isParent(Boolean isParent) {
            this.isParent = Objects.requireNonNull(isParent);
            return this;
        }
        @CustomType.Setter
        public Builder mode(String mode) {
            this.mode = Objects.requireNonNull(mode);
            return this;
        }
        @CustomType.Setter
        public Builder outputs(String outputs) {
            this.outputs = Objects.requireNonNull(outputs);
            return this;
        }
        @CustomType.Setter
        public Builder parameters(String parameters) {
            this.parameters = Objects.requireNonNull(parameters);
            return this;
        }
        @CustomType.Setter
        public Builder parentExecutionId(String parentExecutionId) {
            this.parentExecutionId = Objects.requireNonNull(parentExecutionId);
            return this;
        }
        @CustomType.Setter
        public Builder ramRole(String ramRole) {
            this.ramRole = Objects.requireNonNull(ramRole);
            return this;
        }
        @CustomType.Setter
        public Builder startDate(String startDate) {
            this.startDate = Objects.requireNonNull(startDate);
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            this.status = Objects.requireNonNull(status);
            return this;
        }
        @CustomType.Setter
        public Builder statusMessage(String statusMessage) {
            this.statusMessage = Objects.requireNonNull(statusMessage);
            return this;
        }
        @CustomType.Setter
        public Builder statusReason(String statusReason) {
            this.statusReason = Objects.requireNonNull(statusReason);
            return this;
        }
        @CustomType.Setter
        public Builder templateId(String templateId) {
            this.templateId = Objects.requireNonNull(templateId);
            return this;
        }
        @CustomType.Setter
        public Builder templateName(String templateName) {
            this.templateName = Objects.requireNonNull(templateName);
            return this;
        }
        @CustomType.Setter
        public Builder templateVersion(String templateVersion) {
            this.templateVersion = Objects.requireNonNull(templateVersion);
            return this;
        }
        @CustomType.Setter
        public Builder updateDate(String updateDate) {
            this.updateDate = Objects.requireNonNull(updateDate);
            return this;
        }
        public GetExecutionsExecution build() {
            final var o = new GetExecutionsExecution();
            o.category = category;
            o.counters = counters;
            o.createDate = createDate;
            o.endDate = endDate;
            o.executedBy = executedBy;
            o.executionId = executionId;
            o.id = id;
            o.isParent = isParent;
            o.mode = mode;
            o.outputs = outputs;
            o.parameters = parameters;
            o.parentExecutionId = parentExecutionId;
            o.ramRole = ramRole;
            o.startDate = startDate;
            o.status = status;
            o.statusMessage = statusMessage;
            o.statusReason = statusReason;
            o.templateId = templateId;
            o.templateName = templateName;
            o.templateVersion = templateVersion;
            o.updateDate = updateDate;
            return o;
        }
    }
}
