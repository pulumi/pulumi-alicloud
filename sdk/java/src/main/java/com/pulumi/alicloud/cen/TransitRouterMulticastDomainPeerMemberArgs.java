// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.cen;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TransitRouterMulticastDomainPeerMemberArgs extends com.pulumi.resources.ResourceArgs {

    public static final TransitRouterMulticastDomainPeerMemberArgs Empty = new TransitRouterMulticastDomainPeerMemberArgs();

    /**
     * Specifies whether only to precheck the request.
     * 
     */
    @Import(name="dryRun")
    private @Nullable Output<Boolean> dryRun;

    /**
     * @return Specifies whether only to precheck the request.
     * 
     */
    public Optional<Output<Boolean>> dryRun() {
        return Optional.ofNullable(this.dryRun);
    }

    /**
     * The IP address of the multicast group to which the multicast member belongs. Value range: **224.0.0.1** to **239.255.255.254**.If the multicast group you specified does not exist in the current multicast domain, the system will automatically create a new multicast group for you in the current multicast domain.
     * 
     */
    @Import(name="groupIpAddress", required=true)
    private Output<String> groupIpAddress;

    /**
     * @return The IP address of the multicast group to which the multicast member belongs. Value range: **224.0.0.1** to **239.255.255.254**.If the multicast group you specified does not exist in the current multicast domain, the system will automatically create a new multicast group for you in the current multicast domain.
     * 
     */
    public Output<String> groupIpAddress() {
        return this.groupIpAddress;
    }

    /**
     * The IDs of the inter-region multicast domains.
     * 
     */
    @Import(name="peerTransitRouterMulticastDomainId", required=true)
    private Output<String> peerTransitRouterMulticastDomainId;

    /**
     * @return The IDs of the inter-region multicast domains.
     * 
     */
    public Output<String> peerTransitRouterMulticastDomainId() {
        return this.peerTransitRouterMulticastDomainId;
    }

    /**
     * The ID of the multicast domain to which the multicast member belongs.
     * 
     */
    @Import(name="transitRouterMulticastDomainId", required=true)
    private Output<String> transitRouterMulticastDomainId;

    /**
     * @return The ID of the multicast domain to which the multicast member belongs.
     * 
     */
    public Output<String> transitRouterMulticastDomainId() {
        return this.transitRouterMulticastDomainId;
    }

    private TransitRouterMulticastDomainPeerMemberArgs() {}

    private TransitRouterMulticastDomainPeerMemberArgs(TransitRouterMulticastDomainPeerMemberArgs $) {
        this.dryRun = $.dryRun;
        this.groupIpAddress = $.groupIpAddress;
        this.peerTransitRouterMulticastDomainId = $.peerTransitRouterMulticastDomainId;
        this.transitRouterMulticastDomainId = $.transitRouterMulticastDomainId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TransitRouterMulticastDomainPeerMemberArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TransitRouterMulticastDomainPeerMemberArgs $;

        public Builder() {
            $ = new TransitRouterMulticastDomainPeerMemberArgs();
        }

        public Builder(TransitRouterMulticastDomainPeerMemberArgs defaults) {
            $ = new TransitRouterMulticastDomainPeerMemberArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param dryRun Specifies whether only to precheck the request.
         * 
         * @return builder
         * 
         */
        public Builder dryRun(@Nullable Output<Boolean> dryRun) {
            $.dryRun = dryRun;
            return this;
        }

        /**
         * @param dryRun Specifies whether only to precheck the request.
         * 
         * @return builder
         * 
         */
        public Builder dryRun(Boolean dryRun) {
            return dryRun(Output.of(dryRun));
        }

        /**
         * @param groupIpAddress The IP address of the multicast group to which the multicast member belongs. Value range: **224.0.0.1** to **239.255.255.254**.If the multicast group you specified does not exist in the current multicast domain, the system will automatically create a new multicast group for you in the current multicast domain.
         * 
         * @return builder
         * 
         */
        public Builder groupIpAddress(Output<String> groupIpAddress) {
            $.groupIpAddress = groupIpAddress;
            return this;
        }

        /**
         * @param groupIpAddress The IP address of the multicast group to which the multicast member belongs. Value range: **224.0.0.1** to **239.255.255.254**.If the multicast group you specified does not exist in the current multicast domain, the system will automatically create a new multicast group for you in the current multicast domain.
         * 
         * @return builder
         * 
         */
        public Builder groupIpAddress(String groupIpAddress) {
            return groupIpAddress(Output.of(groupIpAddress));
        }

        /**
         * @param peerTransitRouterMulticastDomainId The IDs of the inter-region multicast domains.
         * 
         * @return builder
         * 
         */
        public Builder peerTransitRouterMulticastDomainId(Output<String> peerTransitRouterMulticastDomainId) {
            $.peerTransitRouterMulticastDomainId = peerTransitRouterMulticastDomainId;
            return this;
        }

        /**
         * @param peerTransitRouterMulticastDomainId The IDs of the inter-region multicast domains.
         * 
         * @return builder
         * 
         */
        public Builder peerTransitRouterMulticastDomainId(String peerTransitRouterMulticastDomainId) {
            return peerTransitRouterMulticastDomainId(Output.of(peerTransitRouterMulticastDomainId));
        }

        /**
         * @param transitRouterMulticastDomainId The ID of the multicast domain to which the multicast member belongs.
         * 
         * @return builder
         * 
         */
        public Builder transitRouterMulticastDomainId(Output<String> transitRouterMulticastDomainId) {
            $.transitRouterMulticastDomainId = transitRouterMulticastDomainId;
            return this;
        }

        /**
         * @param transitRouterMulticastDomainId The ID of the multicast domain to which the multicast member belongs.
         * 
         * @return builder
         * 
         */
        public Builder transitRouterMulticastDomainId(String transitRouterMulticastDomainId) {
            return transitRouterMulticastDomainId(Output.of(transitRouterMulticastDomainId));
        }

        public TransitRouterMulticastDomainPeerMemberArgs build() {
            if ($.groupIpAddress == null) {
                throw new MissingRequiredPropertyException("TransitRouterMulticastDomainPeerMemberArgs", "groupIpAddress");
            }
            if ($.peerTransitRouterMulticastDomainId == null) {
                throw new MissingRequiredPropertyException("TransitRouterMulticastDomainPeerMemberArgs", "peerTransitRouterMulticastDomainId");
            }
            if ($.transitRouterMulticastDomainId == null) {
                throw new MissingRequiredPropertyException("TransitRouterMulticastDomainPeerMemberArgs", "transitRouterMulticastDomainId");
            }
            return $;
        }
    }

}
