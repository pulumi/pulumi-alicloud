// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.arms;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Object;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class EnvironmentArgs extends com.pulumi.resources.ResourceArgs {

    public static final EnvironmentArgs Empty = new EnvironmentArgs();

    /**
     * The locale. The default is Chinese zh | en.
     * 
     */
    @Import(name="aliyunLang")
    private @Nullable Output<String> aliyunLang;

    /**
     * @return The locale. The default is Chinese zh | en.
     * 
     */
    public Optional<Output<String>> aliyunLang() {
        return Optional.ofNullable(this.aliyunLang);
    }

    /**
     * The id or vpcId of the bound container instance.
     * 
     */
    @Import(name="bindResourceId")
    private @Nullable Output<String> bindResourceId;

    /**
     * @return The id or vpcId of the bound container instance.
     * 
     */
    public Optional<Output<String>> bindResourceId() {
        return Optional.ofNullable(this.bindResourceId);
    }

    /**
     * The name of the resource.
     * 
     */
    @Import(name="environmentName")
    private @Nullable Output<String> environmentName;

    /**
     * @return The name of the resource.
     * 
     */
    public Optional<Output<String>> environmentName() {
        return Optional.ofNullable(this.environmentName);
    }

    /**
     * Subtype of environment:
     * - Type of CS: ACK is currently supported.
     * - Type of ECS: currently supports ECS.
     * - Type of Cloud: currently supports Cloud.
     * 
     */
    @Import(name="environmentSubType", required=true)
    private Output<String> environmentSubType;

    /**
     * @return Subtype of environment:
     * - Type of CS: ACK is currently supported.
     * - Type of ECS: currently supports ECS.
     * - Type of Cloud: currently supports Cloud.
     * 
     */
    public Output<String> environmentSubType() {
        return this.environmentSubType;
    }

    /**
     * Type of environment.
     * 
     */
    @Import(name="environmentType", required=true)
    private Output<String> environmentType;

    /**
     * @return Type of environment.
     * 
     */
    public Output<String> environmentType() {
        return this.environmentType;
    }

    /**
     * The ID of the resource group.
     * 
     */
    @Import(name="resourceGroupId")
    private @Nullable Output<String> resourceGroupId;

    /**
     * @return The ID of the resource group.
     * 
     */
    public Optional<Output<String>> resourceGroupId() {
        return Optional.ofNullable(this.resourceGroupId);
    }

    /**
     * The tag of the resource.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,Object>> tags;

    /**
     * @return The tag of the resource.
     * 
     */
    public Optional<Output<Map<String,Object>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private EnvironmentArgs() {}

    private EnvironmentArgs(EnvironmentArgs $) {
        this.aliyunLang = $.aliyunLang;
        this.bindResourceId = $.bindResourceId;
        this.environmentName = $.environmentName;
        this.environmentSubType = $.environmentSubType;
        this.environmentType = $.environmentType;
        this.resourceGroupId = $.resourceGroupId;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(EnvironmentArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private EnvironmentArgs $;

        public Builder() {
            $ = new EnvironmentArgs();
        }

        public Builder(EnvironmentArgs defaults) {
            $ = new EnvironmentArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param aliyunLang The locale. The default is Chinese zh | en.
         * 
         * @return builder
         * 
         */
        public Builder aliyunLang(@Nullable Output<String> aliyunLang) {
            $.aliyunLang = aliyunLang;
            return this;
        }

        /**
         * @param aliyunLang The locale. The default is Chinese zh | en.
         * 
         * @return builder
         * 
         */
        public Builder aliyunLang(String aliyunLang) {
            return aliyunLang(Output.of(aliyunLang));
        }

        /**
         * @param bindResourceId The id or vpcId of the bound container instance.
         * 
         * @return builder
         * 
         */
        public Builder bindResourceId(@Nullable Output<String> bindResourceId) {
            $.bindResourceId = bindResourceId;
            return this;
        }

        /**
         * @param bindResourceId The id or vpcId of the bound container instance.
         * 
         * @return builder
         * 
         */
        public Builder bindResourceId(String bindResourceId) {
            return bindResourceId(Output.of(bindResourceId));
        }

        /**
         * @param environmentName The name of the resource.
         * 
         * @return builder
         * 
         */
        public Builder environmentName(@Nullable Output<String> environmentName) {
            $.environmentName = environmentName;
            return this;
        }

        /**
         * @param environmentName The name of the resource.
         * 
         * @return builder
         * 
         */
        public Builder environmentName(String environmentName) {
            return environmentName(Output.of(environmentName));
        }

        /**
         * @param environmentSubType Subtype of environment:
         * - Type of CS: ACK is currently supported.
         * - Type of ECS: currently supports ECS.
         * - Type of Cloud: currently supports Cloud.
         * 
         * @return builder
         * 
         */
        public Builder environmentSubType(Output<String> environmentSubType) {
            $.environmentSubType = environmentSubType;
            return this;
        }

        /**
         * @param environmentSubType Subtype of environment:
         * - Type of CS: ACK is currently supported.
         * - Type of ECS: currently supports ECS.
         * - Type of Cloud: currently supports Cloud.
         * 
         * @return builder
         * 
         */
        public Builder environmentSubType(String environmentSubType) {
            return environmentSubType(Output.of(environmentSubType));
        }

        /**
         * @param environmentType Type of environment.
         * 
         * @return builder
         * 
         */
        public Builder environmentType(Output<String> environmentType) {
            $.environmentType = environmentType;
            return this;
        }

        /**
         * @param environmentType Type of environment.
         * 
         * @return builder
         * 
         */
        public Builder environmentType(String environmentType) {
            return environmentType(Output.of(environmentType));
        }

        /**
         * @param resourceGroupId The ID of the resource group.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupId(@Nullable Output<String> resourceGroupId) {
            $.resourceGroupId = resourceGroupId;
            return this;
        }

        /**
         * @param resourceGroupId The ID of the resource group.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupId(String resourceGroupId) {
            return resourceGroupId(Output.of(resourceGroupId));
        }

        /**
         * @param tags The tag of the resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,Object>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags The tag of the resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,Object> tags) {
            return tags(Output.of(tags));
        }

        public EnvironmentArgs build() {
            $.environmentSubType = Objects.requireNonNull($.environmentSubType, "expected parameter 'environmentSubType' to be non-null");
            $.environmentType = Objects.requireNonNull($.environmentType, "expected parameter 'environmentType' to be non-null");
            return $;
        }
    }

}
