// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.maxcompute.inputs;

import com.pulumi.alicloud.maxcompute.inputs.TunnelQuotaTimerQuotaTimerArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TunnelQuotaTimerState extends com.pulumi.resources.ResourceArgs {

    public static final TunnelQuotaTimerState Empty = new TunnelQuotaTimerState();

    /**
     * The nickname of the exclusive Resource Group (Tunnel Quota) for the level - 1 data transmission service.
     * 
     */
    @Import(name="nickname")
    private @Nullable Output<String> nickname;

    /**
     * @return The nickname of the exclusive Resource Group (Tunnel Quota) for the level - 1 data transmission service.
     * 
     */
    public Optional<Output<String>> nickname() {
        return Optional.ofNullable(this.nickname);
    }

    /**
     * Time-Sharing configuration
     * 
     * &gt; **NOTE:** -- The same reserved Quota resource group supports up to 48 time intervals. The minimum duration of a time interval is 30 minutes. -- After the current data transmission service is configured for time-sharing, if you need to perform a downgrade operation on the data transmission service (package year and month), please reduce the time-sharing concurrency first. -- The effective time of the time-sharing configuration is 0 to 5 minutes, and the billing will be calculated according to the actual effective time. -- Please make sure to set the time range completely from 00:00 to 24:00
     * See `quota_timer` below.
     * 
     */
    @Import(name="quotaTimers")
    private @Nullable Output<List<TunnelQuotaTimerQuotaTimerArgs>> quotaTimers;

    /**
     * @return Time-Sharing configuration
     * 
     * &gt; **NOTE:** -- The same reserved Quota resource group supports up to 48 time intervals. The minimum duration of a time interval is 30 minutes. -- After the current data transmission service is configured for time-sharing, if you need to perform a downgrade operation on the data transmission service (package year and month), please reduce the time-sharing concurrency first. -- The effective time of the time-sharing configuration is 0 to 5 minutes, and the billing will be calculated according to the actual effective time. -- Please make sure to set the time range completely from 00:00 to 24:00
     * See `quota_timer` below.
     * 
     */
    public Optional<Output<List<TunnelQuotaTimerQuotaTimerArgs>>> quotaTimers() {
        return Optional.ofNullable(this.quotaTimers);
    }

    /**
     * Time zone, reference: Asia/Shanghai
     * In general, the system will automatically generate the time zone according to the region without configuration.
     * 
     */
    @Import(name="timeZone")
    private @Nullable Output<String> timeZone;

    /**
     * @return Time zone, reference: Asia/Shanghai
     * In general, the system will automatically generate the time zone according to the region without configuration.
     * 
     */
    public Optional<Output<String>> timeZone() {
        return Optional.ofNullable(this.timeZone);
    }

    private TunnelQuotaTimerState() {}

    private TunnelQuotaTimerState(TunnelQuotaTimerState $) {
        this.nickname = $.nickname;
        this.quotaTimers = $.quotaTimers;
        this.timeZone = $.timeZone;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TunnelQuotaTimerState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TunnelQuotaTimerState $;

        public Builder() {
            $ = new TunnelQuotaTimerState();
        }

        public Builder(TunnelQuotaTimerState defaults) {
            $ = new TunnelQuotaTimerState(Objects.requireNonNull(defaults));
        }

        /**
         * @param nickname The nickname of the exclusive Resource Group (Tunnel Quota) for the level - 1 data transmission service.
         * 
         * @return builder
         * 
         */
        public Builder nickname(@Nullable Output<String> nickname) {
            $.nickname = nickname;
            return this;
        }

        /**
         * @param nickname The nickname of the exclusive Resource Group (Tunnel Quota) for the level - 1 data transmission service.
         * 
         * @return builder
         * 
         */
        public Builder nickname(String nickname) {
            return nickname(Output.of(nickname));
        }

        /**
         * @param quotaTimers Time-Sharing configuration
         * 
         * &gt; **NOTE:** -- The same reserved Quota resource group supports up to 48 time intervals. The minimum duration of a time interval is 30 minutes. -- After the current data transmission service is configured for time-sharing, if you need to perform a downgrade operation on the data transmission service (package year and month), please reduce the time-sharing concurrency first. -- The effective time of the time-sharing configuration is 0 to 5 minutes, and the billing will be calculated according to the actual effective time. -- Please make sure to set the time range completely from 00:00 to 24:00
         * See `quota_timer` below.
         * 
         * @return builder
         * 
         */
        public Builder quotaTimers(@Nullable Output<List<TunnelQuotaTimerQuotaTimerArgs>> quotaTimers) {
            $.quotaTimers = quotaTimers;
            return this;
        }

        /**
         * @param quotaTimers Time-Sharing configuration
         * 
         * &gt; **NOTE:** -- The same reserved Quota resource group supports up to 48 time intervals. The minimum duration of a time interval is 30 minutes. -- After the current data transmission service is configured for time-sharing, if you need to perform a downgrade operation on the data transmission service (package year and month), please reduce the time-sharing concurrency first. -- The effective time of the time-sharing configuration is 0 to 5 minutes, and the billing will be calculated according to the actual effective time. -- Please make sure to set the time range completely from 00:00 to 24:00
         * See `quota_timer` below.
         * 
         * @return builder
         * 
         */
        public Builder quotaTimers(List<TunnelQuotaTimerQuotaTimerArgs> quotaTimers) {
            return quotaTimers(Output.of(quotaTimers));
        }

        /**
         * @param quotaTimers Time-Sharing configuration
         * 
         * &gt; **NOTE:** -- The same reserved Quota resource group supports up to 48 time intervals. The minimum duration of a time interval is 30 minutes. -- After the current data transmission service is configured for time-sharing, if you need to perform a downgrade operation on the data transmission service (package year and month), please reduce the time-sharing concurrency first. -- The effective time of the time-sharing configuration is 0 to 5 minutes, and the billing will be calculated according to the actual effective time. -- Please make sure to set the time range completely from 00:00 to 24:00
         * See `quota_timer` below.
         * 
         * @return builder
         * 
         */
        public Builder quotaTimers(TunnelQuotaTimerQuotaTimerArgs... quotaTimers) {
            return quotaTimers(List.of(quotaTimers));
        }

        /**
         * @param timeZone Time zone, reference: Asia/Shanghai
         * In general, the system will automatically generate the time zone according to the region without configuration.
         * 
         * @return builder
         * 
         */
        public Builder timeZone(@Nullable Output<String> timeZone) {
            $.timeZone = timeZone;
            return this;
        }

        /**
         * @param timeZone Time zone, reference: Asia/Shanghai
         * In general, the system will automatically generate the time zone according to the region without configuration.
         * 
         * @return builder
         * 
         */
        public Builder timeZone(String timeZone) {
            return timeZone(Output.of(timeZone));
        }

        public TunnelQuotaTimerState build() {
            return $;
        }
    }

}
