// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.nas;

import com.pulumi.alicloud.nas.inputs.AccessPointPosixUserArgs;
import com.pulumi.alicloud.nas.inputs.AccessPointRootPathPermissionArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AccessPointArgs extends com.pulumi.resources.ResourceArgs {

    public static final AccessPointArgs Empty = new AccessPointArgs();

    /**
     * The name of the permission group.
     * 
     */
    @Import(name="accessGroup", required=true)
    private Output<String> accessGroup;

    /**
     * @return The name of the permission group.
     * 
     */
    public Output<String> accessGroup() {
        return this.accessGroup;
    }

    /**
     * The name of the access point.
     * 
     */
    @Import(name="accessPointName")
    private @Nullable Output<String> accessPointName;

    /**
     * @return The name of the access point.
     * 
     */
    public Optional<Output<String>> accessPointName() {
        return Optional.ofNullable(this.accessPointName);
    }

    /**
     * Specifies whether to enable the RAM policy. Default value: `false`. Valid values:
     * 
     */
    @Import(name="enabledRam")
    private @Nullable Output<Boolean> enabledRam;

    /**
     * @return Specifies whether to enable the RAM policy. Default value: `false`. Valid values:
     * 
     */
    public Optional<Output<Boolean>> enabledRam() {
        return Optional.ofNullable(this.enabledRam);
    }

    /**
     * The ID of the file system.
     * 
     */
    @Import(name="fileSystemId", required=true)
    private Output<String> fileSystemId;

    /**
     * @return The ID of the file system.
     * 
     */
    public Output<String> fileSystemId() {
        return this.fileSystemId;
    }

    /**
     * The Posix user. See `posix_user` below.
     * 
     */
    @Import(name="posixUser")
    private @Nullable Output<AccessPointPosixUserArgs> posixUser;

    /**
     * @return The Posix user. See `posix_user` below.
     * 
     */
    public Optional<Output<AccessPointPosixUserArgs>> posixUser() {
        return Optional.ofNullable(this.posixUser);
    }

    /**
     * The root directory of the access point.
     * 
     */
    @Import(name="rootPath")
    private @Nullable Output<String> rootPath;

    /**
     * @return The root directory of the access point.
     * 
     */
    public Optional<Output<String>> rootPath() {
        return Optional.ofNullable(this.rootPath);
    }

    /**
     * Root permissions. See `root_path_permission` below.
     * 
     */
    @Import(name="rootPathPermission")
    private @Nullable Output<AccessPointRootPathPermissionArgs> rootPathPermission;

    /**
     * @return Root permissions. See `root_path_permission` below.
     * 
     */
    public Optional<Output<AccessPointRootPathPermissionArgs>> rootPathPermission() {
        return Optional.ofNullable(this.rootPathPermission);
    }

    /**
     * The ID of the VPC.
     * 
     */
    @Import(name="vpcId", required=true)
    private Output<String> vpcId;

    /**
     * @return The ID of the VPC.
     * 
     */
    public Output<String> vpcId() {
        return this.vpcId;
    }

    /**
     * The vSwitch ID.
     * 
     */
    @Import(name="vswitchId", required=true)
    private Output<String> vswitchId;

    /**
     * @return The vSwitch ID.
     * 
     */
    public Output<String> vswitchId() {
        return this.vswitchId;
    }

    private AccessPointArgs() {}

    private AccessPointArgs(AccessPointArgs $) {
        this.accessGroup = $.accessGroup;
        this.accessPointName = $.accessPointName;
        this.enabledRam = $.enabledRam;
        this.fileSystemId = $.fileSystemId;
        this.posixUser = $.posixUser;
        this.rootPath = $.rootPath;
        this.rootPathPermission = $.rootPathPermission;
        this.vpcId = $.vpcId;
        this.vswitchId = $.vswitchId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AccessPointArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AccessPointArgs $;

        public Builder() {
            $ = new AccessPointArgs();
        }

        public Builder(AccessPointArgs defaults) {
            $ = new AccessPointArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accessGroup The name of the permission group.
         * 
         * @return builder
         * 
         */
        public Builder accessGroup(Output<String> accessGroup) {
            $.accessGroup = accessGroup;
            return this;
        }

        /**
         * @param accessGroup The name of the permission group.
         * 
         * @return builder
         * 
         */
        public Builder accessGroup(String accessGroup) {
            return accessGroup(Output.of(accessGroup));
        }

        /**
         * @param accessPointName The name of the access point.
         * 
         * @return builder
         * 
         */
        public Builder accessPointName(@Nullable Output<String> accessPointName) {
            $.accessPointName = accessPointName;
            return this;
        }

        /**
         * @param accessPointName The name of the access point.
         * 
         * @return builder
         * 
         */
        public Builder accessPointName(String accessPointName) {
            return accessPointName(Output.of(accessPointName));
        }

        /**
         * @param enabledRam Specifies whether to enable the RAM policy. Default value: `false`. Valid values:
         * 
         * @return builder
         * 
         */
        public Builder enabledRam(@Nullable Output<Boolean> enabledRam) {
            $.enabledRam = enabledRam;
            return this;
        }

        /**
         * @param enabledRam Specifies whether to enable the RAM policy. Default value: `false`. Valid values:
         * 
         * @return builder
         * 
         */
        public Builder enabledRam(Boolean enabledRam) {
            return enabledRam(Output.of(enabledRam));
        }

        /**
         * @param fileSystemId The ID of the file system.
         * 
         * @return builder
         * 
         */
        public Builder fileSystemId(Output<String> fileSystemId) {
            $.fileSystemId = fileSystemId;
            return this;
        }

        /**
         * @param fileSystemId The ID of the file system.
         * 
         * @return builder
         * 
         */
        public Builder fileSystemId(String fileSystemId) {
            return fileSystemId(Output.of(fileSystemId));
        }

        /**
         * @param posixUser The Posix user. See `posix_user` below.
         * 
         * @return builder
         * 
         */
        public Builder posixUser(@Nullable Output<AccessPointPosixUserArgs> posixUser) {
            $.posixUser = posixUser;
            return this;
        }

        /**
         * @param posixUser The Posix user. See `posix_user` below.
         * 
         * @return builder
         * 
         */
        public Builder posixUser(AccessPointPosixUserArgs posixUser) {
            return posixUser(Output.of(posixUser));
        }

        /**
         * @param rootPath The root directory of the access point.
         * 
         * @return builder
         * 
         */
        public Builder rootPath(@Nullable Output<String> rootPath) {
            $.rootPath = rootPath;
            return this;
        }

        /**
         * @param rootPath The root directory of the access point.
         * 
         * @return builder
         * 
         */
        public Builder rootPath(String rootPath) {
            return rootPath(Output.of(rootPath));
        }

        /**
         * @param rootPathPermission Root permissions. See `root_path_permission` below.
         * 
         * @return builder
         * 
         */
        public Builder rootPathPermission(@Nullable Output<AccessPointRootPathPermissionArgs> rootPathPermission) {
            $.rootPathPermission = rootPathPermission;
            return this;
        }

        /**
         * @param rootPathPermission Root permissions. See `root_path_permission` below.
         * 
         * @return builder
         * 
         */
        public Builder rootPathPermission(AccessPointRootPathPermissionArgs rootPathPermission) {
            return rootPathPermission(Output.of(rootPathPermission));
        }

        /**
         * @param vpcId The ID of the VPC.
         * 
         * @return builder
         * 
         */
        public Builder vpcId(Output<String> vpcId) {
            $.vpcId = vpcId;
            return this;
        }

        /**
         * @param vpcId The ID of the VPC.
         * 
         * @return builder
         * 
         */
        public Builder vpcId(String vpcId) {
            return vpcId(Output.of(vpcId));
        }

        /**
         * @param vswitchId The vSwitch ID.
         * 
         * @return builder
         * 
         */
        public Builder vswitchId(Output<String> vswitchId) {
            $.vswitchId = vswitchId;
            return this;
        }

        /**
         * @param vswitchId The vSwitch ID.
         * 
         * @return builder
         * 
         */
        public Builder vswitchId(String vswitchId) {
            return vswitchId(Output.of(vswitchId));
        }

        public AccessPointArgs build() {
            if ($.accessGroup == null) {
                throw new MissingRequiredPropertyException("AccessPointArgs", "accessGroup");
            }
            if ($.fileSystemId == null) {
                throw new MissingRequiredPropertyException("AccessPointArgs", "fileSystemId");
            }
            if ($.vpcId == null) {
                throw new MissingRequiredPropertyException("AccessPointArgs", "vpcId");
            }
            if ($.vswitchId == null) {
                throw new MissingRequiredPropertyException("AccessPointArgs", "vswitchId");
            }
            return $;
        }
    }

}
