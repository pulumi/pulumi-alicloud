// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.slb;

import com.pulumi.alicloud.slb.inputs.ListenerXForwardedForArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ListenerArgs extends com.pulumi.resources.ResourceArgs {

    public static final ListenerArgs Empty = new ListenerArgs();

    /**
     * @deprecated
     * Field `acl_id` has been deprecated from provider version 1.249.0. New field `acl_ids` instead.
     * 
     */
    @Deprecated /* Field `acl_id` has been deprecated from provider version 1.249.0. New field `acl_ids` instead. */
    @Import(name="aclId")
    private @Nullable Output<String> aclId;

    /**
     * @deprecated
     * Field `acl_id` has been deprecated from provider version 1.249.0. New field `acl_ids` instead.
     * 
     */
    @Deprecated /* Field `acl_id` has been deprecated from provider version 1.249.0. New field `acl_ids` instead. */
    public Optional<Output<String>> aclId() {
        return Optional.ofNullable(this.aclId);
    }

    @Import(name="aclIds")
    private @Nullable Output<List<String>> aclIds;

    public Optional<Output<List<String>>> aclIds() {
        return Optional.ofNullable(this.aclIds);
    }

    @Import(name="aclStatus")
    private @Nullable Output<String> aclStatus;

    public Optional<Output<String>> aclStatus() {
        return Optional.ofNullable(this.aclStatus);
    }

    @Import(name="aclType")
    private @Nullable Output<String> aclType;

    public Optional<Output<String>> aclType() {
        return Optional.ofNullable(this.aclType);
    }

    @Import(name="backendPort")
    private @Nullable Output<Integer> backendPort;

    public Optional<Output<Integer>> backendPort() {
        return Optional.ofNullable(this.backendPort);
    }

    @Import(name="bandwidth")
    private @Nullable Output<Integer> bandwidth;

    public Optional<Output<Integer>> bandwidth() {
        return Optional.ofNullable(this.bandwidth);
    }

    @Import(name="caCertificateId")
    private @Nullable Output<String> caCertificateId;

    public Optional<Output<String>> caCertificateId() {
        return Optional.ofNullable(this.caCertificateId);
    }

    @Import(name="cookie")
    private @Nullable Output<String> cookie;

    public Optional<Output<String>> cookie() {
        return Optional.ofNullable(this.cookie);
    }

    @Import(name="cookieTimeout")
    private @Nullable Output<Integer> cookieTimeout;

    public Optional<Output<Integer>> cookieTimeout() {
        return Optional.ofNullable(this.cookieTimeout);
    }

    @Import(name="deleteProtectionValidation")
    private @Nullable Output<Boolean> deleteProtectionValidation;

    public Optional<Output<Boolean>> deleteProtectionValidation() {
        return Optional.ofNullable(this.deleteProtectionValidation);
    }

    @Import(name="description")
    private @Nullable Output<String> description;

    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    @Import(name="enableHttp2")
    private @Nullable Output<String> enableHttp2;

    public Optional<Output<String>> enableHttp2() {
        return Optional.ofNullable(this.enableHttp2);
    }

    @Import(name="establishedTimeout")
    private @Nullable Output<Integer> establishedTimeout;

    public Optional<Output<Integer>> establishedTimeout() {
        return Optional.ofNullable(this.establishedTimeout);
    }

    @Import(name="forwardPort")
    private @Nullable Output<Integer> forwardPort;

    public Optional<Output<Integer>> forwardPort() {
        return Optional.ofNullable(this.forwardPort);
    }

    @Import(name="frontendPort", required=true)
    private Output<Integer> frontendPort;

    public Output<Integer> frontendPort() {
        return this.frontendPort;
    }

    @Import(name="gzip")
    private @Nullable Output<Boolean> gzip;

    public Optional<Output<Boolean>> gzip() {
        return Optional.ofNullable(this.gzip);
    }

    @Import(name="healthCheck")
    private @Nullable Output<String> healthCheck;

    public Optional<Output<String>> healthCheck() {
        return Optional.ofNullable(this.healthCheck);
    }

    @Import(name="healthCheckConnectPort")
    private @Nullable Output<Integer> healthCheckConnectPort;

    public Optional<Output<Integer>> healthCheckConnectPort() {
        return Optional.ofNullable(this.healthCheckConnectPort);
    }

    @Import(name="healthCheckDomain")
    private @Nullable Output<String> healthCheckDomain;

    public Optional<Output<String>> healthCheckDomain() {
        return Optional.ofNullable(this.healthCheckDomain);
    }

    @Import(name="healthCheckHttpCode")
    private @Nullable Output<String> healthCheckHttpCode;

    public Optional<Output<String>> healthCheckHttpCode() {
        return Optional.ofNullable(this.healthCheckHttpCode);
    }

    @Import(name="healthCheckInterval")
    private @Nullable Output<Integer> healthCheckInterval;

    public Optional<Output<Integer>> healthCheckInterval() {
        return Optional.ofNullable(this.healthCheckInterval);
    }

    @Import(name="healthCheckMethod")
    private @Nullable Output<String> healthCheckMethod;

    public Optional<Output<String>> healthCheckMethod() {
        return Optional.ofNullable(this.healthCheckMethod);
    }

    @Import(name="healthCheckTimeout")
    private @Nullable Output<Integer> healthCheckTimeout;

    public Optional<Output<Integer>> healthCheckTimeout() {
        return Optional.ofNullable(this.healthCheckTimeout);
    }

    @Import(name="healthCheckType")
    private @Nullable Output<String> healthCheckType;

    public Optional<Output<String>> healthCheckType() {
        return Optional.ofNullable(this.healthCheckType);
    }

    @Import(name="healthCheckUri")
    private @Nullable Output<String> healthCheckUri;

    public Optional<Output<String>> healthCheckUri() {
        return Optional.ofNullable(this.healthCheckUri);
    }

    @Import(name="healthyThreshold")
    private @Nullable Output<Integer> healthyThreshold;

    public Optional<Output<Integer>> healthyThreshold() {
        return Optional.ofNullable(this.healthyThreshold);
    }

    @Import(name="idleTimeout")
    private @Nullable Output<Integer> idleTimeout;

    public Optional<Output<Integer>> idleTimeout() {
        return Optional.ofNullable(this.idleTimeout);
    }

    @Import(name="listenerForward")
    private @Nullable Output<String> listenerForward;

    public Optional<Output<String>> listenerForward() {
        return Optional.ofNullable(this.listenerForward);
    }

    @Import(name="loadBalancerId", required=true)
    private Output<String> loadBalancerId;

    public Output<String> loadBalancerId() {
        return this.loadBalancerId;
    }

    @Import(name="masterSlaveServerGroupId")
    private @Nullable Output<String> masterSlaveServerGroupId;

    public Optional<Output<String>> masterSlaveServerGroupId() {
        return Optional.ofNullable(this.masterSlaveServerGroupId);
    }

    @Import(name="persistenceTimeout")
    private @Nullable Output<Integer> persistenceTimeout;

    public Optional<Output<Integer>> persistenceTimeout() {
        return Optional.ofNullable(this.persistenceTimeout);
    }

    @Import(name="protocol", required=true)
    private Output<String> protocol;

    public Output<String> protocol() {
        return this.protocol;
    }

    @Import(name="proxyProtocolV2Enabled")
    private @Nullable Output<Boolean> proxyProtocolV2Enabled;

    public Optional<Output<Boolean>> proxyProtocolV2Enabled() {
        return Optional.ofNullable(this.proxyProtocolV2Enabled);
    }

    @Import(name="requestTimeout")
    private @Nullable Output<Integer> requestTimeout;

    public Optional<Output<Integer>> requestTimeout() {
        return Optional.ofNullable(this.requestTimeout);
    }

    @Import(name="scheduler")
    private @Nullable Output<String> scheduler;

    public Optional<Output<String>> scheduler() {
        return Optional.ofNullable(this.scheduler);
    }

    @Import(name="serverCertificateId")
    private @Nullable Output<String> serverCertificateId;

    public Optional<Output<String>> serverCertificateId() {
        return Optional.ofNullable(this.serverCertificateId);
    }

    @Import(name="serverGroupId")
    private @Nullable Output<String> serverGroupId;

    public Optional<Output<String>> serverGroupId() {
        return Optional.ofNullable(this.serverGroupId);
    }

    /**
     * @deprecated
     * Field &#39;ssl_certificate_id&#39; has been deprecated from 1.59.0 and using &#39;server_certificate_id&#39; instead.
     * 
     */
    @Deprecated /* Field 'ssl_certificate_id' has been deprecated from 1.59.0 and using 'server_certificate_id' instead. */
    @Import(name="sslCertificateId")
    private @Nullable Output<String> sslCertificateId;

    /**
     * @deprecated
     * Field &#39;ssl_certificate_id&#39; has been deprecated from 1.59.0 and using &#39;server_certificate_id&#39; instead.
     * 
     */
    @Deprecated /* Field 'ssl_certificate_id' has been deprecated from 1.59.0 and using 'server_certificate_id' instead. */
    public Optional<Output<String>> sslCertificateId() {
        return Optional.ofNullable(this.sslCertificateId);
    }

    @Import(name="stickySession")
    private @Nullable Output<String> stickySession;

    public Optional<Output<String>> stickySession() {
        return Optional.ofNullable(this.stickySession);
    }

    @Import(name="stickySessionType")
    private @Nullable Output<String> stickySessionType;

    public Optional<Output<String>> stickySessionType() {
        return Optional.ofNullable(this.stickySessionType);
    }

    @Import(name="tlsCipherPolicy")
    private @Nullable Output<String> tlsCipherPolicy;

    public Optional<Output<String>> tlsCipherPolicy() {
        return Optional.ofNullable(this.tlsCipherPolicy);
    }

    @Import(name="unhealthyThreshold")
    private @Nullable Output<Integer> unhealthyThreshold;

    public Optional<Output<Integer>> unhealthyThreshold() {
        return Optional.ofNullable(this.unhealthyThreshold);
    }

    /**
     * Whether to set additional HTTP Header field &#34;X-Forwarded-For&#34;.
     * 
     */
    @Import(name="xForwardedFor")
    private @Nullable Output<ListenerXForwardedForArgs> xForwardedFor;

    /**
     * @return Whether to set additional HTTP Header field &#34;X-Forwarded-For&#34;.
     * 
     */
    public Optional<Output<ListenerXForwardedForArgs>> xForwardedFor() {
        return Optional.ofNullable(this.xForwardedFor);
    }

    private ListenerArgs() {}

    private ListenerArgs(ListenerArgs $) {
        this.aclId = $.aclId;
        this.aclIds = $.aclIds;
        this.aclStatus = $.aclStatus;
        this.aclType = $.aclType;
        this.backendPort = $.backendPort;
        this.bandwidth = $.bandwidth;
        this.caCertificateId = $.caCertificateId;
        this.cookie = $.cookie;
        this.cookieTimeout = $.cookieTimeout;
        this.deleteProtectionValidation = $.deleteProtectionValidation;
        this.description = $.description;
        this.enableHttp2 = $.enableHttp2;
        this.establishedTimeout = $.establishedTimeout;
        this.forwardPort = $.forwardPort;
        this.frontendPort = $.frontendPort;
        this.gzip = $.gzip;
        this.healthCheck = $.healthCheck;
        this.healthCheckConnectPort = $.healthCheckConnectPort;
        this.healthCheckDomain = $.healthCheckDomain;
        this.healthCheckHttpCode = $.healthCheckHttpCode;
        this.healthCheckInterval = $.healthCheckInterval;
        this.healthCheckMethod = $.healthCheckMethod;
        this.healthCheckTimeout = $.healthCheckTimeout;
        this.healthCheckType = $.healthCheckType;
        this.healthCheckUri = $.healthCheckUri;
        this.healthyThreshold = $.healthyThreshold;
        this.idleTimeout = $.idleTimeout;
        this.listenerForward = $.listenerForward;
        this.loadBalancerId = $.loadBalancerId;
        this.masterSlaveServerGroupId = $.masterSlaveServerGroupId;
        this.persistenceTimeout = $.persistenceTimeout;
        this.protocol = $.protocol;
        this.proxyProtocolV2Enabled = $.proxyProtocolV2Enabled;
        this.requestTimeout = $.requestTimeout;
        this.scheduler = $.scheduler;
        this.serverCertificateId = $.serverCertificateId;
        this.serverGroupId = $.serverGroupId;
        this.sslCertificateId = $.sslCertificateId;
        this.stickySession = $.stickySession;
        this.stickySessionType = $.stickySessionType;
        this.tlsCipherPolicy = $.tlsCipherPolicy;
        this.unhealthyThreshold = $.unhealthyThreshold;
        this.xForwardedFor = $.xForwardedFor;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ListenerArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ListenerArgs $;

        public Builder() {
            $ = new ListenerArgs();
        }

        public Builder(ListenerArgs defaults) {
            $ = new ListenerArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @return builder
         * 
         * @deprecated
         * Field `acl_id` has been deprecated from provider version 1.249.0. New field `acl_ids` instead.
         * 
         */
        @Deprecated /* Field `acl_id` has been deprecated from provider version 1.249.0. New field `acl_ids` instead. */
        public Builder aclId(@Nullable Output<String> aclId) {
            $.aclId = aclId;
            return this;
        }

        /**
         * @return builder
         * 
         * @deprecated
         * Field `acl_id` has been deprecated from provider version 1.249.0. New field `acl_ids` instead.
         * 
         */
        @Deprecated /* Field `acl_id` has been deprecated from provider version 1.249.0. New field `acl_ids` instead. */
        public Builder aclId(String aclId) {
            return aclId(Output.of(aclId));
        }

        public Builder aclIds(@Nullable Output<List<String>> aclIds) {
            $.aclIds = aclIds;
            return this;
        }

        public Builder aclIds(List<String> aclIds) {
            return aclIds(Output.of(aclIds));
        }

        public Builder aclIds(String... aclIds) {
            return aclIds(List.of(aclIds));
        }

        public Builder aclStatus(@Nullable Output<String> aclStatus) {
            $.aclStatus = aclStatus;
            return this;
        }

        public Builder aclStatus(String aclStatus) {
            return aclStatus(Output.of(aclStatus));
        }

        public Builder aclType(@Nullable Output<String> aclType) {
            $.aclType = aclType;
            return this;
        }

        public Builder aclType(String aclType) {
            return aclType(Output.of(aclType));
        }

        public Builder backendPort(@Nullable Output<Integer> backendPort) {
            $.backendPort = backendPort;
            return this;
        }

        public Builder backendPort(Integer backendPort) {
            return backendPort(Output.of(backendPort));
        }

        public Builder bandwidth(@Nullable Output<Integer> bandwidth) {
            $.bandwidth = bandwidth;
            return this;
        }

        public Builder bandwidth(Integer bandwidth) {
            return bandwidth(Output.of(bandwidth));
        }

        public Builder caCertificateId(@Nullable Output<String> caCertificateId) {
            $.caCertificateId = caCertificateId;
            return this;
        }

        public Builder caCertificateId(String caCertificateId) {
            return caCertificateId(Output.of(caCertificateId));
        }

        public Builder cookie(@Nullable Output<String> cookie) {
            $.cookie = cookie;
            return this;
        }

        public Builder cookie(String cookie) {
            return cookie(Output.of(cookie));
        }

        public Builder cookieTimeout(@Nullable Output<Integer> cookieTimeout) {
            $.cookieTimeout = cookieTimeout;
            return this;
        }

        public Builder cookieTimeout(Integer cookieTimeout) {
            return cookieTimeout(Output.of(cookieTimeout));
        }

        public Builder deleteProtectionValidation(@Nullable Output<Boolean> deleteProtectionValidation) {
            $.deleteProtectionValidation = deleteProtectionValidation;
            return this;
        }

        public Builder deleteProtectionValidation(Boolean deleteProtectionValidation) {
            return deleteProtectionValidation(Output.of(deleteProtectionValidation));
        }

        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        public Builder description(String description) {
            return description(Output.of(description));
        }

        public Builder enableHttp2(@Nullable Output<String> enableHttp2) {
            $.enableHttp2 = enableHttp2;
            return this;
        }

        public Builder enableHttp2(String enableHttp2) {
            return enableHttp2(Output.of(enableHttp2));
        }

        public Builder establishedTimeout(@Nullable Output<Integer> establishedTimeout) {
            $.establishedTimeout = establishedTimeout;
            return this;
        }

        public Builder establishedTimeout(Integer establishedTimeout) {
            return establishedTimeout(Output.of(establishedTimeout));
        }

        public Builder forwardPort(@Nullable Output<Integer> forwardPort) {
            $.forwardPort = forwardPort;
            return this;
        }

        public Builder forwardPort(Integer forwardPort) {
            return forwardPort(Output.of(forwardPort));
        }

        public Builder frontendPort(Output<Integer> frontendPort) {
            $.frontendPort = frontendPort;
            return this;
        }

        public Builder frontendPort(Integer frontendPort) {
            return frontendPort(Output.of(frontendPort));
        }

        public Builder gzip(@Nullable Output<Boolean> gzip) {
            $.gzip = gzip;
            return this;
        }

        public Builder gzip(Boolean gzip) {
            return gzip(Output.of(gzip));
        }

        public Builder healthCheck(@Nullable Output<String> healthCheck) {
            $.healthCheck = healthCheck;
            return this;
        }

        public Builder healthCheck(String healthCheck) {
            return healthCheck(Output.of(healthCheck));
        }

        public Builder healthCheckConnectPort(@Nullable Output<Integer> healthCheckConnectPort) {
            $.healthCheckConnectPort = healthCheckConnectPort;
            return this;
        }

        public Builder healthCheckConnectPort(Integer healthCheckConnectPort) {
            return healthCheckConnectPort(Output.of(healthCheckConnectPort));
        }

        public Builder healthCheckDomain(@Nullable Output<String> healthCheckDomain) {
            $.healthCheckDomain = healthCheckDomain;
            return this;
        }

        public Builder healthCheckDomain(String healthCheckDomain) {
            return healthCheckDomain(Output.of(healthCheckDomain));
        }

        public Builder healthCheckHttpCode(@Nullable Output<String> healthCheckHttpCode) {
            $.healthCheckHttpCode = healthCheckHttpCode;
            return this;
        }

        public Builder healthCheckHttpCode(String healthCheckHttpCode) {
            return healthCheckHttpCode(Output.of(healthCheckHttpCode));
        }

        public Builder healthCheckInterval(@Nullable Output<Integer> healthCheckInterval) {
            $.healthCheckInterval = healthCheckInterval;
            return this;
        }

        public Builder healthCheckInterval(Integer healthCheckInterval) {
            return healthCheckInterval(Output.of(healthCheckInterval));
        }

        public Builder healthCheckMethod(@Nullable Output<String> healthCheckMethod) {
            $.healthCheckMethod = healthCheckMethod;
            return this;
        }

        public Builder healthCheckMethod(String healthCheckMethod) {
            return healthCheckMethod(Output.of(healthCheckMethod));
        }

        public Builder healthCheckTimeout(@Nullable Output<Integer> healthCheckTimeout) {
            $.healthCheckTimeout = healthCheckTimeout;
            return this;
        }

        public Builder healthCheckTimeout(Integer healthCheckTimeout) {
            return healthCheckTimeout(Output.of(healthCheckTimeout));
        }

        public Builder healthCheckType(@Nullable Output<String> healthCheckType) {
            $.healthCheckType = healthCheckType;
            return this;
        }

        public Builder healthCheckType(String healthCheckType) {
            return healthCheckType(Output.of(healthCheckType));
        }

        public Builder healthCheckUri(@Nullable Output<String> healthCheckUri) {
            $.healthCheckUri = healthCheckUri;
            return this;
        }

        public Builder healthCheckUri(String healthCheckUri) {
            return healthCheckUri(Output.of(healthCheckUri));
        }

        public Builder healthyThreshold(@Nullable Output<Integer> healthyThreshold) {
            $.healthyThreshold = healthyThreshold;
            return this;
        }

        public Builder healthyThreshold(Integer healthyThreshold) {
            return healthyThreshold(Output.of(healthyThreshold));
        }

        public Builder idleTimeout(@Nullable Output<Integer> idleTimeout) {
            $.idleTimeout = idleTimeout;
            return this;
        }

        public Builder idleTimeout(Integer idleTimeout) {
            return idleTimeout(Output.of(idleTimeout));
        }

        public Builder listenerForward(@Nullable Output<String> listenerForward) {
            $.listenerForward = listenerForward;
            return this;
        }

        public Builder listenerForward(String listenerForward) {
            return listenerForward(Output.of(listenerForward));
        }

        public Builder loadBalancerId(Output<String> loadBalancerId) {
            $.loadBalancerId = loadBalancerId;
            return this;
        }

        public Builder loadBalancerId(String loadBalancerId) {
            return loadBalancerId(Output.of(loadBalancerId));
        }

        public Builder masterSlaveServerGroupId(@Nullable Output<String> masterSlaveServerGroupId) {
            $.masterSlaveServerGroupId = masterSlaveServerGroupId;
            return this;
        }

        public Builder masterSlaveServerGroupId(String masterSlaveServerGroupId) {
            return masterSlaveServerGroupId(Output.of(masterSlaveServerGroupId));
        }

        public Builder persistenceTimeout(@Nullable Output<Integer> persistenceTimeout) {
            $.persistenceTimeout = persistenceTimeout;
            return this;
        }

        public Builder persistenceTimeout(Integer persistenceTimeout) {
            return persistenceTimeout(Output.of(persistenceTimeout));
        }

        public Builder protocol(Output<String> protocol) {
            $.protocol = protocol;
            return this;
        }

        public Builder protocol(String protocol) {
            return protocol(Output.of(protocol));
        }

        public Builder proxyProtocolV2Enabled(@Nullable Output<Boolean> proxyProtocolV2Enabled) {
            $.proxyProtocolV2Enabled = proxyProtocolV2Enabled;
            return this;
        }

        public Builder proxyProtocolV2Enabled(Boolean proxyProtocolV2Enabled) {
            return proxyProtocolV2Enabled(Output.of(proxyProtocolV2Enabled));
        }

        public Builder requestTimeout(@Nullable Output<Integer> requestTimeout) {
            $.requestTimeout = requestTimeout;
            return this;
        }

        public Builder requestTimeout(Integer requestTimeout) {
            return requestTimeout(Output.of(requestTimeout));
        }

        public Builder scheduler(@Nullable Output<String> scheduler) {
            $.scheduler = scheduler;
            return this;
        }

        public Builder scheduler(String scheduler) {
            return scheduler(Output.of(scheduler));
        }

        public Builder serverCertificateId(@Nullable Output<String> serverCertificateId) {
            $.serverCertificateId = serverCertificateId;
            return this;
        }

        public Builder serverCertificateId(String serverCertificateId) {
            return serverCertificateId(Output.of(serverCertificateId));
        }

        public Builder serverGroupId(@Nullable Output<String> serverGroupId) {
            $.serverGroupId = serverGroupId;
            return this;
        }

        public Builder serverGroupId(String serverGroupId) {
            return serverGroupId(Output.of(serverGroupId));
        }

        /**
         * @return builder
         * 
         * @deprecated
         * Field &#39;ssl_certificate_id&#39; has been deprecated from 1.59.0 and using &#39;server_certificate_id&#39; instead.
         * 
         */
        @Deprecated /* Field 'ssl_certificate_id' has been deprecated from 1.59.0 and using 'server_certificate_id' instead. */
        public Builder sslCertificateId(@Nullable Output<String> sslCertificateId) {
            $.sslCertificateId = sslCertificateId;
            return this;
        }

        /**
         * @return builder
         * 
         * @deprecated
         * Field &#39;ssl_certificate_id&#39; has been deprecated from 1.59.0 and using &#39;server_certificate_id&#39; instead.
         * 
         */
        @Deprecated /* Field 'ssl_certificate_id' has been deprecated from 1.59.0 and using 'server_certificate_id' instead. */
        public Builder sslCertificateId(String sslCertificateId) {
            return sslCertificateId(Output.of(sslCertificateId));
        }

        public Builder stickySession(@Nullable Output<String> stickySession) {
            $.stickySession = stickySession;
            return this;
        }

        public Builder stickySession(String stickySession) {
            return stickySession(Output.of(stickySession));
        }

        public Builder stickySessionType(@Nullable Output<String> stickySessionType) {
            $.stickySessionType = stickySessionType;
            return this;
        }

        public Builder stickySessionType(String stickySessionType) {
            return stickySessionType(Output.of(stickySessionType));
        }

        public Builder tlsCipherPolicy(@Nullable Output<String> tlsCipherPolicy) {
            $.tlsCipherPolicy = tlsCipherPolicy;
            return this;
        }

        public Builder tlsCipherPolicy(String tlsCipherPolicy) {
            return tlsCipherPolicy(Output.of(tlsCipherPolicy));
        }

        public Builder unhealthyThreshold(@Nullable Output<Integer> unhealthyThreshold) {
            $.unhealthyThreshold = unhealthyThreshold;
            return this;
        }

        public Builder unhealthyThreshold(Integer unhealthyThreshold) {
            return unhealthyThreshold(Output.of(unhealthyThreshold));
        }

        /**
         * @param xForwardedFor Whether to set additional HTTP Header field &#34;X-Forwarded-For&#34;.
         * 
         * @return builder
         * 
         */
        public Builder xForwardedFor(@Nullable Output<ListenerXForwardedForArgs> xForwardedFor) {
            $.xForwardedFor = xForwardedFor;
            return this;
        }

        /**
         * @param xForwardedFor Whether to set additional HTTP Header field &#34;X-Forwarded-For&#34;.
         * 
         * @return builder
         * 
         */
        public Builder xForwardedFor(ListenerXForwardedForArgs xForwardedFor) {
            return xForwardedFor(Output.of(xForwardedFor));
        }

        public ListenerArgs build() {
            if ($.frontendPort == null) {
                throw new MissingRequiredPropertyException("ListenerArgs", "frontendPort");
            }
            if ($.loadBalancerId == null) {
                throw new MissingRequiredPropertyException("ListenerArgs", "loadBalancerId");
            }
            if ($.protocol == null) {
                throw new MissingRequiredPropertyException("ListenerArgs", "protocol");
            }
            return $;
        }
    }

}
