// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.slb;

import com.pulumi.alicloud.slb.inputs.ListenerXForwardedForArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ListenerArgs extends com.pulumi.resources.ResourceArgs {

    public static final ListenerArgs Empty = new ListenerArgs();

    /**
     * the id of access control list to be apply on the listener, is the id of resource alicloud_slb_acl. If `acl_status` is &#34;on&#34;, it is mandatory. Otherwise, it will be ignored.
     * 
     */
    @Import(name="aclId")
    private @Nullable Output<String> aclId;

    /**
     * @return the id of access control list to be apply on the listener, is the id of resource alicloud_slb_acl. If `acl_status` is &#34;on&#34;, it is mandatory. Otherwise, it will be ignored.
     * 
     */
    public Optional<Output<String>> aclId() {
        return Optional.ofNullable(this.aclId);
    }

    /**
     * Whether to enable &#34;acl(access control list)&#34;, the acl is specified by `acl_id`. Valid values are `on` and `off`. Default to `off`.
     * 
     */
    @Import(name="aclStatus")
    private @Nullable Output<String> aclStatus;

    /**
     * @return Whether to enable &#34;acl(access control list)&#34;, the acl is specified by `acl_id`. Valid values are `on` and `off`. Default to `off`.
     * 
     */
    public Optional<Output<String>> aclStatus() {
        return Optional.ofNullable(this.aclStatus);
    }

    /**
     * Mode for handling the acl specified by acl_id. If `acl_status` is &#34;on&#34;, it is mandatory. Otherwise, it will be ignored. Valid values are `white` and `black`. `white` means the Listener can only be accessed by client ip belongs to the acl; `black` means the Listener can not be accessed by client ip belongs to the acl.
     * 
     */
    @Import(name="aclType")
    private @Nullable Output<String> aclType;

    /**
     * @return Mode for handling the acl specified by acl_id. If `acl_status` is &#34;on&#34;, it is mandatory. Otherwise, it will be ignored. Valid values are `white` and `black`. `white` means the Listener can only be accessed by client ip belongs to the acl; `black` means the Listener can not be accessed by client ip belongs to the acl.
     * 
     */
    public Optional<Output<String>> aclType() {
        return Optional.ofNullable(this.aclType);
    }

    /**
     * Port used by the Server Load Balancer instance backend. Valid value range: [1-65535].
     * 
     */
    @Import(name="backendPort")
    private @Nullable Output<Integer> backendPort;

    /**
     * @return Port used by the Server Load Balancer instance backend. Valid value range: [1-65535].
     * 
     */
    public Optional<Output<Integer>> backendPort() {
        return Optional.ofNullable(this.backendPort);
    }

    /**
     * Bandwidth peak of Listener. For the public network instance charged per traffic consumed, the Bandwidth on Listener can be set to -1, indicating the bandwidth peak is unlimited. Valid values are [-1, 1-1000] in Mbps.
     * 
     */
    @Import(name="bandwidth")
    private @Nullable Output<Integer> bandwidth;

    /**
     * @return Bandwidth peak of Listener. For the public network instance charged per traffic consumed, the Bandwidth on Listener can be set to -1, indicating the bandwidth peak is unlimited. Valid values are [-1, 1-1000] in Mbps.
     * 
     */
    public Optional<Output<Integer>> bandwidth() {
        return Optional.ofNullable(this.bandwidth);
    }

    /**
     * SLB CA certificate ID. Only when `protocol` is `https` can be specified.
     * 
     */
    @Import(name="caCertificateId")
    private @Nullable Output<String> caCertificateId;

    /**
     * @return SLB CA certificate ID. Only when `protocol` is `https` can be specified.
     * 
     */
    public Optional<Output<String>> caCertificateId() {
        return Optional.ofNullable(this.caCertificateId);
    }

    /**
     * The cookie configured on the server. It is mandatory when `sticky_session` is &#34;on&#34; and `sticky_session_type` is &#34;server&#34;. Otherwise, it will be ignored. Valid value：String in line with RFC 2965, with length being 1- 200. It only contains characters such as ASCII codes, English letters and digits instead of the comma, semicolon or spacing, and it cannot start with $.
     * 
     */
    @Import(name="cookie")
    private @Nullable Output<String> cookie;

    /**
     * @return The cookie configured on the server. It is mandatory when `sticky_session` is &#34;on&#34; and `sticky_session_type` is &#34;server&#34;. Otherwise, it will be ignored. Valid value：String in line with RFC 2965, with length being 1- 200. It only contains characters such as ASCII codes, English letters and digits instead of the comma, semicolon or spacing, and it cannot start with $.
     * 
     */
    public Optional<Output<String>> cookie() {
        return Optional.ofNullable(this.cookie);
    }

    /**
     * Cookie timeout. It is mandatory when `sticky_session` is &#34;on&#34; and `sticky_session_type` is &#34;insert&#34;. Otherwise, it will be ignored. Valid value range: [1-86400] in seconds.
     * 
     */
    @Import(name="cookieTimeout")
    private @Nullable Output<Integer> cookieTimeout;

    /**
     * @return Cookie timeout. It is mandatory when `sticky_session` is &#34;on&#34; and `sticky_session_type` is &#34;insert&#34;. Otherwise, it will be ignored. Valid value range: [1-86400] in seconds.
     * 
     */
    public Optional<Output<Integer>> cookieTimeout() {
        return Optional.ofNullable(this.cookieTimeout);
    }

    /**
     * Checking DeleteProtection of SLB instance before deleting. If true, this resource will not be deleted when its SLB instance enabled DeleteProtection. Default to false.
     * 
     */
    @Import(name="deleteProtectionValidation")
    private @Nullable Output<Boolean> deleteProtectionValidation;

    /**
     * @return Checking DeleteProtection of SLB instance before deleting. If true, this resource will not be deleted when its SLB instance enabled DeleteProtection. Default to false.
     * 
     */
    public Optional<Output<Boolean>> deleteProtectionValidation() {
        return Optional.ofNullable(this.deleteProtectionValidation);
    }

    /**
     * The description of slb listener. This description can have a string of 1 to 80 characters. Default value: null.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The description of slb listener. This description can have a string of 1 to 80 characters. Default value: null.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Whether to enable https listener support http2 or not. Valid values are `on` and `off`. Default to `on`.
     * 
     */
    @Import(name="enableHttp2")
    private @Nullable Output<String> enableHttp2;

    /**
     * @return Whether to enable https listener support http2 or not. Valid values are `on` and `off`. Default to `on`.
     * 
     */
    public Optional<Output<String>> enableHttp2() {
        return Optional.ofNullable(this.enableHttp2);
    }

    /**
     * Timeout of tcp listener established connection idle timeout. Valid value range: [10-900] in seconds. Default to 900.
     * 
     */
    @Import(name="establishedTimeout")
    private @Nullable Output<Integer> establishedTimeout;

    /**
     * @return Timeout of tcp listener established connection idle timeout. Valid value range: [10-900] in seconds. Default to 900.
     * 
     */
    public Optional<Output<Integer>> establishedTimeout() {
        return Optional.ofNullable(this.establishedTimeout);
    }

    /**
     * The port that http redirect to https.
     * 
     */
    @Import(name="forwardPort")
    private @Nullable Output<Integer> forwardPort;

    /**
     * @return The port that http redirect to https.
     * 
     */
    public Optional<Output<Integer>> forwardPort() {
        return Optional.ofNullable(this.forwardPort);
    }

    /**
     * Port used by the Server Load Balancer instance frontend. Valid value range: [1-65535].
     * 
     */
    @Import(name="frontendPort", required=true)
    private Output<Integer> frontendPort;

    /**
     * @return Port used by the Server Load Balancer instance frontend. Valid value range: [1-65535].
     * 
     */
    public Output<Integer> frontendPort() {
        return this.frontendPort;
    }

    /**
     * Whether to enable &#34;Gzip Compression&#34;. If enabled, files of specific file types will be compressed, otherwise, no files will be compressed. Default to true. Available since v1.13.0+.
     * 
     */
    @Import(name="gzip")
    private @Nullable Output<Boolean> gzip;

    /**
     * @return Whether to enable &#34;Gzip Compression&#34;. If enabled, files of specific file types will be compressed, otherwise, no files will be compressed. Default to true. Available since v1.13.0+.
     * 
     */
    public Optional<Output<Boolean>> gzip() {
        return Optional.ofNullable(this.gzip);
    }

    /**
     * Whether to enable health check. Valid values are`on` and `off`. TCP and UDP listener&#39;s HealthCheck is always on, so it will be ignore when launching TCP or UDP listener.
     * 
     */
    @Import(name="healthCheck")
    private @Nullable Output<String> healthCheck;

    /**
     * @return Whether to enable health check. Valid values are`on` and `off`. TCP and UDP listener&#39;s HealthCheck is always on, so it will be ignore when launching TCP or UDP listener.
     * 
     */
    public Optional<Output<String>> healthCheck() {
        return Optional.ofNullable(this.healthCheck);
    }

    /**
     * The port that is used for health checks. Valid value range: [0-65535]. Default to `0` means that the port on a backend server is used for health checks.
     * 
     */
    @Import(name="healthCheckConnectPort")
    private @Nullable Output<Integer> healthCheckConnectPort;

    /**
     * @return The port that is used for health checks. Valid value range: [0-65535]. Default to `0` means that the port on a backend server is used for health checks.
     * 
     */
    public Optional<Output<Integer>> healthCheckConnectPort() {
        return Optional.ofNullable(this.healthCheckConnectPort);
    }

    /**
     * Domain name used for health check. When it used to launch TCP listener, `health_check_type` must be &#34;http&#34;. Its length is limited to 1-80 and only characters such as letters, digits, ‘-‘ and ‘.’ are allowed. When it is not set or empty,  Server Load Balancer uses the private network IP address of each backend server as Domain used for health check.
     * 
     */
    @Import(name="healthCheckDomain")
    private @Nullable Output<String> healthCheckDomain;

    /**
     * @return Domain name used for health check. When it used to launch TCP listener, `health_check_type` must be &#34;http&#34;. Its length is limited to 1-80 and only characters such as letters, digits, ‘-‘ and ‘.’ are allowed. When it is not set or empty,  Server Load Balancer uses the private network IP address of each backend server as Domain used for health check.
     * 
     */
    public Optional<Output<String>> healthCheckDomain() {
        return Optional.ofNullable(this.healthCheckDomain);
    }

    /**
     * Regular health check HTTP status code. Multiple codes are segmented by “,”. It is required when `health_check` is on. Default to `http_2xx`.  Valid values are: `http_2xx`,  `http_3xx`, `http_4xx` and `http_5xx`.
     * 
     */
    @Import(name="healthCheckHttpCode")
    private @Nullable Output<String> healthCheckHttpCode;

    /**
     * @return Regular health check HTTP status code. Multiple codes are segmented by “,”. It is required when `health_check` is on. Default to `http_2xx`.  Valid values are: `http_2xx`,  `http_3xx`, `http_4xx` and `http_5xx`.
     * 
     */
    public Optional<Output<String>> healthCheckHttpCode() {
        return Optional.ofNullable(this.healthCheckHttpCode);
    }

    /**
     * Time interval of health checks. It is required when `health_check` is on. Valid value range: [1-50] in seconds. Default to 2.
     * 
     */
    @Import(name="healthCheckInterval")
    private @Nullable Output<Integer> healthCheckInterval;

    /**
     * @return Time interval of health checks. It is required when `health_check` is on. Valid value range: [1-50] in seconds. Default to 2.
     * 
     */
    public Optional<Output<Integer>> healthCheckInterval() {
        return Optional.ofNullable(this.healthCheckInterval);
    }

    /**
     * HealthCheckMethod used for health check.Valid values: [&#34;head&#34;, &#34;get&#34;] `http` and `https` support regions ap-northeast-1, ap-southeast-1, ap-southeast-2, ap-southeast-3, us-east-1, us-west-1, eu-central-1, ap-south-1, me-east-1, cn-huhehaote, cn-zhangjiakou, ap-southeast-5, cn-shenzhen, cn-hongkong, cn-qingdao, cn-chengdu, eu-west-1, cn-hangzhou&#34;, cn-beijing, cn-shanghai.This function does not support the TCP protocol .
     * 
     */
    @Import(name="healthCheckMethod")
    private @Nullable Output<String> healthCheckMethod;

    /**
     * @return HealthCheckMethod used for health check.Valid values: [&#34;head&#34;, &#34;get&#34;] `http` and `https` support regions ap-northeast-1, ap-southeast-1, ap-southeast-2, ap-southeast-3, us-east-1, us-west-1, eu-central-1, ap-south-1, me-east-1, cn-huhehaote, cn-zhangjiakou, ap-southeast-5, cn-shenzhen, cn-hongkong, cn-qingdao, cn-chengdu, eu-west-1, cn-hangzhou&#34;, cn-beijing, cn-shanghai.This function does not support the TCP protocol .
     * 
     */
    public Optional<Output<String>> healthCheckMethod() {
        return Optional.ofNullable(this.healthCheckMethod);
    }

    /**
     * Maximum timeout of each health check response. It is required when `health_check` is on. Valid value range: [1-300] in seconds. Default to 5. Note: If `health_check_timeout` &lt; `health_check_interval`, its will be replaced by `health_check_interval`.
     * 
     */
    @Import(name="healthCheckTimeout")
    private @Nullable Output<Integer> healthCheckTimeout;

    /**
     * @return Maximum timeout of each health check response. It is required when `health_check` is on. Valid value range: [1-300] in seconds. Default to 5. Note: If `health_check_timeout` &lt; `health_check_interval`, its will be replaced by `health_check_interval`.
     * 
     */
    public Optional<Output<Integer>> healthCheckTimeout() {
        return Optional.ofNullable(this.healthCheckTimeout);
    }

    /**
     * Type of health check. Valid values are: `tcp` and `http`. Default to `tcp` . TCP supports TCP and HTTP health check mode, you can select the particular mode depending on your application.
     * 
     */
    @Import(name="healthCheckType")
    private @Nullable Output<String> healthCheckType;

    /**
     * @return Type of health check. Valid values are: `tcp` and `http`. Default to `tcp` . TCP supports TCP and HTTP health check mode, you can select the particular mode depending on your application.
     * 
     */
    public Optional<Output<String>> healthCheckType() {
        return Optional.ofNullable(this.healthCheckType);
    }

    /**
     * URI used for health check. When it used to launch TCP listener, `health_check_type` must be &#34;http&#34;. Its length is limited to 1-80 and it must start with /. Only characters such as letters, digits, ‘-’, ‘/’, ‘.’, ‘%’, ‘?’, #’ and ‘&amp;’ are allowed.
     * 
     */
    @Import(name="healthCheckUri")
    private @Nullable Output<String> healthCheckUri;

    /**
     * @return URI used for health check. When it used to launch TCP listener, `health_check_type` must be &#34;http&#34;. Its length is limited to 1-80 and it must start with /. Only characters such as letters, digits, ‘-’, ‘/’, ‘.’, ‘%’, ‘?’, #’ and ‘&amp;’ are allowed.
     * 
     */
    public Optional<Output<String>> healthCheckUri() {
        return Optional.ofNullable(this.healthCheckUri);
    }

    /**
     * The number of health checks that an unhealthy backend server must consecutively pass before it can be declared healthy. In this case, the health check state is changed from fail to success. It is required when `health_check` is on. Valid value range: [2-10] in seconds. Default to 3. **NOTE:** This parameter takes effect only if the `health_check` parameter is set to `on`.
     * 
     */
    @Import(name="healthyThreshold")
    private @Nullable Output<Integer> healthyThreshold;

    /**
     * @return The number of health checks that an unhealthy backend server must consecutively pass before it can be declared healthy. In this case, the health check state is changed from fail to success. It is required when `health_check` is on. Valid value range: [2-10] in seconds. Default to 3. **NOTE:** This parameter takes effect only if the `health_check` parameter is set to `on`.
     * 
     */
    public Optional<Output<Integer>> healthyThreshold() {
        return Optional.ofNullable(this.healthyThreshold);
    }

    /**
     * Timeout of http or https listener established connection idle timeout. Valid value range: [1-60] in seconds. Default to 15.
     * 
     */
    @Import(name="idleTimeout")
    private @Nullable Output<Integer> idleTimeout;

    /**
     * @return Timeout of http or https listener established connection idle timeout. Valid value range: [1-60] in seconds. Default to 15.
     * 
     */
    public Optional<Output<Integer>> idleTimeout() {
        return Optional.ofNullable(this.idleTimeout);
    }

    /**
     * @deprecated
     * Field &#39;lb_port&#39; has been removed since 1.211.0.
     * 
     */
    @Deprecated /* Field 'lb_port' has been removed since 1.211.0. */
    @Import(name="lbPort")
    private @Nullable Output<Integer> lbPort;

    /**
     * @deprecated
     * Field &#39;lb_port&#39; has been removed since 1.211.0.
     * 
     */
    @Deprecated /* Field 'lb_port' has been removed since 1.211.0. */
    public Optional<Output<Integer>> lbPort() {
        return Optional.ofNullable(this.lbPort);
    }

    /**
     * @deprecated
     * Field &#39;lb_protocol&#39; has been removed since 1.211.0.
     * 
     */
    @Deprecated /* Field 'lb_protocol' has been removed since 1.211.0. */
    @Import(name="lbProtocol")
    private @Nullable Output<String> lbProtocol;

    /**
     * @deprecated
     * Field &#39;lb_protocol&#39; has been removed since 1.211.0.
     * 
     */
    @Deprecated /* Field 'lb_protocol' has been removed since 1.211.0. */
    public Optional<Output<String>> lbProtocol() {
        return Optional.ofNullable(this.lbProtocol);
    }

    /**
     * Whether to enable http redirect to https, Valid values are `on` and `off`. Default to `off`.
     * 
     */
    @Import(name="listenerForward")
    private @Nullable Output<String> listenerForward;

    /**
     * @return Whether to enable http redirect to https, Valid values are `on` and `off`. Default to `off`.
     * 
     */
    public Optional<Output<String>> listenerForward() {
        return Optional.ofNullable(this.listenerForward);
    }

    /**
     * The Load Balancer ID which is used to launch a new listener.
     * 
     */
    @Import(name="loadBalancerId", required=true)
    private Output<String> loadBalancerId;

    /**
     * @return The Load Balancer ID which is used to launch a new listener.
     * 
     */
    public Output<String> loadBalancerId() {
        return this.loadBalancerId;
    }

    /**
     * The ID of the master slave server group.
     * 
     */
    @Import(name="masterSlaveServerGroupId")
    private @Nullable Output<String> masterSlaveServerGroupId;

    /**
     * @return The ID of the master slave server group.
     * 
     */
    public Optional<Output<String>> masterSlaveServerGroupId() {
        return Optional.ofNullable(this.masterSlaveServerGroupId);
    }

    /**
     * Timeout of connection persistence. Valid value range: [0-3600] in seconds. Default to 0 and means closing it.
     * 
     */
    @Import(name="persistenceTimeout")
    private @Nullable Output<Integer> persistenceTimeout;

    /**
     * @return Timeout of connection persistence. Valid value range: [0-3600] in seconds. Default to 0 and means closing it.
     * 
     */
    public Optional<Output<Integer>> persistenceTimeout() {
        return Optional.ofNullable(this.persistenceTimeout);
    }

    /**
     * The protocol to listen on. Valid values are [`http`, `https`, `tcp`, `udp`].
     * 
     */
    @Import(name="protocol", required=true)
    private Output<String> protocol;

    /**
     * @return The protocol to listen on. Valid values are [`http`, `https`, `tcp`, `udp`].
     * 
     */
    public Output<String> protocol() {
        return this.protocol;
    }

    /**
     * Whether to support carrying the client source address to the backend server through the Proxy Protocol. Valid values are `true` and `false`. Default to `false`.
     * 
     * &gt; **NOTE:** Once enable the http redirect to https function, any parameters excepted forward_port,listener_forward,load_balancer_id,frontend_port,protocol will be ignored. More info, please refer to [Redirect http to https](https://www.alibabacloud.com/help/doc-detail/89151.htm?spm=a2c63.p38356.b99.186.42f66384mpjUTB).
     * 
     * &gt; **NOTE:** Advantanced feature such as `tls_cipher_policy`, can not be updated when load balancer instance is &#34;Shared-Performance&#34;. More info, please refer to [Configure a HTTPS Listener](https://www.alibabacloud.com/help/doc-detail/27593.htm).
     * 
     */
    @Import(name="proxyProtocolV2Enabled")
    private @Nullable Output<Boolean> proxyProtocolV2Enabled;

    /**
     * @return Whether to support carrying the client source address to the backend server through the Proxy Protocol. Valid values are `true` and `false`. Default to `false`.
     * 
     * &gt; **NOTE:** Once enable the http redirect to https function, any parameters excepted forward_port,listener_forward,load_balancer_id,frontend_port,protocol will be ignored. More info, please refer to [Redirect http to https](https://www.alibabacloud.com/help/doc-detail/89151.htm?spm=a2c63.p38356.b99.186.42f66384mpjUTB).
     * 
     * &gt; **NOTE:** Advantanced feature such as `tls_cipher_policy`, can not be updated when load balancer instance is &#34;Shared-Performance&#34;. More info, please refer to [Configure a HTTPS Listener](https://www.alibabacloud.com/help/doc-detail/27593.htm).
     * 
     */
    public Optional<Output<Boolean>> proxyProtocolV2Enabled() {
        return Optional.ofNullable(this.proxyProtocolV2Enabled);
    }

    /**
     * Timeout of http or https listener request (which does not get response from backend) timeout. Valid value range: [1-180] in seconds. Default to 60.
     * 
     */
    @Import(name="requestTimeout")
    private @Nullable Output<Integer> requestTimeout;

    /**
     * @return Timeout of http or https listener request (which does not get response from backend) timeout. Valid value range: [1-180] in seconds. Default to 60.
     * 
     */
    public Optional<Output<Integer>> requestTimeout() {
        return Optional.ofNullable(this.requestTimeout);
    }

    /**
     * Scheduling algorithm,  Valid values: `wrr`, `rr`, `wlc`, `sch`, `tcp`, `qch`. Default to `wrr`.
     * Only when `protocol` is `tcp` or `udp`, `scheduler` can be set to `sch`. Only when instance is guaranteed-performance instance and `protocol` is `tcp` or `udp`, `scheduler` can be set to `tch`. Only when instance is guaranteed-performance instance and `protocol` is `udp`, `scheduler` can be set to `qch`.
     * 
     */
    @Import(name="scheduler")
    private @Nullable Output<String> scheduler;

    /**
     * @return Scheduling algorithm,  Valid values: `wrr`, `rr`, `wlc`, `sch`, `tcp`, `qch`. Default to `wrr`.
     * Only when `protocol` is `tcp` or `udp`, `scheduler` can be set to `sch`. Only when instance is guaranteed-performance instance and `protocol` is `tcp` or `udp`, `scheduler` can be set to `tch`. Only when instance is guaranteed-performance instance and `protocol` is `udp`, `scheduler` can be set to `qch`.
     * 
     */
    public Optional<Output<String>> scheduler() {
        return Optional.ofNullable(this.scheduler);
    }

    /**
     * SLB Server certificate ID. It is required when `protocol` is `https`. The `server_certificate_id` is also required when the value of the `ssl_certificate_id`  is Empty.
     * 
     */
    @Import(name="serverCertificateId")
    private @Nullable Output<String> serverCertificateId;

    /**
     * @return SLB Server certificate ID. It is required when `protocol` is `https`. The `server_certificate_id` is also required when the value of the `ssl_certificate_id`  is Empty.
     * 
     */
    public Optional<Output<String>> serverCertificateId() {
        return Optional.ofNullable(this.serverCertificateId);
    }

    /**
     * the id of server group to be apply on the listener, is the id of resource `alicloud.slb.ServerGroup`.
     * 
     */
    @Import(name="serverGroupId")
    private @Nullable Output<String> serverGroupId;

    /**
     * @return the id of server group to be apply on the listener, is the id of resource `alicloud.slb.ServerGroup`.
     * 
     */
    public Optional<Output<String>> serverGroupId() {
        return Optional.ofNullable(this.serverGroupId);
    }

    /**
     * SLB Server certificate ID. It has been deprecated from 1.59.0 and using `server_certificate_id` instead.
     * 
     * @deprecated
     * Field &#39;ssl_certificate_id&#39; has been deprecated from 1.59.0 and using &#39;server_certificate_id&#39; instead.
     * 
     */
    @Deprecated /* Field 'ssl_certificate_id' has been deprecated from 1.59.0 and using 'server_certificate_id' instead. */
    @Import(name="sslCertificateId")
    private @Nullable Output<String> sslCertificateId;

    /**
     * @return SLB Server certificate ID. It has been deprecated from 1.59.0 and using `server_certificate_id` instead.
     * 
     * @deprecated
     * Field &#39;ssl_certificate_id&#39; has been deprecated from 1.59.0 and using &#39;server_certificate_id&#39; instead.
     * 
     */
    @Deprecated /* Field 'ssl_certificate_id' has been deprecated from 1.59.0 and using 'server_certificate_id' instead. */
    public Optional<Output<String>> sslCertificateId() {
        return Optional.ofNullable(this.sslCertificateId);
    }

    /**
     * Whether to enable session persistence, Valid values are `on` and `off`. Default to `off`.
     * 
     */
    @Import(name="stickySession")
    private @Nullable Output<String> stickySession;

    /**
     * @return Whether to enable session persistence, Valid values are `on` and `off`. Default to `off`.
     * 
     */
    public Optional<Output<String>> stickySession() {
        return Optional.ofNullable(this.stickySession);
    }

    /**
     * Mode for handling the cookie. If `sticky_session` is &#34;on&#34;, it is mandatory. Otherwise, it will be ignored. Valid values are `insert` and `server`. `insert` means it is inserted from Server Load Balancer; `server` means the Server Load Balancer learns from the backend server.
     * 
     */
    @Import(name="stickySessionType")
    private @Nullable Output<String> stickySessionType;

    /**
     * @return Mode for handling the cookie. If `sticky_session` is &#34;on&#34;, it is mandatory. Otherwise, it will be ignored. Valid values are `insert` and `server`. `insert` means it is inserted from Server Load Balancer; `server` means the Server Load Balancer learns from the backend server.
     * 
     */
    public Optional<Output<String>> stickySessionType() {
        return Optional.ofNullable(this.stickySessionType);
    }

    /**
     * Https listener TLS cipher policy. Valid values are `tls_cipher_policy_1_0`, `tls_cipher_policy_1_1`, `tls_cipher_policy_1_2`, `tls_cipher_policy_1_2_strict`. Default to `tls_cipher_policy_1_0`. Currently the `tls_cipher_policy` can not be updated when load balancer instance is &#34;Shared-Performance&#34;.
     * 
     */
    @Import(name="tlsCipherPolicy")
    private @Nullable Output<String> tlsCipherPolicy;

    /**
     * @return Https listener TLS cipher policy. Valid values are `tls_cipher_policy_1_0`, `tls_cipher_policy_1_1`, `tls_cipher_policy_1_2`, `tls_cipher_policy_1_2_strict`. Default to `tls_cipher_policy_1_0`. Currently the `tls_cipher_policy` can not be updated when load balancer instance is &#34;Shared-Performance&#34;.
     * 
     */
    public Optional<Output<String>> tlsCipherPolicy() {
        return Optional.ofNullable(this.tlsCipherPolicy);
    }

    /**
     * The number of health checks that a healthy backend server must consecutively fail before it can be declared unhealthy. In this case, the health check state is changed from success to fail. It is required when `health_check` is on. Valid value range: [2-10] in seconds. Default to 3. **NOTE:** This parameter takes effect only if the `health_check` parameter is set to `on`.
     * 
     */
    @Import(name="unhealthyThreshold")
    private @Nullable Output<Integer> unhealthyThreshold;

    /**
     * @return The number of health checks that a healthy backend server must consecutively fail before it can be declared unhealthy. In this case, the health check state is changed from success to fail. It is required when `health_check` is on. Valid value range: [2-10] in seconds. Default to 3. **NOTE:** This parameter takes effect only if the `health_check` parameter is set to `on`.
     * 
     */
    public Optional<Output<Integer>> unhealthyThreshold() {
        return Optional.ofNullable(this.unhealthyThreshold);
    }

    /**
     * Whether to set additional HTTP Header field &#34;X-Forwarded-For&#34; (documented below). Available since v1.13.0+. See `x_forwarded_for` below.
     * 
     */
    @Import(name="xForwardedFor")
    private @Nullable Output<ListenerXForwardedForArgs> xForwardedFor;

    /**
     * @return Whether to set additional HTTP Header field &#34;X-Forwarded-For&#34; (documented below). Available since v1.13.0+. See `x_forwarded_for` below.
     * 
     */
    public Optional<Output<ListenerXForwardedForArgs>> xForwardedFor() {
        return Optional.ofNullable(this.xForwardedFor);
    }

    private ListenerArgs() {}

    private ListenerArgs(ListenerArgs $) {
        this.aclId = $.aclId;
        this.aclStatus = $.aclStatus;
        this.aclType = $.aclType;
        this.backendPort = $.backendPort;
        this.bandwidth = $.bandwidth;
        this.caCertificateId = $.caCertificateId;
        this.cookie = $.cookie;
        this.cookieTimeout = $.cookieTimeout;
        this.deleteProtectionValidation = $.deleteProtectionValidation;
        this.description = $.description;
        this.enableHttp2 = $.enableHttp2;
        this.establishedTimeout = $.establishedTimeout;
        this.forwardPort = $.forwardPort;
        this.frontendPort = $.frontendPort;
        this.gzip = $.gzip;
        this.healthCheck = $.healthCheck;
        this.healthCheckConnectPort = $.healthCheckConnectPort;
        this.healthCheckDomain = $.healthCheckDomain;
        this.healthCheckHttpCode = $.healthCheckHttpCode;
        this.healthCheckInterval = $.healthCheckInterval;
        this.healthCheckMethod = $.healthCheckMethod;
        this.healthCheckTimeout = $.healthCheckTimeout;
        this.healthCheckType = $.healthCheckType;
        this.healthCheckUri = $.healthCheckUri;
        this.healthyThreshold = $.healthyThreshold;
        this.idleTimeout = $.idleTimeout;
        this.lbPort = $.lbPort;
        this.lbProtocol = $.lbProtocol;
        this.listenerForward = $.listenerForward;
        this.loadBalancerId = $.loadBalancerId;
        this.masterSlaveServerGroupId = $.masterSlaveServerGroupId;
        this.persistenceTimeout = $.persistenceTimeout;
        this.protocol = $.protocol;
        this.proxyProtocolV2Enabled = $.proxyProtocolV2Enabled;
        this.requestTimeout = $.requestTimeout;
        this.scheduler = $.scheduler;
        this.serverCertificateId = $.serverCertificateId;
        this.serverGroupId = $.serverGroupId;
        this.sslCertificateId = $.sslCertificateId;
        this.stickySession = $.stickySession;
        this.stickySessionType = $.stickySessionType;
        this.tlsCipherPolicy = $.tlsCipherPolicy;
        this.unhealthyThreshold = $.unhealthyThreshold;
        this.xForwardedFor = $.xForwardedFor;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ListenerArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ListenerArgs $;

        public Builder() {
            $ = new ListenerArgs();
        }

        public Builder(ListenerArgs defaults) {
            $ = new ListenerArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param aclId the id of access control list to be apply on the listener, is the id of resource alicloud_slb_acl. If `acl_status` is &#34;on&#34;, it is mandatory. Otherwise, it will be ignored.
         * 
         * @return builder
         * 
         */
        public Builder aclId(@Nullable Output<String> aclId) {
            $.aclId = aclId;
            return this;
        }

        /**
         * @param aclId the id of access control list to be apply on the listener, is the id of resource alicloud_slb_acl. If `acl_status` is &#34;on&#34;, it is mandatory. Otherwise, it will be ignored.
         * 
         * @return builder
         * 
         */
        public Builder aclId(String aclId) {
            return aclId(Output.of(aclId));
        }

        /**
         * @param aclStatus Whether to enable &#34;acl(access control list)&#34;, the acl is specified by `acl_id`. Valid values are `on` and `off`. Default to `off`.
         * 
         * @return builder
         * 
         */
        public Builder aclStatus(@Nullable Output<String> aclStatus) {
            $.aclStatus = aclStatus;
            return this;
        }

        /**
         * @param aclStatus Whether to enable &#34;acl(access control list)&#34;, the acl is specified by `acl_id`. Valid values are `on` and `off`. Default to `off`.
         * 
         * @return builder
         * 
         */
        public Builder aclStatus(String aclStatus) {
            return aclStatus(Output.of(aclStatus));
        }

        /**
         * @param aclType Mode for handling the acl specified by acl_id. If `acl_status` is &#34;on&#34;, it is mandatory. Otherwise, it will be ignored. Valid values are `white` and `black`. `white` means the Listener can only be accessed by client ip belongs to the acl; `black` means the Listener can not be accessed by client ip belongs to the acl.
         * 
         * @return builder
         * 
         */
        public Builder aclType(@Nullable Output<String> aclType) {
            $.aclType = aclType;
            return this;
        }

        /**
         * @param aclType Mode for handling the acl specified by acl_id. If `acl_status` is &#34;on&#34;, it is mandatory. Otherwise, it will be ignored. Valid values are `white` and `black`. `white` means the Listener can only be accessed by client ip belongs to the acl; `black` means the Listener can not be accessed by client ip belongs to the acl.
         * 
         * @return builder
         * 
         */
        public Builder aclType(String aclType) {
            return aclType(Output.of(aclType));
        }

        /**
         * @param backendPort Port used by the Server Load Balancer instance backend. Valid value range: [1-65535].
         * 
         * @return builder
         * 
         */
        public Builder backendPort(@Nullable Output<Integer> backendPort) {
            $.backendPort = backendPort;
            return this;
        }

        /**
         * @param backendPort Port used by the Server Load Balancer instance backend. Valid value range: [1-65535].
         * 
         * @return builder
         * 
         */
        public Builder backendPort(Integer backendPort) {
            return backendPort(Output.of(backendPort));
        }

        /**
         * @param bandwidth Bandwidth peak of Listener. For the public network instance charged per traffic consumed, the Bandwidth on Listener can be set to -1, indicating the bandwidth peak is unlimited. Valid values are [-1, 1-1000] in Mbps.
         * 
         * @return builder
         * 
         */
        public Builder bandwidth(@Nullable Output<Integer> bandwidth) {
            $.bandwidth = bandwidth;
            return this;
        }

        /**
         * @param bandwidth Bandwidth peak of Listener. For the public network instance charged per traffic consumed, the Bandwidth on Listener can be set to -1, indicating the bandwidth peak is unlimited. Valid values are [-1, 1-1000] in Mbps.
         * 
         * @return builder
         * 
         */
        public Builder bandwidth(Integer bandwidth) {
            return bandwidth(Output.of(bandwidth));
        }

        /**
         * @param caCertificateId SLB CA certificate ID. Only when `protocol` is `https` can be specified.
         * 
         * @return builder
         * 
         */
        public Builder caCertificateId(@Nullable Output<String> caCertificateId) {
            $.caCertificateId = caCertificateId;
            return this;
        }

        /**
         * @param caCertificateId SLB CA certificate ID. Only when `protocol` is `https` can be specified.
         * 
         * @return builder
         * 
         */
        public Builder caCertificateId(String caCertificateId) {
            return caCertificateId(Output.of(caCertificateId));
        }

        /**
         * @param cookie The cookie configured on the server. It is mandatory when `sticky_session` is &#34;on&#34; and `sticky_session_type` is &#34;server&#34;. Otherwise, it will be ignored. Valid value：String in line with RFC 2965, with length being 1- 200. It only contains characters such as ASCII codes, English letters and digits instead of the comma, semicolon or spacing, and it cannot start with $.
         * 
         * @return builder
         * 
         */
        public Builder cookie(@Nullable Output<String> cookie) {
            $.cookie = cookie;
            return this;
        }

        /**
         * @param cookie The cookie configured on the server. It is mandatory when `sticky_session` is &#34;on&#34; and `sticky_session_type` is &#34;server&#34;. Otherwise, it will be ignored. Valid value：String in line with RFC 2965, with length being 1- 200. It only contains characters such as ASCII codes, English letters and digits instead of the comma, semicolon or spacing, and it cannot start with $.
         * 
         * @return builder
         * 
         */
        public Builder cookie(String cookie) {
            return cookie(Output.of(cookie));
        }

        /**
         * @param cookieTimeout Cookie timeout. It is mandatory when `sticky_session` is &#34;on&#34; and `sticky_session_type` is &#34;insert&#34;. Otherwise, it will be ignored. Valid value range: [1-86400] in seconds.
         * 
         * @return builder
         * 
         */
        public Builder cookieTimeout(@Nullable Output<Integer> cookieTimeout) {
            $.cookieTimeout = cookieTimeout;
            return this;
        }

        /**
         * @param cookieTimeout Cookie timeout. It is mandatory when `sticky_session` is &#34;on&#34; and `sticky_session_type` is &#34;insert&#34;. Otherwise, it will be ignored. Valid value range: [1-86400] in seconds.
         * 
         * @return builder
         * 
         */
        public Builder cookieTimeout(Integer cookieTimeout) {
            return cookieTimeout(Output.of(cookieTimeout));
        }

        /**
         * @param deleteProtectionValidation Checking DeleteProtection of SLB instance before deleting. If true, this resource will not be deleted when its SLB instance enabled DeleteProtection. Default to false.
         * 
         * @return builder
         * 
         */
        public Builder deleteProtectionValidation(@Nullable Output<Boolean> deleteProtectionValidation) {
            $.deleteProtectionValidation = deleteProtectionValidation;
            return this;
        }

        /**
         * @param deleteProtectionValidation Checking DeleteProtection of SLB instance before deleting. If true, this resource will not be deleted when its SLB instance enabled DeleteProtection. Default to false.
         * 
         * @return builder
         * 
         */
        public Builder deleteProtectionValidation(Boolean deleteProtectionValidation) {
            return deleteProtectionValidation(Output.of(deleteProtectionValidation));
        }

        /**
         * @param description The description of slb listener. This description can have a string of 1 to 80 characters. Default value: null.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The description of slb listener. This description can have a string of 1 to 80 characters. Default value: null.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param enableHttp2 Whether to enable https listener support http2 or not. Valid values are `on` and `off`. Default to `on`.
         * 
         * @return builder
         * 
         */
        public Builder enableHttp2(@Nullable Output<String> enableHttp2) {
            $.enableHttp2 = enableHttp2;
            return this;
        }

        /**
         * @param enableHttp2 Whether to enable https listener support http2 or not. Valid values are `on` and `off`. Default to `on`.
         * 
         * @return builder
         * 
         */
        public Builder enableHttp2(String enableHttp2) {
            return enableHttp2(Output.of(enableHttp2));
        }

        /**
         * @param establishedTimeout Timeout of tcp listener established connection idle timeout. Valid value range: [10-900] in seconds. Default to 900.
         * 
         * @return builder
         * 
         */
        public Builder establishedTimeout(@Nullable Output<Integer> establishedTimeout) {
            $.establishedTimeout = establishedTimeout;
            return this;
        }

        /**
         * @param establishedTimeout Timeout of tcp listener established connection idle timeout. Valid value range: [10-900] in seconds. Default to 900.
         * 
         * @return builder
         * 
         */
        public Builder establishedTimeout(Integer establishedTimeout) {
            return establishedTimeout(Output.of(establishedTimeout));
        }

        /**
         * @param forwardPort The port that http redirect to https.
         * 
         * @return builder
         * 
         */
        public Builder forwardPort(@Nullable Output<Integer> forwardPort) {
            $.forwardPort = forwardPort;
            return this;
        }

        /**
         * @param forwardPort The port that http redirect to https.
         * 
         * @return builder
         * 
         */
        public Builder forwardPort(Integer forwardPort) {
            return forwardPort(Output.of(forwardPort));
        }

        /**
         * @param frontendPort Port used by the Server Load Balancer instance frontend. Valid value range: [1-65535].
         * 
         * @return builder
         * 
         */
        public Builder frontendPort(Output<Integer> frontendPort) {
            $.frontendPort = frontendPort;
            return this;
        }

        /**
         * @param frontendPort Port used by the Server Load Balancer instance frontend. Valid value range: [1-65535].
         * 
         * @return builder
         * 
         */
        public Builder frontendPort(Integer frontendPort) {
            return frontendPort(Output.of(frontendPort));
        }

        /**
         * @param gzip Whether to enable &#34;Gzip Compression&#34;. If enabled, files of specific file types will be compressed, otherwise, no files will be compressed. Default to true. Available since v1.13.0+.
         * 
         * @return builder
         * 
         */
        public Builder gzip(@Nullable Output<Boolean> gzip) {
            $.gzip = gzip;
            return this;
        }

        /**
         * @param gzip Whether to enable &#34;Gzip Compression&#34;. If enabled, files of specific file types will be compressed, otherwise, no files will be compressed. Default to true. Available since v1.13.0+.
         * 
         * @return builder
         * 
         */
        public Builder gzip(Boolean gzip) {
            return gzip(Output.of(gzip));
        }

        /**
         * @param healthCheck Whether to enable health check. Valid values are`on` and `off`. TCP and UDP listener&#39;s HealthCheck is always on, so it will be ignore when launching TCP or UDP listener.
         * 
         * @return builder
         * 
         */
        public Builder healthCheck(@Nullable Output<String> healthCheck) {
            $.healthCheck = healthCheck;
            return this;
        }

        /**
         * @param healthCheck Whether to enable health check. Valid values are`on` and `off`. TCP and UDP listener&#39;s HealthCheck is always on, so it will be ignore when launching TCP or UDP listener.
         * 
         * @return builder
         * 
         */
        public Builder healthCheck(String healthCheck) {
            return healthCheck(Output.of(healthCheck));
        }

        /**
         * @param healthCheckConnectPort The port that is used for health checks. Valid value range: [0-65535]. Default to `0` means that the port on a backend server is used for health checks.
         * 
         * @return builder
         * 
         */
        public Builder healthCheckConnectPort(@Nullable Output<Integer> healthCheckConnectPort) {
            $.healthCheckConnectPort = healthCheckConnectPort;
            return this;
        }

        /**
         * @param healthCheckConnectPort The port that is used for health checks. Valid value range: [0-65535]. Default to `0` means that the port on a backend server is used for health checks.
         * 
         * @return builder
         * 
         */
        public Builder healthCheckConnectPort(Integer healthCheckConnectPort) {
            return healthCheckConnectPort(Output.of(healthCheckConnectPort));
        }

        /**
         * @param healthCheckDomain Domain name used for health check. When it used to launch TCP listener, `health_check_type` must be &#34;http&#34;. Its length is limited to 1-80 and only characters such as letters, digits, ‘-‘ and ‘.’ are allowed. When it is not set or empty,  Server Load Balancer uses the private network IP address of each backend server as Domain used for health check.
         * 
         * @return builder
         * 
         */
        public Builder healthCheckDomain(@Nullable Output<String> healthCheckDomain) {
            $.healthCheckDomain = healthCheckDomain;
            return this;
        }

        /**
         * @param healthCheckDomain Domain name used for health check. When it used to launch TCP listener, `health_check_type` must be &#34;http&#34;. Its length is limited to 1-80 and only characters such as letters, digits, ‘-‘ and ‘.’ are allowed. When it is not set or empty,  Server Load Balancer uses the private network IP address of each backend server as Domain used for health check.
         * 
         * @return builder
         * 
         */
        public Builder healthCheckDomain(String healthCheckDomain) {
            return healthCheckDomain(Output.of(healthCheckDomain));
        }

        /**
         * @param healthCheckHttpCode Regular health check HTTP status code. Multiple codes are segmented by “,”. It is required when `health_check` is on. Default to `http_2xx`.  Valid values are: `http_2xx`,  `http_3xx`, `http_4xx` and `http_5xx`.
         * 
         * @return builder
         * 
         */
        public Builder healthCheckHttpCode(@Nullable Output<String> healthCheckHttpCode) {
            $.healthCheckHttpCode = healthCheckHttpCode;
            return this;
        }

        /**
         * @param healthCheckHttpCode Regular health check HTTP status code. Multiple codes are segmented by “,”. It is required when `health_check` is on. Default to `http_2xx`.  Valid values are: `http_2xx`,  `http_3xx`, `http_4xx` and `http_5xx`.
         * 
         * @return builder
         * 
         */
        public Builder healthCheckHttpCode(String healthCheckHttpCode) {
            return healthCheckHttpCode(Output.of(healthCheckHttpCode));
        }

        /**
         * @param healthCheckInterval Time interval of health checks. It is required when `health_check` is on. Valid value range: [1-50] in seconds. Default to 2.
         * 
         * @return builder
         * 
         */
        public Builder healthCheckInterval(@Nullable Output<Integer> healthCheckInterval) {
            $.healthCheckInterval = healthCheckInterval;
            return this;
        }

        /**
         * @param healthCheckInterval Time interval of health checks. It is required when `health_check` is on. Valid value range: [1-50] in seconds. Default to 2.
         * 
         * @return builder
         * 
         */
        public Builder healthCheckInterval(Integer healthCheckInterval) {
            return healthCheckInterval(Output.of(healthCheckInterval));
        }

        /**
         * @param healthCheckMethod HealthCheckMethod used for health check.Valid values: [&#34;head&#34;, &#34;get&#34;] `http` and `https` support regions ap-northeast-1, ap-southeast-1, ap-southeast-2, ap-southeast-3, us-east-1, us-west-1, eu-central-1, ap-south-1, me-east-1, cn-huhehaote, cn-zhangjiakou, ap-southeast-5, cn-shenzhen, cn-hongkong, cn-qingdao, cn-chengdu, eu-west-1, cn-hangzhou&#34;, cn-beijing, cn-shanghai.This function does not support the TCP protocol .
         * 
         * @return builder
         * 
         */
        public Builder healthCheckMethod(@Nullable Output<String> healthCheckMethod) {
            $.healthCheckMethod = healthCheckMethod;
            return this;
        }

        /**
         * @param healthCheckMethod HealthCheckMethod used for health check.Valid values: [&#34;head&#34;, &#34;get&#34;] `http` and `https` support regions ap-northeast-1, ap-southeast-1, ap-southeast-2, ap-southeast-3, us-east-1, us-west-1, eu-central-1, ap-south-1, me-east-1, cn-huhehaote, cn-zhangjiakou, ap-southeast-5, cn-shenzhen, cn-hongkong, cn-qingdao, cn-chengdu, eu-west-1, cn-hangzhou&#34;, cn-beijing, cn-shanghai.This function does not support the TCP protocol .
         * 
         * @return builder
         * 
         */
        public Builder healthCheckMethod(String healthCheckMethod) {
            return healthCheckMethod(Output.of(healthCheckMethod));
        }

        /**
         * @param healthCheckTimeout Maximum timeout of each health check response. It is required when `health_check` is on. Valid value range: [1-300] in seconds. Default to 5. Note: If `health_check_timeout` &lt; `health_check_interval`, its will be replaced by `health_check_interval`.
         * 
         * @return builder
         * 
         */
        public Builder healthCheckTimeout(@Nullable Output<Integer> healthCheckTimeout) {
            $.healthCheckTimeout = healthCheckTimeout;
            return this;
        }

        /**
         * @param healthCheckTimeout Maximum timeout of each health check response. It is required when `health_check` is on. Valid value range: [1-300] in seconds. Default to 5. Note: If `health_check_timeout` &lt; `health_check_interval`, its will be replaced by `health_check_interval`.
         * 
         * @return builder
         * 
         */
        public Builder healthCheckTimeout(Integer healthCheckTimeout) {
            return healthCheckTimeout(Output.of(healthCheckTimeout));
        }

        /**
         * @param healthCheckType Type of health check. Valid values are: `tcp` and `http`. Default to `tcp` . TCP supports TCP and HTTP health check mode, you can select the particular mode depending on your application.
         * 
         * @return builder
         * 
         */
        public Builder healthCheckType(@Nullable Output<String> healthCheckType) {
            $.healthCheckType = healthCheckType;
            return this;
        }

        /**
         * @param healthCheckType Type of health check. Valid values are: `tcp` and `http`. Default to `tcp` . TCP supports TCP and HTTP health check mode, you can select the particular mode depending on your application.
         * 
         * @return builder
         * 
         */
        public Builder healthCheckType(String healthCheckType) {
            return healthCheckType(Output.of(healthCheckType));
        }

        /**
         * @param healthCheckUri URI used for health check. When it used to launch TCP listener, `health_check_type` must be &#34;http&#34;. Its length is limited to 1-80 and it must start with /. Only characters such as letters, digits, ‘-’, ‘/’, ‘.’, ‘%’, ‘?’, #’ and ‘&amp;’ are allowed.
         * 
         * @return builder
         * 
         */
        public Builder healthCheckUri(@Nullable Output<String> healthCheckUri) {
            $.healthCheckUri = healthCheckUri;
            return this;
        }

        /**
         * @param healthCheckUri URI used for health check. When it used to launch TCP listener, `health_check_type` must be &#34;http&#34;. Its length is limited to 1-80 and it must start with /. Only characters such as letters, digits, ‘-’, ‘/’, ‘.’, ‘%’, ‘?’, #’ and ‘&amp;’ are allowed.
         * 
         * @return builder
         * 
         */
        public Builder healthCheckUri(String healthCheckUri) {
            return healthCheckUri(Output.of(healthCheckUri));
        }

        /**
         * @param healthyThreshold The number of health checks that an unhealthy backend server must consecutively pass before it can be declared healthy. In this case, the health check state is changed from fail to success. It is required when `health_check` is on. Valid value range: [2-10] in seconds. Default to 3. **NOTE:** This parameter takes effect only if the `health_check` parameter is set to `on`.
         * 
         * @return builder
         * 
         */
        public Builder healthyThreshold(@Nullable Output<Integer> healthyThreshold) {
            $.healthyThreshold = healthyThreshold;
            return this;
        }

        /**
         * @param healthyThreshold The number of health checks that an unhealthy backend server must consecutively pass before it can be declared healthy. In this case, the health check state is changed from fail to success. It is required when `health_check` is on. Valid value range: [2-10] in seconds. Default to 3. **NOTE:** This parameter takes effect only if the `health_check` parameter is set to `on`.
         * 
         * @return builder
         * 
         */
        public Builder healthyThreshold(Integer healthyThreshold) {
            return healthyThreshold(Output.of(healthyThreshold));
        }

        /**
         * @param idleTimeout Timeout of http or https listener established connection idle timeout. Valid value range: [1-60] in seconds. Default to 15.
         * 
         * @return builder
         * 
         */
        public Builder idleTimeout(@Nullable Output<Integer> idleTimeout) {
            $.idleTimeout = idleTimeout;
            return this;
        }

        /**
         * @param idleTimeout Timeout of http or https listener established connection idle timeout. Valid value range: [1-60] in seconds. Default to 15.
         * 
         * @return builder
         * 
         */
        public Builder idleTimeout(Integer idleTimeout) {
            return idleTimeout(Output.of(idleTimeout));
        }

        /**
         * @return builder
         * 
         * @deprecated
         * Field &#39;lb_port&#39; has been removed since 1.211.0.
         * 
         */
        @Deprecated /* Field 'lb_port' has been removed since 1.211.0. */
        public Builder lbPort(@Nullable Output<Integer> lbPort) {
            $.lbPort = lbPort;
            return this;
        }

        /**
         * @return builder
         * 
         * @deprecated
         * Field &#39;lb_port&#39; has been removed since 1.211.0.
         * 
         */
        @Deprecated /* Field 'lb_port' has been removed since 1.211.0. */
        public Builder lbPort(Integer lbPort) {
            return lbPort(Output.of(lbPort));
        }

        /**
         * @return builder
         * 
         * @deprecated
         * Field &#39;lb_protocol&#39; has been removed since 1.211.0.
         * 
         */
        @Deprecated /* Field 'lb_protocol' has been removed since 1.211.0. */
        public Builder lbProtocol(@Nullable Output<String> lbProtocol) {
            $.lbProtocol = lbProtocol;
            return this;
        }

        /**
         * @return builder
         * 
         * @deprecated
         * Field &#39;lb_protocol&#39; has been removed since 1.211.0.
         * 
         */
        @Deprecated /* Field 'lb_protocol' has been removed since 1.211.0. */
        public Builder lbProtocol(String lbProtocol) {
            return lbProtocol(Output.of(lbProtocol));
        }

        /**
         * @param listenerForward Whether to enable http redirect to https, Valid values are `on` and `off`. Default to `off`.
         * 
         * @return builder
         * 
         */
        public Builder listenerForward(@Nullable Output<String> listenerForward) {
            $.listenerForward = listenerForward;
            return this;
        }

        /**
         * @param listenerForward Whether to enable http redirect to https, Valid values are `on` and `off`. Default to `off`.
         * 
         * @return builder
         * 
         */
        public Builder listenerForward(String listenerForward) {
            return listenerForward(Output.of(listenerForward));
        }

        /**
         * @param loadBalancerId The Load Balancer ID which is used to launch a new listener.
         * 
         * @return builder
         * 
         */
        public Builder loadBalancerId(Output<String> loadBalancerId) {
            $.loadBalancerId = loadBalancerId;
            return this;
        }

        /**
         * @param loadBalancerId The Load Balancer ID which is used to launch a new listener.
         * 
         * @return builder
         * 
         */
        public Builder loadBalancerId(String loadBalancerId) {
            return loadBalancerId(Output.of(loadBalancerId));
        }

        /**
         * @param masterSlaveServerGroupId The ID of the master slave server group.
         * 
         * @return builder
         * 
         */
        public Builder masterSlaveServerGroupId(@Nullable Output<String> masterSlaveServerGroupId) {
            $.masterSlaveServerGroupId = masterSlaveServerGroupId;
            return this;
        }

        /**
         * @param masterSlaveServerGroupId The ID of the master slave server group.
         * 
         * @return builder
         * 
         */
        public Builder masterSlaveServerGroupId(String masterSlaveServerGroupId) {
            return masterSlaveServerGroupId(Output.of(masterSlaveServerGroupId));
        }

        /**
         * @param persistenceTimeout Timeout of connection persistence. Valid value range: [0-3600] in seconds. Default to 0 and means closing it.
         * 
         * @return builder
         * 
         */
        public Builder persistenceTimeout(@Nullable Output<Integer> persistenceTimeout) {
            $.persistenceTimeout = persistenceTimeout;
            return this;
        }

        /**
         * @param persistenceTimeout Timeout of connection persistence. Valid value range: [0-3600] in seconds. Default to 0 and means closing it.
         * 
         * @return builder
         * 
         */
        public Builder persistenceTimeout(Integer persistenceTimeout) {
            return persistenceTimeout(Output.of(persistenceTimeout));
        }

        /**
         * @param protocol The protocol to listen on. Valid values are [`http`, `https`, `tcp`, `udp`].
         * 
         * @return builder
         * 
         */
        public Builder protocol(Output<String> protocol) {
            $.protocol = protocol;
            return this;
        }

        /**
         * @param protocol The protocol to listen on. Valid values are [`http`, `https`, `tcp`, `udp`].
         * 
         * @return builder
         * 
         */
        public Builder protocol(String protocol) {
            return protocol(Output.of(protocol));
        }

        /**
         * @param proxyProtocolV2Enabled Whether to support carrying the client source address to the backend server through the Proxy Protocol. Valid values are `true` and `false`. Default to `false`.
         * 
         * &gt; **NOTE:** Once enable the http redirect to https function, any parameters excepted forward_port,listener_forward,load_balancer_id,frontend_port,protocol will be ignored. More info, please refer to [Redirect http to https](https://www.alibabacloud.com/help/doc-detail/89151.htm?spm=a2c63.p38356.b99.186.42f66384mpjUTB).
         * 
         * &gt; **NOTE:** Advantanced feature such as `tls_cipher_policy`, can not be updated when load balancer instance is &#34;Shared-Performance&#34;. More info, please refer to [Configure a HTTPS Listener](https://www.alibabacloud.com/help/doc-detail/27593.htm).
         * 
         * @return builder
         * 
         */
        public Builder proxyProtocolV2Enabled(@Nullable Output<Boolean> proxyProtocolV2Enabled) {
            $.proxyProtocolV2Enabled = proxyProtocolV2Enabled;
            return this;
        }

        /**
         * @param proxyProtocolV2Enabled Whether to support carrying the client source address to the backend server through the Proxy Protocol. Valid values are `true` and `false`. Default to `false`.
         * 
         * &gt; **NOTE:** Once enable the http redirect to https function, any parameters excepted forward_port,listener_forward,load_balancer_id,frontend_port,protocol will be ignored. More info, please refer to [Redirect http to https](https://www.alibabacloud.com/help/doc-detail/89151.htm?spm=a2c63.p38356.b99.186.42f66384mpjUTB).
         * 
         * &gt; **NOTE:** Advantanced feature such as `tls_cipher_policy`, can not be updated when load balancer instance is &#34;Shared-Performance&#34;. More info, please refer to [Configure a HTTPS Listener](https://www.alibabacloud.com/help/doc-detail/27593.htm).
         * 
         * @return builder
         * 
         */
        public Builder proxyProtocolV2Enabled(Boolean proxyProtocolV2Enabled) {
            return proxyProtocolV2Enabled(Output.of(proxyProtocolV2Enabled));
        }

        /**
         * @param requestTimeout Timeout of http or https listener request (which does not get response from backend) timeout. Valid value range: [1-180] in seconds. Default to 60.
         * 
         * @return builder
         * 
         */
        public Builder requestTimeout(@Nullable Output<Integer> requestTimeout) {
            $.requestTimeout = requestTimeout;
            return this;
        }

        /**
         * @param requestTimeout Timeout of http or https listener request (which does not get response from backend) timeout. Valid value range: [1-180] in seconds. Default to 60.
         * 
         * @return builder
         * 
         */
        public Builder requestTimeout(Integer requestTimeout) {
            return requestTimeout(Output.of(requestTimeout));
        }

        /**
         * @param scheduler Scheduling algorithm,  Valid values: `wrr`, `rr`, `wlc`, `sch`, `tcp`, `qch`. Default to `wrr`.
         * Only when `protocol` is `tcp` or `udp`, `scheduler` can be set to `sch`. Only when instance is guaranteed-performance instance and `protocol` is `tcp` or `udp`, `scheduler` can be set to `tch`. Only when instance is guaranteed-performance instance and `protocol` is `udp`, `scheduler` can be set to `qch`.
         * 
         * @return builder
         * 
         */
        public Builder scheduler(@Nullable Output<String> scheduler) {
            $.scheduler = scheduler;
            return this;
        }

        /**
         * @param scheduler Scheduling algorithm,  Valid values: `wrr`, `rr`, `wlc`, `sch`, `tcp`, `qch`. Default to `wrr`.
         * Only when `protocol` is `tcp` or `udp`, `scheduler` can be set to `sch`. Only when instance is guaranteed-performance instance and `protocol` is `tcp` or `udp`, `scheduler` can be set to `tch`. Only when instance is guaranteed-performance instance and `protocol` is `udp`, `scheduler` can be set to `qch`.
         * 
         * @return builder
         * 
         */
        public Builder scheduler(String scheduler) {
            return scheduler(Output.of(scheduler));
        }

        /**
         * @param serverCertificateId SLB Server certificate ID. It is required when `protocol` is `https`. The `server_certificate_id` is also required when the value of the `ssl_certificate_id`  is Empty.
         * 
         * @return builder
         * 
         */
        public Builder serverCertificateId(@Nullable Output<String> serverCertificateId) {
            $.serverCertificateId = serverCertificateId;
            return this;
        }

        /**
         * @param serverCertificateId SLB Server certificate ID. It is required when `protocol` is `https`. The `server_certificate_id` is also required when the value of the `ssl_certificate_id`  is Empty.
         * 
         * @return builder
         * 
         */
        public Builder serverCertificateId(String serverCertificateId) {
            return serverCertificateId(Output.of(serverCertificateId));
        }

        /**
         * @param serverGroupId the id of server group to be apply on the listener, is the id of resource `alicloud.slb.ServerGroup`.
         * 
         * @return builder
         * 
         */
        public Builder serverGroupId(@Nullable Output<String> serverGroupId) {
            $.serverGroupId = serverGroupId;
            return this;
        }

        /**
         * @param serverGroupId the id of server group to be apply on the listener, is the id of resource `alicloud.slb.ServerGroup`.
         * 
         * @return builder
         * 
         */
        public Builder serverGroupId(String serverGroupId) {
            return serverGroupId(Output.of(serverGroupId));
        }

        /**
         * @param sslCertificateId SLB Server certificate ID. It has been deprecated from 1.59.0 and using `server_certificate_id` instead.
         * 
         * @return builder
         * 
         * @deprecated
         * Field &#39;ssl_certificate_id&#39; has been deprecated from 1.59.0 and using &#39;server_certificate_id&#39; instead.
         * 
         */
        @Deprecated /* Field 'ssl_certificate_id' has been deprecated from 1.59.0 and using 'server_certificate_id' instead. */
        public Builder sslCertificateId(@Nullable Output<String> sslCertificateId) {
            $.sslCertificateId = sslCertificateId;
            return this;
        }

        /**
         * @param sslCertificateId SLB Server certificate ID. It has been deprecated from 1.59.0 and using `server_certificate_id` instead.
         * 
         * @return builder
         * 
         * @deprecated
         * Field &#39;ssl_certificate_id&#39; has been deprecated from 1.59.0 and using &#39;server_certificate_id&#39; instead.
         * 
         */
        @Deprecated /* Field 'ssl_certificate_id' has been deprecated from 1.59.0 and using 'server_certificate_id' instead. */
        public Builder sslCertificateId(String sslCertificateId) {
            return sslCertificateId(Output.of(sslCertificateId));
        }

        /**
         * @param stickySession Whether to enable session persistence, Valid values are `on` and `off`. Default to `off`.
         * 
         * @return builder
         * 
         */
        public Builder stickySession(@Nullable Output<String> stickySession) {
            $.stickySession = stickySession;
            return this;
        }

        /**
         * @param stickySession Whether to enable session persistence, Valid values are `on` and `off`. Default to `off`.
         * 
         * @return builder
         * 
         */
        public Builder stickySession(String stickySession) {
            return stickySession(Output.of(stickySession));
        }

        /**
         * @param stickySessionType Mode for handling the cookie. If `sticky_session` is &#34;on&#34;, it is mandatory. Otherwise, it will be ignored. Valid values are `insert` and `server`. `insert` means it is inserted from Server Load Balancer; `server` means the Server Load Balancer learns from the backend server.
         * 
         * @return builder
         * 
         */
        public Builder stickySessionType(@Nullable Output<String> stickySessionType) {
            $.stickySessionType = stickySessionType;
            return this;
        }

        /**
         * @param stickySessionType Mode for handling the cookie. If `sticky_session` is &#34;on&#34;, it is mandatory. Otherwise, it will be ignored. Valid values are `insert` and `server`. `insert` means it is inserted from Server Load Balancer; `server` means the Server Load Balancer learns from the backend server.
         * 
         * @return builder
         * 
         */
        public Builder stickySessionType(String stickySessionType) {
            return stickySessionType(Output.of(stickySessionType));
        }

        /**
         * @param tlsCipherPolicy Https listener TLS cipher policy. Valid values are `tls_cipher_policy_1_0`, `tls_cipher_policy_1_1`, `tls_cipher_policy_1_2`, `tls_cipher_policy_1_2_strict`. Default to `tls_cipher_policy_1_0`. Currently the `tls_cipher_policy` can not be updated when load balancer instance is &#34;Shared-Performance&#34;.
         * 
         * @return builder
         * 
         */
        public Builder tlsCipherPolicy(@Nullable Output<String> tlsCipherPolicy) {
            $.tlsCipherPolicy = tlsCipherPolicy;
            return this;
        }

        /**
         * @param tlsCipherPolicy Https listener TLS cipher policy. Valid values are `tls_cipher_policy_1_0`, `tls_cipher_policy_1_1`, `tls_cipher_policy_1_2`, `tls_cipher_policy_1_2_strict`. Default to `tls_cipher_policy_1_0`. Currently the `tls_cipher_policy` can not be updated when load balancer instance is &#34;Shared-Performance&#34;.
         * 
         * @return builder
         * 
         */
        public Builder tlsCipherPolicy(String tlsCipherPolicy) {
            return tlsCipherPolicy(Output.of(tlsCipherPolicy));
        }

        /**
         * @param unhealthyThreshold The number of health checks that a healthy backend server must consecutively fail before it can be declared unhealthy. In this case, the health check state is changed from success to fail. It is required when `health_check` is on. Valid value range: [2-10] in seconds. Default to 3. **NOTE:** This parameter takes effect only if the `health_check` parameter is set to `on`.
         * 
         * @return builder
         * 
         */
        public Builder unhealthyThreshold(@Nullable Output<Integer> unhealthyThreshold) {
            $.unhealthyThreshold = unhealthyThreshold;
            return this;
        }

        /**
         * @param unhealthyThreshold The number of health checks that a healthy backend server must consecutively fail before it can be declared unhealthy. In this case, the health check state is changed from success to fail. It is required when `health_check` is on. Valid value range: [2-10] in seconds. Default to 3. **NOTE:** This parameter takes effect only if the `health_check` parameter is set to `on`.
         * 
         * @return builder
         * 
         */
        public Builder unhealthyThreshold(Integer unhealthyThreshold) {
            return unhealthyThreshold(Output.of(unhealthyThreshold));
        }

        /**
         * @param xForwardedFor Whether to set additional HTTP Header field &#34;X-Forwarded-For&#34; (documented below). Available since v1.13.0+. See `x_forwarded_for` below.
         * 
         * @return builder
         * 
         */
        public Builder xForwardedFor(@Nullable Output<ListenerXForwardedForArgs> xForwardedFor) {
            $.xForwardedFor = xForwardedFor;
            return this;
        }

        /**
         * @param xForwardedFor Whether to set additional HTTP Header field &#34;X-Forwarded-For&#34; (documented below). Available since v1.13.0+. See `x_forwarded_for` below.
         * 
         * @return builder
         * 
         */
        public Builder xForwardedFor(ListenerXForwardedForArgs xForwardedFor) {
            return xForwardedFor(Output.of(xForwardedFor));
        }

        public ListenerArgs build() {
            $.frontendPort = Objects.requireNonNull($.frontendPort, "expected parameter 'frontendPort' to be non-null");
            $.loadBalancerId = Objects.requireNonNull($.loadBalancerId, "expected parameter 'loadBalancerId' to be non-null");
            $.protocol = Objects.requireNonNull($.protocol, "expected parameter 'protocol' to be non-null");
            return $;
        }
    }

}
