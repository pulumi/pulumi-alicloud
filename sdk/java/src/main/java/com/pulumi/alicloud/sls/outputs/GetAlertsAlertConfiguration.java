// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.sls.outputs;

import com.pulumi.alicloud.sls.outputs.GetAlertsAlertConfigurationAnnotation;
import com.pulumi.alicloud.sls.outputs.GetAlertsAlertConfigurationConditionConfiguration;
import com.pulumi.alicloud.sls.outputs.GetAlertsAlertConfigurationGroupConfiguration;
import com.pulumi.alicloud.sls.outputs.GetAlertsAlertConfigurationJoinConfiguration;
import com.pulumi.alicloud.sls.outputs.GetAlertsAlertConfigurationLabel;
import com.pulumi.alicloud.sls.outputs.GetAlertsAlertConfigurationPolicyConfiguration;
import com.pulumi.alicloud.sls.outputs.GetAlertsAlertConfigurationQueryList;
import com.pulumi.alicloud.sls.outputs.GetAlertsAlertConfigurationSeverityConfiguration;
import com.pulumi.alicloud.sls.outputs.GetAlertsAlertConfigurationSinkAlerthub;
import com.pulumi.alicloud.sls.outputs.GetAlertsAlertConfigurationSinkCms;
import com.pulumi.alicloud.sls.outputs.GetAlertsAlertConfigurationSinkEventStore;
import com.pulumi.alicloud.sls.outputs.GetAlertsAlertConfigurationTemplateConfiguration;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetAlertsAlertConfiguration {
    /**
     * @return Template Annotations.
     * 
     */
    private List<GetAlertsAlertConfigurationAnnotation> annotations;
    /**
     * @return Whether to turn on automatic labeling.true (default): The automatic annotation function is enabled, and the system automatically adds information such as__county__to the alarm. For more information, see Automatic Labeling.false: Turn off the automatic annotation function.
     * 
     */
    private Boolean autoAnnotation;
    /**
     * @return Alarm trigger condition.
     * 
     */
    private GetAlertsAlertConfigurationConditionConfiguration conditionConfiguration;
    /**
     * @return The instrument cluster associated with the alarm. It is recommended to set to internal-alert-analysis.
     * 
     */
    private String dashboard;
    /**
     * @return Group evaluation configuration.
     * 
     */
    private GetAlertsAlertConfigurationGroupConfiguration groupConfiguration;
    /**
     * @return Set operation configuration.
     * 
     */
    private List<GetAlertsAlertConfigurationJoinConfiguration> joinConfigurations;
    /**
     * @return Label.
     * 
     */
    private List<GetAlertsAlertConfigurationLabel> labels;
    /**
     * @return Second-level timestamp representing the temporary shutdown deadline.
     * 
     */
    private Integer muteUntil;
    /**
     * @return Whether no data triggers an alarm.true: If the number of times the query and analysis results (if there are multiple results, the result after the collection operation) is no data exceeds the continuous trigger threshold, an alarm is generated.false (default): Turn off the no data alarm function.
     * 
     */
    private Boolean noDataFire;
    /**
     * @return Alarm severity when no data triggers an alarm.
     * 
     */
    private Integer noDataSeverity;
    /**
     * @return Alert policy configuration.
     * 
     */
    private GetAlertsAlertConfigurationPolicyConfiguration policyConfiguration;
    /**
     * @return Query the statistical list.
     * 
     */
    private List<GetAlertsAlertConfigurationQueryList> queryLists;
    /**
     * @return Whether to send a recovery notification.true: A recovery alarm is triggered when the alarm is restored.false (default): Turn off the alarm recovery notification function.
     * 
     */
    private Boolean sendResolved;
    /**
     * @return Trigger condition, set at least one trigger condition.
     * 
     */
    private List<GetAlertsAlertConfigurationSeverityConfiguration> severityConfigurations;
    /**
     * @return Configuration of Alerts Sent to Alerthub.
     * 
     */
    private GetAlertsAlertConfigurationSinkAlerthub sinkAlerthub;
    /**
     * @return Configure alerts sent to CloudMonitor.
     * 
     */
    private GetAlertsAlertConfigurationSinkCms sinkCms;
    /**
     * @return Configuration of sending alarms to EventStore.
     * 
     */
    private GetAlertsAlertConfigurationSinkEventStore sinkEventStore;
    /**
     * @return Customize the category of alarm monitoring rules.
     * 
     */
    private List<String> tags;
    /**
     * @return Alarm rule template configuration.
     * 
     */
    private GetAlertsAlertConfigurationTemplateConfiguration templateConfiguration;
    /**
     * @return Set the continuous trigger threshold. When the cumulative number of triggers reaches this value, an alarm is generated. The statistics are not counted when the trigger condition is not met.
     * 
     */
    private Integer threshold;
    /**
     * @return Check the frequency type. Log Service checks the query and analysis results according to the frequency you configured. The values are as follows:Fixedate: checks query and analysis results at regular intervals.Cron: specifies the time interval by using the Cron expression, and checks the query and analysis results at the specified time interval.
     * 
     */
    private String type;
    /**
     * @return Fixed as 2.0.
     * 
     */
    private String version;

    private GetAlertsAlertConfiguration() {}
    /**
     * @return Template Annotations.
     * 
     */
    public List<GetAlertsAlertConfigurationAnnotation> annotations() {
        return this.annotations;
    }
    /**
     * @return Whether to turn on automatic labeling.true (default): The automatic annotation function is enabled, and the system automatically adds information such as__county__to the alarm. For more information, see Automatic Labeling.false: Turn off the automatic annotation function.
     * 
     */
    public Boolean autoAnnotation() {
        return this.autoAnnotation;
    }
    /**
     * @return Alarm trigger condition.
     * 
     */
    public GetAlertsAlertConfigurationConditionConfiguration conditionConfiguration() {
        return this.conditionConfiguration;
    }
    /**
     * @return The instrument cluster associated with the alarm. It is recommended to set to internal-alert-analysis.
     * 
     */
    public String dashboard() {
        return this.dashboard;
    }
    /**
     * @return Group evaluation configuration.
     * 
     */
    public GetAlertsAlertConfigurationGroupConfiguration groupConfiguration() {
        return this.groupConfiguration;
    }
    /**
     * @return Set operation configuration.
     * 
     */
    public List<GetAlertsAlertConfigurationJoinConfiguration> joinConfigurations() {
        return this.joinConfigurations;
    }
    /**
     * @return Label.
     * 
     */
    public List<GetAlertsAlertConfigurationLabel> labels() {
        return this.labels;
    }
    /**
     * @return Second-level timestamp representing the temporary shutdown deadline.
     * 
     */
    public Integer muteUntil() {
        return this.muteUntil;
    }
    /**
     * @return Whether no data triggers an alarm.true: If the number of times the query and analysis results (if there are multiple results, the result after the collection operation) is no data exceeds the continuous trigger threshold, an alarm is generated.false (default): Turn off the no data alarm function.
     * 
     */
    public Boolean noDataFire() {
        return this.noDataFire;
    }
    /**
     * @return Alarm severity when no data triggers an alarm.
     * 
     */
    public Integer noDataSeverity() {
        return this.noDataSeverity;
    }
    /**
     * @return Alert policy configuration.
     * 
     */
    public GetAlertsAlertConfigurationPolicyConfiguration policyConfiguration() {
        return this.policyConfiguration;
    }
    /**
     * @return Query the statistical list.
     * 
     */
    public List<GetAlertsAlertConfigurationQueryList> queryLists() {
        return this.queryLists;
    }
    /**
     * @return Whether to send a recovery notification.true: A recovery alarm is triggered when the alarm is restored.false (default): Turn off the alarm recovery notification function.
     * 
     */
    public Boolean sendResolved() {
        return this.sendResolved;
    }
    /**
     * @return Trigger condition, set at least one trigger condition.
     * 
     */
    public List<GetAlertsAlertConfigurationSeverityConfiguration> severityConfigurations() {
        return this.severityConfigurations;
    }
    /**
     * @return Configuration of Alerts Sent to Alerthub.
     * 
     */
    public GetAlertsAlertConfigurationSinkAlerthub sinkAlerthub() {
        return this.sinkAlerthub;
    }
    /**
     * @return Configure alerts sent to CloudMonitor.
     * 
     */
    public GetAlertsAlertConfigurationSinkCms sinkCms() {
        return this.sinkCms;
    }
    /**
     * @return Configuration of sending alarms to EventStore.
     * 
     */
    public GetAlertsAlertConfigurationSinkEventStore sinkEventStore() {
        return this.sinkEventStore;
    }
    /**
     * @return Customize the category of alarm monitoring rules.
     * 
     */
    public List<String> tags() {
        return this.tags;
    }
    /**
     * @return Alarm rule template configuration.
     * 
     */
    public GetAlertsAlertConfigurationTemplateConfiguration templateConfiguration() {
        return this.templateConfiguration;
    }
    /**
     * @return Set the continuous trigger threshold. When the cumulative number of triggers reaches this value, an alarm is generated. The statistics are not counted when the trigger condition is not met.
     * 
     */
    public Integer threshold() {
        return this.threshold;
    }
    /**
     * @return Check the frequency type. Log Service checks the query and analysis results according to the frequency you configured. The values are as follows:Fixedate: checks query and analysis results at regular intervals.Cron: specifies the time interval by using the Cron expression, and checks the query and analysis results at the specified time interval.
     * 
     */
    public String type() {
        return this.type;
    }
    /**
     * @return Fixed as 2.0.
     * 
     */
    public String version() {
        return this.version;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetAlertsAlertConfiguration defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetAlertsAlertConfigurationAnnotation> annotations;
        private Boolean autoAnnotation;
        private GetAlertsAlertConfigurationConditionConfiguration conditionConfiguration;
        private String dashboard;
        private GetAlertsAlertConfigurationGroupConfiguration groupConfiguration;
        private List<GetAlertsAlertConfigurationJoinConfiguration> joinConfigurations;
        private List<GetAlertsAlertConfigurationLabel> labels;
        private Integer muteUntil;
        private Boolean noDataFire;
        private Integer noDataSeverity;
        private GetAlertsAlertConfigurationPolicyConfiguration policyConfiguration;
        private List<GetAlertsAlertConfigurationQueryList> queryLists;
        private Boolean sendResolved;
        private List<GetAlertsAlertConfigurationSeverityConfiguration> severityConfigurations;
        private GetAlertsAlertConfigurationSinkAlerthub sinkAlerthub;
        private GetAlertsAlertConfigurationSinkCms sinkCms;
        private GetAlertsAlertConfigurationSinkEventStore sinkEventStore;
        private List<String> tags;
        private GetAlertsAlertConfigurationTemplateConfiguration templateConfiguration;
        private Integer threshold;
        private String type;
        private String version;
        public Builder() {}
        public Builder(GetAlertsAlertConfiguration defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.annotations = defaults.annotations;
    	      this.autoAnnotation = defaults.autoAnnotation;
    	      this.conditionConfiguration = defaults.conditionConfiguration;
    	      this.dashboard = defaults.dashboard;
    	      this.groupConfiguration = defaults.groupConfiguration;
    	      this.joinConfigurations = defaults.joinConfigurations;
    	      this.labels = defaults.labels;
    	      this.muteUntil = defaults.muteUntil;
    	      this.noDataFire = defaults.noDataFire;
    	      this.noDataSeverity = defaults.noDataSeverity;
    	      this.policyConfiguration = defaults.policyConfiguration;
    	      this.queryLists = defaults.queryLists;
    	      this.sendResolved = defaults.sendResolved;
    	      this.severityConfigurations = defaults.severityConfigurations;
    	      this.sinkAlerthub = defaults.sinkAlerthub;
    	      this.sinkCms = defaults.sinkCms;
    	      this.sinkEventStore = defaults.sinkEventStore;
    	      this.tags = defaults.tags;
    	      this.templateConfiguration = defaults.templateConfiguration;
    	      this.threshold = defaults.threshold;
    	      this.type = defaults.type;
    	      this.version = defaults.version;
        }

        @CustomType.Setter
        public Builder annotations(List<GetAlertsAlertConfigurationAnnotation> annotations) {
            if (annotations == null) {
              throw new MissingRequiredPropertyException("GetAlertsAlertConfiguration", "annotations");
            }
            this.annotations = annotations;
            return this;
        }
        public Builder annotations(GetAlertsAlertConfigurationAnnotation... annotations) {
            return annotations(List.of(annotations));
        }
        @CustomType.Setter
        public Builder autoAnnotation(Boolean autoAnnotation) {
            if (autoAnnotation == null) {
              throw new MissingRequiredPropertyException("GetAlertsAlertConfiguration", "autoAnnotation");
            }
            this.autoAnnotation = autoAnnotation;
            return this;
        }
        @CustomType.Setter
        public Builder conditionConfiguration(GetAlertsAlertConfigurationConditionConfiguration conditionConfiguration) {
            if (conditionConfiguration == null) {
              throw new MissingRequiredPropertyException("GetAlertsAlertConfiguration", "conditionConfiguration");
            }
            this.conditionConfiguration = conditionConfiguration;
            return this;
        }
        @CustomType.Setter
        public Builder dashboard(String dashboard) {
            if (dashboard == null) {
              throw new MissingRequiredPropertyException("GetAlertsAlertConfiguration", "dashboard");
            }
            this.dashboard = dashboard;
            return this;
        }
        @CustomType.Setter
        public Builder groupConfiguration(GetAlertsAlertConfigurationGroupConfiguration groupConfiguration) {
            if (groupConfiguration == null) {
              throw new MissingRequiredPropertyException("GetAlertsAlertConfiguration", "groupConfiguration");
            }
            this.groupConfiguration = groupConfiguration;
            return this;
        }
        @CustomType.Setter
        public Builder joinConfigurations(List<GetAlertsAlertConfigurationJoinConfiguration> joinConfigurations) {
            if (joinConfigurations == null) {
              throw new MissingRequiredPropertyException("GetAlertsAlertConfiguration", "joinConfigurations");
            }
            this.joinConfigurations = joinConfigurations;
            return this;
        }
        public Builder joinConfigurations(GetAlertsAlertConfigurationJoinConfiguration... joinConfigurations) {
            return joinConfigurations(List.of(joinConfigurations));
        }
        @CustomType.Setter
        public Builder labels(List<GetAlertsAlertConfigurationLabel> labels) {
            if (labels == null) {
              throw new MissingRequiredPropertyException("GetAlertsAlertConfiguration", "labels");
            }
            this.labels = labels;
            return this;
        }
        public Builder labels(GetAlertsAlertConfigurationLabel... labels) {
            return labels(List.of(labels));
        }
        @CustomType.Setter
        public Builder muteUntil(Integer muteUntil) {
            if (muteUntil == null) {
              throw new MissingRequiredPropertyException("GetAlertsAlertConfiguration", "muteUntil");
            }
            this.muteUntil = muteUntil;
            return this;
        }
        @CustomType.Setter
        public Builder noDataFire(Boolean noDataFire) {
            if (noDataFire == null) {
              throw new MissingRequiredPropertyException("GetAlertsAlertConfiguration", "noDataFire");
            }
            this.noDataFire = noDataFire;
            return this;
        }
        @CustomType.Setter
        public Builder noDataSeverity(Integer noDataSeverity) {
            if (noDataSeverity == null) {
              throw new MissingRequiredPropertyException("GetAlertsAlertConfiguration", "noDataSeverity");
            }
            this.noDataSeverity = noDataSeverity;
            return this;
        }
        @CustomType.Setter
        public Builder policyConfiguration(GetAlertsAlertConfigurationPolicyConfiguration policyConfiguration) {
            if (policyConfiguration == null) {
              throw new MissingRequiredPropertyException("GetAlertsAlertConfiguration", "policyConfiguration");
            }
            this.policyConfiguration = policyConfiguration;
            return this;
        }
        @CustomType.Setter
        public Builder queryLists(List<GetAlertsAlertConfigurationQueryList> queryLists) {
            if (queryLists == null) {
              throw new MissingRequiredPropertyException("GetAlertsAlertConfiguration", "queryLists");
            }
            this.queryLists = queryLists;
            return this;
        }
        public Builder queryLists(GetAlertsAlertConfigurationQueryList... queryLists) {
            return queryLists(List.of(queryLists));
        }
        @CustomType.Setter
        public Builder sendResolved(Boolean sendResolved) {
            if (sendResolved == null) {
              throw new MissingRequiredPropertyException("GetAlertsAlertConfiguration", "sendResolved");
            }
            this.sendResolved = sendResolved;
            return this;
        }
        @CustomType.Setter
        public Builder severityConfigurations(List<GetAlertsAlertConfigurationSeverityConfiguration> severityConfigurations) {
            if (severityConfigurations == null) {
              throw new MissingRequiredPropertyException("GetAlertsAlertConfiguration", "severityConfigurations");
            }
            this.severityConfigurations = severityConfigurations;
            return this;
        }
        public Builder severityConfigurations(GetAlertsAlertConfigurationSeverityConfiguration... severityConfigurations) {
            return severityConfigurations(List.of(severityConfigurations));
        }
        @CustomType.Setter
        public Builder sinkAlerthub(GetAlertsAlertConfigurationSinkAlerthub sinkAlerthub) {
            if (sinkAlerthub == null) {
              throw new MissingRequiredPropertyException("GetAlertsAlertConfiguration", "sinkAlerthub");
            }
            this.sinkAlerthub = sinkAlerthub;
            return this;
        }
        @CustomType.Setter
        public Builder sinkCms(GetAlertsAlertConfigurationSinkCms sinkCms) {
            if (sinkCms == null) {
              throw new MissingRequiredPropertyException("GetAlertsAlertConfiguration", "sinkCms");
            }
            this.sinkCms = sinkCms;
            return this;
        }
        @CustomType.Setter
        public Builder sinkEventStore(GetAlertsAlertConfigurationSinkEventStore sinkEventStore) {
            if (sinkEventStore == null) {
              throw new MissingRequiredPropertyException("GetAlertsAlertConfiguration", "sinkEventStore");
            }
            this.sinkEventStore = sinkEventStore;
            return this;
        }
        @CustomType.Setter
        public Builder tags(List<String> tags) {
            if (tags == null) {
              throw new MissingRequiredPropertyException("GetAlertsAlertConfiguration", "tags");
            }
            this.tags = tags;
            return this;
        }
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }
        @CustomType.Setter
        public Builder templateConfiguration(GetAlertsAlertConfigurationTemplateConfiguration templateConfiguration) {
            if (templateConfiguration == null) {
              throw new MissingRequiredPropertyException("GetAlertsAlertConfiguration", "templateConfiguration");
            }
            this.templateConfiguration = templateConfiguration;
            return this;
        }
        @CustomType.Setter
        public Builder threshold(Integer threshold) {
            if (threshold == null) {
              throw new MissingRequiredPropertyException("GetAlertsAlertConfiguration", "threshold");
            }
            this.threshold = threshold;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("GetAlertsAlertConfiguration", "type");
            }
            this.type = type;
            return this;
        }
        @CustomType.Setter
        public Builder version(String version) {
            if (version == null) {
              throw new MissingRequiredPropertyException("GetAlertsAlertConfiguration", "version");
            }
            this.version = version;
            return this;
        }
        public GetAlertsAlertConfiguration build() {
            final var _resultValue = new GetAlertsAlertConfiguration();
            _resultValue.annotations = annotations;
            _resultValue.autoAnnotation = autoAnnotation;
            _resultValue.conditionConfiguration = conditionConfiguration;
            _resultValue.dashboard = dashboard;
            _resultValue.groupConfiguration = groupConfiguration;
            _resultValue.joinConfigurations = joinConfigurations;
            _resultValue.labels = labels;
            _resultValue.muteUntil = muteUntil;
            _resultValue.noDataFire = noDataFire;
            _resultValue.noDataSeverity = noDataSeverity;
            _resultValue.policyConfiguration = policyConfiguration;
            _resultValue.queryLists = queryLists;
            _resultValue.sendResolved = sendResolved;
            _resultValue.severityConfigurations = severityConfigurations;
            _resultValue.sinkAlerthub = sinkAlerthub;
            _resultValue.sinkCms = sinkCms;
            _resultValue.sinkEventStore = sinkEventStore;
            _resultValue.tags = tags;
            _resultValue.templateConfiguration = templateConfiguration;
            _resultValue.threshold = threshold;
            _resultValue.type = type;
            _resultValue.version = version;
            return _resultValue;
        }
    }
}
