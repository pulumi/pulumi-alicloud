// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.dms;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class EnterpriseUserArgs extends com.pulumi.resources.ResourceArgs {

    public static final EnterpriseUserArgs Empty = new EnterpriseUserArgs();

    /**
     * Maximum number of inquiries on the day.
     * 
     */
    @Import(name="maxExecuteCount")
    private @Nullable Output<Integer> maxExecuteCount;

    /**
     * @return Maximum number of inquiries on the day.
     * 
     */
    public Optional<Output<Integer>> maxExecuteCount() {
        return Optional.ofNullable(this.maxExecuteCount);
    }

    /**
     * Query the maximum number of rows on the day.
     * 
     */
    @Import(name="maxResultCount")
    private @Nullable Output<Integer> maxResultCount;

    /**
     * @return Query the maximum number of rows on the day.
     * 
     */
    public Optional<Output<Integer>> maxResultCount() {
        return Optional.ofNullable(this.maxResultCount);
    }

    /**
     * The DingTalk number or mobile number of the user.
     * 
     */
    @Import(name="mobile")
    private @Nullable Output<String> mobile;

    /**
     * @return The DingTalk number or mobile number of the user.
     * 
     */
    public Optional<Output<String>> mobile() {
        return Optional.ofNullable(this.mobile);
    }

    /**
     * It has been deprecated from 1.100.0 and use `user_name` instead.
     * 
     * @deprecated
     * Field &#39;nick_name&#39; has been deprecated from version 1.100.0. Use &#39;user_name&#39; instead.
     * 
     */
    @Deprecated /* Field 'nick_name' has been deprecated from version 1.100.0. Use 'user_name' instead. */
    @Import(name="nickName")
    private @Nullable Output<String> nickName;

    /**
     * @return It has been deprecated from 1.100.0 and use `user_name` instead.
     * 
     * @deprecated
     * Field &#39;nick_name&#39; has been deprecated from version 1.100.0. Use &#39;user_name&#39; instead.
     * 
     */
    @Deprecated /* Field 'nick_name' has been deprecated from version 1.100.0. Use 'user_name' instead. */
    public Optional<Output<String>> nickName() {
        return Optional.ofNullable(this.nickName);
    }

    /**
     * The roles that the user plays.
     * 
     */
    @Import(name="roleNames")
    private @Nullable Output<List<String>> roleNames;

    /**
     * @return The roles that the user plays.
     * 
     */
    public Optional<Output<List<String>>> roleNames() {
        return Optional.ofNullable(this.roleNames);
    }

    /**
     * The state of DMS Enterprise User. Valid values: `NORMAL`, `DISABLE`.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return The state of DMS Enterprise User. Valid values: `NORMAL`, `DISABLE`.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * The tenant ID.
     * 
     */
    @Import(name="tid")
    private @Nullable Output<Integer> tid;

    /**
     * @return The tenant ID.
     * 
     */
    public Optional<Output<Integer>> tid() {
        return Optional.ofNullable(this.tid);
    }

    /**
     * The Alibaba Cloud unique ID (UID) of the user to add.
     * 
     */
    @Import(name="uid", required=true)
    private Output<String> uid;

    /**
     * @return The Alibaba Cloud unique ID (UID) of the user to add.
     * 
     */
    public Output<String> uid() {
        return this.uid;
    }

    /**
     * The nickname of the user.
     * 
     */
    @Import(name="userName")
    private @Nullable Output<String> userName;

    /**
     * @return The nickname of the user.
     * 
     */
    public Optional<Output<String>> userName() {
        return Optional.ofNullable(this.userName);
    }

    private EnterpriseUserArgs() {}

    private EnterpriseUserArgs(EnterpriseUserArgs $) {
        this.maxExecuteCount = $.maxExecuteCount;
        this.maxResultCount = $.maxResultCount;
        this.mobile = $.mobile;
        this.nickName = $.nickName;
        this.roleNames = $.roleNames;
        this.status = $.status;
        this.tid = $.tid;
        this.uid = $.uid;
        this.userName = $.userName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(EnterpriseUserArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private EnterpriseUserArgs $;

        public Builder() {
            $ = new EnterpriseUserArgs();
        }

        public Builder(EnterpriseUserArgs defaults) {
            $ = new EnterpriseUserArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param maxExecuteCount Maximum number of inquiries on the day.
         * 
         * @return builder
         * 
         */
        public Builder maxExecuteCount(@Nullable Output<Integer> maxExecuteCount) {
            $.maxExecuteCount = maxExecuteCount;
            return this;
        }

        /**
         * @param maxExecuteCount Maximum number of inquiries on the day.
         * 
         * @return builder
         * 
         */
        public Builder maxExecuteCount(Integer maxExecuteCount) {
            return maxExecuteCount(Output.of(maxExecuteCount));
        }

        /**
         * @param maxResultCount Query the maximum number of rows on the day.
         * 
         * @return builder
         * 
         */
        public Builder maxResultCount(@Nullable Output<Integer> maxResultCount) {
            $.maxResultCount = maxResultCount;
            return this;
        }

        /**
         * @param maxResultCount Query the maximum number of rows on the day.
         * 
         * @return builder
         * 
         */
        public Builder maxResultCount(Integer maxResultCount) {
            return maxResultCount(Output.of(maxResultCount));
        }

        /**
         * @param mobile The DingTalk number or mobile number of the user.
         * 
         * @return builder
         * 
         */
        public Builder mobile(@Nullable Output<String> mobile) {
            $.mobile = mobile;
            return this;
        }

        /**
         * @param mobile The DingTalk number or mobile number of the user.
         * 
         * @return builder
         * 
         */
        public Builder mobile(String mobile) {
            return mobile(Output.of(mobile));
        }

        /**
         * @param nickName It has been deprecated from 1.100.0 and use `user_name` instead.
         * 
         * @return builder
         * 
         * @deprecated
         * Field &#39;nick_name&#39; has been deprecated from version 1.100.0. Use &#39;user_name&#39; instead.
         * 
         */
        @Deprecated /* Field 'nick_name' has been deprecated from version 1.100.0. Use 'user_name' instead. */
        public Builder nickName(@Nullable Output<String> nickName) {
            $.nickName = nickName;
            return this;
        }

        /**
         * @param nickName It has been deprecated from 1.100.0 and use `user_name` instead.
         * 
         * @return builder
         * 
         * @deprecated
         * Field &#39;nick_name&#39; has been deprecated from version 1.100.0. Use &#39;user_name&#39; instead.
         * 
         */
        @Deprecated /* Field 'nick_name' has been deprecated from version 1.100.0. Use 'user_name' instead. */
        public Builder nickName(String nickName) {
            return nickName(Output.of(nickName));
        }

        /**
         * @param roleNames The roles that the user plays.
         * 
         * @return builder
         * 
         */
        public Builder roleNames(@Nullable Output<List<String>> roleNames) {
            $.roleNames = roleNames;
            return this;
        }

        /**
         * @param roleNames The roles that the user plays.
         * 
         * @return builder
         * 
         */
        public Builder roleNames(List<String> roleNames) {
            return roleNames(Output.of(roleNames));
        }

        /**
         * @param roleNames The roles that the user plays.
         * 
         * @return builder
         * 
         */
        public Builder roleNames(String... roleNames) {
            return roleNames(List.of(roleNames));
        }

        /**
         * @param status The state of DMS Enterprise User. Valid values: `NORMAL`, `DISABLE`.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status The state of DMS Enterprise User. Valid values: `NORMAL`, `DISABLE`.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param tid The tenant ID.
         * 
         * @return builder
         * 
         */
        public Builder tid(@Nullable Output<Integer> tid) {
            $.tid = tid;
            return this;
        }

        /**
         * @param tid The tenant ID.
         * 
         * @return builder
         * 
         */
        public Builder tid(Integer tid) {
            return tid(Output.of(tid));
        }

        /**
         * @param uid The Alibaba Cloud unique ID (UID) of the user to add.
         * 
         * @return builder
         * 
         */
        public Builder uid(Output<String> uid) {
            $.uid = uid;
            return this;
        }

        /**
         * @param uid The Alibaba Cloud unique ID (UID) of the user to add.
         * 
         * @return builder
         * 
         */
        public Builder uid(String uid) {
            return uid(Output.of(uid));
        }

        /**
         * @param userName The nickname of the user.
         * 
         * @return builder
         * 
         */
        public Builder userName(@Nullable Output<String> userName) {
            $.userName = userName;
            return this;
        }

        /**
         * @param userName The nickname of the user.
         * 
         * @return builder
         * 
         */
        public Builder userName(String userName) {
            return userName(Output.of(userName));
        }

        public EnterpriseUserArgs build() {
            if ($.uid == null) {
                throw new MissingRequiredPropertyException("EnterpriseUserArgs", "uid");
            }
            return $;
        }
    }

}
