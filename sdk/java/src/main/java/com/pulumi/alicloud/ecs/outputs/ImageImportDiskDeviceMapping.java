// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.ecs.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ImageImportDiskDeviceMapping {
    /**
     * @return The device name of the disk.
     * 
     */
    private @Nullable String device;
    /**
     * @return The size of the disk. Default value: `5`.
     * 
     */
    private @Nullable Integer diskImageSize;
    /**
     * @return The format of the image. Valid values: `RAW`, `VHD`, `qcow2`.
     * 
     */
    private @Nullable String format;
    /**
     * @return The OSS bucket where the image file is stored.
     * 
     */
    private @Nullable String ossBucket;
    /**
     * @return The name (key) of the object that the uploaded image is stored as in the OSS bucket.
     * 
     */
    private @Nullable String ossObject;

    private ImageImportDiskDeviceMapping() {}
    /**
     * @return The device name of the disk.
     * 
     */
    public Optional<String> device() {
        return Optional.ofNullable(this.device);
    }
    /**
     * @return The size of the disk. Default value: `5`.
     * 
     */
    public Optional<Integer> diskImageSize() {
        return Optional.ofNullable(this.diskImageSize);
    }
    /**
     * @return The format of the image. Valid values: `RAW`, `VHD`, `qcow2`.
     * 
     */
    public Optional<String> format() {
        return Optional.ofNullable(this.format);
    }
    /**
     * @return The OSS bucket where the image file is stored.
     * 
     */
    public Optional<String> ossBucket() {
        return Optional.ofNullable(this.ossBucket);
    }
    /**
     * @return The name (key) of the object that the uploaded image is stored as in the OSS bucket.
     * 
     */
    public Optional<String> ossObject() {
        return Optional.ofNullable(this.ossObject);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ImageImportDiskDeviceMapping defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String device;
        private @Nullable Integer diskImageSize;
        private @Nullable String format;
        private @Nullable String ossBucket;
        private @Nullable String ossObject;
        public Builder() {}
        public Builder(ImageImportDiskDeviceMapping defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.device = defaults.device;
    	      this.diskImageSize = defaults.diskImageSize;
    	      this.format = defaults.format;
    	      this.ossBucket = defaults.ossBucket;
    	      this.ossObject = defaults.ossObject;
        }

        @CustomType.Setter
        public Builder device(@Nullable String device) {

            this.device = device;
            return this;
        }
        @CustomType.Setter
        public Builder diskImageSize(@Nullable Integer diskImageSize) {

            this.diskImageSize = diskImageSize;
            return this;
        }
        @CustomType.Setter
        public Builder format(@Nullable String format) {

            this.format = format;
            return this;
        }
        @CustomType.Setter
        public Builder ossBucket(@Nullable String ossBucket) {

            this.ossBucket = ossBucket;
            return this;
        }
        @CustomType.Setter
        public Builder ossObject(@Nullable String ossObject) {

            this.ossObject = ossObject;
            return this;
        }
        public ImageImportDiskDeviceMapping build() {
            final var _resultValue = new ImageImportDiskDeviceMapping();
            _resultValue.device = device;
            _resultValue.diskImageSize = diskImageSize;
            _resultValue.format = format;
            _resultValue.ossBucket = ossBucket;
            _resultValue.ossObject = ossObject;
            return _resultValue;
        }
    }
}
