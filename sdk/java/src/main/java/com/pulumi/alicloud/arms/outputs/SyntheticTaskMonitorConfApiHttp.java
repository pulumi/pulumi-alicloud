// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.arms.outputs;

import com.pulumi.alicloud.arms.outputs.SyntheticTaskMonitorConfApiHttpRequestBody;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class SyntheticTaskMonitorConfApiHttp {
    /**
     * @return Connection timeout, in ms. Default 5000. Optional range: 1000-300000ms.
     * 
     */
    private @Nullable Integer connectTimeout;
    /**
     * @return HTTP method, GET or POST.
     * 
     */
    private @Nullable String method;
    /**
     * @return HTTP request body. See `request_body` below.
     * 
     */
    private @Nullable SyntheticTaskMonitorConfApiHttpRequestBody requestBody;
    /**
     * @return HTTP request header.
     * 
     */
    private @Nullable Map<String,Object> requestHeaders;
    /**
     * @return The target URL.
     * 
     */
    private String targetUrl;
    /**
     * @return TCP dial test timeout. The unit is milliseconds (ms), the minimum value is 1000, the maximum value is 300000, and the default value is 20000.
     * 
     */
    private @Nullable Integer timeout;

    private SyntheticTaskMonitorConfApiHttp() {}
    /**
     * @return Connection timeout, in ms. Default 5000. Optional range: 1000-300000ms.
     * 
     */
    public Optional<Integer> connectTimeout() {
        return Optional.ofNullable(this.connectTimeout);
    }
    /**
     * @return HTTP method, GET or POST.
     * 
     */
    public Optional<String> method() {
        return Optional.ofNullable(this.method);
    }
    /**
     * @return HTTP request body. See `request_body` below.
     * 
     */
    public Optional<SyntheticTaskMonitorConfApiHttpRequestBody> requestBody() {
        return Optional.ofNullable(this.requestBody);
    }
    /**
     * @return HTTP request header.
     * 
     */
    public Map<String,Object> requestHeaders() {
        return this.requestHeaders == null ? Map.of() : this.requestHeaders;
    }
    /**
     * @return The target URL.
     * 
     */
    public String targetUrl() {
        return this.targetUrl;
    }
    /**
     * @return TCP dial test timeout. The unit is milliseconds (ms), the minimum value is 1000, the maximum value is 300000, and the default value is 20000.
     * 
     */
    public Optional<Integer> timeout() {
        return Optional.ofNullable(this.timeout);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SyntheticTaskMonitorConfApiHttp defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Integer connectTimeout;
        private @Nullable String method;
        private @Nullable SyntheticTaskMonitorConfApiHttpRequestBody requestBody;
        private @Nullable Map<String,Object> requestHeaders;
        private String targetUrl;
        private @Nullable Integer timeout;
        public Builder() {}
        public Builder(SyntheticTaskMonitorConfApiHttp defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.connectTimeout = defaults.connectTimeout;
    	      this.method = defaults.method;
    	      this.requestBody = defaults.requestBody;
    	      this.requestHeaders = defaults.requestHeaders;
    	      this.targetUrl = defaults.targetUrl;
    	      this.timeout = defaults.timeout;
        }

        @CustomType.Setter
        public Builder connectTimeout(@Nullable Integer connectTimeout) {

            this.connectTimeout = connectTimeout;
            return this;
        }
        @CustomType.Setter
        public Builder method(@Nullable String method) {

            this.method = method;
            return this;
        }
        @CustomType.Setter
        public Builder requestBody(@Nullable SyntheticTaskMonitorConfApiHttpRequestBody requestBody) {

            this.requestBody = requestBody;
            return this;
        }
        @CustomType.Setter
        public Builder requestHeaders(@Nullable Map<String,Object> requestHeaders) {

            this.requestHeaders = requestHeaders;
            return this;
        }
        @CustomType.Setter
        public Builder targetUrl(String targetUrl) {
            if (targetUrl == null) {
              throw new MissingRequiredPropertyException("SyntheticTaskMonitorConfApiHttp", "targetUrl");
            }
            this.targetUrl = targetUrl;
            return this;
        }
        @CustomType.Setter
        public Builder timeout(@Nullable Integer timeout) {

            this.timeout = timeout;
            return this;
        }
        public SyntheticTaskMonitorConfApiHttp build() {
            final var _resultValue = new SyntheticTaskMonitorConfApiHttp();
            _resultValue.connectTimeout = connectTimeout;
            _resultValue.method = method;
            _resultValue.requestBody = requestBody;
            _resultValue.requestHeaders = requestHeaders;
            _resultValue.targetUrl = targetUrl;
            _resultValue.timeout = timeout;
            return _resultValue;
        }
    }
}
