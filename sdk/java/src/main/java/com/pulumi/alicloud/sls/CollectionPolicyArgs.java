// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.sls;

import com.pulumi.alicloud.sls.inputs.CollectionPolicyCentralizeConfigArgs;
import com.pulumi.alicloud.sls.inputs.CollectionPolicyDataConfigArgs;
import com.pulumi.alicloud.sls.inputs.CollectionPolicyPolicyConfigArgs;
import com.pulumi.alicloud.sls.inputs.CollectionPolicyResourceDirectoryArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CollectionPolicyArgs extends com.pulumi.resources.ResourceArgs {

    public static final CollectionPolicyArgs Empty = new CollectionPolicyArgs();

    /**
     * Centralized transfer configuration. See `centralize_config` below.
     * 
     */
    @Import(name="centralizeConfig")
    private @Nullable Output<CollectionPolicyCentralizeConfigArgs> centralizeConfig;

    /**
     * @return Centralized transfer configuration. See `centralize_config` below.
     * 
     */
    public Optional<Output<CollectionPolicyCentralizeConfigArgs>> centralizeConfig() {
        return Optional.ofNullable(this.centralizeConfig);
    }

    /**
     * Whether to enable centralized Conversion. The default value is false.
     * 
     */
    @Import(name="centralizeEnabled")
    private @Nullable Output<Boolean> centralizeEnabled;

    /**
     * @return Whether to enable centralized Conversion. The default value is false.
     * 
     */
    public Optional<Output<Boolean>> centralizeEnabled() {
        return Optional.ofNullable(this.centralizeEnabled);
    }

    /**
     * Log type encoding.
     * 
     */
    @Import(name="dataCode", required=true)
    private Output<String> dataCode;

    /**
     * @return Log type encoding.
     * 
     */
    public Output<String> dataCode() {
        return this.dataCode;
    }

    /**
     * The configuration is supported only when the log type is global. For example, if the productCode is sls, global logs will be collected to the corresponding region during the first configuration. See `data_config` below.
     * 
     */
    @Import(name="dataConfig")
    private @Nullable Output<CollectionPolicyDataConfigArgs> dataConfig;

    /**
     * @return The configuration is supported only when the log type is global. For example, if the productCode is sls, global logs will be collected to the corresponding region during the first configuration. See `data_config` below.
     * 
     */
    public Optional<Output<CollectionPolicyDataConfigArgs>> dataConfig() {
        return Optional.ofNullable(this.dataConfig);
    }

    /**
     * Whether to open.
     * 
     */
    @Import(name="enabled", required=true)
    private Output<Boolean> enabled;

    /**
     * @return Whether to open.
     * 
     */
    public Output<Boolean> enabled() {
        return this.enabled;
    }

    /**
     * Collection rule configuration. See `policy_config` below.
     * 
     */
    @Import(name="policyConfig", required=true)
    private Output<CollectionPolicyPolicyConfigArgs> policyConfig;

    /**
     * @return Collection rule configuration. See `policy_config` below.
     * 
     */
    public Output<CollectionPolicyPolicyConfigArgs> policyConfig() {
        return this.policyConfig;
    }

    /**
     * The name of the rule, with a minimum of 3 characters and a maximum of 63 characters, must start with a letter.
     * 
     */
    @Import(name="policyName", required=true)
    private Output<String> policyName;

    /**
     * @return The name of the rule, with a minimum of 3 characters and a maximum of 63 characters, must start with a letter.
     * 
     */
    public Output<String> policyName() {
        return this.policyName;
    }

    /**
     * Product code.
     * 
     */
    @Import(name="productCode", required=true)
    private Output<String> productCode;

    /**
     * @return Product code.
     * 
     */
    public Output<String> productCode() {
        return this.productCode;
    }

    /**
     * For Resource Directory configuration, the account must have opened the resource directory and be an administrator or a delegated administrator. See `resource_directory` below.
     * 
     */
    @Import(name="resourceDirectory")
    private @Nullable Output<CollectionPolicyResourceDirectoryArgs> resourceDirectory;

    /**
     * @return For Resource Directory configuration, the account must have opened the resource directory and be an administrator or a delegated administrator. See `resource_directory` below.
     * 
     */
    public Optional<Output<CollectionPolicyResourceDirectoryArgs>> resourceDirectory() {
        return Optional.ofNullable(this.resourceDirectory);
    }

    private CollectionPolicyArgs() {}

    private CollectionPolicyArgs(CollectionPolicyArgs $) {
        this.centralizeConfig = $.centralizeConfig;
        this.centralizeEnabled = $.centralizeEnabled;
        this.dataCode = $.dataCode;
        this.dataConfig = $.dataConfig;
        this.enabled = $.enabled;
        this.policyConfig = $.policyConfig;
        this.policyName = $.policyName;
        this.productCode = $.productCode;
        this.resourceDirectory = $.resourceDirectory;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CollectionPolicyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CollectionPolicyArgs $;

        public Builder() {
            $ = new CollectionPolicyArgs();
        }

        public Builder(CollectionPolicyArgs defaults) {
            $ = new CollectionPolicyArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param centralizeConfig Centralized transfer configuration. See `centralize_config` below.
         * 
         * @return builder
         * 
         */
        public Builder centralizeConfig(@Nullable Output<CollectionPolicyCentralizeConfigArgs> centralizeConfig) {
            $.centralizeConfig = centralizeConfig;
            return this;
        }

        /**
         * @param centralizeConfig Centralized transfer configuration. See `centralize_config` below.
         * 
         * @return builder
         * 
         */
        public Builder centralizeConfig(CollectionPolicyCentralizeConfigArgs centralizeConfig) {
            return centralizeConfig(Output.of(centralizeConfig));
        }

        /**
         * @param centralizeEnabled Whether to enable centralized Conversion. The default value is false.
         * 
         * @return builder
         * 
         */
        public Builder centralizeEnabled(@Nullable Output<Boolean> centralizeEnabled) {
            $.centralizeEnabled = centralizeEnabled;
            return this;
        }

        /**
         * @param centralizeEnabled Whether to enable centralized Conversion. The default value is false.
         * 
         * @return builder
         * 
         */
        public Builder centralizeEnabled(Boolean centralizeEnabled) {
            return centralizeEnabled(Output.of(centralizeEnabled));
        }

        /**
         * @param dataCode Log type encoding.
         * 
         * @return builder
         * 
         */
        public Builder dataCode(Output<String> dataCode) {
            $.dataCode = dataCode;
            return this;
        }

        /**
         * @param dataCode Log type encoding.
         * 
         * @return builder
         * 
         */
        public Builder dataCode(String dataCode) {
            return dataCode(Output.of(dataCode));
        }

        /**
         * @param dataConfig The configuration is supported only when the log type is global. For example, if the productCode is sls, global logs will be collected to the corresponding region during the first configuration. See `data_config` below.
         * 
         * @return builder
         * 
         */
        public Builder dataConfig(@Nullable Output<CollectionPolicyDataConfigArgs> dataConfig) {
            $.dataConfig = dataConfig;
            return this;
        }

        /**
         * @param dataConfig The configuration is supported only when the log type is global. For example, if the productCode is sls, global logs will be collected to the corresponding region during the first configuration. See `data_config` below.
         * 
         * @return builder
         * 
         */
        public Builder dataConfig(CollectionPolicyDataConfigArgs dataConfig) {
            return dataConfig(Output.of(dataConfig));
        }

        /**
         * @param enabled Whether to open.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled Whether to open.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param policyConfig Collection rule configuration. See `policy_config` below.
         * 
         * @return builder
         * 
         */
        public Builder policyConfig(Output<CollectionPolicyPolicyConfigArgs> policyConfig) {
            $.policyConfig = policyConfig;
            return this;
        }

        /**
         * @param policyConfig Collection rule configuration. See `policy_config` below.
         * 
         * @return builder
         * 
         */
        public Builder policyConfig(CollectionPolicyPolicyConfigArgs policyConfig) {
            return policyConfig(Output.of(policyConfig));
        }

        /**
         * @param policyName The name of the rule, with a minimum of 3 characters and a maximum of 63 characters, must start with a letter.
         * 
         * @return builder
         * 
         */
        public Builder policyName(Output<String> policyName) {
            $.policyName = policyName;
            return this;
        }

        /**
         * @param policyName The name of the rule, with a minimum of 3 characters and a maximum of 63 characters, must start with a letter.
         * 
         * @return builder
         * 
         */
        public Builder policyName(String policyName) {
            return policyName(Output.of(policyName));
        }

        /**
         * @param productCode Product code.
         * 
         * @return builder
         * 
         */
        public Builder productCode(Output<String> productCode) {
            $.productCode = productCode;
            return this;
        }

        /**
         * @param productCode Product code.
         * 
         * @return builder
         * 
         */
        public Builder productCode(String productCode) {
            return productCode(Output.of(productCode));
        }

        /**
         * @param resourceDirectory For Resource Directory configuration, the account must have opened the resource directory and be an administrator or a delegated administrator. See `resource_directory` below.
         * 
         * @return builder
         * 
         */
        public Builder resourceDirectory(@Nullable Output<CollectionPolicyResourceDirectoryArgs> resourceDirectory) {
            $.resourceDirectory = resourceDirectory;
            return this;
        }

        /**
         * @param resourceDirectory For Resource Directory configuration, the account must have opened the resource directory and be an administrator or a delegated administrator. See `resource_directory` below.
         * 
         * @return builder
         * 
         */
        public Builder resourceDirectory(CollectionPolicyResourceDirectoryArgs resourceDirectory) {
            return resourceDirectory(Output.of(resourceDirectory));
        }

        public CollectionPolicyArgs build() {
            if ($.dataCode == null) {
                throw new MissingRequiredPropertyException("CollectionPolicyArgs", "dataCode");
            }
            if ($.enabled == null) {
                throw new MissingRequiredPropertyException("CollectionPolicyArgs", "enabled");
            }
            if ($.policyConfig == null) {
                throw new MissingRequiredPropertyException("CollectionPolicyArgs", "policyConfig");
            }
            if ($.policyName == null) {
                throw new MissingRequiredPropertyException("CollectionPolicyArgs", "policyName");
            }
            if ($.productCode == null) {
                throw new MissingRequiredPropertyException("CollectionPolicyArgs", "productCode");
            }
            return $;
        }
    }

}
