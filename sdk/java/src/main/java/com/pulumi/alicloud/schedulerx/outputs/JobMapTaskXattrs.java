// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.schedulerx.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class JobMapTaskXattrs {
    /**
     * @return The number of threads to execute a single trigger. The default value is 5.
     * 
     */
    private @Nullable Integer consumerSize;
    /**
     * @return The number of subtask distribution threads. The default value is 5.
     * 
     */
    private @Nullable Integer dispatcherSize;
    /**
     * @return The number of sub-tasks pulled by a parallel task at a time. The default value is 100.
     * 
     */
    private @Nullable Integer pageSize;
    /**
     * @return The upper limit of the sub-task queue cache. The default value is 10000.
     * 
     */
    private @Nullable Integer queueSize;
    /**
     * @return Subtask failure retry interval.
     * 
     */
    private @Nullable Integer taskAttemptInterval;
    /**
     * @return The number of failed sub-task retries.
     * 
     */
    private @Nullable Integer taskMaxAttempt;

    private JobMapTaskXattrs() {}
    /**
     * @return The number of threads to execute a single trigger. The default value is 5.
     * 
     */
    public Optional<Integer> consumerSize() {
        return Optional.ofNullable(this.consumerSize);
    }
    /**
     * @return The number of subtask distribution threads. The default value is 5.
     * 
     */
    public Optional<Integer> dispatcherSize() {
        return Optional.ofNullable(this.dispatcherSize);
    }
    /**
     * @return The number of sub-tasks pulled by a parallel task at a time. The default value is 100.
     * 
     */
    public Optional<Integer> pageSize() {
        return Optional.ofNullable(this.pageSize);
    }
    /**
     * @return The upper limit of the sub-task queue cache. The default value is 10000.
     * 
     */
    public Optional<Integer> queueSize() {
        return Optional.ofNullable(this.queueSize);
    }
    /**
     * @return Subtask failure retry interval.
     * 
     */
    public Optional<Integer> taskAttemptInterval() {
        return Optional.ofNullable(this.taskAttemptInterval);
    }
    /**
     * @return The number of failed sub-task retries.
     * 
     */
    public Optional<Integer> taskMaxAttempt() {
        return Optional.ofNullable(this.taskMaxAttempt);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(JobMapTaskXattrs defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Integer consumerSize;
        private @Nullable Integer dispatcherSize;
        private @Nullable Integer pageSize;
        private @Nullable Integer queueSize;
        private @Nullable Integer taskAttemptInterval;
        private @Nullable Integer taskMaxAttempt;
        public Builder() {}
        public Builder(JobMapTaskXattrs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.consumerSize = defaults.consumerSize;
    	      this.dispatcherSize = defaults.dispatcherSize;
    	      this.pageSize = defaults.pageSize;
    	      this.queueSize = defaults.queueSize;
    	      this.taskAttemptInterval = defaults.taskAttemptInterval;
    	      this.taskMaxAttempt = defaults.taskMaxAttempt;
        }

        @CustomType.Setter
        public Builder consumerSize(@Nullable Integer consumerSize) {

            this.consumerSize = consumerSize;
            return this;
        }
        @CustomType.Setter
        public Builder dispatcherSize(@Nullable Integer dispatcherSize) {

            this.dispatcherSize = dispatcherSize;
            return this;
        }
        @CustomType.Setter
        public Builder pageSize(@Nullable Integer pageSize) {

            this.pageSize = pageSize;
            return this;
        }
        @CustomType.Setter
        public Builder queueSize(@Nullable Integer queueSize) {

            this.queueSize = queueSize;
            return this;
        }
        @CustomType.Setter
        public Builder taskAttemptInterval(@Nullable Integer taskAttemptInterval) {

            this.taskAttemptInterval = taskAttemptInterval;
            return this;
        }
        @CustomType.Setter
        public Builder taskMaxAttempt(@Nullable Integer taskMaxAttempt) {

            this.taskMaxAttempt = taskMaxAttempt;
            return this;
        }
        public JobMapTaskXattrs build() {
            final var _resultValue = new JobMapTaskXattrs();
            _resultValue.consumerSize = consumerSize;
            _resultValue.dispatcherSize = dispatcherSize;
            _resultValue.pageSize = pageSize;
            _resultValue.queueSize = queueSize;
            _resultValue.taskAttemptInterval = taskAttemptInterval;
            _resultValue.taskMaxAttempt = taskMaxAttempt;
            return _resultValue;
        }
    }
}
