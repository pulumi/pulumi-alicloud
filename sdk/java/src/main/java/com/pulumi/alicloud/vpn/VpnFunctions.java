// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.vpn;

import com.pulumi.alicloud.Utilities;
import com.pulumi.alicloud.vpn.inputs.GetConnectionsArgs;
import com.pulumi.alicloud.vpn.inputs.GetConnectionsPlainArgs;
import com.pulumi.alicloud.vpn.inputs.GetCustomerGatewaysArgs;
import com.pulumi.alicloud.vpn.inputs.GetCustomerGatewaysPlainArgs;
import com.pulumi.alicloud.vpn.inputs.GetGatewayVcoRoutesArgs;
import com.pulumi.alicloud.vpn.inputs.GetGatewayVcoRoutesPlainArgs;
import com.pulumi.alicloud.vpn.inputs.GetGatewayVpnAttachmentsArgs;
import com.pulumi.alicloud.vpn.inputs.GetGatewayVpnAttachmentsPlainArgs;
import com.pulumi.alicloud.vpn.inputs.GetGatewayZonesArgs;
import com.pulumi.alicloud.vpn.inputs.GetGatewayZonesPlainArgs;
import com.pulumi.alicloud.vpn.inputs.GetGatewaysArgs;
import com.pulumi.alicloud.vpn.inputs.GetGatewaysPlainArgs;
import com.pulumi.alicloud.vpn.outputs.GetConnectionsResult;
import com.pulumi.alicloud.vpn.outputs.GetCustomerGatewaysResult;
import com.pulumi.alicloud.vpn.outputs.GetGatewayVcoRoutesResult;
import com.pulumi.alicloud.vpn.outputs.GetGatewayVpnAttachmentsResult;
import com.pulumi.alicloud.vpn.outputs.GetGatewayZonesResult;
import com.pulumi.alicloud.vpn.outputs.GetGatewaysResult;
import com.pulumi.core.Output;
import com.pulumi.core.TypeShape;
import com.pulumi.deployment.Deployment;
import com.pulumi.deployment.InvokeOptions;
import com.pulumi.deployment.InvokeOutputOptions;
import java.util.concurrent.CompletableFuture;

public final class VpnFunctions {
    /**
     * The VPN connections data source lists lots of VPN connections resource information owned by an Alicloud account.
     * 
     * &gt; **NOTE:** Available since v1.18.0.
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.alicloud.vpn.VpnFunctions;
     * import com.pulumi.alicloud.vpn.inputs.GetConnectionsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var foo = VpnFunctions.getConnections(GetConnectionsArgs.builder()
     *             .ids("fake-conn-id")
     *             .vpnGatewayId("fake-vpn-id")
     *             .customerGatewayId("fake-cgw-id")
     *             .outputFile("/tmp/vpnconn")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static Output<GetConnectionsResult> getConnections() {
        return getConnections(GetConnectionsArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * The VPN connections data source lists lots of VPN connections resource information owned by an Alicloud account.
     * 
     * &gt; **NOTE:** Available since v1.18.0.
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.alicloud.vpn.VpnFunctions;
     * import com.pulumi.alicloud.vpn.inputs.GetConnectionsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var foo = VpnFunctions.getConnections(GetConnectionsArgs.builder()
     *             .ids("fake-conn-id")
     *             .vpnGatewayId("fake-vpn-id")
     *             .customerGatewayId("fake-cgw-id")
     *             .outputFile("/tmp/vpnconn")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static CompletableFuture<GetConnectionsResult> getConnectionsPlain() {
        return getConnectionsPlain(GetConnectionsPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * The VPN connections data source lists lots of VPN connections resource information owned by an Alicloud account.
     * 
     * &gt; **NOTE:** Available since v1.18.0.
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.alicloud.vpn.VpnFunctions;
     * import com.pulumi.alicloud.vpn.inputs.GetConnectionsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var foo = VpnFunctions.getConnections(GetConnectionsArgs.builder()
     *             .ids("fake-conn-id")
     *             .vpnGatewayId("fake-vpn-id")
     *             .customerGatewayId("fake-cgw-id")
     *             .outputFile("/tmp/vpnconn")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static Output<GetConnectionsResult> getConnections(GetConnectionsArgs args) {
        return getConnections(args, InvokeOptions.Empty);
    }
    /**
     * The VPN connections data source lists lots of VPN connections resource information owned by an Alicloud account.
     * 
     * &gt; **NOTE:** Available since v1.18.0.
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.alicloud.vpn.VpnFunctions;
     * import com.pulumi.alicloud.vpn.inputs.GetConnectionsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var foo = VpnFunctions.getConnections(GetConnectionsArgs.builder()
     *             .ids("fake-conn-id")
     *             .vpnGatewayId("fake-vpn-id")
     *             .customerGatewayId("fake-cgw-id")
     *             .outputFile("/tmp/vpnconn")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static CompletableFuture<GetConnectionsResult> getConnectionsPlain(GetConnectionsPlainArgs args) {
        return getConnectionsPlain(args, InvokeOptions.Empty);
    }
    /**
     * The VPN connections data source lists lots of VPN connections resource information owned by an Alicloud account.
     * 
     * &gt; **NOTE:** Available since v1.18.0.
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.alicloud.vpn.VpnFunctions;
     * import com.pulumi.alicloud.vpn.inputs.GetConnectionsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var foo = VpnFunctions.getConnections(GetConnectionsArgs.builder()
     *             .ids("fake-conn-id")
     *             .vpnGatewayId("fake-vpn-id")
     *             .customerGatewayId("fake-cgw-id")
     *             .outputFile("/tmp/vpnconn")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static Output<GetConnectionsResult> getConnections(GetConnectionsArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("alicloud:vpn/getConnections:getConnections", TypeShape.of(GetConnectionsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The VPN connections data source lists lots of VPN connections resource information owned by an Alicloud account.
     * 
     * &gt; **NOTE:** Available since v1.18.0.
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.alicloud.vpn.VpnFunctions;
     * import com.pulumi.alicloud.vpn.inputs.GetConnectionsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var foo = VpnFunctions.getConnections(GetConnectionsArgs.builder()
     *             .ids("fake-conn-id")
     *             .vpnGatewayId("fake-vpn-id")
     *             .customerGatewayId("fake-cgw-id")
     *             .outputFile("/tmp/vpnconn")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static Output<GetConnectionsResult> getConnections(GetConnectionsArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("alicloud:vpn/getConnections:getConnections", TypeShape.of(GetConnectionsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The VPN connections data source lists lots of VPN connections resource information owned by an Alicloud account.
     * 
     * &gt; **NOTE:** Available since v1.18.0.
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.alicloud.vpn.VpnFunctions;
     * import com.pulumi.alicloud.vpn.inputs.GetConnectionsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var foo = VpnFunctions.getConnections(GetConnectionsArgs.builder()
     *             .ids("fake-conn-id")
     *             .vpnGatewayId("fake-vpn-id")
     *             .customerGatewayId("fake-cgw-id")
     *             .outputFile("/tmp/vpnconn")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static CompletableFuture<GetConnectionsResult> getConnectionsPlain(GetConnectionsPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("alicloud:vpn/getConnections:getConnections", TypeShape.of(GetConnectionsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The VPN customers gateways data source lists a number of VPN customer gateways resource information owned by an Alicloud account.
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.alicloud.vpn.VpnFunctions;
     * import com.pulumi.alicloud.vpn.inputs.GetCustomerGatewaysArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var foo = VpnFunctions.getCustomerGateways(GetCustomerGatewaysArgs.builder()
     *             .nameRegex("testAcc*")
     *             .ids(            
     *                 "fake-id1",
     *                 "fake-id2")
     *             .outputFile("/tmp/cgws")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static Output<GetCustomerGatewaysResult> getCustomerGateways() {
        return getCustomerGateways(GetCustomerGatewaysArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * The VPN customers gateways data source lists a number of VPN customer gateways resource information owned by an Alicloud account.
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.alicloud.vpn.VpnFunctions;
     * import com.pulumi.alicloud.vpn.inputs.GetCustomerGatewaysArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var foo = VpnFunctions.getCustomerGateways(GetCustomerGatewaysArgs.builder()
     *             .nameRegex("testAcc*")
     *             .ids(            
     *                 "fake-id1",
     *                 "fake-id2")
     *             .outputFile("/tmp/cgws")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static CompletableFuture<GetCustomerGatewaysResult> getCustomerGatewaysPlain() {
        return getCustomerGatewaysPlain(GetCustomerGatewaysPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * The VPN customers gateways data source lists a number of VPN customer gateways resource information owned by an Alicloud account.
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.alicloud.vpn.VpnFunctions;
     * import com.pulumi.alicloud.vpn.inputs.GetCustomerGatewaysArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var foo = VpnFunctions.getCustomerGateways(GetCustomerGatewaysArgs.builder()
     *             .nameRegex("testAcc*")
     *             .ids(            
     *                 "fake-id1",
     *                 "fake-id2")
     *             .outputFile("/tmp/cgws")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static Output<GetCustomerGatewaysResult> getCustomerGateways(GetCustomerGatewaysArgs args) {
        return getCustomerGateways(args, InvokeOptions.Empty);
    }
    /**
     * The VPN customers gateways data source lists a number of VPN customer gateways resource information owned by an Alicloud account.
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.alicloud.vpn.VpnFunctions;
     * import com.pulumi.alicloud.vpn.inputs.GetCustomerGatewaysArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var foo = VpnFunctions.getCustomerGateways(GetCustomerGatewaysArgs.builder()
     *             .nameRegex("testAcc*")
     *             .ids(            
     *                 "fake-id1",
     *                 "fake-id2")
     *             .outputFile("/tmp/cgws")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static CompletableFuture<GetCustomerGatewaysResult> getCustomerGatewaysPlain(GetCustomerGatewaysPlainArgs args) {
        return getCustomerGatewaysPlain(args, InvokeOptions.Empty);
    }
    /**
     * The VPN customers gateways data source lists a number of VPN customer gateways resource information owned by an Alicloud account.
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.alicloud.vpn.VpnFunctions;
     * import com.pulumi.alicloud.vpn.inputs.GetCustomerGatewaysArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var foo = VpnFunctions.getCustomerGateways(GetCustomerGatewaysArgs.builder()
     *             .nameRegex("testAcc*")
     *             .ids(            
     *                 "fake-id1",
     *                 "fake-id2")
     *             .outputFile("/tmp/cgws")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static Output<GetCustomerGatewaysResult> getCustomerGateways(GetCustomerGatewaysArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("alicloud:vpn/getCustomerGateways:getCustomerGateways", TypeShape.of(GetCustomerGatewaysResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The VPN customers gateways data source lists a number of VPN customer gateways resource information owned by an Alicloud account.
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.alicloud.vpn.VpnFunctions;
     * import com.pulumi.alicloud.vpn.inputs.GetCustomerGatewaysArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var foo = VpnFunctions.getCustomerGateways(GetCustomerGatewaysArgs.builder()
     *             .nameRegex("testAcc*")
     *             .ids(            
     *                 "fake-id1",
     *                 "fake-id2")
     *             .outputFile("/tmp/cgws")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static Output<GetCustomerGatewaysResult> getCustomerGateways(GetCustomerGatewaysArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("alicloud:vpn/getCustomerGateways:getCustomerGateways", TypeShape.of(GetCustomerGatewaysResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The VPN customers gateways data source lists a number of VPN customer gateways resource information owned by an Alicloud account.
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.alicloud.vpn.VpnFunctions;
     * import com.pulumi.alicloud.vpn.inputs.GetCustomerGatewaysArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var foo = VpnFunctions.getCustomerGateways(GetCustomerGatewaysArgs.builder()
     *             .nameRegex("testAcc*")
     *             .ids(            
     *                 "fake-id1",
     *                 "fake-id2")
     *             .outputFile("/tmp/cgws")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static CompletableFuture<GetCustomerGatewaysResult> getCustomerGatewaysPlain(GetCustomerGatewaysPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("alicloud:vpn/getCustomerGateways:getCustomerGateways", TypeShape.of(GetCustomerGatewaysResult.class), args, Utilities.withVersion(options));
    }
    /**
     * This data source provides the Vpn Gateway Vco Routes of the current Alibaba Cloud user.
     * 
     * &gt; **NOTE:** Available since v1.183.0.
     * 
     * ## Example Usage
     * 
     * Basic Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.alicloud.cen.Instance;
     * import com.pulumi.alicloud.cen.InstanceArgs;
     * import com.pulumi.alicloud.cen.TransitRouter;
     * import com.pulumi.alicloud.cen.TransitRouterArgs;
     * import com.pulumi.alicloud.cen.CenFunctions;
     * import com.pulumi.alicloud.cen.inputs.GetTransitRouterAvailableResourcesArgs;
     * import com.pulumi.alicloud.vpn.CustomerGateway;
     * import com.pulumi.alicloud.vpn.CustomerGatewayArgs;
     * import com.pulumi.alicloud.vpn.GatewayVpnAttachment;
     * import com.pulumi.alicloud.vpn.GatewayVpnAttachmentArgs;
     * import com.pulumi.alicloud.vpn.inputs.GatewayVpnAttachmentIkeConfigArgs;
     * import com.pulumi.alicloud.vpn.inputs.GatewayVpnAttachmentIpsecConfigArgs;
     * import com.pulumi.alicloud.vpn.inputs.GatewayVpnAttachmentBgpConfigArgs;
     * import com.pulumi.alicloud.vpn.inputs.GatewayVpnAttachmentHealthCheckConfigArgs;
     * import com.pulumi.alicloud.cen.TransitRouterVpnAttachment;
     * import com.pulumi.alicloud.cen.TransitRouterVpnAttachmentArgs;
     * import com.pulumi.alicloud.cen.inputs.TransitRouterVpnAttachmentZoneArgs;
     * import com.pulumi.alicloud.vpn.GatewayVcoRoute;
     * import com.pulumi.alicloud.vpn.GatewayVcoRouteArgs;
     * import com.pulumi.alicloud.vpn.VpnFunctions;
     * import com.pulumi.alicloud.vpn.inputs.GetGatewayVcoRoutesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var defaultInstance = new Instance("defaultInstance", InstanceArgs.builder()
     *             .cenInstanceName(name)
     *             .build());
     * 
     *         var defaultTransitRouter = new TransitRouter("defaultTransitRouter", TransitRouterArgs.builder()
     *             .cenId(defaultInstance.id())
     *             .transitRouterDescription("desd")
     *             .transitRouterName(name)
     *             .build());
     * 
     *         final var default = CenFunctions.getTransitRouterAvailableResources(GetTransitRouterAvailableResourcesArgs.builder()
     *             .build());
     * 
     *         var defaultCustomerGateway = new CustomerGateway("defaultCustomerGateway", CustomerGatewayArgs.builder()
     *             .name(name)
     *             .ipAddress("42.104.22.210")
     *             .asn("45014")
     *             .description("testAccVpnConnectionDesc")
     *             .build());
     * 
     *         var defaultGatewayVpnAttachment = new GatewayVpnAttachment("defaultGatewayVpnAttachment", GatewayVpnAttachmentArgs.builder()
     *             .customerGatewayId(defaultCustomerGateway.id())
     *             .networkType("public")
     *             .localSubnet("0.0.0.0/0")
     *             .remoteSubnet("0.0.0.0/0")
     *             .effectImmediately(false)
     *             .ikeConfig(GatewayVpnAttachmentIkeConfigArgs.builder()
     *                 .ikeAuthAlg("md5")
     *                 .ikeEncAlg("des")
     *                 .ikeVersion("ikev2")
     *                 .ikeMode("main")
     *                 .ikeLifetime(86400)
     *                 .psk("tf-testvpn2")
     *                 .ikePfs("group1")
     *                 .remoteId("testbob2")
     *                 .localId("testalice2")
     *                 .build())
     *             .ipsecConfig(GatewayVpnAttachmentIpsecConfigArgs.builder()
     *                 .ipsecPfs("group5")
     *                 .ipsecEncAlg("des")
     *                 .ipsecAuthAlg("md5")
     *                 .ipsecLifetime(86400)
     *                 .build())
     *             .bgpConfig(GatewayVpnAttachmentBgpConfigArgs.builder()
     *                 .enable(true)
     *                 .localAsn(45014)
     *                 .tunnelCidr("169.254.11.0/30")
     *                 .localBgpIp("169.254.11.1")
     *                 .build())
     *             .healthCheckConfig(GatewayVpnAttachmentHealthCheckConfigArgs.builder()
     *                 .enable(true)
     *                 .sip("192.168.1.1")
     *                 .dip("10.0.0.1")
     *                 .interval(10)
     *                 .retry(10)
     *                 .policy("revoke_route")
     *                 .build())
     *             .enableDpd(true)
     *             .enableNatTraversal(true)
     *             .vpnAttachmentName(name)
     *             .build());
     * 
     *         var defaultTransitRouterVpnAttachment = new TransitRouterVpnAttachment("defaultTransitRouterVpnAttachment", TransitRouterVpnAttachmentArgs.builder()
     *             .autoPublishRouteEnabled(false)
     *             .transitRouterAttachmentDescription(name)
     *             .transitRouterAttachmentName(name)
     *             .cenId(defaultTransitRouter.cenId())
     *             .transitRouterId(defaultTransitRouter.transitRouterId())
     *             .vpnId(defaultGatewayVpnAttachment.id())
     *             .zones(TransitRouterVpnAttachmentZoneArgs.builder()
     *                 .zoneId(default_.resources()[0].masterZones()[0])
     *                 .build())
     *             .build());
     * 
     *         var defaultGatewayVcoRoute = new GatewayVcoRoute("defaultGatewayVcoRoute", GatewayVcoRouteArgs.builder()
     *             .routeDest("192.168.12.0/24")
     *             .nextHop(defaultTransitRouterVpnAttachment.vpnId())
     *             .vpnConnectionId(defaultTransitRouterVpnAttachment.vpnId())
     *             .weight(100)
     *             .build());
     * 
     *         final var defaultGetGatewayVcoRoutes = VpnFunctions.getGatewayVcoRoutes(GetGatewayVcoRoutesArgs.builder()
     *             .vpnConnectionId(defaultTransitRouterVpnAttachment.vpnId())
     *             .build());
     * 
     *         ctx.export("vpnGatewayVcoRouteId1", ids.routes()[0].id());
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static Output<GetGatewayVcoRoutesResult> getGatewayVcoRoutes(GetGatewayVcoRoutesArgs args) {
        return getGatewayVcoRoutes(args, InvokeOptions.Empty);
    }
    /**
     * This data source provides the Vpn Gateway Vco Routes of the current Alibaba Cloud user.
     * 
     * &gt; **NOTE:** Available since v1.183.0.
     * 
     * ## Example Usage
     * 
     * Basic Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.alicloud.cen.Instance;
     * import com.pulumi.alicloud.cen.InstanceArgs;
     * import com.pulumi.alicloud.cen.TransitRouter;
     * import com.pulumi.alicloud.cen.TransitRouterArgs;
     * import com.pulumi.alicloud.cen.CenFunctions;
     * import com.pulumi.alicloud.cen.inputs.GetTransitRouterAvailableResourcesArgs;
     * import com.pulumi.alicloud.vpn.CustomerGateway;
     * import com.pulumi.alicloud.vpn.CustomerGatewayArgs;
     * import com.pulumi.alicloud.vpn.GatewayVpnAttachment;
     * import com.pulumi.alicloud.vpn.GatewayVpnAttachmentArgs;
     * import com.pulumi.alicloud.vpn.inputs.GatewayVpnAttachmentIkeConfigArgs;
     * import com.pulumi.alicloud.vpn.inputs.GatewayVpnAttachmentIpsecConfigArgs;
     * import com.pulumi.alicloud.vpn.inputs.GatewayVpnAttachmentBgpConfigArgs;
     * import com.pulumi.alicloud.vpn.inputs.GatewayVpnAttachmentHealthCheckConfigArgs;
     * import com.pulumi.alicloud.cen.TransitRouterVpnAttachment;
     * import com.pulumi.alicloud.cen.TransitRouterVpnAttachmentArgs;
     * import com.pulumi.alicloud.cen.inputs.TransitRouterVpnAttachmentZoneArgs;
     * import com.pulumi.alicloud.vpn.GatewayVcoRoute;
     * import com.pulumi.alicloud.vpn.GatewayVcoRouteArgs;
     * import com.pulumi.alicloud.vpn.VpnFunctions;
     * import com.pulumi.alicloud.vpn.inputs.GetGatewayVcoRoutesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var defaultInstance = new Instance("defaultInstance", InstanceArgs.builder()
     *             .cenInstanceName(name)
     *             .build());
     * 
     *         var defaultTransitRouter = new TransitRouter("defaultTransitRouter", TransitRouterArgs.builder()
     *             .cenId(defaultInstance.id())
     *             .transitRouterDescription("desd")
     *             .transitRouterName(name)
     *             .build());
     * 
     *         final var default = CenFunctions.getTransitRouterAvailableResources(GetTransitRouterAvailableResourcesArgs.builder()
     *             .build());
     * 
     *         var defaultCustomerGateway = new CustomerGateway("defaultCustomerGateway", CustomerGatewayArgs.builder()
     *             .name(name)
     *             .ipAddress("42.104.22.210")
     *             .asn("45014")
     *             .description("testAccVpnConnectionDesc")
     *             .build());
     * 
     *         var defaultGatewayVpnAttachment = new GatewayVpnAttachment("defaultGatewayVpnAttachment", GatewayVpnAttachmentArgs.builder()
     *             .customerGatewayId(defaultCustomerGateway.id())
     *             .networkType("public")
     *             .localSubnet("0.0.0.0/0")
     *             .remoteSubnet("0.0.0.0/0")
     *             .effectImmediately(false)
     *             .ikeConfig(GatewayVpnAttachmentIkeConfigArgs.builder()
     *                 .ikeAuthAlg("md5")
     *                 .ikeEncAlg("des")
     *                 .ikeVersion("ikev2")
     *                 .ikeMode("main")
     *                 .ikeLifetime(86400)
     *                 .psk("tf-testvpn2")
     *                 .ikePfs("group1")
     *                 .remoteId("testbob2")
     *                 .localId("testalice2")
     *                 .build())
     *             .ipsecConfig(GatewayVpnAttachmentIpsecConfigArgs.builder()
     *                 .ipsecPfs("group5")
     *                 .ipsecEncAlg("des")
     *                 .ipsecAuthAlg("md5")
     *                 .ipsecLifetime(86400)
     *                 .build())
     *             .bgpConfig(GatewayVpnAttachmentBgpConfigArgs.builder()
     *                 .enable(true)
     *                 .localAsn(45014)
     *                 .tunnelCidr("169.254.11.0/30")
     *                 .localBgpIp("169.254.11.1")
     *                 .build())
     *             .healthCheckConfig(GatewayVpnAttachmentHealthCheckConfigArgs.builder()
     *                 .enable(true)
     *                 .sip("192.168.1.1")
     *                 .dip("10.0.0.1")
     *                 .interval(10)
     *                 .retry(10)
     *                 .policy("revoke_route")
     *                 .build())
     *             .enableDpd(true)
     *             .enableNatTraversal(true)
     *             .vpnAttachmentName(name)
     *             .build());
     * 
     *         var defaultTransitRouterVpnAttachment = new TransitRouterVpnAttachment("defaultTransitRouterVpnAttachment", TransitRouterVpnAttachmentArgs.builder()
     *             .autoPublishRouteEnabled(false)
     *             .transitRouterAttachmentDescription(name)
     *             .transitRouterAttachmentName(name)
     *             .cenId(defaultTransitRouter.cenId())
     *             .transitRouterId(defaultTransitRouter.transitRouterId())
     *             .vpnId(defaultGatewayVpnAttachment.id())
     *             .zones(TransitRouterVpnAttachmentZoneArgs.builder()
     *                 .zoneId(default_.resources()[0].masterZones()[0])
     *                 .build())
     *             .build());
     * 
     *         var defaultGatewayVcoRoute = new GatewayVcoRoute("defaultGatewayVcoRoute", GatewayVcoRouteArgs.builder()
     *             .routeDest("192.168.12.0/24")
     *             .nextHop(defaultTransitRouterVpnAttachment.vpnId())
     *             .vpnConnectionId(defaultTransitRouterVpnAttachment.vpnId())
     *             .weight(100)
     *             .build());
     * 
     *         final var defaultGetGatewayVcoRoutes = VpnFunctions.getGatewayVcoRoutes(GetGatewayVcoRoutesArgs.builder()
     *             .vpnConnectionId(defaultTransitRouterVpnAttachment.vpnId())
     *             .build());
     * 
     *         ctx.export("vpnGatewayVcoRouteId1", ids.routes()[0].id());
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static CompletableFuture<GetGatewayVcoRoutesResult> getGatewayVcoRoutesPlain(GetGatewayVcoRoutesPlainArgs args) {
        return getGatewayVcoRoutesPlain(args, InvokeOptions.Empty);
    }
    /**
     * This data source provides the Vpn Gateway Vco Routes of the current Alibaba Cloud user.
     * 
     * &gt; **NOTE:** Available since v1.183.0.
     * 
     * ## Example Usage
     * 
     * Basic Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.alicloud.cen.Instance;
     * import com.pulumi.alicloud.cen.InstanceArgs;
     * import com.pulumi.alicloud.cen.TransitRouter;
     * import com.pulumi.alicloud.cen.TransitRouterArgs;
     * import com.pulumi.alicloud.cen.CenFunctions;
     * import com.pulumi.alicloud.cen.inputs.GetTransitRouterAvailableResourcesArgs;
     * import com.pulumi.alicloud.vpn.CustomerGateway;
     * import com.pulumi.alicloud.vpn.CustomerGatewayArgs;
     * import com.pulumi.alicloud.vpn.GatewayVpnAttachment;
     * import com.pulumi.alicloud.vpn.GatewayVpnAttachmentArgs;
     * import com.pulumi.alicloud.vpn.inputs.GatewayVpnAttachmentIkeConfigArgs;
     * import com.pulumi.alicloud.vpn.inputs.GatewayVpnAttachmentIpsecConfigArgs;
     * import com.pulumi.alicloud.vpn.inputs.GatewayVpnAttachmentBgpConfigArgs;
     * import com.pulumi.alicloud.vpn.inputs.GatewayVpnAttachmentHealthCheckConfigArgs;
     * import com.pulumi.alicloud.cen.TransitRouterVpnAttachment;
     * import com.pulumi.alicloud.cen.TransitRouterVpnAttachmentArgs;
     * import com.pulumi.alicloud.cen.inputs.TransitRouterVpnAttachmentZoneArgs;
     * import com.pulumi.alicloud.vpn.GatewayVcoRoute;
     * import com.pulumi.alicloud.vpn.GatewayVcoRouteArgs;
     * import com.pulumi.alicloud.vpn.VpnFunctions;
     * import com.pulumi.alicloud.vpn.inputs.GetGatewayVcoRoutesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var defaultInstance = new Instance("defaultInstance", InstanceArgs.builder()
     *             .cenInstanceName(name)
     *             .build());
     * 
     *         var defaultTransitRouter = new TransitRouter("defaultTransitRouter", TransitRouterArgs.builder()
     *             .cenId(defaultInstance.id())
     *             .transitRouterDescription("desd")
     *             .transitRouterName(name)
     *             .build());
     * 
     *         final var default = CenFunctions.getTransitRouterAvailableResources(GetTransitRouterAvailableResourcesArgs.builder()
     *             .build());
     * 
     *         var defaultCustomerGateway = new CustomerGateway("defaultCustomerGateway", CustomerGatewayArgs.builder()
     *             .name(name)
     *             .ipAddress("42.104.22.210")
     *             .asn("45014")
     *             .description("testAccVpnConnectionDesc")
     *             .build());
     * 
     *         var defaultGatewayVpnAttachment = new GatewayVpnAttachment("defaultGatewayVpnAttachment", GatewayVpnAttachmentArgs.builder()
     *             .customerGatewayId(defaultCustomerGateway.id())
     *             .networkType("public")
     *             .localSubnet("0.0.0.0/0")
     *             .remoteSubnet("0.0.0.0/0")
     *             .effectImmediately(false)
     *             .ikeConfig(GatewayVpnAttachmentIkeConfigArgs.builder()
     *                 .ikeAuthAlg("md5")
     *                 .ikeEncAlg("des")
     *                 .ikeVersion("ikev2")
     *                 .ikeMode("main")
     *                 .ikeLifetime(86400)
     *                 .psk("tf-testvpn2")
     *                 .ikePfs("group1")
     *                 .remoteId("testbob2")
     *                 .localId("testalice2")
     *                 .build())
     *             .ipsecConfig(GatewayVpnAttachmentIpsecConfigArgs.builder()
     *                 .ipsecPfs("group5")
     *                 .ipsecEncAlg("des")
     *                 .ipsecAuthAlg("md5")
     *                 .ipsecLifetime(86400)
     *                 .build())
     *             .bgpConfig(GatewayVpnAttachmentBgpConfigArgs.builder()
     *                 .enable(true)
     *                 .localAsn(45014)
     *                 .tunnelCidr("169.254.11.0/30")
     *                 .localBgpIp("169.254.11.1")
     *                 .build())
     *             .healthCheckConfig(GatewayVpnAttachmentHealthCheckConfigArgs.builder()
     *                 .enable(true)
     *                 .sip("192.168.1.1")
     *                 .dip("10.0.0.1")
     *                 .interval(10)
     *                 .retry(10)
     *                 .policy("revoke_route")
     *                 .build())
     *             .enableDpd(true)
     *             .enableNatTraversal(true)
     *             .vpnAttachmentName(name)
     *             .build());
     * 
     *         var defaultTransitRouterVpnAttachment = new TransitRouterVpnAttachment("defaultTransitRouterVpnAttachment", TransitRouterVpnAttachmentArgs.builder()
     *             .autoPublishRouteEnabled(false)
     *             .transitRouterAttachmentDescription(name)
     *             .transitRouterAttachmentName(name)
     *             .cenId(defaultTransitRouter.cenId())
     *             .transitRouterId(defaultTransitRouter.transitRouterId())
     *             .vpnId(defaultGatewayVpnAttachment.id())
     *             .zones(TransitRouterVpnAttachmentZoneArgs.builder()
     *                 .zoneId(default_.resources()[0].masterZones()[0])
     *                 .build())
     *             .build());
     * 
     *         var defaultGatewayVcoRoute = new GatewayVcoRoute("defaultGatewayVcoRoute", GatewayVcoRouteArgs.builder()
     *             .routeDest("192.168.12.0/24")
     *             .nextHop(defaultTransitRouterVpnAttachment.vpnId())
     *             .vpnConnectionId(defaultTransitRouterVpnAttachment.vpnId())
     *             .weight(100)
     *             .build());
     * 
     *         final var defaultGetGatewayVcoRoutes = VpnFunctions.getGatewayVcoRoutes(GetGatewayVcoRoutesArgs.builder()
     *             .vpnConnectionId(defaultTransitRouterVpnAttachment.vpnId())
     *             .build());
     * 
     *         ctx.export("vpnGatewayVcoRouteId1", ids.routes()[0].id());
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static Output<GetGatewayVcoRoutesResult> getGatewayVcoRoutes(GetGatewayVcoRoutesArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("alicloud:vpn/getGatewayVcoRoutes:getGatewayVcoRoutes", TypeShape.of(GetGatewayVcoRoutesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * This data source provides the Vpn Gateway Vco Routes of the current Alibaba Cloud user.
     * 
     * &gt; **NOTE:** Available since v1.183.0.
     * 
     * ## Example Usage
     * 
     * Basic Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.alicloud.cen.Instance;
     * import com.pulumi.alicloud.cen.InstanceArgs;
     * import com.pulumi.alicloud.cen.TransitRouter;
     * import com.pulumi.alicloud.cen.TransitRouterArgs;
     * import com.pulumi.alicloud.cen.CenFunctions;
     * import com.pulumi.alicloud.cen.inputs.GetTransitRouterAvailableResourcesArgs;
     * import com.pulumi.alicloud.vpn.CustomerGateway;
     * import com.pulumi.alicloud.vpn.CustomerGatewayArgs;
     * import com.pulumi.alicloud.vpn.GatewayVpnAttachment;
     * import com.pulumi.alicloud.vpn.GatewayVpnAttachmentArgs;
     * import com.pulumi.alicloud.vpn.inputs.GatewayVpnAttachmentIkeConfigArgs;
     * import com.pulumi.alicloud.vpn.inputs.GatewayVpnAttachmentIpsecConfigArgs;
     * import com.pulumi.alicloud.vpn.inputs.GatewayVpnAttachmentBgpConfigArgs;
     * import com.pulumi.alicloud.vpn.inputs.GatewayVpnAttachmentHealthCheckConfigArgs;
     * import com.pulumi.alicloud.cen.TransitRouterVpnAttachment;
     * import com.pulumi.alicloud.cen.TransitRouterVpnAttachmentArgs;
     * import com.pulumi.alicloud.cen.inputs.TransitRouterVpnAttachmentZoneArgs;
     * import com.pulumi.alicloud.vpn.GatewayVcoRoute;
     * import com.pulumi.alicloud.vpn.GatewayVcoRouteArgs;
     * import com.pulumi.alicloud.vpn.VpnFunctions;
     * import com.pulumi.alicloud.vpn.inputs.GetGatewayVcoRoutesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var defaultInstance = new Instance("defaultInstance", InstanceArgs.builder()
     *             .cenInstanceName(name)
     *             .build());
     * 
     *         var defaultTransitRouter = new TransitRouter("defaultTransitRouter", TransitRouterArgs.builder()
     *             .cenId(defaultInstance.id())
     *             .transitRouterDescription("desd")
     *             .transitRouterName(name)
     *             .build());
     * 
     *         final var default = CenFunctions.getTransitRouterAvailableResources(GetTransitRouterAvailableResourcesArgs.builder()
     *             .build());
     * 
     *         var defaultCustomerGateway = new CustomerGateway("defaultCustomerGateway", CustomerGatewayArgs.builder()
     *             .name(name)
     *             .ipAddress("42.104.22.210")
     *             .asn("45014")
     *             .description("testAccVpnConnectionDesc")
     *             .build());
     * 
     *         var defaultGatewayVpnAttachment = new GatewayVpnAttachment("defaultGatewayVpnAttachment", GatewayVpnAttachmentArgs.builder()
     *             .customerGatewayId(defaultCustomerGateway.id())
     *             .networkType("public")
     *             .localSubnet("0.0.0.0/0")
     *             .remoteSubnet("0.0.0.0/0")
     *             .effectImmediately(false)
     *             .ikeConfig(GatewayVpnAttachmentIkeConfigArgs.builder()
     *                 .ikeAuthAlg("md5")
     *                 .ikeEncAlg("des")
     *                 .ikeVersion("ikev2")
     *                 .ikeMode("main")
     *                 .ikeLifetime(86400)
     *                 .psk("tf-testvpn2")
     *                 .ikePfs("group1")
     *                 .remoteId("testbob2")
     *                 .localId("testalice2")
     *                 .build())
     *             .ipsecConfig(GatewayVpnAttachmentIpsecConfigArgs.builder()
     *                 .ipsecPfs("group5")
     *                 .ipsecEncAlg("des")
     *                 .ipsecAuthAlg("md5")
     *                 .ipsecLifetime(86400)
     *                 .build())
     *             .bgpConfig(GatewayVpnAttachmentBgpConfigArgs.builder()
     *                 .enable(true)
     *                 .localAsn(45014)
     *                 .tunnelCidr("169.254.11.0/30")
     *                 .localBgpIp("169.254.11.1")
     *                 .build())
     *             .healthCheckConfig(GatewayVpnAttachmentHealthCheckConfigArgs.builder()
     *                 .enable(true)
     *                 .sip("192.168.1.1")
     *                 .dip("10.0.0.1")
     *                 .interval(10)
     *                 .retry(10)
     *                 .policy("revoke_route")
     *                 .build())
     *             .enableDpd(true)
     *             .enableNatTraversal(true)
     *             .vpnAttachmentName(name)
     *             .build());
     * 
     *         var defaultTransitRouterVpnAttachment = new TransitRouterVpnAttachment("defaultTransitRouterVpnAttachment", TransitRouterVpnAttachmentArgs.builder()
     *             .autoPublishRouteEnabled(false)
     *             .transitRouterAttachmentDescription(name)
     *             .transitRouterAttachmentName(name)
     *             .cenId(defaultTransitRouter.cenId())
     *             .transitRouterId(defaultTransitRouter.transitRouterId())
     *             .vpnId(defaultGatewayVpnAttachment.id())
     *             .zones(TransitRouterVpnAttachmentZoneArgs.builder()
     *                 .zoneId(default_.resources()[0].masterZones()[0])
     *                 .build())
     *             .build());
     * 
     *         var defaultGatewayVcoRoute = new GatewayVcoRoute("defaultGatewayVcoRoute", GatewayVcoRouteArgs.builder()
     *             .routeDest("192.168.12.0/24")
     *             .nextHop(defaultTransitRouterVpnAttachment.vpnId())
     *             .vpnConnectionId(defaultTransitRouterVpnAttachment.vpnId())
     *             .weight(100)
     *             .build());
     * 
     *         final var defaultGetGatewayVcoRoutes = VpnFunctions.getGatewayVcoRoutes(GetGatewayVcoRoutesArgs.builder()
     *             .vpnConnectionId(defaultTransitRouterVpnAttachment.vpnId())
     *             .build());
     * 
     *         ctx.export("vpnGatewayVcoRouteId1", ids.routes()[0].id());
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static Output<GetGatewayVcoRoutesResult> getGatewayVcoRoutes(GetGatewayVcoRoutesArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("alicloud:vpn/getGatewayVcoRoutes:getGatewayVcoRoutes", TypeShape.of(GetGatewayVcoRoutesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * This data source provides the Vpn Gateway Vco Routes of the current Alibaba Cloud user.
     * 
     * &gt; **NOTE:** Available since v1.183.0.
     * 
     * ## Example Usage
     * 
     * Basic Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.alicloud.cen.Instance;
     * import com.pulumi.alicloud.cen.InstanceArgs;
     * import com.pulumi.alicloud.cen.TransitRouter;
     * import com.pulumi.alicloud.cen.TransitRouterArgs;
     * import com.pulumi.alicloud.cen.CenFunctions;
     * import com.pulumi.alicloud.cen.inputs.GetTransitRouterAvailableResourcesArgs;
     * import com.pulumi.alicloud.vpn.CustomerGateway;
     * import com.pulumi.alicloud.vpn.CustomerGatewayArgs;
     * import com.pulumi.alicloud.vpn.GatewayVpnAttachment;
     * import com.pulumi.alicloud.vpn.GatewayVpnAttachmentArgs;
     * import com.pulumi.alicloud.vpn.inputs.GatewayVpnAttachmentIkeConfigArgs;
     * import com.pulumi.alicloud.vpn.inputs.GatewayVpnAttachmentIpsecConfigArgs;
     * import com.pulumi.alicloud.vpn.inputs.GatewayVpnAttachmentBgpConfigArgs;
     * import com.pulumi.alicloud.vpn.inputs.GatewayVpnAttachmentHealthCheckConfigArgs;
     * import com.pulumi.alicloud.cen.TransitRouterVpnAttachment;
     * import com.pulumi.alicloud.cen.TransitRouterVpnAttachmentArgs;
     * import com.pulumi.alicloud.cen.inputs.TransitRouterVpnAttachmentZoneArgs;
     * import com.pulumi.alicloud.vpn.GatewayVcoRoute;
     * import com.pulumi.alicloud.vpn.GatewayVcoRouteArgs;
     * import com.pulumi.alicloud.vpn.VpnFunctions;
     * import com.pulumi.alicloud.vpn.inputs.GetGatewayVcoRoutesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var defaultInstance = new Instance("defaultInstance", InstanceArgs.builder()
     *             .cenInstanceName(name)
     *             .build());
     * 
     *         var defaultTransitRouter = new TransitRouter("defaultTransitRouter", TransitRouterArgs.builder()
     *             .cenId(defaultInstance.id())
     *             .transitRouterDescription("desd")
     *             .transitRouterName(name)
     *             .build());
     * 
     *         final var default = CenFunctions.getTransitRouterAvailableResources(GetTransitRouterAvailableResourcesArgs.builder()
     *             .build());
     * 
     *         var defaultCustomerGateway = new CustomerGateway("defaultCustomerGateway", CustomerGatewayArgs.builder()
     *             .name(name)
     *             .ipAddress("42.104.22.210")
     *             .asn("45014")
     *             .description("testAccVpnConnectionDesc")
     *             .build());
     * 
     *         var defaultGatewayVpnAttachment = new GatewayVpnAttachment("defaultGatewayVpnAttachment", GatewayVpnAttachmentArgs.builder()
     *             .customerGatewayId(defaultCustomerGateway.id())
     *             .networkType("public")
     *             .localSubnet("0.0.0.0/0")
     *             .remoteSubnet("0.0.0.0/0")
     *             .effectImmediately(false)
     *             .ikeConfig(GatewayVpnAttachmentIkeConfigArgs.builder()
     *                 .ikeAuthAlg("md5")
     *                 .ikeEncAlg("des")
     *                 .ikeVersion("ikev2")
     *                 .ikeMode("main")
     *                 .ikeLifetime(86400)
     *                 .psk("tf-testvpn2")
     *                 .ikePfs("group1")
     *                 .remoteId("testbob2")
     *                 .localId("testalice2")
     *                 .build())
     *             .ipsecConfig(GatewayVpnAttachmentIpsecConfigArgs.builder()
     *                 .ipsecPfs("group5")
     *                 .ipsecEncAlg("des")
     *                 .ipsecAuthAlg("md5")
     *                 .ipsecLifetime(86400)
     *                 .build())
     *             .bgpConfig(GatewayVpnAttachmentBgpConfigArgs.builder()
     *                 .enable(true)
     *                 .localAsn(45014)
     *                 .tunnelCidr("169.254.11.0/30")
     *                 .localBgpIp("169.254.11.1")
     *                 .build())
     *             .healthCheckConfig(GatewayVpnAttachmentHealthCheckConfigArgs.builder()
     *                 .enable(true)
     *                 .sip("192.168.1.1")
     *                 .dip("10.0.0.1")
     *                 .interval(10)
     *                 .retry(10)
     *                 .policy("revoke_route")
     *                 .build())
     *             .enableDpd(true)
     *             .enableNatTraversal(true)
     *             .vpnAttachmentName(name)
     *             .build());
     * 
     *         var defaultTransitRouterVpnAttachment = new TransitRouterVpnAttachment("defaultTransitRouterVpnAttachment", TransitRouterVpnAttachmentArgs.builder()
     *             .autoPublishRouteEnabled(false)
     *             .transitRouterAttachmentDescription(name)
     *             .transitRouterAttachmentName(name)
     *             .cenId(defaultTransitRouter.cenId())
     *             .transitRouterId(defaultTransitRouter.transitRouterId())
     *             .vpnId(defaultGatewayVpnAttachment.id())
     *             .zones(TransitRouterVpnAttachmentZoneArgs.builder()
     *                 .zoneId(default_.resources()[0].masterZones()[0])
     *                 .build())
     *             .build());
     * 
     *         var defaultGatewayVcoRoute = new GatewayVcoRoute("defaultGatewayVcoRoute", GatewayVcoRouteArgs.builder()
     *             .routeDest("192.168.12.0/24")
     *             .nextHop(defaultTransitRouterVpnAttachment.vpnId())
     *             .vpnConnectionId(defaultTransitRouterVpnAttachment.vpnId())
     *             .weight(100)
     *             .build());
     * 
     *         final var defaultGetGatewayVcoRoutes = VpnFunctions.getGatewayVcoRoutes(GetGatewayVcoRoutesArgs.builder()
     *             .vpnConnectionId(defaultTransitRouterVpnAttachment.vpnId())
     *             .build());
     * 
     *         ctx.export("vpnGatewayVcoRouteId1", ids.routes()[0].id());
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static CompletableFuture<GetGatewayVcoRoutesResult> getGatewayVcoRoutesPlain(GetGatewayVcoRoutesPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("alicloud:vpn/getGatewayVcoRoutes:getGatewayVcoRoutes", TypeShape.of(GetGatewayVcoRoutesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * This data source provides Vpn Gateway Vpn Attachment available to the user.[What is Vpn Attachment](https://next.api.alibabacloud.com/document/Vpc/2016-04-28/CreateVpnAttachment)
     * 
     * &gt; **NOTE:** Available since v1.245.0.
     * 
     */
    public static Output<GetGatewayVpnAttachmentsResult> getGatewayVpnAttachments() {
        return getGatewayVpnAttachments(GetGatewayVpnAttachmentsArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * This data source provides Vpn Gateway Vpn Attachment available to the user.[What is Vpn Attachment](https://next.api.alibabacloud.com/document/Vpc/2016-04-28/CreateVpnAttachment)
     * 
     * &gt; **NOTE:** Available since v1.245.0.
     * 
     */
    public static CompletableFuture<GetGatewayVpnAttachmentsResult> getGatewayVpnAttachmentsPlain() {
        return getGatewayVpnAttachmentsPlain(GetGatewayVpnAttachmentsPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * This data source provides Vpn Gateway Vpn Attachment available to the user.[What is Vpn Attachment](https://next.api.alibabacloud.com/document/Vpc/2016-04-28/CreateVpnAttachment)
     * 
     * &gt; **NOTE:** Available since v1.245.0.
     * 
     */
    public static Output<GetGatewayVpnAttachmentsResult> getGatewayVpnAttachments(GetGatewayVpnAttachmentsArgs args) {
        return getGatewayVpnAttachments(args, InvokeOptions.Empty);
    }
    /**
     * This data source provides Vpn Gateway Vpn Attachment available to the user.[What is Vpn Attachment](https://next.api.alibabacloud.com/document/Vpc/2016-04-28/CreateVpnAttachment)
     * 
     * &gt; **NOTE:** Available since v1.245.0.
     * 
     */
    public static CompletableFuture<GetGatewayVpnAttachmentsResult> getGatewayVpnAttachmentsPlain(GetGatewayVpnAttachmentsPlainArgs args) {
        return getGatewayVpnAttachmentsPlain(args, InvokeOptions.Empty);
    }
    /**
     * This data source provides Vpn Gateway Vpn Attachment available to the user.[What is Vpn Attachment](https://next.api.alibabacloud.com/document/Vpc/2016-04-28/CreateVpnAttachment)
     * 
     * &gt; **NOTE:** Available since v1.245.0.
     * 
     */
    public static Output<GetGatewayVpnAttachmentsResult> getGatewayVpnAttachments(GetGatewayVpnAttachmentsArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("alicloud:vpn/getGatewayVpnAttachments:getGatewayVpnAttachments", TypeShape.of(GetGatewayVpnAttachmentsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * This data source provides Vpn Gateway Vpn Attachment available to the user.[What is Vpn Attachment](https://next.api.alibabacloud.com/document/Vpc/2016-04-28/CreateVpnAttachment)
     * 
     * &gt; **NOTE:** Available since v1.245.0.
     * 
     */
    public static Output<GetGatewayVpnAttachmentsResult> getGatewayVpnAttachments(GetGatewayVpnAttachmentsArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("alicloud:vpn/getGatewayVpnAttachments:getGatewayVpnAttachments", TypeShape.of(GetGatewayVpnAttachmentsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * This data source provides Vpn Gateway Vpn Attachment available to the user.[What is Vpn Attachment](https://next.api.alibabacloud.com/document/Vpc/2016-04-28/CreateVpnAttachment)
     * 
     * &gt; **NOTE:** Available since v1.245.0.
     * 
     */
    public static CompletableFuture<GetGatewayVpnAttachmentsResult> getGatewayVpnAttachmentsPlain(GetGatewayVpnAttachmentsPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("alicloud:vpn/getGatewayVpnAttachments:getGatewayVpnAttachments", TypeShape.of(GetGatewayVpnAttachmentsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * This data source provides VPN Gateway Zone available to the user.[What is Zone](https://next.api.alibabacloud.com/api/Vpc/2016-04-28/DescribeVpnGatewayAvailableZones?lang=JAVA)
     * 
     * &gt; **NOTE:** Available since v1.216.0.
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.alicloud.vpn.VpnFunctions;
     * import com.pulumi.alicloud.vpn.inputs.GetGatewayZonesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var default = VpnFunctions.getGatewayZones(GetGatewayZonesArgs.builder()
     *             .spec("5M")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static Output<GetGatewayZonesResult> getGatewayZones(GetGatewayZonesArgs args) {
        return getGatewayZones(args, InvokeOptions.Empty);
    }
    /**
     * This data source provides VPN Gateway Zone available to the user.[What is Zone](https://next.api.alibabacloud.com/api/Vpc/2016-04-28/DescribeVpnGatewayAvailableZones?lang=JAVA)
     * 
     * &gt; **NOTE:** Available since v1.216.0.
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.alicloud.vpn.VpnFunctions;
     * import com.pulumi.alicloud.vpn.inputs.GetGatewayZonesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var default = VpnFunctions.getGatewayZones(GetGatewayZonesArgs.builder()
     *             .spec("5M")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static CompletableFuture<GetGatewayZonesResult> getGatewayZonesPlain(GetGatewayZonesPlainArgs args) {
        return getGatewayZonesPlain(args, InvokeOptions.Empty);
    }
    /**
     * This data source provides VPN Gateway Zone available to the user.[What is Zone](https://next.api.alibabacloud.com/api/Vpc/2016-04-28/DescribeVpnGatewayAvailableZones?lang=JAVA)
     * 
     * &gt; **NOTE:** Available since v1.216.0.
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.alicloud.vpn.VpnFunctions;
     * import com.pulumi.alicloud.vpn.inputs.GetGatewayZonesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var default = VpnFunctions.getGatewayZones(GetGatewayZonesArgs.builder()
     *             .spec("5M")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static Output<GetGatewayZonesResult> getGatewayZones(GetGatewayZonesArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("alicloud:vpn/getGatewayZones:getGatewayZones", TypeShape.of(GetGatewayZonesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * This data source provides VPN Gateway Zone available to the user.[What is Zone](https://next.api.alibabacloud.com/api/Vpc/2016-04-28/DescribeVpnGatewayAvailableZones?lang=JAVA)
     * 
     * &gt; **NOTE:** Available since v1.216.0.
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.alicloud.vpn.VpnFunctions;
     * import com.pulumi.alicloud.vpn.inputs.GetGatewayZonesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var default = VpnFunctions.getGatewayZones(GetGatewayZonesArgs.builder()
     *             .spec("5M")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static Output<GetGatewayZonesResult> getGatewayZones(GetGatewayZonesArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("alicloud:vpn/getGatewayZones:getGatewayZones", TypeShape.of(GetGatewayZonesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * This data source provides VPN Gateway Zone available to the user.[What is Zone](https://next.api.alibabacloud.com/api/Vpc/2016-04-28/DescribeVpnGatewayAvailableZones?lang=JAVA)
     * 
     * &gt; **NOTE:** Available since v1.216.0.
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.alicloud.vpn.VpnFunctions;
     * import com.pulumi.alicloud.vpn.inputs.GetGatewayZonesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var default = VpnFunctions.getGatewayZones(GetGatewayZonesArgs.builder()
     *             .spec("5M")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static CompletableFuture<GetGatewayZonesResult> getGatewayZonesPlain(GetGatewayZonesPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("alicloud:vpn/getGatewayZones:getGatewayZones", TypeShape.of(GetGatewayZonesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The VPNs data source lists a number of VPNs resource information owned by an Alicloud account.
     * 
     * &gt; **NOTE:** Available since v1.18.0.
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.alicloud.AlicloudFunctions;
     * import com.pulumi.alicloud.inputs.GetZonesArgs;
     * import com.pulumi.alicloud.vpc.VpcFunctions;
     * import com.pulumi.alicloud.vpc.inputs.GetNetworksArgs;
     * import com.pulumi.alicloud.vpc.inputs.GetSwitchesArgs;
     * import com.pulumi.alicloud.vpc.Switch;
     * import com.pulumi.alicloud.vpc.SwitchArgs;
     * import com.pulumi.std.StdFunctions;
     * import com.pulumi.std.inputs.CidrsubnetArgs;
     * import com.pulumi.std.inputs.ConcatArgs;
     * import com.pulumi.alicloud.vpn.Gateway;
     * import com.pulumi.alicloud.vpn.GatewayArgs;
     * import com.pulumi.alicloud.vpn.VpnFunctions;
     * import com.pulumi.alicloud.vpn.inputs.GetGatewaysArgs;
     * import com.pulumi.codegen.internal.KeyedValue;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var config = ctx.config();
     *         final var name = config.get("name").orElse("terraform-example");
     *         final var spec = config.get("spec").orElse("20");
     *         final var default = AlicloudFunctions.getZones(GetZonesArgs.builder()
     *             .availableResourceCreation("VSwitch")
     *             .build());
     * 
     *         final var defaultGetNetworks = VpcFunctions.getNetworks(GetNetworksArgs.builder()
     *             .nameRegex("^default-NODELETING$")
     *             .build());
     * 
     *         final var defaultGetSwitches = VpcFunctions.getSwitches(GetSwitchesArgs.builder()
     *             .vpcId(defaultGetNetworks.ids()[0])
     *             .zoneId("me-east-1a")
     *             .build());
     * 
     *         for (var i = 0; i < defaultGetSwitches.ids().length().applyValue(_length -> _length > 0 ? 0 : 1); i++) {
     *             new Switch("vswitch-" + i, SwitchArgs.builder()
     *                 .vpcId(defaultGetNetworks.ids()[0])
     *                 .cidrBlock(StdFunctions.cidrsubnet(CidrsubnetArgs.builder()
     *                     .input(defaultGetNetworks.vpcs()[0].cidrBlock())
     *                     .newbits(8)
     *                     .netnum(8)
     *                     .build()).result())
     *                 .zoneId("me-east-1a")
     *                 .vswitchName(name)
     *                 .build());
     * 
     *         
     * }
     *         final var vswitchId = defaultGetSwitches.ids().length().applyValue(_length -> _length > 0 ? defaultGetSwitches.ids()[0] : StdFunctions.concat(ConcatArgs.builder()
     *             .input(            
     *                 vswitch.stream().map(element -> element.id()).collect(toList()),
     *                 "")
     *             .build()).result()[0]);
     * 
     *         var defaultGateway = new Gateway("defaultGateway", GatewayArgs.builder()
     *             .vpnType("Normal")
     *             .vpnGatewayName(name)
     *             .vswitchId(vswitchId)
     *             .autoPay(true)
     *             .vpcId(defaultGetNetworks.ids()[0])
     *             .networkType("public")
     *             .paymentType("Subscription")
     *             .enableIpsec(true)
     *             .bandwidth(spec)
     *             .build());
     * 
     *         final var vpnGateways = VpnFunctions.getGateways(GetGatewaysArgs.builder()
     *             .ids(defaultGateway.id())
     *             .includeReservationData(true)
     *             .outputFile("/tmp/vpns")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static Output<GetGatewaysResult> getGateways() {
        return getGateways(GetGatewaysArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * The VPNs data source lists a number of VPNs resource information owned by an Alicloud account.
     * 
     * &gt; **NOTE:** Available since v1.18.0.
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.alicloud.AlicloudFunctions;
     * import com.pulumi.alicloud.inputs.GetZonesArgs;
     * import com.pulumi.alicloud.vpc.VpcFunctions;
     * import com.pulumi.alicloud.vpc.inputs.GetNetworksArgs;
     * import com.pulumi.alicloud.vpc.inputs.GetSwitchesArgs;
     * import com.pulumi.alicloud.vpc.Switch;
     * import com.pulumi.alicloud.vpc.SwitchArgs;
     * import com.pulumi.std.StdFunctions;
     * import com.pulumi.std.inputs.CidrsubnetArgs;
     * import com.pulumi.std.inputs.ConcatArgs;
     * import com.pulumi.alicloud.vpn.Gateway;
     * import com.pulumi.alicloud.vpn.GatewayArgs;
     * import com.pulumi.alicloud.vpn.VpnFunctions;
     * import com.pulumi.alicloud.vpn.inputs.GetGatewaysArgs;
     * import com.pulumi.codegen.internal.KeyedValue;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var config = ctx.config();
     *         final var name = config.get("name").orElse("terraform-example");
     *         final var spec = config.get("spec").orElse("20");
     *         final var default = AlicloudFunctions.getZones(GetZonesArgs.builder()
     *             .availableResourceCreation("VSwitch")
     *             .build());
     * 
     *         final var defaultGetNetworks = VpcFunctions.getNetworks(GetNetworksArgs.builder()
     *             .nameRegex("^default-NODELETING$")
     *             .build());
     * 
     *         final var defaultGetSwitches = VpcFunctions.getSwitches(GetSwitchesArgs.builder()
     *             .vpcId(defaultGetNetworks.ids()[0])
     *             .zoneId("me-east-1a")
     *             .build());
     * 
     *         for (var i = 0; i < defaultGetSwitches.ids().length().applyValue(_length -> _length > 0 ? 0 : 1); i++) {
     *             new Switch("vswitch-" + i, SwitchArgs.builder()
     *                 .vpcId(defaultGetNetworks.ids()[0])
     *                 .cidrBlock(StdFunctions.cidrsubnet(CidrsubnetArgs.builder()
     *                     .input(defaultGetNetworks.vpcs()[0].cidrBlock())
     *                     .newbits(8)
     *                     .netnum(8)
     *                     .build()).result())
     *                 .zoneId("me-east-1a")
     *                 .vswitchName(name)
     *                 .build());
     * 
     *         
     * }
     *         final var vswitchId = defaultGetSwitches.ids().length().applyValue(_length -> _length > 0 ? defaultGetSwitches.ids()[0] : StdFunctions.concat(ConcatArgs.builder()
     *             .input(            
     *                 vswitch.stream().map(element -> element.id()).collect(toList()),
     *                 "")
     *             .build()).result()[0]);
     * 
     *         var defaultGateway = new Gateway("defaultGateway", GatewayArgs.builder()
     *             .vpnType("Normal")
     *             .vpnGatewayName(name)
     *             .vswitchId(vswitchId)
     *             .autoPay(true)
     *             .vpcId(defaultGetNetworks.ids()[0])
     *             .networkType("public")
     *             .paymentType("Subscription")
     *             .enableIpsec(true)
     *             .bandwidth(spec)
     *             .build());
     * 
     *         final var vpnGateways = VpnFunctions.getGateways(GetGatewaysArgs.builder()
     *             .ids(defaultGateway.id())
     *             .includeReservationData(true)
     *             .outputFile("/tmp/vpns")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static CompletableFuture<GetGatewaysResult> getGatewaysPlain() {
        return getGatewaysPlain(GetGatewaysPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * The VPNs data source lists a number of VPNs resource information owned by an Alicloud account.
     * 
     * &gt; **NOTE:** Available since v1.18.0.
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.alicloud.AlicloudFunctions;
     * import com.pulumi.alicloud.inputs.GetZonesArgs;
     * import com.pulumi.alicloud.vpc.VpcFunctions;
     * import com.pulumi.alicloud.vpc.inputs.GetNetworksArgs;
     * import com.pulumi.alicloud.vpc.inputs.GetSwitchesArgs;
     * import com.pulumi.alicloud.vpc.Switch;
     * import com.pulumi.alicloud.vpc.SwitchArgs;
     * import com.pulumi.std.StdFunctions;
     * import com.pulumi.std.inputs.CidrsubnetArgs;
     * import com.pulumi.std.inputs.ConcatArgs;
     * import com.pulumi.alicloud.vpn.Gateway;
     * import com.pulumi.alicloud.vpn.GatewayArgs;
     * import com.pulumi.alicloud.vpn.VpnFunctions;
     * import com.pulumi.alicloud.vpn.inputs.GetGatewaysArgs;
     * import com.pulumi.codegen.internal.KeyedValue;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var config = ctx.config();
     *         final var name = config.get("name").orElse("terraform-example");
     *         final var spec = config.get("spec").orElse("20");
     *         final var default = AlicloudFunctions.getZones(GetZonesArgs.builder()
     *             .availableResourceCreation("VSwitch")
     *             .build());
     * 
     *         final var defaultGetNetworks = VpcFunctions.getNetworks(GetNetworksArgs.builder()
     *             .nameRegex("^default-NODELETING$")
     *             .build());
     * 
     *         final var defaultGetSwitches = VpcFunctions.getSwitches(GetSwitchesArgs.builder()
     *             .vpcId(defaultGetNetworks.ids()[0])
     *             .zoneId("me-east-1a")
     *             .build());
     * 
     *         for (var i = 0; i < defaultGetSwitches.ids().length().applyValue(_length -> _length > 0 ? 0 : 1); i++) {
     *             new Switch("vswitch-" + i, SwitchArgs.builder()
     *                 .vpcId(defaultGetNetworks.ids()[0])
     *                 .cidrBlock(StdFunctions.cidrsubnet(CidrsubnetArgs.builder()
     *                     .input(defaultGetNetworks.vpcs()[0].cidrBlock())
     *                     .newbits(8)
     *                     .netnum(8)
     *                     .build()).result())
     *                 .zoneId("me-east-1a")
     *                 .vswitchName(name)
     *                 .build());
     * 
     *         
     * }
     *         final var vswitchId = defaultGetSwitches.ids().length().applyValue(_length -> _length > 0 ? defaultGetSwitches.ids()[0] : StdFunctions.concat(ConcatArgs.builder()
     *             .input(            
     *                 vswitch.stream().map(element -> element.id()).collect(toList()),
     *                 "")
     *             .build()).result()[0]);
     * 
     *         var defaultGateway = new Gateway("defaultGateway", GatewayArgs.builder()
     *             .vpnType("Normal")
     *             .vpnGatewayName(name)
     *             .vswitchId(vswitchId)
     *             .autoPay(true)
     *             .vpcId(defaultGetNetworks.ids()[0])
     *             .networkType("public")
     *             .paymentType("Subscription")
     *             .enableIpsec(true)
     *             .bandwidth(spec)
     *             .build());
     * 
     *         final var vpnGateways = VpnFunctions.getGateways(GetGatewaysArgs.builder()
     *             .ids(defaultGateway.id())
     *             .includeReservationData(true)
     *             .outputFile("/tmp/vpns")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static Output<GetGatewaysResult> getGateways(GetGatewaysArgs args) {
        return getGateways(args, InvokeOptions.Empty);
    }
    /**
     * The VPNs data source lists a number of VPNs resource information owned by an Alicloud account.
     * 
     * &gt; **NOTE:** Available since v1.18.0.
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.alicloud.AlicloudFunctions;
     * import com.pulumi.alicloud.inputs.GetZonesArgs;
     * import com.pulumi.alicloud.vpc.VpcFunctions;
     * import com.pulumi.alicloud.vpc.inputs.GetNetworksArgs;
     * import com.pulumi.alicloud.vpc.inputs.GetSwitchesArgs;
     * import com.pulumi.alicloud.vpc.Switch;
     * import com.pulumi.alicloud.vpc.SwitchArgs;
     * import com.pulumi.std.StdFunctions;
     * import com.pulumi.std.inputs.CidrsubnetArgs;
     * import com.pulumi.std.inputs.ConcatArgs;
     * import com.pulumi.alicloud.vpn.Gateway;
     * import com.pulumi.alicloud.vpn.GatewayArgs;
     * import com.pulumi.alicloud.vpn.VpnFunctions;
     * import com.pulumi.alicloud.vpn.inputs.GetGatewaysArgs;
     * import com.pulumi.codegen.internal.KeyedValue;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var config = ctx.config();
     *         final var name = config.get("name").orElse("terraform-example");
     *         final var spec = config.get("spec").orElse("20");
     *         final var default = AlicloudFunctions.getZones(GetZonesArgs.builder()
     *             .availableResourceCreation("VSwitch")
     *             .build());
     * 
     *         final var defaultGetNetworks = VpcFunctions.getNetworks(GetNetworksArgs.builder()
     *             .nameRegex("^default-NODELETING$")
     *             .build());
     * 
     *         final var defaultGetSwitches = VpcFunctions.getSwitches(GetSwitchesArgs.builder()
     *             .vpcId(defaultGetNetworks.ids()[0])
     *             .zoneId("me-east-1a")
     *             .build());
     * 
     *         for (var i = 0; i < defaultGetSwitches.ids().length().applyValue(_length -> _length > 0 ? 0 : 1); i++) {
     *             new Switch("vswitch-" + i, SwitchArgs.builder()
     *                 .vpcId(defaultGetNetworks.ids()[0])
     *                 .cidrBlock(StdFunctions.cidrsubnet(CidrsubnetArgs.builder()
     *                     .input(defaultGetNetworks.vpcs()[0].cidrBlock())
     *                     .newbits(8)
     *                     .netnum(8)
     *                     .build()).result())
     *                 .zoneId("me-east-1a")
     *                 .vswitchName(name)
     *                 .build());
     * 
     *         
     * }
     *         final var vswitchId = defaultGetSwitches.ids().length().applyValue(_length -> _length > 0 ? defaultGetSwitches.ids()[0] : StdFunctions.concat(ConcatArgs.builder()
     *             .input(            
     *                 vswitch.stream().map(element -> element.id()).collect(toList()),
     *                 "")
     *             .build()).result()[0]);
     * 
     *         var defaultGateway = new Gateway("defaultGateway", GatewayArgs.builder()
     *             .vpnType("Normal")
     *             .vpnGatewayName(name)
     *             .vswitchId(vswitchId)
     *             .autoPay(true)
     *             .vpcId(defaultGetNetworks.ids()[0])
     *             .networkType("public")
     *             .paymentType("Subscription")
     *             .enableIpsec(true)
     *             .bandwidth(spec)
     *             .build());
     * 
     *         final var vpnGateways = VpnFunctions.getGateways(GetGatewaysArgs.builder()
     *             .ids(defaultGateway.id())
     *             .includeReservationData(true)
     *             .outputFile("/tmp/vpns")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static CompletableFuture<GetGatewaysResult> getGatewaysPlain(GetGatewaysPlainArgs args) {
        return getGatewaysPlain(args, InvokeOptions.Empty);
    }
    /**
     * The VPNs data source lists a number of VPNs resource information owned by an Alicloud account.
     * 
     * &gt; **NOTE:** Available since v1.18.0.
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.alicloud.AlicloudFunctions;
     * import com.pulumi.alicloud.inputs.GetZonesArgs;
     * import com.pulumi.alicloud.vpc.VpcFunctions;
     * import com.pulumi.alicloud.vpc.inputs.GetNetworksArgs;
     * import com.pulumi.alicloud.vpc.inputs.GetSwitchesArgs;
     * import com.pulumi.alicloud.vpc.Switch;
     * import com.pulumi.alicloud.vpc.SwitchArgs;
     * import com.pulumi.std.StdFunctions;
     * import com.pulumi.std.inputs.CidrsubnetArgs;
     * import com.pulumi.std.inputs.ConcatArgs;
     * import com.pulumi.alicloud.vpn.Gateway;
     * import com.pulumi.alicloud.vpn.GatewayArgs;
     * import com.pulumi.alicloud.vpn.VpnFunctions;
     * import com.pulumi.alicloud.vpn.inputs.GetGatewaysArgs;
     * import com.pulumi.codegen.internal.KeyedValue;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var config = ctx.config();
     *         final var name = config.get("name").orElse("terraform-example");
     *         final var spec = config.get("spec").orElse("20");
     *         final var default = AlicloudFunctions.getZones(GetZonesArgs.builder()
     *             .availableResourceCreation("VSwitch")
     *             .build());
     * 
     *         final var defaultGetNetworks = VpcFunctions.getNetworks(GetNetworksArgs.builder()
     *             .nameRegex("^default-NODELETING$")
     *             .build());
     * 
     *         final var defaultGetSwitches = VpcFunctions.getSwitches(GetSwitchesArgs.builder()
     *             .vpcId(defaultGetNetworks.ids()[0])
     *             .zoneId("me-east-1a")
     *             .build());
     * 
     *         for (var i = 0; i < defaultGetSwitches.ids().length().applyValue(_length -> _length > 0 ? 0 : 1); i++) {
     *             new Switch("vswitch-" + i, SwitchArgs.builder()
     *                 .vpcId(defaultGetNetworks.ids()[0])
     *                 .cidrBlock(StdFunctions.cidrsubnet(CidrsubnetArgs.builder()
     *                     .input(defaultGetNetworks.vpcs()[0].cidrBlock())
     *                     .newbits(8)
     *                     .netnum(8)
     *                     .build()).result())
     *                 .zoneId("me-east-1a")
     *                 .vswitchName(name)
     *                 .build());
     * 
     *         
     * }
     *         final var vswitchId = defaultGetSwitches.ids().length().applyValue(_length -> _length > 0 ? defaultGetSwitches.ids()[0] : StdFunctions.concat(ConcatArgs.builder()
     *             .input(            
     *                 vswitch.stream().map(element -> element.id()).collect(toList()),
     *                 "")
     *             .build()).result()[0]);
     * 
     *         var defaultGateway = new Gateway("defaultGateway", GatewayArgs.builder()
     *             .vpnType("Normal")
     *             .vpnGatewayName(name)
     *             .vswitchId(vswitchId)
     *             .autoPay(true)
     *             .vpcId(defaultGetNetworks.ids()[0])
     *             .networkType("public")
     *             .paymentType("Subscription")
     *             .enableIpsec(true)
     *             .bandwidth(spec)
     *             .build());
     * 
     *         final var vpnGateways = VpnFunctions.getGateways(GetGatewaysArgs.builder()
     *             .ids(defaultGateway.id())
     *             .includeReservationData(true)
     *             .outputFile("/tmp/vpns")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static Output<GetGatewaysResult> getGateways(GetGatewaysArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("alicloud:vpn/getGateways:getGateways", TypeShape.of(GetGatewaysResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The VPNs data source lists a number of VPNs resource information owned by an Alicloud account.
     * 
     * &gt; **NOTE:** Available since v1.18.0.
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.alicloud.AlicloudFunctions;
     * import com.pulumi.alicloud.inputs.GetZonesArgs;
     * import com.pulumi.alicloud.vpc.VpcFunctions;
     * import com.pulumi.alicloud.vpc.inputs.GetNetworksArgs;
     * import com.pulumi.alicloud.vpc.inputs.GetSwitchesArgs;
     * import com.pulumi.alicloud.vpc.Switch;
     * import com.pulumi.alicloud.vpc.SwitchArgs;
     * import com.pulumi.std.StdFunctions;
     * import com.pulumi.std.inputs.CidrsubnetArgs;
     * import com.pulumi.std.inputs.ConcatArgs;
     * import com.pulumi.alicloud.vpn.Gateway;
     * import com.pulumi.alicloud.vpn.GatewayArgs;
     * import com.pulumi.alicloud.vpn.VpnFunctions;
     * import com.pulumi.alicloud.vpn.inputs.GetGatewaysArgs;
     * import com.pulumi.codegen.internal.KeyedValue;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var config = ctx.config();
     *         final var name = config.get("name").orElse("terraform-example");
     *         final var spec = config.get("spec").orElse("20");
     *         final var default = AlicloudFunctions.getZones(GetZonesArgs.builder()
     *             .availableResourceCreation("VSwitch")
     *             .build());
     * 
     *         final var defaultGetNetworks = VpcFunctions.getNetworks(GetNetworksArgs.builder()
     *             .nameRegex("^default-NODELETING$")
     *             .build());
     * 
     *         final var defaultGetSwitches = VpcFunctions.getSwitches(GetSwitchesArgs.builder()
     *             .vpcId(defaultGetNetworks.ids()[0])
     *             .zoneId("me-east-1a")
     *             .build());
     * 
     *         for (var i = 0; i < defaultGetSwitches.ids().length().applyValue(_length -> _length > 0 ? 0 : 1); i++) {
     *             new Switch("vswitch-" + i, SwitchArgs.builder()
     *                 .vpcId(defaultGetNetworks.ids()[0])
     *                 .cidrBlock(StdFunctions.cidrsubnet(CidrsubnetArgs.builder()
     *                     .input(defaultGetNetworks.vpcs()[0].cidrBlock())
     *                     .newbits(8)
     *                     .netnum(8)
     *                     .build()).result())
     *                 .zoneId("me-east-1a")
     *                 .vswitchName(name)
     *                 .build());
     * 
     *         
     * }
     *         final var vswitchId = defaultGetSwitches.ids().length().applyValue(_length -> _length > 0 ? defaultGetSwitches.ids()[0] : StdFunctions.concat(ConcatArgs.builder()
     *             .input(            
     *                 vswitch.stream().map(element -> element.id()).collect(toList()),
     *                 "")
     *             .build()).result()[0]);
     * 
     *         var defaultGateway = new Gateway("defaultGateway", GatewayArgs.builder()
     *             .vpnType("Normal")
     *             .vpnGatewayName(name)
     *             .vswitchId(vswitchId)
     *             .autoPay(true)
     *             .vpcId(defaultGetNetworks.ids()[0])
     *             .networkType("public")
     *             .paymentType("Subscription")
     *             .enableIpsec(true)
     *             .bandwidth(spec)
     *             .build());
     * 
     *         final var vpnGateways = VpnFunctions.getGateways(GetGatewaysArgs.builder()
     *             .ids(defaultGateway.id())
     *             .includeReservationData(true)
     *             .outputFile("/tmp/vpns")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static Output<GetGatewaysResult> getGateways(GetGatewaysArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("alicloud:vpn/getGateways:getGateways", TypeShape.of(GetGatewaysResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The VPNs data source lists a number of VPNs resource information owned by an Alicloud account.
     * 
     * &gt; **NOTE:** Available since v1.18.0.
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.alicloud.AlicloudFunctions;
     * import com.pulumi.alicloud.inputs.GetZonesArgs;
     * import com.pulumi.alicloud.vpc.VpcFunctions;
     * import com.pulumi.alicloud.vpc.inputs.GetNetworksArgs;
     * import com.pulumi.alicloud.vpc.inputs.GetSwitchesArgs;
     * import com.pulumi.alicloud.vpc.Switch;
     * import com.pulumi.alicloud.vpc.SwitchArgs;
     * import com.pulumi.std.StdFunctions;
     * import com.pulumi.std.inputs.CidrsubnetArgs;
     * import com.pulumi.std.inputs.ConcatArgs;
     * import com.pulumi.alicloud.vpn.Gateway;
     * import com.pulumi.alicloud.vpn.GatewayArgs;
     * import com.pulumi.alicloud.vpn.VpnFunctions;
     * import com.pulumi.alicloud.vpn.inputs.GetGatewaysArgs;
     * import com.pulumi.codegen.internal.KeyedValue;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var config = ctx.config();
     *         final var name = config.get("name").orElse("terraform-example");
     *         final var spec = config.get("spec").orElse("20");
     *         final var default = AlicloudFunctions.getZones(GetZonesArgs.builder()
     *             .availableResourceCreation("VSwitch")
     *             .build());
     * 
     *         final var defaultGetNetworks = VpcFunctions.getNetworks(GetNetworksArgs.builder()
     *             .nameRegex("^default-NODELETING$")
     *             .build());
     * 
     *         final var defaultGetSwitches = VpcFunctions.getSwitches(GetSwitchesArgs.builder()
     *             .vpcId(defaultGetNetworks.ids()[0])
     *             .zoneId("me-east-1a")
     *             .build());
     * 
     *         for (var i = 0; i < defaultGetSwitches.ids().length().applyValue(_length -> _length > 0 ? 0 : 1); i++) {
     *             new Switch("vswitch-" + i, SwitchArgs.builder()
     *                 .vpcId(defaultGetNetworks.ids()[0])
     *                 .cidrBlock(StdFunctions.cidrsubnet(CidrsubnetArgs.builder()
     *                     .input(defaultGetNetworks.vpcs()[0].cidrBlock())
     *                     .newbits(8)
     *                     .netnum(8)
     *                     .build()).result())
     *                 .zoneId("me-east-1a")
     *                 .vswitchName(name)
     *                 .build());
     * 
     *         
     * }
     *         final var vswitchId = defaultGetSwitches.ids().length().applyValue(_length -> _length > 0 ? defaultGetSwitches.ids()[0] : StdFunctions.concat(ConcatArgs.builder()
     *             .input(            
     *                 vswitch.stream().map(element -> element.id()).collect(toList()),
     *                 "")
     *             .build()).result()[0]);
     * 
     *         var defaultGateway = new Gateway("defaultGateway", GatewayArgs.builder()
     *             .vpnType("Normal")
     *             .vpnGatewayName(name)
     *             .vswitchId(vswitchId)
     *             .autoPay(true)
     *             .vpcId(defaultGetNetworks.ids()[0])
     *             .networkType("public")
     *             .paymentType("Subscription")
     *             .enableIpsec(true)
     *             .bandwidth(spec)
     *             .build());
     * 
     *         final var vpnGateways = VpnFunctions.getGateways(GetGatewaysArgs.builder()
     *             .ids(defaultGateway.id())
     *             .includeReservationData(true)
     *             .outputFile("/tmp/vpns")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static CompletableFuture<GetGatewaysResult> getGatewaysPlain(GetGatewaysPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("alicloud:vpn/getGateways:getGateways", TypeShape.of(GetGatewaysResult.class), args, Utilities.withVersion(options));
    }
}
