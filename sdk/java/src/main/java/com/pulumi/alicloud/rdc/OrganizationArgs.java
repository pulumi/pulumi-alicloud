// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.rdc;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class OrganizationArgs extends com.pulumi.resources.ResourceArgs {

    public static final OrganizationArgs Empty = new OrganizationArgs();

    /**
     * The desired member count.
     * 
     */
    @Import(name="desiredMemberCount")
    private @Nullable Output<Integer> desiredMemberCount;

    /**
     * @return The desired member count.
     * 
     */
    public Optional<Output<Integer>> desiredMemberCount() {
        return Optional.ofNullable(this.desiredMemberCount);
    }

    /**
     * Company name.
     * 
     */
    @Import(name="organizationName", required=true)
    private Output<String> organizationName;

    /**
     * @return Company name.
     * 
     */
    public Output<String> organizationName() {
        return this.organizationName;
    }

    /**
     * User pk, not required, only required when the ak used by the calling interface is inconsistent with the user pk
     * 
     */
    @Import(name="realPk")
    private @Nullable Output<String> realPk;

    /**
     * @return User pk, not required, only required when the ak used by the calling interface is inconsistent with the user pk
     * 
     */
    public Optional<Output<String>> realPk() {
        return Optional.ofNullable(this.realPk);
    }

    /**
     * This is organization source information
     * 
     */
    @Import(name="source", required=true)
    private Output<String> source;

    /**
     * @return This is organization source information
     * 
     */
    public Output<String> source() {
        return this.source;
    }

    private OrganizationArgs() {}

    private OrganizationArgs(OrganizationArgs $) {
        this.desiredMemberCount = $.desiredMemberCount;
        this.organizationName = $.organizationName;
        this.realPk = $.realPk;
        this.source = $.source;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(OrganizationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private OrganizationArgs $;

        public Builder() {
            $ = new OrganizationArgs();
        }

        public Builder(OrganizationArgs defaults) {
            $ = new OrganizationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param desiredMemberCount The desired member count.
         * 
         * @return builder
         * 
         */
        public Builder desiredMemberCount(@Nullable Output<Integer> desiredMemberCount) {
            $.desiredMemberCount = desiredMemberCount;
            return this;
        }

        /**
         * @param desiredMemberCount The desired member count.
         * 
         * @return builder
         * 
         */
        public Builder desiredMemberCount(Integer desiredMemberCount) {
            return desiredMemberCount(Output.of(desiredMemberCount));
        }

        /**
         * @param organizationName Company name.
         * 
         * @return builder
         * 
         */
        public Builder organizationName(Output<String> organizationName) {
            $.organizationName = organizationName;
            return this;
        }

        /**
         * @param organizationName Company name.
         * 
         * @return builder
         * 
         */
        public Builder organizationName(String organizationName) {
            return organizationName(Output.of(organizationName));
        }

        /**
         * @param realPk User pk, not required, only required when the ak used by the calling interface is inconsistent with the user pk
         * 
         * @return builder
         * 
         */
        public Builder realPk(@Nullable Output<String> realPk) {
            $.realPk = realPk;
            return this;
        }

        /**
         * @param realPk User pk, not required, only required when the ak used by the calling interface is inconsistent with the user pk
         * 
         * @return builder
         * 
         */
        public Builder realPk(String realPk) {
            return realPk(Output.of(realPk));
        }

        /**
         * @param source This is organization source information
         * 
         * @return builder
         * 
         */
        public Builder source(Output<String> source) {
            $.source = source;
            return this;
        }

        /**
         * @param source This is organization source information
         * 
         * @return builder
         * 
         */
        public Builder source(String source) {
            return source(Output.of(source));
        }

        public OrganizationArgs build() {
            if ($.organizationName == null) {
                throw new MissingRequiredPropertyException("OrganizationArgs", "organizationName");
            }
            if ($.source == null) {
                throw new MissingRequiredPropertyException("OrganizationArgs", "source");
            }
            return $;
        }
    }

}
