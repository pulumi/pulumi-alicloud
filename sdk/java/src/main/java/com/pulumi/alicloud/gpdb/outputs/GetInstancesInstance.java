// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.gpdb.outputs;

import com.pulumi.alicloud.gpdb.outputs.GetInstancesInstanceIpWhitelist;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetInstancesInstance {
    /**
     * @return Instance availability zone.
     * 
     */
    private String availabilityZone;
    private String chargeType;
    /**
     * @return The connection string of the instance.
     * 
     */
    private String connectionString;
    /**
     * @return The number of CPU cores of the computing node. Unit: Core.
     * 
     */
    private String cpuCores;
    /**
     * @return The time when the instance was created. The time is in the YYYY-MM-DDThh:mm:ssZ format, such as 2011-05-30T12:11:4Z.
     * 
     */
    private String createTime;
    private String creationTime;
    /**
     * @return The db instance category. Valid values: `HighAvailability`, `Basic`.
     * 
     */
    private String dbInstanceCategory;
    /**
     * @return The db instance class.
     * 
     */
    private String dbInstanceClass;
    /**
     * @return The db instance id.
     * 
     */
    private String dbInstanceId;
    /**
     * @return The db instance mode. Valid values: `StorageElastic`, `Serverless`, `Classic`.
     * 
     */
    private String dbInstanceMode;
    /**
     * @return The description of the instance.
     * 
     */
    private String description;
    /**
     * @return The database engine used by the instance.
     * 
     */
    private String engine;
    /**
     * @return The version of the database engine used by the instance.
     * 
     */
    private String engineVersion;
    /**
     * @return The ID of the db Instance.
     * 
     */
    private String id;
    /**
     * @return The network type of the instance.
     * 
     */
    private String instanceNetworkType;
    /**
     * @return The ip whitelist.
     * 
     */
    private List<GetInstancesInstanceIpWhitelist> ipWhitelists;
    /**
     * @return The end time of the maintenance window for the instance.
     * 
     */
    private String maintainEndTime;
    /**
     * @return The start time of the maintenance window for the instance.
     * 
     */
    private String maintainStartTime;
    /**
     * @return The number of Master nodes. Valid values: 1 to 2. if it is not filled in, the default value is 1 Master node.
     * 
     */
    private String masterNodeNum;
    /**
     * @return The memory size of the compute node.
     * 
     */
    private String memorySize;
    /**
     * @return The billing method of the instance. Valid values: `Subscription`, `PayAsYouGo`.
     * 
     */
    private String paymentType;
    /**
     * @return Region ID the instance belongs to.
     * 
     */
    private String regionId;
    /**
     * @return Calculate the number of nodes. The value range of the high-availability version of the storage elastic mode is 4 to 512, and the value must be a multiple of 4. The value range of the basic version of the storage elastic mode is 2 to 512, and the value must be a multiple of 2. The-Serverless version has a value range of 2 to 512. The value must be a multiple of 2.
     * 
     */
    private String segNodeNum;
    /**
     * @return The status of the instance. Valid values: `Creating`, `DBInstanceClassChanging`, `DBInstanceNetTypeChanging`, `Deleting`, `EngineVersionUpgrading`, `GuardDBInstanceCreating`, `GuardSwitching`, `Importing`, `ImportingFromOtherInstance`, `Rebooting`, `Restoring`, `Running`, `Transfering`, `TransferingToOtherInstance`.
     * 
     */
    private String status;
    /**
     * @return The storage capacity. Unit: GB. Value: `50` to `4000`.
     * 
     */
    private Integer storageSize;
    /**
     * @return The type of disks. Valid values: `cloud_essd`, `cloud_efficiency`.
     * 
     */
    private String storageType;
    /**
     * @return The tags of the instance.
     * 
     */
    private Map<String,Object> tags;
    /**
     * @return The ID of the VPC。.
     * 
     */
    private String vpcId;
    /**
     * @return The vswitch id.
     * 
     */
    private String vswitchId;
    /**
     * @return The zone ID of the instance.
     * 
     */
    private String zoneId;

    private GetInstancesInstance() {}
    /**
     * @return Instance availability zone.
     * 
     */
    public String availabilityZone() {
        return this.availabilityZone;
    }
    public String chargeType() {
        return this.chargeType;
    }
    /**
     * @return The connection string of the instance.
     * 
     */
    public String connectionString() {
        return this.connectionString;
    }
    /**
     * @return The number of CPU cores of the computing node. Unit: Core.
     * 
     */
    public String cpuCores() {
        return this.cpuCores;
    }
    /**
     * @return The time when the instance was created. The time is in the YYYY-MM-DDThh:mm:ssZ format, such as 2011-05-30T12:11:4Z.
     * 
     */
    public String createTime() {
        return this.createTime;
    }
    public String creationTime() {
        return this.creationTime;
    }
    /**
     * @return The db instance category. Valid values: `HighAvailability`, `Basic`.
     * 
     */
    public String dbInstanceCategory() {
        return this.dbInstanceCategory;
    }
    /**
     * @return The db instance class.
     * 
     */
    public String dbInstanceClass() {
        return this.dbInstanceClass;
    }
    /**
     * @return The db instance id.
     * 
     */
    public String dbInstanceId() {
        return this.dbInstanceId;
    }
    /**
     * @return The db instance mode. Valid values: `StorageElastic`, `Serverless`, `Classic`.
     * 
     */
    public String dbInstanceMode() {
        return this.dbInstanceMode;
    }
    /**
     * @return The description of the instance.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return The database engine used by the instance.
     * 
     */
    public String engine() {
        return this.engine;
    }
    /**
     * @return The version of the database engine used by the instance.
     * 
     */
    public String engineVersion() {
        return this.engineVersion;
    }
    /**
     * @return The ID of the db Instance.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The network type of the instance.
     * 
     */
    public String instanceNetworkType() {
        return this.instanceNetworkType;
    }
    /**
     * @return The ip whitelist.
     * 
     */
    public List<GetInstancesInstanceIpWhitelist> ipWhitelists() {
        return this.ipWhitelists;
    }
    /**
     * @return The end time of the maintenance window for the instance.
     * 
     */
    public String maintainEndTime() {
        return this.maintainEndTime;
    }
    /**
     * @return The start time of the maintenance window for the instance.
     * 
     */
    public String maintainStartTime() {
        return this.maintainStartTime;
    }
    /**
     * @return The number of Master nodes. Valid values: 1 to 2. if it is not filled in, the default value is 1 Master node.
     * 
     */
    public String masterNodeNum() {
        return this.masterNodeNum;
    }
    /**
     * @return The memory size of the compute node.
     * 
     */
    public String memorySize() {
        return this.memorySize;
    }
    /**
     * @return The billing method of the instance. Valid values: `Subscription`, `PayAsYouGo`.
     * 
     */
    public String paymentType() {
        return this.paymentType;
    }
    /**
     * @return Region ID the instance belongs to.
     * 
     */
    public String regionId() {
        return this.regionId;
    }
    /**
     * @return Calculate the number of nodes. The value range of the high-availability version of the storage elastic mode is 4 to 512, and the value must be a multiple of 4. The value range of the basic version of the storage elastic mode is 2 to 512, and the value must be a multiple of 2. The-Serverless version has a value range of 2 to 512. The value must be a multiple of 2.
     * 
     */
    public String segNodeNum() {
        return this.segNodeNum;
    }
    /**
     * @return The status of the instance. Valid values: `Creating`, `DBInstanceClassChanging`, `DBInstanceNetTypeChanging`, `Deleting`, `EngineVersionUpgrading`, `GuardDBInstanceCreating`, `GuardSwitching`, `Importing`, `ImportingFromOtherInstance`, `Rebooting`, `Restoring`, `Running`, `Transfering`, `TransferingToOtherInstance`.
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return The storage capacity. Unit: GB. Value: `50` to `4000`.
     * 
     */
    public Integer storageSize() {
        return this.storageSize;
    }
    /**
     * @return The type of disks. Valid values: `cloud_essd`, `cloud_efficiency`.
     * 
     */
    public String storageType() {
        return this.storageType;
    }
    /**
     * @return The tags of the instance.
     * 
     */
    public Map<String,Object> tags() {
        return this.tags;
    }
    /**
     * @return The ID of the VPC。.
     * 
     */
    public String vpcId() {
        return this.vpcId;
    }
    /**
     * @return The vswitch id.
     * 
     */
    public String vswitchId() {
        return this.vswitchId;
    }
    /**
     * @return The zone ID of the instance.
     * 
     */
    public String zoneId() {
        return this.zoneId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetInstancesInstance defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String availabilityZone;
        private String chargeType;
        private String connectionString;
        private String cpuCores;
        private String createTime;
        private String creationTime;
        private String dbInstanceCategory;
        private String dbInstanceClass;
        private String dbInstanceId;
        private String dbInstanceMode;
        private String description;
        private String engine;
        private String engineVersion;
        private String id;
        private String instanceNetworkType;
        private List<GetInstancesInstanceIpWhitelist> ipWhitelists;
        private String maintainEndTime;
        private String maintainStartTime;
        private String masterNodeNum;
        private String memorySize;
        private String paymentType;
        private String regionId;
        private String segNodeNum;
        private String status;
        private Integer storageSize;
        private String storageType;
        private Map<String,Object> tags;
        private String vpcId;
        private String vswitchId;
        private String zoneId;
        public Builder() {}
        public Builder(GetInstancesInstance defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.availabilityZone = defaults.availabilityZone;
    	      this.chargeType = defaults.chargeType;
    	      this.connectionString = defaults.connectionString;
    	      this.cpuCores = defaults.cpuCores;
    	      this.createTime = defaults.createTime;
    	      this.creationTime = defaults.creationTime;
    	      this.dbInstanceCategory = defaults.dbInstanceCategory;
    	      this.dbInstanceClass = defaults.dbInstanceClass;
    	      this.dbInstanceId = defaults.dbInstanceId;
    	      this.dbInstanceMode = defaults.dbInstanceMode;
    	      this.description = defaults.description;
    	      this.engine = defaults.engine;
    	      this.engineVersion = defaults.engineVersion;
    	      this.id = defaults.id;
    	      this.instanceNetworkType = defaults.instanceNetworkType;
    	      this.ipWhitelists = defaults.ipWhitelists;
    	      this.maintainEndTime = defaults.maintainEndTime;
    	      this.maintainStartTime = defaults.maintainStartTime;
    	      this.masterNodeNum = defaults.masterNodeNum;
    	      this.memorySize = defaults.memorySize;
    	      this.paymentType = defaults.paymentType;
    	      this.regionId = defaults.regionId;
    	      this.segNodeNum = defaults.segNodeNum;
    	      this.status = defaults.status;
    	      this.storageSize = defaults.storageSize;
    	      this.storageType = defaults.storageType;
    	      this.tags = defaults.tags;
    	      this.vpcId = defaults.vpcId;
    	      this.vswitchId = defaults.vswitchId;
    	      this.zoneId = defaults.zoneId;
        }

        @CustomType.Setter
        public Builder availabilityZone(String availabilityZone) {
            if (availabilityZone == null) {
              throw new MissingRequiredPropertyException("GetInstancesInstance", "availabilityZone");
            }
            this.availabilityZone = availabilityZone;
            return this;
        }
        @CustomType.Setter
        public Builder chargeType(String chargeType) {
            if (chargeType == null) {
              throw new MissingRequiredPropertyException("GetInstancesInstance", "chargeType");
            }
            this.chargeType = chargeType;
            return this;
        }
        @CustomType.Setter
        public Builder connectionString(String connectionString) {
            if (connectionString == null) {
              throw new MissingRequiredPropertyException("GetInstancesInstance", "connectionString");
            }
            this.connectionString = connectionString;
            return this;
        }
        @CustomType.Setter
        public Builder cpuCores(String cpuCores) {
            if (cpuCores == null) {
              throw new MissingRequiredPropertyException("GetInstancesInstance", "cpuCores");
            }
            this.cpuCores = cpuCores;
            return this;
        }
        @CustomType.Setter
        public Builder createTime(String createTime) {
            if (createTime == null) {
              throw new MissingRequiredPropertyException("GetInstancesInstance", "createTime");
            }
            this.createTime = createTime;
            return this;
        }
        @CustomType.Setter
        public Builder creationTime(String creationTime) {
            if (creationTime == null) {
              throw new MissingRequiredPropertyException("GetInstancesInstance", "creationTime");
            }
            this.creationTime = creationTime;
            return this;
        }
        @CustomType.Setter
        public Builder dbInstanceCategory(String dbInstanceCategory) {
            if (dbInstanceCategory == null) {
              throw new MissingRequiredPropertyException("GetInstancesInstance", "dbInstanceCategory");
            }
            this.dbInstanceCategory = dbInstanceCategory;
            return this;
        }
        @CustomType.Setter
        public Builder dbInstanceClass(String dbInstanceClass) {
            if (dbInstanceClass == null) {
              throw new MissingRequiredPropertyException("GetInstancesInstance", "dbInstanceClass");
            }
            this.dbInstanceClass = dbInstanceClass;
            return this;
        }
        @CustomType.Setter
        public Builder dbInstanceId(String dbInstanceId) {
            if (dbInstanceId == null) {
              throw new MissingRequiredPropertyException("GetInstancesInstance", "dbInstanceId");
            }
            this.dbInstanceId = dbInstanceId;
            return this;
        }
        @CustomType.Setter
        public Builder dbInstanceMode(String dbInstanceMode) {
            if (dbInstanceMode == null) {
              throw new MissingRequiredPropertyException("GetInstancesInstance", "dbInstanceMode");
            }
            this.dbInstanceMode = dbInstanceMode;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetInstancesInstance", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder engine(String engine) {
            if (engine == null) {
              throw new MissingRequiredPropertyException("GetInstancesInstance", "engine");
            }
            this.engine = engine;
            return this;
        }
        @CustomType.Setter
        public Builder engineVersion(String engineVersion) {
            if (engineVersion == null) {
              throw new MissingRequiredPropertyException("GetInstancesInstance", "engineVersion");
            }
            this.engineVersion = engineVersion;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetInstancesInstance", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder instanceNetworkType(String instanceNetworkType) {
            if (instanceNetworkType == null) {
              throw new MissingRequiredPropertyException("GetInstancesInstance", "instanceNetworkType");
            }
            this.instanceNetworkType = instanceNetworkType;
            return this;
        }
        @CustomType.Setter
        public Builder ipWhitelists(List<GetInstancesInstanceIpWhitelist> ipWhitelists) {
            if (ipWhitelists == null) {
              throw new MissingRequiredPropertyException("GetInstancesInstance", "ipWhitelists");
            }
            this.ipWhitelists = ipWhitelists;
            return this;
        }
        public Builder ipWhitelists(GetInstancesInstanceIpWhitelist... ipWhitelists) {
            return ipWhitelists(List.of(ipWhitelists));
        }
        @CustomType.Setter
        public Builder maintainEndTime(String maintainEndTime) {
            if (maintainEndTime == null) {
              throw new MissingRequiredPropertyException("GetInstancesInstance", "maintainEndTime");
            }
            this.maintainEndTime = maintainEndTime;
            return this;
        }
        @CustomType.Setter
        public Builder maintainStartTime(String maintainStartTime) {
            if (maintainStartTime == null) {
              throw new MissingRequiredPropertyException("GetInstancesInstance", "maintainStartTime");
            }
            this.maintainStartTime = maintainStartTime;
            return this;
        }
        @CustomType.Setter
        public Builder masterNodeNum(String masterNodeNum) {
            if (masterNodeNum == null) {
              throw new MissingRequiredPropertyException("GetInstancesInstance", "masterNodeNum");
            }
            this.masterNodeNum = masterNodeNum;
            return this;
        }
        @CustomType.Setter
        public Builder memorySize(String memorySize) {
            if (memorySize == null) {
              throw new MissingRequiredPropertyException("GetInstancesInstance", "memorySize");
            }
            this.memorySize = memorySize;
            return this;
        }
        @CustomType.Setter
        public Builder paymentType(String paymentType) {
            if (paymentType == null) {
              throw new MissingRequiredPropertyException("GetInstancesInstance", "paymentType");
            }
            this.paymentType = paymentType;
            return this;
        }
        @CustomType.Setter
        public Builder regionId(String regionId) {
            if (regionId == null) {
              throw new MissingRequiredPropertyException("GetInstancesInstance", "regionId");
            }
            this.regionId = regionId;
            return this;
        }
        @CustomType.Setter
        public Builder segNodeNum(String segNodeNum) {
            if (segNodeNum == null) {
              throw new MissingRequiredPropertyException("GetInstancesInstance", "segNodeNum");
            }
            this.segNodeNum = segNodeNum;
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            if (status == null) {
              throw new MissingRequiredPropertyException("GetInstancesInstance", "status");
            }
            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder storageSize(Integer storageSize) {
            if (storageSize == null) {
              throw new MissingRequiredPropertyException("GetInstancesInstance", "storageSize");
            }
            this.storageSize = storageSize;
            return this;
        }
        @CustomType.Setter
        public Builder storageType(String storageType) {
            if (storageType == null) {
              throw new MissingRequiredPropertyException("GetInstancesInstance", "storageType");
            }
            this.storageType = storageType;
            return this;
        }
        @CustomType.Setter
        public Builder tags(Map<String,Object> tags) {
            if (tags == null) {
              throw new MissingRequiredPropertyException("GetInstancesInstance", "tags");
            }
            this.tags = tags;
            return this;
        }
        @CustomType.Setter
        public Builder vpcId(String vpcId) {
            if (vpcId == null) {
              throw new MissingRequiredPropertyException("GetInstancesInstance", "vpcId");
            }
            this.vpcId = vpcId;
            return this;
        }
        @CustomType.Setter
        public Builder vswitchId(String vswitchId) {
            if (vswitchId == null) {
              throw new MissingRequiredPropertyException("GetInstancesInstance", "vswitchId");
            }
            this.vswitchId = vswitchId;
            return this;
        }
        @CustomType.Setter
        public Builder zoneId(String zoneId) {
            if (zoneId == null) {
              throw new MissingRequiredPropertyException("GetInstancesInstance", "zoneId");
            }
            this.zoneId = zoneId;
            return this;
        }
        public GetInstancesInstance build() {
            final var _resultValue = new GetInstancesInstance();
            _resultValue.availabilityZone = availabilityZone;
            _resultValue.chargeType = chargeType;
            _resultValue.connectionString = connectionString;
            _resultValue.cpuCores = cpuCores;
            _resultValue.createTime = createTime;
            _resultValue.creationTime = creationTime;
            _resultValue.dbInstanceCategory = dbInstanceCategory;
            _resultValue.dbInstanceClass = dbInstanceClass;
            _resultValue.dbInstanceId = dbInstanceId;
            _resultValue.dbInstanceMode = dbInstanceMode;
            _resultValue.description = description;
            _resultValue.engine = engine;
            _resultValue.engineVersion = engineVersion;
            _resultValue.id = id;
            _resultValue.instanceNetworkType = instanceNetworkType;
            _resultValue.ipWhitelists = ipWhitelists;
            _resultValue.maintainEndTime = maintainEndTime;
            _resultValue.maintainStartTime = maintainStartTime;
            _resultValue.masterNodeNum = masterNodeNum;
            _resultValue.memorySize = memorySize;
            _resultValue.paymentType = paymentType;
            _resultValue.regionId = regionId;
            _resultValue.segNodeNum = segNodeNum;
            _resultValue.status = status;
            _resultValue.storageSize = storageSize;
            _resultValue.storageType = storageType;
            _resultValue.tags = tags;
            _resultValue.vpcId = vpcId;
            _resultValue.vswitchId = vswitchId;
            _resultValue.zoneId = zoneId;
            return _resultValue;
        }
    }
}
