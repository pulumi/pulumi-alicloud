// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.amqp;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class InstanceArgs extends com.pulumi.resources.ResourceArgs {

    public static final InstanceArgs Empty = new InstanceArgs();

    /**
     * Renewal method. Automatic renewal: true; Manual renewal: false. When RenewalStatus has a value, the value of RenewalStatus shall prevail.
     * 
     */
    @Import(name="autoRenew")
    private @Nullable Output<Boolean> autoRenew;

    /**
     * @return Renewal method. Automatic renewal: true; Manual renewal: false. When RenewalStatus has a value, the value of RenewalStatus shall prevail.
     * 
     */
    public Optional<Output<Boolean>> autoRenew() {
        return Optional.ofNullable(this.autoRenew);
    }

    /**
     * The instance name.
     * 
     */
    @Import(name="instanceName")
    private @Nullable Output<String> instanceName;

    /**
     * @return The instance name.
     * 
     */
    public Optional<Output<String>> instanceName() {
        return Optional.ofNullable(this.instanceName);
    }

    /**
     * Instance type. Valid values:
     * - professional: professional Edition
     * - enterprise: enterprise Edition
     * - vip: Platinum Edition.
     * - serverless: Serverless Edition.
     * &gt; **NOTE:** There should not set the `instance_type` parameter when creating a serverless instance. Only need to set `payment_type = &#34;PayAsYouGo&#34;` and `serverless_charge_type = &#34;onDemand&#34;`.
     * 
     */
    @Import(name="instanceType")
    private @Nullable Output<String> instanceType;

    /**
     * @return Instance type. Valid values:
     * - professional: professional Edition
     * - enterprise: enterprise Edition
     * - vip: Platinum Edition.
     * - serverless: Serverless Edition.
     * &gt; **NOTE:** There should not set the `instance_type` parameter when creating a serverless instance. Only need to set `payment_type = &#34;PayAsYouGo&#34;` and `serverless_charge_type = &#34;onDemand&#34;`.
     * 
     */
    public Optional<Output<String>> instanceType() {
        return Optional.ofNullable(this.instanceType);
    }

    /**
     * The maximum number of connections, according to the value given on the purchase page of the cloud message queue RabbitMQ version console.
     * 
     */
    @Import(name="maxConnections")
    private @Nullable Output<Integer> maxConnections;

    /**
     * @return The maximum number of connections, according to the value given on the purchase page of the cloud message queue RabbitMQ version console.
     * 
     */
    public Optional<Output<Integer>> maxConnections() {
        return Optional.ofNullable(this.maxConnections);
    }

    /**
     * Peak TPS traffic of the public network, which must be a multiple of 128, unit: times per second.
     * 
     */
    @Import(name="maxEipTps")
    private @Nullable Output<String> maxEipTps;

    /**
     * @return Peak TPS traffic of the public network, which must be a multiple of 128, unit: times per second.
     * 
     */
    public Optional<Output<String>> maxEipTps() {
        return Optional.ofNullable(this.maxEipTps);
    }

    /**
     * Configure the private network TPS traffic peak, please set the value according to the cloud message queue RabbitMQ version of the console purchase page given.
     * 
     */
    @Import(name="maxTps")
    private @Nullable Output<String> maxTps;

    /**
     * @return Configure the private network TPS traffic peak, please set the value according to the cloud message queue RabbitMQ version of the console purchase page given.
     * 
     */
    public Optional<Output<String>> maxTps() {
        return Optional.ofNullable(this.maxTps);
    }

    /**
     * This parameter must be provided while you change the instance specification. Type of instance lifting and lowering:
     * - Upgrade: Upgrade
     * - Downgrade: Downgrading.
     * 
     */
    @Import(name="modifyType")
    private @Nullable Output<String> modifyType;

    /**
     * @return This parameter must be provided while you change the instance specification. Type of instance lifting and lowering:
     * - Upgrade: Upgrade
     * - Downgrade: Downgrading.
     * 
     */
    public Optional<Output<String>> modifyType() {
        return Optional.ofNullable(this.modifyType);
    }

    /**
     * The Payment type. Valid value:
     * - Subscription: Pre-paid.
     * - PayAsYouGo: Post-paid, and for serverless Edition.
     * 
     */
    @Import(name="paymentType", required=true)
    private Output<String> paymentType;

    /**
     * @return The Payment type. Valid value:
     * - Subscription: Pre-paid.
     * - PayAsYouGo: Post-paid, and for serverless Edition.
     * 
     */
    public Output<String> paymentType() {
        return this.paymentType;
    }

    /**
     * Prepayment cycle, unit: periodCycle. This parameter is valid when PaymentType is set to Subscription.
     * 
     */
    @Import(name="period")
    private @Nullable Output<Integer> period;

    /**
     * @return Prepayment cycle, unit: periodCycle. This parameter is valid when PaymentType is set to Subscription.
     * 
     */
    public Optional<Output<Integer>> period() {
        return Optional.ofNullable(this.period);
    }

    /**
     * Prepaid cycle units. Value: Month, Year.
     * 
     */
    @Import(name="periodCycle")
    private @Nullable Output<String> periodCycle;

    /**
     * @return Prepaid cycle units. Value: Month, Year.
     * 
     */
    public Optional<Output<String>> periodCycle() {
        return Optional.ofNullable(this.periodCycle);
    }

    /**
     * Configure the maximum number of queues. The value range is as follows:  Professional version:[50,1000], minimum modification step size is 5  Enterprise Edition:[200,6000], minimum modification step size is 100  Platinum version:[10000,80000], minimum modification step size is 100.
     * 
     */
    @Import(name="queueCapacity")
    private @Nullable Output<String> queueCapacity;

    /**
     * @return Configure the maximum number of queues. The value range is as follows:  Professional version:[50,1000], minimum modification step size is 5  Enterprise Edition:[200,6000], minimum modification step size is 100  Platinum version:[10000,80000], minimum modification step size is 100.
     * 
     */
    public Optional<Output<String>> queueCapacity() {
        return Optional.ofNullable(this.queueCapacity);
    }

    /**
     * The number of automatic renewal cycles.
     * 
     */
    @Import(name="renewalDuration")
    private @Nullable Output<Integer> renewalDuration;

    /**
     * @return The number of automatic renewal cycles.
     * 
     */
    public Optional<Output<Integer>> renewalDuration() {
        return Optional.ofNullable(this.renewalDuration);
    }

    /**
     * Auto-Renewal Cycle Unit Values Include: Month: Month. Year: Years.
     * 
     */
    @Import(name="renewalDurationUnit")
    private @Nullable Output<String> renewalDurationUnit;

    /**
     * @return Auto-Renewal Cycle Unit Values Include: Month: Month. Year: Years.
     * 
     */
    public Optional<Output<String>> renewalDurationUnit() {
        return Optional.ofNullable(this.renewalDurationUnit);
    }

    /**
     * The renewal status. Value: AutoRenewal: automatic renewal. ManualRenewal: manual renewal. NotRenewal: no renewal.
     * 
     */
    @Import(name="renewalStatus")
    private @Nullable Output<String> renewalStatus;

    /**
     * @return The renewal status. Value: AutoRenewal: automatic renewal. ManualRenewal: manual renewal. NotRenewal: no renewal.
     * 
     */
    public Optional<Output<String>> renewalStatus() {
        return Optional.ofNullable(this.renewalStatus);
    }

    /**
     * The billing type of the serverless instance. Value: onDemand.
     * 
     */
    @Import(name="serverlessChargeType")
    private @Nullable Output<String> serverlessChargeType;

    /**
     * @return The billing type of the serverless instance. Value: onDemand.
     * 
     */
    public Optional<Output<String>> serverlessChargeType() {
        return Optional.ofNullable(this.serverlessChargeType);
    }

    /**
     * Configure the message storage space. Unit: GB. The value is as follows:  Professional Edition and Enterprise Edition: Fixed to 0. Description A value of 0 indicates that the Professional Edition and Enterprise Edition instances do not charge storage fees, but do not have storage space. Platinum version example: m × 100, where the value range of m is [7,28].
     * 
     */
    @Import(name="storageSize")
    private @Nullable Output<String> storageSize;

    /**
     * @return Configure the message storage space. Unit: GB. The value is as follows:  Professional Edition and Enterprise Edition: Fixed to 0. Description A value of 0 indicates that the Professional Edition and Enterprise Edition instances do not charge storage fees, but do not have storage space. Platinum version example: m × 100, where the value range of m is [7,28].
     * 
     */
    public Optional<Output<String>> storageSize() {
        return Optional.ofNullable(this.storageSize);
    }

    /**
     * Whether to support public network.
     * 
     */
    @Import(name="supportEip")
    private @Nullable Output<Boolean> supportEip;

    /**
     * @return Whether to support public network.
     * 
     */
    public Optional<Output<Boolean>> supportEip() {
        return Optional.ofNullable(this.supportEip);
    }

    /**
     * Whether to activate the message trace function. The values are as follows:  true: Enable message trace function false: message trace function is not enabled Description The Platinum Edition instance provides the 15-day message trace function free of charge. The trace function can only be enabled and the trace storage duration can only be set to 15 days. For instances of other specifications, you can enable or disable the trace function.
     * 
     */
    @Import(name="supportTracing")
    private @Nullable Output<Boolean> supportTracing;

    /**
     * @return Whether to activate the message trace function. The values are as follows:  true: Enable message trace function false: message trace function is not enabled Description The Platinum Edition instance provides the 15-day message trace function free of charge. The trace function can only be enabled and the trace storage duration can only be set to 15 days. For instances of other specifications, you can enable or disable the trace function.
     * 
     */
    public Optional<Output<Boolean>> supportTracing() {
        return Optional.ofNullable(this.supportTracing);
    }

    /**
     * Configure the storage duration of message traces. Unit: Days. The value is as follows:  3:3 days 7:7 days 15:15 days This parameter is valid when SupportTracing is true.
     * 
     */
    @Import(name="tracingStorageTime")
    private @Nullable Output<Integer> tracingStorageTime;

    /**
     * @return Configure the storage duration of message traces. Unit: Days. The value is as follows:  3:3 days 7:7 days 15:15 days This parameter is valid when SupportTracing is true.
     * 
     */
    public Optional<Output<Integer>> tracingStorageTime() {
        return Optional.ofNullable(this.tracingStorageTime);
    }

    private InstanceArgs() {}

    private InstanceArgs(InstanceArgs $) {
        this.autoRenew = $.autoRenew;
        this.instanceName = $.instanceName;
        this.instanceType = $.instanceType;
        this.maxConnections = $.maxConnections;
        this.maxEipTps = $.maxEipTps;
        this.maxTps = $.maxTps;
        this.modifyType = $.modifyType;
        this.paymentType = $.paymentType;
        this.period = $.period;
        this.periodCycle = $.periodCycle;
        this.queueCapacity = $.queueCapacity;
        this.renewalDuration = $.renewalDuration;
        this.renewalDurationUnit = $.renewalDurationUnit;
        this.renewalStatus = $.renewalStatus;
        this.serverlessChargeType = $.serverlessChargeType;
        this.storageSize = $.storageSize;
        this.supportEip = $.supportEip;
        this.supportTracing = $.supportTracing;
        this.tracingStorageTime = $.tracingStorageTime;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(InstanceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private InstanceArgs $;

        public Builder() {
            $ = new InstanceArgs();
        }

        public Builder(InstanceArgs defaults) {
            $ = new InstanceArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param autoRenew Renewal method. Automatic renewal: true; Manual renewal: false. When RenewalStatus has a value, the value of RenewalStatus shall prevail.
         * 
         * @return builder
         * 
         */
        public Builder autoRenew(@Nullable Output<Boolean> autoRenew) {
            $.autoRenew = autoRenew;
            return this;
        }

        /**
         * @param autoRenew Renewal method. Automatic renewal: true; Manual renewal: false. When RenewalStatus has a value, the value of RenewalStatus shall prevail.
         * 
         * @return builder
         * 
         */
        public Builder autoRenew(Boolean autoRenew) {
            return autoRenew(Output.of(autoRenew));
        }

        /**
         * @param instanceName The instance name.
         * 
         * @return builder
         * 
         */
        public Builder instanceName(@Nullable Output<String> instanceName) {
            $.instanceName = instanceName;
            return this;
        }

        /**
         * @param instanceName The instance name.
         * 
         * @return builder
         * 
         */
        public Builder instanceName(String instanceName) {
            return instanceName(Output.of(instanceName));
        }

        /**
         * @param instanceType Instance type. Valid values:
         * - professional: professional Edition
         * - enterprise: enterprise Edition
         * - vip: Platinum Edition.
         * - serverless: Serverless Edition.
         * &gt; **NOTE:** There should not set the `instance_type` parameter when creating a serverless instance. Only need to set `payment_type = &#34;PayAsYouGo&#34;` and `serverless_charge_type = &#34;onDemand&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder instanceType(@Nullable Output<String> instanceType) {
            $.instanceType = instanceType;
            return this;
        }

        /**
         * @param instanceType Instance type. Valid values:
         * - professional: professional Edition
         * - enterprise: enterprise Edition
         * - vip: Platinum Edition.
         * - serverless: Serverless Edition.
         * &gt; **NOTE:** There should not set the `instance_type` parameter when creating a serverless instance. Only need to set `payment_type = &#34;PayAsYouGo&#34;` and `serverless_charge_type = &#34;onDemand&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder instanceType(String instanceType) {
            return instanceType(Output.of(instanceType));
        }

        /**
         * @param maxConnections The maximum number of connections, according to the value given on the purchase page of the cloud message queue RabbitMQ version console.
         * 
         * @return builder
         * 
         */
        public Builder maxConnections(@Nullable Output<Integer> maxConnections) {
            $.maxConnections = maxConnections;
            return this;
        }

        /**
         * @param maxConnections The maximum number of connections, according to the value given on the purchase page of the cloud message queue RabbitMQ version console.
         * 
         * @return builder
         * 
         */
        public Builder maxConnections(Integer maxConnections) {
            return maxConnections(Output.of(maxConnections));
        }

        /**
         * @param maxEipTps Peak TPS traffic of the public network, which must be a multiple of 128, unit: times per second.
         * 
         * @return builder
         * 
         */
        public Builder maxEipTps(@Nullable Output<String> maxEipTps) {
            $.maxEipTps = maxEipTps;
            return this;
        }

        /**
         * @param maxEipTps Peak TPS traffic of the public network, which must be a multiple of 128, unit: times per second.
         * 
         * @return builder
         * 
         */
        public Builder maxEipTps(String maxEipTps) {
            return maxEipTps(Output.of(maxEipTps));
        }

        /**
         * @param maxTps Configure the private network TPS traffic peak, please set the value according to the cloud message queue RabbitMQ version of the console purchase page given.
         * 
         * @return builder
         * 
         */
        public Builder maxTps(@Nullable Output<String> maxTps) {
            $.maxTps = maxTps;
            return this;
        }

        /**
         * @param maxTps Configure the private network TPS traffic peak, please set the value according to the cloud message queue RabbitMQ version of the console purchase page given.
         * 
         * @return builder
         * 
         */
        public Builder maxTps(String maxTps) {
            return maxTps(Output.of(maxTps));
        }

        /**
         * @param modifyType This parameter must be provided while you change the instance specification. Type of instance lifting and lowering:
         * - Upgrade: Upgrade
         * - Downgrade: Downgrading.
         * 
         * @return builder
         * 
         */
        public Builder modifyType(@Nullable Output<String> modifyType) {
            $.modifyType = modifyType;
            return this;
        }

        /**
         * @param modifyType This parameter must be provided while you change the instance specification. Type of instance lifting and lowering:
         * - Upgrade: Upgrade
         * - Downgrade: Downgrading.
         * 
         * @return builder
         * 
         */
        public Builder modifyType(String modifyType) {
            return modifyType(Output.of(modifyType));
        }

        /**
         * @param paymentType The Payment type. Valid value:
         * - Subscription: Pre-paid.
         * - PayAsYouGo: Post-paid, and for serverless Edition.
         * 
         * @return builder
         * 
         */
        public Builder paymentType(Output<String> paymentType) {
            $.paymentType = paymentType;
            return this;
        }

        /**
         * @param paymentType The Payment type. Valid value:
         * - Subscription: Pre-paid.
         * - PayAsYouGo: Post-paid, and for serverless Edition.
         * 
         * @return builder
         * 
         */
        public Builder paymentType(String paymentType) {
            return paymentType(Output.of(paymentType));
        }

        /**
         * @param period Prepayment cycle, unit: periodCycle. This parameter is valid when PaymentType is set to Subscription.
         * 
         * @return builder
         * 
         */
        public Builder period(@Nullable Output<Integer> period) {
            $.period = period;
            return this;
        }

        /**
         * @param period Prepayment cycle, unit: periodCycle. This parameter is valid when PaymentType is set to Subscription.
         * 
         * @return builder
         * 
         */
        public Builder period(Integer period) {
            return period(Output.of(period));
        }

        /**
         * @param periodCycle Prepaid cycle units. Value: Month, Year.
         * 
         * @return builder
         * 
         */
        public Builder periodCycle(@Nullable Output<String> periodCycle) {
            $.periodCycle = periodCycle;
            return this;
        }

        /**
         * @param periodCycle Prepaid cycle units. Value: Month, Year.
         * 
         * @return builder
         * 
         */
        public Builder periodCycle(String periodCycle) {
            return periodCycle(Output.of(periodCycle));
        }

        /**
         * @param queueCapacity Configure the maximum number of queues. The value range is as follows:  Professional version:[50,1000], minimum modification step size is 5  Enterprise Edition:[200,6000], minimum modification step size is 100  Platinum version:[10000,80000], minimum modification step size is 100.
         * 
         * @return builder
         * 
         */
        public Builder queueCapacity(@Nullable Output<String> queueCapacity) {
            $.queueCapacity = queueCapacity;
            return this;
        }

        /**
         * @param queueCapacity Configure the maximum number of queues. The value range is as follows:  Professional version:[50,1000], minimum modification step size is 5  Enterprise Edition:[200,6000], minimum modification step size is 100  Platinum version:[10000,80000], minimum modification step size is 100.
         * 
         * @return builder
         * 
         */
        public Builder queueCapacity(String queueCapacity) {
            return queueCapacity(Output.of(queueCapacity));
        }

        /**
         * @param renewalDuration The number of automatic renewal cycles.
         * 
         * @return builder
         * 
         */
        public Builder renewalDuration(@Nullable Output<Integer> renewalDuration) {
            $.renewalDuration = renewalDuration;
            return this;
        }

        /**
         * @param renewalDuration The number of automatic renewal cycles.
         * 
         * @return builder
         * 
         */
        public Builder renewalDuration(Integer renewalDuration) {
            return renewalDuration(Output.of(renewalDuration));
        }

        /**
         * @param renewalDurationUnit Auto-Renewal Cycle Unit Values Include: Month: Month. Year: Years.
         * 
         * @return builder
         * 
         */
        public Builder renewalDurationUnit(@Nullable Output<String> renewalDurationUnit) {
            $.renewalDurationUnit = renewalDurationUnit;
            return this;
        }

        /**
         * @param renewalDurationUnit Auto-Renewal Cycle Unit Values Include: Month: Month. Year: Years.
         * 
         * @return builder
         * 
         */
        public Builder renewalDurationUnit(String renewalDurationUnit) {
            return renewalDurationUnit(Output.of(renewalDurationUnit));
        }

        /**
         * @param renewalStatus The renewal status. Value: AutoRenewal: automatic renewal. ManualRenewal: manual renewal. NotRenewal: no renewal.
         * 
         * @return builder
         * 
         */
        public Builder renewalStatus(@Nullable Output<String> renewalStatus) {
            $.renewalStatus = renewalStatus;
            return this;
        }

        /**
         * @param renewalStatus The renewal status. Value: AutoRenewal: automatic renewal. ManualRenewal: manual renewal. NotRenewal: no renewal.
         * 
         * @return builder
         * 
         */
        public Builder renewalStatus(String renewalStatus) {
            return renewalStatus(Output.of(renewalStatus));
        }

        /**
         * @param serverlessChargeType The billing type of the serverless instance. Value: onDemand.
         * 
         * @return builder
         * 
         */
        public Builder serverlessChargeType(@Nullable Output<String> serverlessChargeType) {
            $.serverlessChargeType = serverlessChargeType;
            return this;
        }

        /**
         * @param serverlessChargeType The billing type of the serverless instance. Value: onDemand.
         * 
         * @return builder
         * 
         */
        public Builder serverlessChargeType(String serverlessChargeType) {
            return serverlessChargeType(Output.of(serverlessChargeType));
        }

        /**
         * @param storageSize Configure the message storage space. Unit: GB. The value is as follows:  Professional Edition and Enterprise Edition: Fixed to 0. Description A value of 0 indicates that the Professional Edition and Enterprise Edition instances do not charge storage fees, but do not have storage space. Platinum version example: m × 100, where the value range of m is [7,28].
         * 
         * @return builder
         * 
         */
        public Builder storageSize(@Nullable Output<String> storageSize) {
            $.storageSize = storageSize;
            return this;
        }

        /**
         * @param storageSize Configure the message storage space. Unit: GB. The value is as follows:  Professional Edition and Enterprise Edition: Fixed to 0. Description A value of 0 indicates that the Professional Edition and Enterprise Edition instances do not charge storage fees, but do not have storage space. Platinum version example: m × 100, where the value range of m is [7,28].
         * 
         * @return builder
         * 
         */
        public Builder storageSize(String storageSize) {
            return storageSize(Output.of(storageSize));
        }

        /**
         * @param supportEip Whether to support public network.
         * 
         * @return builder
         * 
         */
        public Builder supportEip(@Nullable Output<Boolean> supportEip) {
            $.supportEip = supportEip;
            return this;
        }

        /**
         * @param supportEip Whether to support public network.
         * 
         * @return builder
         * 
         */
        public Builder supportEip(Boolean supportEip) {
            return supportEip(Output.of(supportEip));
        }

        /**
         * @param supportTracing Whether to activate the message trace function. The values are as follows:  true: Enable message trace function false: message trace function is not enabled Description The Platinum Edition instance provides the 15-day message trace function free of charge. The trace function can only be enabled and the trace storage duration can only be set to 15 days. For instances of other specifications, you can enable or disable the trace function.
         * 
         * @return builder
         * 
         */
        public Builder supportTracing(@Nullable Output<Boolean> supportTracing) {
            $.supportTracing = supportTracing;
            return this;
        }

        /**
         * @param supportTracing Whether to activate the message trace function. The values are as follows:  true: Enable message trace function false: message trace function is not enabled Description The Platinum Edition instance provides the 15-day message trace function free of charge. The trace function can only be enabled and the trace storage duration can only be set to 15 days. For instances of other specifications, you can enable or disable the trace function.
         * 
         * @return builder
         * 
         */
        public Builder supportTracing(Boolean supportTracing) {
            return supportTracing(Output.of(supportTracing));
        }

        /**
         * @param tracingStorageTime Configure the storage duration of message traces. Unit: Days. The value is as follows:  3:3 days 7:7 days 15:15 days This parameter is valid when SupportTracing is true.
         * 
         * @return builder
         * 
         */
        public Builder tracingStorageTime(@Nullable Output<Integer> tracingStorageTime) {
            $.tracingStorageTime = tracingStorageTime;
            return this;
        }

        /**
         * @param tracingStorageTime Configure the storage duration of message traces. Unit: Days. The value is as follows:  3:3 days 7:7 days 15:15 days This parameter is valid when SupportTracing is true.
         * 
         * @return builder
         * 
         */
        public Builder tracingStorageTime(Integer tracingStorageTime) {
            return tracingStorageTime(Output.of(tracingStorageTime));
        }

        public InstanceArgs build() {
            if ($.paymentType == null) {
                throw new MissingRequiredPropertyException("InstanceArgs", "paymentType");
            }
            return $;
        }
    }

}
